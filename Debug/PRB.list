
PRB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017880  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000382c  08017a10  08017a10  00027a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b23c  0801b23c  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  0801b23c  0801b23c  0002b23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b244  0801b244  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b244  0801b244  0002b244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b248  0801b248  0002b248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0801b24c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030084  2**0
                  CONTENTS
 10 .bss          0000d354  20000084  20000084  00030084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000d3d8  2000d3d8  00030084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004c2b9  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009061  00000000  00000000  0007c36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024d8  00000000  00000000  000853d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002320  00000000  00000000  000878a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033df8  00000000  00000000  00089bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003aeb5  00000000  00000000  000bd9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3ead  00000000  00000000  000f8875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001ec722  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009eb0  00000000  00000000  001ec778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080179f8 	.word	0x080179f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	080179f8 	.word	0x080179f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <set_bit>:
 */

#include <control_bit.h>

uint16_t set_bit(uint16_t value, uint8_t num)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	460a      	mov	r2, r1
 8000572:	80fb      	strh	r3, [r7, #6]
 8000574:	4613      	mov	r3, r2
 8000576:	717b      	strb	r3, [r7, #5]
     return value | (1 << num);
 8000578:	797b      	ldrb	r3, [r7, #5]
 800057a:	2201      	movs	r2, #1
 800057c:	fa02 f303 	lsl.w	r3, r2, r3
 8000580:	b21a      	sxth	r2, r3
 8000582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000586:	4313      	orrs	r3, r2
 8000588:	b21b      	sxth	r3, r3
 800058a:	b29b      	uxth	r3, r3
}
 800058c:	4618      	mov	r0, r3
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <ethernet_thread>:

static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer);
static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf);

void ethernet_thread(void *arg)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b0cc      	sub	sp, #304	; 0x130
 800059c:	af02      	add	r7, sp, #8
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	6018      	str	r0, [r3, #0]
	struct netconn *conn;
	struct netbuf *buf;
	ip_addr_t *client_addr;
	unsigned short local_port;
	unsigned short client_port;
	local_port = *((unsigned short*)arg);
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
	void* data;
	uint8_t answer[256];
	u16_t len;
	uint16_t answer_len;
	conn = netconn_new(NETCONN_UDP);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	2020      	movs	r0, #32
 80005b2:	f009 f865 	bl	8009680 <netconn_new_with_proto_and_callback>
 80005b6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
	if (conn!= NULL)
 80005ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d05b      	beq.n	800067a <ethernet_thread+0xe2>
	{
	  err = netconn_bind(conn, IP_ADDR_ANY, local_port);
 80005c2:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 80005c6:	461a      	mov	r2, r3
 80005c8:	492e      	ldr	r1, [pc, #184]	; (8000684 <ethernet_thread+0xec>)
 80005ca:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80005ce:	f009 f911 	bl	80097f4 <netconn_bind>
 80005d2:	4603      	mov	r3, r0
 80005d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	  if (err == ERR_OK)
 80005d8:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d148      	bne.n	8000672 <ethernet_thread+0xda>
	  {
		  for(;;)
		  {
			  recv_err = netconn_recv(conn, &buf);
 80005e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80005e4:	4619      	mov	r1, r3
 80005e6:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80005ea:	f009 fab7 	bl	8009b5c <netconn_recv>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
			  if (recv_err == ERR_OK)
 80005f4:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d1f1      	bne.n	80005e0 <ethernet_thread+0x48>
			  {
				  client_addr = netbuf_fromaddr(buf);
 80005fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000600:	3308      	adds	r3, #8
 8000602:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
				  client_port = netbuf_fromport(buf);
 8000606:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800060a:	899b      	ldrh	r3, [r3, #12]
 800060c:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

				  netbuf_data(buf, &data, &len);
 8000610:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000614:	f107 020a 	add.w	r2, r7, #10
 8000618:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 800061c:	4618      	mov	r0, r3
 800061e:	f00a fe6f 	bl	800b300 <netbuf_data>
				  answer_len = ethernet_answer(data, len, answer);
 8000622:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8000626:	f107 030a 	add.w	r3, r7, #10
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	f107 020c 	add.w	r2, r7, #12
 8000630:	4619      	mov	r1, r3
 8000632:	f000 f859 	bl	80006e8 <ethernet_answer>
 8000636:	4603      	mov	r3, r0
 8000638:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
				  if(answer_len)
 800063c:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8000640:	2b00      	cmp	r3, #0
 8000642:	d010      	beq.n	8000666 <ethernet_thread+0xce>
				  {
					  Send(conn, answer, answer_len, client_addr, client_port, buf);
 8000644:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000648:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 800064c:	f107 010c 	add.w	r1, r7, #12
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800065c:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000660:	f000 f812 	bl	8000688 <Send>
 8000664:	e7bc      	b.n	80005e0 <ethernet_thread+0x48>
				  }
				  else netbuf_delete(buf);
 8000666:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800066a:	4618      	mov	r0, r3
 800066c:	f00a fdde 	bl	800b22c <netbuf_delete>
			  recv_err = netconn_recv(conn, &buf);
 8000670:	e7b6      	b.n	80005e0 <ethernet_thread+0x48>

		  }
	  }
	  else
	  {
	    netconn_delete(conn);
 8000672:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000676:	f009 f8a1 	bl	80097bc <netconn_delete>
	  }
	}
}
 800067a:	bf00      	nop
 800067c:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	0801b0d4 	.word	0x0801b0d4

08000688 <Send>:

static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	4613      	mov	r3, r2
 8000696:	80fb      	strh	r3, [r7, #6]
	u32_t address = addr->addr;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	617b      	str	r3, [r7, #20]
	netbuf_delete(buf);
 800069e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006a0:	f00a fdc4 	bl	800b22c <netbuf_delete>
	buf = netbuf_new();
 80006a4:	f00a fdae 	bl	800b204 <netbuf_new>
 80006a8:	6278      	str	r0, [r7, #36]	; 0x24
	buf->port = port;
 80006aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ac:	8c3a      	ldrh	r2, [r7, #32]
 80006ae:	819a      	strh	r2, [r3, #12]
	addr->addr = address;
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	697a      	ldr	r2, [r7, #20]
 80006b4:	601a      	str	r2, [r3, #0]
	err_t err;
	err  = netbuf_ref(buf, pointer, size);
 80006b6:	88fb      	ldrh	r3, [r7, #6]
 80006b8:	461a      	mov	r2, r3
 80006ba:	68b9      	ldr	r1, [r7, #8]
 80006bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006be:	f00a fdd5 	bl	800b26c <netbuf_ref>
 80006c2:	4603      	mov	r3, r0
 80006c4:	74fb      	strb	r3, [r7, #19]
	if(err==ERR_OK)
 80006c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d108      	bne.n	80006e0 <Send+0x58>
	{
		netconn_sendto(conn, buf, addr, port);
 80006ce:	8c3b      	ldrh	r3, [r7, #32]
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80006d4:	68f8      	ldr	r0, [r7, #12]
 80006d6:	f009 fabb 	bl	8009c50 <netconn_sendto>
		netbuf_delete(buf);
 80006da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006dc:	f00a fda6 	bl	800b22c <netbuf_delete>
	}
}
 80006e0:	bf00      	nop
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <ethernet_answer>:

//Возвращает кол-во байт для отправки клиенту
static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	460b      	mov	r3, r1
 80006f2:	607a      	str	r2, [r7, #4]
 80006f4:	817b      	strh	r3, [r7, #10]
	int result = ModbusParse(data, data_length, answer, ETHERNET);
 80006f6:	8979      	ldrh	r1, [r7, #10]
 80006f8:	2301      	movs	r3, #1
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	68f8      	ldr	r0, [r7, #12]
 80006fe:	f000 f9e3 	bl	8000ac8 <ModbusParse>
 8000702:	6178      	str	r0, [r7, #20]
	if(result)return result;
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <ethernet_answer+0x26>
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	e000      	b.n	8000710 <ethernet_answer+0x28>
	return 0;
 800070e:	2300      	movs	r3, #0
}
 8000710:	4618      	mov	r0, r3
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	4a07      	ldr	r2, [pc, #28]	; (8000744 <vApplicationGetIdleTaskMemory+0x2c>)
 8000728:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	4a06      	ldr	r2, [pc, #24]	; (8000748 <vApplicationGetIdleTaskMemory+0x30>)
 800072e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2280      	movs	r2, #128	; 0x80
 8000734:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000736:	bf00      	nop
 8000738:	3714      	adds	r7, #20
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	200000a0 	.word	0x200000a0
 8000748:	20000154 	.word	0x20000154

0800074c <task_init>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void task_init()
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af02      	add	r7, sp, #8
	size_t fre = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
	fre=xPortGetFreeHeapSize();
 8000756:	f008 fead 	bl	80094b4 <xPortGetFreeHeapSize>
 800075a:	6078      	str	r0, [r7, #4]
	sys_thread_new("eth_thread1", ethernet_thread, (void*)&port1, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 800075c:	2300      	movs	r3, #0
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000764:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <task_init+0x48>)
 8000766:	490c      	ldr	r1, [pc, #48]	; (8000798 <task_init+0x4c>)
 8000768:	480c      	ldr	r0, [pc, #48]	; (800079c <task_init+0x50>)
 800076a:	f016 f837 	bl	80167dc <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 800076e:	f008 fea1 	bl	80094b4 <xPortGetFreeHeapSize>
 8000772:	6078      	str	r0, [r7, #4]
	sys_thread_new("eth_thread2", ethernet_thread, (void*)&port2, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8000774:	2300      	movs	r3, #0
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800077c:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <task_init+0x54>)
 800077e:	4906      	ldr	r1, [pc, #24]	; (8000798 <task_init+0x4c>)
 8000780:	4808      	ldr	r0, [pc, #32]	; (80007a4 <task_init+0x58>)
 8000782:	f016 f82b 	bl	80167dc <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8000786:	f008 fe95 	bl	80094b4 <xPortGetFreeHeapSize>
 800078a:	6078      	str	r0, [r7, #4]
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000000 	.word	0x20000000
 8000798:	08000599 	.word	0x08000599
 800079c:	08017a10 	.word	0x08017a10
 80007a0:	20000002 	.word	0x20000002
 80007a4:	08017a1c 	.word	0x08017a1c

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b5b0      	push	{r4, r5, r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	ModbusInit();
 80007ae:	f000 f963 	bl	8000a78 <ModbusInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b2:	f001 f88d 	bl	80018d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 f82d 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ba:	f000 f8f5 	bl	80009a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007be:	f000 f893 	bl	80008e8 <MX_USART1_UART_Init>
  MX_USART6_Init();
 80007c2:	f000 f8c3 	bl	800094c <MX_USART6_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of writeMemorySemaphore */
  osSemaphoreDef(writeMemorySemaphore);
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  writeMemorySemaphoreHandle = osSemaphoreCreate(osSemaphore(writeMemorySemaphore), 1);
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	2101      	movs	r1, #1
 80007d4:	4618      	mov	r0, r3
 80007d6:	f006 f86d 	bl	80068b4 <osSemaphoreCreate>
 80007da:	4603      	mov	r3, r0
 80007dc:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <main+0x60>)
 80007de:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <main+0x64>)
 80007e2:	1d3c      	adds	r4, r7, #4
 80007e4:	461d      	mov	r5, r3
 80007e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f005 ff5f 	bl	80066ba <osThreadCreate>
 80007fc:	4603      	mov	r3, r0
 80007fe:	4a04      	ldr	r2, [pc, #16]	; (8000810 <main+0x68>)
 8000800:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000802:	f005 ff43 	bl	800668c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000806:	e7fe      	b.n	8000806 <main+0x5e>
 8000808:	20006a18 	.word	0x20006a18
 800080c:	08017a34 	.word	0x08017a34
 8000810:	200069d0 	.word	0x200069d0

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	; 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	2230      	movs	r2, #48	; 0x30
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f016 f95c 	bl	8016ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <SystemClock_Config+0xcc>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a27      	ldr	r2, [pc, #156]	; (80008e0 <SystemClock_Config+0xcc>)
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <SystemClock_Config+0xcc>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <SystemClock_Config+0xd0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a21      	ldr	r2, [pc, #132]	; (80008e4 <SystemClock_Config+0xd0>)
 800085e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <SystemClock_Config+0xd0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000870:	2301      	movs	r3, #1
 8000872:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087a:	2302      	movs	r3, #2
 800087c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000882:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000884:	2319      	movs	r3, #25
 8000886:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000888:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800088c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800088e:	2302      	movs	r3, #2
 8000890:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000892:	2304      	movs	r3, #4
 8000894:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000896:	f107 0320 	add.w	r3, r7, #32
 800089a:	4618      	mov	r0, r3
 800089c:	f002 fd34 	bl	8003308 <HAL_RCC_OscConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008a6:	f000 f8e1 	bl	8000a6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008aa:	230f      	movs	r3, #15
 80008ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ae:	2302      	movs	r3, #2
 80008b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	2105      	movs	r1, #5
 80008c8:	4618      	mov	r0, r3
 80008ca:	f002 ff95 	bl	80037f8 <HAL_RCC_ClockConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008d4:	f000 f8ca 	bl	8000a6c <Error_Handler>
  }
}
 80008d8:	bf00      	nop
 80008da:	3750      	adds	r7, #80	; 0x50
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40007000 	.word	0x40007000

080008e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_USART1_UART_Init+0x58>)
 80008ee:	4a15      	ldr	r2, [pc, #84]	; (8000944 <MX_USART1_UART_Init+0x5c>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_USART1_UART_Init+0x58>)
 80008f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_USART1_UART_Init+0x58>)
 80008fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000900:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_USART1_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <MX_USART1_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_USART1_UART_Init+0x58>)
 8000910:	220c      	movs	r2, #12
 8000912:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <MX_USART1_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_USART1_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000920:	4807      	ldr	r0, [pc, #28]	; (8000940 <MX_USART1_UART_Init+0x58>)
 8000922:	f003 fc19 	bl	8004158 <HAL_UART_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 800092c:	f000 f89e 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t*)meas_data.data, 1);
 8000930:	2201      	movs	r2, #1
 8000932:	4905      	ldr	r1, [pc, #20]	; (8000948 <MX_USART1_UART_Init+0x60>)
 8000934:	4802      	ldr	r0, [pc, #8]	; (8000940 <MX_USART1_UART_Init+0x58>)
 8000936:	f003 fcee 	bl	8004316 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200069d4 	.word	0x200069d4
 8000944:	40011000 	.word	0x40011000
 8000948:	20006a84 	.word	0x20006a84

0800094c <MX_USART6_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  husart6.Instance = USART6;
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_USART6_Init+0x54>)
 8000952:	4a14      	ldr	r2, [pc, #80]	; (80009a4 <MX_USART6_Init+0x58>)
 8000954:	601a      	str	r2, [r3, #0]
  husart6.Init.BaudRate = 9600;
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_USART6_Init+0x54>)
 8000958:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800095c:	605a      	str	r2, [r3, #4]
  husart6.Init.WordLength = USART_WORDLENGTH_9B;
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <MX_USART6_Init+0x54>)
 8000960:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000964:	609a      	str	r2, [r3, #8]
  husart6.Init.StopBits = USART_STOPBITS_1;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_USART6_Init+0x54>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  husart6.Init.Parity = USART_PARITY_NONE;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_USART6_Init+0x54>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  husart6.Init.Mode = USART_MODE_TX_RX;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_USART6_Init+0x54>)
 8000974:	220c      	movs	r2, #12
 8000976:	615a      	str	r2, [r3, #20]
  husart6.Init.CLKPolarity = USART_POLARITY_LOW;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_USART6_Init+0x54>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  husart6.Init.CLKPhase = USART_PHASE_1EDGE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_USART6_Init+0x54>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
  husart6.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_USART6_Init+0x54>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart6) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_USART6_Init+0x54>)
 800098c:	f004 fbac 	bl	80050e8 <HAL_USART_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART6_Init+0x4e>
  {
    Error_Handler();
 8000996:	f000 f869 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000698c 	.word	0x2000698c
 80009a4:	40011400 	.word	0x40011400

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <MX_GPIO_Init+0x84>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a1d      	ldr	r2, [pc, #116]	; (8000a2c <MX_GPIO_Init+0x84>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_GPIO_Init+0x84>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <MX_GPIO_Init+0x84>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a16      	ldr	r2, [pc, #88]	; (8000a2c <MX_GPIO_Init+0x84>)
 80009d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_GPIO_Init+0x84>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MX_GPIO_Init+0x84>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <MX_GPIO_Init+0x84>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <MX_GPIO_Init+0x84>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_GPIO_Init+0x84>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <MX_GPIO_Init+0x84>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_GPIO_Init+0x84>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

}
 8000a1e:	bf00      	nop
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000a38:	f005 f8e0 	bl	8005bfc <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  task_init();
 8000a3c:	f7ff fe86 	bl	800074c <task_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f005 fe86 	bl	8006752 <osDelay>
 8000a46:	e7fb      	b.n	8000a40 <StartDefaultTask+0x10>

08000a48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d101      	bne.n	8000a5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a5a:	f000 ff5b 	bl	8001914 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40010000 	.word	0x40010000

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <Error_Handler+0x8>
	...

08000a78 <ModbusInit>:
static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source);
static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source);
static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource));

void ModbusInit()
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
	holding_pointer = (uint16_t*)&settings;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <ModbusInit+0x38>)
 8000a7e:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <ModbusInit+0x3c>)
 8000a80:	601a      	str	r2, [r3, #0]
	reading_pointer = (uint16_t*)&meas_data;
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <ModbusInit+0x40>)
 8000a84:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <ModbusInit+0x44>)
 8000a86:	601a      	str	r2, [r3, #0]
	holding_size = sizeof(settings)/2;
 8000a88:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <ModbusInit+0x48>)
 8000a8a:	2233      	movs	r2, #51	; 0x33
 8000a8c:	801a      	strh	r2, [r3, #0]
	reading_size = sizeof(meas_data)/2;
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <ModbusInit+0x4c>)
 8000a90:	2228      	movs	r2, #40	; 0x28
 8000a92:	801a      	strh	r2, [r3, #0]
	if(settings.mb_addr==0)settings.mb_addr = 1;
 8000a94:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <ModbusInit+0x3c>)
 8000a96:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d103      	bne.n	8000aa6 <ModbusInit+0x2e>
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <ModbusInit+0x3c>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	20000354 	.word	0x20000354
 8000ab4:	20006a1c 	.word	0x20006a1c
 8000ab8:	20000358 	.word	0x20000358
 8000abc:	20006a84 	.word	0x20006a84
 8000ac0:	2000035c 	.word	0x2000035c
 8000ac4:	2000035e 	.word	0x2000035e

08000ac8 <ModbusParse>:


//Ф-я парсинга входящего буфера, если это Modbus, то возвращает кол-во байт
int ModbusParse(uint8_t *request, uint16_t req_length, uint8_t *answer, ModbusSource source)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	817b      	strh	r3, [r7, #10]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	727b      	strb	r3, [r7, #9]
	settings.data[37]++;
 8000adc:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <ModbusParse+0xb0>)
 8000ade:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <ModbusParse+0xb0>)
 8000ae8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	if(answer==NULL)return 0; // Проверка, выделилась ли память под ответ
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d101      	bne.n	8000af6 <ModbusParse+0x2e>
 8000af2:	2300      	movs	r3, #0
 8000af4:	e03c      	b.n	8000b70 <ModbusParse+0xa8>
	if(!CheckRequestLength(request,req_length,source))return 0; // Проверка корректности длины пакета
 8000af6:	897b      	ldrh	r3, [r7, #10]
 8000af8:	7a7a      	ldrb	r2, [r7, #9]
 8000afa:	4619      	mov	r1, r3
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	f000 f83d 	bl	8000b7c <CheckRequestLength>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <ModbusParse+0x44>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	e031      	b.n	8000b70 <ModbusParse+0xa8>
	if(!CheckMbAddr(request, source))return 0; // Проверка корректности адреса
 8000b0c:	7a7b      	ldrb	r3, [r7, #9]
 8000b0e:	4619      	mov	r1, r3
 8000b10:	68f8      	ldr	r0, [r7, #12]
 8000b12:	f000 f857 	bl	8000bc4 <CheckMbAddr>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <ModbusParse+0x58>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	e027      	b.n	8000b70 <ModbusParse+0xa8>
	if(!IsCorrectMbCommand(request, source))// Проверка корректности функционального кода
 8000b20:	7a7b      	ldrb	r3, [r7, #9]
 8000b22:	4619      	mov	r1, r3
 8000b24:	68f8      	ldr	r0, [r7, #12]
 8000b26:	f000 f875 	bl	8000c14 <IsCorrectMbCommand>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d107      	bne.n	8000b40 <ModbusParse+0x78>
	{
		return SetInvalidCommand(request, answer, 1, source);
 8000b30:	7a7b      	ldrb	r3, [r7, #9]
 8000b32:	2201      	movs	r2, #1
 8000b34:	6879      	ldr	r1, [r7, #4]
 8000b36:	68f8      	ldr	r0, [r7, #12]
 8000b38:	f000 f8a0 	bl	8000c7c <SetInvalidCommand>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	e017      	b.n	8000b70 <ModbusParse+0xa8>
	}
	if(!CheckCrc(request, req_length, source))
 8000b40:	897b      	ldrh	r3, [r7, #10]
 8000b42:	7a7a      	ldrb	r2, [r7, #9]
 8000b44:	4619      	mov	r1, r3
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f000 f941 	bl	8000dce <CheckCrc>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d107      	bne.n	8000b62 <ModbusParse+0x9a>
	{
		return SetInvalidCommand(request, answer, 3, source);
 8000b52:	7a7b      	ldrb	r3, [r7, #9]
 8000b54:	2203      	movs	r2, #3
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	68f8      	ldr	r0, [r7, #12]
 8000b5a:	f000 f88f 	bl	8000c7c <SetInvalidCommand>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	e006      	b.n	8000b70 <ModbusParse+0xa8>
	}
	return GetModbusAnswer(request, answer, source);
 8000b62:	7a7b      	ldrb	r3, [r7, #9]
 8000b64:	461a      	mov	r2, r3
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	68f8      	ldr	r0, [r7, #12]
 8000b6a:	f000 f965 	bl	8000e38 <GetModbusAnswer>
 8000b6e:	4603      	mov	r3, r0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20006a1c 	.word	0x20006a1c

08000b7c <CheckRequestLength>:

//Проверка соответствия длины данных, передаваемых в буфере
static uint8_t CheckRequestLength(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	4613      	mov	r3, r2
 8000b88:	71fb      	strb	r3, [r7, #7]
	if(source==RS485)return 1;
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d101      	bne.n	8000b94 <CheckRequestLength+0x18>
 8000b90:	2301      	movs	r3, #1
 8000b92:	e010      	b.n	8000bb6 <CheckRequestLength+0x3a>
    int len_from_packet = (*(request_pointer+4))*256 + *(request_pointer+5);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	3304      	adds	r3, #4
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	021b      	lsls	r3, r3, #8
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	3205      	adds	r2, #5
 8000ba0:	7812      	ldrb	r2, [r2, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	617b      	str	r3, [r7, #20]
    return len_from_packet+6 == request_length;
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3306      	adds	r3, #6
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	bf0c      	ite	eq
 8000bb0:	2301      	moveq	r3, #1
 8000bb2:	2300      	movne	r3, #0
 8000bb4:	b2db      	uxtb	r3, r3
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	371c      	adds	r7, #28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
	...

08000bc4 <CheckMbAddr>:

//Проверка соответсия адреса в сети Modbus сервера
static uint8_t CheckMbAddr(uint8_t *request,ModbusSource source)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	70fb      	strb	r3, [r7, #3]
	uint8_t addr = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 8000bd4:	78fb      	ldrb	r3, [r7, #3]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d103      	bne.n	8000be2 <CheckMbAddr+0x1e>
	{
		addr =  *(request+6);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	799b      	ldrb	r3, [r3, #6]
 8000bde:	73fb      	strb	r3, [r7, #15]
 8000be0:	e005      	b.n	8000bee <CheckMbAddr+0x2a>
	}
	else if(source==RS485)
 8000be2:	78fb      	ldrb	r3, [r7, #3]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <CheckMbAddr+0x2a>
	{
		addr =  *(request);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	73fb      	strb	r3, [r7, #15]
	}
	return addr == settings.mb_addr;
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <CheckMbAddr+0x4c>)
 8000bf4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	bf0c      	ite	eq
 8000bfc:	2301      	moveq	r3, #1
 8000bfe:	2300      	movne	r3, #0
 8000c00:	b2db      	uxtb	r3, r3
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20006a1c 	.word	0x20006a1c

08000c14 <IsCorrectMbCommand>:

//Проверка корректности функционального кода
static uint8_t IsCorrectMbCommand(uint8_t *request,ModbusSource source)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d103      	bne.n	8000c32 <IsCorrectMbCommand+0x1e>
	{
		cmd = *(request+7);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	79db      	ldrb	r3, [r3, #7]
 8000c2e:	73fb      	strb	r3, [r7, #15]
 8000c30:	e005      	b.n	8000c3e <IsCorrectMbCommand+0x2a>
	}
	else if(source==RS485)
 8000c32:	78fb      	ldrb	r3, [r7, #3]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d102      	bne.n	8000c3e <IsCorrectMbCommand+0x2a>
	{
		cmd = *(request+1);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	785b      	ldrb	r3, [r3, #1]
 8000c3c:	73fb      	strb	r3, [r7, #15]
	}
	/*
	 * Функция возвращает 1, если номер команды корректен, 0 - если некорректен
	 * cmd - номер команды
	 * */
	switch (cmd) {
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	2b10      	cmp	r3, #16
 8000c42:	bf8c      	ite	hi
 8000c44:	2201      	movhi	r2, #1
 8000c46:	2200      	movls	r2, #0
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d10c      	bne.n	8000c68 <IsCorrectMbCommand+0x54>
 8000c4e:	2201      	movs	r2, #1
 8000c50:	409a      	lsls	r2, r3
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <IsCorrectMbCommand+0x64>)
 8000c54:	4013      	ands	r3, r2
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	bf14      	ite	ne
 8000c5a:	2301      	movne	r3, #1
 8000c5c:	2300      	moveq	r3, #0
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <IsCorrectMbCommand+0x54>
		case 3:
		case 4:
		case 6:
		//case 5:
        case 16:
            return 1;
 8000c64:	2301      	movs	r3, #1
 8000c66:	e000      	b.n	8000c6a <IsCorrectMbCommand+0x56>
		default:
			return 0;
 8000c68:	2300      	movs	r3, #0
	}
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	00010058 	.word	0x00010058

08000c7c <SetInvalidCommand>:

//Формирует телеграмму ошиобного запроса
static int SetInvalidCommand(uint8_t *request, uint8_t *answer, uint8_t code, ModbusSource source)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	4611      	mov	r1, r2
 8000c88:	461a      	mov	r2, r3
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	71fb      	strb	r3, [r7, #7]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	71bb      	strb	r3, [r7, #6]
	uint8_t func_code = source ? *(request+1) : *(request+1);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	785b      	ldrb	r3, [r3, #1]
 8000c96:	75fb      	strb	r3, [r7, #23]
	func_code = set_bit(func_code, 7);
 8000c98:	7dfb      	ldrb	r3, [r7, #23]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	2107      	movs	r1, #7
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fc62 	bl	8000568 <set_bit>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	75fb      	strb	r3, [r7, #23]
	if(source==RS485)
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d11d      	bne.n	8000cea <SetInvalidCommand+0x6e>
	{
		uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8000cae:	2300      	movs	r3, #0
 8000cb0:	82bb      	strh	r3, [r7, #20]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	781a      	ldrb	r2, [r3, #0]
		memcpy(answer,request,1);
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	701a      	strb	r2, [r3, #0]
		*(answer+1) = func_code;//Функциональный код с измененным битом
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	7dfa      	ldrb	r2, [r7, #23]
 8000cc0:	701a      	strb	r2, [r3, #0]
		*(answer+2) = code;//Функциональный код с измененным битом
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	3302      	adds	r3, #2
 8000cc6:	79fa      	ldrb	r2, [r7, #7]
 8000cc8:	701a      	strb	r2, [r3, #0]
		CRC16_CALC(answer,check_sum,3);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	2203      	movs	r2, #3
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	68b8      	ldr	r0, [r7, #8]
 8000cd4:	f000 f832 	bl	8000d3c <CRC16_CALC>
		*(answer+3) = check_sum[0];
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	3303      	adds	r3, #3
 8000cdc:	7d3a      	ldrb	r2, [r7, #20]
 8000cde:	701a      	strb	r2, [r3, #0]
		*(answer+4) = check_sum[1];
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	3304      	adds	r3, #4
 8000ce4:	7d7a      	ldrb	r2, [r7, #21]
 8000ce6:	701a      	strb	r2, [r3, #0]
 8000ce8:	e01c      	b.n	8000d24 <SetInvalidCommand+0xa8>
	}
	else if(source==ETHERNET)
 8000cea:	79bb      	ldrb	r3, [r7, #6]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d119      	bne.n	8000d24 <SetInvalidCommand+0xa8>
	{
		memcpy(answer,request,8);
 8000cf0:	2208      	movs	r2, #8
 8000cf2:	68f9      	ldr	r1, [r7, #12]
 8000cf4:	68b8      	ldr	r0, [r7, #8]
 8000cf6:	f015 fee5 	bl	8016ac4 <memcpy>
		*(answer+4) = 0;
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
		*(answer+5) = 3;
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	3305      	adds	r3, #5
 8000d06:	2203      	movs	r2, #3
 8000d08:	701a      	strb	r2, [r3, #0]
		*(answer+7) |= 128;
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	3307      	adds	r3, #7
 8000d0e:	781a      	ldrb	r2, [r3, #0]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	3307      	adds	r3, #7
 8000d14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	701a      	strb	r2, [r3, #0]
		*(answer+8) = code;
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	3308      	adds	r3, #8
 8000d20:	79fa      	ldrb	r2, [r7, #7]
 8000d22:	701a      	strb	r2, [r3, #0]
	}

	uint8_t len = source==RS485 ? 5 : 9;
 8000d24:	79bb      	ldrb	r3, [r7, #6]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d101      	bne.n	8000d2e <SetInvalidCommand+0xb2>
 8000d2a:	2305      	movs	r3, #5
 8000d2c:	e000      	b.n	8000d30 <SetInvalidCommand+0xb4>
 8000d2e:	2309      	movs	r3, #9
 8000d30:	75bb      	strb	r3, [r7, #22]
	return len;
 8000d32:	7dbb      	ldrb	r3, [r7, #22]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <CRC16_CALC>:

static void CRC16_CALC(uint8_t* arr, uint8_t* checkSum, uint8_t messageLength)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	; 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	4613      	mov	r3, r2
 8000d48:	71fb      	strb	r3, [r7, #7]
	/*Функция расчета контрольной суммы
		 * arr - указатель на массив байт, по которым нужно посчитать CRC
		 * checkSum - указатель на массив из 2 байт, куда нужно положить CRC
		 * messageLength - ко-во байт, по которым нужно считать CRC	 *
		 * */
		uint16_t reg = 0xFFFF;
 8000d4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d4e:	83fb      	strh	r3, [r7, #30]
		uint16_t polinom = 0xA001;
 8000d50:	f24a 0301 	movw	r3, #40961	; 0xa001
 8000d54:	827b      	strh	r3, [r7, #18]
		for(int i=0;i < messageLength;i++)
 8000d56:	2300      	movs	r3, #0
 8000d58:	61bb      	str	r3, [r7, #24]
 8000d5a:	e023      	b.n	8000da4 <CRC16_CALC+0x68>
		{
			reg^=*(arr+i);
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	4413      	add	r3, r2
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	8bfb      	ldrh	r3, [r7, #30]
 8000d68:	4053      	eors	r3, r2
 8000d6a:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	e012      	b.n	8000d98 <CRC16_CALC+0x5c>
			{
				if ((reg&1)==1) {
 8000d72:	8bfb      	ldrh	r3, [r7, #30]
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d007      	beq.n	8000d8c <CRC16_CALC+0x50>
					reg>>=1;
 8000d7c:	8bfb      	ldrh	r3, [r7, #30]
 8000d7e:	085b      	lsrs	r3, r3, #1
 8000d80:	83fb      	strh	r3, [r7, #30]
					reg^=polinom;
 8000d82:	8bfa      	ldrh	r2, [r7, #30]
 8000d84:	8a7b      	ldrh	r3, [r7, #18]
 8000d86:	4053      	eors	r3, r2
 8000d88:	83fb      	strh	r3, [r7, #30]
 8000d8a:	e002      	b.n	8000d92 <CRC16_CALC+0x56>
				}
				else reg>>=1;
 8000d8c:	8bfb      	ldrh	r3, [r7, #30]
 8000d8e:	085b      	lsrs	r3, r3, #1
 8000d90:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	3301      	adds	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	2b07      	cmp	r3, #7
 8000d9c:	dde9      	ble.n	8000d72 <CRC16_CALC+0x36>
		for(int i=0;i < messageLength;i++)
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	3301      	adds	r3, #1
 8000da2:	61bb      	str	r3, [r7, #24]
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	dbd7      	blt.n	8000d5c <CRC16_CALC+0x20>
			}
		}
		*(checkSum+1)=(uint8_t)(reg>>8);
 8000dac:	8bfb      	ldrh	r3, [r7, #30]
 8000dae:	0a1b      	lsrs	r3, r3, #8
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	3301      	adds	r3, #1
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	701a      	strb	r2, [r3, #0]
		*checkSum = (uint8_t)(reg & 0x00FF);
 8000dba:	8bfb      	ldrh	r3, [r7, #30]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	701a      	strb	r2, [r3, #0]
}
 8000dc2:	bf00      	nop
 8000dc4:	3724      	adds	r7, #36	; 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <CheckCrc>:

//Проверка контрольной суммы запроса
static uint8_t CheckCrc(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	60f8      	str	r0, [r7, #12]
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	71fb      	strb	r3, [r7, #7]
	if(source==ETHERNET)return 1;
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d101      	bne.n	8000de6 <CheckCrc+0x18>
 8000de2:	2301      	movs	r3, #1
 8000de4:	e024      	b.n	8000e30 <CheckCrc+0x62>
	uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8000de6:	2300      	movs	r3, #0
 8000de8:	82bb      	strh	r3, [r7, #20]
	if(request_length<4)return 0;
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	dc01      	bgt.n	8000df4 <CheckCrc+0x26>
 8000df0:	2300      	movs	r3, #0
 8000df2:	e01d      	b.n	8000e30 <CheckCrc+0x62>
	CRC16_CALC(request_pointer, check_sum, request_length-2);
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	3b02      	subs	r3, #2
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	68f8      	ldr	r0, [r7, #12]
 8000e04:	f7ff ff9a 	bl	8000d3c <CRC16_CALC>
	return request_pointer[request_length-2]==check_sum[0] && request_pointer[request_length-1]==check_sum[1];
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	3b02      	subs	r3, #2
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	4413      	add	r3, r2
 8000e10:	781a      	ldrb	r2, [r3, #0]
 8000e12:	7d3b      	ldrb	r3, [r7, #20]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d109      	bne.n	8000e2c <CheckCrc+0x5e>
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	4413      	add	r3, r2
 8000e20:	781a      	ldrb	r2, [r3, #0]
 8000e22:	7d7b      	ldrb	r3, [r7, #21]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d101      	bne.n	8000e2c <CheckCrc+0x5e>
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e000      	b.n	8000e2e <CheckCrc+0x60>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	b2db      	uxtb	r3, r3
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <GetModbusAnswer>:

//Возвращает кол-во байт, котрые нужно передать обратно
static int GetModbusAnswer(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	4613      	mov	r3, r2
 8000e44:	71fb      	strb	r3, [r7, #7]
	uint8_t func_code = source==RS485 ? *(request+1) : *(request+7);
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d102      	bne.n	8000e52 <GetModbusAnswer+0x1a>
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	785b      	ldrb	r3, [r3, #1]
 8000e50:	e001      	b.n	8000e56 <GetModbusAnswer+0x1e>
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	79db      	ldrb	r3, [r3, #7]
 8000e56:	75fb      	strb	r3, [r7, #23]

	switch (func_code) {
 8000e58:	7dfb      	ldrb	r3, [r7, #23]
 8000e5a:	3b03      	subs	r3, #3
 8000e5c:	2b0d      	cmp	r3, #13
 8000e5e:	d849      	bhi.n	8000ef4 <GetModbusAnswer+0xbc>
 8000e60:	a201      	add	r2, pc, #4	; (adr r2, 8000e68 <GetModbusAnswer+0x30>)
 8000e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e66:	bf00      	nop
 8000e68:	08000ea1 	.word	0x08000ea1
 8000e6c:	08000ebb 	.word	0x08000ebb
 8000e70:	08000ef5 	.word	0x08000ef5
 8000e74:	08000ed5 	.word	0x08000ed5
 8000e78:	08000ef5 	.word	0x08000ef5
 8000e7c:	08000ef5 	.word	0x08000ef5
 8000e80:	08000ef5 	.word	0x08000ef5
 8000e84:	08000ef5 	.word	0x08000ef5
 8000e88:	08000ef5 	.word	0x08000ef5
 8000e8c:	08000ef5 	.word	0x08000ef5
 8000e90:	08000ef5 	.word	0x08000ef5
 8000e94:	08000ef5 	.word	0x08000ef5
 8000e98:	08000ef5 	.word	0x08000ef5
 8000e9c:	08000ee5 	.word	0x08000ee5
		case READ_HOLDING_REGS:
			return ReadRegisters(request, answer, holding_pointer, holding_size, source);
 8000ea0:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <GetModbusAnswer+0xc8>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <GetModbusAnswer+0xcc>)
 8000ea6:	8819      	ldrh	r1, [r3, #0]
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	460b      	mov	r3, r1
 8000eae:	68b9      	ldr	r1, [r7, #8]
 8000eb0:	68f8      	ldr	r0, [r7, #12]
 8000eb2:	f000 f831 	bl	8000f18 <ReadRegisters>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	e01e      	b.n	8000ef8 <GetModbusAnswer+0xc0>
		case READ_INPUT_REGS:
			return ReadRegisters(request, answer, reading_pointer, reading_size, source);
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <GetModbusAnswer+0xd0>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <GetModbusAnswer+0xd4>)
 8000ec0:	8819      	ldrh	r1, [r3, #0]
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	68b9      	ldr	r1, [r7, #8]
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f000 f824 	bl	8000f18 <ReadRegisters>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	e011      	b.n	8000ef8 <GetModbusAnswer+0xc0>
		case WRITE_SINGLE_REG:
			return WriteToHoldings(request, answer, source, &WriteSingleRegister);
 8000ed4:	79fa      	ldrb	r2, [r7, #7]
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <GetModbusAnswer+0xd8>)
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	f000 f974 	bl	80011c8 <WriteToHoldings>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	e009      	b.n	8000ef8 <GetModbusAnswer+0xc0>
		case WRITE_MULTIPLY_REGS:
			return WriteToHoldings(request, answer, source, &WrieMultiplyRegisters);
 8000ee4:	79fa      	ldrb	r2, [r7, #7]
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <GetModbusAnswer+0xdc>)
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f000 f96c 	bl	80011c8 <WriteToHoldings>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	e001      	b.n	8000ef8 <GetModbusAnswer+0xc0>
		default:
			break;
 8000ef4:	bf00      	nop
	}
	return 0;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000354 	.word	0x20000354
 8000f04:	2000035c 	.word	0x2000035c
 8000f08:	20000358 	.word	0x20000358
 8000f0c:	2000035e 	.word	0x2000035e
 8000f10:	0800108d 	.word	0x0800108d
 8000f14:	08001111 	.word	0x08001111

08000f18 <ReadRegisters>:

//Ф-я чтения регистров из памяти memory_pointer размером memory_size
static int ReadRegisters(uint8_t *request, uint8_t *answer, uint16_t *memory_pointer, uint16_t memory_size, ModbusSource source)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
 8000f24:	807b      	strh	r3, [r7, #2]
	uint16_t  maxAddr = memory_size-1;
 8000f26:	887b      	ldrh	r3, [r7, #2]
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	82fb      	strh	r3, [r7, #22]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 8000f2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d101      	bne.n	8000f38 <ReadRegisters+0x20>
 8000f34:	2302      	movs	r3, #2
 8000f36:	e000      	b.n	8000f3a <ReadRegisters+0x22>
 8000f38:	2308      	movs	r3, #8
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f000 f84d 	bl	8000fdc <GetWordFromBytes>
 8000f42:	4603      	mov	r3, r0
 8000f44:	82bb      	strh	r3, [r7, #20]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 8000f46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <ReadRegisters+0x3a>
 8000f4e:	2304      	movs	r3, #4
 8000f50:	e000      	b.n	8000f54 <ReadRegisters+0x3c>
 8000f52:	230a      	movs	r3, #10
 8000f54:	4619      	mov	r1, r3
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f000 f840 	bl	8000fdc <GetWordFromBytes>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	827b      	strh	r3, [r7, #18]
	if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 8000f60:	8aba      	ldrh	r2, [r7, #20]
 8000f62:	8a7b      	ldrh	r3, [r7, #18]
 8000f64:	4413      	add	r3, r2
 8000f66:	1e5a      	subs	r2, r3, #1
 8000f68:	8afb      	ldrh	r3, [r7, #22]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	dd08      	ble.n	8000f80 <ReadRegisters+0x68>
 8000f6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f72:	2202      	movs	r2, #2
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	68f8      	ldr	r0, [r7, #12]
 8000f78:	f7ff fe80 	bl	8000c7c <SetInvalidCommand>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	e029      	b.n	8000fd4 <ReadRegisters+0xbc>
	if(source==ETHERNET)
 8000f80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d124      	bne.n	8000fd2 <ReadRegisters+0xba>
	{
		memcpy(answer,request,8);
 8000f88:	2208      	movs	r2, #8
 8000f8a:	68f9      	ldr	r1, [r7, #12]
 8000f8c:	68b8      	ldr	r0, [r7, #8]
 8000f8e:	f015 fd99 	bl	8016ac4 <memcpy>
		InsertWordToMemory(reg_count*2+3, answer+4);//Длина сообщения
 8000f92:	8a7b      	ldrh	r3, [r7, #18]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	3303      	adds	r3, #3
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	3304      	adds	r3, #4
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	f000 f835 	bl	8001012 <InsertWordToMemory>
		*(answer+8) = reg_count*2;//количесво байт далее
 8000fa8:	8a7b      	ldrh	r3, [r7, #18]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	3308      	adds	r3, #8
 8000fb0:	0052      	lsls	r2, r2, #1
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory(memory_pointer+start_reg,answer+9,reg_count);
 8000fb6:	8abb      	ldrh	r3, [r7, #20]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	18d0      	adds	r0, r2, r3
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	3309      	adds	r3, #9
 8000fc2:	8a7a      	ldrh	r2, [r7, #18]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f000 f834 	bl	8001032 <InsertWordsToMemory>
		return 9+reg_count*2;
 8000fca:	8a7b      	ldrh	r3, [r7, #18]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	3309      	adds	r3, #9
 8000fd0:	e000      	b.n	8000fd4 <ReadRegisters+0xbc>
	}
	else
	{

	}
	return 0;
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <GetWordFromBytes>:

static uint16_t GetWordFromBytes(uint8_t *arr, uint8_t pos)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	70fb      	strb	r3, [r7, #3]
	/*Получает 16 битное число из 2x байт, и возвращает его
	 * arr -  указатель на массив байт, из которого нужно получить word
	 * pos - индекс первого байта в массиве
	 *
	 * */
	return (((uint16_t)(*(arr+pos)))<<8) + (uint16_t)(*(arr + pos+1));
 8000fe8:	78fb      	ldrb	r3, [r7, #3]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	78fb      	ldrb	r3, [r7, #3]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	440b      	add	r3, r1
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b29b      	uxth	r3, r3
 8001002:	4413      	add	r3, r2
 8001004:	b29b      	uxth	r3, r3
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <InsertWordToMemory>:

static void InsertWordToMemory(uint16_t value, uint8_t* memory)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	6039      	str	r1, [r7, #0]
 800101c:	80fb      	strh	r3, [r7, #6]
    InsertWordsToMemory(&value,memory,1);
 800101e:	1dbb      	adds	r3, r7, #6
 8001020:	2201      	movs	r2, #1
 8001022:	6839      	ldr	r1, [r7, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f000 f804 	bl	8001032 <InsertWordsToMemory>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <InsertWordsToMemory>:

static void InsertWordsToMemory(uint16_t *source, uint8_t * destination, uint16_t count)
{
 8001032:	b480      	push	{r7}
 8001034:	b087      	sub	sp, #28
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	4613      	mov	r3, r2
 800103e:	80fb      	strh	r3, [r7, #6]
    int i = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
    for(i=0;i<count*2;i+=2)
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	e014      	b.n	8001074 <InsertWordsToMemory+0x42>
    {
        *(destination+i+1)=*((uint8_t*)source+i);
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	441a      	add	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	3301      	adds	r3, #1
 8001054:	68b9      	ldr	r1, [r7, #8]
 8001056:	440b      	add	r3, r1
 8001058:	7812      	ldrb	r2, [r2, #0]
 800105a:	701a      	strb	r2, [r3, #0]
        *(destination+i)=*((uint8_t*)source+i+1);
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3301      	adds	r3, #1
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	441a      	add	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	68b9      	ldr	r1, [r7, #8]
 8001068:	440b      	add	r3, r1
 800106a:	7812      	ldrb	r2, [r2, #0]
 800106c:	701a      	strb	r2, [r3, #0]
    for(i=0;i<count*2;i+=2)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3302      	adds	r3, #2
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	429a      	cmp	r2, r3
 800107c:	dbe5      	blt.n	800104a <InsertWordsToMemory+0x18>
    }
}
 800107e:	bf00      	nop
 8001080:	bf00      	nop
 8001082:	371c      	adds	r7, #28
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <WriteSingleRegister>:


static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	4613      	mov	r3, r2
 8001098:	71fb      	strb	r3, [r7, #7]
    uint16_t  maxAddr = holding_size-1;
 800109a:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <WriteSingleRegister+0x7c>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	3b01      	subs	r3, #1
 80010a0:	82fb      	strh	r3, [r7, #22]
    uint16_t addr = GetWordFromBytes(request,source==RS485?2:8);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <WriteSingleRegister+0x20>
 80010a8:	2302      	movs	r3, #2
 80010aa:	e000      	b.n	80010ae <WriteSingleRegister+0x22>
 80010ac:	2308      	movs	r3, #8
 80010ae:	4619      	mov	r1, r3
 80010b0:	68f8      	ldr	r0, [r7, #12]
 80010b2:	f7ff ff93 	bl	8000fdc <GetWordFromBytes>
 80010b6:	4603      	mov	r3, r0
 80010b8:	82bb      	strh	r3, [r7, #20]
    if(addr>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 80010ba:	8aba      	ldrh	r2, [r7, #20]
 80010bc:	8afb      	ldrh	r3, [r7, #22]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d907      	bls.n	80010d2 <WriteSingleRegister+0x46>
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2202      	movs	r2, #2
 80010c6:	68b9      	ldr	r1, [r7, #8]
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f7ff fdd7 	bl	8000c7c <SetInvalidCommand>
 80010ce:	4603      	mov	r3, r0
 80010d0:	e016      	b.n	8001100 <WriteSingleRegister+0x74>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d112      	bne.n	80010fe <WriteSingleRegister+0x72>
    {
    	InsertWordsToMemory((uint16_t*)(request+10), ((uint8_t*)holding_pointer)+addr*2,1);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f103 000a 	add.w	r0, r3, #10
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <WriteSingleRegister+0x80>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	8aba      	ldrh	r2, [r7, #20]
 80010e4:	0052      	lsls	r2, r2, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	2201      	movs	r2, #1
 80010ea:	4619      	mov	r1, r3
 80010ec:	f7ff ffa1 	bl	8001032 <InsertWordsToMemory>
    	memcpy(answer, request,12);
 80010f0:	220c      	movs	r2, #12
 80010f2:	68f9      	ldr	r1, [r7, #12]
 80010f4:	68b8      	ldr	r0, [r7, #8]
 80010f6:	f015 fce5 	bl	8016ac4 <memcpy>
    	return 12;
 80010fa:	230c      	movs	r3, #12
 80010fc:	e000      	b.n	8001100 <WriteSingleRegister+0x74>
    }
    else
    {

    }
    return 0;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	2000035c 	.word	0x2000035c
 800110c:	20000354 	.word	0x20000354

08001110 <WrieMultiplyRegisters>:

static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	4613      	mov	r3, r2
 800111c:	71fb      	strb	r3, [r7, #7]
	uint16_t  maxAddr = holding_size-1;
 800111e:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <WrieMultiplyRegisters+0xb0>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	3b01      	subs	r3, #1
 8001124:	82fb      	strh	r3, [r7, #22]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <WrieMultiplyRegisters+0x20>
 800112c:	2302      	movs	r3, #2
 800112e:	e000      	b.n	8001132 <WrieMultiplyRegisters+0x22>
 8001130:	2308      	movs	r3, #8
 8001132:	4619      	mov	r1, r3
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f7ff ff51 	bl	8000fdc <GetWordFromBytes>
 800113a:	4603      	mov	r3, r0
 800113c:	82bb      	strh	r3, [r7, #20]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <WrieMultiplyRegisters+0x38>
 8001144:	2304      	movs	r3, #4
 8001146:	e000      	b.n	800114a <WrieMultiplyRegisters+0x3a>
 8001148:	230a      	movs	r3, #10
 800114a:	4619      	mov	r1, r3
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f7ff ff45 	bl	8000fdc <GetWordFromBytes>
 8001152:	4603      	mov	r3, r0
 8001154:	827b      	strh	r3, [r7, #18]
    if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 8001156:	8aba      	ldrh	r2, [r7, #20]
 8001158:	8a7b      	ldrh	r3, [r7, #18]
 800115a:	4413      	add	r3, r2
 800115c:	1e5a      	subs	r2, r3, #1
 800115e:	8afb      	ldrh	r3, [r7, #22]
 8001160:	429a      	cmp	r2, r3
 8001162:	dd07      	ble.n	8001174 <WrieMultiplyRegisters+0x64>
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2202      	movs	r2, #2
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f7ff fd86 	bl	8000c7c <SetInvalidCommand>
 8001170:	4603      	mov	r3, r0
 8001172:	e021      	b.n	80011b8 <WrieMultiplyRegisters+0xa8>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d11d      	bne.n	80011b6 <WrieMultiplyRegisters+0xa6>
    {
    	memcpy(answer, request,12);//сначала повторяющиеся с запросом данные
 800117a:	220c      	movs	r2, #12
 800117c:	68f9      	ldr	r1, [r7, #12]
 800117e:	68b8      	ldr	r0, [r7, #8]
 8001180:	f015 fca0 	bl	8016ac4 <memcpy>
    	InsertWordToMemory(reg_count*2+4, answer+4);//Длина сообщения
 8001184:	8a7b      	ldrh	r3, [r7, #18]
 8001186:	3302      	adds	r3, #2
 8001188:	b29b      	uxth	r3, r3
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	b29a      	uxth	r2, r3
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	3304      	adds	r3, #4
 8001192:	4619      	mov	r1, r3
 8001194:	4610      	mov	r0, r2
 8001196:	f7ff ff3c 	bl	8001012 <InsertWordToMemory>
    	InsertWordsToMemory((uint16_t*)(request+13), ((uint8_t*)holding_pointer)+start_reg*2,reg_count);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f103 000d 	add.w	r0, r3, #13
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <WrieMultiplyRegisters+0xb4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	8aba      	ldrh	r2, [r7, #20]
 80011a6:	0052      	lsls	r2, r2, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	8a7a      	ldrh	r2, [r7, #18]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff ff40 	bl	8001032 <InsertWordsToMemory>
        return 12;
 80011b2:	230c      	movs	r3, #12
 80011b4:	e000      	b.n	80011b8 <WrieMultiplyRegisters+0xa8>
    }
    else
    {

    }
    return 0;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000035c 	.word	0x2000035c
 80011c4:	20000354 	.word	0x20000354

080011c8 <WriteToHoldings>:

static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource))
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	4613      	mov	r3, r2
 80011d6:	71fb      	strb	r3, [r7, #7]
	int result = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
	if(writeMemorySemaphoreHandle!=NULL)
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <WriteToHoldings+0x50>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d014      	beq.n	800120e <WriteToHoldings+0x46>
	{
		if(osSemaphoreWait(writeMemorySemaphoreHandle, 1000)==osOK)
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <WriteToHoldings+0x50>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011ec:	4618      	mov	r0, r3
 80011ee:	f005 fb93 	bl	8006918 <osSemaphoreWait>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d10a      	bne.n	800120e <WriteToHoldings+0x46>
		{
			result =  (*write)(request,answer,source);
 80011f8:	79fa      	ldrb	r2, [r7, #7]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	4798      	blx	r3
 8001202:	6178      	str	r0, [r7, #20]
			osSemaphoreRelease(writeMemorySemaphoreHandle);
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <WriteToHoldings+0x50>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f005 fbd3 	bl	80069b4 <osSemaphoreRelease>
		}
	}
	return result;
 800120e:	697b      	ldr	r3, [r7, #20]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20006a18 	.word	0x20006a18

0800121c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_MspInit+0x54>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a11      	ldr	r2, [pc, #68]	; (8001270 <HAL_MspInit+0x54>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <HAL_MspInit+0x54>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_MspInit+0x54>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <HAL_MspInit+0x54>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_MspInit+0x54>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	210f      	movs	r1, #15
 800125e:	f06f 0001 	mvn.w	r0, #1
 8001262:	f000 fc53 	bl	8001b0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800

08001274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a1d      	ldr	r2, [pc, #116]	; (8001308 <HAL_UART_MspInit+0x94>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d134      	bne.n	8001300 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	4b1c      	ldr	r3, [pc, #112]	; (800130c <HAL_UART_MspInit+0x98>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	4a1b      	ldr	r2, [pc, #108]	; (800130c <HAL_UART_MspInit+0x98>)
 80012a0:	f043 0310 	orr.w	r3, r3, #16
 80012a4:	6453      	str	r3, [r2, #68]	; 0x44
 80012a6:	4b19      	ldr	r3, [pc, #100]	; (800130c <HAL_UART_MspInit+0x98>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	f003 0310 	and.w	r3, r3, #16
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_UART_MspInit+0x98>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a14      	ldr	r2, [pc, #80]	; (800130c <HAL_UART_MspInit+0x98>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_UART_MspInit+0x98>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012e0:	2307      	movs	r3, #7
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	4809      	ldr	r0, [pc, #36]	; (8001310 <HAL_UART_MspInit+0x9c>)
 80012ec:	f001 fe70 	bl	8002fd0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2105      	movs	r1, #5
 80012f4:	2025      	movs	r0, #37	; 0x25
 80012f6:	f000 fc09 	bl	8001b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012fa:	2025      	movs	r0, #37	; 0x25
 80012fc:	f000 fc22 	bl	8001b44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001300:	bf00      	nop
 8001302:	3728      	adds	r7, #40	; 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40011000 	.word	0x40011000
 800130c:	40023800 	.word	0x40023800
 8001310:	40020000 	.word	0x40020000

08001314 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART6)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a1d      	ldr	r2, [pc, #116]	; (80013a8 <HAL_USART_MspInit+0x94>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d134      	bne.n	80013a0 <HAL_USART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <HAL_USART_MspInit+0x98>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	4a1b      	ldr	r2, [pc, #108]	; (80013ac <HAL_USART_MspInit+0x98>)
 8001340:	f043 0320 	orr.w	r3, r3, #32
 8001344:	6453      	str	r3, [r2, #68]	; 0x44
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <HAL_USART_MspInit+0x98>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f003 0320 	and.w	r3, r3, #32
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_USART_MspInit+0x98>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a14      	ldr	r2, [pc, #80]	; (80013ac <HAL_USART_MspInit+0x98>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_USART_MspInit+0x98>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    PC8     ------> USART6_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800136e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137c:	2303      	movs	r3, #3
 800137e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001380:	2308      	movs	r3, #8
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	4809      	ldr	r0, [pc, #36]	; (80013b0 <HAL_USART_MspInit+0x9c>)
 800138c:	f001 fe20 	bl	8002fd0 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001390:	2200      	movs	r2, #0
 8001392:	2105      	movs	r1, #5
 8001394:	2047      	movs	r0, #71	; 0x47
 8001396:	f000 fbb9 	bl	8001b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800139a:	2047      	movs	r0, #71	; 0x47
 800139c:	f000 fbd2 	bl	8001b44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80013a0:	bf00      	nop
 80013a2:	3728      	adds	r7, #40	; 0x28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40011400 	.word	0x40011400
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020800 	.word	0x40020800

080013b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08c      	sub	sp, #48	; 0x30
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	2019      	movs	r0, #25
 80013ca:	f000 fb9f 	bl	8001b0c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80013ce:	2019      	movs	r0, #25
 80013d0:	f000 fbb8 	bl	8001b44 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <HAL_InitTick+0xa4>)
 80013da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013dc:	4a1e      	ldr	r2, [pc, #120]	; (8001458 <HAL_InitTick+0xa4>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6453      	str	r3, [r2, #68]	; 0x44
 80013e4:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <HAL_InitTick+0xa4>)
 80013e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013f0:	f107 0210 	add.w	r2, r7, #16
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4611      	mov	r1, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f002 fbcc 	bl	8003b98 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001400:	f002 fbb6 	bl	8003b70 <HAL_RCC_GetPCLK2Freq>
 8001404:	4603      	mov	r3, r0
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800140a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140c:	4a13      	ldr	r2, [pc, #76]	; (800145c <HAL_InitTick+0xa8>)
 800140e:	fba2 2303 	umull	r2, r3, r2, r3
 8001412:	0c9b      	lsrs	r3, r3, #18
 8001414:	3b01      	subs	r3, #1
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <HAL_InitTick+0xac>)
 800141a:	4a12      	ldr	r2, [pc, #72]	; (8001464 <HAL_InitTick+0xb0>)
 800141c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <HAL_InitTick+0xac>)
 8001420:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001424:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001426:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <HAL_InitTick+0xac>)
 8001428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800142a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <HAL_InitTick+0xac>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_InitTick+0xac>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001438:	4809      	ldr	r0, [pc, #36]	; (8001460 <HAL_InitTick+0xac>)
 800143a:	f002 fbdf 	bl	8003bfc <HAL_TIM_Base_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d104      	bne.n	800144e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001444:	4806      	ldr	r0, [pc, #24]	; (8001460 <HAL_InitTick+0xac>)
 8001446:	f002 fc33 	bl	8003cb0 <HAL_TIM_Base_Start_IT>
 800144a:	4603      	mov	r3, r0
 800144c:	e000      	b.n	8001450 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	3730      	adds	r7, #48	; 0x30
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40023800 	.word	0x40023800
 800145c:	431bde83 	.word	0x431bde83
 8001460:	20006ad4 	.word	0x20006ad4
 8001464:	40010000 	.word	0x40010000

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800146c:	e7fe      	b.n	800146c <NMI_Handler+0x4>

0800146e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <HardFault_Handler+0x4>

08001474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <MemManage_Handler+0x4>

0800147a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <BusFault_Handler+0x4>

08001480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <UsageFault_Handler+0x4>

08001486 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800149a:	f002 fc79 	bl	8003d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20006ad4 	.word	0x20006ad4

080014a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014ac:	4802      	ldr	r0, [pc, #8]	; (80014b8 <USART1_IRQHandler+0x10>)
 80014ae:	f002 ff63 	bl	8004378 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200069d4 	.word	0x200069d4

080014bc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <ETH_IRQHandler+0x10>)
 80014c2:	f000 ffc3 	bl	800244c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20008444 	.word	0x20008444

080014d0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_USART_IRQHandler(&husart6);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <USART6_IRQHandler+0x10>)
 80014d6:	f003 fe49 	bl	800516c <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2000698c 	.word	0x2000698c

080014e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
	return 1;
 80014e8:	2301      	movs	r3, #1
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <_kill>:

int _kill(int pid, int sig)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <_kill+0x20>)
 8001500:	2216      	movs	r2, #22
 8001502:	601a      	str	r2, [r3, #0]
	return -1;
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	2000d3d0 	.word	0x2000d3d0

08001518 <_exit>:

void _exit (int status)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001520:	f04f 31ff 	mov.w	r1, #4294967295
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ffe5 	bl	80014f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 800152a:	e7fe      	b.n	800152a <_exit+0x12>

0800152c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	e00a      	b.n	8001554 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800153e:	f3af 8000 	nop.w
 8001542:	4601      	mov	r1, r0
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	60ba      	str	r2, [r7, #8]
 800154a:	b2ca      	uxtb	r2, r1
 800154c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3301      	adds	r3, #1
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	429a      	cmp	r2, r3
 800155a:	dbf0      	blt.n	800153e <_read+0x12>
	}

return len;
 800155c:	687b      	ldr	r3, [r7, #4]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	e009      	b.n	800158c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	1c5a      	adds	r2, r3, #1
 800157c:	60ba      	str	r2, [r7, #8]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3301      	adds	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	429a      	cmp	r2, r3
 8001592:	dbf1      	blt.n	8001578 <_write+0x12>
	}
	return len;
 8001594:	687b      	ldr	r3, [r7, #4]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <_close>:

int _close(int file)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
	return -1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c6:	605a      	str	r2, [r3, #4]
	return 0;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <_isatty>:

int _isatty(int file)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
	return 1;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
	return 0;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001610:	4a14      	ldr	r2, [pc, #80]	; (8001664 <_sbrk+0x5c>)
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <_sbrk+0x60>)
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <_sbrk+0x64>)
 8001626:	4a12      	ldr	r2, [pc, #72]	; (8001670 <_sbrk+0x68>)
 8001628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <_sbrk+0x64>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	429a      	cmp	r2, r3
 8001636:	d205      	bcs.n	8001644 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <_sbrk+0x6c>)
 800163a:	220c      	movs	r2, #12
 800163c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163e:	f04f 33ff 	mov.w	r3, #4294967295
 8001642:	e009      	b.n	8001658 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	4a06      	ldr	r2, [pc, #24]	; (800166c <_sbrk+0x64>)
 8001654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	4618      	mov	r0, r3
 800165a:	371c      	adds	r7, #28
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	20020000 	.word	0x20020000
 8001668:	00000400 	.word	0x00000400
 800166c:	20000360 	.word	0x20000360
 8001670:	2000d3d8 	.word	0x2000d3d8
 8001674:	2000d3d0 	.word	0x2000d3d0

08001678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <SystemInit+0x20>)
 800167e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <SystemInit+0x20>)
 8001684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <HAL_UART_RxCpltCallback>:

extern UART_HandleTypeDef huart6;
extern Meas_Data meas_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	int t = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
	meas_data.data[25]++;
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_UART_RxCpltCallback+0x48>)
 80016aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80016ac:	3301      	adds	r3, #1
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <HAL_UART_RxCpltCallback+0x48>)
 80016b2:	865a      	strh	r2, [r3, #50]	; 0x32
	char message[] = "hello";;
 80016b4:	4a0c      	ldr	r2, [pc, #48]	; (80016e8 <HAL_UART_RxCpltCallback+0x4c>)
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016be:	6018      	str	r0, [r3, #0]
 80016c0:	3304      	adds	r3, #4
 80016c2:	8019      	strh	r1, [r3, #0]
	HAL_UART_Transmit(huart, (uint8_t*)message, 5, 10);
 80016c4:	f107 010c 	add.w	r1, r7, #12
 80016c8:	230a      	movs	r3, #10
 80016ca:	2205      	movs	r2, #5
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f002 fd90 	bl	80041f2 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(huart,(uint8_t*)meas_data.data,1);
 80016d2:	2201      	movs	r2, #1
 80016d4:	4903      	ldr	r1, [pc, #12]	; (80016e4 <HAL_UART_RxCpltCallback+0x48>)
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f002 fe1d 	bl	8004316 <HAL_UART_Receive_IT>
}
 80016dc:	bf00      	nop
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20006a84 	.word	0x20006a84
 80016e8:	08017a50 	.word	0x08017a50

080016ec <Reset_Handler>:
 80016ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001724 <LoopFillZerobss+0x12>
 80016f0:	480d      	ldr	r0, [pc, #52]	; (8001728 <LoopFillZerobss+0x16>)
 80016f2:	490e      	ldr	r1, [pc, #56]	; (800172c <LoopFillZerobss+0x1a>)
 80016f4:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <LoopFillZerobss+0x1e>)
 80016f6:	2300      	movs	r3, #0
 80016f8:	e002      	b.n	8001700 <LoopCopyDataInit>

080016fa <CopyDataInit>:
 80016fa:	58d4      	ldr	r4, [r2, r3]
 80016fc:	50c4      	str	r4, [r0, r3]
 80016fe:	3304      	adds	r3, #4

08001700 <LoopCopyDataInit>:
 8001700:	18c4      	adds	r4, r0, r3
 8001702:	428c      	cmp	r4, r1
 8001704:	d3f9      	bcc.n	80016fa <CopyDataInit>
 8001706:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <LoopFillZerobss+0x22>)
 8001708:	4c0b      	ldr	r4, [pc, #44]	; (8001738 <LoopFillZerobss+0x26>)
 800170a:	2300      	movs	r3, #0
 800170c:	e001      	b.n	8001712 <LoopFillZerobss>

0800170e <FillZerobss>:
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	3204      	adds	r2, #4

08001712 <LoopFillZerobss>:
 8001712:	42a2      	cmp	r2, r4
 8001714:	d3fb      	bcc.n	800170e <FillZerobss>
 8001716:	f7ff ffaf 	bl	8001678 <SystemInit>
 800171a:	f015 f999 	bl	8016a50 <__libc_init_array>
 800171e:	f7ff f843 	bl	80007a8 <main>
 8001722:	4770      	bx	lr
 8001724:	20020000 	.word	0x20020000
 8001728:	20000000 	.word	0x20000000
 800172c:	20000084 	.word	0x20000084
 8001730:	0801b24c 	.word	0x0801b24c
 8001734:	20000084 	.word	0x20000084
 8001738:	2000d3d8 	.word	0x2000d3d8

0800173c <ADC_IRQHandler>:
 800173c:	e7fe      	b.n	800173c <ADC_IRQHandler>

0800173e <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b084      	sub	sp, #16
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d104      	bne.n	8001756 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800174c:	b672      	cpsid	i
}
 800174e:	bf00      	nop
 8001750:	f7ff f98c 	bl	8000a6c <Error_Handler>
 8001754:	e7fe      	b.n	8001754 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	e007      	b.n	800176c <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	2100      	movs	r1, #0
 8001762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	3301      	adds	r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d9f4      	bls.n	800175c <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	721a      	strb	r2, [r3, #8]
}
 8001778:	bf00      	nop
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d104      	bne.n	8001798 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800178e:	b672      	cpsid	i
}
 8001790:	bf00      	nop
 8001792:	f7ff f96b 	bl	8000a6c <Error_Handler>
 8001796:	e7fe      	b.n	8001796 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	7a1b      	ldrb	r3, [r3, #8]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d904      	bls.n	80017aa <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80017a0:	b672      	cpsid	i
}
 80017a2:	bf00      	nop
 80017a4:	f7ff f962 	bl	8000a6c <Error_Handler>
 80017a8:	e7fe      	b.n	80017a8 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7a1b      	ldrb	r3, [r3, #8]
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	b2d1      	uxtb	r1, r2
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	7211      	strb	r1, [r2, #8]
 80017b6:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80017b8:	f3ef 8211 	mrs	r2, BASEPRI
 80017bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017c0:	f383 8811 	msr	BASEPRI, r3
 80017c4:	f3bf 8f6f 	isb	sy
 80017c8:	f3bf 8f4f 	dsb	sy
 80017cc:	60fa      	str	r2, [r7, #12]
 80017ce:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d104      	bne.n	80017f8 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80017ee:	b672      	cpsid	i
}
 80017f0:	bf00      	nop
 80017f2:	f7ff f93b 	bl	8000a6c <Error_Handler>
 80017f6:	e7fe      	b.n	80017f6 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	7a1b      	ldrb	r3, [r3, #8]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	7a1b      	ldrb	r3, [r3, #8]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d904      	bls.n	8001816 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 800180c:	b672      	cpsid	i
}
 800180e:	bf00      	nop
 8001810:	f7ff f92c 	bl	8000a6c <Error_Handler>
 8001814:	e7fe      	b.n	8001814 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	7a1b      	ldrb	r3, [r3, #8]
 800181a:	461a      	mov	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001822:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800182a:	bf00      	nop
}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d103      	bne.n	800184a <__retarget_lock_init_recursive+0x16>
  {
    errno = EINVAL;
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <__retarget_lock_init_recursive+0x48>)
 8001844:	2216      	movs	r2, #22
 8001846:	601a      	str	r2, [r3, #0]
    return;
 8001848:	e015      	b.n	8001876 <__retarget_lock_init_recursive+0x42>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 800184a:	200c      	movs	r0, #12
 800184c:	f015 f924 	bl	8016a98 <malloc>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <__retarget_lock_init_recursive+0x38>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff6a 	bl	800173e <stm32_lock_init>
    return;
 800186a:	e004      	b.n	8001876 <__retarget_lock_init_recursive+0x42>
  __ASM volatile ("cpsid i" : : : "memory");
 800186c:	b672      	cpsid	i
}
 800186e:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8001870:	f7ff f8fc 	bl	8000a6c <Error_Handler>
 8001874:	e7fe      	b.n	8001874 <__retarget_lock_init_recursive+0x40>
}
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	2000d3d0 	.word	0x2000d3d0

08001880 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d104      	bne.n	8001898 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800188e:	b672      	cpsid	i
}
 8001890:	bf00      	nop
 8001892:	f7ff f8eb 	bl	8000a6c <Error_Handler>
 8001896:	e7fe      	b.n	8001896 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ff70 	bl	8001780 <stm32_lock_acquire>
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d104      	bne.n	80018c0 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80018b6:	b672      	cpsid	i
}
 80018b8:	bf00      	nop
 80018ba:	f7ff f8d7 	bl	8000a6c <Error_Handler>
 80018be:	e7fe      	b.n	80018be <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ff8c 	bl	80017e0 <stm32_lock_release>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_Init+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0d      	ldr	r2, [pc, #52]	; (8001910 <HAL_Init+0x40>)
 80018da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_Init+0x40>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <HAL_Init+0x40>)
 80018e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <HAL_Init+0x40>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a07      	ldr	r2, [pc, #28]	; (8001910 <HAL_Init+0x40>)
 80018f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f8:	2003      	movs	r0, #3
 80018fa:	f000 f8fc 	bl	8001af6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018fe:	200f      	movs	r0, #15
 8001900:	f7ff fd58 	bl	80013b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001904:	f7ff fc8a 	bl	800121c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023c00 	.word	0x40023c00

08001914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_IncTick+0x20>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_IncTick+0x24>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4413      	add	r3, r2
 8001924:	4a04      	ldr	r2, [pc, #16]	; (8001938 <HAL_IncTick+0x24>)
 8001926:	6013      	str	r3, [r2, #0]
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	2000000c 	.word	0x2000000c
 8001938:	20006b1c 	.word	0x20006b1c

0800193c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return uwTick;
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <HAL_GetTick+0x14>)
 8001942:	681b      	ldr	r3, [r3, #0]
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20006b1c 	.word	0x20006b1c

08001954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800195c:	f7ff ffee 	bl	800193c <HAL_GetTick>
 8001960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196c:	d005      	beq.n	800197a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_Delay+0x44>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4413      	add	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800197a:	bf00      	nop
 800197c:	f7ff ffde 	bl	800193c <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	429a      	cmp	r2, r3
 800198a:	d8f7      	bhi.n	800197c <HAL_Delay+0x28>
  {
  }
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	2000000c 	.word	0x2000000c

0800199c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b8:	4013      	ands	r3, r2
 80019ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ce:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	60d3      	str	r3, [r2, #12]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <__NVIC_GetPriorityGrouping+0x18>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	0a1b      	lsrs	r3, r3, #8
 80019ee:	f003 0307 	and.w	r3, r3, #7
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	db0b      	blt.n	8001a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	f003 021f 	and.w	r2, r3, #31
 8001a18:	4907      	ldr	r1, [pc, #28]	; (8001a38 <__NVIC_EnableIRQ+0x38>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	095b      	lsrs	r3, r3, #5
 8001a20:	2001      	movs	r0, #1
 8001a22:	fa00 f202 	lsl.w	r2, r0, r2
 8001a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000e100 	.word	0xe000e100

08001a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	6039      	str	r1, [r7, #0]
 8001a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	db0a      	blt.n	8001a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	490c      	ldr	r1, [pc, #48]	; (8001a88 <__NVIC_SetPriority+0x4c>)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	0112      	lsls	r2, r2, #4
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	440b      	add	r3, r1
 8001a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a64:	e00a      	b.n	8001a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4908      	ldr	r1, [pc, #32]	; (8001a8c <__NVIC_SetPriority+0x50>)
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	3b04      	subs	r3, #4
 8001a74:	0112      	lsls	r2, r2, #4
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	440b      	add	r3, r1
 8001a7a:	761a      	strb	r2, [r3, #24]
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000e100 	.word	0xe000e100
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	; 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f1c3 0307 	rsb	r3, r3, #7
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	bf28      	it	cs
 8001aae:	2304      	movcs	r3, #4
 8001ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	2b06      	cmp	r3, #6
 8001ab8:	d902      	bls.n	8001ac0 <NVIC_EncodePriority+0x30>
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3b03      	subs	r3, #3
 8001abe:	e000      	b.n	8001ac2 <NVIC_EncodePriority+0x32>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43da      	mvns	r2, r3
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae2:	43d9      	mvns	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	4313      	orrs	r3, r2
         );
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3724      	adds	r7, #36	; 0x24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ff4c 	bl	800199c <__NVIC_SetPriorityGrouping>
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b1e:	f7ff ff61 	bl	80019e4 <__NVIC_GetPriorityGrouping>
 8001b22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	68b9      	ldr	r1, [r7, #8]
 8001b28:	6978      	ldr	r0, [r7, #20]
 8001b2a:	f7ff ffb1 	bl	8001a90 <NVIC_EncodePriority>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff ff80 	bl	8001a3c <__NVIC_SetPriority>
}
 8001b3c:	bf00      	nop
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff ff54 	bl	8001a00 <__NVIC_EnableIRQ>
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b6e:	f7ff fee5 	bl	800193c <HAL_GetTick>
 8001b72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d008      	beq.n	8001b92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2280      	movs	r2, #128	; 0x80
 8001b84:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e052      	b.n	8001c38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0216 	bic.w	r2, r2, #22
 8001ba0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695a      	ldr	r2, [r3, #20]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bb0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d103      	bne.n	8001bc2 <HAL_DMA_Abort+0x62>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0208 	bic.w	r2, r2, #8
 8001bd0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0201 	bic.w	r2, r2, #1
 8001be0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be2:	e013      	b.n	8001c0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001be4:	f7ff feaa 	bl	800193c <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b05      	cmp	r3, #5
 8001bf0:	d90c      	bls.n	8001c0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e015      	b.n	8001c38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1e4      	bne.n	8001be4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1e:	223f      	movs	r2, #63	; 0x3f
 8001c20:	409a      	lsls	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d004      	beq.n	8001c5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2280      	movs	r2, #128	; 0x80
 8001c58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00c      	b.n	8001c78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2205      	movs	r2, #5
 8001c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0201 	bic.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001c94:	4baa      	ldr	r3, [pc, #680]	; (8001f40 <HAL_ETH_Init+0x2bc>)
 8001c96:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e183      	b.n	8001fb2 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d106      	bne.n	8001cc4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f004 f8e8 	bl	8005e94 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	4b9e      	ldr	r3, [pc, #632]	; (8001f44 <HAL_ETH_Init+0x2c0>)
 8001cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ccc:	4a9d      	ldr	r2, [pc, #628]	; (8001f44 <HAL_ETH_Init+0x2c0>)
 8001cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd2:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd4:	4b9b      	ldr	r3, [pc, #620]	; (8001f44 <HAL_ETH_Init+0x2c0>)
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001ce0:	4b99      	ldr	r3, [pc, #612]	; (8001f48 <HAL_ETH_Init+0x2c4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	4a98      	ldr	r2, [pc, #608]	; (8001f48 <HAL_ETH_Init+0x2c4>)
 8001ce6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001cea:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001cec:	4b96      	ldr	r3, [pc, #600]	; (8001f48 <HAL_ETH_Init+0x2c4>)
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	4994      	ldr	r1, [pc, #592]	; (8001f48 <HAL_ETH_Init+0x2c4>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 0201 	orr.w	r2, r2, #1
 8001d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d10:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d12:	f7ff fe13 	bl	800193c <HAL_GetTick>
 8001d16:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001d18:	e011      	b.n	8001d3e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001d1a:	f7ff fe0f 	bl	800193c <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d28:	d909      	bls.n	8001d3e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e139      	b.n	8001fb2 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1e4      	bne.n	8001d1a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f023 031c 	bic.w	r3, r3, #28
 8001d5e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001d60:	f001 fee6 	bl	8003b30 <HAL_RCC_GetHCLKFreq>
 8001d64:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	4a78      	ldr	r2, [pc, #480]	; (8001f4c <HAL_ETH_Init+0x2c8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d908      	bls.n	8001d80 <HAL_ETH_Init+0xfc>
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	4a77      	ldr	r2, [pc, #476]	; (8001f50 <HAL_ETH_Init+0x2cc>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d804      	bhi.n	8001d80 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f043 0308 	orr.w	r3, r3, #8
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	e027      	b.n	8001dd0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	4a73      	ldr	r2, [pc, #460]	; (8001f50 <HAL_ETH_Init+0x2cc>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d908      	bls.n	8001d9a <HAL_ETH_Init+0x116>
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	4a6d      	ldr	r2, [pc, #436]	; (8001f40 <HAL_ETH_Init+0x2bc>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d204      	bcs.n	8001d9a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f043 030c 	orr.w	r3, r3, #12
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	e01a      	b.n	8001dd0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	4a68      	ldr	r2, [pc, #416]	; (8001f40 <HAL_ETH_Init+0x2bc>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d303      	bcc.n	8001daa <HAL_ETH_Init+0x126>
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	4a6b      	ldr	r2, [pc, #428]	; (8001f54 <HAL_ETH_Init+0x2d0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d911      	bls.n	8001dce <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	4a69      	ldr	r2, [pc, #420]	; (8001f54 <HAL_ETH_Init+0x2d0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d908      	bls.n	8001dc4 <HAL_ETH_Init+0x140>
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	4a68      	ldr	r2, [pc, #416]	; (8001f58 <HAL_ETH_Init+0x2d4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d804      	bhi.n	8001dc4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f043 0304 	orr.w	r3, r3, #4
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	e005      	b.n	8001dd0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f043 0310 	orr.w	r3, r3, #16
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	e000      	b.n	8001dd0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001dce:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001dd8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ddc:	2100      	movs	r1, #0
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fc17 	bl	8002612 <HAL_ETH_WritePHYRegister>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00b      	beq.n	8001e02 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001dee:	6939      	ldr	r1, [r7, #16]
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 fdcd 	bl	8002990 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e0d7      	b.n	8001fb2 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001e02:	20ff      	movs	r0, #255	; 0xff
 8001e04:	f7ff fda6 	bl	8001954 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 80a5 	beq.w	8001f5c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e12:	f7ff fd93 	bl	800193c <HAL_GetTick>
 8001e16:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001e18:	f107 030c 	add.w	r3, r7, #12
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	2101      	movs	r1, #1
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 fb8e 	bl	8002542 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001e26:	f7ff fd89 	bl	800193c <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d90f      	bls.n	8001e58 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001e3c:	6939      	ldr	r1, [r7, #16]
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fda6 	bl	8002990 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e0ac      	b.n	8001fb2 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0da      	beq.n	8001e18 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001e62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e66:	2100      	movs	r1, #0
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 fbd2 	bl	8002612 <HAL_ETH_WritePHYRegister>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00b      	beq.n	8001e8c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001e78:	6939      	ldr	r1, [r7, #16]
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 fd88 	bl	8002990 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e092      	b.n	8001fb2 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e8c:	f7ff fd56 	bl	800193c <HAL_GetTick>
 8001e90:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001e92:	f107 030c 	add.w	r3, r7, #12
 8001e96:	461a      	mov	r2, r3
 8001e98:	2101      	movs	r1, #1
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 fb51 	bl	8002542 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001ea0:	f7ff fd4c 	bl	800193c <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d90f      	bls.n	8001ed2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001eb6:	6939      	ldr	r1, [r7, #16]
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 fd69 	bl	8002990 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e06f      	b.n	8001fb2 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f003 0320 	and.w	r3, r3, #32
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0da      	beq.n	8001e92 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2110      	movs	r1, #16
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fb2c 	bl	8002542 <HAL_ETH_ReadPHYRegister>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00b      	beq.n	8001f08 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001ef4:	6939      	ldr	r1, [r7, #16]
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 fd4a 	bl	8002990 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001f04:	2301      	movs	r3, #1
 8001f06:	e054      	b.n	8001fb2 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d004      	beq.n	8001f1c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	e002      	b.n	8001f22 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	e035      	b.n	8001fa0 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	e030      	b.n	8001fa0 <HAL_ETH_Init+0x31c>
 8001f3e:	bf00      	nop
 8001f40:	03938700 	.word	0x03938700
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40013800 	.word	0x40013800
 8001f4c:	01312cff 	.word	0x01312cff
 8001f50:	02160ebf 	.word	0x02160ebf
 8001f54:	05f5e0ff 	.word	0x05f5e0ff
 8001f58:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	08db      	lsrs	r3, r3, #3
 8001f62:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	085b      	lsrs	r3, r3, #1
 8001f6a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	2100      	movs	r1, #0
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fb4c 	bl	8002612 <HAL_ETH_WritePHYRegister>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00b      	beq.n	8001f98 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001f84:	6939      	ldr	r1, [r7, #16]
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fd02 	bl	8002990 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e00c      	b.n	8001fb2 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001f98:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001f9c:	f7ff fcda 	bl	8001954 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001fa0:	6939      	ldr	r1, [r7, #16]
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fcf4 	bl	8002990 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3720      	adds	r7, #32
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop

08001fbc <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_ETH_DMATxDescListInit+0x20>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e052      	b.n	8002082 <HAL_ETH_DMATxDescListInit+0xc6>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	e030      	b.n	800205a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	015b      	lsls	r3, r3, #5
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	4413      	add	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002008:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002010:	fb02 f303 	mul.w	r3, r2, r3
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	4413      	add	r3, r2
 8002018:	461a      	mov	r2, r3
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d105      	bne.n	8002032 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	3b01      	subs	r3, #1
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	429a      	cmp	r2, r3
 800203a:	d208      	bcs.n	800204e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	3301      	adds	r3, #1
 8002040:	015b      	lsls	r3, r3, #5
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	4413      	add	r3, r2
 8002046:	461a      	mov	r2, r3
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	60da      	str	r2, [r3, #12]
 800204c:	e002      	b.n	8002054 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	3301      	adds	r3, #1
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d3ca      	bcc.n	8001ff8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800206c:	3310      	adds	r3, #16
 800206e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800208e:	b480      	push	{r7}
 8002090:	b087      	sub	sp, #28
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_ETH_DMARxDescListInit+0x20>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e056      	b.n	800215c <HAL_ETH_DMARxDescListInit+0xce>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2202      	movs	r2, #2
 80020ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	e034      	b.n	8002134 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	015b      	lsls	r3, r3, #5
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	4413      	add	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80020da:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80020e2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80020ea:	fb02 f303 	mul.w	r3, r2, r3
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	461a      	mov	r2, r3
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d105      	bne.n	800210c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	3b01      	subs	r3, #1
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	429a      	cmp	r2, r3
 8002114:	d208      	bcs.n	8002128 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3301      	adds	r3, #1
 800211a:	015b      	lsls	r3, r3, #5
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	4413      	add	r3, r2
 8002120:	461a      	mov	r2, r3
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	e002      	b.n	800212e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	3301      	adds	r3, #1
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d3c6      	bcc.n	80020ca <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002146:	330c      	adds	r3, #12
 8002148:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_ETH_TransmitFrame+0x24>
 8002188:	2302      	movs	r3, #2
 800218a:	e0cd      	b.n	8002328 <HAL_ETH_TransmitFrame+0x1c0>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d109      	bne.n	80021b6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80021b2:	2301      	movs	r3, #1
 80021b4:	e0b8      	b.n	8002328 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	da09      	bge.n	80021d4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2212      	movs	r2, #18
 80021c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0a9      	b.n	8002328 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80021da:	4293      	cmp	r3, r2
 80021dc:	d915      	bls.n	800220a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	4a54      	ldr	r2, [pc, #336]	; (8002334 <HAL_ETH_TransmitFrame+0x1cc>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	0a9b      	lsrs	r3, r3, #10
 80021e8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	4b51      	ldr	r3, [pc, #324]	; (8002334 <HAL_ETH_TransmitFrame+0x1cc>)
 80021ee:	fba3 1302 	umull	r1, r3, r3, r2
 80021f2:	0a9b      	lsrs	r3, r3, #10
 80021f4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d005      	beq.n	800220e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	3301      	adds	r3, #1
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	e001      	b.n	800220e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800220a:	2301      	movs	r3, #1
 800220c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d11c      	bne.n	800224e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002222:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800222e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800223e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	461a      	mov	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	62da      	str	r2, [r3, #44]	; 0x2c
 800224c:	e04b      	b.n	80022e6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	e044      	b.n	80022de <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002262:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d107      	bne.n	800227a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002278:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002282:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	3b01      	subs	r3, #1
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	429a      	cmp	r2, r3
 800228c:	d116      	bne.n	80022bc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800229c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	4a25      	ldr	r2, [pc, #148]	; (8002338 <HAL_ETH_TransmitFrame+0x1d0>)
 80022a2:	fb02 f203 	mul.w	r2, r2, r3
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	4413      	add	r3, r2
 80022aa:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80022ae:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80022ba:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022ca:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	461a      	mov	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	3301      	adds	r3, #1
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d3b6      	bcc.n	8002254 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ee:	3314      	adds	r3, #20
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00d      	beq.n	8002316 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002302:	3314      	adds	r3, #20
 8002304:	2204      	movs	r2, #4
 8002306:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002310:	3304      	adds	r3, #4
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	ac02b00b 	.word	0xac02b00b
 8002338:	fffffa0c 	.word	0xfffffa0c

0800233c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8002352:	2302      	movs	r3, #2
 8002354:	e074      	b.n	8002440 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2202      	movs	r2, #2
 8002362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002366:	e05a      	b.n	800241e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3301      	adds	r3, #1
 800236c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800237c:	d10d      	bne.n	800239a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	461a      	mov	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
 8002398:	e041      	b.n	800241e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10b      	bne.n	80023c0 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	461a      	mov	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	629a      	str	r2, [r3, #40]	; 0x28
 80023be:	e02e      	b.n	800241e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d103      	bne.n	80023e2 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80023ee:	1f1a      	subs	r2, r3, #4
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	461a      	mov	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	e010      	b.n	8002440 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	db02      	blt.n	800242e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d99c      	bls.n	8002368 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800245c:	3314      	adds	r3, #20
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002464:	2b40      	cmp	r3, #64	; 0x40
 8002466:	d112      	bne.n	800248e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f003 fdc1 	bl	8005ff0 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002476:	3314      	adds	r3, #20
 8002478:	2240      	movs	r2, #64	; 0x40
 800247a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800248c:	e01b      	b.n	80024c6 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002496:	3314      	adds	r3, #20
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d111      	bne.n	80024c6 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f839 	bl	800251a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b0:	3314      	adds	r3, #20
 80024b2:	2201      	movs	r2, #1
 80024b4:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ce:	3314      	adds	r3, #20
 80024d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024d4:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024de:	3314      	adds	r3, #20
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ea:	d112      	bne.n	8002512 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f81e 	bl	800252e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024fa:	3314      	adds	r3, #20
 80024fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002500:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b086      	sub	sp, #24
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	460b      	mov	r3, r1
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b82      	cmp	r3, #130	; 0x82
 8002562:	d101      	bne.n	8002568 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002564:	2302      	movs	r3, #2
 8002566:	e050      	b.n	800260a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2282      	movs	r2, #130	; 0x82
 800256c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f003 031c 	and.w	r3, r3, #28
 800257e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8a1b      	ldrh	r3, [r3, #16]
 8002584:	02db      	lsls	r3, r3, #11
 8002586:	b29b      	uxth	r3, r3
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	4313      	orrs	r3, r2
 800258c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800258e:	897b      	ldrh	r3, [r7, #10]
 8002590:	019b      	lsls	r3, r3, #6
 8002592:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4313      	orrs	r3, r2
 800259a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f023 0302 	bic.w	r3, r3, #2
 80025a2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80025b4:	f7ff f9c2 	bl	800193c <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80025ba:	e015      	b.n	80025e8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80025bc:	f7ff f9be 	bl	800193c <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ca:	d309      	bcc.n	80025e0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e014      	b.n	800260a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1e4      	bne.n	80025bc <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b086      	sub	sp, #24
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	460b      	mov	r3, r1
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b42      	cmp	r3, #66	; 0x42
 8002632:	d101      	bne.n	8002638 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002634:	2302      	movs	r3, #2
 8002636:	e04e      	b.n	80026d6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2242      	movs	r2, #66	; 0x42
 800263c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f003 031c 	and.w	r3, r3, #28
 800264e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8a1b      	ldrh	r3, [r3, #16]
 8002654:	02db      	lsls	r3, r3, #11
 8002656:	b29b      	uxth	r3, r3
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	4313      	orrs	r3, r2
 800265c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800265e:	897b      	ldrh	r3, [r7, #10]
 8002660:	019b      	lsls	r3, r3, #6
 8002662:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f043 0302 	orr.w	r3, r3, #2
 8002672:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800268e:	f7ff f955 	bl	800193c <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002694:	e015      	b.n	80026c2 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002696:	f7ff f951 	bl	800193c <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a4:	d309      	bcc.n	80026ba <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e00d      	b.n	80026d6 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1e4      	bne.n	8002696 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_ETH_Start+0x16>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e01f      	b.n	8002734 <HAL_ETH_Start+0x56>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fb45 	bl	8002d94 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fb7c 	bl	8002e08 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 fc13 	bl	8002f3c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 fbb0 	bl	8002e7c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fbdd 	bl	8002edc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_ETH_Stop+0x16>
 800274e:	2302      	movs	r3, #2
 8002750:	e01f      	b.n	8002792 <HAL_ETH_Stop+0x56>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2202      	movs	r2, #2
 800275e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 fba2 	bl	8002eac <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 fbcf 	bl	8002f0c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fb67 	bl	8002e42 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 fbe1 	bl	8002f3c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 fb27 	bl	8002dce <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_ETH_ConfigMAC+0x1c>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e0e4      	b.n	8002982 <HAL_ETH_ConfigMAC+0x1e6>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 80b1 	beq.w	8002932 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	4b6c      	ldr	r3, [pc, #432]	; (800298c <HAL_ETH_ConfigMAC+0x1f0>)
 80027dc:	4013      	ands	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80027e8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80027ee:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80027f4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80027fa:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002800:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002806:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800280c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002812:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002818:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800281e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002824:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800282a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002842:	2001      	movs	r0, #1
 8002844:	f7ff f886 	bl	8001954 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002858:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800285e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002864:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800286a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002870:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002876:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002882:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002884:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800288e:	2001      	movs	r0, #1
 8002890:	f7ff f860 	bl	8001954 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80028a4:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80028ae:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	f64f 7341 	movw	r3, #65345	; 0xff41
 80028be:	4013      	ands	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80028cc:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80028d2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80028d8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80028de:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80028e4:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80028fc:	2001      	movs	r0, #1
 80028fe:	f7ff f829 	bl	8001954 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002922:	2001      	movs	r0, #1
 8002924:	f7ff f816 	bl	8001954 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	61da      	str	r2, [r3, #28]
 8002930:	e01e      	b.n	8002970 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002940:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002962:	2001      	movs	r0, #1
 8002964:	f7fe fff6 	bl	8001954 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	ff20810f 	.word	0xff20810f

08002990 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b0b0      	sub	sp, #192	; 0xc0
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029ac:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80029ba:	2300      	movs	r3, #0
 80029bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80029be:	2300      	movs	r3, #0
 80029c0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d103      	bne.n	80029de <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80029d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029da:	663b      	str	r3, [r7, #96]	; 0x60
 80029dc:	e001      	b.n	80029e2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80029de:	2300      	movs	r3, #0
 80029e0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80029e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029e6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80029e8:	2300      	movs	r3, #0
 80029ea:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80029ec:	2300      	movs	r3, #0
 80029ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80029f0:	2300      	movs	r3, #0
 80029f2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80029f8:	2300      	movs	r3, #0
 80029fa:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80029fc:	2340      	movs	r3, #64	; 0x40
 80029fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002a12:	2300      	movs	r3, #0
 8002a14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002a30:	2380      	movs	r3, #128	; 0x80
 8002a32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a68:	4bac      	ldr	r3, [pc, #688]	; (8002d1c <ETH_MACDMAConfig+0x38c>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002a70:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002a74:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002a78:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002a7c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002a82:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002a84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002a86:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002a8a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002a90:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002a94:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002a96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002a98:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002a9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002a9c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002aa0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002aa4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002aa6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ab8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	f7fe ff45 	bl	8001954 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ad2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002ad4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002ad6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002ad8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002ada:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002adc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002ade:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002ae2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002ae4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002ae8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002aea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002aee:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002af0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002af4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002af8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002b00:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002b02:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b0e:	2001      	movs	r0, #1
 8002b10:	f7fe ff20 	bl	8001954 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b1c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b26:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002b30:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002b3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b40:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002b44:	4013      	ands	r3, r2
 8002b46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002b4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b4e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002b50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002b54:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002b56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002b5a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002b5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002b60:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002b62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002b66:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002b68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002b6c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002b6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b80:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	f7fe fee1 	bl	8001954 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b9a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002b9c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002ba0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	f7fe fecc 	bl	8001954 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bc4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002bca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bce:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002bd4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002bd8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002be6:	2300      	movs	r3, #0
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002bea:	2304      	movs	r3, #4
 8002bec:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002bee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002bf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bf8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002bfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bfe:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c04:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002c06:	2380      	movs	r3, #128	; 0x80
 8002c08:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c1a:	3318      	adds	r3, #24
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002c22:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c26:	4b3e      	ldr	r3, [pc, #248]	; (8002d20 <ETH_MACDMAConfig+0x390>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002c2e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002c30:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002c32:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002c34:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002c36:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002c38:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002c3a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002c3c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002c3e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002c40:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002c42:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002c44:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002c46:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002c4a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002c4e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002c50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c62:	3318      	adds	r3, #24
 8002c64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c68:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c72:	3318      	adds	r3, #24
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	f7fe fe6a 	bl	8001954 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c88:	3318      	adds	r3, #24
 8002c8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c8e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002c94:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002c98:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002c9c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002ca0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002ca6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002caa:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cb8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cc8:	2001      	movs	r0, #1
 8002cca:	f7fe fe43 	bl	8001954 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cd6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cda:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d10f      	bne.n	8002d04 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cec:	331c      	adds	r3, #28
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002cf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d00:	331c      	adds	r3, #28
 8002d02:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f809 	bl	8002d24 <ETH_MACAddressConfig>
}
 8002d12:	bf00      	nop
 8002d14:	37c0      	adds	r7, #192	; 0xc0
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	ff20810f 	.word	0xff20810f
 8002d20:	f8de3f23 	.word	0xf8de3f23

08002d24 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3305      	adds	r3, #5
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	3204      	adds	r2, #4
 8002d3c:	7812      	ldrb	r2, [r2, #0]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <ETH_MACAddressConfig+0x68>)
 8002d46:	4413      	add	r3, r2
 8002d48:	461a      	mov	r2, r3
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3303      	adds	r3, #3
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	061a      	lsls	r2, r3, #24
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3302      	adds	r3, #2
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	041b      	lsls	r3, r3, #16
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3301      	adds	r3, #1
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	7812      	ldrb	r2, [r2, #0]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <ETH_MACAddressConfig+0x6c>)
 8002d76:	4413      	add	r3, r2
 8002d78:	461a      	mov	r2, r3
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	6013      	str	r3, [r2, #0]
}
 8002d7e:	bf00      	nop
 8002d80:	371c      	adds	r7, #28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40028040 	.word	0x40028040
 8002d90:	40028044 	.word	0x40028044

08002d94 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0208 	orr.w	r2, r2, #8
 8002dae:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002db8:	2001      	movs	r0, #1
 8002dba:	f000 f8e9 	bl	8002f90 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	601a      	str	r2, [r3, #0]
}
 8002dc6:	bf00      	nop
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0208 	bic.w	r2, r2, #8
 8002de8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002df2:	2001      	movs	r0, #1
 8002df4:	f000 f8cc 	bl	8002f90 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	601a      	str	r2, [r3, #0]
}
 8002e00:	bf00      	nop
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0204 	orr.w	r2, r2, #4
 8002e22:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	f000 f8af 	bl	8002f90 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	601a      	str	r2, [r3, #0]
}
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b084      	sub	sp, #16
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0204 	bic.w	r2, r2, #4
 8002e5c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002e66:	2001      	movs	r0, #1
 8002e68:	f000 f892 	bl	8002f90 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	601a      	str	r2, [r3, #0]
}
 8002e74:	bf00      	nop
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e8c:	3318      	adds	r3, #24
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e9c:	3318      	adds	r3, #24
 8002e9e:	601a      	str	r2, [r3, #0]
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ebc:	3318      	adds	r3, #24
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ecc:	3318      	adds	r3, #24
 8002ece:	601a      	str	r2, [r3, #0]
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eec:	3318      	adds	r3, #24
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0202 	orr.w	r2, r2, #2
 8002ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002efc:	3318      	adds	r3, #24
 8002efe:	601a      	str	r2, [r3, #0]
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f1c:	3318      	adds	r3, #24
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0202 	bic.w	r2, r2, #2
 8002f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f2c:	3318      	adds	r3, #24
 8002f2e:	601a      	str	r2, [r3, #0]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f50:	3318      	adds	r3, #24
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f60:	3318      	adds	r3, #24
 8002f62:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f6c:	3318      	adds	r3, #24
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002f72:	2001      	movs	r0, #1
 8002f74:	f000 f80c 	bl	8002f90 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f82:	3318      	adds	r3, #24
 8002f84:	601a      	str	r2, [r3, #0]
}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <ETH_Delay+0x38>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a0b      	ldr	r2, [pc, #44]	; (8002fcc <ETH_Delay+0x3c>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	0a5b      	lsrs	r3, r3, #9
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	fb02 f303 	mul.w	r3, r2, r3
 8002faa:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002fac:	bf00      	nop
  } 
  while (Delay --);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1e5a      	subs	r2, r3, #1
 8002fb2:	60fa      	str	r2, [r7, #12]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f9      	bne.n	8002fac <ETH_Delay+0x1c>
}
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	20000004 	.word	0x20000004
 8002fcc:	10624dd3 	.word	0x10624dd3

08002fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	; 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
 8002fea:	e16b      	b.n	80032c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fec:	2201      	movs	r2, #1
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	429a      	cmp	r2, r3
 8003006:	f040 815a 	bne.w	80032be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	2b01      	cmp	r3, #1
 8003014:	d005      	beq.n	8003022 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800301e:	2b02      	cmp	r3, #2
 8003020:	d130      	bne.n	8003084 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	2203      	movs	r2, #3
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003058:	2201      	movs	r2, #1
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	091b      	lsrs	r3, r3, #4
 800306e:	f003 0201 	and.w	r2, r3, #1
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	2b03      	cmp	r3, #3
 800308e:	d017      	beq.n	80030c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	2203      	movs	r2, #3
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d123      	bne.n	8003114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	08da      	lsrs	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3208      	adds	r2, #8
 80030d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	220f      	movs	r2, #15
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	08da      	lsrs	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3208      	adds	r2, #8
 800310e:	69b9      	ldr	r1, [r7, #24]
 8003110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	2203      	movs	r2, #3
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 0203 	and.w	r2, r3, #3
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80b4 	beq.w	80032be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	4b60      	ldr	r3, [pc, #384]	; (80032dc <HAL_GPIO_Init+0x30c>)
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	4a5f      	ldr	r2, [pc, #380]	; (80032dc <HAL_GPIO_Init+0x30c>)
 8003160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003164:	6453      	str	r3, [r2, #68]	; 0x44
 8003166:	4b5d      	ldr	r3, [pc, #372]	; (80032dc <HAL_GPIO_Init+0x30c>)
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003172:	4a5b      	ldr	r2, [pc, #364]	; (80032e0 <HAL_GPIO_Init+0x310>)
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	089b      	lsrs	r3, r3, #2
 8003178:	3302      	adds	r3, #2
 800317a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800317e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	220f      	movs	r2, #15
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4013      	ands	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a52      	ldr	r2, [pc, #328]	; (80032e4 <HAL_GPIO_Init+0x314>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d02b      	beq.n	80031f6 <HAL_GPIO_Init+0x226>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a51      	ldr	r2, [pc, #324]	; (80032e8 <HAL_GPIO_Init+0x318>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d025      	beq.n	80031f2 <HAL_GPIO_Init+0x222>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a50      	ldr	r2, [pc, #320]	; (80032ec <HAL_GPIO_Init+0x31c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d01f      	beq.n	80031ee <HAL_GPIO_Init+0x21e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a4f      	ldr	r2, [pc, #316]	; (80032f0 <HAL_GPIO_Init+0x320>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d019      	beq.n	80031ea <HAL_GPIO_Init+0x21a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a4e      	ldr	r2, [pc, #312]	; (80032f4 <HAL_GPIO_Init+0x324>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d013      	beq.n	80031e6 <HAL_GPIO_Init+0x216>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a4d      	ldr	r2, [pc, #308]	; (80032f8 <HAL_GPIO_Init+0x328>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00d      	beq.n	80031e2 <HAL_GPIO_Init+0x212>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a4c      	ldr	r2, [pc, #304]	; (80032fc <HAL_GPIO_Init+0x32c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d007      	beq.n	80031de <HAL_GPIO_Init+0x20e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a4b      	ldr	r2, [pc, #300]	; (8003300 <HAL_GPIO_Init+0x330>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d101      	bne.n	80031da <HAL_GPIO_Init+0x20a>
 80031d6:	2307      	movs	r3, #7
 80031d8:	e00e      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031da:	2308      	movs	r3, #8
 80031dc:	e00c      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031de:	2306      	movs	r3, #6
 80031e0:	e00a      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031e2:	2305      	movs	r3, #5
 80031e4:	e008      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031e6:	2304      	movs	r3, #4
 80031e8:	e006      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031ea:	2303      	movs	r3, #3
 80031ec:	e004      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e002      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <HAL_GPIO_Init+0x228>
 80031f6:	2300      	movs	r3, #0
 80031f8:	69fa      	ldr	r2, [r7, #28]
 80031fa:	f002 0203 	and.w	r2, r2, #3
 80031fe:	0092      	lsls	r2, r2, #2
 8003200:	4093      	lsls	r3, r2
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4313      	orrs	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003208:	4935      	ldr	r1, [pc, #212]	; (80032e0 <HAL_GPIO_Init+0x310>)
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	089b      	lsrs	r3, r3, #2
 800320e:	3302      	adds	r3, #2
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003216:	4b3b      	ldr	r3, [pc, #236]	; (8003304 <HAL_GPIO_Init+0x334>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	43db      	mvns	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800323a:	4a32      	ldr	r2, [pc, #200]	; (8003304 <HAL_GPIO_Init+0x334>)
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003240:	4b30      	ldr	r3, [pc, #192]	; (8003304 <HAL_GPIO_Init+0x334>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	43db      	mvns	r3, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003264:	4a27      	ldr	r2, [pc, #156]	; (8003304 <HAL_GPIO_Init+0x334>)
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800326a:	4b26      	ldr	r3, [pc, #152]	; (8003304 <HAL_GPIO_Init+0x334>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	43db      	mvns	r3, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800328e:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <HAL_GPIO_Init+0x334>)
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003294:	4b1b      	ldr	r3, [pc, #108]	; (8003304 <HAL_GPIO_Init+0x334>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	43db      	mvns	r3, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4013      	ands	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032b8:	4a12      	ldr	r2, [pc, #72]	; (8003304 <HAL_GPIO_Init+0x334>)
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	3301      	adds	r3, #1
 80032c2:	61fb      	str	r3, [r7, #28]
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	2b0f      	cmp	r3, #15
 80032c8:	f67f ae90 	bls.w	8002fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032cc:	bf00      	nop
 80032ce:	bf00      	nop
 80032d0:	3724      	adds	r7, #36	; 0x24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40023800 	.word	0x40023800
 80032e0:	40013800 	.word	0x40013800
 80032e4:	40020000 	.word	0x40020000
 80032e8:	40020400 	.word	0x40020400
 80032ec:	40020800 	.word	0x40020800
 80032f0:	40020c00 	.word	0x40020c00
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40021400 	.word	0x40021400
 80032fc:	40021800 	.word	0x40021800
 8003300:	40021c00 	.word	0x40021c00
 8003304:	40013c00 	.word	0x40013c00

08003308 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e264      	b.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d075      	beq.n	8003412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003326:	4ba3      	ldr	r3, [pc, #652]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b04      	cmp	r3, #4
 8003330:	d00c      	beq.n	800334c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003332:	4ba0      	ldr	r3, [pc, #640]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800333a:	2b08      	cmp	r3, #8
 800333c:	d112      	bne.n	8003364 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800333e:	4b9d      	ldr	r3, [pc, #628]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800334a:	d10b      	bne.n	8003364 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334c:	4b99      	ldr	r3, [pc, #612]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d05b      	beq.n	8003410 <HAL_RCC_OscConfig+0x108>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d157      	bne.n	8003410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e23f      	b.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336c:	d106      	bne.n	800337c <HAL_RCC_OscConfig+0x74>
 800336e:	4b91      	ldr	r3, [pc, #580]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a90      	ldr	r2, [pc, #576]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e01d      	b.n	80033b8 <HAL_RCC_OscConfig+0xb0>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x98>
 8003386:	4b8b      	ldr	r3, [pc, #556]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a8a      	ldr	r2, [pc, #552]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 800338c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	4b88      	ldr	r3, [pc, #544]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a87      	ldr	r2, [pc, #540]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0xb0>
 80033a0:	4b84      	ldr	r3, [pc, #528]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a83      	ldr	r2, [pc, #524]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b81      	ldr	r3, [pc, #516]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a80      	ldr	r2, [pc, #512]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 80033b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d013      	beq.n	80033e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7fe fabc 	bl	800193c <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c8:	f7fe fab8 	bl	800193c <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	; 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e204      	b.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	4b76      	ldr	r3, [pc, #472]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0xc0>
 80033e6:	e014      	b.n	8003412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fe faa8 	bl	800193c <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f0:	f7fe faa4 	bl	800193c <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	; 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e1f0      	b.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003402:	4b6c      	ldr	r3, [pc, #432]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0xe8>
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d063      	beq.n	80034e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800341e:	4b65      	ldr	r3, [pc, #404]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342a:	4b62      	ldr	r3, [pc, #392]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003432:	2b08      	cmp	r3, #8
 8003434:	d11c      	bne.n	8003470 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003436:	4b5f      	ldr	r3, [pc, #380]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d116      	bne.n	8003470 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003442:	4b5c      	ldr	r3, [pc, #368]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_RCC_OscConfig+0x152>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e1c4      	b.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345a:	4b56      	ldr	r3, [pc, #344]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4952      	ldr	r1, [pc, #328]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346e:	e03a      	b.n	80034e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d020      	beq.n	80034ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003478:	4b4f      	ldr	r3, [pc, #316]	; (80035b8 <HAL_RCC_OscConfig+0x2b0>)
 800347a:	2201      	movs	r2, #1
 800347c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7fe fa5d 	bl	800193c <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003486:	f7fe fa59 	bl	800193c <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e1a5      	b.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003498:	4b46      	ldr	r3, [pc, #280]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a4:	4b43      	ldr	r3, [pc, #268]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4940      	ldr	r1, [pc, #256]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	600b      	str	r3, [r1, #0]
 80034b8:	e015      	b.n	80034e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ba:	4b3f      	ldr	r3, [pc, #252]	; (80035b8 <HAL_RCC_OscConfig+0x2b0>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fe fa3c 	bl	800193c <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c8:	f7fe fa38 	bl	800193c <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e184      	b.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	4b36      	ldr	r3, [pc, #216]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d030      	beq.n	8003554 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d016      	beq.n	8003528 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fa:	4b30      	ldr	r3, [pc, #192]	; (80035bc <HAL_RCC_OscConfig+0x2b4>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003500:	f7fe fa1c 	bl	800193c <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003508:	f7fe fa18 	bl	800193c <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e164      	b.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351a:	4b26      	ldr	r3, [pc, #152]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 800351c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0x200>
 8003526:	e015      	b.n	8003554 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003528:	4b24      	ldr	r3, [pc, #144]	; (80035bc <HAL_RCC_OscConfig+0x2b4>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352e:	f7fe fa05 	bl	800193c <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003536:	f7fe fa01 	bl	800193c <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e14d      	b.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003548:	4b1a      	ldr	r3, [pc, #104]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 800354a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f0      	bne.n	8003536 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80a0 	beq.w	80036a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003562:	2300      	movs	r3, #0
 8003564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003566:	4b13      	ldr	r3, [pc, #76]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10f      	bne.n	8003592 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	4a0e      	ldr	r2, [pc, #56]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 800357c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003580:	6413      	str	r3, [r2, #64]	; 0x40
 8003582:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <HAL_RCC_OscConfig+0x2ac>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358e:	2301      	movs	r3, #1
 8003590:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003592:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <HAL_RCC_OscConfig+0x2b8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d121      	bne.n	80035e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800359e:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <HAL_RCC_OscConfig+0x2b8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a07      	ldr	r2, [pc, #28]	; (80035c0 <HAL_RCC_OscConfig+0x2b8>)
 80035a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035aa:	f7fe f9c7 	bl	800193c <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b0:	e011      	b.n	80035d6 <HAL_RCC_OscConfig+0x2ce>
 80035b2:	bf00      	nop
 80035b4:	40023800 	.word	0x40023800
 80035b8:	42470000 	.word	0x42470000
 80035bc:	42470e80 	.word	0x42470e80
 80035c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c4:	f7fe f9ba 	bl	800193c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e106      	b.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d6:	4b85      	ldr	r3, [pc, #532]	; (80037ec <HAL_RCC_OscConfig+0x4e4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d106      	bne.n	80035f8 <HAL_RCC_OscConfig+0x2f0>
 80035ea:	4b81      	ldr	r3, [pc, #516]	; (80037f0 <HAL_RCC_OscConfig+0x4e8>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	4a80      	ldr	r2, [pc, #512]	; (80037f0 <HAL_RCC_OscConfig+0x4e8>)
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	6713      	str	r3, [r2, #112]	; 0x70
 80035f6:	e01c      	b.n	8003632 <HAL_RCC_OscConfig+0x32a>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b05      	cmp	r3, #5
 80035fe:	d10c      	bne.n	800361a <HAL_RCC_OscConfig+0x312>
 8003600:	4b7b      	ldr	r3, [pc, #492]	; (80037f0 <HAL_RCC_OscConfig+0x4e8>)
 8003602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003604:	4a7a      	ldr	r2, [pc, #488]	; (80037f0 <HAL_RCC_OscConfig+0x4e8>)
 8003606:	f043 0304 	orr.w	r3, r3, #4
 800360a:	6713      	str	r3, [r2, #112]	; 0x70
 800360c:	4b78      	ldr	r3, [pc, #480]	; (80037f0 <HAL_RCC_OscConfig+0x4e8>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003610:	4a77      	ldr	r2, [pc, #476]	; (80037f0 <HAL_RCC_OscConfig+0x4e8>)
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	6713      	str	r3, [r2, #112]	; 0x70
 8003618:	e00b      	b.n	8003632 <HAL_RCC_OscConfig+0x32a>
 800361a:	4b75      	ldr	r3, [pc, #468]	; (80037f0 <HAL_RCC_OscConfig+0x4e8>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361e:	4a74      	ldr	r2, [pc, #464]	; (80037f0 <HAL_RCC_OscConfig+0x4e8>)
 8003620:	f023 0301 	bic.w	r3, r3, #1
 8003624:	6713      	str	r3, [r2, #112]	; 0x70
 8003626:	4b72      	ldr	r3, [pc, #456]	; (80037f0 <HAL_RCC_OscConfig+0x4e8>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	4a71      	ldr	r2, [pc, #452]	; (80037f0 <HAL_RCC_OscConfig+0x4e8>)
 800362c:	f023 0304 	bic.w	r3, r3, #4
 8003630:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d015      	beq.n	8003666 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363a:	f7fe f97f 	bl	800193c <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003640:	e00a      	b.n	8003658 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003642:	f7fe f97b 	bl	800193c <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003650:	4293      	cmp	r3, r2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e0c5      	b.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003658:	4b65      	ldr	r3, [pc, #404]	; (80037f0 <HAL_RCC_OscConfig+0x4e8>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0ee      	beq.n	8003642 <HAL_RCC_OscConfig+0x33a>
 8003664:	e014      	b.n	8003690 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003666:	f7fe f969 	bl	800193c <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366c:	e00a      	b.n	8003684 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800366e:	f7fe f965 	bl	800193c <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	f241 3288 	movw	r2, #5000	; 0x1388
 800367c:	4293      	cmp	r3, r2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e0af      	b.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003684:	4b5a      	ldr	r3, [pc, #360]	; (80037f0 <HAL_RCC_OscConfig+0x4e8>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1ee      	bne.n	800366e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003690:	7dfb      	ldrb	r3, [r7, #23]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d105      	bne.n	80036a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003696:	4b56      	ldr	r3, [pc, #344]	; (80037f0 <HAL_RCC_OscConfig+0x4e8>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	4a55      	ldr	r2, [pc, #340]	; (80037f0 <HAL_RCC_OscConfig+0x4e8>)
 800369c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 809b 	beq.w	80037e2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ac:	4b50      	ldr	r3, [pc, #320]	; (80037f0 <HAL_RCC_OscConfig+0x4e8>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 030c 	and.w	r3, r3, #12
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d05c      	beq.n	8003772 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d141      	bne.n	8003744 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c0:	4b4c      	ldr	r3, [pc, #304]	; (80037f4 <HAL_RCC_OscConfig+0x4ec>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c6:	f7fe f939 	bl	800193c <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ce:	f7fe f935 	bl	800193c <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e081      	b.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e0:	4b43      	ldr	r3, [pc, #268]	; (80037f0 <HAL_RCC_OscConfig+0x4e8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1f0      	bne.n	80036ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69da      	ldr	r2, [r3, #28]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	431a      	orrs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	019b      	lsls	r3, r3, #6
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003702:	085b      	lsrs	r3, r3, #1
 8003704:	3b01      	subs	r3, #1
 8003706:	041b      	lsls	r3, r3, #16
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	061b      	lsls	r3, r3, #24
 8003710:	4937      	ldr	r1, [pc, #220]	; (80037f0 <HAL_RCC_OscConfig+0x4e8>)
 8003712:	4313      	orrs	r3, r2
 8003714:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003716:	4b37      	ldr	r3, [pc, #220]	; (80037f4 <HAL_RCC_OscConfig+0x4ec>)
 8003718:	2201      	movs	r2, #1
 800371a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7fe f90e 	bl	800193c <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003724:	f7fe f90a 	bl	800193c <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e056      	b.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003736:	4b2e      	ldr	r3, [pc, #184]	; (80037f0 <HAL_RCC_OscConfig+0x4e8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0x41c>
 8003742:	e04e      	b.n	80037e2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003744:	4b2b      	ldr	r3, [pc, #172]	; (80037f4 <HAL_RCC_OscConfig+0x4ec>)
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374a:	f7fe f8f7 	bl	800193c <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003752:	f7fe f8f3 	bl	800193c <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e03f      	b.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003764:	4b22      	ldr	r3, [pc, #136]	; (80037f0 <HAL_RCC_OscConfig+0x4e8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1f0      	bne.n	8003752 <HAL_RCC_OscConfig+0x44a>
 8003770:	e037      	b.n	80037e2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e032      	b.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800377e:	4b1c      	ldr	r3, [pc, #112]	; (80037f0 <HAL_RCC_OscConfig+0x4e8>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d028      	beq.n	80037de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003796:	429a      	cmp	r2, r3
 8003798:	d121      	bne.n	80037de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d11a      	bne.n	80037de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037ae:	4013      	ands	r3, r2
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037b4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d111      	bne.n	80037de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c4:	085b      	lsrs	r3, r3, #1
 80037c6:	3b01      	subs	r3, #1
 80037c8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d107      	bne.n	80037de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037da:	429a      	cmp	r2, r3
 80037dc:	d001      	beq.n	80037e2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40007000 	.word	0x40007000
 80037f0:	40023800 	.word	0x40023800
 80037f4:	42470060 	.word	0x42470060

080037f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0cc      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800380c:	4b68      	ldr	r3, [pc, #416]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d90c      	bls.n	8003834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b65      	ldr	r3, [pc, #404]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b63      	ldr	r3, [pc, #396]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0b8      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d020      	beq.n	8003882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800384c:	4b59      	ldr	r3, [pc, #356]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4a58      	ldr	r2, [pc, #352]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003856:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003864:	4b53      	ldr	r3, [pc, #332]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4a52      	ldr	r2, [pc, #328]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800386e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003870:	4b50      	ldr	r3, [pc, #320]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	494d      	ldr	r1, [pc, #308]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d044      	beq.n	8003918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d107      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	4b47      	ldr	r3, [pc, #284]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d119      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e07f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d003      	beq.n	80038b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d107      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b6:	4b3f      	ldr	r3, [pc, #252]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e06f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c6:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e067      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038d6:	4b37      	ldr	r3, [pc, #220]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f023 0203 	bic.w	r2, r3, #3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	4934      	ldr	r1, [pc, #208]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e8:	f7fe f828 	bl	800193c <HAL_GetTick>
 80038ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ee:	e00a      	b.n	8003906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f0:	f7fe f824 	bl	800193c <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e04f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003906:	4b2b      	ldr	r3, [pc, #172]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 020c 	and.w	r2, r3, #12
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	429a      	cmp	r2, r3
 8003916:	d1eb      	bne.n	80038f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003918:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d20c      	bcs.n	8003940 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800392e:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d001      	beq.n	8003940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e032      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4916      	ldr	r1, [pc, #88]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800396a:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	490e      	ldr	r1, [pc, #56]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800397e:	f000 f821 	bl	80039c4 <HAL_RCC_GetSysClockFreq>
 8003982:	4602      	mov	r2, r0
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	490a      	ldr	r1, [pc, #40]	; (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	5ccb      	ldrb	r3, [r1, r3]
 8003992:	fa22 f303 	lsr.w	r3, r2, r3
 8003996:	4a09      	ldr	r2, [pc, #36]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd fd08 	bl	80013b4 <HAL_InitTick>

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40023c00 	.word	0x40023c00
 80039b4:	40023800 	.word	0x40023800
 80039b8:	0801afa8 	.word	0x0801afa8
 80039bc:	20000004 	.word	0x20000004
 80039c0:	20000008 	.word	0x20000008

080039c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c4:	b5b0      	push	{r4, r5, r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039ca:	2100      	movs	r1, #0
 80039cc:	6079      	str	r1, [r7, #4]
 80039ce:	2100      	movs	r1, #0
 80039d0:	60f9      	str	r1, [r7, #12]
 80039d2:	2100      	movs	r1, #0
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80039d6:	2100      	movs	r1, #0
 80039d8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039da:	4952      	ldr	r1, [pc, #328]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x160>)
 80039dc:	6889      	ldr	r1, [r1, #8]
 80039de:	f001 010c 	and.w	r1, r1, #12
 80039e2:	2908      	cmp	r1, #8
 80039e4:	d00d      	beq.n	8003a02 <HAL_RCC_GetSysClockFreq+0x3e>
 80039e6:	2908      	cmp	r1, #8
 80039e8:	f200 8094 	bhi.w	8003b14 <HAL_RCC_GetSysClockFreq+0x150>
 80039ec:	2900      	cmp	r1, #0
 80039ee:	d002      	beq.n	80039f6 <HAL_RCC_GetSysClockFreq+0x32>
 80039f0:	2904      	cmp	r1, #4
 80039f2:	d003      	beq.n	80039fc <HAL_RCC_GetSysClockFreq+0x38>
 80039f4:	e08e      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039f6:	4b4c      	ldr	r3, [pc, #304]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x164>)
 80039f8:	60bb      	str	r3, [r7, #8]
       break;
 80039fa:	e08e      	b.n	8003b1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039fc:	4b4b      	ldr	r3, [pc, #300]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x168>)
 80039fe:	60bb      	str	r3, [r7, #8]
      break;
 8003a00:	e08b      	b.n	8003b1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a02:	4948      	ldr	r1, [pc, #288]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a04:	6849      	ldr	r1, [r1, #4]
 8003a06:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003a0a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a0c:	4945      	ldr	r1, [pc, #276]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a0e:	6849      	ldr	r1, [r1, #4]
 8003a10:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003a14:	2900      	cmp	r1, #0
 8003a16:	d024      	beq.n	8003a62 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a18:	4942      	ldr	r1, [pc, #264]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a1a:	6849      	ldr	r1, [r1, #4]
 8003a1c:	0989      	lsrs	r1, r1, #6
 8003a1e:	4608      	mov	r0, r1
 8003a20:	f04f 0100 	mov.w	r1, #0
 8003a24:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003a28:	f04f 0500 	mov.w	r5, #0
 8003a2c:	ea00 0204 	and.w	r2, r0, r4
 8003a30:	ea01 0305 	and.w	r3, r1, r5
 8003a34:	493d      	ldr	r1, [pc, #244]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x168>)
 8003a36:	fb01 f003 	mul.w	r0, r1, r3
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	fb01 f102 	mul.w	r1, r1, r2
 8003a40:	1844      	adds	r4, r0, r1
 8003a42:	493a      	ldr	r1, [pc, #232]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x168>)
 8003a44:	fba2 0101 	umull	r0, r1, r2, r1
 8003a48:	1863      	adds	r3, r4, r1
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	f7fc fc0c 	bl	8000270 <__aeabi_uldivmod>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	e04a      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a62:	4b30      	ldr	r3, [pc, #192]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	099b      	lsrs	r3, r3, #6
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a72:	f04f 0100 	mov.w	r1, #0
 8003a76:	ea02 0400 	and.w	r4, r2, r0
 8003a7a:	ea03 0501 	and.w	r5, r3, r1
 8003a7e:	4620      	mov	r0, r4
 8003a80:	4629      	mov	r1, r5
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	f04f 0300 	mov.w	r3, #0
 8003a8a:	014b      	lsls	r3, r1, #5
 8003a8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a90:	0142      	lsls	r2, r0, #5
 8003a92:	4610      	mov	r0, r2
 8003a94:	4619      	mov	r1, r3
 8003a96:	1b00      	subs	r0, r0, r4
 8003a98:	eb61 0105 	sbc.w	r1, r1, r5
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	018b      	lsls	r3, r1, #6
 8003aa6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003aaa:	0182      	lsls	r2, r0, #6
 8003aac:	1a12      	subs	r2, r2, r0
 8003aae:	eb63 0301 	sbc.w	r3, r3, r1
 8003ab2:	f04f 0000 	mov.w	r0, #0
 8003ab6:	f04f 0100 	mov.w	r1, #0
 8003aba:	00d9      	lsls	r1, r3, #3
 8003abc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ac0:	00d0      	lsls	r0, r2, #3
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	1912      	adds	r2, r2, r4
 8003ac8:	eb45 0303 	adc.w	r3, r5, r3
 8003acc:	f04f 0000 	mov.w	r0, #0
 8003ad0:	f04f 0100 	mov.w	r1, #0
 8003ad4:	0299      	lsls	r1, r3, #10
 8003ad6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003ada:	0290      	lsls	r0, r2, #10
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	f7fc fbc0 	bl	8000270 <__aeabi_uldivmod>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4613      	mov	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003af8:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x160>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	0c1b      	lsrs	r3, r3, #16
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	3301      	adds	r3, #1
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b10:	60bb      	str	r3, [r7, #8]
      break;
 8003b12:	e002      	b.n	8003b1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b14:	4b04      	ldr	r3, [pc, #16]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x164>)
 8003b16:	60bb      	str	r3, [r7, #8]
      break;
 8003b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b1a:	68bb      	ldr	r3, [r7, #8]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bdb0      	pop	{r4, r5, r7, pc}
 8003b24:	40023800 	.word	0x40023800
 8003b28:	00f42400 	.word	0x00f42400
 8003b2c:	017d7840 	.word	0x017d7840

08003b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b34:	4b03      	ldr	r3, [pc, #12]	; (8003b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b36:	681b      	ldr	r3, [r3, #0]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	20000004 	.word	0x20000004

08003b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b4c:	f7ff fff0 	bl	8003b30 <HAL_RCC_GetHCLKFreq>
 8003b50:	4602      	mov	r2, r0
 8003b52:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	0a9b      	lsrs	r3, r3, #10
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	4903      	ldr	r1, [pc, #12]	; (8003b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b5e:	5ccb      	ldrb	r3, [r1, r3]
 8003b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	0801afb8 	.word	0x0801afb8

08003b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b74:	f7ff ffdc 	bl	8003b30 <HAL_RCC_GetHCLKFreq>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	0b5b      	lsrs	r3, r3, #13
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	4903      	ldr	r1, [pc, #12]	; (8003b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b86:	5ccb      	ldrb	r3, [r1, r3]
 8003b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40023800 	.word	0x40023800
 8003b94:	0801afb8 	.word	0x0801afb8

08003b98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	220f      	movs	r2, #15
 8003ba6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ba8:	4b12      	ldr	r3, [pc, #72]	; (8003bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 0203 	and.w	r2, r3, #3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bb4:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003bcc:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	08db      	lsrs	r3, r3, #3
 8003bd2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bda:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <HAL_RCC_GetClockConfig+0x60>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0207 	and.w	r2, r3, #7
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	601a      	str	r2, [r3, #0]
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	40023c00 	.word	0x40023c00

08003bfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e041      	b.n	8003c92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f839 	bl	8003c9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3304      	adds	r3, #4
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	f000 f9d8 	bl	8003ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d001      	beq.n	8003cc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e04e      	b.n	8003d66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a23      	ldr	r2, [pc, #140]	; (8003d74 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d022      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf2:	d01d      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a1f      	ldr	r2, [pc, #124]	; (8003d78 <HAL_TIM_Base_Start_IT+0xc8>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d018      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1e      	ldr	r2, [pc, #120]	; (8003d7c <HAL_TIM_Base_Start_IT+0xcc>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d013      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a1c      	ldr	r2, [pc, #112]	; (8003d80 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00e      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a1b      	ldr	r2, [pc, #108]	; (8003d84 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d009      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a19      	ldr	r2, [pc, #100]	; (8003d88 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d004      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a18      	ldr	r2, [pc, #96]	; (8003d8c <HAL_TIM_Base_Start_IT+0xdc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d111      	bne.n	8003d54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b06      	cmp	r3, #6
 8003d40:	d010      	beq.n	8003d64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0201 	orr.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d52:	e007      	b.n	8003d64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0201 	orr.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40010000 	.word	0x40010000
 8003d78:	40000400 	.word	0x40000400
 8003d7c:	40000800 	.word	0x40000800
 8003d80:	40000c00 	.word	0x40000c00
 8003d84:	40010400 	.word	0x40010400
 8003d88:	40014000 	.word	0x40014000
 8003d8c:	40001800 	.word	0x40001800

08003d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d122      	bne.n	8003dec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d11b      	bne.n	8003dec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0202 	mvn.w	r2, #2
 8003dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f8ee 	bl	8003fb4 <HAL_TIM_IC_CaptureCallback>
 8003dd8:	e005      	b.n	8003de6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f8e0 	bl	8003fa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f8f1 	bl	8003fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d122      	bne.n	8003e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d11b      	bne.n	8003e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0204 	mvn.w	r2, #4
 8003e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2202      	movs	r2, #2
 8003e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f8c4 	bl	8003fb4 <HAL_TIM_IC_CaptureCallback>
 8003e2c:	e005      	b.n	8003e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f8b6 	bl	8003fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f8c7 	bl	8003fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d122      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d11b      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0208 	mvn.w	r2, #8
 8003e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2204      	movs	r2, #4
 8003e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f89a 	bl	8003fb4 <HAL_TIM_IC_CaptureCallback>
 8003e80:	e005      	b.n	8003e8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f88c 	bl	8003fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f89d 	bl	8003fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	2b10      	cmp	r3, #16
 8003ea0:	d122      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b10      	cmp	r3, #16
 8003eae:	d11b      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0210 	mvn.w	r2, #16
 8003eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2208      	movs	r2, #8
 8003ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f870 	bl	8003fb4 <HAL_TIM_IC_CaptureCallback>
 8003ed4:	e005      	b.n	8003ee2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f862 	bl	8003fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f873 	bl	8003fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d10e      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d107      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0201 	mvn.w	r2, #1
 8003f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fc fd9a 	bl	8000a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	2b80      	cmp	r3, #128	; 0x80
 8003f20:	d10e      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	2b80      	cmp	r3, #128	; 0x80
 8003f2e:	d107      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f902 	bl	8004144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4a:	2b40      	cmp	r3, #64	; 0x40
 8003f4c:	d10e      	bne.n	8003f6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f58:	2b40      	cmp	r3, #64	; 0x40
 8003f5a:	d107      	bne.n	8003f6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f838 	bl	8003fdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	d10e      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 0320 	and.w	r3, r3, #32
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d107      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f06f 0220 	mvn.w	r2, #32
 8003f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f8cc 	bl	8004130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f98:	bf00      	nop
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a40      	ldr	r2, [pc, #256]	; (8004104 <TIM_Base_SetConfig+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d013      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400e:	d00f      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a3d      	ldr	r2, [pc, #244]	; (8004108 <TIM_Base_SetConfig+0x118>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00b      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a3c      	ldr	r2, [pc, #240]	; (800410c <TIM_Base_SetConfig+0x11c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d007      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a3b      	ldr	r2, [pc, #236]	; (8004110 <TIM_Base_SetConfig+0x120>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d003      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a3a      	ldr	r2, [pc, #232]	; (8004114 <TIM_Base_SetConfig+0x124>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d108      	bne.n	8004042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a2f      	ldr	r2, [pc, #188]	; (8004104 <TIM_Base_SetConfig+0x114>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d02b      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004050:	d027      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a2c      	ldr	r2, [pc, #176]	; (8004108 <TIM_Base_SetConfig+0x118>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d023      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a2b      	ldr	r2, [pc, #172]	; (800410c <TIM_Base_SetConfig+0x11c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01f      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a2a      	ldr	r2, [pc, #168]	; (8004110 <TIM_Base_SetConfig+0x120>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d01b      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a29      	ldr	r2, [pc, #164]	; (8004114 <TIM_Base_SetConfig+0x124>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d017      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a28      	ldr	r2, [pc, #160]	; (8004118 <TIM_Base_SetConfig+0x128>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d013      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a27      	ldr	r2, [pc, #156]	; (800411c <TIM_Base_SetConfig+0x12c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00f      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a26      	ldr	r2, [pc, #152]	; (8004120 <TIM_Base_SetConfig+0x130>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d00b      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a25      	ldr	r2, [pc, #148]	; (8004124 <TIM_Base_SetConfig+0x134>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d007      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a24      	ldr	r2, [pc, #144]	; (8004128 <TIM_Base_SetConfig+0x138>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d003      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a23      	ldr	r2, [pc, #140]	; (800412c <TIM_Base_SetConfig+0x13c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d108      	bne.n	80040b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a0a      	ldr	r2, [pc, #40]	; (8004104 <TIM_Base_SetConfig+0x114>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d003      	beq.n	80040e8 <TIM_Base_SetConfig+0xf8>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a0c      	ldr	r2, [pc, #48]	; (8004114 <TIM_Base_SetConfig+0x124>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d103      	bne.n	80040f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	615a      	str	r2, [r3, #20]
}
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40010000 	.word	0x40010000
 8004108:	40000400 	.word	0x40000400
 800410c:	40000800 	.word	0x40000800
 8004110:	40000c00 	.word	0x40000c00
 8004114:	40010400 	.word	0x40010400
 8004118:	40014000 	.word	0x40014000
 800411c:	40014400 	.word	0x40014400
 8004120:	40014800 	.word	0x40014800
 8004124:	40001800 	.word	0x40001800
 8004128:	40001c00 	.word	0x40001c00
 800412c:	40002000 	.word	0x40002000

08004130 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e03f      	b.n	80041ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d106      	bne.n	8004184 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7fd f878 	bl	8001274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2224      	movs	r2, #36	; 0x24
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800419a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fddb 	bl	8004d58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695a      	ldr	r2, [r3, #20]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68da      	ldr	r2, [r3, #12]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b08a      	sub	sp, #40	; 0x28
 80041f6:	af02      	add	r7, sp, #8
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	603b      	str	r3, [r7, #0]
 80041fe:	4613      	mov	r3, r2
 8004200:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b20      	cmp	r3, #32
 8004210:	d17c      	bne.n	800430c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <HAL_UART_Transmit+0x2c>
 8004218:	88fb      	ldrh	r3, [r7, #6]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e075      	b.n	800430e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_UART_Transmit+0x3e>
 800422c:	2302      	movs	r3, #2
 800422e:	e06e      	b.n	800430e <HAL_UART_Transmit+0x11c>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2221      	movs	r2, #33	; 0x21
 8004242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004246:	f7fd fb79 	bl	800193c <HAL_GetTick>
 800424a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	88fa      	ldrh	r2, [r7, #6]
 8004250:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	88fa      	ldrh	r2, [r7, #6]
 8004256:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004260:	d108      	bne.n	8004274 <HAL_UART_Transmit+0x82>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d104      	bne.n	8004274 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	e003      	b.n	800427c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004278:	2300      	movs	r3, #0
 800427a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004284:	e02a      	b.n	80042dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2200      	movs	r2, #0
 800428e:	2180      	movs	r1, #128	; 0x80
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 fb1f 	bl	80048d4 <UART_WaitOnFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e036      	b.n	800430e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10b      	bne.n	80042be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	3302      	adds	r3, #2
 80042ba:	61bb      	str	r3, [r7, #24]
 80042bc:	e007      	b.n	80042ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	781a      	ldrb	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	3301      	adds	r3, #1
 80042cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1cf      	bne.n	8004286 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2200      	movs	r2, #0
 80042ee:	2140      	movs	r1, #64	; 0x40
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 faef 	bl	80048d4 <UART_WaitOnFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e006      	b.n	800430e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	e000      	b.n	800430e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800430c:	2302      	movs	r3, #2
  }
}
 800430e:	4618      	mov	r0, r3
 8004310:	3720      	adds	r7, #32
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b084      	sub	sp, #16
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	4613      	mov	r3, r2
 8004322:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b20      	cmp	r3, #32
 800432e:	d11d      	bne.n	800436c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_UART_Receive_IT+0x26>
 8004336:	88fb      	ldrh	r3, [r7, #6]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e016      	b.n	800436e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004346:	2b01      	cmp	r3, #1
 8004348:	d101      	bne.n	800434e <HAL_UART_Receive_IT+0x38>
 800434a:	2302      	movs	r3, #2
 800434c:	e00f      	b.n	800436e <HAL_UART_Receive_IT+0x58>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800435c:	88fb      	ldrh	r3, [r7, #6]
 800435e:	461a      	mov	r2, r3
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 fb24 	bl	80049b0 <UART_Start_Receive_IT>
 8004368:	4603      	mov	r3, r0
 800436a:	e000      	b.n	800436e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800436c:	2302      	movs	r3, #2
  }
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b0ba      	sub	sp, #232	; 0xe8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800439e:	2300      	movs	r3, #0
 80043a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80043b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10f      	bne.n	80043de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d009      	beq.n	80043de <HAL_UART_IRQHandler+0x66>
 80043ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fc03 	bl	8004be2 <UART_Receive_IT>
      return;
 80043dc:	e256      	b.n	800488c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 80de 	beq.w	80045a4 <HAL_UART_IRQHandler+0x22c>
 80043e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d106      	bne.n	8004402 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 80d1 	beq.w	80045a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00b      	beq.n	8004426 <HAL_UART_IRQHandler+0xae>
 800440e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004416:	2b00      	cmp	r3, #0
 8004418:	d005      	beq.n	8004426 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	f043 0201 	orr.w	r2, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00b      	beq.n	800444a <HAL_UART_IRQHandler+0xd2>
 8004432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d005      	beq.n	800444a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	f043 0202 	orr.w	r2, r3, #2
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800444a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <HAL_UART_IRQHandler+0xf6>
 8004456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	f043 0204 	orr.w	r2, r3, #4
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800446e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d011      	beq.n	800449e <HAL_UART_IRQHandler+0x126>
 800447a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800447e:	f003 0320 	and.w	r3, r3, #32
 8004482:	2b00      	cmp	r3, #0
 8004484:	d105      	bne.n	8004492 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f043 0208 	orr.w	r2, r3, #8
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 81ed 	beq.w	8004882 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ac:	f003 0320 	and.w	r3, r3, #32
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_UART_IRQHandler+0x14e>
 80044b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044b8:	f003 0320 	and.w	r3, r3, #32
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fb8e 	bl	8004be2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d0:	2b40      	cmp	r3, #64	; 0x40
 80044d2:	bf0c      	ite	eq
 80044d4:	2301      	moveq	r3, #1
 80044d6:	2300      	movne	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d103      	bne.n	80044f2 <HAL_UART_IRQHandler+0x17a>
 80044ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d04f      	beq.n	8004592 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fa96 	bl	8004a24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004502:	2b40      	cmp	r3, #64	; 0x40
 8004504:	d141      	bne.n	800458a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3314      	adds	r3, #20
 800450c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800451c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004524:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3314      	adds	r3, #20
 800452e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004532:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004536:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800453e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800454a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1d9      	bne.n	8004506 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	2b00      	cmp	r3, #0
 8004558:	d013      	beq.n	8004582 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455e:	4a7d      	ldr	r2, [pc, #500]	; (8004754 <HAL_UART_IRQHandler+0x3dc>)
 8004560:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004566:	4618      	mov	r0, r3
 8004568:	f7fd fb6a 	bl	8001c40 <HAL_DMA_Abort_IT>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d016      	beq.n	80045a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800457c:	4610      	mov	r0, r2
 800457e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004580:	e00e      	b.n	80045a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f990 	bl	80048a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004588:	e00a      	b.n	80045a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f98c 	bl	80048a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004590:	e006      	b.n	80045a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f988 	bl	80048a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800459e:	e170      	b.n	8004882 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a0:	bf00      	nop
    return;
 80045a2:	e16e      	b.n	8004882 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	f040 814a 	bne.w	8004842 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b2:	f003 0310 	and.w	r3, r3, #16
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 8143 	beq.w	8004842 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c0:	f003 0310 	and.w	r3, r3, #16
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 813c 	beq.w	8004842 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045ca:	2300      	movs	r3, #0
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	60bb      	str	r3, [r7, #8]
 80045de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ea:	2b40      	cmp	r3, #64	; 0x40
 80045ec:	f040 80b4 	bne.w	8004758 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 8140 	beq.w	8004886 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800460a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800460e:	429a      	cmp	r2, r3
 8004610:	f080 8139 	bcs.w	8004886 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800461a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004626:	f000 8088 	beq.w	800473a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	330c      	adds	r3, #12
 8004630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004634:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004638:	e853 3f00 	ldrex	r3, [r3]
 800463c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004640:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004648:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	330c      	adds	r3, #12
 8004652:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004656:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800465a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004662:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800466e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1d9      	bne.n	800462a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3314      	adds	r3, #20
 800467c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004688:	f023 0301 	bic.w	r3, r3, #1
 800468c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3314      	adds	r3, #20
 8004696:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800469a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800469e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80046ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e1      	bne.n	8004676 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3314      	adds	r3, #20
 80046b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80046c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3314      	adds	r3, #20
 80046d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e3      	bne.n	80046b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	330c      	adds	r3, #12
 80046fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800470a:	f023 0310 	bic.w	r3, r3, #16
 800470e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	330c      	adds	r3, #12
 8004718:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800471c:	65ba      	str	r2, [r7, #88]	; 0x58
 800471e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004720:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004722:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004724:	e841 2300 	strex	r3, r2, [r1]
 8004728:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800472a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e3      	bne.n	80046f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	4618      	mov	r0, r3
 8004736:	f7fd fa13 	bl	8001b60 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004742:	b29b      	uxth	r3, r3
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	b29b      	uxth	r3, r3
 8004748:	4619      	mov	r1, r3
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f8b6 	bl	80048bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004750:	e099      	b.n	8004886 <HAL_UART_IRQHandler+0x50e>
 8004752:	bf00      	nop
 8004754:	08004aeb 	.word	0x08004aeb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004760:	b29b      	uxth	r3, r3
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 808b 	beq.w	800488a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004774:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 8086 	beq.w	800488a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	330c      	adds	r3, #12
 8004784:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004788:	e853 3f00 	ldrex	r3, [r3]
 800478c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800478e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004790:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004794:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	330c      	adds	r3, #12
 800479e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80047a2:	647a      	str	r2, [r7, #68]	; 0x44
 80047a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047aa:	e841 2300 	strex	r3, r2, [r1]
 80047ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1e3      	bne.n	800477e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3314      	adds	r3, #20
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	e853 3f00 	ldrex	r3, [r3]
 80047c4:	623b      	str	r3, [r7, #32]
   return(result);
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	f023 0301 	bic.w	r3, r3, #1
 80047cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3314      	adds	r3, #20
 80047d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047da:	633a      	str	r2, [r7, #48]	; 0x30
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e2:	e841 2300 	strex	r3, r2, [r1]
 80047e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1e3      	bne.n	80047b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	330c      	adds	r3, #12
 8004802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	e853 3f00 	ldrex	r3, [r3]
 800480a:	60fb      	str	r3, [r7, #12]
   return(result);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 0310 	bic.w	r3, r3, #16
 8004812:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	330c      	adds	r3, #12
 800481c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004820:	61fa      	str	r2, [r7, #28]
 8004822:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	69b9      	ldr	r1, [r7, #24]
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	e841 2300 	strex	r3, r2, [r1]
 800482c:	617b      	str	r3, [r7, #20]
   return(result);
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e3      	bne.n	80047fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004834:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f83e 	bl	80048bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004840:	e023      	b.n	800488a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484a:	2b00      	cmp	r3, #0
 800484c:	d009      	beq.n	8004862 <HAL_UART_IRQHandler+0x4ea>
 800484e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f959 	bl	8004b12 <UART_Transmit_IT>
    return;
 8004860:	e014      	b.n	800488c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00e      	beq.n	800488c <HAL_UART_IRQHandler+0x514>
 800486e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	d008      	beq.n	800488c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f999 	bl	8004bb2 <UART_EndTransmit_IT>
    return;
 8004880:	e004      	b.n	800488c <HAL_UART_IRQHandler+0x514>
    return;
 8004882:	bf00      	nop
 8004884:	e002      	b.n	800488c <HAL_UART_IRQHandler+0x514>
      return;
 8004886:	bf00      	nop
 8004888:	e000      	b.n	800488c <HAL_UART_IRQHandler+0x514>
      return;
 800488a:	bf00      	nop
  }
}
 800488c:	37e8      	adds	r7, #232	; 0xe8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop

08004894 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b090      	sub	sp, #64	; 0x40
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	4613      	mov	r3, r2
 80048e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e4:	e050      	b.n	8004988 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d04c      	beq.n	8004988 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d007      	beq.n	8004904 <UART_WaitOnFlagUntilTimeout+0x30>
 80048f4:	f7fd f822 	bl	800193c <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004900:	429a      	cmp	r2, r3
 8004902:	d241      	bcs.n	8004988 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	330c      	adds	r3, #12
 800490a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490e:	e853 3f00 	ldrex	r3, [r3]
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800491a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	330c      	adds	r3, #12
 8004922:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004924:	637a      	str	r2, [r7, #52]	; 0x34
 8004926:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004928:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800492a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800492c:	e841 2300 	strex	r3, r2, [r1]
 8004930:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1e5      	bne.n	8004904 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3314      	adds	r3, #20
 800493e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	e853 3f00 	ldrex	r3, [r3]
 8004946:	613b      	str	r3, [r7, #16]
   return(result);
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f023 0301 	bic.w	r3, r3, #1
 800494e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3314      	adds	r3, #20
 8004956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004958:	623a      	str	r2, [r7, #32]
 800495a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495c:	69f9      	ldr	r1, [r7, #28]
 800495e:	6a3a      	ldr	r2, [r7, #32]
 8004960:	e841 2300 	strex	r3, r2, [r1]
 8004964:	61bb      	str	r3, [r7, #24]
   return(result);
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1e5      	bne.n	8004938 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e00f      	b.n	80049a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	4013      	ands	r3, r2
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	429a      	cmp	r2, r3
 8004996:	bf0c      	ite	eq
 8004998:	2301      	moveq	r3, #1
 800499a:	2300      	movne	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	461a      	mov	r2, r3
 80049a0:	79fb      	ldrb	r3, [r7, #7]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d09f      	beq.n	80048e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3740      	adds	r7, #64	; 0x40
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	4613      	mov	r3, r2
 80049bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	88fa      	ldrh	r2, [r7, #6]
 80049c8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	88fa      	ldrh	r2, [r7, #6]
 80049ce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2222      	movs	r2, #34	; 0x22
 80049da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049f4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	695a      	ldr	r2, [r3, #20]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0201 	orr.w	r2, r2, #1
 8004a04:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0220 	orr.w	r2, r2, #32
 8004a14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b095      	sub	sp, #84	; 0x54
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	330c      	adds	r3, #12
 8004a32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a36:	e853 3f00 	ldrex	r3, [r3]
 8004a3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	330c      	adds	r3, #12
 8004a4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a4c:	643a      	str	r2, [r7, #64]	; 0x40
 8004a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a54:	e841 2300 	strex	r3, r2, [r1]
 8004a58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1e5      	bne.n	8004a2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3314      	adds	r3, #20
 8004a66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	e853 3f00 	ldrex	r3, [r3]
 8004a6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f023 0301 	bic.w	r3, r3, #1
 8004a76:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3314      	adds	r3, #20
 8004a7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a88:	e841 2300 	strex	r3, r2, [r1]
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e5      	bne.n	8004a60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d119      	bne.n	8004ad0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	330c      	adds	r3, #12
 8004aa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	e853 3f00 	ldrex	r3, [r3]
 8004aaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	f023 0310 	bic.w	r3, r3, #16
 8004ab2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	330c      	adds	r3, #12
 8004aba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004abc:	61ba      	str	r2, [r7, #24]
 8004abe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac0:	6979      	ldr	r1, [r7, #20]
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	e841 2300 	strex	r3, r2, [r1]
 8004ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e5      	bne.n	8004a9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ade:	bf00      	nop
 8004ae0:	3754      	adds	r7, #84	; 0x54
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f7ff fecf 	bl	80048a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b0a:	bf00      	nop
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b21      	cmp	r3, #33	; 0x21
 8004b24:	d13e      	bne.n	8004ba4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2e:	d114      	bne.n	8004b5a <UART_Transmit_IT+0x48>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d110      	bne.n	8004b5a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	1c9a      	adds	r2, r3, #2
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	621a      	str	r2, [r3, #32]
 8004b58:	e008      	b.n	8004b6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	1c59      	adds	r1, r3, #1
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6211      	str	r1, [r2, #32]
 8004b64:	781a      	ldrb	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	4619      	mov	r1, r3
 8004b7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10f      	bne.n	8004ba0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68da      	ldr	r2, [r3, #12]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	e000      	b.n	8004ba6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ba4:	2302      	movs	r3, #2
  }
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b082      	sub	sp, #8
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7ff fe5e 	bl	8004894 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b08c      	sub	sp, #48	; 0x30
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b22      	cmp	r3, #34	; 0x22
 8004bf4:	f040 80ab 	bne.w	8004d4e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c00:	d117      	bne.n	8004c32 <UART_Receive_IT+0x50>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d113      	bne.n	8004c32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2a:	1c9a      	adds	r2, r3, #2
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	629a      	str	r2, [r3, #40]	; 0x28
 8004c30:	e026      	b.n	8004c80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c36:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c44:	d007      	beq.n	8004c56 <UART_Receive_IT+0x74>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10a      	bne.n	8004c64 <UART_Receive_IT+0x82>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c60:	701a      	strb	r2, [r3, #0]
 8004c62:	e008      	b.n	8004c76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d15a      	bne.n	8004d4a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0220 	bic.w	r2, r2, #32
 8004ca2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695a      	ldr	r2, [r3, #20]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0201 	bic.w	r2, r2, #1
 8004cc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d135      	bne.n	8004d40 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	330c      	adds	r3, #12
 8004ce0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	e853 3f00 	ldrex	r3, [r3]
 8004ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f023 0310 	bic.w	r3, r3, #16
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	330c      	adds	r3, #12
 8004cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfa:	623a      	str	r2, [r7, #32]
 8004cfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfe:	69f9      	ldr	r1, [r7, #28]
 8004d00:	6a3a      	ldr	r2, [r7, #32]
 8004d02:	e841 2300 	strex	r3, r2, [r1]
 8004d06:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1e5      	bne.n	8004cda <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0310 	and.w	r3, r3, #16
 8004d18:	2b10      	cmp	r3, #16
 8004d1a:	d10a      	bne.n	8004d32 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d36:	4619      	mov	r1, r3
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7ff fdbf 	bl	80048bc <HAL_UARTEx_RxEventCallback>
 8004d3e:	e002      	b.n	8004d46 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7fc fcab 	bl	800169c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d46:	2300      	movs	r3, #0
 8004d48:	e002      	b.n	8004d50 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e000      	b.n	8004d50 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004d4e:	2302      	movs	r3, #2
  }
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3730      	adds	r7, #48	; 0x30
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d5c:	b09f      	sub	sp, #124	; 0x7c
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6e:	68d9      	ldr	r1, [r3, #12]
 8004d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	ea40 0301 	orr.w	r3, r0, r1
 8004d78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	431a      	orrs	r2, r3
 8004d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d9c:	f021 010c 	bic.w	r1, r1, #12
 8004da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004da6:	430b      	orrs	r3, r1
 8004da8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db6:	6999      	ldr	r1, [r3, #24]
 8004db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	ea40 0301 	orr.w	r3, r0, r1
 8004dc0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	4bc5      	ldr	r3, [pc, #788]	; (80050dc <UART_SetConfig+0x384>)
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d004      	beq.n	8004dd6 <UART_SetConfig+0x7e>
 8004dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	4bc3      	ldr	r3, [pc, #780]	; (80050e0 <UART_SetConfig+0x388>)
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d103      	bne.n	8004dde <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dd6:	f7fe fecb 	bl	8003b70 <HAL_RCC_GetPCLK2Freq>
 8004dda:	6778      	str	r0, [r7, #116]	; 0x74
 8004ddc:	e002      	b.n	8004de4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dde:	f7fe feb3 	bl	8003b48 <HAL_RCC_GetPCLK1Freq>
 8004de2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dec:	f040 80b6 	bne.w	8004f5c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004df2:	461c      	mov	r4, r3
 8004df4:	f04f 0500 	mov.w	r5, #0
 8004df8:	4622      	mov	r2, r4
 8004dfa:	462b      	mov	r3, r5
 8004dfc:	1891      	adds	r1, r2, r2
 8004dfe:	6439      	str	r1, [r7, #64]	; 0x40
 8004e00:	415b      	adcs	r3, r3
 8004e02:	647b      	str	r3, [r7, #68]	; 0x44
 8004e04:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e08:	1912      	adds	r2, r2, r4
 8004e0a:	eb45 0303 	adc.w	r3, r5, r3
 8004e0e:	f04f 0000 	mov.w	r0, #0
 8004e12:	f04f 0100 	mov.w	r1, #0
 8004e16:	00d9      	lsls	r1, r3, #3
 8004e18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e1c:	00d0      	lsls	r0, r2, #3
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	1911      	adds	r1, r2, r4
 8004e24:	6639      	str	r1, [r7, #96]	; 0x60
 8004e26:	416b      	adcs	r3, r5
 8004e28:	667b      	str	r3, [r7, #100]	; 0x64
 8004e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	1891      	adds	r1, r2, r2
 8004e36:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e38:	415b      	adcs	r3, r3
 8004e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e40:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004e44:	f7fb fa14 	bl	8000270 <__aeabi_uldivmod>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4ba5      	ldr	r3, [pc, #660]	; (80050e4 <UART_SetConfig+0x38c>)
 8004e4e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	011e      	lsls	r6, r3, #4
 8004e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e58:	461c      	mov	r4, r3
 8004e5a:	f04f 0500 	mov.w	r5, #0
 8004e5e:	4622      	mov	r2, r4
 8004e60:	462b      	mov	r3, r5
 8004e62:	1891      	adds	r1, r2, r2
 8004e64:	6339      	str	r1, [r7, #48]	; 0x30
 8004e66:	415b      	adcs	r3, r3
 8004e68:	637b      	str	r3, [r7, #52]	; 0x34
 8004e6a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004e6e:	1912      	adds	r2, r2, r4
 8004e70:	eb45 0303 	adc.w	r3, r5, r3
 8004e74:	f04f 0000 	mov.w	r0, #0
 8004e78:	f04f 0100 	mov.w	r1, #0
 8004e7c:	00d9      	lsls	r1, r3, #3
 8004e7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e82:	00d0      	lsls	r0, r2, #3
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	1911      	adds	r1, r2, r4
 8004e8a:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e8c:	416b      	adcs	r3, r5
 8004e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	461a      	mov	r2, r3
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	1891      	adds	r1, r2, r2
 8004e9c:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e9e:	415b      	adcs	r3, r3
 8004ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ea2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ea6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004eaa:	f7fb f9e1 	bl	8000270 <__aeabi_uldivmod>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4b8c      	ldr	r3, [pc, #560]	; (80050e4 <UART_SetConfig+0x38c>)
 8004eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	2164      	movs	r1, #100	; 0x64
 8004ebc:	fb01 f303 	mul.w	r3, r1, r3
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	3332      	adds	r3, #50	; 0x32
 8004ec6:	4a87      	ldr	r2, [pc, #540]	; (80050e4 <UART_SetConfig+0x38c>)
 8004ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ecc:	095b      	lsrs	r3, r3, #5
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ed4:	441e      	add	r6, r3
 8004ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f04f 0100 	mov.w	r1, #0
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	1894      	adds	r4, r2, r2
 8004ee4:	623c      	str	r4, [r7, #32]
 8004ee6:	415b      	adcs	r3, r3
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004eee:	1812      	adds	r2, r2, r0
 8004ef0:	eb41 0303 	adc.w	r3, r1, r3
 8004ef4:	f04f 0400 	mov.w	r4, #0
 8004ef8:	f04f 0500 	mov.w	r5, #0
 8004efc:	00dd      	lsls	r5, r3, #3
 8004efe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f02:	00d4      	lsls	r4, r2, #3
 8004f04:	4622      	mov	r2, r4
 8004f06:	462b      	mov	r3, r5
 8004f08:	1814      	adds	r4, r2, r0
 8004f0a:	653c      	str	r4, [r7, #80]	; 0x50
 8004f0c:	414b      	adcs	r3, r1
 8004f0e:	657b      	str	r3, [r7, #84]	; 0x54
 8004f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	461a      	mov	r2, r3
 8004f16:	f04f 0300 	mov.w	r3, #0
 8004f1a:	1891      	adds	r1, r2, r2
 8004f1c:	61b9      	str	r1, [r7, #24]
 8004f1e:	415b      	adcs	r3, r3
 8004f20:	61fb      	str	r3, [r7, #28]
 8004f22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f26:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004f2a:	f7fb f9a1 	bl	8000270 <__aeabi_uldivmod>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	4b6c      	ldr	r3, [pc, #432]	; (80050e4 <UART_SetConfig+0x38c>)
 8004f34:	fba3 1302 	umull	r1, r3, r3, r2
 8004f38:	095b      	lsrs	r3, r3, #5
 8004f3a:	2164      	movs	r1, #100	; 0x64
 8004f3c:	fb01 f303 	mul.w	r3, r1, r3
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	3332      	adds	r3, #50	; 0x32
 8004f46:	4a67      	ldr	r2, [pc, #412]	; (80050e4 <UART_SetConfig+0x38c>)
 8004f48:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4c:	095b      	lsrs	r3, r3, #5
 8004f4e:	f003 0207 	and.w	r2, r3, #7
 8004f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4432      	add	r2, r6
 8004f58:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f5a:	e0b9      	b.n	80050d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f5e:	461c      	mov	r4, r3
 8004f60:	f04f 0500 	mov.w	r5, #0
 8004f64:	4622      	mov	r2, r4
 8004f66:	462b      	mov	r3, r5
 8004f68:	1891      	adds	r1, r2, r2
 8004f6a:	6139      	str	r1, [r7, #16]
 8004f6c:	415b      	adcs	r3, r3
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f74:	1912      	adds	r2, r2, r4
 8004f76:	eb45 0303 	adc.w	r3, r5, r3
 8004f7a:	f04f 0000 	mov.w	r0, #0
 8004f7e:	f04f 0100 	mov.w	r1, #0
 8004f82:	00d9      	lsls	r1, r3, #3
 8004f84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f88:	00d0      	lsls	r0, r2, #3
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	eb12 0804 	adds.w	r8, r2, r4
 8004f92:	eb43 0905 	adc.w	r9, r3, r5
 8004f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f04f 0100 	mov.w	r1, #0
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	f04f 0300 	mov.w	r3, #0
 8004fa8:	008b      	lsls	r3, r1, #2
 8004faa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fae:	0082      	lsls	r2, r0, #2
 8004fb0:	4640      	mov	r0, r8
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	f7fb f95c 	bl	8000270 <__aeabi_uldivmod>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4b49      	ldr	r3, [pc, #292]	; (80050e4 <UART_SetConfig+0x38c>)
 8004fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	011e      	lsls	r6, r3, #4
 8004fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f04f 0100 	mov.w	r1, #0
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	1894      	adds	r4, r2, r2
 8004fd4:	60bc      	str	r4, [r7, #8]
 8004fd6:	415b      	adcs	r3, r3
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fde:	1812      	adds	r2, r2, r0
 8004fe0:	eb41 0303 	adc.w	r3, r1, r3
 8004fe4:	f04f 0400 	mov.w	r4, #0
 8004fe8:	f04f 0500 	mov.w	r5, #0
 8004fec:	00dd      	lsls	r5, r3, #3
 8004fee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ff2:	00d4      	lsls	r4, r2, #3
 8004ff4:	4622      	mov	r2, r4
 8004ff6:	462b      	mov	r3, r5
 8004ff8:	1814      	adds	r4, r2, r0
 8004ffa:	64bc      	str	r4, [r7, #72]	; 0x48
 8004ffc:	414b      	adcs	r3, r1
 8004ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	4618      	mov	r0, r3
 8005006:	f04f 0100 	mov.w	r1, #0
 800500a:	f04f 0200 	mov.w	r2, #0
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	008b      	lsls	r3, r1, #2
 8005014:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005018:	0082      	lsls	r2, r0, #2
 800501a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800501e:	f7fb f927 	bl	8000270 <__aeabi_uldivmod>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4b2f      	ldr	r3, [pc, #188]	; (80050e4 <UART_SetConfig+0x38c>)
 8005028:	fba3 1302 	umull	r1, r3, r3, r2
 800502c:	095b      	lsrs	r3, r3, #5
 800502e:	2164      	movs	r1, #100	; 0x64
 8005030:	fb01 f303 	mul.w	r3, r1, r3
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	3332      	adds	r3, #50	; 0x32
 800503a:	4a2a      	ldr	r2, [pc, #168]	; (80050e4 <UART_SetConfig+0x38c>)
 800503c:	fba2 2303 	umull	r2, r3, r2, r3
 8005040:	095b      	lsrs	r3, r3, #5
 8005042:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005046:	441e      	add	r6, r3
 8005048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800504a:	4618      	mov	r0, r3
 800504c:	f04f 0100 	mov.w	r1, #0
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	1894      	adds	r4, r2, r2
 8005056:	603c      	str	r4, [r7, #0]
 8005058:	415b      	adcs	r3, r3
 800505a:	607b      	str	r3, [r7, #4]
 800505c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005060:	1812      	adds	r2, r2, r0
 8005062:	eb41 0303 	adc.w	r3, r1, r3
 8005066:	f04f 0400 	mov.w	r4, #0
 800506a:	f04f 0500 	mov.w	r5, #0
 800506e:	00dd      	lsls	r5, r3, #3
 8005070:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005074:	00d4      	lsls	r4, r2, #3
 8005076:	4622      	mov	r2, r4
 8005078:	462b      	mov	r3, r5
 800507a:	eb12 0a00 	adds.w	sl, r2, r0
 800507e:	eb43 0b01 	adc.w	fp, r3, r1
 8005082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	4618      	mov	r0, r3
 8005088:	f04f 0100 	mov.w	r1, #0
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	008b      	lsls	r3, r1, #2
 8005096:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800509a:	0082      	lsls	r2, r0, #2
 800509c:	4650      	mov	r0, sl
 800509e:	4659      	mov	r1, fp
 80050a0:	f7fb f8e6 	bl	8000270 <__aeabi_uldivmod>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4b0e      	ldr	r3, [pc, #56]	; (80050e4 <UART_SetConfig+0x38c>)
 80050aa:	fba3 1302 	umull	r1, r3, r3, r2
 80050ae:	095b      	lsrs	r3, r3, #5
 80050b0:	2164      	movs	r1, #100	; 0x64
 80050b2:	fb01 f303 	mul.w	r3, r1, r3
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	3332      	adds	r3, #50	; 0x32
 80050bc:	4a09      	ldr	r2, [pc, #36]	; (80050e4 <UART_SetConfig+0x38c>)
 80050be:	fba2 2303 	umull	r2, r3, r2, r3
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	f003 020f 	and.w	r2, r3, #15
 80050c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4432      	add	r2, r6
 80050ce:	609a      	str	r2, [r3, #8]
}
 80050d0:	bf00      	nop
 80050d2:	377c      	adds	r7, #124	; 0x7c
 80050d4:	46bd      	mov	sp, r7
 80050d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050da:	bf00      	nop
 80050dc:	40011000 	.word	0x40011000
 80050e0:	40011400 	.word	0x40011400
 80050e4:	51eb851f 	.word	0x51eb851f

080050e8 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e033      	b.n	8005162 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d106      	bne.n	8005114 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fc f900 	bl	8001314 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fb67 	bl	80057f0 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005130:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	695a      	ldr	r2, [r3, #20]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005140:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005150:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
	...

0800516c <HAL_USART_IRQHandler>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800518c:	2300      	movs	r3, #0
 800518e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005190:	2300      	movs	r3, #0
 8005192:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d117      	bne.n	80051d2 <HAL_USART_IRQHandler+0x66>
  {
    /* USART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	f003 0320 	and.w	r3, r3, #32
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d012      	beq.n	80051d2 <HAL_USART_IRQHandler+0x66>
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00d      	beq.n	80051d2 <HAL_USART_IRQHandler+0x66>
    {
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b22      	cmp	r3, #34	; 0x22
 80051c0:	d103      	bne.n	80051ca <HAL_USART_IRQHandler+0x5e>
      {
        USART_Receive_IT(husart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f9ba 	bl	800553c <USART_Receive_IT>
      }
      else
      {
        USART_TransmitReceive_IT(husart);
      }
      return;
 80051c8:	e0e9      	b.n	800539e <HAL_USART_IRQHandler+0x232>
        USART_TransmitReceive_IT(husart);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fa3c 	bl	8005648 <USART_TransmitReceive_IT>
      return;
 80051d0:	e0e5      	b.n	800539e <HAL_USART_IRQHandler+0x232>
    }
  }
  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 80bb 	beq.w	8005350 <HAL_USART_IRQHandler+0x1e4>
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d105      	bne.n	80051f0 <HAL_USART_IRQHandler+0x84>
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 80b0 	beq.w	8005350 <HAL_USART_IRQHandler+0x1e4>
  {
    /* USART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <HAL_USART_IRQHandler+0xa4>
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <HAL_USART_IRQHandler+0xa4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	f043 0201 	orr.w	r2, r3, #1
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART noise error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <HAL_USART_IRQHandler+0xc4>
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d005      	beq.n	8005230 <HAL_USART_IRQHandler+0xc4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005228:	f043 0202 	orr.w	r2, r3, #2
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART frame error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <HAL_USART_IRQHandler+0xe4>
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d005      	beq.n	8005250 <HAL_USART_IRQHandler+0xe4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	f043 0204 	orr.w	r2, r3, #4
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART Over-Run interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00f      	beq.n	800527a <HAL_USART_IRQHandler+0x10e>
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	f003 0320 	and.w	r3, r3, #32
 8005260:	2b00      	cmp	r3, #0
 8005262:	d104      	bne.n	800526e <HAL_USART_IRQHandler+0x102>
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d005      	beq.n	800527a <HAL_USART_IRQHandler+0x10e>
    {
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	f043 0208 	orr.w	r2, r3, #8
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	641a      	str	r2, [r3, #64]	; 0x40
    }

    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	2b00      	cmp	r3, #0
 8005280:	f000 808c 	beq.w	800539c <HAL_USART_IRQHandler+0x230>
    {
      /* USART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b00      	cmp	r3, #0
 800528c:	d011      	beq.n	80052b2 <HAL_USART_IRQHandler+0x146>
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	f003 0320 	and.w	r3, r3, #32
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00c      	beq.n	80052b2 <HAL_USART_IRQHandler+0x146>
      {
        if (husart->State == HAL_USART_STATE_BUSY_RX)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b22      	cmp	r3, #34	; 0x22
 80052a2:	d103      	bne.n	80052ac <HAL_USART_IRQHandler+0x140>
        {
          USART_Receive_IT(husart);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f949 	bl	800553c <USART_Receive_IT>
 80052aa:	e002      	b.n	80052b2 <HAL_USART_IRQHandler+0x146>
        }
        else
        {
          USART_TransmitReceive_IT(husart);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f9cb 	bl	8005648 <USART_TransmitReceive_IT>
        }
      }
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052bc:	2b40      	cmp	r3, #64	; 0x40
 80052be:	bf0c      	ite	eq
 80052c0:	2301      	moveq	r3, #1
 80052c2:	2300      	movne	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	60fb      	str	r3, [r7, #12]
      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	f003 0308 	and.w	r3, r3, #8
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d102      	bne.n	80052da <HAL_USART_IRQHandler+0x16e>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d031      	beq.n	800533e <HAL_USART_IRQHandler+0x1d2>
      {
        /* Set the USART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        USART_EndRxTransfer(husart);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f88c 	bl	80053f8 <USART_EndRxTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ea:	2b40      	cmp	r3, #64	; 0x40
 80052ec:	d123      	bne.n	8005336 <HAL_USART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	695a      	ldr	r2, [r3, #20]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052fc:	615a      	str	r2, [r3, #20]

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	2b00      	cmp	r3, #0
 8005304:	d013      	beq.n	800532e <HAL_USART_IRQHandler+0x1c2>
          {
            /* Set the USART DMA Abort callback :
            will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	4a26      	ldr	r2, [pc, #152]	; (80053a4 <HAL_USART_IRQHandler+0x238>)
 800530c:	651a      	str	r2, [r3, #80]	; 0x50

            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005312:	4618      	mov	r0, r3
 8005314:	f7fc fc94 	bl	8001c40 <HAL_DMA_Abort_IT>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d016      	beq.n	800534c <HAL_USART_IRQHandler+0x1e0>
            {
              /* Call Directly XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005328:	4610      	mov	r0, r2
 800532a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800532c:	e00e      	b.n	800534c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f858 	bl	80053e4 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005334:	e00a      	b.n	800534c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f854 	bl	80053e4 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800533c:	e006      	b.n	800534c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f850 	bl	80053e4 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800534a:	e027      	b.n	800539c <HAL_USART_IRQHandler+0x230>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800534c:	bf00      	nop
    return;
 800534e:	e025      	b.n	800539c <HAL_USART_IRQHandler+0x230>
  }

  /* USART in mode Transmitter -----------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005356:	2b00      	cmp	r3, #0
 8005358:	d012      	beq.n	8005380 <HAL_USART_IRQHandler+0x214>
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00d      	beq.n	8005380 <HAL_USART_IRQHandler+0x214>
  {
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b12      	cmp	r3, #18
 800536e:	d103      	bne.n	8005378 <HAL_USART_IRQHandler+0x20c>
    {
      USART_Transmit_IT(husart);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f873 	bl	800545c <USART_Transmit_IT>
    }
    else
    {
      USART_TransmitReceive_IT(husart);
    }
    return;
 8005376:	e012      	b.n	800539e <HAL_USART_IRQHandler+0x232>
      USART_TransmitReceive_IT(husart);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f965 	bl	8005648 <USART_TransmitReceive_IT>
    return;
 800537e:	e00e      	b.n	800539e <HAL_USART_IRQHandler+0x232>
  }

  /* USART in mode Transmitter (transmission end) ----------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005386:	2b00      	cmp	r3, #0
 8005388:	d009      	beq.n	800539e <HAL_USART_IRQHandler+0x232>
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	d004      	beq.n	800539e <HAL_USART_IRQHandler+0x232>
  {
    USART_EndTransmit_IT(husart);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f8b1 	bl	80054fc <USART_EndTransmit_IT>
    return;
 800539a:	e000      	b.n	800539e <HAL_USART_IRQHandler+0x232>
    return;
 800539c:	bf00      	nop
  }
}
 800539e:	3720      	adds	r7, #32
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	08005435 	.word	0x08005435

080053a8 <HAL_USART_TxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxCpltCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_USART_RxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800540e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695a      	ldr	r2, [r3, #20]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0201 	bic.w	r2, r2, #1
 800541e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0x00U;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f7ff ffc8 	bl	80053e4 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8005454:	bf00      	nop
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <USART_Transmit_IT>:
  *                the configuration information for the specified USART module.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b12      	cmp	r3, #18
 800546e:	d13e      	bne.n	80054ee <USART_Transmit_IT+0x92>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005478:	d114      	bne.n	80054a4 <USART_Transmit_IT+0x48>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d110      	bne.n	80054a4 <USART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) husart->pTxBuffPtr;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	60fb      	str	r3, [r7, #12]
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	461a      	mov	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005496:	605a      	str	r2, [r3, #4]
      husart->pTxBuffPtr += 2U;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	1c9a      	adds	r2, r3, #2
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	625a      	str	r2, [r3, #36]	; 0x24
 80054a2:	e008      	b.n	80054b6 <USART_Transmit_IT+0x5a>
    }
    else
    {
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	1c59      	adds	r1, r3, #1
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6251      	str	r1, [r2, #36]	; 0x24
 80054ae:	781a      	ldrb	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	605a      	str	r2, [r3, #4]
    }

    if (--husart->TxXferCount == 0U)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29b      	uxth	r3, r3
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	4619      	mov	r1, r3
 80054c4:	8551      	strh	r1, [r2, #42]	; 0x2a
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10f      	bne.n	80054ea <USART_Transmit_IT+0x8e>
    {
      /* Disable the USART Transmit data register empty Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054d8:	60da      	str	r2, [r3, #12]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68da      	ldr	r2, [r3, #12]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	e000      	b.n	80054f0 <USART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054ee:	2302      	movs	r3, #2
  }
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005512:	60da      	str	r2, [r3, #12]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695a      	ldr	r2, [r3, #20]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0201 	bic.w	r2, r2, #1
 8005522:	615a      	str	r2, [r3, #20]

  husart->State = HAL_USART_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Complete Callback */
  husart->TxCpltCallback(husart);
#else
  /* Call legacy weak Tx Complete Callback */
  HAL_USART_TxCpltCallback(husart);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff ff3b 	bl	80053a8 <HAL_USART_TxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <USART_Receive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_RX)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b22      	cmp	r3, #34	; 0x22
 800554e:	d176      	bne.n	800563e <USART_Receive_IT+0x102>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005558:	d117      	bne.n	800558a <USART_Receive_IT+0x4e>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d113      	bne.n	800558a <USART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8005562:	2300      	movs	r3, #0
 8005564:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	b29b      	uxth	r3, r3
 8005574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005578:	b29a      	uxth	r2, r3
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	801a      	strh	r2, [r3, #0]
      husart->pRxBuffPtr += 2U;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005582:	1c9a      	adds	r2, r3, #2
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	62da      	str	r2, [r3, #44]	; 0x2c
 8005588:	e026      	b.n	80055d8 <USART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005590:	2300      	movs	r3, #0
 8005592:	60bb      	str	r3, [r7, #8]

      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559c:	d007      	beq.n	80055ae <USART_Receive_IT+0x72>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10a      	bne.n	80055bc <USART_Receive_IT+0x80>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <USART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	701a      	strb	r2, [r3, #0]
 80055ba:	e008      	b.n	80055ce <USART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	701a      	strb	r2, [r3, #0]
      }

      husart->pRxBuffPtr += 1U;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d2:	1c5a      	adds	r2, r3, #1
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    husart->RxXferCount--;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80055dc:	b29b      	uxth	r3, r3
 80055de:	3b01      	subs	r3, #1
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	865a      	strh	r2, [r3, #50]	; 0x32

    if (husart->RxXferCount == 0U)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d120      	bne.n	8005632 <USART_Receive_IT+0xf6>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0220 	bic.w	r2, r2, #32
 80055fe:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800560e:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695a      	ldr	r2, [r3, #20]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0201 	bic.w	r2, r2, #1
 800561e:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f7ff fec7 	bl	80053bc <HAL_USART_RxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 800562e:	2300      	movs	r3, #0
 8005630:	e006      	b.n	8005640 <USART_Receive_IT+0x104>
    else
    {
      /* Send dummy byte in order to generate the clock for the slave to send the next data.
      * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
      * can be written for all the cases. */
      husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x0FF);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	22ff      	movs	r2, #255	; 0xff
 8005638:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	e000      	b.n	8005640 <USART_Receive_IT+0x104>
  }
  else
  {
    return HAL_BUSY;
 800563e:	2302      	movs	r3, #2
  }
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <USART_TransmitReceive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b32      	cmp	r3, #50	; 0x32
 800565a:	f040 80c4 	bne.w	80057e6 <USART_TransmitReceive_IT+0x19e>
  {
    if (husart->TxXferCount != 0x00U)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005662:	b29b      	uxth	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d03f      	beq.n	80056e8 <USART_TransmitReceive_IT+0xa0>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005672:	2b80      	cmp	r3, #128	; 0x80
 8005674:	d138      	bne.n	80056e8 <USART_TransmitReceive_IT+0xa0>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800567e:	d116      	bne.n	80056ae <USART_TransmitReceive_IT+0x66>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d112      	bne.n	80056ae <USART_TransmitReceive_IT+0x66>
        {
          pdata8bits  = NULL;
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]
          pdata16bits = (uint16_t *) husart->pTxBuffPtr;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	60bb      	str	r3, [r7, #8]
          husart->Instance->DR = (uint16_t)(*pdata16bits & (uint16_t)0x01FF);
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	461a      	mov	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056a0:	605a      	str	r2, [r3, #4]
          husart->pTxBuffPtr += 2U;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	1c9a      	adds	r2, r3, #2
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	625a      	str	r2, [r3, #36]	; 0x24
 80056ac:	e008      	b.n	80056c0 <USART_TransmitReceive_IT+0x78>
        }
        else
        {
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	1c59      	adds	r1, r3, #1
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6251      	str	r1, [r2, #36]	; 0x24
 80056b8:	781a      	ldrb	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	605a      	str	r2, [r3, #4]
        }

        husart->TxXferCount--;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Check the latest data transmitted */
        if (husart->TxXferCount == 0U)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d107      	bne.n	80056e8 <USART_TransmitReceive_IT+0xa0>
        {
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68da      	ldr	r2, [r3, #12]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056e6:	60da      	str	r2, [r3, #12]
        }
      }
    }

    if (husart->RxXferCount != 0x00U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d051      	beq.n	8005796 <USART_TransmitReceive_IT+0x14e>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	d14a      	bne.n	8005796 <USART_TransmitReceive_IT+0x14e>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005708:	d117      	bne.n	800573a <USART_TransmitReceive_IT+0xf2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d113      	bne.n	800573a <USART_TransmitReceive_IT+0xf2>
        {
          pdata8bits  = NULL;
 8005712:	2300      	movs	r3, #0
 8005714:	60fb      	str	r3, [r7, #12]
          pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571a:	60bb      	str	r3, [r7, #8]
          *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	b29b      	uxth	r3, r3
 8005724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005728:	b29a      	uxth	r2, r3
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	801a      	strh	r2, [r3, #0]
          husart->pRxBuffPtr += 2U;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005732:	1c9a      	adds	r2, r3, #2
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	62da      	str	r2, [r3, #44]	; 0x2c
 8005738:	e026      	b.n	8005788 <USART_TransmitReceive_IT+0x140>
        }
        else
        {
          pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573e:	60fb      	str	r3, [r7, #12]
          pdata16bits  = NULL;
 8005740:	2300      	movs	r3, #0
 8005742:	60bb      	str	r3, [r7, #8]
          if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800574c:	d007      	beq.n	800575e <USART_TransmitReceive_IT+0x116>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10a      	bne.n	800576c <USART_TransmitReceive_IT+0x124>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <USART_TransmitReceive_IT+0x124>
          {
            *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	b2da      	uxtb	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	701a      	strb	r2, [r3, #0]
 800576a:	e008      	b.n	800577e <USART_TransmitReceive_IT+0x136>
          }
          else
          {
            *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	b2db      	uxtb	r3, r3
 8005774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005778:	b2da      	uxtb	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	701a      	strb	r2, [r3, #0]
          }
          husart->pRxBuffPtr += 1U;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	62da      	str	r2, [r3, #44]	; 0x2c
        }

        husart->RxXferCount--;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800578c:	b29b      	uxth	r3, r3
 800578e:	3b01      	subs	r3, #1
 8005790:	b29a      	uxth	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	865a      	strh	r2, [r3, #50]	; 0x32
      }
    }

    /* Check the latest data received */
    if (husart->RxXferCount == 0U)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800579a:	b29b      	uxth	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d120      	bne.n	80057e2 <USART_TransmitReceive_IT+0x19a>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 0220 	bic.w	r2, r2, #32
 80057ae:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057be:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	695a      	ldr	r2, [r3, #20]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0201 	bic.w	r2, r2, #1
 80057ce:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7ff fdf9 	bl	80053d0 <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	e002      	b.n	80057e8 <USART_TransmitReceive_IT+0x1a0>
    }

    return HAL_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	e000      	b.n	80057e8 <USART_TransmitReceive_IT+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 80057e6:	2302      	movs	r3, #2
  }
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 80057f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f4:	b0a5      	sub	sp, #148	; 0x94
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  uint32_t tmpreg = 0x00U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8005802:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68d9      	ldr	r1, [r3, #12]
 800580a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	f021 030c 	bic.w	r3, r1, #12
 8005814:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8005816:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8005822:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005826:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800582a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800582e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005832:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8005834:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005838:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800583a:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 800583c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	431a      	orrs	r2, r3
 8005844:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005848:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800584a:	431a      	orrs	r2, r3
 800584c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005850:	4313      	orrs	r3, r2
 8005852:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005856:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 800585a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005864:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8005866:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8005872:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005876:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800587a:	f023 030c 	bic.w	r3, r3, #12
 800587e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8005882:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	431a      	orrs	r2, r3
 8005890:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	431a      	orrs	r2, r3
 8005898:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800589c:	4313      	orrs	r3, r2
 800589e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 80058a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058b0:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 80058b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6959      	ldr	r1, [r3, #20]
 80058ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 80058c4:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 80058c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	4bc8      	ldr	r3, [pc, #800]	; (8005bf0 <USART_SetConfig+0x400>)
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d006      	beq.n	80058e0 <USART_SetConfig+0xf0>
 80058d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	4bc6      	ldr	r3, [pc, #792]	; (8005bf4 <USART_SetConfig+0x404>)
 80058da:	429a      	cmp	r2, r3
 80058dc:	f040 80c1 	bne.w	8005a62 <USART_SetConfig+0x272>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80058e0:	f7fe f946 	bl	8003b70 <HAL_RCC_GetPCLK2Freq>
 80058e4:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80058e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058ec:	461c      	mov	r4, r3
 80058ee:	f04f 0500 	mov.w	r5, #0
 80058f2:	4622      	mov	r2, r4
 80058f4:	462b      	mov	r3, r5
 80058f6:	1891      	adds	r1, r2, r2
 80058f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80058fa:	415b      	adcs	r3, r3
 80058fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005902:	1912      	adds	r2, r2, r4
 8005904:	eb45 0303 	adc.w	r3, r5, r3
 8005908:	f04f 0000 	mov.w	r0, #0
 800590c:	f04f 0100 	mov.w	r1, #0
 8005910:	00d9      	lsls	r1, r3, #3
 8005912:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005916:	00d0      	lsls	r0, r2, #3
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	eb12 0a04 	adds.w	sl, r2, r4
 8005920:	eb43 0b05 	adc.w	fp, r3, r5
 8005924:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	461a      	mov	r2, r3
 800592c:	f04f 0300 	mov.w	r3, #0
 8005930:	1891      	adds	r1, r2, r2
 8005932:	6539      	str	r1, [r7, #80]	; 0x50
 8005934:	415b      	adcs	r3, r3
 8005936:	657b      	str	r3, [r7, #84]	; 0x54
 8005938:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800593c:	4650      	mov	r0, sl
 800593e:	4659      	mov	r1, fp
 8005940:	f7fa fc96 	bl	8000270 <__aeabi_uldivmod>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4bab      	ldr	r3, [pc, #684]	; (8005bf8 <USART_SetConfig+0x408>)
 800594a:	fba3 2302 	umull	r2, r3, r3, r2
 800594e:	095b      	lsrs	r3, r3, #5
 8005950:	011e      	lsls	r6, r3, #4
 8005952:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005956:	461c      	mov	r4, r3
 8005958:	f04f 0500 	mov.w	r5, #0
 800595c:	4622      	mov	r2, r4
 800595e:	462b      	mov	r3, r5
 8005960:	1891      	adds	r1, r2, r2
 8005962:	64b9      	str	r1, [r7, #72]	; 0x48
 8005964:	415b      	adcs	r3, r3
 8005966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005968:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800596c:	1912      	adds	r2, r2, r4
 800596e:	eb45 0303 	adc.w	r3, r5, r3
 8005972:	f04f 0000 	mov.w	r0, #0
 8005976:	f04f 0100 	mov.w	r1, #0
 800597a:	00d9      	lsls	r1, r3, #3
 800597c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005980:	00d0      	lsls	r0, r2, #3
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	1911      	adds	r1, r2, r4
 8005988:	67b9      	str	r1, [r7, #120]	; 0x78
 800598a:	416b      	adcs	r3, r5
 800598c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800598e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	461a      	mov	r2, r3
 8005996:	f04f 0300 	mov.w	r3, #0
 800599a:	1891      	adds	r1, r2, r2
 800599c:	6439      	str	r1, [r7, #64]	; 0x40
 800599e:	415b      	adcs	r3, r3
 80059a0:	647b      	str	r3, [r7, #68]	; 0x44
 80059a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059a6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80059aa:	f7fa fc61 	bl	8000270 <__aeabi_uldivmod>
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	4b91      	ldr	r3, [pc, #580]	; (8005bf8 <USART_SetConfig+0x408>)
 80059b4:	fba3 1302 	umull	r1, r3, r3, r2
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	2164      	movs	r1, #100	; 0x64
 80059bc:	fb01 f303 	mul.w	r3, r1, r3
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	3332      	adds	r3, #50	; 0x32
 80059c6:	4a8c      	ldr	r2, [pc, #560]	; (8005bf8 <USART_SetConfig+0x408>)
 80059c8:	fba2 2303 	umull	r2, r3, r2, r3
 80059cc:	095b      	lsrs	r3, r3, #5
 80059ce:	005b      	lsls	r3, r3, #1
 80059d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059d4:	441e      	add	r6, r3
 80059d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059da:	4618      	mov	r0, r3
 80059dc:	f04f 0100 	mov.w	r1, #0
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	1894      	adds	r4, r2, r2
 80059e6:	63bc      	str	r4, [r7, #56]	; 0x38
 80059e8:	415b      	adcs	r3, r3
 80059ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059f0:	1812      	adds	r2, r2, r0
 80059f2:	eb41 0303 	adc.w	r3, r1, r3
 80059f6:	f04f 0400 	mov.w	r4, #0
 80059fa:	f04f 0500 	mov.w	r5, #0
 80059fe:	00dd      	lsls	r5, r3, #3
 8005a00:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a04:	00d4      	lsls	r4, r2, #3
 8005a06:	4622      	mov	r2, r4
 8005a08:	462b      	mov	r3, r5
 8005a0a:	1814      	adds	r4, r2, r0
 8005a0c:	673c      	str	r4, [r7, #112]	; 0x70
 8005a0e:	414b      	adcs	r3, r1
 8005a10:	677b      	str	r3, [r7, #116]	; 0x74
 8005a12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	f04f 0300 	mov.w	r3, #0
 8005a1e:	1891      	adds	r1, r2, r2
 8005a20:	6339      	str	r1, [r7, #48]	; 0x30
 8005a22:	415b      	adcs	r3, r3
 8005a24:	637b      	str	r3, [r7, #52]	; 0x34
 8005a26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005a2a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005a2e:	f7fa fc1f 	bl	8000270 <__aeabi_uldivmod>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4b70      	ldr	r3, [pc, #448]	; (8005bf8 <USART_SetConfig+0x408>)
 8005a38:	fba3 1302 	umull	r1, r3, r3, r2
 8005a3c:	095b      	lsrs	r3, r3, #5
 8005a3e:	2164      	movs	r1, #100	; 0x64
 8005a40:	fb01 f303 	mul.w	r3, r1, r3
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	3332      	adds	r3, #50	; 0x32
 8005a4a:	4a6b      	ldr	r2, [pc, #428]	; (8005bf8 <USART_SetConfig+0x408>)
 8005a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a50:	095b      	lsrs	r3, r3, #5
 8005a52:	f003 0207 	and.w	r2, r3, #7
 8005a56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4432      	add	r2, r6
 8005a5e:	609a      	str	r2, [r3, #8]
 8005a60:	e0c0      	b.n	8005be4 <USART_SetConfig+0x3f4>
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005a62:	f7fe f871 	bl	8003b48 <HAL_RCC_GetPCLK1Freq>
 8005a66:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8005a6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a6e:	461c      	mov	r4, r3
 8005a70:	f04f 0500 	mov.w	r5, #0
 8005a74:	4622      	mov	r2, r4
 8005a76:	462b      	mov	r3, r5
 8005a78:	1891      	adds	r1, r2, r2
 8005a7a:	62b9      	str	r1, [r7, #40]	; 0x28
 8005a7c:	415b      	adcs	r3, r3
 8005a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a84:	1912      	adds	r2, r2, r4
 8005a86:	eb45 0303 	adc.w	r3, r5, r3
 8005a8a:	f04f 0000 	mov.w	r0, #0
 8005a8e:	f04f 0100 	mov.w	r1, #0
 8005a92:	00d9      	lsls	r1, r3, #3
 8005a94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a98:	00d0      	lsls	r0, r2, #3
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	eb12 0804 	adds.w	r8, r2, r4
 8005aa2:	eb43 0905 	adc.w	r9, r3, r5
 8005aa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	461a      	mov	r2, r3
 8005aae:	f04f 0300 	mov.w	r3, #0
 8005ab2:	1891      	adds	r1, r2, r2
 8005ab4:	6239      	str	r1, [r7, #32]
 8005ab6:	415b      	adcs	r3, r3
 8005ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005abe:	4640      	mov	r0, r8
 8005ac0:	4649      	mov	r1, r9
 8005ac2:	f7fa fbd5 	bl	8000270 <__aeabi_uldivmod>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	4b4b      	ldr	r3, [pc, #300]	; (8005bf8 <USART_SetConfig+0x408>)
 8005acc:	fba3 2302 	umull	r2, r3, r3, r2
 8005ad0:	095b      	lsrs	r3, r3, #5
 8005ad2:	011e      	lsls	r6, r3, #4
 8005ad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ad8:	461c      	mov	r4, r3
 8005ada:	f04f 0500 	mov.w	r5, #0
 8005ade:	4622      	mov	r2, r4
 8005ae0:	462b      	mov	r3, r5
 8005ae2:	1891      	adds	r1, r2, r2
 8005ae4:	61b9      	str	r1, [r7, #24]
 8005ae6:	415b      	adcs	r3, r3
 8005ae8:	61fb      	str	r3, [r7, #28]
 8005aea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005aee:	1912      	adds	r2, r2, r4
 8005af0:	eb45 0303 	adc.w	r3, r5, r3
 8005af4:	f04f 0000 	mov.w	r0, #0
 8005af8:	f04f 0100 	mov.w	r1, #0
 8005afc:	00d9      	lsls	r1, r3, #3
 8005afe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b02:	00d0      	lsls	r0, r2, #3
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	1911      	adds	r1, r2, r4
 8005b0a:	66b9      	str	r1, [r7, #104]	; 0x68
 8005b0c:	416b      	adcs	r3, r5
 8005b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	461a      	mov	r2, r3
 8005b18:	f04f 0300 	mov.w	r3, #0
 8005b1c:	1891      	adds	r1, r2, r2
 8005b1e:	6139      	str	r1, [r7, #16]
 8005b20:	415b      	adcs	r3, r3
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005b28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b2c:	f7fa fba0 	bl	8000270 <__aeabi_uldivmod>
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4b30      	ldr	r3, [pc, #192]	; (8005bf8 <USART_SetConfig+0x408>)
 8005b36:	fba3 1302 	umull	r1, r3, r3, r2
 8005b3a:	095b      	lsrs	r3, r3, #5
 8005b3c:	2164      	movs	r1, #100	; 0x64
 8005b3e:	fb01 f303 	mul.w	r3, r1, r3
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	3332      	adds	r3, #50	; 0x32
 8005b48:	4a2b      	ldr	r2, [pc, #172]	; (8005bf8 <USART_SetConfig+0x408>)
 8005b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b56:	441e      	add	r6, r3
 8005b58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f04f 0100 	mov.w	r1, #0
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	1894      	adds	r4, r2, r2
 8005b68:	60bc      	str	r4, [r7, #8]
 8005b6a:	415b      	adcs	r3, r3
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b72:	1812      	adds	r2, r2, r0
 8005b74:	eb41 0303 	adc.w	r3, r1, r3
 8005b78:	f04f 0400 	mov.w	r4, #0
 8005b7c:	f04f 0500 	mov.w	r5, #0
 8005b80:	00dd      	lsls	r5, r3, #3
 8005b82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b86:	00d4      	lsls	r4, r2, #3
 8005b88:	4622      	mov	r2, r4
 8005b8a:	462b      	mov	r3, r5
 8005b8c:	1814      	adds	r4, r2, r0
 8005b8e:	663c      	str	r4, [r7, #96]	; 0x60
 8005b90:	414b      	adcs	r3, r1
 8005b92:	667b      	str	r3, [r7, #100]	; 0x64
 8005b94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f04f 0300 	mov.w	r3, #0
 8005ba0:	1891      	adds	r1, r2, r2
 8005ba2:	6039      	str	r1, [r7, #0]
 8005ba4:	415b      	adcs	r3, r3
 8005ba6:	607b      	str	r3, [r7, #4]
 8005ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005bb0:	f7fa fb5e 	bl	8000270 <__aeabi_uldivmod>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4b0f      	ldr	r3, [pc, #60]	; (8005bf8 <USART_SetConfig+0x408>)
 8005bba:	fba3 1302 	umull	r1, r3, r3, r2
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	2164      	movs	r1, #100	; 0x64
 8005bc2:	fb01 f303 	mul.w	r3, r1, r3
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	3332      	adds	r3, #50	; 0x32
 8005bcc:	4a0a      	ldr	r2, [pc, #40]	; (8005bf8 <USART_SetConfig+0x408>)
 8005bce:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	f003 0207 	and.w	r2, r3, #7
 8005bd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4432      	add	r2, r6
 8005be0:	609a      	str	r2, [r3, #8]
  }
}
 8005be2:	bf00      	nop
 8005be4:	bf00      	nop
 8005be6:	3794      	adds	r7, #148	; 0x94
 8005be8:	46bd      	mov	sp, r7
 8005bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bee:	bf00      	nop
 8005bf0:	40011000 	.word	0x40011000
 8005bf4:	40011400 	.word	0x40011400
 8005bf8:	51eb851f 	.word	0x51eb851f

08005bfc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005c02:	4b98      	ldr	r3, [pc, #608]	; (8005e64 <MX_LWIP_Init+0x268>)
 8005c04:	22c0      	movs	r2, #192	; 0xc0
 8005c06:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005c08:	4b96      	ldr	r3, [pc, #600]	; (8005e64 <MX_LWIP_Init+0x268>)
 8005c0a:	22a8      	movs	r2, #168	; 0xa8
 8005c0c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8005c0e:	4b95      	ldr	r3, [pc, #596]	; (8005e64 <MX_LWIP_Init+0x268>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 177;
 8005c14:	4b93      	ldr	r3, [pc, #588]	; (8005e64 <MX_LWIP_Init+0x268>)
 8005c16:	22b1      	movs	r2, #177	; 0xb1
 8005c18:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005c1a:	4b93      	ldr	r3, [pc, #588]	; (8005e68 <MX_LWIP_Init+0x26c>)
 8005c1c:	22ff      	movs	r2, #255	; 0xff
 8005c1e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005c20:	4b91      	ldr	r3, [pc, #580]	; (8005e68 <MX_LWIP_Init+0x26c>)
 8005c22:	22ff      	movs	r2, #255	; 0xff
 8005c24:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005c26:	4b90      	ldr	r3, [pc, #576]	; (8005e68 <MX_LWIP_Init+0x26c>)
 8005c28:	22ff      	movs	r2, #255	; 0xff
 8005c2a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005c2c:	4b8e      	ldr	r3, [pc, #568]	; (8005e68 <MX_LWIP_Init+0x26c>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005c32:	4b8e      	ldr	r3, [pc, #568]	; (8005e6c <MX_LWIP_Init+0x270>)
 8005c34:	22c0      	movs	r2, #192	; 0xc0
 8005c36:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005c38:	4b8c      	ldr	r3, [pc, #560]	; (8005e6c <MX_LWIP_Init+0x270>)
 8005c3a:	22a8      	movs	r2, #168	; 0xa8
 8005c3c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005c3e:	4b8b      	ldr	r3, [pc, #556]	; (8005e6c <MX_LWIP_Init+0x270>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005c44:	4b89      	ldr	r3, [pc, #548]	; (8005e6c <MX_LWIP_Init+0x270>)
 8005c46:	2201      	movs	r2, #1
 8005c48:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	f005 fd0f 	bl	800b670 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005c52:	4b84      	ldr	r3, [pc, #528]	; (8005e64 <MX_LWIP_Init+0x268>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	061a      	lsls	r2, r3, #24
 8005c58:	4b82      	ldr	r3, [pc, #520]	; (8005e64 <MX_LWIP_Init+0x268>)
 8005c5a:	785b      	ldrb	r3, [r3, #1]
 8005c5c:	041b      	lsls	r3, r3, #16
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	4b80      	ldr	r3, [pc, #512]	; (8005e64 <MX_LWIP_Init+0x268>)
 8005c62:	789b      	ldrb	r3, [r3, #2]
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	4313      	orrs	r3, r2
 8005c68:	4a7e      	ldr	r2, [pc, #504]	; (8005e64 <MX_LWIP_Init+0x268>)
 8005c6a:	78d2      	ldrb	r2, [r2, #3]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	061a      	lsls	r2, r3, #24
 8005c70:	4b7c      	ldr	r3, [pc, #496]	; (8005e64 <MX_LWIP_Init+0x268>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	0619      	lsls	r1, r3, #24
 8005c76:	4b7b      	ldr	r3, [pc, #492]	; (8005e64 <MX_LWIP_Init+0x268>)
 8005c78:	785b      	ldrb	r3, [r3, #1]
 8005c7a:	041b      	lsls	r3, r3, #16
 8005c7c:	4319      	orrs	r1, r3
 8005c7e:	4b79      	ldr	r3, [pc, #484]	; (8005e64 <MX_LWIP_Init+0x268>)
 8005c80:	789b      	ldrb	r3, [r3, #2]
 8005c82:	021b      	lsls	r3, r3, #8
 8005c84:	430b      	orrs	r3, r1
 8005c86:	4977      	ldr	r1, [pc, #476]	; (8005e64 <MX_LWIP_Init+0x268>)
 8005c88:	78c9      	ldrb	r1, [r1, #3]
 8005c8a:	430b      	orrs	r3, r1
 8005c8c:	021b      	lsls	r3, r3, #8
 8005c8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c92:	431a      	orrs	r2, r3
 8005c94:	4b73      	ldr	r3, [pc, #460]	; (8005e64 <MX_LWIP_Init+0x268>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	0619      	lsls	r1, r3, #24
 8005c9a:	4b72      	ldr	r3, [pc, #456]	; (8005e64 <MX_LWIP_Init+0x268>)
 8005c9c:	785b      	ldrb	r3, [r3, #1]
 8005c9e:	041b      	lsls	r3, r3, #16
 8005ca0:	4319      	orrs	r1, r3
 8005ca2:	4b70      	ldr	r3, [pc, #448]	; (8005e64 <MX_LWIP_Init+0x268>)
 8005ca4:	789b      	ldrb	r3, [r3, #2]
 8005ca6:	021b      	lsls	r3, r3, #8
 8005ca8:	430b      	orrs	r3, r1
 8005caa:	496e      	ldr	r1, [pc, #440]	; (8005e64 <MX_LWIP_Init+0x268>)
 8005cac:	78c9      	ldrb	r1, [r1, #3]
 8005cae:	430b      	orrs	r3, r1
 8005cb0:	0a1b      	lsrs	r3, r3, #8
 8005cb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	4b6a      	ldr	r3, [pc, #424]	; (8005e64 <MX_LWIP_Init+0x268>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	0619      	lsls	r1, r3, #24
 8005cbe:	4b69      	ldr	r3, [pc, #420]	; (8005e64 <MX_LWIP_Init+0x268>)
 8005cc0:	785b      	ldrb	r3, [r3, #1]
 8005cc2:	041b      	lsls	r3, r3, #16
 8005cc4:	4319      	orrs	r1, r3
 8005cc6:	4b67      	ldr	r3, [pc, #412]	; (8005e64 <MX_LWIP_Init+0x268>)
 8005cc8:	789b      	ldrb	r3, [r3, #2]
 8005cca:	021b      	lsls	r3, r3, #8
 8005ccc:	430b      	orrs	r3, r1
 8005cce:	4965      	ldr	r1, [pc, #404]	; (8005e64 <MX_LWIP_Init+0x268>)
 8005cd0:	78c9      	ldrb	r1, [r1, #3]
 8005cd2:	430b      	orrs	r3, r1
 8005cd4:	0e1b      	lsrs	r3, r3, #24
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	4a65      	ldr	r2, [pc, #404]	; (8005e70 <MX_LWIP_Init+0x274>)
 8005cda:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005cdc:	4b62      	ldr	r3, [pc, #392]	; (8005e68 <MX_LWIP_Init+0x26c>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	061a      	lsls	r2, r3, #24
 8005ce2:	4b61      	ldr	r3, [pc, #388]	; (8005e68 <MX_LWIP_Init+0x26c>)
 8005ce4:	785b      	ldrb	r3, [r3, #1]
 8005ce6:	041b      	lsls	r3, r3, #16
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	4b5f      	ldr	r3, [pc, #380]	; (8005e68 <MX_LWIP_Init+0x26c>)
 8005cec:	789b      	ldrb	r3, [r3, #2]
 8005cee:	021b      	lsls	r3, r3, #8
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	4a5d      	ldr	r2, [pc, #372]	; (8005e68 <MX_LWIP_Init+0x26c>)
 8005cf4:	78d2      	ldrb	r2, [r2, #3]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	061a      	lsls	r2, r3, #24
 8005cfa:	4b5b      	ldr	r3, [pc, #364]	; (8005e68 <MX_LWIP_Init+0x26c>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	0619      	lsls	r1, r3, #24
 8005d00:	4b59      	ldr	r3, [pc, #356]	; (8005e68 <MX_LWIP_Init+0x26c>)
 8005d02:	785b      	ldrb	r3, [r3, #1]
 8005d04:	041b      	lsls	r3, r3, #16
 8005d06:	4319      	orrs	r1, r3
 8005d08:	4b57      	ldr	r3, [pc, #348]	; (8005e68 <MX_LWIP_Init+0x26c>)
 8005d0a:	789b      	ldrb	r3, [r3, #2]
 8005d0c:	021b      	lsls	r3, r3, #8
 8005d0e:	430b      	orrs	r3, r1
 8005d10:	4955      	ldr	r1, [pc, #340]	; (8005e68 <MX_LWIP_Init+0x26c>)
 8005d12:	78c9      	ldrb	r1, [r1, #3]
 8005d14:	430b      	orrs	r3, r1
 8005d16:	021b      	lsls	r3, r3, #8
 8005d18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	4b52      	ldr	r3, [pc, #328]	; (8005e68 <MX_LWIP_Init+0x26c>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	0619      	lsls	r1, r3, #24
 8005d24:	4b50      	ldr	r3, [pc, #320]	; (8005e68 <MX_LWIP_Init+0x26c>)
 8005d26:	785b      	ldrb	r3, [r3, #1]
 8005d28:	041b      	lsls	r3, r3, #16
 8005d2a:	4319      	orrs	r1, r3
 8005d2c:	4b4e      	ldr	r3, [pc, #312]	; (8005e68 <MX_LWIP_Init+0x26c>)
 8005d2e:	789b      	ldrb	r3, [r3, #2]
 8005d30:	021b      	lsls	r3, r3, #8
 8005d32:	430b      	orrs	r3, r1
 8005d34:	494c      	ldr	r1, [pc, #304]	; (8005e68 <MX_LWIP_Init+0x26c>)
 8005d36:	78c9      	ldrb	r1, [r1, #3]
 8005d38:	430b      	orrs	r3, r1
 8005d3a:	0a1b      	lsrs	r3, r3, #8
 8005d3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005d40:	431a      	orrs	r2, r3
 8005d42:	4b49      	ldr	r3, [pc, #292]	; (8005e68 <MX_LWIP_Init+0x26c>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	0619      	lsls	r1, r3, #24
 8005d48:	4b47      	ldr	r3, [pc, #284]	; (8005e68 <MX_LWIP_Init+0x26c>)
 8005d4a:	785b      	ldrb	r3, [r3, #1]
 8005d4c:	041b      	lsls	r3, r3, #16
 8005d4e:	4319      	orrs	r1, r3
 8005d50:	4b45      	ldr	r3, [pc, #276]	; (8005e68 <MX_LWIP_Init+0x26c>)
 8005d52:	789b      	ldrb	r3, [r3, #2]
 8005d54:	021b      	lsls	r3, r3, #8
 8005d56:	430b      	orrs	r3, r1
 8005d58:	4943      	ldr	r1, [pc, #268]	; (8005e68 <MX_LWIP_Init+0x26c>)
 8005d5a:	78c9      	ldrb	r1, [r1, #3]
 8005d5c:	430b      	orrs	r3, r1
 8005d5e:	0e1b      	lsrs	r3, r3, #24
 8005d60:	4313      	orrs	r3, r2
 8005d62:	4a44      	ldr	r2, [pc, #272]	; (8005e74 <MX_LWIP_Init+0x278>)
 8005d64:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005d66:	4b41      	ldr	r3, [pc, #260]	; (8005e6c <MX_LWIP_Init+0x270>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	061a      	lsls	r2, r3, #24
 8005d6c:	4b3f      	ldr	r3, [pc, #252]	; (8005e6c <MX_LWIP_Init+0x270>)
 8005d6e:	785b      	ldrb	r3, [r3, #1]
 8005d70:	041b      	lsls	r3, r3, #16
 8005d72:	431a      	orrs	r2, r3
 8005d74:	4b3d      	ldr	r3, [pc, #244]	; (8005e6c <MX_LWIP_Init+0x270>)
 8005d76:	789b      	ldrb	r3, [r3, #2]
 8005d78:	021b      	lsls	r3, r3, #8
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	4a3b      	ldr	r2, [pc, #236]	; (8005e6c <MX_LWIP_Init+0x270>)
 8005d7e:	78d2      	ldrb	r2, [r2, #3]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	061a      	lsls	r2, r3, #24
 8005d84:	4b39      	ldr	r3, [pc, #228]	; (8005e6c <MX_LWIP_Init+0x270>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	0619      	lsls	r1, r3, #24
 8005d8a:	4b38      	ldr	r3, [pc, #224]	; (8005e6c <MX_LWIP_Init+0x270>)
 8005d8c:	785b      	ldrb	r3, [r3, #1]
 8005d8e:	041b      	lsls	r3, r3, #16
 8005d90:	4319      	orrs	r1, r3
 8005d92:	4b36      	ldr	r3, [pc, #216]	; (8005e6c <MX_LWIP_Init+0x270>)
 8005d94:	789b      	ldrb	r3, [r3, #2]
 8005d96:	021b      	lsls	r3, r3, #8
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	4934      	ldr	r1, [pc, #208]	; (8005e6c <MX_LWIP_Init+0x270>)
 8005d9c:	78c9      	ldrb	r1, [r1, #3]
 8005d9e:	430b      	orrs	r3, r1
 8005da0:	021b      	lsls	r3, r3, #8
 8005da2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005da6:	431a      	orrs	r2, r3
 8005da8:	4b30      	ldr	r3, [pc, #192]	; (8005e6c <MX_LWIP_Init+0x270>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	0619      	lsls	r1, r3, #24
 8005dae:	4b2f      	ldr	r3, [pc, #188]	; (8005e6c <MX_LWIP_Init+0x270>)
 8005db0:	785b      	ldrb	r3, [r3, #1]
 8005db2:	041b      	lsls	r3, r3, #16
 8005db4:	4319      	orrs	r1, r3
 8005db6:	4b2d      	ldr	r3, [pc, #180]	; (8005e6c <MX_LWIP_Init+0x270>)
 8005db8:	789b      	ldrb	r3, [r3, #2]
 8005dba:	021b      	lsls	r3, r3, #8
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	492b      	ldr	r1, [pc, #172]	; (8005e6c <MX_LWIP_Init+0x270>)
 8005dc0:	78c9      	ldrb	r1, [r1, #3]
 8005dc2:	430b      	orrs	r3, r1
 8005dc4:	0a1b      	lsrs	r3, r3, #8
 8005dc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	4b27      	ldr	r3, [pc, #156]	; (8005e6c <MX_LWIP_Init+0x270>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	0619      	lsls	r1, r3, #24
 8005dd2:	4b26      	ldr	r3, [pc, #152]	; (8005e6c <MX_LWIP_Init+0x270>)
 8005dd4:	785b      	ldrb	r3, [r3, #1]
 8005dd6:	041b      	lsls	r3, r3, #16
 8005dd8:	4319      	orrs	r1, r3
 8005dda:	4b24      	ldr	r3, [pc, #144]	; (8005e6c <MX_LWIP_Init+0x270>)
 8005ddc:	789b      	ldrb	r3, [r3, #2]
 8005dde:	021b      	lsls	r3, r3, #8
 8005de0:	430b      	orrs	r3, r1
 8005de2:	4922      	ldr	r1, [pc, #136]	; (8005e6c <MX_LWIP_Init+0x270>)
 8005de4:	78c9      	ldrb	r1, [r1, #3]
 8005de6:	430b      	orrs	r3, r1
 8005de8:	0e1b      	lsrs	r3, r3, #24
 8005dea:	4313      	orrs	r3, r2
 8005dec:	4a22      	ldr	r2, [pc, #136]	; (8005e78 <MX_LWIP_Init+0x27c>)
 8005dee:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005df0:	4b22      	ldr	r3, [pc, #136]	; (8005e7c <MX_LWIP_Init+0x280>)
 8005df2:	9302      	str	r3, [sp, #8]
 8005df4:	4b22      	ldr	r3, [pc, #136]	; (8005e80 <MX_LWIP_Init+0x284>)
 8005df6:	9301      	str	r3, [sp, #4]
 8005df8:	2300      	movs	r3, #0
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	4b1e      	ldr	r3, [pc, #120]	; (8005e78 <MX_LWIP_Init+0x27c>)
 8005dfe:	4a1d      	ldr	r2, [pc, #116]	; (8005e74 <MX_LWIP_Init+0x278>)
 8005e00:	491b      	ldr	r1, [pc, #108]	; (8005e70 <MX_LWIP_Init+0x274>)
 8005e02:	4820      	ldr	r0, [pc, #128]	; (8005e84 <MX_LWIP_Init+0x288>)
 8005e04:	f006 f9b8 	bl	800c178 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005e08:	481e      	ldr	r0, [pc, #120]	; (8005e84 <MX_LWIP_Init+0x288>)
 8005e0a:	f006 fb67 	bl	800c4dc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005e0e:	4b1d      	ldr	r3, [pc, #116]	; (8005e84 <MX_LWIP_Init+0x288>)
 8005e10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e14:	089b      	lsrs	r3, r3, #2
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005e20:	4818      	ldr	r0, [pc, #96]	; (8005e84 <MX_LWIP_Init+0x288>)
 8005e22:	f006 fb6b 	bl	800c4fc <netif_set_up>
 8005e26:	e002      	b.n	8005e2e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005e28:	4816      	ldr	r0, [pc, #88]	; (8005e84 <MX_LWIP_Init+0x288>)
 8005e2a:	f006 fbd3 	bl	800c5d4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005e2e:	4916      	ldr	r1, [pc, #88]	; (8005e88 <MX_LWIP_Init+0x28c>)
 8005e30:	4814      	ldr	r0, [pc, #80]	; (8005e84 <MX_LWIP_Init+0x288>)
 8005e32:	f006 fc01 	bl	800c638 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8005e36:	2300      	movs	r3, #0
 8005e38:	603b      	str	r3, [r7, #0]
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	607b      	str	r3, [r7, #4]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8005e3e:	463b      	mov	r3, r7
 8005e40:	2101      	movs	r1, #1
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fd36 	bl	80068b4 <osSemaphoreCreate>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	4a10      	ldr	r2, [pc, #64]	; (8005e8c <MX_LWIP_Init+0x290>)
 8005e4c:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8005e4e:	4b10      	ldr	r3, [pc, #64]	; (8005e90 <MX_LWIP_Init+0x294>)
 8005e50:	4a0c      	ldr	r2, [pc, #48]	; (8005e84 <MX_LWIP_Init+0x288>)
 8005e52:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8005e54:	4b0d      	ldr	r3, [pc, #52]	; (8005e8c <MX_LWIP_Init+0x290>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a0d      	ldr	r2, [pc, #52]	; (8005e90 <MX_LWIP_Init+0x294>)
 8005e5a:	6053      	str	r3, [r2, #4]
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005e5c:	bf00      	nop
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	20006b68 	.word	0x20006b68
 8005e68:	20006b64 	.word	0x20006b64
 8005e6c:	20006b28 	.word	0x20006b28
 8005e70:	20006b60 	.word	0x20006b60
 8005e74:	20006b6c 	.word	0x20006b6c
 8005e78:	20006b70 	.word	0x20006b70
 8005e7c:	0800b581 	.word	0x0800b581
 8005e80:	080064c1 	.word	0x080064c1
 8005e84:	20006b2c 	.word	0x20006b2c
 8005e88:	0800652d 	.word	0x0800652d
 8005e8c:	20000388 	.word	0x20000388
 8005e90:	20006b20 	.word	0x20006b20

08005e94 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08e      	sub	sp, #56	; 0x38
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	605a      	str	r2, [r3, #4]
 8005ea6:	609a      	str	r2, [r3, #8]
 8005ea8:	60da      	str	r2, [r3, #12]
 8005eaa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a4a      	ldr	r2, [pc, #296]	; (8005fdc <HAL_ETH_MspInit+0x148>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	f040 808d 	bne.w	8005fd2 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005eb8:	2300      	movs	r3, #0
 8005eba:	623b      	str	r3, [r7, #32]
 8005ebc:	4b48      	ldr	r3, [pc, #288]	; (8005fe0 <HAL_ETH_MspInit+0x14c>)
 8005ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec0:	4a47      	ldr	r2, [pc, #284]	; (8005fe0 <HAL_ETH_MspInit+0x14c>)
 8005ec2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8005ec8:	4b45      	ldr	r3, [pc, #276]	; (8005fe0 <HAL_ETH_MspInit+0x14c>)
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed0:	623b      	str	r3, [r7, #32]
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	61fb      	str	r3, [r7, #28]
 8005ed8:	4b41      	ldr	r3, [pc, #260]	; (8005fe0 <HAL_ETH_MspInit+0x14c>)
 8005eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005edc:	4a40      	ldr	r2, [pc, #256]	; (8005fe0 <HAL_ETH_MspInit+0x14c>)
 8005ede:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8005ee4:	4b3e      	ldr	r3, [pc, #248]	; (8005fe0 <HAL_ETH_MspInit+0x14c>)
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005eec:	61fb      	str	r3, [r7, #28]
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	61bb      	str	r3, [r7, #24]
 8005ef4:	4b3a      	ldr	r3, [pc, #232]	; (8005fe0 <HAL_ETH_MspInit+0x14c>)
 8005ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef8:	4a39      	ldr	r2, [pc, #228]	; (8005fe0 <HAL_ETH_MspInit+0x14c>)
 8005efa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005efe:	6313      	str	r3, [r2, #48]	; 0x30
 8005f00:	4b37      	ldr	r3, [pc, #220]	; (8005fe0 <HAL_ETH_MspInit+0x14c>)
 8005f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f08:	61bb      	str	r3, [r7, #24]
 8005f0a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	4b33      	ldr	r3, [pc, #204]	; (8005fe0 <HAL_ETH_MspInit+0x14c>)
 8005f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f14:	4a32      	ldr	r2, [pc, #200]	; (8005fe0 <HAL_ETH_MspInit+0x14c>)
 8005f16:	f043 0304 	orr.w	r3, r3, #4
 8005f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8005f1c:	4b30      	ldr	r3, [pc, #192]	; (8005fe0 <HAL_ETH_MspInit+0x14c>)
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f28:	2300      	movs	r3, #0
 8005f2a:	613b      	str	r3, [r7, #16]
 8005f2c:	4b2c      	ldr	r3, [pc, #176]	; (8005fe0 <HAL_ETH_MspInit+0x14c>)
 8005f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f30:	4a2b      	ldr	r2, [pc, #172]	; (8005fe0 <HAL_ETH_MspInit+0x14c>)
 8005f32:	f043 0301 	orr.w	r3, r3, #1
 8005f36:	6313      	str	r3, [r2, #48]	; 0x30
 8005f38:	4b29      	ldr	r3, [pc, #164]	; (8005fe0 <HAL_ETH_MspInit+0x14c>)
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3c:	f003 0301 	and.w	r3, r3, #1
 8005f40:	613b      	str	r3, [r7, #16]
 8005f42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]
 8005f48:	4b25      	ldr	r3, [pc, #148]	; (8005fe0 <HAL_ETH_MspInit+0x14c>)
 8005f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4c:	4a24      	ldr	r2, [pc, #144]	; (8005fe0 <HAL_ETH_MspInit+0x14c>)
 8005f4e:	f043 0302 	orr.w	r3, r3, #2
 8005f52:	6313      	str	r3, [r2, #48]	; 0x30
 8005f54:	4b22      	ldr	r3, [pc, #136]	; (8005fe0 <HAL_ETH_MspInit+0x14c>)
 8005f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005f60:	2332      	movs	r3, #50	; 0x32
 8005f62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f64:	2302      	movs	r3, #2
 8005f66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005f70:	230b      	movs	r3, #11
 8005f72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f78:	4619      	mov	r1, r3
 8005f7a:	481a      	ldr	r0, [pc, #104]	; (8005fe4 <HAL_ETH_MspInit+0x150>)
 8005f7c:	f7fd f828 	bl	8002fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005f80:	2386      	movs	r3, #134	; 0x86
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f84:	2302      	movs	r3, #2
 8005f86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005f90:	230b      	movs	r3, #11
 8005f92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4813      	ldr	r0, [pc, #76]	; (8005fe8 <HAL_ETH_MspInit+0x154>)
 8005f9c:	f7fd f818 	bl	8002fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8005fa0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005fb2:	230b      	movs	r3, #11
 8005fb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fba:	4619      	mov	r1, r3
 8005fbc:	480b      	ldr	r0, [pc, #44]	; (8005fec <HAL_ETH_MspInit+0x158>)
 8005fbe:	f7fd f807 	bl	8002fd0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	2105      	movs	r1, #5
 8005fc6:	203d      	movs	r0, #61	; 0x3d
 8005fc8:	f7fb fda0 	bl	8001b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005fcc:	203d      	movs	r0, #61	; 0x3d
 8005fce:	f7fb fdb9 	bl	8001b44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005fd2:	bf00      	nop
 8005fd4:	3738      	adds	r7, #56	; 0x38
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	40028000 	.word	0x40028000
 8005fe0:	40023800 	.word	0x40023800
 8005fe4:	40020800 	.word	0x40020800
 8005fe8:	40020000 	.word	0x40020000
 8005fec:	40020400 	.word	0x40020400

08005ff0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8005ff8:	4b04      	ldr	r3, [pc, #16]	; (800600c <HAL_ETH_RxCpltCallback+0x1c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f000 fcd9 	bl	80069b4 <osSemaphoreRelease>
}
 8006002:	bf00      	nop
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	2000038c 	.word	0x2000038c

08006010 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006010:	b5b0      	push	{r4, r5, r7, lr}
 8006012:	b090      	sub	sp, #64	; 0x40
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006018:	2300      	movs	r3, #0
 800601a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800601c:	4b5f      	ldr	r3, [pc, #380]	; (800619c <low_level_init+0x18c>)
 800601e:	4a60      	ldr	r2, [pc, #384]	; (80061a0 <low_level_init+0x190>)
 8006020:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_DISABLE;
 8006022:	4b5e      	ldr	r3, [pc, #376]	; (800619c <low_level_init+0x18c>)
 8006024:	2200      	movs	r2, #0
 8006026:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8006028:	4b5c      	ldr	r3, [pc, #368]	; (800619c <low_level_init+0x18c>)
 800602a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800602e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006030:	4b5a      	ldr	r3, [pc, #360]	; (800619c <low_level_init+0x18c>)
 8006032:	2200      	movs	r2, #0
 8006034:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006036:	4b59      	ldr	r3, [pc, #356]	; (800619c <low_level_init+0x18c>)
 8006038:	2200      	movs	r2, #0
 800603a:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800603c:	2300      	movs	r3, #0
 800603e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8006042:	2380      	movs	r3, #128	; 0x80
 8006044:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8006048:	23e1      	movs	r3, #225	; 0xe1
 800604a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800604e:	2300      	movs	r3, #0
 8006050:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8006054:	2300      	movs	r3, #0
 8006056:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800605a:	2300      	movs	r3, #0
 800605c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8006060:	4a4e      	ldr	r2, [pc, #312]	; (800619c <low_level_init+0x18c>)
 8006062:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006066:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8006068:	4b4c      	ldr	r3, [pc, #304]	; (800619c <low_level_init+0x18c>)
 800606a:	2201      	movs	r2, #1
 800606c:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800606e:	4b4b      	ldr	r3, [pc, #300]	; (800619c <low_level_init+0x18c>)
 8006070:	2200      	movs	r2, #0
 8006072:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006074:	4b49      	ldr	r3, [pc, #292]	; (800619c <low_level_init+0x18c>)
 8006076:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800607a:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800607c:	4847      	ldr	r0, [pc, #284]	; (800619c <low_level_init+0x18c>)
 800607e:	f7fb fe01 	bl	8001c84 <HAL_ETH_Init>
 8006082:	4603      	mov	r3, r0
 8006084:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8006088:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800608c:	2b00      	cmp	r3, #0
 800608e:	d108      	bne.n	80060a2 <low_level_init+0x92>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006096:	f043 0304 	orr.w	r3, r3, #4
 800609a:	b2da      	uxtb	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80060a2:	2304      	movs	r3, #4
 80060a4:	4a3f      	ldr	r2, [pc, #252]	; (80061a4 <low_level_init+0x194>)
 80060a6:	4940      	ldr	r1, [pc, #256]	; (80061a8 <low_level_init+0x198>)
 80060a8:	483c      	ldr	r0, [pc, #240]	; (800619c <low_level_init+0x18c>)
 80060aa:	f7fb ff87 	bl	8001fbc <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80060ae:	2304      	movs	r3, #4
 80060b0:	4a3e      	ldr	r2, [pc, #248]	; (80061ac <low_level_init+0x19c>)
 80060b2:	493f      	ldr	r1, [pc, #252]	; (80061b0 <low_level_init+0x1a0>)
 80060b4:	4839      	ldr	r0, [pc, #228]	; (800619c <low_level_init+0x18c>)
 80060b6:	f7fb ffea 	bl	800208e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2206      	movs	r2, #6
 80060be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80060c2:	4b36      	ldr	r3, [pc, #216]	; (800619c <low_level_init+0x18c>)
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	781a      	ldrb	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80060ce:	4b33      	ldr	r3, [pc, #204]	; (800619c <low_level_init+0x18c>)
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	785a      	ldrb	r2, [r3, #1]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80060da:	4b30      	ldr	r3, [pc, #192]	; (800619c <low_level_init+0x18c>)
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	789a      	ldrb	r2, [r3, #2]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80060e6:	4b2d      	ldr	r3, [pc, #180]	; (800619c <low_level_init+0x18c>)
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	78da      	ldrb	r2, [r3, #3]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80060f2:	4b2a      	ldr	r3, [pc, #168]	; (800619c <low_level_init+0x18c>)
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	791a      	ldrb	r2, [r3, #4]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80060fe:	4b27      	ldr	r3, [pc, #156]	; (800619c <low_level_init+0x18c>)
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	795a      	ldrb	r2, [r3, #5]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006110:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006118:	f043 030a 	orr.w	r3, r3, #10
 800611c:	b2da      	uxtb	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8006124:	2300      	movs	r3, #0
 8006126:	62bb      	str	r3, [r7, #40]	; 0x28
 8006128:	2300      	movs	r3, #0
 800612a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800612c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006130:	2101      	movs	r1, #1
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fbbe 	bl	80068b4 <osSemaphoreCreate>
 8006138:	4603      	mov	r3, r0
 800613a:	4a1e      	ldr	r2, [pc, #120]	; (80061b4 <low_level_init+0x1a4>)
 800613c:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800613e:	4b1e      	ldr	r3, [pc, #120]	; (80061b8 <low_level_init+0x1a8>)
 8006140:	f107 040c 	add.w	r4, r7, #12
 8006144:	461d      	mov	r5, r3
 8006146:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800614a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800614e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8006152:	f107 030c 	add.w	r3, r7, #12
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	4618      	mov	r0, r3
 800615a:	f000 faae 	bl	80066ba <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800615e:	480f      	ldr	r0, [pc, #60]	; (800619c <low_level_init+0x18c>)
 8006160:	f7fc fabd 	bl	80026de <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8006164:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006168:	461a      	mov	r2, r3
 800616a:	211d      	movs	r1, #29
 800616c:	480b      	ldr	r0, [pc, #44]	; (800619c <low_level_init+0x18c>)
 800616e:	f7fc f9e8 	bl	8002542 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006174:	f043 030b 	orr.w	r3, r3, #11
 8006178:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800617a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617c:	461a      	mov	r2, r3
 800617e:	211d      	movs	r1, #29
 8006180:	4806      	ldr	r0, [pc, #24]	; (800619c <low_level_init+0x18c>)
 8006182:	f7fc fa46 	bl	8002612 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006186:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800618a:	461a      	mov	r2, r3
 800618c:	211d      	movs	r1, #29
 800618e:	4803      	ldr	r0, [pc, #12]	; (800619c <low_level_init+0x18c>)
 8006190:	f7fc f9d7 	bl	8002542 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006194:	bf00      	nop
 8006196:	3740      	adds	r7, #64	; 0x40
 8006198:	46bd      	mov	sp, r7
 800619a:	bdb0      	pop	{r4, r5, r7, pc}
 800619c:	20008444 	.word	0x20008444
 80061a0:	40028000 	.word	0x40028000
 80061a4:	2000848c 	.word	0x2000848c
 80061a8:	20006b74 	.word	0x20006b74
 80061ac:	20006bf4 	.word	0x20006bf4
 80061b0:	200083c4 	.word	0x200083c4
 80061b4:	2000038c 	.word	0x2000038c
 80061b8:	08017a60 	.word	0x08017a60

080061bc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b08a      	sub	sp, #40	; 0x28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80061c6:	4b4b      	ldr	r3, [pc, #300]	; (80062f4 <low_level_output+0x138>)
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80061d2:	2300      	movs	r3, #0
 80061d4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80061da:	2300      	movs	r3, #0
 80061dc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80061de:	4b45      	ldr	r3, [pc, #276]	; (80062f4 <low_level_output+0x138>)
 80061e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80061e4:	2300      	movs	r3, #0
 80061e6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	623b      	str	r3, [r7, #32]
 80061ec:	e05a      	b.n	80062a4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	da03      	bge.n	80061fe <low_level_output+0x42>
      {
        errval = ERR_USE;
 80061f6:	23f8      	movs	r3, #248	; 0xf8
 80061f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80061fc:	e05c      	b.n	80062b8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	895b      	ldrh	r3, [r3, #10]
 8006202:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8006204:	2300      	movs	r3, #0
 8006206:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006208:	e02f      	b.n	800626a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800620a:	69fa      	ldr	r2, [r7, #28]
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	18d0      	adds	r0, r2, r3
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	18d1      	adds	r1, r2, r3
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800621e:	3304      	adds	r3, #4
 8006220:	461a      	mov	r2, r3
 8006222:	f010 fc4f 	bl	8016ac4 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	da03      	bge.n	800623c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8006234:	23f8      	movs	r3, #248	; 0xf8
 8006236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800623a:	e03d      	b.n	80062b8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4413      	add	r3, r2
 8006248:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800624c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006258:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006264:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8006266:	2300      	movs	r3, #0
 8006268:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	4413      	add	r3, r2
 8006270:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006274:	4293      	cmp	r3, r2
 8006276:	d8c8      	bhi.n	800620a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006278:	69fa      	ldr	r2, [r7, #28]
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	18d0      	adds	r0, r2, r3
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	4413      	add	r3, r2
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	4619      	mov	r1, r3
 800628a:	f010 fc1b 	bl	8016ac4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4413      	add	r3, r2
 8006294:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4413      	add	r3, r2
 800629c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	623b      	str	r3, [r7, #32]
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1a1      	bne.n	80061ee <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80062aa:	6979      	ldr	r1, [r7, #20]
 80062ac:	4811      	ldr	r0, [pc, #68]	; (80062f4 <low_level_output+0x138>)
 80062ae:	f7fb ff5b 	bl	8002168 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80062b8:	4b0e      	ldr	r3, [pc, #56]	; (80062f4 <low_level_output+0x138>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062c0:	3314      	adds	r3, #20
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0320 	and.w	r3, r3, #32
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00d      	beq.n	80062e8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80062cc:	4b09      	ldr	r3, [pc, #36]	; (80062f4 <low_level_output+0x138>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d4:	3314      	adds	r3, #20
 80062d6:	2220      	movs	r2, #32
 80062d8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80062da:	4b06      	ldr	r3, [pc, #24]	; (80062f4 <low_level_output+0x138>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062e2:	3304      	adds	r3, #4
 80062e4:	2200      	movs	r2, #0
 80062e6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80062e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3728      	adds	r7, #40	; 0x28
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	20008444 	.word	0x20008444

080062f8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08c      	sub	sp, #48	; 0x30
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006300:	2300      	movs	r3, #0
 8006302:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8006304:	2300      	movs	r3, #0
 8006306:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8006308:	2300      	movs	r3, #0
 800630a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800630c:	2300      	movs	r3, #0
 800630e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006310:	2300      	movs	r3, #0
 8006312:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8006314:	2300      	movs	r3, #0
 8006316:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8006318:	2300      	movs	r3, #0
 800631a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800631c:	484f      	ldr	r0, [pc, #316]	; (800645c <low_level_input+0x164>)
 800631e:	f7fc f80d 	bl	800233c <HAL_ETH_GetReceivedFrame_IT>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d001      	beq.n	800632c <low_level_input+0x34>

    return NULL;
 8006328:	2300      	movs	r3, #0
 800632a:	e092      	b.n	8006452 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800632c:	4b4b      	ldr	r3, [pc, #300]	; (800645c <low_level_input+0x164>)
 800632e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006330:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8006332:	4b4a      	ldr	r3, [pc, #296]	; (800645c <low_level_input+0x164>)
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8006338:	89fb      	ldrh	r3, [r7, #14]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d007      	beq.n	800634e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800633e:	89fb      	ldrh	r3, [r7, #14]
 8006340:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8006344:	4619      	mov	r1, r3
 8006346:	2000      	movs	r0, #0
 8006348:	f006 fa40 	bl	800c7cc <pbuf_alloc>
 800634c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006350:	2b00      	cmp	r3, #0
 8006352:	d04b      	beq.n	80063ec <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006354:	4b41      	ldr	r3, [pc, #260]	; (800645c <low_level_input+0x164>)
 8006356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006358:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800635a:	2300      	movs	r3, #0
 800635c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800635e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006360:	62bb      	str	r3, [r7, #40]	; 0x28
 8006362:	e040      	b.n	80063e6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	895b      	ldrh	r3, [r3, #10]
 8006368:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800636a:	2300      	movs	r3, #0
 800636c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800636e:	e021      	b.n	80063b4 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	18d0      	adds	r0, r2, r3
 8006378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	18d1      	adds	r1, r2, r3
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8006384:	3304      	adds	r3, #4
 8006386:	461a      	mov	r2, r3
 8006388:	f010 fb9c 	bl	8016ac4 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006398:	69fa      	ldr	r2, [r7, #28]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	4413      	add	r3, r2
 800639e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80063a2:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80063ae:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80063b0:	2300      	movs	r3, #0
 80063b2:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	4413      	add	r3, r2
 80063ba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80063be:	4293      	cmp	r3, r2
 80063c0:	d8d6      	bhi.n	8006370 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80063c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	18d0      	adds	r0, r2, r3
 80063ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	4413      	add	r3, r2
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4619      	mov	r1, r3
 80063d4:	f010 fb76 	bl	8016ac4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80063d8:	69fa      	ldr	r2, [r7, #28]
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	4413      	add	r3, r2
 80063de:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80063e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80063e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1bb      	bne.n	8006364 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80063ec:	4b1b      	ldr	r3, [pc, #108]	; (800645c <low_level_input+0x164>)
 80063ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80063f2:	2300      	movs	r3, #0
 80063f4:	613b      	str	r3, [r7, #16]
 80063f6:	e00b      	b.n	8006410 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006400:	6a3b      	ldr	r3, [r7, #32]
 8006402:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	3301      	adds	r3, #1
 800640e:	613b      	str	r3, [r7, #16]
 8006410:	4b12      	ldr	r3, [pc, #72]	; (800645c <low_level_input+0x164>)
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	429a      	cmp	r2, r3
 8006418:	d3ee      	bcc.n	80063f8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800641a:	4b10      	ldr	r3, [pc, #64]	; (800645c <low_level_input+0x164>)
 800641c:	2200      	movs	r2, #0
 800641e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8006420:	4b0e      	ldr	r3, [pc, #56]	; (800645c <low_level_input+0x164>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006428:	3314      	adds	r3, #20
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00d      	beq.n	8006450 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8006434:	4b09      	ldr	r3, [pc, #36]	; (800645c <low_level_input+0x164>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800643c:	3314      	adds	r3, #20
 800643e:	2280      	movs	r2, #128	; 0x80
 8006440:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8006442:	4b06      	ldr	r3, [pc, #24]	; (800645c <low_level_input+0x164>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800644a:	3308      	adds	r3, #8
 800644c:	2200      	movs	r2, #0
 800644e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8006450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006452:	4618      	mov	r0, r3
 8006454:	3730      	adds	r7, #48	; 0x30
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	20008444 	.word	0x20008444

08006460 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800646c:	4b12      	ldr	r3, [pc, #72]	; (80064b8 <ethernetif_input+0x58>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f04f 31ff 	mov.w	r1, #4294967295
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fa4f 	bl	8006918 <osSemaphoreWait>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1f5      	bne.n	800646c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8006480:	480e      	ldr	r0, [pc, #56]	; (80064bc <ethernetif_input+0x5c>)
 8006482:	f010 f98f 	bl	80167a4 <sys_mutex_lock>
        p = low_level_input( netif );
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f7ff ff36 	bl	80062f8 <low_level_input>
 800648c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00a      	beq.n	80064aa <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	68f9      	ldr	r1, [r7, #12]
 800649a:	68b8      	ldr	r0, [r7, #8]
 800649c:	4798      	blx	r3
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80064a4:	68b8      	ldr	r0, [r7, #8]
 80064a6:	f006 fc75 	bl	800cd94 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80064aa:	4804      	ldr	r0, [pc, #16]	; (80064bc <ethernetif_input+0x5c>)
 80064ac:	f010 f989 	bl	80167c2 <sys_mutex_unlock>
      } while(p!=NULL);
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1e4      	bne.n	8006480 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80064b6:	e7d9      	b.n	800646c <ethernetif_input+0xc>
 80064b8:	2000038c 	.word	0x2000038c
 80064bc:	20009c9c 	.word	0x20009c9c

080064c0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d106      	bne.n	80064dc <ethernetif_init+0x1c>
 80064ce:	4b0e      	ldr	r3, [pc, #56]	; (8006508 <ethernetif_init+0x48>)
 80064d0:	f44f 720b 	mov.w	r2, #556	; 0x22c
 80064d4:	490d      	ldr	r1, [pc, #52]	; (800650c <ethernetif_init+0x4c>)
 80064d6:	480e      	ldr	r0, [pc, #56]	; (8006510 <ethernetif_init+0x50>)
 80064d8:	f010 fbb4 	bl	8016c44 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2273      	movs	r2, #115	; 0x73
 80064e0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2274      	movs	r2, #116	; 0x74
 80064e8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a09      	ldr	r2, [pc, #36]	; (8006514 <ethernetif_init+0x54>)
 80064f0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a08      	ldr	r2, [pc, #32]	; (8006518 <ethernetif_init+0x58>)
 80064f6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7ff fd89 	bl	8006010 <low_level_init>

  return ERR_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	08017a7c 	.word	0x08017a7c
 800650c:	08017a98 	.word	0x08017a98
 8006510:	08017aa8 	.word	0x08017aa8
 8006514:	080147b9 	.word	0x080147b9
 8006518:	080061bd 	.word	0x080061bd

0800651c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006520:	f7fb fa0c 	bl	800193c <HAL_GetTick>
 8006524:	4603      	mov	r3, r0
}
 8006526:	4618      	mov	r0, r3
 8006528:	bd80      	pop	{r7, pc}
	...

0800652c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8006534:	2300      	movs	r3, #0
 8006536:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8006538:	2300      	movs	r3, #0
 800653a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006542:	089b      	lsrs	r3, r3, #2
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d05d      	beq.n	800660a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800654e:	4b34      	ldr	r3, [pc, #208]	; (8006620 <ethernetif_update_config+0xf4>)
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d03f      	beq.n	80065d6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8006556:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800655a:	2100      	movs	r1, #0
 800655c:	4830      	ldr	r0, [pc, #192]	; (8006620 <ethernetif_update_config+0xf4>)
 800655e:	f7fc f858 	bl	8002612 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8006562:	f7fb f9eb 	bl	800193c <HAL_GetTick>
 8006566:	4603      	mov	r3, r0
 8006568:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800656a:	f107 0308 	add.w	r3, r7, #8
 800656e:	461a      	mov	r2, r3
 8006570:	2101      	movs	r1, #1
 8006572:	482b      	ldr	r0, [pc, #172]	; (8006620 <ethernetif_update_config+0xf4>)
 8006574:	f7fb ffe5 	bl	8002542 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8006578:	f7fb f9e0 	bl	800193c <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006586:	d828      	bhi.n	80065da <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f003 0320 	and.w	r3, r3, #32
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0eb      	beq.n	800656a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8006592:	f107 0308 	add.w	r3, r7, #8
 8006596:	461a      	mov	r2, r3
 8006598:	2110      	movs	r1, #16
 800659a:	4821      	ldr	r0, [pc, #132]	; (8006620 <ethernetif_update_config+0xf4>)
 800659c:	f7fb ffd1 	bl	8002542 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f003 0304 	and.w	r3, r3, #4
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d004      	beq.n	80065b4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80065aa:	4b1d      	ldr	r3, [pc, #116]	; (8006620 <ethernetif_update_config+0xf4>)
 80065ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065b0:	60da      	str	r2, [r3, #12]
 80065b2:	e002      	b.n	80065ba <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80065b4:	4b1a      	ldr	r3, [pc, #104]	; (8006620 <ethernetif_update_config+0xf4>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80065c4:	4b16      	ldr	r3, [pc, #88]	; (8006620 <ethernetif_update_config+0xf4>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	609a      	str	r2, [r3, #8]
 80065ca:	e016      	b.n	80065fa <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80065cc:	4b14      	ldr	r3, [pc, #80]	; (8006620 <ethernetif_update_config+0xf4>)
 80065ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80065d2:	609a      	str	r2, [r3, #8]
 80065d4:	e011      	b.n	80065fa <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80065d6:	bf00      	nop
 80065d8:	e000      	b.n	80065dc <ethernetif_update_config+0xb0>
          goto error;
 80065da:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80065dc:	4b10      	ldr	r3, [pc, #64]	; (8006620 <ethernetif_update_config+0xf4>)
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	08db      	lsrs	r3, r3, #3
 80065e2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80065e4:	4b0e      	ldr	r3, [pc, #56]	; (8006620 <ethernetif_update_config+0xf4>)
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	085b      	lsrs	r3, r3, #1
 80065ea:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80065ec:	4313      	orrs	r3, r2
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	461a      	mov	r2, r3
 80065f2:	2100      	movs	r1, #0
 80065f4:	480a      	ldr	r0, [pc, #40]	; (8006620 <ethernetif_update_config+0xf4>)
 80065f6:	f7fc f80c 	bl	8002612 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80065fa:	2100      	movs	r1, #0
 80065fc:	4808      	ldr	r0, [pc, #32]	; (8006620 <ethernetif_update_config+0xf4>)
 80065fe:	f7fc f8cd 	bl	800279c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8006602:	4807      	ldr	r0, [pc, #28]	; (8006620 <ethernetif_update_config+0xf4>)
 8006604:	f7fc f86b 	bl	80026de <HAL_ETH_Start>
 8006608:	e002      	b.n	8006610 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800660a:	4805      	ldr	r0, [pc, #20]	; (8006620 <ethernetif_update_config+0xf4>)
 800660c:	f7fc f896 	bl	800273c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f807 	bl	8006624 <ethernetif_notify_conn_changed>
}
 8006616:	bf00      	nop
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20008444 	.word	0x20008444

08006624 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	4603      	mov	r3, r0
 8006640:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006642:	2300      	movs	r3, #0
 8006644:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800664a:	2b84      	cmp	r3, #132	; 0x84
 800664c:	d005      	beq.n	800665a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800664e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4413      	add	r3, r2
 8006656:	3303      	adds	r3, #3
 8006658:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800665a:	68fb      	ldr	r3, [r7, #12]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800666e:	f3ef 8305 	mrs	r3, IPSR
 8006672:	607b      	str	r3, [r7, #4]
  return(result);
 8006674:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006676:	2b00      	cmp	r3, #0
 8006678:	bf14      	ite	ne
 800667a:	2301      	movne	r3, #1
 800667c:	2300      	moveq	r3, #0
 800667e:	b2db      	uxtb	r3, r3
}
 8006680:	4618      	mov	r0, r3
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006690:	f001 fd3c 	bl	800810c <vTaskStartScheduler>
  
  return osOK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	bd80      	pop	{r7, pc}

0800669a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800669e:	f7ff ffe3 	bl	8006668 <inHandlerMode>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d003      	beq.n	80066b0 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80066a8:	f001 fe54 	bl	8008354 <xTaskGetTickCountFromISR>
 80066ac:	4603      	mov	r3, r0
 80066ae:	e002      	b.n	80066b6 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80066b0:	f001 fe40 	bl	8008334 <xTaskGetTickCount>
 80066b4:	4603      	mov	r3, r0
  }
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	bd80      	pop	{r7, pc}

080066ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80066ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066bc:	b089      	sub	sp, #36	; 0x24
 80066be:	af04      	add	r7, sp, #16
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d020      	beq.n	800670e <osThreadCreate+0x54>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d01c      	beq.n	800670e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685c      	ldr	r4, [r3, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681d      	ldr	r5, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	691e      	ldr	r6, [r3, #16]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff ffa6 	bl	8006638 <makeFreeRtosPriority>
 80066ec:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066f6:	9202      	str	r2, [sp, #8]
 80066f8:	9301      	str	r3, [sp, #4]
 80066fa:	9100      	str	r1, [sp, #0]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	4632      	mov	r2, r6
 8006700:	4629      	mov	r1, r5
 8006702:	4620      	mov	r0, r4
 8006704:	f001 fb24 	bl	8007d50 <xTaskCreateStatic>
 8006708:	4603      	mov	r3, r0
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	e01c      	b.n	8006748 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685c      	ldr	r4, [r3, #4]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800671a:	b29e      	uxth	r6, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006722:	4618      	mov	r0, r3
 8006724:	f7ff ff88 	bl	8006638 <makeFreeRtosPriority>
 8006728:	4602      	mov	r2, r0
 800672a:	f107 030c 	add.w	r3, r7, #12
 800672e:	9301      	str	r3, [sp, #4]
 8006730:	9200      	str	r2, [sp, #0]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	4632      	mov	r2, r6
 8006736:	4629      	mov	r1, r5
 8006738:	4620      	mov	r0, r4
 800673a:	f001 fb66 	bl	8007e0a <xTaskCreate>
 800673e:	4603      	mov	r3, r0
 8006740:	2b01      	cmp	r3, #1
 8006742:	d001      	beq.n	8006748 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006744:	2300      	movs	r3, #0
 8006746:	e000      	b.n	800674a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006748:	68fb      	ldr	r3, [r7, #12]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006752 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <osDelay+0x16>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	e000      	b.n	800676a <osDelay+0x18>
 8006768:	2301      	movs	r3, #1
 800676a:	4618      	mov	r0, r3
 800676c:	f001 fc9a 	bl	80080a4 <vTaskDelay>
  
  return osOK;
 8006770:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b082      	sub	sp, #8
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d007      	beq.n	800679a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	4619      	mov	r1, r3
 8006790:	2001      	movs	r0, #1
 8006792:	f000 fc7e 	bl	8007092 <xQueueCreateMutexStatic>
 8006796:	4603      	mov	r3, r0
 8006798:	e003      	b.n	80067a2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800679a:	2001      	movs	r0, #1
 800679c:	f000 fc61 	bl	8007062 <xQueueCreateMutex>
 80067a0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
	...

080067ac <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80067b6:	2300      	movs	r3, #0
 80067b8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <osMutexWait+0x18>
    return osErrorParameter;
 80067c0:	2380      	movs	r3, #128	; 0x80
 80067c2:	e03a      	b.n	800683a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80067c4:	2300      	movs	r3, #0
 80067c6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ce:	d103      	bne.n	80067d8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80067d0:	f04f 33ff 	mov.w	r3, #4294967295
 80067d4:	60fb      	str	r3, [r7, #12]
 80067d6:	e009      	b.n	80067ec <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d006      	beq.n	80067ec <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <osMutexWait+0x40>
      ticks = 1;
 80067e8:	2301      	movs	r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80067ec:	f7ff ff3c 	bl	8006668 <inHandlerMode>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d017      	beq.n	8006826 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80067f6:	f107 0308 	add.w	r3, r7, #8
 80067fa:	461a      	mov	r2, r3
 80067fc:	2100      	movs	r1, #0
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f001 f874 	bl	80078ec <xQueueReceiveFromISR>
 8006804:	4603      	mov	r3, r0
 8006806:	2b01      	cmp	r3, #1
 8006808:	d001      	beq.n	800680e <osMutexWait+0x62>
      return osErrorOS;
 800680a:	23ff      	movs	r3, #255	; 0xff
 800680c:	e015      	b.n	800683a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d011      	beq.n	8006838 <osMutexWait+0x8c>
 8006814:	4b0b      	ldr	r3, [pc, #44]	; (8006844 <osMutexWait+0x98>)
 8006816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800681a:	601a      	str	r2, [r3, #0]
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	e008      	b.n	8006838 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006826:	68f9      	ldr	r1, [r7, #12]
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 ff53 	bl	80076d4 <xQueueSemaphoreTake>
 800682e:	4603      	mov	r3, r0
 8006830:	2b01      	cmp	r3, #1
 8006832:	d001      	beq.n	8006838 <osMutexWait+0x8c>
    return osErrorOS;
 8006834:	23ff      	movs	r3, #255	; 0xff
 8006836:	e000      	b.n	800683a <osMutexWait+0x8e>
  }
  
  return osOK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	e000ed04 	.word	0xe000ed04

08006848 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006850:	2300      	movs	r3, #0
 8006852:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006854:	2300      	movs	r3, #0
 8006856:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006858:	f7ff ff06 	bl	8006668 <inHandlerMode>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d016      	beq.n	8006890 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006862:	f107 0308 	add.w	r3, r7, #8
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fdc6 	bl	80073fa <xQueueGiveFromISR>
 800686e:	4603      	mov	r3, r0
 8006870:	2b01      	cmp	r3, #1
 8006872:	d001      	beq.n	8006878 <osMutexRelease+0x30>
      return osErrorOS;
 8006874:	23ff      	movs	r3, #255	; 0xff
 8006876:	e017      	b.n	80068a8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d013      	beq.n	80068a6 <osMutexRelease+0x5e>
 800687e:	4b0c      	ldr	r3, [pc, #48]	; (80068b0 <osMutexRelease+0x68>)
 8006880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	e00a      	b.n	80068a6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006890:	2300      	movs	r3, #0
 8006892:	2200      	movs	r2, #0
 8006894:	2100      	movs	r1, #0
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fc16 	bl	80070c8 <xQueueGenericSend>
 800689c:	4603      	mov	r3, r0
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d001      	beq.n	80068a6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80068a2:	23ff      	movs	r3, #255	; 0xff
 80068a4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80068a6:	68fb      	ldr	r3, [r7, #12]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	e000ed04 	.word	0xe000ed04

080068b4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af02      	add	r7, sp, #8
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00f      	beq.n	80068e6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d10a      	bne.n	80068e2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	2203      	movs	r2, #3
 80068d2:	9200      	str	r2, [sp, #0]
 80068d4:	2200      	movs	r2, #0
 80068d6:	2100      	movs	r1, #0
 80068d8:	2001      	movs	r0, #1
 80068da:	f000 fad7 	bl	8006e8c <xQueueGenericCreateStatic>
 80068de:	4603      	mov	r3, r0
 80068e0:	e016      	b.n	8006910 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80068e2:	2300      	movs	r3, #0
 80068e4:	e014      	b.n	8006910 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d110      	bne.n	800690e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80068ec:	2203      	movs	r2, #3
 80068ee:	2100      	movs	r1, #0
 80068f0:	2001      	movs	r0, #1
 80068f2:	f000 fb43 	bl	8006f7c <xQueueGenericCreate>
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d005      	beq.n	800690a <osSemaphoreCreate+0x56>
 80068fe:	2300      	movs	r3, #0
 8006900:	2200      	movs	r2, #0
 8006902:	2100      	movs	r1, #0
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f000 fbdf 	bl	80070c8 <xQueueGenericSend>
      return sema;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	e000      	b.n	8006910 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800690e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006922:	2300      	movs	r3, #0
 8006924:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d101      	bne.n	8006930 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800692c:	2380      	movs	r3, #128	; 0x80
 800692e:	e03a      	b.n	80069a6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006930:	2300      	movs	r3, #0
 8006932:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693a:	d103      	bne.n	8006944 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800693c:	f04f 33ff 	mov.w	r3, #4294967295
 8006940:	60fb      	str	r3, [r7, #12]
 8006942:	e009      	b.n	8006958 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d006      	beq.n	8006958 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <osSemaphoreWait+0x40>
      ticks = 1;
 8006954:	2301      	movs	r3, #1
 8006956:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006958:	f7ff fe86 	bl	8006668 <inHandlerMode>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d017      	beq.n	8006992 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006962:	f107 0308 	add.w	r3, r7, #8
 8006966:	461a      	mov	r2, r3
 8006968:	2100      	movs	r1, #0
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 ffbe 	bl	80078ec <xQueueReceiveFromISR>
 8006970:	4603      	mov	r3, r0
 8006972:	2b01      	cmp	r3, #1
 8006974:	d001      	beq.n	800697a <osSemaphoreWait+0x62>
      return osErrorOS;
 8006976:	23ff      	movs	r3, #255	; 0xff
 8006978:	e015      	b.n	80069a6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d011      	beq.n	80069a4 <osSemaphoreWait+0x8c>
 8006980:	4b0b      	ldr	r3, [pc, #44]	; (80069b0 <osSemaphoreWait+0x98>)
 8006982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006986:	601a      	str	r2, [r3, #0]
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	e008      	b.n	80069a4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006992:	68f9      	ldr	r1, [r7, #12]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fe9d 	bl	80076d4 <xQueueSemaphoreTake>
 800699a:	4603      	mov	r3, r0
 800699c:	2b01      	cmp	r3, #1
 800699e:	d001      	beq.n	80069a4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80069a0:	23ff      	movs	r3, #255	; 0xff
 80069a2:	e000      	b.n	80069a6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	e000ed04 	.word	0xe000ed04

080069b4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80069c0:	2300      	movs	r3, #0
 80069c2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80069c4:	f7ff fe50 	bl	8006668 <inHandlerMode>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d016      	beq.n	80069fc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80069ce:	f107 0308 	add.w	r3, r7, #8
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fd10 	bl	80073fa <xQueueGiveFromISR>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d001      	beq.n	80069e4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80069e0:	23ff      	movs	r3, #255	; 0xff
 80069e2:	e017      	b.n	8006a14 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d013      	beq.n	8006a12 <osSemaphoreRelease+0x5e>
 80069ea:	4b0c      	ldr	r3, [pc, #48]	; (8006a1c <osSemaphoreRelease+0x68>)
 80069ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	e00a      	b.n	8006a12 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80069fc:	2300      	movs	r3, #0
 80069fe:	2200      	movs	r2, #0
 8006a00:	2100      	movs	r1, #0
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fb60 	bl	80070c8 <xQueueGenericSend>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d001      	beq.n	8006a12 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006a0e:	23ff      	movs	r3, #255	; 0xff
 8006a10:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006a12:	68fb      	ldr	r3, [r7, #12]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	e000ed04 	.word	0xe000ed04

08006a20 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006a28:	f7ff fe1e 	bl	8006668 <inHandlerMode>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d001      	beq.n	8006a36 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8006a32:	2382      	movs	r3, #130	; 0x82
 8006a34:	e003      	b.n	8006a3e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f001 f814 	bl	8007a64 <vQueueDelete>

  return osOK; 
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006a46:	b590      	push	{r4, r7, lr}
 8006a48:	b085      	sub	sp, #20
 8006a4a:	af02      	add	r7, sp, #8
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d011      	beq.n	8006a7c <osMessageCreate+0x36>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00d      	beq.n	8006a7c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6818      	ldr	r0, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6859      	ldr	r1, [r3, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689a      	ldr	r2, [r3, #8]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	2400      	movs	r4, #0
 8006a72:	9400      	str	r4, [sp, #0]
 8006a74:	f000 fa0a 	bl	8006e8c <xQueueGenericCreateStatic>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	e008      	b.n	8006a8e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6818      	ldr	r0, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	4619      	mov	r1, r3
 8006a88:	f000 fa78 	bl	8006f7c <xQueueGenericCreate>
 8006a8c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd90      	pop	{r4, r7, pc}
	...

08006a98 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <osMessagePut+0x1e>
    ticks = 1;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006ab6:	f7ff fdd7 	bl	8006668 <inHandlerMode>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d018      	beq.n	8006af2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006ac0:	f107 0210 	add.w	r2, r7, #16
 8006ac4:	f107 0108 	add.w	r1, r7, #8
 8006ac8:	2300      	movs	r3, #0
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 fbfa 	bl	80072c4 <xQueueGenericSendFromISR>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d001      	beq.n	8006ada <osMessagePut+0x42>
      return osErrorOS;
 8006ad6:	23ff      	movs	r3, #255	; 0xff
 8006ad8:	e018      	b.n	8006b0c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d014      	beq.n	8006b0a <osMessagePut+0x72>
 8006ae0:	4b0c      	ldr	r3, [pc, #48]	; (8006b14 <osMessagePut+0x7c>)
 8006ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	e00b      	b.n	8006b0a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006af2:	f107 0108 	add.w	r1, r7, #8
 8006af6:	2300      	movs	r3, #0
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 fae4 	bl	80070c8 <xQueueGenericSend>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d001      	beq.n	8006b0a <osMessagePut+0x72>
      return osErrorOS;
 8006b06:	23ff      	movs	r3, #255	; 0xff
 8006b08:	e000      	b.n	8006b0c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3718      	adds	r7, #24
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	e000ed04 	.word	0xe000ed04

08006b18 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006b18:	b590      	push	{r4, r7, lr}
 8006b1a:	b08b      	sub	sp, #44	; 0x2c
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10a      	bne.n	8006b48 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006b32:	2380      	movs	r3, #128	; 0x80
 8006b34:	617b      	str	r3, [r7, #20]
    return event;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	461c      	mov	r4, r3
 8006b3a:	f107 0314 	add.w	r3, r7, #20
 8006b3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006b42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006b46:	e054      	b.n	8006bf2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b56:	d103      	bne.n	8006b60 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006b58:	f04f 33ff 	mov.w	r3, #4294967295
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b5e:	e009      	b.n	8006b74 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d006      	beq.n	8006b74 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <osMessageGet+0x5c>
      ticks = 1;
 8006b70:	2301      	movs	r3, #1
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006b74:	f7ff fd78 	bl	8006668 <inHandlerMode>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d01c      	beq.n	8006bb8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006b7e:	f107 0220 	add.w	r2, r7, #32
 8006b82:	f107 0314 	add.w	r3, r7, #20
 8006b86:	3304      	adds	r3, #4
 8006b88:	4619      	mov	r1, r3
 8006b8a:	68b8      	ldr	r0, [r7, #8]
 8006b8c:	f000 feae 	bl	80078ec <xQueueReceiveFromISR>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d102      	bne.n	8006b9c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006b96:	2310      	movs	r3, #16
 8006b98:	617b      	str	r3, [r7, #20]
 8006b9a:	e001      	b.n	8006ba0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d01d      	beq.n	8006be2 <osMessageGet+0xca>
 8006ba6:	4b15      	ldr	r3, [pc, #84]	; (8006bfc <osMessageGet+0xe4>)
 8006ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	e014      	b.n	8006be2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006bb8:	f107 0314 	add.w	r3, r7, #20
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	68b8      	ldr	r0, [r7, #8]
 8006bc4:	f000 fca6 	bl	8007514 <xQueueReceive>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d102      	bne.n	8006bd4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006bce:	2310      	movs	r3, #16
 8006bd0:	617b      	str	r3, [r7, #20]
 8006bd2:	e006      	b.n	8006be2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <osMessageGet+0xc6>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	e000      	b.n	8006be0 <osMessageGet+0xc8>
 8006bde:	2340      	movs	r3, #64	; 0x40
 8006be0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	461c      	mov	r4, r3
 8006be6:	f107 0314 	add.w	r3, r7, #20
 8006bea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006bee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	372c      	adds	r7, #44	; 0x2c
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd90      	pop	{r4, r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	e000ed04 	.word	0xe000ed04

08006c00 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006c08:	f7ff fd2e 	bl	8006668 <inHandlerMode>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d004      	beq.n	8006c1c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 ff08 	bl	8007a28 <uxQueueMessagesWaitingFromISR>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	e003      	b.n	8006c24 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fee5 	bl	80079ec <uxQueueMessagesWaiting>
 8006c22:	4603      	mov	r3, r0
  }
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006c34:	f7ff fd18 	bl	8006668 <inHandlerMode>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <osMessageDelete+0x16>
    return osErrorISR;
 8006c3e:	2382      	movs	r3, #130	; 0x82
 8006c40:	e003      	b.n	8006c4a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 ff0e 	bl	8007a64 <vQueueDelete>

  return osOK; 
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c52:	b480      	push	{r7}
 8006c54:	b083      	sub	sp, #12
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f103 0208 	add.w	r2, r3, #8
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f04f 32ff 	mov.w	r2, #4294967295
 8006c6a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f103 0208 	add.w	r2, r3, #8
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f103 0208 	add.w	r2, r3, #8
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006c86:	bf00      	nop
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	601a      	str	r2, [r3, #0]
}
 8006ce8:	bf00      	nop
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0a:	d103      	bne.n	8006d14 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	e00c      	b.n	8006d2e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3308      	adds	r3, #8
 8006d18:	60fb      	str	r3, [r7, #12]
 8006d1a:	e002      	b.n	8006d22 <vListInsert+0x2e>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	60fb      	str	r3, [r7, #12]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d2f6      	bcs.n	8006d1c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	601a      	str	r2, [r3, #0]
}
 8006d5a:	bf00      	nop
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006d66:	b480      	push	{r7}
 8006d68:	b085      	sub	sp, #20
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	6892      	ldr	r2, [r2, #8]
 8006d7c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	6852      	ldr	r2, [r2, #4]
 8006d86:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d103      	bne.n	8006d9a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689a      	ldr	r2, [r3, #8]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	1e5a      	subs	r2, r3, #1
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
	...

08006dbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10a      	bne.n	8006de6 <xQueueGenericReset+0x2a>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	60bb      	str	r3, [r7, #8]
}
 8006de2:	bf00      	nop
 8006de4:	e7fe      	b.n	8006de4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006de6:	f002 f915 	bl	8009014 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df2:	68f9      	ldr	r1, [r7, #12]
 8006df4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006df6:	fb01 f303 	mul.w	r3, r1, r3
 8006dfa:	441a      	add	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e16:	3b01      	subs	r3, #1
 8006e18:	68f9      	ldr	r1, [r7, #12]
 8006e1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e1c:	fb01 f303 	mul.w	r3, r1, r3
 8006e20:	441a      	add	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	22ff      	movs	r2, #255	; 0xff
 8006e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	22ff      	movs	r2, #255	; 0xff
 8006e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d114      	bne.n	8006e66 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d01a      	beq.n	8006e7a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	3310      	adds	r3, #16
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f001 fbd3 	bl	80085f4 <xTaskRemoveFromEventList>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d012      	beq.n	8006e7a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e54:	4b0c      	ldr	r3, [pc, #48]	; (8006e88 <xQueueGenericReset+0xcc>)
 8006e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	e009      	b.n	8006e7a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3310      	adds	r3, #16
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7ff fef1 	bl	8006c52 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	3324      	adds	r3, #36	; 0x24
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7ff feec 	bl	8006c52 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006e7a:	f002 f8fb 	bl	8009074 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006e7e:	2301      	movs	r3, #1
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	e000ed04 	.word	0xe000ed04

08006e8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08e      	sub	sp, #56	; 0x38
 8006e90:	af02      	add	r7, sp, #8
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
 8006e98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10a      	bne.n	8006eb6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006eb2:	bf00      	nop
 8006eb4:	e7fe      	b.n	8006eb4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10a      	bne.n	8006ed2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ece:	bf00      	nop
 8006ed0:	e7fe      	b.n	8006ed0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <xQueueGenericCreateStatic+0x52>
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <xQueueGenericCreateStatic+0x56>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e000      	b.n	8006ee4 <xQueueGenericCreateStatic+0x58>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10a      	bne.n	8006efe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	623b      	str	r3, [r7, #32]
}
 8006efa:	bf00      	nop
 8006efc:	e7fe      	b.n	8006efc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d102      	bne.n	8006f0a <xQueueGenericCreateStatic+0x7e>
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <xQueueGenericCreateStatic+0x82>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e000      	b.n	8006f10 <xQueueGenericCreateStatic+0x84>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10a      	bne.n	8006f2a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	61fb      	str	r3, [r7, #28]
}
 8006f26:	bf00      	nop
 8006f28:	e7fe      	b.n	8006f28 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f2a:	2348      	movs	r3, #72	; 0x48
 8006f2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2b48      	cmp	r3, #72	; 0x48
 8006f32:	d00a      	beq.n	8006f4a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	61bb      	str	r3, [r7, #24]
}
 8006f46:	bf00      	nop
 8006f48:	e7fe      	b.n	8006f48 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006f4a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00d      	beq.n	8006f72 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f5e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	4613      	mov	r3, r2
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	68b9      	ldr	r1, [r7, #8]
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 f83f 	bl	8006ff0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3730      	adds	r7, #48	; 0x30
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08a      	sub	sp, #40	; 0x28
 8006f80:	af02      	add	r7, sp, #8
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	4613      	mov	r3, r2
 8006f88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10a      	bne.n	8006fa6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	613b      	str	r3, [r7, #16]
}
 8006fa2:	bf00      	nop
 8006fa4:	e7fe      	b.n	8006fa4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	fb02 f303 	mul.w	r3, r2, r3
 8006fae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	3348      	adds	r3, #72	; 0x48
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f002 f94f 	bl	8009258 <pvPortMalloc>
 8006fba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d011      	beq.n	8006fe6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	3348      	adds	r3, #72	; 0x48
 8006fca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fd4:	79fa      	ldrb	r2, [r7, #7]
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	68b9      	ldr	r1, [r7, #8]
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 f805 	bl	8006ff0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fe6:	69bb      	ldr	r3, [r7, #24]
	}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3720      	adds	r7, #32
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
 8006ffc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d103      	bne.n	800700c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	69ba      	ldr	r2, [r7, #24]
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	e002      	b.n	8007012 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800701e:	2101      	movs	r1, #1
 8007020:	69b8      	ldr	r0, [r7, #24]
 8007022:	f7ff fecb 	bl	8006dbc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007026:	bf00      	nop
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800702e:	b580      	push	{r7, lr}
 8007030:	b082      	sub	sp, #8
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00e      	beq.n	800705a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800704e:	2300      	movs	r3, #0
 8007050:	2200      	movs	r2, #0
 8007052:	2100      	movs	r1, #0
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f837 	bl	80070c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800705a:	bf00      	nop
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007062:	b580      	push	{r7, lr}
 8007064:	b086      	sub	sp, #24
 8007066:	af00      	add	r7, sp, #0
 8007068:	4603      	mov	r3, r0
 800706a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800706c:	2301      	movs	r3, #1
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	2300      	movs	r3, #0
 8007072:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007074:	79fb      	ldrb	r3, [r7, #7]
 8007076:	461a      	mov	r2, r3
 8007078:	6939      	ldr	r1, [r7, #16]
 800707a:	6978      	ldr	r0, [r7, #20]
 800707c:	f7ff ff7e 	bl	8006f7c <xQueueGenericCreate>
 8007080:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f7ff ffd3 	bl	800702e <prvInitialiseMutex>

		return xNewQueue;
 8007088:	68fb      	ldr	r3, [r7, #12]
	}
 800708a:	4618      	mov	r0, r3
 800708c:	3718      	adds	r7, #24
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007092:	b580      	push	{r7, lr}
 8007094:	b088      	sub	sp, #32
 8007096:	af02      	add	r7, sp, #8
 8007098:	4603      	mov	r3, r0
 800709a:	6039      	str	r1, [r7, #0]
 800709c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800709e:	2301      	movs	r3, #1
 80070a0:	617b      	str	r3, [r7, #20]
 80070a2:	2300      	movs	r3, #0
 80070a4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80070a6:	79fb      	ldrb	r3, [r7, #7]
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2200      	movs	r2, #0
 80070ae:	6939      	ldr	r1, [r7, #16]
 80070b0:	6978      	ldr	r0, [r7, #20]
 80070b2:	f7ff feeb 	bl	8006e8c <xQueueGenericCreateStatic>
 80070b6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f7ff ffb8 	bl	800702e <prvInitialiseMutex>

		return xNewQueue;
 80070be:	68fb      	ldr	r3, [r7, #12]
	}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08e      	sub	sp, #56	; 0x38
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80070d6:	2300      	movs	r3, #0
 80070d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80070de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10a      	bne.n	80070fa <xQueueGenericSend+0x32>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070f6:	bf00      	nop
 80070f8:	e7fe      	b.n	80070f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d103      	bne.n	8007108 <xQueueGenericSend+0x40>
 8007100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007104:	2b00      	cmp	r3, #0
 8007106:	d101      	bne.n	800710c <xQueueGenericSend+0x44>
 8007108:	2301      	movs	r3, #1
 800710a:	e000      	b.n	800710e <xQueueGenericSend+0x46>
 800710c:	2300      	movs	r3, #0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10a      	bne.n	8007128 <xQueueGenericSend+0x60>
	__asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007124:	bf00      	nop
 8007126:	e7fe      	b.n	8007126 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	2b02      	cmp	r3, #2
 800712c:	d103      	bne.n	8007136 <xQueueGenericSend+0x6e>
 800712e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007132:	2b01      	cmp	r3, #1
 8007134:	d101      	bne.n	800713a <xQueueGenericSend+0x72>
 8007136:	2301      	movs	r3, #1
 8007138:	e000      	b.n	800713c <xQueueGenericSend+0x74>
 800713a:	2300      	movs	r3, #0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10a      	bne.n	8007156 <xQueueGenericSend+0x8e>
	__asm volatile
 8007140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	623b      	str	r3, [r7, #32]
}
 8007152:	bf00      	nop
 8007154:	e7fe      	b.n	8007154 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007156:	f001 fc0d 	bl	8008974 <xTaskGetSchedulerState>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d102      	bne.n	8007166 <xQueueGenericSend+0x9e>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <xQueueGenericSend+0xa2>
 8007166:	2301      	movs	r3, #1
 8007168:	e000      	b.n	800716c <xQueueGenericSend+0xa4>
 800716a:	2300      	movs	r3, #0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10a      	bne.n	8007186 <xQueueGenericSend+0xbe>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	61fb      	str	r3, [r7, #28]
}
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007186:	f001 ff45 	bl	8009014 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800718e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007192:	429a      	cmp	r2, r3
 8007194:	d302      	bcc.n	800719c <xQueueGenericSend+0xd4>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	2b02      	cmp	r3, #2
 800719a:	d129      	bne.n	80071f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	68b9      	ldr	r1, [r7, #8]
 80071a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071a2:	f000 fc9a 	bl	8007ada <prvCopyDataToQueue>
 80071a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d010      	beq.n	80071d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	3324      	adds	r3, #36	; 0x24
 80071b4:	4618      	mov	r0, r3
 80071b6:	f001 fa1d 	bl	80085f4 <xTaskRemoveFromEventList>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d013      	beq.n	80071e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80071c0:	4b3f      	ldr	r3, [pc, #252]	; (80072c0 <xQueueGenericSend+0x1f8>)
 80071c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071c6:	601a      	str	r2, [r3, #0]
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	e00a      	b.n	80071e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80071d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d007      	beq.n	80071e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80071d8:	4b39      	ldr	r3, [pc, #228]	; (80072c0 <xQueueGenericSend+0x1f8>)
 80071da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071de:	601a      	str	r2, [r3, #0]
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80071e8:	f001 ff44 	bl	8009074 <vPortExitCritical>
				return pdPASS;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e063      	b.n	80072b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d103      	bne.n	80071fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071f6:	f001 ff3d 	bl	8009074 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80071fa:	2300      	movs	r3, #0
 80071fc:	e05c      	b.n	80072b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007200:	2b00      	cmp	r3, #0
 8007202:	d106      	bne.n	8007212 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007204:	f107 0314 	add.w	r3, r7, #20
 8007208:	4618      	mov	r0, r3
 800720a:	f001 fa55 	bl	80086b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800720e:	2301      	movs	r3, #1
 8007210:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007212:	f001 ff2f 	bl	8009074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007216:	f000 ffe3 	bl	80081e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800721a:	f001 fefb 	bl	8009014 <vPortEnterCritical>
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007224:	b25b      	sxtb	r3, r3
 8007226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722a:	d103      	bne.n	8007234 <xQueueGenericSend+0x16c>
 800722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007236:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800723a:	b25b      	sxtb	r3, r3
 800723c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007240:	d103      	bne.n	800724a <xQueueGenericSend+0x182>
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800724a:	f001 ff13 	bl	8009074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800724e:	1d3a      	adds	r2, r7, #4
 8007250:	f107 0314 	add.w	r3, r7, #20
 8007254:	4611      	mov	r1, r2
 8007256:	4618      	mov	r0, r3
 8007258:	f001 fa44 	bl	80086e4 <xTaskCheckForTimeOut>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d124      	bne.n	80072ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007262:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007264:	f000 fd31 	bl	8007cca <prvIsQueueFull>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d018      	beq.n	80072a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800726e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007270:	3310      	adds	r3, #16
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	4611      	mov	r1, r2
 8007276:	4618      	mov	r0, r3
 8007278:	f001 f998 	bl	80085ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800727c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800727e:	f000 fcbc 	bl	8007bfa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007282:	f000 ffbb 	bl	80081fc <xTaskResumeAll>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	f47f af7c 	bne.w	8007186 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800728e:	4b0c      	ldr	r3, [pc, #48]	; (80072c0 <xQueueGenericSend+0x1f8>)
 8007290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	f3bf 8f6f 	isb	sy
 800729e:	e772      	b.n	8007186 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80072a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072a2:	f000 fcaa 	bl	8007bfa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072a6:	f000 ffa9 	bl	80081fc <xTaskResumeAll>
 80072aa:	e76c      	b.n	8007186 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80072ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072ae:	f000 fca4 	bl	8007bfa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072b2:	f000 ffa3 	bl	80081fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80072b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3738      	adds	r7, #56	; 0x38
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	e000ed04 	.word	0xe000ed04

080072c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b090      	sub	sp, #64	; 0x40
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
 80072d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80072d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10a      	bne.n	80072f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80072dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80072ee:	bf00      	nop
 80072f0:	e7fe      	b.n	80072f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d103      	bne.n	8007300 <xQueueGenericSendFromISR+0x3c>
 80072f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d101      	bne.n	8007304 <xQueueGenericSendFromISR+0x40>
 8007300:	2301      	movs	r3, #1
 8007302:	e000      	b.n	8007306 <xQueueGenericSendFromISR+0x42>
 8007304:	2300      	movs	r3, #0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10a      	bne.n	8007320 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800730a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730e:	f383 8811 	msr	BASEPRI, r3
 8007312:	f3bf 8f6f 	isb	sy
 8007316:	f3bf 8f4f 	dsb	sy
 800731a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800731c:	bf00      	nop
 800731e:	e7fe      	b.n	800731e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	2b02      	cmp	r3, #2
 8007324:	d103      	bne.n	800732e <xQueueGenericSendFromISR+0x6a>
 8007326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800732a:	2b01      	cmp	r3, #1
 800732c:	d101      	bne.n	8007332 <xQueueGenericSendFromISR+0x6e>
 800732e:	2301      	movs	r3, #1
 8007330:	e000      	b.n	8007334 <xQueueGenericSendFromISR+0x70>
 8007332:	2300      	movs	r3, #0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10a      	bne.n	800734e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	623b      	str	r3, [r7, #32]
}
 800734a:	bf00      	nop
 800734c:	e7fe      	b.n	800734c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800734e:	f001 ff43 	bl	80091d8 <vPortValidateInterruptPriority>
	__asm volatile
 8007352:	f3ef 8211 	mrs	r2, BASEPRI
 8007356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	61fa      	str	r2, [r7, #28]
 8007368:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800736a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800736c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800736e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007376:	429a      	cmp	r2, r3
 8007378:	d302      	bcc.n	8007380 <xQueueGenericSendFromISR+0xbc>
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2b02      	cmp	r3, #2
 800737e:	d12f      	bne.n	80073e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007382:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800738a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	68b9      	ldr	r1, [r7, #8]
 8007394:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007396:	f000 fba0 	bl	8007ada <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800739a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800739e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a2:	d112      	bne.n	80073ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d016      	beq.n	80073da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ae:	3324      	adds	r3, #36	; 0x24
 80073b0:	4618      	mov	r0, r3
 80073b2:	f001 f91f 	bl	80085f4 <xTaskRemoveFromEventList>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00e      	beq.n	80073da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00b      	beq.n	80073da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	e007      	b.n	80073da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80073ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80073ce:	3301      	adds	r3, #1
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	b25a      	sxtb	r2, r3
 80073d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80073da:	2301      	movs	r3, #1
 80073dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80073de:	e001      	b.n	80073e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073e0:	2300      	movs	r3, #0
 80073e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e6:	617b      	str	r3, [r7, #20]
	__asm volatile
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	f383 8811 	msr	BASEPRI, r3
}
 80073ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3740      	adds	r7, #64	; 0x40
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b08e      	sub	sp, #56	; 0x38
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10a      	bne.n	8007424 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	623b      	str	r3, [r7, #32]
}
 8007420:	bf00      	nop
 8007422:	e7fe      	b.n	8007422 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00a      	beq.n	8007442 <xQueueGiveFromISR+0x48>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	61fb      	str	r3, [r7, #28]
}
 800743e:	bf00      	nop
 8007440:	e7fe      	b.n	8007440 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d103      	bne.n	8007452 <xQueueGiveFromISR+0x58>
 800744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <xQueueGiveFromISR+0x5c>
 8007452:	2301      	movs	r3, #1
 8007454:	e000      	b.n	8007458 <xQueueGiveFromISR+0x5e>
 8007456:	2300      	movs	r3, #0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10a      	bne.n	8007472 <xQueueGiveFromISR+0x78>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	61bb      	str	r3, [r7, #24]
}
 800746e:	bf00      	nop
 8007470:	e7fe      	b.n	8007470 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007472:	f001 feb1 	bl	80091d8 <vPortValidateInterruptPriority>
	__asm volatile
 8007476:	f3ef 8211 	mrs	r2, BASEPRI
 800747a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	617a      	str	r2, [r7, #20]
 800748c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800748e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007490:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007496:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800749e:	429a      	cmp	r2, r3
 80074a0:	d22b      	bcs.n	80074fa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80074ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ae:	1c5a      	adds	r2, r3, #1
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80074b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074bc:	d112      	bne.n	80074e4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d016      	beq.n	80074f4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	3324      	adds	r3, #36	; 0x24
 80074ca:	4618      	mov	r0, r3
 80074cc:	f001 f892 	bl	80085f4 <xTaskRemoveFromEventList>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00e      	beq.n	80074f4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00b      	beq.n	80074f4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	2201      	movs	r2, #1
 80074e0:	601a      	str	r2, [r3, #0]
 80074e2:	e007      	b.n	80074f4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80074e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074e8:	3301      	adds	r3, #1
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	b25a      	sxtb	r2, r3
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80074f4:	2301      	movs	r3, #1
 80074f6:	637b      	str	r3, [r7, #52]	; 0x34
 80074f8:	e001      	b.n	80074fe <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	637b      	str	r3, [r7, #52]	; 0x34
 80074fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007500:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f383 8811 	msr	BASEPRI, r3
}
 8007508:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800750a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800750c:	4618      	mov	r0, r3
 800750e:	3738      	adds	r7, #56	; 0x38
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b08c      	sub	sp, #48	; 0x30
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007520:	2300      	movs	r3, #0
 8007522:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10a      	bne.n	8007544 <xQueueReceive+0x30>
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	623b      	str	r3, [r7, #32]
}
 8007540:	bf00      	nop
 8007542:	e7fe      	b.n	8007542 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d103      	bne.n	8007552 <xQueueReceive+0x3e>
 800754a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <xQueueReceive+0x42>
 8007552:	2301      	movs	r3, #1
 8007554:	e000      	b.n	8007558 <xQueueReceive+0x44>
 8007556:	2300      	movs	r3, #0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10a      	bne.n	8007572 <xQueueReceive+0x5e>
	__asm volatile
 800755c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	61fb      	str	r3, [r7, #28]
}
 800756e:	bf00      	nop
 8007570:	e7fe      	b.n	8007570 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007572:	f001 f9ff 	bl	8008974 <xTaskGetSchedulerState>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d102      	bne.n	8007582 <xQueueReceive+0x6e>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <xQueueReceive+0x72>
 8007582:	2301      	movs	r3, #1
 8007584:	e000      	b.n	8007588 <xQueueReceive+0x74>
 8007586:	2300      	movs	r3, #0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10a      	bne.n	80075a2 <xQueueReceive+0x8e>
	__asm volatile
 800758c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	61bb      	str	r3, [r7, #24]
}
 800759e:	bf00      	nop
 80075a0:	e7fe      	b.n	80075a0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075a2:	f001 fd37 	bl	8009014 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d01f      	beq.n	80075f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075b2:	68b9      	ldr	r1, [r7, #8]
 80075b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075b6:	f000 fafa 	bl	8007bae <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	1e5a      	subs	r2, r3, #1
 80075be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00f      	beq.n	80075ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075cc:	3310      	adds	r3, #16
 80075ce:	4618      	mov	r0, r3
 80075d0:	f001 f810 	bl	80085f4 <xTaskRemoveFromEventList>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d007      	beq.n	80075ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80075da:	4b3d      	ldr	r3, [pc, #244]	; (80076d0 <xQueueReceive+0x1bc>)
 80075dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e0:	601a      	str	r2, [r3, #0]
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80075ea:	f001 fd43 	bl	8009074 <vPortExitCritical>
				return pdPASS;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e069      	b.n	80076c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d103      	bne.n	8007600 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075f8:	f001 fd3c 	bl	8009074 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80075fc:	2300      	movs	r3, #0
 80075fe:	e062      	b.n	80076c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007602:	2b00      	cmp	r3, #0
 8007604:	d106      	bne.n	8007614 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007606:	f107 0310 	add.w	r3, r7, #16
 800760a:	4618      	mov	r0, r3
 800760c:	f001 f854 	bl	80086b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007610:	2301      	movs	r3, #1
 8007612:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007614:	f001 fd2e 	bl	8009074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007618:	f000 fde2 	bl	80081e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800761c:	f001 fcfa 	bl	8009014 <vPortEnterCritical>
 8007620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007622:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007626:	b25b      	sxtb	r3, r3
 8007628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762c:	d103      	bne.n	8007636 <xQueueReceive+0x122>
 800762e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800763c:	b25b      	sxtb	r3, r3
 800763e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007642:	d103      	bne.n	800764c <xQueueReceive+0x138>
 8007644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800764c:	f001 fd12 	bl	8009074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007650:	1d3a      	adds	r2, r7, #4
 8007652:	f107 0310 	add.w	r3, r7, #16
 8007656:	4611      	mov	r1, r2
 8007658:	4618      	mov	r0, r3
 800765a:	f001 f843 	bl	80086e4 <xTaskCheckForTimeOut>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d123      	bne.n	80076ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007666:	f000 fb1a 	bl	8007c9e <prvIsQueueEmpty>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d017      	beq.n	80076a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007672:	3324      	adds	r3, #36	; 0x24
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	4611      	mov	r1, r2
 8007678:	4618      	mov	r0, r3
 800767a:	f000 ff97 	bl	80085ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800767e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007680:	f000 fabb 	bl	8007bfa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007684:	f000 fdba 	bl	80081fc <xTaskResumeAll>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d189      	bne.n	80075a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800768e:	4b10      	ldr	r3, [pc, #64]	; (80076d0 <xQueueReceive+0x1bc>)
 8007690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	e780      	b.n	80075a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80076a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076a2:	f000 faaa 	bl	8007bfa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076a6:	f000 fda9 	bl	80081fc <xTaskResumeAll>
 80076aa:	e77a      	b.n	80075a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80076ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076ae:	f000 faa4 	bl	8007bfa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076b2:	f000 fda3 	bl	80081fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076b8:	f000 faf1 	bl	8007c9e <prvIsQueueEmpty>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f43f af6f 	beq.w	80075a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80076c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3730      	adds	r7, #48	; 0x30
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	e000ed04 	.word	0xe000ed04

080076d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b08e      	sub	sp, #56	; 0x38
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80076de:	2300      	movs	r3, #0
 80076e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80076e6:	2300      	movs	r3, #0
 80076e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80076ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10a      	bne.n	8007706 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	623b      	str	r3, [r7, #32]
}
 8007702:	bf00      	nop
 8007704:	e7fe      	b.n	8007704 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00a      	beq.n	8007724 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	61fb      	str	r3, [r7, #28]
}
 8007720:	bf00      	nop
 8007722:	e7fe      	b.n	8007722 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007724:	f001 f926 	bl	8008974 <xTaskGetSchedulerState>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d102      	bne.n	8007734 <xQueueSemaphoreTake+0x60>
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <xQueueSemaphoreTake+0x64>
 8007734:	2301      	movs	r3, #1
 8007736:	e000      	b.n	800773a <xQueueSemaphoreTake+0x66>
 8007738:	2300      	movs	r3, #0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10a      	bne.n	8007754 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	61bb      	str	r3, [r7, #24]
}
 8007750:	bf00      	nop
 8007752:	e7fe      	b.n	8007752 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007754:	f001 fc5e 	bl	8009014 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800775e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007760:	2b00      	cmp	r3, #0
 8007762:	d024      	beq.n	80077ae <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007766:	1e5a      	subs	r2, r3, #1
 8007768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800776c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d104      	bne.n	800777e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007774:	f001 faa6 	bl	8008cc4 <pvTaskIncrementMutexHeldCount>
 8007778:	4602      	mov	r2, r0
 800777a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800777e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00f      	beq.n	80077a6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007788:	3310      	adds	r3, #16
 800778a:	4618      	mov	r0, r3
 800778c:	f000 ff32 	bl	80085f4 <xTaskRemoveFromEventList>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d007      	beq.n	80077a6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007796:	4b54      	ldr	r3, [pc, #336]	; (80078e8 <xQueueSemaphoreTake+0x214>)
 8007798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80077a6:	f001 fc65 	bl	8009074 <vPortExitCritical>
				return pdPASS;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e097      	b.n	80078de <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d111      	bne.n	80077d8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80077b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00a      	beq.n	80077d0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	617b      	str	r3, [r7, #20]
}
 80077cc:	bf00      	nop
 80077ce:	e7fe      	b.n	80077ce <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80077d0:	f001 fc50 	bl	8009074 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80077d4:	2300      	movs	r3, #0
 80077d6:	e082      	b.n	80078de <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d106      	bne.n	80077ec <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077de:	f107 030c 	add.w	r3, r7, #12
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 ff68 	bl	80086b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077e8:	2301      	movs	r3, #1
 80077ea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077ec:	f001 fc42 	bl	8009074 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077f0:	f000 fcf6 	bl	80081e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077f4:	f001 fc0e 	bl	8009014 <vPortEnterCritical>
 80077f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077fe:	b25b      	sxtb	r3, r3
 8007800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007804:	d103      	bne.n	800780e <xQueueSemaphoreTake+0x13a>
 8007806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800780e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007810:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007814:	b25b      	sxtb	r3, r3
 8007816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800781a:	d103      	bne.n	8007824 <xQueueSemaphoreTake+0x150>
 800781c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007824:	f001 fc26 	bl	8009074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007828:	463a      	mov	r2, r7
 800782a:	f107 030c 	add.w	r3, r7, #12
 800782e:	4611      	mov	r1, r2
 8007830:	4618      	mov	r0, r3
 8007832:	f000 ff57 	bl	80086e4 <xTaskCheckForTimeOut>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d132      	bne.n	80078a2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800783c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800783e:	f000 fa2e 	bl	8007c9e <prvIsQueueEmpty>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d026      	beq.n	8007896 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d109      	bne.n	8007864 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007850:	f001 fbe0 	bl	8009014 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	4618      	mov	r0, r3
 800785a:	f001 f8a9 	bl	80089b0 <xTaskPriorityInherit>
 800785e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007860:	f001 fc08 	bl	8009074 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007866:	3324      	adds	r3, #36	; 0x24
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	4611      	mov	r1, r2
 800786c:	4618      	mov	r0, r3
 800786e:	f000 fe9d 	bl	80085ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007872:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007874:	f000 f9c1 	bl	8007bfa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007878:	f000 fcc0 	bl	80081fc <xTaskResumeAll>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	f47f af68 	bne.w	8007754 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007884:	4b18      	ldr	r3, [pc, #96]	; (80078e8 <xQueueSemaphoreTake+0x214>)
 8007886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800788a:	601a      	str	r2, [r3, #0]
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	e75e      	b.n	8007754 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007896:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007898:	f000 f9af 	bl	8007bfa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800789c:	f000 fcae 	bl	80081fc <xTaskResumeAll>
 80078a0:	e758      	b.n	8007754 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80078a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078a4:	f000 f9a9 	bl	8007bfa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078a8:	f000 fca8 	bl	80081fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078ae:	f000 f9f6 	bl	8007c9e <prvIsQueueEmpty>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f43f af4d 	beq.w	8007754 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80078ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00d      	beq.n	80078dc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80078c0:	f001 fba8 	bl	8009014 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80078c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078c6:	f000 f8f0 	bl	8007aaa <prvGetDisinheritPriorityAfterTimeout>
 80078ca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80078cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078d2:	4618      	mov	r0, r3
 80078d4:	f001 f968 	bl	8008ba8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80078d8:	f001 fbcc 	bl	8009074 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80078dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3738      	adds	r7, #56	; 0x38
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	e000ed04 	.word	0xe000ed04

080078ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08e      	sub	sp, #56	; 0x38
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80078fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10a      	bne.n	8007918 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	623b      	str	r3, [r7, #32]
}
 8007914:	bf00      	nop
 8007916:	e7fe      	b.n	8007916 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d103      	bne.n	8007926 <xQueueReceiveFromISR+0x3a>
 800791e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <xQueueReceiveFromISR+0x3e>
 8007926:	2301      	movs	r3, #1
 8007928:	e000      	b.n	800792c <xQueueReceiveFromISR+0x40>
 800792a:	2300      	movs	r3, #0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10a      	bne.n	8007946 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	61fb      	str	r3, [r7, #28]
}
 8007942:	bf00      	nop
 8007944:	e7fe      	b.n	8007944 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007946:	f001 fc47 	bl	80091d8 <vPortValidateInterruptPriority>
	__asm volatile
 800794a:	f3ef 8211 	mrs	r2, BASEPRI
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	61ba      	str	r2, [r7, #24]
 8007960:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007962:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007964:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800796c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796e:	2b00      	cmp	r3, #0
 8007970:	d02f      	beq.n	80079d2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007974:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800797c:	68b9      	ldr	r1, [r7, #8]
 800797e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007980:	f000 f915 	bl	8007bae <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007986:	1e5a      	subs	r2, r3, #1
 8007988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800798c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007994:	d112      	bne.n	80079bc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d016      	beq.n	80079cc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800799e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a0:	3310      	adds	r3, #16
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 fe26 	bl	80085f4 <xTaskRemoveFromEventList>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00e      	beq.n	80079cc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00b      	beq.n	80079cc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	e007      	b.n	80079cc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80079bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079c0:	3301      	adds	r3, #1
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	b25a      	sxtb	r2, r3
 80079c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80079cc:	2301      	movs	r3, #1
 80079ce:	637b      	str	r3, [r7, #52]	; 0x34
 80079d0:	e001      	b.n	80079d6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80079d2:	2300      	movs	r3, #0
 80079d4:	637b      	str	r3, [r7, #52]	; 0x34
 80079d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	f383 8811 	msr	BASEPRI, r3
}
 80079e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80079e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3738      	adds	r7, #56	; 0x38
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10a      	bne.n	8007a10 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	60bb      	str	r3, [r7, #8]
}
 8007a0c:	bf00      	nop
 8007a0e:	e7fe      	b.n	8007a0e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8007a10:	f001 fb00 	bl	8009014 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a18:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007a1a:	f001 fb2b 	bl	8009074 <vPortExitCritical>

	return uxReturn;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10a      	bne.n	8007a50 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8007a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3e:	f383 8811 	msr	BASEPRI, r3
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	f3bf 8f4f 	dsb	sy
 8007a4a:	60fb      	str	r3, [r7, #12]
}
 8007a4c:	bf00      	nop
 8007a4e:	e7fe      	b.n	8007a4e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a54:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007a56:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007a58:	4618      	mov	r0, r3
 8007a5a:	371c      	adds	r7, #28
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10a      	bne.n	8007a8c <vQueueDelete+0x28>
	__asm volatile
 8007a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	60bb      	str	r3, [r7, #8]
}
 8007a88:	bf00      	nop
 8007a8a:	e7fe      	b.n	8007a8a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 f935 	bl	8007cfc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d102      	bne.n	8007aa2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f001 fca7 	bl	80093f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007aa2:	bf00      	nop
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007aaa:	b480      	push	{r7}
 8007aac:	b085      	sub	sp, #20
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d006      	beq.n	8007ac8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f1c3 0307 	rsb	r3, r3, #7
 8007ac4:	60fb      	str	r3, [r7, #12]
 8007ac6:	e001      	b.n	8007acc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007acc:	68fb      	ldr	r3, [r7, #12]
	}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b086      	sub	sp, #24
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	60f8      	str	r0, [r7, #12]
 8007ae2:	60b9      	str	r1, [r7, #8]
 8007ae4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aee:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d10d      	bne.n	8007b14 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d14d      	bne.n	8007b9c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 ffc9 	bl	8008a9c <xTaskPriorityDisinherit>
 8007b0a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	609a      	str	r2, [r3, #8]
 8007b12:	e043      	b.n	8007b9c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d119      	bne.n	8007b4e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6858      	ldr	r0, [r3, #4]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b22:	461a      	mov	r2, r3
 8007b24:	68b9      	ldr	r1, [r7, #8]
 8007b26:	f00e ffcd 	bl	8016ac4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	685a      	ldr	r2, [r3, #4]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b32:	441a      	add	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d32b      	bcc.n	8007b9c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	605a      	str	r2, [r3, #4]
 8007b4c:	e026      	b.n	8007b9c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	68d8      	ldr	r0, [r3, #12]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b56:	461a      	mov	r2, r3
 8007b58:	68b9      	ldr	r1, [r7, #8]
 8007b5a:	f00e ffb3 	bl	8016ac4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	68da      	ldr	r2, [r3, #12]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b66:	425b      	negs	r3, r3
 8007b68:	441a      	add	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d207      	bcs.n	8007b8a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	689a      	ldr	r2, [r3, #8]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b82:	425b      	negs	r3, r3
 8007b84:	441a      	add	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d105      	bne.n	8007b9c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	1c5a      	adds	r2, r3, #1
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007ba4:	697b      	ldr	r3, [r7, #20]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d018      	beq.n	8007bf2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	68da      	ldr	r2, [r3, #12]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc8:	441a      	add	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68da      	ldr	r2, [r3, #12]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d303      	bcc.n	8007be2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68d9      	ldr	r1, [r3, #12]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	461a      	mov	r2, r3
 8007bec:	6838      	ldr	r0, [r7, #0]
 8007bee:	f00e ff69 	bl	8016ac4 <memcpy>
	}
}
 8007bf2:	bf00      	nop
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b084      	sub	sp, #16
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007c02:	f001 fa07 	bl	8009014 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c0c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c0e:	e011      	b.n	8007c34 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d012      	beq.n	8007c3e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	3324      	adds	r3, #36	; 0x24
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 fce9 	bl	80085f4 <xTaskRemoveFromEventList>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007c28:	f000 fdbe 	bl	80087a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	dce9      	bgt.n	8007c10 <prvUnlockQueue+0x16>
 8007c3c:	e000      	b.n	8007c40 <prvUnlockQueue+0x46>
					break;
 8007c3e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	22ff      	movs	r2, #255	; 0xff
 8007c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007c48:	f001 fa14 	bl	8009074 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007c4c:	f001 f9e2 	bl	8009014 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c56:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c58:	e011      	b.n	8007c7e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d012      	beq.n	8007c88 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	3310      	adds	r3, #16
 8007c66:	4618      	mov	r0, r3
 8007c68:	f000 fcc4 	bl	80085f4 <xTaskRemoveFromEventList>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d001      	beq.n	8007c76 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007c72:	f000 fd99 	bl	80087a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007c76:	7bbb      	ldrb	r3, [r7, #14]
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	dce9      	bgt.n	8007c5a <prvUnlockQueue+0x60>
 8007c86:	e000      	b.n	8007c8a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007c88:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	22ff      	movs	r2, #255	; 0xff
 8007c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007c92:	f001 f9ef 	bl	8009074 <vPortExitCritical>
}
 8007c96:	bf00      	nop
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b084      	sub	sp, #16
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ca6:	f001 f9b5 	bl	8009014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d102      	bne.n	8007cb8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	60fb      	str	r3, [r7, #12]
 8007cb6:	e001      	b.n	8007cbc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007cbc:	f001 f9da 	bl	8009074 <vPortExitCritical>

	return xReturn;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b084      	sub	sp, #16
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007cd2:	f001 f99f 	bl	8009014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d102      	bne.n	8007ce8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	60fb      	str	r3, [r7, #12]
 8007ce6:	e001      	b.n	8007cec <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007cec:	f001 f9c2 	bl	8009074 <vPortExitCritical>

	return xReturn;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
	...

08007cfc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d04:	2300      	movs	r3, #0
 8007d06:	60fb      	str	r3, [r7, #12]
 8007d08:	e016      	b.n	8007d38 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007d0a:	4a10      	ldr	r2, [pc, #64]	; (8007d4c <vQueueUnregisterQueue+0x50>)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	00db      	lsls	r3, r3, #3
 8007d10:	4413      	add	r3, r2
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d10b      	bne.n	8007d32 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007d1a:	4a0c      	ldr	r2, [pc, #48]	; (8007d4c <vQueueUnregisterQueue+0x50>)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2100      	movs	r1, #0
 8007d20:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007d24:	4a09      	ldr	r2, [pc, #36]	; (8007d4c <vQueueUnregisterQueue+0x50>)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	00db      	lsls	r3, r3, #3
 8007d2a:	4413      	add	r3, r2
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	605a      	str	r2, [r3, #4]
				break;
 8007d30:	e006      	b.n	8007d40 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	3301      	adds	r3, #1
 8007d36:	60fb      	str	r3, [r7, #12]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2b07      	cmp	r3, #7
 8007d3c:	d9e5      	bls.n	8007d0a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007d3e:	bf00      	nop
 8007d40:	bf00      	nop
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	20009c5c 	.word	0x20009c5c

08007d50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08e      	sub	sp, #56	; 0x38
 8007d54:	af04      	add	r7, sp, #16
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
 8007d5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10a      	bne.n	8007d7a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	623b      	str	r3, [r7, #32]
}
 8007d76:	bf00      	nop
 8007d78:	e7fe      	b.n	8007d78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10a      	bne.n	8007d96 <xTaskCreateStatic+0x46>
	__asm volatile
 8007d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d84:	f383 8811 	msr	BASEPRI, r3
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	61fb      	str	r3, [r7, #28]
}
 8007d92:	bf00      	nop
 8007d94:	e7fe      	b.n	8007d94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007d96:	23b4      	movs	r3, #180	; 0xb4
 8007d98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	2bb4      	cmp	r3, #180	; 0xb4
 8007d9e:	d00a      	beq.n	8007db6 <xTaskCreateStatic+0x66>
	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	61bb      	str	r3, [r7, #24]
}
 8007db2:	bf00      	nop
 8007db4:	e7fe      	b.n	8007db4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007db6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d01e      	beq.n	8007dfc <xTaskCreateStatic+0xac>
 8007dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d01b      	beq.n	8007dfc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dcc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	9303      	str	r3, [sp, #12]
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	9302      	str	r3, [sp, #8]
 8007dde:	f107 0314 	add.w	r3, r7, #20
 8007de2:	9301      	str	r3, [sp, #4]
 8007de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de6:	9300      	str	r3, [sp, #0]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	68b9      	ldr	r1, [r7, #8]
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f000 f850 	bl	8007e94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007df4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007df6:	f000 f8eb 	bl	8007fd0 <prvAddNewTaskToReadyList>
 8007dfa:	e001      	b.n	8007e00 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e00:	697b      	ldr	r3, [r7, #20]
	}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3728      	adds	r7, #40	; 0x28
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b08c      	sub	sp, #48	; 0x30
 8007e0e:	af04      	add	r7, sp, #16
 8007e10:	60f8      	str	r0, [r7, #12]
 8007e12:	60b9      	str	r1, [r7, #8]
 8007e14:	603b      	str	r3, [r7, #0]
 8007e16:	4613      	mov	r3, r2
 8007e18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e1a:	88fb      	ldrh	r3, [r7, #6]
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f001 fa1a 	bl	8009258 <pvPortMalloc>
 8007e24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00e      	beq.n	8007e4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e2c:	20b4      	movs	r0, #180	; 0xb4
 8007e2e:	f001 fa13 	bl	8009258 <pvPortMalloc>
 8007e32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	631a      	str	r2, [r3, #48]	; 0x30
 8007e40:	e005      	b.n	8007e4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e42:	6978      	ldr	r0, [r7, #20]
 8007e44:	f001 fad4 	bl	80093f0 <vPortFree>
 8007e48:	e001      	b.n	8007e4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d017      	beq.n	8007e84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e5c:	88fa      	ldrh	r2, [r7, #6]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	9303      	str	r3, [sp, #12]
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	9302      	str	r3, [sp, #8]
 8007e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e68:	9301      	str	r3, [sp, #4]
 8007e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	68b9      	ldr	r1, [r7, #8]
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f000 f80e 	bl	8007e94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e78:	69f8      	ldr	r0, [r7, #28]
 8007e7a:	f000 f8a9 	bl	8007fd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	61bb      	str	r3, [r7, #24]
 8007e82:	e002      	b.n	8007e8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007e84:	f04f 33ff 	mov.w	r3, #4294967295
 8007e88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007e8a:	69bb      	ldr	r3, [r7, #24]
	}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3720      	adds	r7, #32
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b088      	sub	sp, #32
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
 8007ea0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007eac:	3b01      	subs	r3, #1
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4413      	add	r3, r2
 8007eb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	f023 0307 	bic.w	r3, r3, #7
 8007eba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	f003 0307 	and.w	r3, r3, #7
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00a      	beq.n	8007edc <prvInitialiseNewTask+0x48>
	__asm volatile
 8007ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	617b      	str	r3, [r7, #20]
}
 8007ed8:	bf00      	nop
 8007eda:	e7fe      	b.n	8007eda <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d01f      	beq.n	8007f22 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	61fb      	str	r3, [r7, #28]
 8007ee6:	e012      	b.n	8007f0e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	4413      	add	r3, r2
 8007eee:	7819      	ldrb	r1, [r3, #0]
 8007ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	3334      	adds	r3, #52	; 0x34
 8007ef8:	460a      	mov	r2, r1
 8007efa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	4413      	add	r3, r2
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d006      	beq.n	8007f16 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	61fb      	str	r3, [r7, #28]
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	2b0f      	cmp	r3, #15
 8007f12:	d9e9      	bls.n	8007ee8 <prvInitialiseNewTask+0x54>
 8007f14:	e000      	b.n	8007f18 <prvInitialiseNewTask+0x84>
			{
				break;
 8007f16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f20:	e003      	b.n	8007f2a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2c:	2b06      	cmp	r3, #6
 8007f2e:	d901      	bls.n	8007f34 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f30:	2306      	movs	r3, #6
 8007f32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f3e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f42:	2200      	movs	r2, #0
 8007f44:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	3304      	adds	r3, #4
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fe fea1 	bl	8006c92 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f52:	3318      	adds	r3, #24
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7fe fe9c 	bl	8006c92 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f62:	f1c3 0207 	rsb	r2, r3, #7
 8007f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f72:	2200      	movs	r2, #0
 8007f74:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f82:	334c      	adds	r3, #76	; 0x4c
 8007f84:	2260      	movs	r2, #96	; 0x60
 8007f86:	2100      	movs	r1, #0
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f00e fda9 	bl	8016ae0 <memset>
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	4a0c      	ldr	r2, [pc, #48]	; (8007fc4 <prvInitialiseNewTask+0x130>)
 8007f92:	651a      	str	r2, [r3, #80]	; 0x50
 8007f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f96:	4a0c      	ldr	r2, [pc, #48]	; (8007fc8 <prvInitialiseNewTask+0x134>)
 8007f98:	655a      	str	r2, [r3, #84]	; 0x54
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	4a0b      	ldr	r2, [pc, #44]	; (8007fcc <prvInitialiseNewTask+0x138>)
 8007f9e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	68f9      	ldr	r1, [r7, #12]
 8007fa4:	69b8      	ldr	r0, [r7, #24]
 8007fa6:	f000 ff07 	bl	8008db8 <pxPortInitialiseStack>
 8007faa:	4602      	mov	r2, r0
 8007fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d002      	beq.n	8007fbc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fbc:	bf00      	nop
 8007fbe:	3720      	adds	r7, #32
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	0801b110 	.word	0x0801b110
 8007fc8:	0801b130 	.word	0x0801b130
 8007fcc:	0801b0f0 	.word	0x0801b0f0

08007fd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007fd8:	f001 f81c 	bl	8009014 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007fdc:	4b2a      	ldr	r3, [pc, #168]	; (8008088 <prvAddNewTaskToReadyList+0xb8>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	4a29      	ldr	r2, [pc, #164]	; (8008088 <prvAddNewTaskToReadyList+0xb8>)
 8007fe4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007fe6:	4b29      	ldr	r3, [pc, #164]	; (800808c <prvAddNewTaskToReadyList+0xbc>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d109      	bne.n	8008002 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007fee:	4a27      	ldr	r2, [pc, #156]	; (800808c <prvAddNewTaskToReadyList+0xbc>)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ff4:	4b24      	ldr	r3, [pc, #144]	; (8008088 <prvAddNewTaskToReadyList+0xb8>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d110      	bne.n	800801e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ffc:	f000 fbf8 	bl	80087f0 <prvInitialiseTaskLists>
 8008000:	e00d      	b.n	800801e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008002:	4b23      	ldr	r3, [pc, #140]	; (8008090 <prvAddNewTaskToReadyList+0xc0>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d109      	bne.n	800801e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800800a:	4b20      	ldr	r3, [pc, #128]	; (800808c <prvAddNewTaskToReadyList+0xbc>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008014:	429a      	cmp	r2, r3
 8008016:	d802      	bhi.n	800801e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008018:	4a1c      	ldr	r2, [pc, #112]	; (800808c <prvAddNewTaskToReadyList+0xbc>)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800801e:	4b1d      	ldr	r3, [pc, #116]	; (8008094 <prvAddNewTaskToReadyList+0xc4>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	3301      	adds	r3, #1
 8008024:	4a1b      	ldr	r2, [pc, #108]	; (8008094 <prvAddNewTaskToReadyList+0xc4>)
 8008026:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802c:	2201      	movs	r2, #1
 800802e:	409a      	lsls	r2, r3
 8008030:	4b19      	ldr	r3, [pc, #100]	; (8008098 <prvAddNewTaskToReadyList+0xc8>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4313      	orrs	r3, r2
 8008036:	4a18      	ldr	r2, [pc, #96]	; (8008098 <prvAddNewTaskToReadyList+0xc8>)
 8008038:	6013      	str	r3, [r2, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800803e:	4613      	mov	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4413      	add	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4a15      	ldr	r2, [pc, #84]	; (800809c <prvAddNewTaskToReadyList+0xcc>)
 8008048:	441a      	add	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	3304      	adds	r3, #4
 800804e:	4619      	mov	r1, r3
 8008050:	4610      	mov	r0, r2
 8008052:	f7fe fe2b 	bl	8006cac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008056:	f001 f80d 	bl	8009074 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800805a:	4b0d      	ldr	r3, [pc, #52]	; (8008090 <prvAddNewTaskToReadyList+0xc0>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00e      	beq.n	8008080 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008062:	4b0a      	ldr	r3, [pc, #40]	; (800808c <prvAddNewTaskToReadyList+0xbc>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806c:	429a      	cmp	r2, r3
 800806e:	d207      	bcs.n	8008080 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008070:	4b0b      	ldr	r3, [pc, #44]	; (80080a0 <prvAddNewTaskToReadyList+0xd0>)
 8008072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008076:	601a      	str	r2, [r3, #0]
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008080:	bf00      	nop
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	20000490 	.word	0x20000490
 800808c:	20000390 	.word	0x20000390
 8008090:	2000049c 	.word	0x2000049c
 8008094:	200004ac 	.word	0x200004ac
 8008098:	20000498 	.word	0x20000498
 800809c:	20000394 	.word	0x20000394
 80080a0:	e000ed04 	.word	0xe000ed04

080080a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80080ac:	2300      	movs	r3, #0
 80080ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d017      	beq.n	80080e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80080b6:	4b13      	ldr	r3, [pc, #76]	; (8008104 <vTaskDelay+0x60>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00a      	beq.n	80080d4 <vTaskDelay+0x30>
	__asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	60bb      	str	r3, [r7, #8]
}
 80080d0:	bf00      	nop
 80080d2:	e7fe      	b.n	80080d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80080d4:	f000 f884 	bl	80081e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80080d8:	2100      	movs	r1, #0
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fe06 	bl	8008cec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80080e0:	f000 f88c 	bl	80081fc <xTaskResumeAll>
 80080e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d107      	bne.n	80080fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80080ec:	4b06      	ldr	r3, [pc, #24]	; (8008108 <vTaskDelay+0x64>)
 80080ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080f2:	601a      	str	r2, [r3, #0]
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80080fc:	bf00      	nop
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	200004b8 	.word	0x200004b8
 8008108:	e000ed04 	.word	0xe000ed04

0800810c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b08a      	sub	sp, #40	; 0x28
 8008110:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008112:	2300      	movs	r3, #0
 8008114:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008116:	2300      	movs	r3, #0
 8008118:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800811a:	463a      	mov	r2, r7
 800811c:	1d39      	adds	r1, r7, #4
 800811e:	f107 0308 	add.w	r3, r7, #8
 8008122:	4618      	mov	r0, r3
 8008124:	f7f8 faf8 	bl	8000718 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008128:	6839      	ldr	r1, [r7, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	9202      	str	r2, [sp, #8]
 8008130:	9301      	str	r3, [sp, #4]
 8008132:	2300      	movs	r3, #0
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	2300      	movs	r3, #0
 8008138:	460a      	mov	r2, r1
 800813a:	4921      	ldr	r1, [pc, #132]	; (80081c0 <vTaskStartScheduler+0xb4>)
 800813c:	4821      	ldr	r0, [pc, #132]	; (80081c4 <vTaskStartScheduler+0xb8>)
 800813e:	f7ff fe07 	bl	8007d50 <xTaskCreateStatic>
 8008142:	4603      	mov	r3, r0
 8008144:	4a20      	ldr	r2, [pc, #128]	; (80081c8 <vTaskStartScheduler+0xbc>)
 8008146:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008148:	4b1f      	ldr	r3, [pc, #124]	; (80081c8 <vTaskStartScheduler+0xbc>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d002      	beq.n	8008156 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008150:	2301      	movs	r3, #1
 8008152:	617b      	str	r3, [r7, #20]
 8008154:	e001      	b.n	800815a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008156:	2300      	movs	r3, #0
 8008158:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d11b      	bne.n	8008198 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	613b      	str	r3, [r7, #16]
}
 8008172:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008174:	4b15      	ldr	r3, [pc, #84]	; (80081cc <vTaskStartScheduler+0xc0>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	334c      	adds	r3, #76	; 0x4c
 800817a:	4a15      	ldr	r2, [pc, #84]	; (80081d0 <vTaskStartScheduler+0xc4>)
 800817c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800817e:	4b15      	ldr	r3, [pc, #84]	; (80081d4 <vTaskStartScheduler+0xc8>)
 8008180:	f04f 32ff 	mov.w	r2, #4294967295
 8008184:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008186:	4b14      	ldr	r3, [pc, #80]	; (80081d8 <vTaskStartScheduler+0xcc>)
 8008188:	2201      	movs	r2, #1
 800818a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800818c:	4b13      	ldr	r3, [pc, #76]	; (80081dc <vTaskStartScheduler+0xd0>)
 800818e:	2200      	movs	r2, #0
 8008190:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008192:	f000 fe9d 	bl	8008ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008196:	e00e      	b.n	80081b6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800819e:	d10a      	bne.n	80081b6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	60fb      	str	r3, [r7, #12]
}
 80081b2:	bf00      	nop
 80081b4:	e7fe      	b.n	80081b4 <vTaskStartScheduler+0xa8>
}
 80081b6:	bf00      	nop
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	08017ad0 	.word	0x08017ad0
 80081c4:	080087c1 	.word	0x080087c1
 80081c8:	200004b4 	.word	0x200004b4
 80081cc:	20000390 	.word	0x20000390
 80081d0:	20000020 	.word	0x20000020
 80081d4:	200004b0 	.word	0x200004b0
 80081d8:	2000049c 	.word	0x2000049c
 80081dc:	20000494 	.word	0x20000494

080081e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80081e0:	b480      	push	{r7}
 80081e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80081e4:	4b04      	ldr	r3, [pc, #16]	; (80081f8 <vTaskSuspendAll+0x18>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3301      	adds	r3, #1
 80081ea:	4a03      	ldr	r2, [pc, #12]	; (80081f8 <vTaskSuspendAll+0x18>)
 80081ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80081ee:	bf00      	nop
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	200004b8 	.word	0x200004b8

080081fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008202:	2300      	movs	r3, #0
 8008204:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008206:	2300      	movs	r3, #0
 8008208:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800820a:	4b41      	ldr	r3, [pc, #260]	; (8008310 <xTaskResumeAll+0x114>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10a      	bne.n	8008228 <xTaskResumeAll+0x2c>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	603b      	str	r3, [r7, #0]
}
 8008224:	bf00      	nop
 8008226:	e7fe      	b.n	8008226 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008228:	f000 fef4 	bl	8009014 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800822c:	4b38      	ldr	r3, [pc, #224]	; (8008310 <xTaskResumeAll+0x114>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3b01      	subs	r3, #1
 8008232:	4a37      	ldr	r2, [pc, #220]	; (8008310 <xTaskResumeAll+0x114>)
 8008234:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008236:	4b36      	ldr	r3, [pc, #216]	; (8008310 <xTaskResumeAll+0x114>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d161      	bne.n	8008302 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800823e:	4b35      	ldr	r3, [pc, #212]	; (8008314 <xTaskResumeAll+0x118>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d05d      	beq.n	8008302 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008246:	e02e      	b.n	80082a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008248:	4b33      	ldr	r3, [pc, #204]	; (8008318 <xTaskResumeAll+0x11c>)
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	3318      	adds	r3, #24
 8008254:	4618      	mov	r0, r3
 8008256:	f7fe fd86 	bl	8006d66 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	3304      	adds	r3, #4
 800825e:	4618      	mov	r0, r3
 8008260:	f7fe fd81 	bl	8006d66 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008268:	2201      	movs	r2, #1
 800826a:	409a      	lsls	r2, r3
 800826c:	4b2b      	ldr	r3, [pc, #172]	; (800831c <xTaskResumeAll+0x120>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4313      	orrs	r3, r2
 8008272:	4a2a      	ldr	r2, [pc, #168]	; (800831c <xTaskResumeAll+0x120>)
 8008274:	6013      	str	r3, [r2, #0]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800827a:	4613      	mov	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4a27      	ldr	r2, [pc, #156]	; (8008320 <xTaskResumeAll+0x124>)
 8008284:	441a      	add	r2, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	3304      	adds	r3, #4
 800828a:	4619      	mov	r1, r3
 800828c:	4610      	mov	r0, r2
 800828e:	f7fe fd0d 	bl	8006cac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008296:	4b23      	ldr	r3, [pc, #140]	; (8008324 <xTaskResumeAll+0x128>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829c:	429a      	cmp	r2, r3
 800829e:	d302      	bcc.n	80082a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80082a0:	4b21      	ldr	r3, [pc, #132]	; (8008328 <xTaskResumeAll+0x12c>)
 80082a2:	2201      	movs	r2, #1
 80082a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082a6:	4b1c      	ldr	r3, [pc, #112]	; (8008318 <xTaskResumeAll+0x11c>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1cc      	bne.n	8008248 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80082b4:	f000 fb3e 	bl	8008934 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80082b8:	4b1c      	ldr	r3, [pc, #112]	; (800832c <xTaskResumeAll+0x130>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d010      	beq.n	80082e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80082c4:	f000 f858 	bl	8008378 <xTaskIncrementTick>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d002      	beq.n	80082d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80082ce:	4b16      	ldr	r3, [pc, #88]	; (8008328 <xTaskResumeAll+0x12c>)
 80082d0:	2201      	movs	r2, #1
 80082d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	3b01      	subs	r3, #1
 80082d8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1f1      	bne.n	80082c4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80082e0:	4b12      	ldr	r3, [pc, #72]	; (800832c <xTaskResumeAll+0x130>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80082e6:	4b10      	ldr	r3, [pc, #64]	; (8008328 <xTaskResumeAll+0x12c>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d009      	beq.n	8008302 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80082ee:	2301      	movs	r3, #1
 80082f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80082f2:	4b0f      	ldr	r3, [pc, #60]	; (8008330 <xTaskResumeAll+0x134>)
 80082f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008302:	f000 feb7 	bl	8009074 <vPortExitCritical>

	return xAlreadyYielded;
 8008306:	68bb      	ldr	r3, [r7, #8]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	200004b8 	.word	0x200004b8
 8008314:	20000490 	.word	0x20000490
 8008318:	20000450 	.word	0x20000450
 800831c:	20000498 	.word	0x20000498
 8008320:	20000394 	.word	0x20000394
 8008324:	20000390 	.word	0x20000390
 8008328:	200004a4 	.word	0x200004a4
 800832c:	200004a0 	.word	0x200004a0
 8008330:	e000ed04 	.word	0xe000ed04

08008334 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800833a:	4b05      	ldr	r3, [pc, #20]	; (8008350 <xTaskGetTickCount+0x1c>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008340:	687b      	ldr	r3, [r7, #4]
}
 8008342:	4618      	mov	r0, r3
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	20000494 	.word	0x20000494

08008354 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800835a:	f000 ff3d 	bl	80091d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800835e:	2300      	movs	r3, #0
 8008360:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008362:	4b04      	ldr	r3, [pc, #16]	; (8008374 <xTaskGetTickCountFromISR+0x20>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008368:	683b      	ldr	r3, [r7, #0]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	20000494 	.word	0x20000494

08008378 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800837e:	2300      	movs	r3, #0
 8008380:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008382:	4b4e      	ldr	r3, [pc, #312]	; (80084bc <xTaskIncrementTick+0x144>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	f040 808e 	bne.w	80084a8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800838c:	4b4c      	ldr	r3, [pc, #304]	; (80084c0 <xTaskIncrementTick+0x148>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3301      	adds	r3, #1
 8008392:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008394:	4a4a      	ldr	r2, [pc, #296]	; (80084c0 <xTaskIncrementTick+0x148>)
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d120      	bne.n	80083e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80083a0:	4b48      	ldr	r3, [pc, #288]	; (80084c4 <xTaskIncrementTick+0x14c>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00a      	beq.n	80083c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80083aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	603b      	str	r3, [r7, #0]
}
 80083bc:	bf00      	nop
 80083be:	e7fe      	b.n	80083be <xTaskIncrementTick+0x46>
 80083c0:	4b40      	ldr	r3, [pc, #256]	; (80084c4 <xTaskIncrementTick+0x14c>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	60fb      	str	r3, [r7, #12]
 80083c6:	4b40      	ldr	r3, [pc, #256]	; (80084c8 <xTaskIncrementTick+0x150>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a3e      	ldr	r2, [pc, #248]	; (80084c4 <xTaskIncrementTick+0x14c>)
 80083cc:	6013      	str	r3, [r2, #0]
 80083ce:	4a3e      	ldr	r2, [pc, #248]	; (80084c8 <xTaskIncrementTick+0x150>)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6013      	str	r3, [r2, #0]
 80083d4:	4b3d      	ldr	r3, [pc, #244]	; (80084cc <xTaskIncrementTick+0x154>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3301      	adds	r3, #1
 80083da:	4a3c      	ldr	r2, [pc, #240]	; (80084cc <xTaskIncrementTick+0x154>)
 80083dc:	6013      	str	r3, [r2, #0]
 80083de:	f000 faa9 	bl	8008934 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80083e2:	4b3b      	ldr	r3, [pc, #236]	; (80084d0 <xTaskIncrementTick+0x158>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d348      	bcc.n	800847e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083ec:	4b35      	ldr	r3, [pc, #212]	; (80084c4 <xTaskIncrementTick+0x14c>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d104      	bne.n	8008400 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083f6:	4b36      	ldr	r3, [pc, #216]	; (80084d0 <xTaskIncrementTick+0x158>)
 80083f8:	f04f 32ff 	mov.w	r2, #4294967295
 80083fc:	601a      	str	r2, [r3, #0]
					break;
 80083fe:	e03e      	b.n	800847e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008400:	4b30      	ldr	r3, [pc, #192]	; (80084c4 <xTaskIncrementTick+0x14c>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	429a      	cmp	r2, r3
 8008416:	d203      	bcs.n	8008420 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008418:	4a2d      	ldr	r2, [pc, #180]	; (80084d0 <xTaskIncrementTick+0x158>)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800841e:	e02e      	b.n	800847e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	3304      	adds	r3, #4
 8008424:	4618      	mov	r0, r3
 8008426:	f7fe fc9e 	bl	8006d66 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842e:	2b00      	cmp	r3, #0
 8008430:	d004      	beq.n	800843c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	3318      	adds	r3, #24
 8008436:	4618      	mov	r0, r3
 8008438:	f7fe fc95 	bl	8006d66 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008440:	2201      	movs	r2, #1
 8008442:	409a      	lsls	r2, r3
 8008444:	4b23      	ldr	r3, [pc, #140]	; (80084d4 <xTaskIncrementTick+0x15c>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4313      	orrs	r3, r2
 800844a:	4a22      	ldr	r2, [pc, #136]	; (80084d4 <xTaskIncrementTick+0x15c>)
 800844c:	6013      	str	r3, [r2, #0]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008452:	4613      	mov	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4413      	add	r3, r2
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4a1f      	ldr	r2, [pc, #124]	; (80084d8 <xTaskIncrementTick+0x160>)
 800845c:	441a      	add	r2, r3
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	3304      	adds	r3, #4
 8008462:	4619      	mov	r1, r3
 8008464:	4610      	mov	r0, r2
 8008466:	f7fe fc21 	bl	8006cac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800846e:	4b1b      	ldr	r3, [pc, #108]	; (80084dc <xTaskIncrementTick+0x164>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008474:	429a      	cmp	r2, r3
 8008476:	d3b9      	bcc.n	80083ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008478:	2301      	movs	r3, #1
 800847a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800847c:	e7b6      	b.n	80083ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800847e:	4b17      	ldr	r3, [pc, #92]	; (80084dc <xTaskIncrementTick+0x164>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008484:	4914      	ldr	r1, [pc, #80]	; (80084d8 <xTaskIncrementTick+0x160>)
 8008486:	4613      	mov	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4413      	add	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	440b      	add	r3, r1
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d901      	bls.n	800849a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008496:	2301      	movs	r3, #1
 8008498:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800849a:	4b11      	ldr	r3, [pc, #68]	; (80084e0 <xTaskIncrementTick+0x168>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d007      	beq.n	80084b2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80084a2:	2301      	movs	r3, #1
 80084a4:	617b      	str	r3, [r7, #20]
 80084a6:	e004      	b.n	80084b2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80084a8:	4b0e      	ldr	r3, [pc, #56]	; (80084e4 <xTaskIncrementTick+0x16c>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	3301      	adds	r3, #1
 80084ae:	4a0d      	ldr	r2, [pc, #52]	; (80084e4 <xTaskIncrementTick+0x16c>)
 80084b0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80084b2:	697b      	ldr	r3, [r7, #20]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3718      	adds	r7, #24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	200004b8 	.word	0x200004b8
 80084c0:	20000494 	.word	0x20000494
 80084c4:	20000448 	.word	0x20000448
 80084c8:	2000044c 	.word	0x2000044c
 80084cc:	200004a8 	.word	0x200004a8
 80084d0:	200004b0 	.word	0x200004b0
 80084d4:	20000498 	.word	0x20000498
 80084d8:	20000394 	.word	0x20000394
 80084dc:	20000390 	.word	0x20000390
 80084e0:	200004a4 	.word	0x200004a4
 80084e4:	200004a0 	.word	0x200004a0

080084e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80084e8:	b480      	push	{r7}
 80084ea:	b087      	sub	sp, #28
 80084ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80084ee:	4b29      	ldr	r3, [pc, #164]	; (8008594 <vTaskSwitchContext+0xac>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d003      	beq.n	80084fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80084f6:	4b28      	ldr	r3, [pc, #160]	; (8008598 <vTaskSwitchContext+0xb0>)
 80084f8:	2201      	movs	r2, #1
 80084fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80084fc:	e044      	b.n	8008588 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80084fe:	4b26      	ldr	r3, [pc, #152]	; (8008598 <vTaskSwitchContext+0xb0>)
 8008500:	2200      	movs	r2, #0
 8008502:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008504:	4b25      	ldr	r3, [pc, #148]	; (800859c <vTaskSwitchContext+0xb4>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	fab3 f383 	clz	r3, r3
 8008510:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008512:	7afb      	ldrb	r3, [r7, #11]
 8008514:	f1c3 031f 	rsb	r3, r3, #31
 8008518:	617b      	str	r3, [r7, #20]
 800851a:	4921      	ldr	r1, [pc, #132]	; (80085a0 <vTaskSwitchContext+0xb8>)
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	4613      	mov	r3, r2
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	4413      	add	r3, r2
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	440b      	add	r3, r1
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10a      	bne.n	8008544 <vTaskSwitchContext+0x5c>
	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	607b      	str	r3, [r7, #4]
}
 8008540:	bf00      	nop
 8008542:	e7fe      	b.n	8008542 <vTaskSwitchContext+0x5a>
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	4613      	mov	r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4413      	add	r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	4a14      	ldr	r2, [pc, #80]	; (80085a0 <vTaskSwitchContext+0xb8>)
 8008550:	4413      	add	r3, r2
 8008552:	613b      	str	r3, [r7, #16]
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	685a      	ldr	r2, [r3, #4]
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	605a      	str	r2, [r3, #4]
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	685a      	ldr	r2, [r3, #4]
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	3308      	adds	r3, #8
 8008566:	429a      	cmp	r2, r3
 8008568:	d104      	bne.n	8008574 <vTaskSwitchContext+0x8c>
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	685a      	ldr	r2, [r3, #4]
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	605a      	str	r2, [r3, #4]
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	4a0a      	ldr	r2, [pc, #40]	; (80085a4 <vTaskSwitchContext+0xbc>)
 800857c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800857e:	4b09      	ldr	r3, [pc, #36]	; (80085a4 <vTaskSwitchContext+0xbc>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	334c      	adds	r3, #76	; 0x4c
 8008584:	4a08      	ldr	r2, [pc, #32]	; (80085a8 <vTaskSwitchContext+0xc0>)
 8008586:	6013      	str	r3, [r2, #0]
}
 8008588:	bf00      	nop
 800858a:	371c      	adds	r7, #28
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr
 8008594:	200004b8 	.word	0x200004b8
 8008598:	200004a4 	.word	0x200004a4
 800859c:	20000498 	.word	0x20000498
 80085a0:	20000394 	.word	0x20000394
 80085a4:	20000390 	.word	0x20000390
 80085a8:	20000020 	.word	0x20000020

080085ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10a      	bne.n	80085d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80085bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	60fb      	str	r3, [r7, #12]
}
 80085ce:	bf00      	nop
 80085d0:	e7fe      	b.n	80085d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085d2:	4b07      	ldr	r3, [pc, #28]	; (80085f0 <vTaskPlaceOnEventList+0x44>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3318      	adds	r3, #24
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7fe fb8a 	bl	8006cf4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80085e0:	2101      	movs	r1, #1
 80085e2:	6838      	ldr	r0, [r7, #0]
 80085e4:	f000 fb82 	bl	8008cec <prvAddCurrentTaskToDelayedList>
}
 80085e8:	bf00      	nop
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	20000390 	.word	0x20000390

080085f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b086      	sub	sp, #24
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10a      	bne.n	8008620 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800860a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860e:	f383 8811 	msr	BASEPRI, r3
 8008612:	f3bf 8f6f 	isb	sy
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	60fb      	str	r3, [r7, #12]
}
 800861c:	bf00      	nop
 800861e:	e7fe      	b.n	800861e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	3318      	adds	r3, #24
 8008624:	4618      	mov	r0, r3
 8008626:	f7fe fb9e 	bl	8006d66 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800862a:	4b1d      	ldr	r3, [pc, #116]	; (80086a0 <xTaskRemoveFromEventList+0xac>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d11c      	bne.n	800866c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	3304      	adds	r3, #4
 8008636:	4618      	mov	r0, r3
 8008638:	f7fe fb95 	bl	8006d66 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008640:	2201      	movs	r2, #1
 8008642:	409a      	lsls	r2, r3
 8008644:	4b17      	ldr	r3, [pc, #92]	; (80086a4 <xTaskRemoveFromEventList+0xb0>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4313      	orrs	r3, r2
 800864a:	4a16      	ldr	r2, [pc, #88]	; (80086a4 <xTaskRemoveFromEventList+0xb0>)
 800864c:	6013      	str	r3, [r2, #0]
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008652:	4613      	mov	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4413      	add	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4a13      	ldr	r2, [pc, #76]	; (80086a8 <xTaskRemoveFromEventList+0xb4>)
 800865c:	441a      	add	r2, r3
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	3304      	adds	r3, #4
 8008662:	4619      	mov	r1, r3
 8008664:	4610      	mov	r0, r2
 8008666:	f7fe fb21 	bl	8006cac <vListInsertEnd>
 800866a:	e005      	b.n	8008678 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	3318      	adds	r3, #24
 8008670:	4619      	mov	r1, r3
 8008672:	480e      	ldr	r0, [pc, #56]	; (80086ac <xTaskRemoveFromEventList+0xb8>)
 8008674:	f7fe fb1a 	bl	8006cac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800867c:	4b0c      	ldr	r3, [pc, #48]	; (80086b0 <xTaskRemoveFromEventList+0xbc>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008682:	429a      	cmp	r2, r3
 8008684:	d905      	bls.n	8008692 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008686:	2301      	movs	r3, #1
 8008688:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800868a:	4b0a      	ldr	r3, [pc, #40]	; (80086b4 <xTaskRemoveFromEventList+0xc0>)
 800868c:	2201      	movs	r2, #1
 800868e:	601a      	str	r2, [r3, #0]
 8008690:	e001      	b.n	8008696 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008692:	2300      	movs	r3, #0
 8008694:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008696:	697b      	ldr	r3, [r7, #20]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3718      	adds	r7, #24
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	200004b8 	.word	0x200004b8
 80086a4:	20000498 	.word	0x20000498
 80086a8:	20000394 	.word	0x20000394
 80086ac:	20000450 	.word	0x20000450
 80086b0:	20000390 	.word	0x20000390
 80086b4:	200004a4 	.word	0x200004a4

080086b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80086c0:	4b06      	ldr	r3, [pc, #24]	; (80086dc <vTaskInternalSetTimeOutState+0x24>)
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80086c8:	4b05      	ldr	r3, [pc, #20]	; (80086e0 <vTaskInternalSetTimeOutState+0x28>)
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	605a      	str	r2, [r3, #4]
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr
 80086dc:	200004a8 	.word	0x200004a8
 80086e0:	20000494 	.word	0x20000494

080086e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b088      	sub	sp, #32
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10a      	bne.n	800870a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80086f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f8:	f383 8811 	msr	BASEPRI, r3
 80086fc:	f3bf 8f6f 	isb	sy
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	613b      	str	r3, [r7, #16]
}
 8008706:	bf00      	nop
 8008708:	e7fe      	b.n	8008708 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10a      	bne.n	8008726 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	60fb      	str	r3, [r7, #12]
}
 8008722:	bf00      	nop
 8008724:	e7fe      	b.n	8008724 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008726:	f000 fc75 	bl	8009014 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800872a:	4b1d      	ldr	r3, [pc, #116]	; (80087a0 <xTaskCheckForTimeOut+0xbc>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	69ba      	ldr	r2, [r7, #24]
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008742:	d102      	bne.n	800874a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008744:	2300      	movs	r3, #0
 8008746:	61fb      	str	r3, [r7, #28]
 8008748:	e023      	b.n	8008792 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	4b15      	ldr	r3, [pc, #84]	; (80087a4 <xTaskCheckForTimeOut+0xc0>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	429a      	cmp	r2, r3
 8008754:	d007      	beq.n	8008766 <xTaskCheckForTimeOut+0x82>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	69ba      	ldr	r2, [r7, #24]
 800875c:	429a      	cmp	r2, r3
 800875e:	d302      	bcc.n	8008766 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008760:	2301      	movs	r3, #1
 8008762:	61fb      	str	r3, [r7, #28]
 8008764:	e015      	b.n	8008792 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	429a      	cmp	r2, r3
 800876e:	d20b      	bcs.n	8008788 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	1ad2      	subs	r2, r2, r3
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f7ff ff9b 	bl	80086b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008782:	2300      	movs	r3, #0
 8008784:	61fb      	str	r3, [r7, #28]
 8008786:	e004      	b.n	8008792 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	2200      	movs	r2, #0
 800878c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800878e:	2301      	movs	r3, #1
 8008790:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008792:	f000 fc6f 	bl	8009074 <vPortExitCritical>

	return xReturn;
 8008796:	69fb      	ldr	r3, [r7, #28]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3720      	adds	r7, #32
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	20000494 	.word	0x20000494
 80087a4:	200004a8 	.word	0x200004a8

080087a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80087a8:	b480      	push	{r7}
 80087aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80087ac:	4b03      	ldr	r3, [pc, #12]	; (80087bc <vTaskMissedYield+0x14>)
 80087ae:	2201      	movs	r2, #1
 80087b0:	601a      	str	r2, [r3, #0]
}
 80087b2:	bf00      	nop
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr
 80087bc:	200004a4 	.word	0x200004a4

080087c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80087c8:	f000 f852 	bl	8008870 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80087cc:	4b06      	ldr	r3, [pc, #24]	; (80087e8 <prvIdleTask+0x28>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d9f9      	bls.n	80087c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80087d4:	4b05      	ldr	r3, [pc, #20]	; (80087ec <prvIdleTask+0x2c>)
 80087d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087da:	601a      	str	r2, [r3, #0]
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80087e4:	e7f0      	b.n	80087c8 <prvIdleTask+0x8>
 80087e6:	bf00      	nop
 80087e8:	20000394 	.word	0x20000394
 80087ec:	e000ed04 	.word	0xe000ed04

080087f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087f6:	2300      	movs	r3, #0
 80087f8:	607b      	str	r3, [r7, #4]
 80087fa:	e00c      	b.n	8008816 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	4613      	mov	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4a12      	ldr	r2, [pc, #72]	; (8008850 <prvInitialiseTaskLists+0x60>)
 8008808:	4413      	add	r3, r2
 800880a:	4618      	mov	r0, r3
 800880c:	f7fe fa21 	bl	8006c52 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	3301      	adds	r3, #1
 8008814:	607b      	str	r3, [r7, #4]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2b06      	cmp	r3, #6
 800881a:	d9ef      	bls.n	80087fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800881c:	480d      	ldr	r0, [pc, #52]	; (8008854 <prvInitialiseTaskLists+0x64>)
 800881e:	f7fe fa18 	bl	8006c52 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008822:	480d      	ldr	r0, [pc, #52]	; (8008858 <prvInitialiseTaskLists+0x68>)
 8008824:	f7fe fa15 	bl	8006c52 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008828:	480c      	ldr	r0, [pc, #48]	; (800885c <prvInitialiseTaskLists+0x6c>)
 800882a:	f7fe fa12 	bl	8006c52 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800882e:	480c      	ldr	r0, [pc, #48]	; (8008860 <prvInitialiseTaskLists+0x70>)
 8008830:	f7fe fa0f 	bl	8006c52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008834:	480b      	ldr	r0, [pc, #44]	; (8008864 <prvInitialiseTaskLists+0x74>)
 8008836:	f7fe fa0c 	bl	8006c52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800883a:	4b0b      	ldr	r3, [pc, #44]	; (8008868 <prvInitialiseTaskLists+0x78>)
 800883c:	4a05      	ldr	r2, [pc, #20]	; (8008854 <prvInitialiseTaskLists+0x64>)
 800883e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008840:	4b0a      	ldr	r3, [pc, #40]	; (800886c <prvInitialiseTaskLists+0x7c>)
 8008842:	4a05      	ldr	r2, [pc, #20]	; (8008858 <prvInitialiseTaskLists+0x68>)
 8008844:	601a      	str	r2, [r3, #0]
}
 8008846:	bf00      	nop
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	20000394 	.word	0x20000394
 8008854:	20000420 	.word	0x20000420
 8008858:	20000434 	.word	0x20000434
 800885c:	20000450 	.word	0x20000450
 8008860:	20000464 	.word	0x20000464
 8008864:	2000047c 	.word	0x2000047c
 8008868:	20000448 	.word	0x20000448
 800886c:	2000044c 	.word	0x2000044c

08008870 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008876:	e019      	b.n	80088ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008878:	f000 fbcc 	bl	8009014 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800887c:	4b10      	ldr	r3, [pc, #64]	; (80088c0 <prvCheckTasksWaitingTermination+0x50>)
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	3304      	adds	r3, #4
 8008888:	4618      	mov	r0, r3
 800888a:	f7fe fa6c 	bl	8006d66 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800888e:	4b0d      	ldr	r3, [pc, #52]	; (80088c4 <prvCheckTasksWaitingTermination+0x54>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3b01      	subs	r3, #1
 8008894:	4a0b      	ldr	r2, [pc, #44]	; (80088c4 <prvCheckTasksWaitingTermination+0x54>)
 8008896:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008898:	4b0b      	ldr	r3, [pc, #44]	; (80088c8 <prvCheckTasksWaitingTermination+0x58>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3b01      	subs	r3, #1
 800889e:	4a0a      	ldr	r2, [pc, #40]	; (80088c8 <prvCheckTasksWaitingTermination+0x58>)
 80088a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80088a2:	f000 fbe7 	bl	8009074 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 f810 	bl	80088cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088ac:	4b06      	ldr	r3, [pc, #24]	; (80088c8 <prvCheckTasksWaitingTermination+0x58>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1e1      	bne.n	8008878 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	20000464 	.word	0x20000464
 80088c4:	20000490 	.word	0x20000490
 80088c8:	20000478 	.word	0x20000478

080088cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	334c      	adds	r3, #76	; 0x4c
 80088d8:	4618      	mov	r0, r3
 80088da:	f00e fa19 	bl	8016d10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d108      	bne.n	80088fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ec:	4618      	mov	r0, r3
 80088ee:	f000 fd7f 	bl	80093f0 <vPortFree>
				vPortFree( pxTCB );
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fd7c 	bl	80093f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80088f8:	e018      	b.n	800892c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008900:	2b01      	cmp	r3, #1
 8008902:	d103      	bne.n	800890c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 fd73 	bl	80093f0 <vPortFree>
	}
 800890a:	e00f      	b.n	800892c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008912:	2b02      	cmp	r3, #2
 8008914:	d00a      	beq.n	800892c <prvDeleteTCB+0x60>
	__asm volatile
 8008916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891a:	f383 8811 	msr	BASEPRI, r3
 800891e:	f3bf 8f6f 	isb	sy
 8008922:	f3bf 8f4f 	dsb	sy
 8008926:	60fb      	str	r3, [r7, #12]
}
 8008928:	bf00      	nop
 800892a:	e7fe      	b.n	800892a <prvDeleteTCB+0x5e>
	}
 800892c:	bf00      	nop
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800893a:	4b0c      	ldr	r3, [pc, #48]	; (800896c <prvResetNextTaskUnblockTime+0x38>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d104      	bne.n	800894e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008944:	4b0a      	ldr	r3, [pc, #40]	; (8008970 <prvResetNextTaskUnblockTime+0x3c>)
 8008946:	f04f 32ff 	mov.w	r2, #4294967295
 800894a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800894c:	e008      	b.n	8008960 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800894e:	4b07      	ldr	r3, [pc, #28]	; (800896c <prvResetNextTaskUnblockTime+0x38>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	4a04      	ldr	r2, [pc, #16]	; (8008970 <prvResetNextTaskUnblockTime+0x3c>)
 800895e:	6013      	str	r3, [r2, #0]
}
 8008960:	bf00      	nop
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	20000448 	.word	0x20000448
 8008970:	200004b0 	.word	0x200004b0

08008974 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800897a:	4b0b      	ldr	r3, [pc, #44]	; (80089a8 <xTaskGetSchedulerState+0x34>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d102      	bne.n	8008988 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008982:	2301      	movs	r3, #1
 8008984:	607b      	str	r3, [r7, #4]
 8008986:	e008      	b.n	800899a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008988:	4b08      	ldr	r3, [pc, #32]	; (80089ac <xTaskGetSchedulerState+0x38>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d102      	bne.n	8008996 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008990:	2302      	movs	r3, #2
 8008992:	607b      	str	r3, [r7, #4]
 8008994:	e001      	b.n	800899a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008996:	2300      	movs	r3, #0
 8008998:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800899a:	687b      	ldr	r3, [r7, #4]
	}
 800899c:	4618      	mov	r0, r3
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr
 80089a8:	2000049c 	.word	0x2000049c
 80089ac:	200004b8 	.word	0x200004b8

080089b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80089bc:	2300      	movs	r3, #0
 80089be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d05e      	beq.n	8008a84 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ca:	4b31      	ldr	r3, [pc, #196]	; (8008a90 <xTaskPriorityInherit+0xe0>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d24e      	bcs.n	8008a72 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	db06      	blt.n	80089ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089dc:	4b2c      	ldr	r3, [pc, #176]	; (8008a90 <xTaskPriorityInherit+0xe0>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e2:	f1c3 0207 	rsb	r2, r3, #7
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	6959      	ldr	r1, [r3, #20]
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f2:	4613      	mov	r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4413      	add	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4a26      	ldr	r2, [pc, #152]	; (8008a94 <xTaskPriorityInherit+0xe4>)
 80089fc:	4413      	add	r3, r2
 80089fe:	4299      	cmp	r1, r3
 8008a00:	d12f      	bne.n	8008a62 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	3304      	adds	r3, #4
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7fe f9ad 	bl	8006d66 <uxListRemove>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d10a      	bne.n	8008a28 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a16:	2201      	movs	r2, #1
 8008a18:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1c:	43da      	mvns	r2, r3
 8008a1e:	4b1e      	ldr	r3, [pc, #120]	; (8008a98 <xTaskPriorityInherit+0xe8>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4013      	ands	r3, r2
 8008a24:	4a1c      	ldr	r2, [pc, #112]	; (8008a98 <xTaskPriorityInherit+0xe8>)
 8008a26:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a28:	4b19      	ldr	r3, [pc, #100]	; (8008a90 <xTaskPriorityInherit+0xe0>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a36:	2201      	movs	r2, #1
 8008a38:	409a      	lsls	r2, r3
 8008a3a:	4b17      	ldr	r3, [pc, #92]	; (8008a98 <xTaskPriorityInherit+0xe8>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	4a15      	ldr	r2, [pc, #84]	; (8008a98 <xTaskPriorityInherit+0xe8>)
 8008a42:	6013      	str	r3, [r2, #0]
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a48:	4613      	mov	r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	4a10      	ldr	r2, [pc, #64]	; (8008a94 <xTaskPriorityInherit+0xe4>)
 8008a52:	441a      	add	r2, r3
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	3304      	adds	r3, #4
 8008a58:	4619      	mov	r1, r3
 8008a5a:	4610      	mov	r0, r2
 8008a5c:	f7fe f926 	bl	8006cac <vListInsertEnd>
 8008a60:	e004      	b.n	8008a6c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a62:	4b0b      	ldr	r3, [pc, #44]	; (8008a90 <xTaskPriorityInherit+0xe0>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	60fb      	str	r3, [r7, #12]
 8008a70:	e008      	b.n	8008a84 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a76:	4b06      	ldr	r3, [pc, #24]	; (8008a90 <xTaskPriorityInherit+0xe0>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d201      	bcs.n	8008a84 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008a80:	2301      	movs	r3, #1
 8008a82:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a84:	68fb      	ldr	r3, [r7, #12]
	}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	20000390 	.word	0x20000390
 8008a94:	20000394 	.word	0x20000394
 8008a98:	20000498 	.word	0x20000498

08008a9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b086      	sub	sp, #24
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d06e      	beq.n	8008b90 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008ab2:	4b3a      	ldr	r3, [pc, #232]	; (8008b9c <xTaskPriorityDisinherit+0x100>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d00a      	beq.n	8008ad2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac0:	f383 8811 	msr	BASEPRI, r3
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	60fb      	str	r3, [r7, #12]
}
 8008ace:	bf00      	nop
 8008ad0:	e7fe      	b.n	8008ad0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10a      	bne.n	8008af0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	60bb      	str	r3, [r7, #8]
}
 8008aec:	bf00      	nop
 8008aee:	e7fe      	b.n	8008aee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008af4:	1e5a      	subs	r2, r3, #1
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d044      	beq.n	8008b90 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d140      	bne.n	8008b90 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	3304      	adds	r3, #4
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7fe f927 	bl	8006d66 <uxListRemove>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d115      	bne.n	8008b4a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b22:	491f      	ldr	r1, [pc, #124]	; (8008ba0 <xTaskPriorityDisinherit+0x104>)
 8008b24:	4613      	mov	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4413      	add	r3, r2
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	440b      	add	r3, r1
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10a      	bne.n	8008b4a <xTaskPriorityDisinherit+0xae>
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b38:	2201      	movs	r2, #1
 8008b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3e:	43da      	mvns	r2, r3
 8008b40:	4b18      	ldr	r3, [pc, #96]	; (8008ba4 <xTaskPriorityDisinherit+0x108>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4013      	ands	r3, r2
 8008b46:	4a17      	ldr	r2, [pc, #92]	; (8008ba4 <xTaskPriorityDisinherit+0x108>)
 8008b48:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b56:	f1c3 0207 	rsb	r2, r3, #7
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b62:	2201      	movs	r2, #1
 8008b64:	409a      	lsls	r2, r3
 8008b66:	4b0f      	ldr	r3, [pc, #60]	; (8008ba4 <xTaskPriorityDisinherit+0x108>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	4a0d      	ldr	r2, [pc, #52]	; (8008ba4 <xTaskPriorityDisinherit+0x108>)
 8008b6e:	6013      	str	r3, [r2, #0]
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b74:	4613      	mov	r3, r2
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4a08      	ldr	r2, [pc, #32]	; (8008ba0 <xTaskPriorityDisinherit+0x104>)
 8008b7e:	441a      	add	r2, r3
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	3304      	adds	r3, #4
 8008b84:	4619      	mov	r1, r3
 8008b86:	4610      	mov	r0, r2
 8008b88:	f7fe f890 	bl	8006cac <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b90:	697b      	ldr	r3, [r7, #20]
	}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3718      	adds	r7, #24
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	20000390 	.word	0x20000390
 8008ba0:	20000394 	.word	0x20000394
 8008ba4:	20000498 	.word	0x20000498

08008ba8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b088      	sub	sp, #32
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d077      	beq.n	8008cb0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10a      	bne.n	8008bde <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bcc:	f383 8811 	msr	BASEPRI, r3
 8008bd0:	f3bf 8f6f 	isb	sy
 8008bd4:	f3bf 8f4f 	dsb	sy
 8008bd8:	60fb      	str	r3, [r7, #12]
}
 8008bda:	bf00      	nop
 8008bdc:	e7fe      	b.n	8008bdc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008be2:	683a      	ldr	r2, [r7, #0]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d902      	bls.n	8008bee <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	61fb      	str	r3, [r7, #28]
 8008bec:	e002      	b.n	8008bf4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf8:	69fa      	ldr	r2, [r7, #28]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d058      	beq.n	8008cb0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c02:	697a      	ldr	r2, [r7, #20]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d153      	bne.n	8008cb0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008c08:	4b2b      	ldr	r3, [pc, #172]	; (8008cb8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d10a      	bne.n	8008c28 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	60bb      	str	r3, [r7, #8]
}
 8008c24:	bf00      	nop
 8008c26:	e7fe      	b.n	8008c26 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	69fa      	ldr	r2, [r7, #28]
 8008c32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	699b      	ldr	r3, [r3, #24]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	db04      	blt.n	8008c46 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	f1c3 0207 	rsb	r2, r3, #7
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	6959      	ldr	r1, [r3, #20]
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	4413      	add	r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4a19      	ldr	r2, [pc, #100]	; (8008cbc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008c56:	4413      	add	r3, r2
 8008c58:	4299      	cmp	r1, r3
 8008c5a:	d129      	bne.n	8008cb0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	3304      	adds	r3, #4
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7fe f880 	bl	8006d66 <uxListRemove>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10a      	bne.n	8008c82 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c70:	2201      	movs	r2, #1
 8008c72:	fa02 f303 	lsl.w	r3, r2, r3
 8008c76:	43da      	mvns	r2, r3
 8008c78:	4b11      	ldr	r3, [pc, #68]	; (8008cc0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	4a10      	ldr	r2, [pc, #64]	; (8008cc0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008c80:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c86:	2201      	movs	r2, #1
 8008c88:	409a      	lsls	r2, r3
 8008c8a:	4b0d      	ldr	r3, [pc, #52]	; (8008cc0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	4a0b      	ldr	r2, [pc, #44]	; (8008cc0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c98:	4613      	mov	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4a06      	ldr	r2, [pc, #24]	; (8008cbc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008ca2:	441a      	add	r2, r3
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	3304      	adds	r3, #4
 8008ca8:	4619      	mov	r1, r3
 8008caa:	4610      	mov	r0, r2
 8008cac:	f7fd fffe 	bl	8006cac <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008cb0:	bf00      	nop
 8008cb2:	3720      	adds	r7, #32
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	20000390 	.word	0x20000390
 8008cbc:	20000394 	.word	0x20000394
 8008cc0:	20000498 	.word	0x20000498

08008cc4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008cc4:	b480      	push	{r7}
 8008cc6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008cc8:	4b07      	ldr	r3, [pc, #28]	; (8008ce8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d004      	beq.n	8008cda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008cd0:	4b05      	ldr	r3, [pc, #20]	; (8008ce8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cd6:	3201      	adds	r2, #1
 8008cd8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008cda:	4b03      	ldr	r3, [pc, #12]	; (8008ce8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
	}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	20000390 	.word	0x20000390

08008cec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008cf6:	4b29      	ldr	r3, [pc, #164]	; (8008d9c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cfc:	4b28      	ldr	r3, [pc, #160]	; (8008da0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	3304      	adds	r3, #4
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7fe f82f 	bl	8006d66 <uxListRemove>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d10b      	bne.n	8008d26 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008d0e:	4b24      	ldr	r3, [pc, #144]	; (8008da0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d14:	2201      	movs	r2, #1
 8008d16:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1a:	43da      	mvns	r2, r3
 8008d1c:	4b21      	ldr	r3, [pc, #132]	; (8008da4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4013      	ands	r3, r2
 8008d22:	4a20      	ldr	r2, [pc, #128]	; (8008da4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d24:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d2c:	d10a      	bne.n	8008d44 <prvAddCurrentTaskToDelayedList+0x58>
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d007      	beq.n	8008d44 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d34:	4b1a      	ldr	r3, [pc, #104]	; (8008da0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	3304      	adds	r3, #4
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	481a      	ldr	r0, [pc, #104]	; (8008da8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008d3e:	f7fd ffb5 	bl	8006cac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d42:	e026      	b.n	8008d92 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4413      	add	r3, r2
 8008d4a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d4c:	4b14      	ldr	r3, [pc, #80]	; (8008da0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68ba      	ldr	r2, [r7, #8]
 8008d52:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d209      	bcs.n	8008d70 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d5c:	4b13      	ldr	r3, [pc, #76]	; (8008dac <prvAddCurrentTaskToDelayedList+0xc0>)
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	4b0f      	ldr	r3, [pc, #60]	; (8008da0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	3304      	adds	r3, #4
 8008d66:	4619      	mov	r1, r3
 8008d68:	4610      	mov	r0, r2
 8008d6a:	f7fd ffc3 	bl	8006cf4 <vListInsert>
}
 8008d6e:	e010      	b.n	8008d92 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d70:	4b0f      	ldr	r3, [pc, #60]	; (8008db0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	4b0a      	ldr	r3, [pc, #40]	; (8008da0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	3304      	adds	r3, #4
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	4610      	mov	r0, r2
 8008d7e:	f7fd ffb9 	bl	8006cf4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d82:	4b0c      	ldr	r3, [pc, #48]	; (8008db4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d202      	bcs.n	8008d92 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008d8c:	4a09      	ldr	r2, [pc, #36]	; (8008db4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	6013      	str	r3, [r2, #0]
}
 8008d92:	bf00      	nop
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	20000494 	.word	0x20000494
 8008da0:	20000390 	.word	0x20000390
 8008da4:	20000498 	.word	0x20000498
 8008da8:	2000047c 	.word	0x2000047c
 8008dac:	2000044c 	.word	0x2000044c
 8008db0:	20000448 	.word	0x20000448
 8008db4:	200004b0 	.word	0x200004b0

08008db8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	3b04      	subs	r3, #4
 8008dc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008dd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	3b04      	subs	r3, #4
 8008dd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	f023 0201 	bic.w	r2, r3, #1
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	3b04      	subs	r3, #4
 8008de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008de8:	4a0c      	ldr	r2, [pc, #48]	; (8008e1c <pxPortInitialiseStack+0x64>)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	3b14      	subs	r3, #20
 8008df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	3b04      	subs	r3, #4
 8008dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f06f 0202 	mvn.w	r2, #2
 8008e06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	3b20      	subs	r3, #32
 8008e0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr
 8008e1c:	08008e21 	.word	0x08008e21

08008e20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e26:	2300      	movs	r3, #0
 8008e28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e2a:	4b12      	ldr	r3, [pc, #72]	; (8008e74 <prvTaskExitError+0x54>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e32:	d00a      	beq.n	8008e4a <prvTaskExitError+0x2a>
	__asm volatile
 8008e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e38:	f383 8811 	msr	BASEPRI, r3
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	60fb      	str	r3, [r7, #12]
}
 8008e46:	bf00      	nop
 8008e48:	e7fe      	b.n	8008e48 <prvTaskExitError+0x28>
	__asm volatile
 8008e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	60bb      	str	r3, [r7, #8]
}
 8008e5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e5e:	bf00      	nop
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d0fc      	beq.n	8008e60 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e66:	bf00      	nop
 8008e68:	bf00      	nop
 8008e6a:	3714      	adds	r7, #20
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	20000010 	.word	0x20000010
	...

08008e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e80:	4b07      	ldr	r3, [pc, #28]	; (8008ea0 <pxCurrentTCBConst2>)
 8008e82:	6819      	ldr	r1, [r3, #0]
 8008e84:	6808      	ldr	r0, [r1, #0]
 8008e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8a:	f380 8809 	msr	PSP, r0
 8008e8e:	f3bf 8f6f 	isb	sy
 8008e92:	f04f 0000 	mov.w	r0, #0
 8008e96:	f380 8811 	msr	BASEPRI, r0
 8008e9a:	4770      	bx	lr
 8008e9c:	f3af 8000 	nop.w

08008ea0 <pxCurrentTCBConst2>:
 8008ea0:	20000390 	.word	0x20000390
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ea4:	bf00      	nop
 8008ea6:	bf00      	nop

08008ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ea8:	4808      	ldr	r0, [pc, #32]	; (8008ecc <prvPortStartFirstTask+0x24>)
 8008eaa:	6800      	ldr	r0, [r0, #0]
 8008eac:	6800      	ldr	r0, [r0, #0]
 8008eae:	f380 8808 	msr	MSP, r0
 8008eb2:	f04f 0000 	mov.w	r0, #0
 8008eb6:	f380 8814 	msr	CONTROL, r0
 8008eba:	b662      	cpsie	i
 8008ebc:	b661      	cpsie	f
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	df00      	svc	0
 8008ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008eca:	bf00      	nop
 8008ecc:	e000ed08 	.word	0xe000ed08

08008ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ed6:	4b46      	ldr	r3, [pc, #280]	; (8008ff0 <xPortStartScheduler+0x120>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a46      	ldr	r2, [pc, #280]	; (8008ff4 <xPortStartScheduler+0x124>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d10a      	bne.n	8008ef6 <xPortStartScheduler+0x26>
	__asm volatile
 8008ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	613b      	str	r3, [r7, #16]
}
 8008ef2:	bf00      	nop
 8008ef4:	e7fe      	b.n	8008ef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ef6:	4b3e      	ldr	r3, [pc, #248]	; (8008ff0 <xPortStartScheduler+0x120>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a3f      	ldr	r2, [pc, #252]	; (8008ff8 <xPortStartScheduler+0x128>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d10a      	bne.n	8008f16 <xPortStartScheduler+0x46>
	__asm volatile
 8008f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	60fb      	str	r3, [r7, #12]
}
 8008f12:	bf00      	nop
 8008f14:	e7fe      	b.n	8008f14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f16:	4b39      	ldr	r3, [pc, #228]	; (8008ffc <xPortStartScheduler+0x12c>)
 8008f18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	22ff      	movs	r2, #255	; 0xff
 8008f26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f30:	78fb      	ldrb	r3, [r7, #3]
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f38:	b2da      	uxtb	r2, r3
 8008f3a:	4b31      	ldr	r3, [pc, #196]	; (8009000 <xPortStartScheduler+0x130>)
 8008f3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f3e:	4b31      	ldr	r3, [pc, #196]	; (8009004 <xPortStartScheduler+0x134>)
 8008f40:	2207      	movs	r2, #7
 8008f42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f44:	e009      	b.n	8008f5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008f46:	4b2f      	ldr	r3, [pc, #188]	; (8009004 <xPortStartScheduler+0x134>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	4a2d      	ldr	r2, [pc, #180]	; (8009004 <xPortStartScheduler+0x134>)
 8008f4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f50:	78fb      	ldrb	r3, [r7, #3]
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	005b      	lsls	r3, r3, #1
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f5a:	78fb      	ldrb	r3, [r7, #3]
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f62:	2b80      	cmp	r3, #128	; 0x80
 8008f64:	d0ef      	beq.n	8008f46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f66:	4b27      	ldr	r3, [pc, #156]	; (8009004 <xPortStartScheduler+0x134>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f1c3 0307 	rsb	r3, r3, #7
 8008f6e:	2b04      	cmp	r3, #4
 8008f70:	d00a      	beq.n	8008f88 <xPortStartScheduler+0xb8>
	__asm volatile
 8008f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	60bb      	str	r3, [r7, #8]
}
 8008f84:	bf00      	nop
 8008f86:	e7fe      	b.n	8008f86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f88:	4b1e      	ldr	r3, [pc, #120]	; (8009004 <xPortStartScheduler+0x134>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	021b      	lsls	r3, r3, #8
 8008f8e:	4a1d      	ldr	r2, [pc, #116]	; (8009004 <xPortStartScheduler+0x134>)
 8008f90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f92:	4b1c      	ldr	r3, [pc, #112]	; (8009004 <xPortStartScheduler+0x134>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f9a:	4a1a      	ldr	r2, [pc, #104]	; (8009004 <xPortStartScheduler+0x134>)
 8008f9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fa6:	4b18      	ldr	r3, [pc, #96]	; (8009008 <xPortStartScheduler+0x138>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a17      	ldr	r2, [pc, #92]	; (8009008 <xPortStartScheduler+0x138>)
 8008fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fb2:	4b15      	ldr	r3, [pc, #84]	; (8009008 <xPortStartScheduler+0x138>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a14      	ldr	r2, [pc, #80]	; (8009008 <xPortStartScheduler+0x138>)
 8008fb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008fbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fbe:	f000 f8dd 	bl	800917c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008fc2:	4b12      	ldr	r3, [pc, #72]	; (800900c <xPortStartScheduler+0x13c>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008fc8:	f000 f8fc 	bl	80091c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008fcc:	4b10      	ldr	r3, [pc, #64]	; (8009010 <xPortStartScheduler+0x140>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a0f      	ldr	r2, [pc, #60]	; (8009010 <xPortStartScheduler+0x140>)
 8008fd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008fd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008fd8:	f7ff ff66 	bl	8008ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008fdc:	f7ff fa84 	bl	80084e8 <vTaskSwitchContext>
	prvTaskExitError();
 8008fe0:	f7ff ff1e 	bl	8008e20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3718      	adds	r7, #24
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	e000ed00 	.word	0xe000ed00
 8008ff4:	410fc271 	.word	0x410fc271
 8008ff8:	410fc270 	.word	0x410fc270
 8008ffc:	e000e400 	.word	0xe000e400
 8009000:	200004bc 	.word	0x200004bc
 8009004:	200004c0 	.word	0x200004c0
 8009008:	e000ed20 	.word	0xe000ed20
 800900c:	20000010 	.word	0x20000010
 8009010:	e000ef34 	.word	0xe000ef34

08009014 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
	__asm volatile
 800901a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901e:	f383 8811 	msr	BASEPRI, r3
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	f3bf 8f4f 	dsb	sy
 800902a:	607b      	str	r3, [r7, #4]
}
 800902c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800902e:	4b0f      	ldr	r3, [pc, #60]	; (800906c <vPortEnterCritical+0x58>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	3301      	adds	r3, #1
 8009034:	4a0d      	ldr	r2, [pc, #52]	; (800906c <vPortEnterCritical+0x58>)
 8009036:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009038:	4b0c      	ldr	r3, [pc, #48]	; (800906c <vPortEnterCritical+0x58>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d10f      	bne.n	8009060 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009040:	4b0b      	ldr	r3, [pc, #44]	; (8009070 <vPortEnterCritical+0x5c>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	b2db      	uxtb	r3, r3
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00a      	beq.n	8009060 <vPortEnterCritical+0x4c>
	__asm volatile
 800904a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	603b      	str	r3, [r7, #0]
}
 800905c:	bf00      	nop
 800905e:	e7fe      	b.n	800905e <vPortEnterCritical+0x4a>
	}
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	20000010 	.word	0x20000010
 8009070:	e000ed04 	.word	0xe000ed04

08009074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800907a:	4b12      	ldr	r3, [pc, #72]	; (80090c4 <vPortExitCritical+0x50>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10a      	bne.n	8009098 <vPortExitCritical+0x24>
	__asm volatile
 8009082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009086:	f383 8811 	msr	BASEPRI, r3
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	607b      	str	r3, [r7, #4]
}
 8009094:	bf00      	nop
 8009096:	e7fe      	b.n	8009096 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009098:	4b0a      	ldr	r3, [pc, #40]	; (80090c4 <vPortExitCritical+0x50>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3b01      	subs	r3, #1
 800909e:	4a09      	ldr	r2, [pc, #36]	; (80090c4 <vPortExitCritical+0x50>)
 80090a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090a2:	4b08      	ldr	r3, [pc, #32]	; (80090c4 <vPortExitCritical+0x50>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d105      	bne.n	80090b6 <vPortExitCritical+0x42>
 80090aa:	2300      	movs	r3, #0
 80090ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	f383 8811 	msr	BASEPRI, r3
}
 80090b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80090b6:	bf00      	nop
 80090b8:	370c      	adds	r7, #12
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	20000010 	.word	0x20000010
	...

080090d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090d0:	f3ef 8009 	mrs	r0, PSP
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	4b15      	ldr	r3, [pc, #84]	; (8009130 <pxCurrentTCBConst>)
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	f01e 0f10 	tst.w	lr, #16
 80090e0:	bf08      	it	eq
 80090e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80090e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ea:	6010      	str	r0, [r2, #0]
 80090ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80090f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80090f4:	f380 8811 	msr	BASEPRI, r0
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f7ff f9f2 	bl	80084e8 <vTaskSwitchContext>
 8009104:	f04f 0000 	mov.w	r0, #0
 8009108:	f380 8811 	msr	BASEPRI, r0
 800910c:	bc09      	pop	{r0, r3}
 800910e:	6819      	ldr	r1, [r3, #0]
 8009110:	6808      	ldr	r0, [r1, #0]
 8009112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009116:	f01e 0f10 	tst.w	lr, #16
 800911a:	bf08      	it	eq
 800911c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009120:	f380 8809 	msr	PSP, r0
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	f3af 8000 	nop.w

08009130 <pxCurrentTCBConst>:
 8009130:	20000390 	.word	0x20000390
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009134:	bf00      	nop
 8009136:	bf00      	nop

08009138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
	__asm volatile
 800913e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009142:	f383 8811 	msr	BASEPRI, r3
 8009146:	f3bf 8f6f 	isb	sy
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	607b      	str	r3, [r7, #4]
}
 8009150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009152:	f7ff f911 	bl	8008378 <xTaskIncrementTick>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d003      	beq.n	8009164 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800915c:	4b06      	ldr	r3, [pc, #24]	; (8009178 <SysTick_Handler+0x40>)
 800915e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009162:	601a      	str	r2, [r3, #0]
 8009164:	2300      	movs	r3, #0
 8009166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	f383 8811 	msr	BASEPRI, r3
}
 800916e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009170:	bf00      	nop
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	e000ed04 	.word	0xe000ed04

0800917c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800917c:	b480      	push	{r7}
 800917e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009180:	4b0b      	ldr	r3, [pc, #44]	; (80091b0 <vPortSetupTimerInterrupt+0x34>)
 8009182:	2200      	movs	r2, #0
 8009184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009186:	4b0b      	ldr	r3, [pc, #44]	; (80091b4 <vPortSetupTimerInterrupt+0x38>)
 8009188:	2200      	movs	r2, #0
 800918a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800918c:	4b0a      	ldr	r3, [pc, #40]	; (80091b8 <vPortSetupTimerInterrupt+0x3c>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a0a      	ldr	r2, [pc, #40]	; (80091bc <vPortSetupTimerInterrupt+0x40>)
 8009192:	fba2 2303 	umull	r2, r3, r2, r3
 8009196:	099b      	lsrs	r3, r3, #6
 8009198:	4a09      	ldr	r2, [pc, #36]	; (80091c0 <vPortSetupTimerInterrupt+0x44>)
 800919a:	3b01      	subs	r3, #1
 800919c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800919e:	4b04      	ldr	r3, [pc, #16]	; (80091b0 <vPortSetupTimerInterrupt+0x34>)
 80091a0:	2207      	movs	r2, #7
 80091a2:	601a      	str	r2, [r3, #0]
}
 80091a4:	bf00      	nop
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	e000e010 	.word	0xe000e010
 80091b4:	e000e018 	.word	0xe000e018
 80091b8:	20000004 	.word	0x20000004
 80091bc:	10624dd3 	.word	0x10624dd3
 80091c0:	e000e014 	.word	0xe000e014

080091c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80091d4 <vPortEnableVFP+0x10>
 80091c8:	6801      	ldr	r1, [r0, #0]
 80091ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80091ce:	6001      	str	r1, [r0, #0]
 80091d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80091d2:	bf00      	nop
 80091d4:	e000ed88 	.word	0xe000ed88

080091d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80091de:	f3ef 8305 	mrs	r3, IPSR
 80091e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2b0f      	cmp	r3, #15
 80091e8:	d914      	bls.n	8009214 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80091ea:	4a17      	ldr	r2, [pc, #92]	; (8009248 <vPortValidateInterruptPriority+0x70>)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	4413      	add	r3, r2
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80091f4:	4b15      	ldr	r3, [pc, #84]	; (800924c <vPortValidateInterruptPriority+0x74>)
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	7afa      	ldrb	r2, [r7, #11]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d20a      	bcs.n	8009214 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80091fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	607b      	str	r3, [r7, #4]
}
 8009210:	bf00      	nop
 8009212:	e7fe      	b.n	8009212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009214:	4b0e      	ldr	r3, [pc, #56]	; (8009250 <vPortValidateInterruptPriority+0x78>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800921c:	4b0d      	ldr	r3, [pc, #52]	; (8009254 <vPortValidateInterruptPriority+0x7c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	429a      	cmp	r2, r3
 8009222:	d90a      	bls.n	800923a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009228:	f383 8811 	msr	BASEPRI, r3
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	603b      	str	r3, [r7, #0]
}
 8009236:	bf00      	nop
 8009238:	e7fe      	b.n	8009238 <vPortValidateInterruptPriority+0x60>
	}
 800923a:	bf00      	nop
 800923c:	3714      	adds	r7, #20
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	e000e3f0 	.word	0xe000e3f0
 800924c:	200004bc 	.word	0x200004bc
 8009250:	e000ed0c 	.word	0xe000ed0c
 8009254:	200004c0 	.word	0x200004c0

08009258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b08a      	sub	sp, #40	; 0x28
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009260:	2300      	movs	r3, #0
 8009262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009264:	f7fe ffbc 	bl	80081e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009268:	4b5b      	ldr	r3, [pc, #364]	; (80093d8 <pvPortMalloc+0x180>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009270:	f000 f92c 	bl	80094cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009274:	4b59      	ldr	r3, [pc, #356]	; (80093dc <pvPortMalloc+0x184>)
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4013      	ands	r3, r2
 800927c:	2b00      	cmp	r3, #0
 800927e:	f040 8093 	bne.w	80093a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d01d      	beq.n	80092c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009288:	2208      	movs	r2, #8
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4413      	add	r3, r2
 800928e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f003 0307 	and.w	r3, r3, #7
 8009296:	2b00      	cmp	r3, #0
 8009298:	d014      	beq.n	80092c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f023 0307 	bic.w	r3, r3, #7
 80092a0:	3308      	adds	r3, #8
 80092a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f003 0307 	and.w	r3, r3, #7
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00a      	beq.n	80092c4 <pvPortMalloc+0x6c>
	__asm volatile
 80092ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b2:	f383 8811 	msr	BASEPRI, r3
 80092b6:	f3bf 8f6f 	isb	sy
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	617b      	str	r3, [r7, #20]
}
 80092c0:	bf00      	nop
 80092c2:	e7fe      	b.n	80092c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d06e      	beq.n	80093a8 <pvPortMalloc+0x150>
 80092ca:	4b45      	ldr	r3, [pc, #276]	; (80093e0 <pvPortMalloc+0x188>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d869      	bhi.n	80093a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80092d4:	4b43      	ldr	r3, [pc, #268]	; (80093e4 <pvPortMalloc+0x18c>)
 80092d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80092d8:	4b42      	ldr	r3, [pc, #264]	; (80093e4 <pvPortMalloc+0x18c>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092de:	e004      	b.n	80092ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80092e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80092e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d903      	bls.n	80092fc <pvPortMalloc+0xa4>
 80092f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1f1      	bne.n	80092e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80092fc:	4b36      	ldr	r3, [pc, #216]	; (80093d8 <pvPortMalloc+0x180>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009302:	429a      	cmp	r2, r3
 8009304:	d050      	beq.n	80093a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2208      	movs	r2, #8
 800930c:	4413      	add	r3, r2
 800930e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	6a3b      	ldr	r3, [r7, #32]
 8009316:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	1ad2      	subs	r2, r2, r3
 8009320:	2308      	movs	r3, #8
 8009322:	005b      	lsls	r3, r3, #1
 8009324:	429a      	cmp	r2, r3
 8009326:	d91f      	bls.n	8009368 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4413      	add	r3, r2
 800932e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	f003 0307 	and.w	r3, r3, #7
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00a      	beq.n	8009350 <pvPortMalloc+0xf8>
	__asm volatile
 800933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933e:	f383 8811 	msr	BASEPRI, r3
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	613b      	str	r3, [r7, #16]
}
 800934c:	bf00      	nop
 800934e:	e7fe      	b.n	800934e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	1ad2      	subs	r2, r2, r3
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800935c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009362:	69b8      	ldr	r0, [r7, #24]
 8009364:	f000 f914 	bl	8009590 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009368:	4b1d      	ldr	r3, [pc, #116]	; (80093e0 <pvPortMalloc+0x188>)
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	4a1b      	ldr	r2, [pc, #108]	; (80093e0 <pvPortMalloc+0x188>)
 8009374:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009376:	4b1a      	ldr	r3, [pc, #104]	; (80093e0 <pvPortMalloc+0x188>)
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	4b1b      	ldr	r3, [pc, #108]	; (80093e8 <pvPortMalloc+0x190>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	429a      	cmp	r2, r3
 8009380:	d203      	bcs.n	800938a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009382:	4b17      	ldr	r3, [pc, #92]	; (80093e0 <pvPortMalloc+0x188>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a18      	ldr	r2, [pc, #96]	; (80093e8 <pvPortMalloc+0x190>)
 8009388:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800938a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938c:	685a      	ldr	r2, [r3, #4]
 800938e:	4b13      	ldr	r3, [pc, #76]	; (80093dc <pvPortMalloc+0x184>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	431a      	orrs	r2, r3
 8009394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009396:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	2200      	movs	r2, #0
 800939c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800939e:	4b13      	ldr	r3, [pc, #76]	; (80093ec <pvPortMalloc+0x194>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	3301      	adds	r3, #1
 80093a4:	4a11      	ldr	r2, [pc, #68]	; (80093ec <pvPortMalloc+0x194>)
 80093a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093a8:	f7fe ff28 	bl	80081fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	f003 0307 	and.w	r3, r3, #7
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00a      	beq.n	80093cc <pvPortMalloc+0x174>
	__asm volatile
 80093b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	60fb      	str	r3, [r7, #12]
}
 80093c8:	bf00      	nop
 80093ca:	e7fe      	b.n	80093ca <pvPortMalloc+0x172>
	return pvReturn;
 80093cc:	69fb      	ldr	r3, [r7, #28]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3728      	adds	r7, #40	; 0x28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	200067dc 	.word	0x200067dc
 80093dc:	200067f0 	.word	0x200067f0
 80093e0:	200067e0 	.word	0x200067e0
 80093e4:	200067d4 	.word	0x200067d4
 80093e8:	200067e4 	.word	0x200067e4
 80093ec:	200067e8 	.word	0x200067e8

080093f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b086      	sub	sp, #24
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d04d      	beq.n	800949e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009402:	2308      	movs	r3, #8
 8009404:	425b      	negs	r3, r3
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	4413      	add	r3, r2
 800940a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	4b24      	ldr	r3, [pc, #144]	; (80094a8 <vPortFree+0xb8>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4013      	ands	r3, r2
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10a      	bne.n	8009434 <vPortFree+0x44>
	__asm volatile
 800941e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009422:	f383 8811 	msr	BASEPRI, r3
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	60fb      	str	r3, [r7, #12]
}
 8009430:	bf00      	nop
 8009432:	e7fe      	b.n	8009432 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00a      	beq.n	8009452 <vPortFree+0x62>
	__asm volatile
 800943c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	60bb      	str	r3, [r7, #8]
}
 800944e:	bf00      	nop
 8009450:	e7fe      	b.n	8009450 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	685a      	ldr	r2, [r3, #4]
 8009456:	4b14      	ldr	r3, [pc, #80]	; (80094a8 <vPortFree+0xb8>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4013      	ands	r3, r2
 800945c:	2b00      	cmp	r3, #0
 800945e:	d01e      	beq.n	800949e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d11a      	bne.n	800949e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	685a      	ldr	r2, [r3, #4]
 800946c:	4b0e      	ldr	r3, [pc, #56]	; (80094a8 <vPortFree+0xb8>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	43db      	mvns	r3, r3
 8009472:	401a      	ands	r2, r3
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009478:	f7fe feb2 	bl	80081e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	685a      	ldr	r2, [r3, #4]
 8009480:	4b0a      	ldr	r3, [pc, #40]	; (80094ac <vPortFree+0xbc>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4413      	add	r3, r2
 8009486:	4a09      	ldr	r2, [pc, #36]	; (80094ac <vPortFree+0xbc>)
 8009488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800948a:	6938      	ldr	r0, [r7, #16]
 800948c:	f000 f880 	bl	8009590 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009490:	4b07      	ldr	r3, [pc, #28]	; (80094b0 <vPortFree+0xc0>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	3301      	adds	r3, #1
 8009496:	4a06      	ldr	r2, [pc, #24]	; (80094b0 <vPortFree+0xc0>)
 8009498:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800949a:	f7fe feaf 	bl	80081fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800949e:	bf00      	nop
 80094a0:	3718      	adds	r7, #24
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	200067f0 	.word	0x200067f0
 80094ac:	200067e0 	.word	0x200067e0
 80094b0:	200067ec 	.word	0x200067ec

080094b4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80094b4:	b480      	push	{r7}
 80094b6:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 80094b8:	4b03      	ldr	r3, [pc, #12]	; (80094c8 <xPortGetFreeHeapSize+0x14>)
 80094ba:	681b      	ldr	r3, [r3, #0]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	200067e0 	.word	0x200067e0

080094cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094d2:	f246 3310 	movw	r3, #25360	; 0x6310
 80094d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094d8:	4b27      	ldr	r3, [pc, #156]	; (8009578 <prvHeapInit+0xac>)
 80094da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f003 0307 	and.w	r3, r3, #7
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00c      	beq.n	8009500 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	3307      	adds	r3, #7
 80094ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f023 0307 	bic.w	r3, r3, #7
 80094f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	4a1f      	ldr	r2, [pc, #124]	; (8009578 <prvHeapInit+0xac>)
 80094fc:	4413      	add	r3, r2
 80094fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009504:	4a1d      	ldr	r2, [pc, #116]	; (800957c <prvHeapInit+0xb0>)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800950a:	4b1c      	ldr	r3, [pc, #112]	; (800957c <prvHeapInit+0xb0>)
 800950c:	2200      	movs	r2, #0
 800950e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	68ba      	ldr	r2, [r7, #8]
 8009514:	4413      	add	r3, r2
 8009516:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009518:	2208      	movs	r2, #8
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	1a9b      	subs	r3, r3, r2
 800951e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f023 0307 	bic.w	r3, r3, #7
 8009526:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	4a15      	ldr	r2, [pc, #84]	; (8009580 <prvHeapInit+0xb4>)
 800952c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800952e:	4b14      	ldr	r3, [pc, #80]	; (8009580 <prvHeapInit+0xb4>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2200      	movs	r2, #0
 8009534:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009536:	4b12      	ldr	r3, [pc, #72]	; (8009580 <prvHeapInit+0xb4>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2200      	movs	r2, #0
 800953c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	1ad2      	subs	r2, r2, r3
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800954c:	4b0c      	ldr	r3, [pc, #48]	; (8009580 <prvHeapInit+0xb4>)
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	4a0a      	ldr	r2, [pc, #40]	; (8009584 <prvHeapInit+0xb8>)
 800955a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	4a09      	ldr	r2, [pc, #36]	; (8009588 <prvHeapInit+0xbc>)
 8009562:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009564:	4b09      	ldr	r3, [pc, #36]	; (800958c <prvHeapInit+0xc0>)
 8009566:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800956a:	601a      	str	r2, [r3, #0]
}
 800956c:	bf00      	nop
 800956e:	3714      	adds	r7, #20
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr
 8009578:	200004c4 	.word	0x200004c4
 800957c:	200067d4 	.word	0x200067d4
 8009580:	200067dc 	.word	0x200067dc
 8009584:	200067e4 	.word	0x200067e4
 8009588:	200067e0 	.word	0x200067e0
 800958c:	200067f0 	.word	0x200067f0

08009590 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009598:	4b28      	ldr	r3, [pc, #160]	; (800963c <prvInsertBlockIntoFreeList+0xac>)
 800959a:	60fb      	str	r3, [r7, #12]
 800959c:	e002      	b.n	80095a4 <prvInsertBlockIntoFreeList+0x14>
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d8f7      	bhi.n	800959e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	68ba      	ldr	r2, [r7, #8]
 80095b8:	4413      	add	r3, r2
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d108      	bne.n	80095d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	685a      	ldr	r2, [r3, #4]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	441a      	add	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	441a      	add	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d118      	bne.n	8009618 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	4b15      	ldr	r3, [pc, #84]	; (8009640 <prvInsertBlockIntoFreeList+0xb0>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d00d      	beq.n	800960e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	685a      	ldr	r2, [r3, #4]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	441a      	add	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	e008      	b.n	8009620 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800960e:	4b0c      	ldr	r3, [pc, #48]	; (8009640 <prvInsertBlockIntoFreeList+0xb0>)
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	e003      	b.n	8009620 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	429a      	cmp	r2, r3
 8009626:	d002      	beq.n	800962e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800962e:	bf00      	nop
 8009630:	3714      	adds	r7, #20
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	200067d4 	.word	0x200067d4
 8009640:	200067dc 	.word	0x200067dc

08009644 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	330c      	adds	r3, #12
 8009654:	461a      	mov	r2, r3
 8009656:	6839      	ldr	r1, [r7, #0]
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f001 fff3 	bl	800b644 <tcpip_send_msg_wait_sem>
 800965e:	4603      	mov	r3, r0
 8009660:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d103      	bne.n	8009672 <netconn_apimsg+0x2e>
    return apimsg->err;
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009670:	e001      	b.n	8009676 <netconn_apimsg+0x32>
  }
  return err;
 8009672:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
	...

08009680 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b08c      	sub	sp, #48	; 0x30
 8009684:	af00      	add	r7, sp, #0
 8009686:	4603      	mov	r3, r0
 8009688:	603a      	str	r2, [r7, #0]
 800968a:	71fb      	strb	r3, [r7, #7]
 800968c:	460b      	mov	r3, r1
 800968e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009690:	79fb      	ldrb	r3, [r7, #7]
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	4618      	mov	r0, r3
 8009696:	f000 ff21 	bl	800a4dc <netconn_alloc>
 800969a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800969c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d054      	beq.n	800974c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80096a2:	79bb      	ldrb	r3, [r7, #6]
 80096a4:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80096a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a8:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80096aa:	f107 0308 	add.w	r3, r7, #8
 80096ae:	4619      	mov	r1, r3
 80096b0:	4829      	ldr	r0, [pc, #164]	; (8009758 <netconn_new_with_proto_and_callback+0xd8>)
 80096b2:	f7ff ffc7 	bl	8009644 <netconn_apimsg>
 80096b6:	4603      	mov	r3, r0
 80096b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80096bc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d043      	beq.n	800974c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80096c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d005      	beq.n	80096d8 <netconn_new_with_proto_and_callback+0x58>
 80096cc:	4b23      	ldr	r3, [pc, #140]	; (800975c <netconn_new_with_proto_and_callback+0xdc>)
 80096ce:	22a3      	movs	r2, #163	; 0xa3
 80096d0:	4923      	ldr	r1, [pc, #140]	; (8009760 <netconn_new_with_proto_and_callback+0xe0>)
 80096d2:	4824      	ldr	r0, [pc, #144]	; (8009764 <netconn_new_with_proto_and_callback+0xe4>)
 80096d4:	f00d fab6 	bl	8016c44 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80096d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096da:	3310      	adds	r3, #16
 80096dc:	4618      	mov	r0, r3
 80096de:	f00c ff88 	bl	80165f2 <sys_mbox_valid>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d105      	bne.n	80096f4 <netconn_new_with_proto_and_callback+0x74>
 80096e8:	4b1c      	ldr	r3, [pc, #112]	; (800975c <netconn_new_with_proto_and_callback+0xdc>)
 80096ea:	22a4      	movs	r2, #164	; 0xa4
 80096ec:	491e      	ldr	r1, [pc, #120]	; (8009768 <netconn_new_with_proto_and_callback+0xe8>)
 80096ee:	481d      	ldr	r0, [pc, #116]	; (8009764 <netconn_new_with_proto_and_callback+0xe4>)
 80096f0:	f00d faa8 	bl	8016c44 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80096f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f6:	3314      	adds	r3, #20
 80096f8:	4618      	mov	r0, r3
 80096fa:	f00c ff7a 	bl	80165f2 <sys_mbox_valid>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d005      	beq.n	8009710 <netconn_new_with_proto_and_callback+0x90>
 8009704:	4b15      	ldr	r3, [pc, #84]	; (800975c <netconn_new_with_proto_and_callback+0xdc>)
 8009706:	22a6      	movs	r2, #166	; 0xa6
 8009708:	4918      	ldr	r1, [pc, #96]	; (800976c <netconn_new_with_proto_and_callback+0xec>)
 800970a:	4816      	ldr	r0, [pc, #88]	; (8009764 <netconn_new_with_proto_and_callback+0xe4>)
 800970c:	f00d fa9a 	bl	8016c44 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009712:	330c      	adds	r3, #12
 8009714:	4618      	mov	r0, r3
 8009716:	f00c fffd 	bl	8016714 <sys_sem_valid>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d105      	bne.n	800972c <netconn_new_with_proto_and_callback+0xac>
 8009720:	4b0e      	ldr	r3, [pc, #56]	; (800975c <netconn_new_with_proto_and_callback+0xdc>)
 8009722:	22a9      	movs	r2, #169	; 0xa9
 8009724:	4912      	ldr	r1, [pc, #72]	; (8009770 <netconn_new_with_proto_and_callback+0xf0>)
 8009726:	480f      	ldr	r0, [pc, #60]	; (8009764 <netconn_new_with_proto_and_callback+0xe4>)
 8009728:	f00d fa8c 	bl	8016c44 <iprintf>
      sys_sem_free(&conn->op_completed);
 800972c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972e:	330c      	adds	r3, #12
 8009730:	4618      	mov	r0, r3
 8009732:	f00c ffe2 	bl	80166fa <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8009736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009738:	3310      	adds	r3, #16
 800973a:	4618      	mov	r0, r3
 800973c:	f00c fed2 	bl	80164e4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009740:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009742:	2007      	movs	r0, #7
 8009744:	f002 fce6 	bl	800c114 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009748:	2300      	movs	r3, #0
 800974a:	e000      	b.n	800974e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800974c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800974e:	4618      	mov	r0, r3
 8009750:	3730      	adds	r7, #48	; 0x30
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	0800a4b1 	.word	0x0800a4b1
 800975c:	08017ad8 	.word	0x08017ad8
 8009760:	08017b0c 	.word	0x08017b0c
 8009764:	08017b30 	.word	0x08017b30
 8009768:	08017b58 	.word	0x08017b58
 800976c:	08017b70 	.word	0x08017b70
 8009770:	08017b94 	.word	0x08017b94

08009774 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b08c      	sub	sp, #48	; 0x30
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d101      	bne.n	8009786 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	e014      	b.n	80097b0 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800978a:	2329      	movs	r3, #41	; 0x29
 800978c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800978e:	f107 030c 	add.w	r3, r7, #12
 8009792:	4619      	mov	r1, r3
 8009794:	4808      	ldr	r0, [pc, #32]	; (80097b8 <netconn_prepare_delete+0x44>)
 8009796:	f7ff ff55 	bl	8009644 <netconn_apimsg>
 800979a:	4603      	mov	r3, r0
 800979c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80097a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d002      	beq.n	80097ae <netconn_prepare_delete+0x3a>
    return err;
 80097a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80097ac:	e000      	b.n	80097b0 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3730      	adds	r7, #48	; 0x30
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	0800aa15 	.word	0x0800aa15

080097bc <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d101      	bne.n	80097ce <netconn_delete+0x12>
    return ERR_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	e00d      	b.n	80097ea <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7ff ffd0 	bl	8009774 <netconn_prepare_delete>
 80097d4:	4603      	mov	r3, r0
 80097d6:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80097d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d102      	bne.n	80097e6 <netconn_delete+0x2a>
    netconn_free(conn);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 fee9 	bl	800a5b8 <netconn_free>
  }
  return err;
 80097e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
	...

080097f4 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b08e      	sub	sp, #56	; 0x38
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	4613      	mov	r3, r2
 8009800:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d109      	bne.n	800981c <netconn_bind+0x28>
 8009808:	4b11      	ldr	r3, [pc, #68]	; (8009850 <netconn_bind+0x5c>)
 800980a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800980e:	4911      	ldr	r1, [pc, #68]	; (8009854 <netconn_bind+0x60>)
 8009810:	4811      	ldr	r0, [pc, #68]	; (8009858 <netconn_bind+0x64>)
 8009812:	f00d fa17 	bl	8016c44 <iprintf>
 8009816:	f06f 030f 	mvn.w	r3, #15
 800981a:	e015      	b.n	8009848 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d101      	bne.n	8009826 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8009822:	4b0e      	ldr	r3, [pc, #56]	; (800985c <netconn_bind+0x68>)
 8009824:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800982e:	88fb      	ldrh	r3, [r7, #6]
 8009830:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8009832:	f107 0314 	add.w	r3, r7, #20
 8009836:	4619      	mov	r1, r3
 8009838:	4809      	ldr	r0, [pc, #36]	; (8009860 <netconn_bind+0x6c>)
 800983a:	f7ff ff03 	bl	8009644 <netconn_apimsg>
 800983e:	4603      	mov	r3, r0
 8009840:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8009844:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009848:	4618      	mov	r0, r3
 800984a:	3738      	adds	r7, #56	; 0x38
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}
 8009850:	08017ad8 	.word	0x08017ad8
 8009854:	08017c10 	.word	0x08017c10
 8009858:	08017b30 	.word	0x08017b30
 800985c:	0801b0d4 	.word	0x0801b0d4
 8009860:	0800abdd 	.word	0x0800abdd

08009864 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b088      	sub	sp, #32
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	4613      	mov	r3, r2
 8009870:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8009872:	2300      	movs	r3, #0
 8009874:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d109      	bne.n	8009890 <netconn_recv_data+0x2c>
 800987c:	4b58      	ldr	r3, [pc, #352]	; (80099e0 <netconn_recv_data+0x17c>)
 800987e:	f44f 7212 	mov.w	r2, #584	; 0x248
 8009882:	4958      	ldr	r1, [pc, #352]	; (80099e4 <netconn_recv_data+0x180>)
 8009884:	4858      	ldr	r0, [pc, #352]	; (80099e8 <netconn_recv_data+0x184>)
 8009886:	f00d f9dd 	bl	8016c44 <iprintf>
 800988a:	f06f 030f 	mvn.w	r3, #15
 800988e:	e0a2      	b.n	80099d6 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	2200      	movs	r2, #0
 8009894:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d109      	bne.n	80098b0 <netconn_recv_data+0x4c>
 800989c:	4b50      	ldr	r3, [pc, #320]	; (80099e0 <netconn_recv_data+0x17c>)
 800989e:	f240 224a 	movw	r2, #586	; 0x24a
 80098a2:	4952      	ldr	r1, [pc, #328]	; (80099ec <netconn_recv_data+0x188>)
 80098a4:	4850      	ldr	r0, [pc, #320]	; (80099e8 <netconn_recv_data+0x184>)
 80098a6:	f00d f9cd 	bl	8016c44 <iprintf>
 80098aa:	f06f 030f 	mvn.w	r3, #15
 80098ae:	e092      	b.n	80099d6 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	3310      	adds	r3, #16
 80098b4:	4618      	mov	r0, r3
 80098b6:	f00c fe9c 	bl	80165f2 <sys_mbox_valid>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d10e      	bne.n	80098de <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f000 fa45 	bl	8009d50 <netconn_err>
 80098c6:	4603      	mov	r3, r0
 80098c8:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80098ca:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d002      	beq.n	80098d8 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80098d2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80098d6:	e07e      	b.n	80099d6 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80098d8:	f06f 030a 	mvn.w	r3, #10
 80098dc:	e07b      	b.n	80099d6 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	7f1b      	ldrb	r3, [r3, #28]
 80098e2:	f003 0302 	and.w	r3, r3, #2
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10f      	bne.n	800990a <netconn_recv_data+0xa6>
 80098ea:	79fb      	ldrb	r3, [r7, #7]
 80098ec:	f003 0304 	and.w	r3, r3, #4
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d10a      	bne.n	800990a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	7f1b      	ldrb	r3, [r3, #28]
 80098f8:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d104      	bne.n	800990a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d023      	beq.n	8009952 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	3310      	adds	r3, #16
 800990e:	f107 0218 	add.w	r2, r7, #24
 8009912:	4611      	mov	r1, r2
 8009914:	4618      	mov	r0, r3
 8009916:	f00c fe50 	bl	80165ba <sys_arch_mbox_tryfetch>
 800991a:	4603      	mov	r3, r0
 800991c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009920:	d11f      	bne.n	8009962 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f000 fa14 	bl	8009d50 <netconn_err>
 8009928:	4603      	mov	r3, r0
 800992a:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800992c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8009934:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009938:	e04d      	b.n	80099d6 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	7f1b      	ldrb	r3, [r3, #28]
 800993e:	f003 0301 	and.w	r3, r3, #1
 8009942:	2b00      	cmp	r3, #0
 8009944:	d002      	beq.n	800994c <netconn_recv_data+0xe8>
        return ERR_CONN;
 8009946:	f06f 030a 	mvn.w	r3, #10
 800994a:	e044      	b.n	80099d6 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800994c:	f06f 0306 	mvn.w	r3, #6
 8009950:	e041      	b.n	80099d6 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	3310      	adds	r3, #16
 8009956:	f107 0118 	add.w	r1, r7, #24
 800995a:	2200      	movs	r2, #0
 800995c:	4618      	mov	r0, r3
 800995e:	f00c fded 	bl	801653c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800996a:	2b10      	cmp	r3, #16
 800996c:	d117      	bne.n	800999e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	f107 0217 	add.w	r2, r7, #23
 8009974:	4611      	mov	r1, r2
 8009976:	4618      	mov	r0, r3
 8009978:	f000 fa3c 	bl	8009df4 <lwip_netconn_is_err_msg>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d009      	beq.n	8009996 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8009982:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009986:	f113 0f0f 	cmn.w	r3, #15
 800998a:	d101      	bne.n	8009990 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800998c:	2300      	movs	r3, #0
 800998e:	e022      	b.n	80099d6 <netconn_recv_data+0x172>
      }
      return err;
 8009990:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009994:	e01f      	b.n	80099d6 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	891b      	ldrh	r3, [r3, #8]
 800999a:	83fb      	strh	r3, [r7, #30]
 800999c:	e00d      	b.n	80099ba <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d106      	bne.n	80099b2 <netconn_recv_data+0x14e>
 80099a4:	4b0e      	ldr	r3, [pc, #56]	; (80099e0 <netconn_recv_data+0x17c>)
 80099a6:	f240 2291 	movw	r2, #657	; 0x291
 80099aa:	4911      	ldr	r1, [pc, #68]	; (80099f0 <netconn_recv_data+0x18c>)
 80099ac:	480e      	ldr	r0, [pc, #56]	; (80099e8 <netconn_recv_data+0x184>)
 80099ae:	f00d f949 	bl	8016c44 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	891b      	ldrh	r3, [r3, #8]
 80099b8:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d005      	beq.n	80099ce <netconn_recv_data+0x16a>
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c6:	8bfa      	ldrh	r2, [r7, #30]
 80099c8:	2101      	movs	r1, #1
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80099ce:	69ba      	ldr	r2, [r7, #24]
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3720      	adds	r7, #32
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	08017ad8 	.word	0x08017ad8
 80099e4:	08017cf0 	.word	0x08017cf0
 80099e8:	08017b30 	.word	0x08017b30
 80099ec:	08017d10 	.word	0x08017d10
 80099f0:	08017d2c 	.word	0x08017d2c

080099f4 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d005      	beq.n	8009a12 <netconn_tcp_recvd_msg+0x1e>
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a0e:	2b10      	cmp	r3, #16
 8009a10:	d009      	beq.n	8009a26 <netconn_tcp_recvd_msg+0x32>
 8009a12:	4b0c      	ldr	r3, [pc, #48]	; (8009a44 <netconn_tcp_recvd_msg+0x50>)
 8009a14:	f240 22a7 	movw	r2, #679	; 0x2a7
 8009a18:	490b      	ldr	r1, [pc, #44]	; (8009a48 <netconn_tcp_recvd_msg+0x54>)
 8009a1a:	480c      	ldr	r0, [pc, #48]	; (8009a4c <netconn_tcp_recvd_msg+0x58>)
 8009a1c:	f00d f912 	bl	8016c44 <iprintf>
 8009a20:	f06f 030f 	mvn.w	r3, #15
 8009a24:	e00a      	b.n	8009a3c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	68ba      	ldr	r2, [r7, #8]
 8009a30:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8009a32:	6879      	ldr	r1, [r7, #4]
 8009a34:	4806      	ldr	r0, [pc, #24]	; (8009a50 <netconn_tcp_recvd_msg+0x5c>)
 8009a36:	f7ff fe05 	bl	8009644 <netconn_apimsg>
 8009a3a:	4603      	mov	r3, r0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	08017ad8 	.word	0x08017ad8
 8009a48:	08017d38 	.word	0x08017d38
 8009a4c:	08017b30 	.word	0x08017b30
 8009a50:	0800aceb 	.word	0x0800aceb

08009a54 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b090      	sub	sp, #64	; 0x40
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	4613      	mov	r3, r2
 8009a60:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	3310      	adds	r3, #16
 8009a66:	4618      	mov	r0, r3
 8009a68:	f00c fdc3 	bl	80165f2 <sys_mbox_valid>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d102      	bne.n	8009a78 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8009a72:	f06f 030a 	mvn.w	r3, #10
 8009a76:	e06d      	b.n	8009b54 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	7f1b      	ldrb	r3, [r3, #28]
 8009a7c:	b25b      	sxtb	r3, r3
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	da07      	bge.n	8009a92 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	7f1b      	ldrb	r3, [r3, #28]
 8009a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a8a:	b2da      	uxtb	r2, r3
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8009a90:	e039      	b.n	8009b06 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009a92:	79fb      	ldrb	r3, [r7, #7]
 8009a94:	461a      	mov	r2, r3
 8009a96:	68b9      	ldr	r1, [r7, #8]
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f7ff fee3 	bl	8009864 <netconn_recv_data>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8009aa4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d002      	beq.n	8009ab2 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009aac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009ab0:	e050      	b.n	8009b54 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009ab8:	79fb      	ldrb	r3, [r7, #7]
 8009aba:	f003 0308 	and.w	r3, r3, #8
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10e      	bne.n	8009ae0 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8009ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d002      	beq.n	8009ace <netconn_recv_data_tcp+0x7a>
 8009ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aca:	891b      	ldrh	r3, [r3, #8]
 8009acc:	e000      	b.n	8009ad0 <netconn_recv_data_tcp+0x7c>
 8009ace:	2301      	movs	r3, #1
 8009ad0:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8009ad2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009ad4:	f107 0214 	add.w	r2, r7, #20
 8009ad8:	4619      	mov	r1, r3
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f7ff ff8a 	bl	80099f4 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d134      	bne.n	8009b50 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8009ae6:	79fb      	ldrb	r3, [r7, #7]
 8009ae8:	f003 0310 	and.w	r3, r3, #16
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d009      	beq.n	8009b04 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	7f1b      	ldrb	r3, [r3, #28]
 8009af4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009af8:	b2da      	uxtb	r2, r3
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8009afe:	f06f 0306 	mvn.w	r3, #6
 8009b02:	e027      	b.n	8009b54 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8009b04:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d005      	beq.n	8009b1a <netconn_recv_data_tcp+0xc6>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b12:	2200      	movs	r2, #0
 8009b14:	2101      	movs	r1, #1
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10f      	bne.n	8009b42 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f000 f914 	bl	8009d50 <netconn_err>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8009b2e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d002      	beq.n	8009b3c <netconn_recv_data_tcp+0xe8>
          return err;
 8009b36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b3a:	e00b      	b.n	8009b54 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009b3c:	f06f 030d 	mvn.w	r3, #13
 8009b40:	e008      	b.n	8009b54 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8009b42:	2101      	movs	r1, #1
 8009b44:	68f8      	ldr	r0, [r7, #12]
 8009b46:	f000 f8d3 	bl	8009cf0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009b4a:	f06f 030e 	mvn.w	r3, #14
 8009b4e:	e001      	b.n	8009b54 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8009b50:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3740      	adds	r7, #64	; 0x40
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b086      	sub	sp, #24
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8009b66:	2300      	movs	r3, #0
 8009b68:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d109      	bne.n	8009b84 <netconn_recv+0x28>
 8009b70:	4b32      	ldr	r3, [pc, #200]	; (8009c3c <netconn_recv+0xe0>)
 8009b72:	f240 3263 	movw	r2, #867	; 0x363
 8009b76:	4932      	ldr	r1, [pc, #200]	; (8009c40 <netconn_recv+0xe4>)
 8009b78:	4832      	ldr	r0, [pc, #200]	; (8009c44 <netconn_recv+0xe8>)
 8009b7a:	f00d f863 	bl	8016c44 <iprintf>
 8009b7e:	f06f 030f 	mvn.w	r3, #15
 8009b82:	e056      	b.n	8009c32 <netconn_recv+0xd6>
  *new_buf = NULL;
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	2200      	movs	r2, #0
 8009b88:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d109      	bne.n	8009ba4 <netconn_recv+0x48>
 8009b90:	4b2a      	ldr	r3, [pc, #168]	; (8009c3c <netconn_recv+0xe0>)
 8009b92:	f240 3265 	movw	r2, #869	; 0x365
 8009b96:	492c      	ldr	r1, [pc, #176]	; (8009c48 <netconn_recv+0xec>)
 8009b98:	482a      	ldr	r0, [pc, #168]	; (8009c44 <netconn_recv+0xe8>)
 8009b9a:	f00d f853 	bl	8016c44 <iprintf>
 8009b9e:	f06f 030f 	mvn.w	r3, #15
 8009ba2:	e046      	b.n	8009c32 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009bac:	2b10      	cmp	r3, #16
 8009bae:	d13a      	bne.n	8009c26 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009bb4:	2006      	movs	r0, #6
 8009bb6:	f002 fa5b 	bl	800c070 <memp_malloc>
 8009bba:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d102      	bne.n	8009bc8 <netconn_recv+0x6c>
      return ERR_MEM;
 8009bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8009bc6:	e034      	b.n	8009c32 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8009bc8:	f107 030c 	add.w	r3, r7, #12
 8009bcc:	2200      	movs	r2, #0
 8009bce:	4619      	mov	r1, r3
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f7ff ff3f 	bl	8009a54 <netconn_recv_data_tcp>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8009bda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d006      	beq.n	8009bf0 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8009be2:	6979      	ldr	r1, [r7, #20]
 8009be4:	2006      	movs	r0, #6
 8009be6:	f002 fa95 	bl	800c114 <memp_free>
      return err;
 8009bea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009bee:	e020      	b.n	8009c32 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d106      	bne.n	8009c04 <netconn_recv+0xa8>
 8009bf6:	4b11      	ldr	r3, [pc, #68]	; (8009c3c <netconn_recv+0xe0>)
 8009bf8:	f240 3279 	movw	r2, #889	; 0x379
 8009bfc:	4913      	ldr	r1, [pc, #76]	; (8009c4c <netconn_recv+0xf0>)
 8009bfe:	4811      	ldr	r0, [pc, #68]	; (8009c44 <netconn_recv+0xe8>)
 8009c00:	f00d f820 	bl	8016c44 <iprintf>

    buf->p = p;
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	2200      	movs	r2, #0
 8009c14:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8009c22:	2300      	movs	r3, #0
 8009c24:	e005      	b.n	8009c32 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8009c26:	2200      	movs	r2, #0
 8009c28:	6839      	ldr	r1, [r7, #0]
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f7ff fe1a 	bl	8009864 <netconn_recv_data>
 8009c30:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3718      	adds	r7, #24
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	08017ad8 	.word	0x08017ad8
 8009c40:	08017cf0 	.word	0x08017cf0
 8009c44:	08017b30 	.word	0x08017b30
 8009c48:	08017d10 	.word	0x08017d10
 8009c4c:	08017d88 	.word	0x08017d88

08009c50 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
 8009c5c:	807b      	strh	r3, [r7, #2]
  if (buf != NULL) {
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d011      	beq.n	8009c88 <netconn_sendto+0x38>
    ip_addr_set(&buf->addr, addr);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d002      	beq.n	8009c70 <netconn_sendto+0x20>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	e000      	b.n	8009c72 <netconn_sendto+0x22>
 8009c70:	2300      	movs	r3, #0
 8009c72:	68ba      	ldr	r2, [r7, #8]
 8009c74:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	887a      	ldrh	r2, [r7, #2]
 8009c7a:	819a      	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
 8009c7c:	68b9      	ldr	r1, [r7, #8]
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f000 f808 	bl	8009c94 <netconn_send>
 8009c84:	4603      	mov	r3, r0
 8009c86:	e001      	b.n	8009c8c <netconn_sendto+0x3c>
  }
  return ERR_VAL;
 8009c88:	f06f 0305 	mvn.w	r3, #5
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b08c      	sub	sp, #48	; 0x30
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d109      	bne.n	8009cb8 <netconn_send+0x24>
 8009ca4:	4b0e      	ldr	r3, [pc, #56]	; (8009ce0 <netconn_send+0x4c>)
 8009ca6:	f240 32b2 	movw	r2, #946	; 0x3b2
 8009caa:	490e      	ldr	r1, [pc, #56]	; (8009ce4 <netconn_send+0x50>)
 8009cac:	480e      	ldr	r0, [pc, #56]	; (8009ce8 <netconn_send+0x54>)
 8009cae:	f00c ffc9 	bl	8016c44 <iprintf>
 8009cb2:	f06f 030f 	mvn.w	r3, #15
 8009cb6:	e00e      	b.n	8009cd6 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8009cc0:	f107 030c 	add.w	r3, r7, #12
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	4809      	ldr	r0, [pc, #36]	; (8009cec <netconn_send+0x58>)
 8009cc8:	f7ff fcbc 	bl	8009644 <netconn_apimsg>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009cd2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3730      	adds	r7, #48	; 0x30
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	08017ad8 	.word	0x08017ad8
 8009ce4:	08017d94 	.word	0x08017d94
 8009ce8:	08017b30 	.word	0x08017b30
 8009cec:	0800ac51 	.word	0x0800ac51

08009cf0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b08c      	sub	sp, #48	; 0x30
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d109      	bne.n	8009d16 <netconn_close_shutdown+0x26>
 8009d02:	4b0f      	ldr	r3, [pc, #60]	; (8009d40 <netconn_close_shutdown+0x50>)
 8009d04:	f240 4247 	movw	r2, #1095	; 0x447
 8009d08:	490e      	ldr	r1, [pc, #56]	; (8009d44 <netconn_close_shutdown+0x54>)
 8009d0a:	480f      	ldr	r0, [pc, #60]	; (8009d48 <netconn_close_shutdown+0x58>)
 8009d0c:	f00c ff9a 	bl	8016c44 <iprintf>
 8009d10:	f06f 030f 	mvn.w	r3, #15
 8009d14:	e010      	b.n	8009d38 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009d1a:	78fb      	ldrb	r3, [r7, #3]
 8009d1c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009d1e:	2329      	movs	r3, #41	; 0x29
 8009d20:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009d22:	f107 030c 	add.w	r3, r7, #12
 8009d26:	4619      	mov	r1, r3
 8009d28:	4808      	ldr	r0, [pc, #32]	; (8009d4c <netconn_close_shutdown+0x5c>)
 8009d2a:	f7ff fc8b 	bl	8009644 <netconn_apimsg>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009d34:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3730      	adds	r7, #48	; 0x30
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	08017ad8 	.word	0x08017ad8
 8009d44:	08017e14 	.word	0x08017e14
 8009d48:	08017b30 	.word	0x08017b30
 8009d4c:	0800b0ed 	.word	0x0800b0ed

08009d50 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d101      	bne.n	8009d62 <netconn_err+0x12>
    return ERR_OK;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	e00d      	b.n	8009d7e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009d62:	f00c fd61 	bl	8016828 <sys_arch_protect>
 8009d66:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	7a1b      	ldrb	r3, [r3, #8]
 8009d6c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f00c fd65 	bl	8016844 <sys_arch_unprotect>
  return err;
 8009d7a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
	...

08009d88 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	4603      	mov	r3, r0
 8009d90:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d96:	f113 0f0d 	cmn.w	r3, #13
 8009d9a:	d009      	beq.n	8009db0 <lwip_netconn_err_to_msg+0x28>
 8009d9c:	f113 0f0d 	cmn.w	r3, #13
 8009da0:	dc0c      	bgt.n	8009dbc <lwip_netconn_err_to_msg+0x34>
 8009da2:	f113 0f0f 	cmn.w	r3, #15
 8009da6:	d007      	beq.n	8009db8 <lwip_netconn_err_to_msg+0x30>
 8009da8:	f113 0f0e 	cmn.w	r3, #14
 8009dac:	d002      	beq.n	8009db4 <lwip_netconn_err_to_msg+0x2c>
 8009dae:	e005      	b.n	8009dbc <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009db0:	4b0a      	ldr	r3, [pc, #40]	; (8009ddc <lwip_netconn_err_to_msg+0x54>)
 8009db2:	e00e      	b.n	8009dd2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009db4:	4b0a      	ldr	r3, [pc, #40]	; (8009de0 <lwip_netconn_err_to_msg+0x58>)
 8009db6:	e00c      	b.n	8009dd2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009db8:	4b0a      	ldr	r3, [pc, #40]	; (8009de4 <lwip_netconn_err_to_msg+0x5c>)
 8009dba:	e00a      	b.n	8009dd2 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d005      	beq.n	8009dd0 <lwip_netconn_err_to_msg+0x48>
 8009dc4:	4b08      	ldr	r3, [pc, #32]	; (8009de8 <lwip_netconn_err_to_msg+0x60>)
 8009dc6:	227d      	movs	r2, #125	; 0x7d
 8009dc8:	4908      	ldr	r1, [pc, #32]	; (8009dec <lwip_netconn_err_to_msg+0x64>)
 8009dca:	4809      	ldr	r0, [pc, #36]	; (8009df0 <lwip_netconn_err_to_msg+0x68>)
 8009dcc:	f00c ff3a 	bl	8016c44 <iprintf>
      return NULL;
 8009dd0:	2300      	movs	r3, #0
  }
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3708      	adds	r7, #8
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	0801afc0 	.word	0x0801afc0
 8009de0:	0801afc1 	.word	0x0801afc1
 8009de4:	0801afc2 	.word	0x0801afc2
 8009de8:	08017e30 	.word	0x08017e30
 8009dec:	08017e64 	.word	0x08017e64
 8009df0:	08017e74 	.word	0x08017e74

08009df4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d105      	bne.n	8009e10 <lwip_netconn_is_err_msg+0x1c>
 8009e04:	4b12      	ldr	r3, [pc, #72]	; (8009e50 <lwip_netconn_is_err_msg+0x5c>)
 8009e06:	2285      	movs	r2, #133	; 0x85
 8009e08:	4912      	ldr	r1, [pc, #72]	; (8009e54 <lwip_netconn_is_err_msg+0x60>)
 8009e0a:	4813      	ldr	r0, [pc, #76]	; (8009e58 <lwip_netconn_is_err_msg+0x64>)
 8009e0c:	f00c ff1a 	bl	8016c44 <iprintf>

  if (msg == &netconn_aborted) {
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a12      	ldr	r2, [pc, #72]	; (8009e5c <lwip_netconn_is_err_msg+0x68>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d104      	bne.n	8009e22 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	22f3      	movs	r2, #243	; 0xf3
 8009e1c:	701a      	strb	r2, [r3, #0]
    return 1;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e012      	b.n	8009e48 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a0e      	ldr	r2, [pc, #56]	; (8009e60 <lwip_netconn_is_err_msg+0x6c>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d104      	bne.n	8009e34 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	22f2      	movs	r2, #242	; 0xf2
 8009e2e:	701a      	strb	r2, [r3, #0]
    return 1;
 8009e30:	2301      	movs	r3, #1
 8009e32:	e009      	b.n	8009e48 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a0b      	ldr	r2, [pc, #44]	; (8009e64 <lwip_netconn_is_err_msg+0x70>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d104      	bne.n	8009e46 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	22f1      	movs	r2, #241	; 0xf1
 8009e40:	701a      	strb	r2, [r3, #0]
    return 1;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e000      	b.n	8009e48 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}
 8009e50:	08017e30 	.word	0x08017e30
 8009e54:	08017e9c 	.word	0x08017e9c
 8009e58:	08017e74 	.word	0x08017e74
 8009e5c:	0801afc0 	.word	0x0801afc0
 8009e60:	0801afc1 	.word	0x0801afc1
 8009e64:	0801afc2 	.word	0x0801afc2

08009e68 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b088      	sub	sp, #32
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
 8009e74:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d105      	bne.n	8009e88 <recv_udp+0x20>
 8009e7c:	4b34      	ldr	r3, [pc, #208]	; (8009f50 <recv_udp+0xe8>)
 8009e7e:	22e5      	movs	r2, #229	; 0xe5
 8009e80:	4934      	ldr	r1, [pc, #208]	; (8009f54 <recv_udp+0xec>)
 8009e82:	4835      	ldr	r0, [pc, #212]	; (8009f58 <recv_udp+0xf0>)
 8009e84:	f00c fede 	bl	8016c44 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d105      	bne.n	8009e9a <recv_udp+0x32>
 8009e8e:	4b30      	ldr	r3, [pc, #192]	; (8009f50 <recv_udp+0xe8>)
 8009e90:	22e6      	movs	r2, #230	; 0xe6
 8009e92:	4932      	ldr	r1, [pc, #200]	; (8009f5c <recv_udp+0xf4>)
 8009e94:	4830      	ldr	r0, [pc, #192]	; (8009f58 <recv_udp+0xf0>)
 8009e96:	f00c fed5 	bl	8016c44 <iprintf>
  conn = (struct netconn *)arg;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d103      	bne.n	8009eac <recv_udp+0x44>
    pbuf_free(p);
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f002 ff75 	bl	800cd94 <pbuf_free>
    return;
 8009eaa:	e04d      	b.n	8009f48 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d005      	beq.n	8009ec2 <recv_udp+0x5a>
 8009eb6:	4b26      	ldr	r3, [pc, #152]	; (8009f50 <recv_udp+0xe8>)
 8009eb8:	22ee      	movs	r2, #238	; 0xee
 8009eba:	4929      	ldr	r1, [pc, #164]	; (8009f60 <recv_udp+0xf8>)
 8009ebc:	4826      	ldr	r0, [pc, #152]	; (8009f58 <recv_udp+0xf0>)
 8009ebe:	f00c fec1 	bl	8016c44 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	3310      	adds	r3, #16
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f00c fb93 	bl	80165f2 <sys_mbox_valid>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d103      	bne.n	8009eda <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f002 ff5e 	bl	800cd94 <pbuf_free>
    return;
 8009ed8:	e036      	b.n	8009f48 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009eda:	2006      	movs	r0, #6
 8009edc:	f002 f8c8 	bl	800c070 <memp_malloc>
 8009ee0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d103      	bne.n	8009ef0 <recv_udp+0x88>
    pbuf_free(p);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f002 ff53 	bl	800cd94 <pbuf_free>
    return;
 8009eee:	e02b      	b.n	8009f48 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d002      	beq.n	8009f08 <recv_udp+0xa0>
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	e000      	b.n	8009f0a <recv_udp+0xa2>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	69ba      	ldr	r2, [r7, #24]
 8009f0c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009f12:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	891b      	ldrh	r3, [r3, #8]
 8009f18:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	3310      	adds	r3, #16
 8009f1e:	69b9      	ldr	r1, [r7, #24]
 8009f20:	4618      	mov	r0, r3
 8009f22:	f00c faf1 	bl	8016508 <sys_mbox_trypost>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d003      	beq.n	8009f34 <recv_udp+0xcc>
    netbuf_delete(buf);
 8009f2c:	69b8      	ldr	r0, [r7, #24]
 8009f2e:	f001 f97d 	bl	800b22c <netbuf_delete>
    return;
 8009f32:	e009      	b.n	8009f48 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d005      	beq.n	8009f48 <recv_udp+0xe0>
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f40:	8afa      	ldrh	r2, [r7, #22]
 8009f42:	2100      	movs	r1, #0
 8009f44:	69f8      	ldr	r0, [r7, #28]
 8009f46:	4798      	blx	r3
  }
}
 8009f48:	3720      	adds	r7, #32
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	08017e30 	.word	0x08017e30
 8009f54:	08017ea8 	.word	0x08017ea8
 8009f58:	08017e74 	.word	0x08017e74
 8009f5c:	08017ecc 	.word	0x08017ecc
 8009f60:	08017eec 	.word	0x08017eec

08009f64 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b088      	sub	sp, #32
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
 8009f70:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d106      	bne.n	8009f86 <recv_tcp+0x22>
 8009f78:	4b36      	ldr	r3, [pc, #216]	; (800a054 <recv_tcp+0xf0>)
 8009f7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009f7e:	4936      	ldr	r1, [pc, #216]	; (800a058 <recv_tcp+0xf4>)
 8009f80:	4836      	ldr	r0, [pc, #216]	; (800a05c <recv_tcp+0xf8>)
 8009f82:	f00c fe5f 	bl	8016c44 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d106      	bne.n	8009f9a <recv_tcp+0x36>
 8009f8c:	4b31      	ldr	r3, [pc, #196]	; (800a054 <recv_tcp+0xf0>)
 8009f8e:	f240 122d 	movw	r2, #301	; 0x12d
 8009f92:	4933      	ldr	r1, [pc, #204]	; (800a060 <recv_tcp+0xfc>)
 8009f94:	4831      	ldr	r0, [pc, #196]	; (800a05c <recv_tcp+0xf8>)
 8009f96:	f00c fe55 	bl	8016c44 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009f9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d006      	beq.n	8009fb0 <recv_tcp+0x4c>
 8009fa2:	4b2c      	ldr	r3, [pc, #176]	; (800a054 <recv_tcp+0xf0>)
 8009fa4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8009fa8:	492e      	ldr	r1, [pc, #184]	; (800a064 <recv_tcp+0x100>)
 8009faa:	482c      	ldr	r0, [pc, #176]	; (800a05c <recv_tcp+0xf8>)
 8009fac:	f00c fe4a 	bl	8016c44 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d102      	bne.n	8009fc0 <recv_tcp+0x5c>
    return ERR_VAL;
 8009fba:	f06f 0305 	mvn.w	r3, #5
 8009fbe:	e045      	b.n	800a04c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	68ba      	ldr	r2, [r7, #8]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d006      	beq.n	8009fd8 <recv_tcp+0x74>
 8009fca:	4b22      	ldr	r3, [pc, #136]	; (800a054 <recv_tcp+0xf0>)
 8009fcc:	f240 1235 	movw	r2, #309	; 0x135
 8009fd0:	4925      	ldr	r1, [pc, #148]	; (800a068 <recv_tcp+0x104>)
 8009fd2:	4822      	ldr	r0, [pc, #136]	; (800a05c <recv_tcp+0xf8>)
 8009fd4:	f00c fe36 	bl	8016c44 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	3310      	adds	r3, #16
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f00c fb08 	bl	80165f2 <sys_mbox_valid>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d10d      	bne.n	800a004 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d008      	beq.n	800a000 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	891b      	ldrh	r3, [r3, #8]
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	68b8      	ldr	r0, [r7, #8]
 8009ff6:	f003 fdcb 	bl	800db90 <tcp_recved>
      pbuf_free(p);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f002 feca 	bl	800cd94 <pbuf_free>
    }
    return ERR_OK;
 800a000:	2300      	movs	r3, #0
 800a002:	e023      	b.n	800a04c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d005      	beq.n	800a016 <recv_tcp+0xb2>
    msg = p;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	891b      	ldrh	r3, [r3, #8]
 800a012:	83fb      	strh	r3, [r7, #30]
 800a014:	e003      	b.n	800a01e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800a016:	4b15      	ldr	r3, [pc, #84]	; (800a06c <recv_tcp+0x108>)
 800a018:	61bb      	str	r3, [r7, #24]
    len = 0;
 800a01a:	2300      	movs	r3, #0
 800a01c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	3310      	adds	r3, #16
 800a022:	69b9      	ldr	r1, [r7, #24]
 800a024:	4618      	mov	r0, r3
 800a026:	f00c fa6f 	bl	8016508 <sys_mbox_trypost>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d002      	beq.n	800a036 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800a030:	f04f 33ff 	mov.w	r3, #4294967295
 800a034:	e00a      	b.n	800a04c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d005      	beq.n	800a04a <recv_tcp+0xe6>
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a042:	8bfa      	ldrh	r2, [r7, #30]
 800a044:	2100      	movs	r1, #0
 800a046:	6978      	ldr	r0, [r7, #20]
 800a048:	4798      	blx	r3
  }

  return ERR_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3720      	adds	r7, #32
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	08017e30 	.word	0x08017e30
 800a058:	08017f0c 	.word	0x08017f0c
 800a05c:	08017e74 	.word	0x08017e74
 800a060:	08017f30 	.word	0x08017f30
 800a064:	08017f50 	.word	0x08017f50
 800a068:	08017f68 	.word	0x08017f68
 800a06c:	0801afc2 	.word	0x0801afc2

0800a070 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d106      	bne.n	800a092 <poll_tcp+0x22>
 800a084:	4b29      	ldr	r3, [pc, #164]	; (800a12c <poll_tcp+0xbc>)
 800a086:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800a08a:	4929      	ldr	r1, [pc, #164]	; (800a130 <poll_tcp+0xc0>)
 800a08c:	4829      	ldr	r0, [pc, #164]	; (800a134 <poll_tcp+0xc4>)
 800a08e:	f00c fdd9 	bl	8016c44 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	785b      	ldrb	r3, [r3, #1]
 800a096:	2b01      	cmp	r3, #1
 800a098:	d104      	bne.n	800a0a4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a09a:	2101      	movs	r1, #1
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f000 fe59 	bl	800ad54 <lwip_netconn_do_writemore>
 800a0a2:	e016      	b.n	800a0d2 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	785b      	ldrb	r3, [r3, #1]
 800a0a8:	2b04      	cmp	r3, #4
 800a0aa:	d112      	bne.n	800a0d2 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6a1b      	ldr	r3, [r3, #32]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00a      	beq.n	800a0ca <poll_tcp+0x5a>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6a1b      	ldr	r3, [r3, #32]
 800a0b8:	7a5b      	ldrb	r3, [r3, #9]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d005      	beq.n	800a0ca <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	7a5a      	ldrb	r2, [r3, #9]
 800a0c4:	3a01      	subs	r2, #1
 800a0c6:	b2d2      	uxtb	r2, r2
 800a0c8:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a0ca:	2101      	movs	r1, #1
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f000 fb3b 	bl	800a748 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	7f1b      	ldrb	r3, [r3, #28]
 800a0d6:	f003 0310 	and.w	r3, r3, #16
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d021      	beq.n	800a122 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d01d      	beq.n	800a122 <poll_tcp+0xb2>
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a0ee:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a0f2:	d316      	bcc.n	800a122 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a0fc:	2b04      	cmp	r3, #4
 800a0fe:	d810      	bhi.n	800a122 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	7f1b      	ldrb	r3, [r3, #28]
 800a104:	f023 0310 	bic.w	r3, r3, #16
 800a108:	b2da      	uxtb	r2, r3
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a112:	2b00      	cmp	r3, #0
 800a114:	d005      	beq.n	800a122 <poll_tcp+0xb2>
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11a:	2200      	movs	r2, #0
 800a11c:	2102      	movs	r1, #2
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3710      	adds	r7, #16
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	08017e30 	.word	0x08017e30
 800a130:	08017f88 	.word	0x08017f88
 800a134:	08017e74 	.word	0x08017e74

0800a138 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	4613      	mov	r3, r2
 800a144:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d106      	bne.n	800a15e <sent_tcp+0x26>
 800a150:	4b20      	ldr	r3, [pc, #128]	; (800a1d4 <sent_tcp+0x9c>)
 800a152:	f240 1293 	movw	r2, #403	; 0x193
 800a156:	4920      	ldr	r1, [pc, #128]	; (800a1d8 <sent_tcp+0xa0>)
 800a158:	4820      	ldr	r0, [pc, #128]	; (800a1dc <sent_tcp+0xa4>)
 800a15a:	f00c fd73 	bl	8016c44 <iprintf>

  if (conn) {
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d032      	beq.n	800a1ca <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	785b      	ldrb	r3, [r3, #1]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d104      	bne.n	800a176 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a16c:	2101      	movs	r1, #1
 800a16e:	6978      	ldr	r0, [r7, #20]
 800a170:	f000 fdf0 	bl	800ad54 <lwip_netconn_do_writemore>
 800a174:	e007      	b.n	800a186 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	785b      	ldrb	r3, [r3, #1]
 800a17a:	2b04      	cmp	r3, #4
 800a17c:	d103      	bne.n	800a186 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a17e:	2101      	movs	r1, #1
 800a180:	6978      	ldr	r0, [r7, #20]
 800a182:	f000 fae1 	bl	800a748 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d01d      	beq.n	800a1ca <sent_tcp+0x92>
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a196:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a19a:	d316      	bcc.n	800a1ca <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a1a4:	2b04      	cmp	r3, #4
 800a1a6:	d810      	bhi.n	800a1ca <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	7f1b      	ldrb	r3, [r3, #28]
 800a1ac:	f023 0310 	bic.w	r3, r3, #16
 800a1b0:	b2da      	uxtb	r2, r3
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d005      	beq.n	800a1ca <sent_tcp+0x92>
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c2:	88fa      	ldrh	r2, [r7, #6]
 800a1c4:	2102      	movs	r1, #2
 800a1c6:	6978      	ldr	r0, [r7, #20]
 800a1c8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3718      	adds	r7, #24
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	08017e30 	.word	0x08017e30
 800a1d8:	08017f88 	.word	0x08017f88
 800a1dc:	08017e74 	.word	0x08017e74

0800a1e0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b088      	sub	sp, #32
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d106      	bne.n	800a204 <err_tcp+0x24>
 800a1f6:	4b5f      	ldr	r3, [pc, #380]	; (800a374 <err_tcp+0x194>)
 800a1f8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a1fc:	495e      	ldr	r1, [pc, #376]	; (800a378 <err_tcp+0x198>)
 800a1fe:	485f      	ldr	r0, [pc, #380]	; (800a37c <err_tcp+0x19c>)
 800a200:	f00c fd20 	bl	8016c44 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a204:	f00c fb10 	bl	8016828 <sys_arch_protect>
 800a208:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	2200      	movs	r2, #0
 800a20e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	78fa      	ldrb	r2, [r7, #3]
 800a214:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	7f1b      	ldrb	r3, [r3, #28]
 800a21a:	f043 0301 	orr.w	r3, r3, #1
 800a21e:	b2da      	uxtb	r2, r3
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	785b      	ldrb	r3, [r3, #1]
 800a228:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	2200      	movs	r2, #0
 800a22e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a230:	69b8      	ldr	r0, [r7, #24]
 800a232:	f00c fb07 	bl	8016844 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d005      	beq.n	800a24a <err_tcp+0x6a>
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a242:	2200      	movs	r2, #0
 800a244:	2104      	movs	r1, #4
 800a246:	69f8      	ldr	r0, [r7, #28]
 800a248:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d005      	beq.n	800a25e <err_tcp+0x7e>
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a256:	2200      	movs	r2, #0
 800a258:	2100      	movs	r1, #0
 800a25a:	69f8      	ldr	r0, [r7, #28]
 800a25c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a262:	2b00      	cmp	r3, #0
 800a264:	d005      	beq.n	800a272 <err_tcp+0x92>
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26a:	2200      	movs	r2, #0
 800a26c:	2102      	movs	r1, #2
 800a26e:	69f8      	ldr	r0, [r7, #28]
 800a270:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a276:	4618      	mov	r0, r3
 800a278:	f7ff fd86 	bl	8009d88 <lwip_netconn_err_to_msg>
 800a27c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	3310      	adds	r3, #16
 800a282:	4618      	mov	r0, r3
 800a284:	f00c f9b5 	bl	80165f2 <sys_mbox_valid>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d005      	beq.n	800a29a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	3310      	adds	r3, #16
 800a292:	6939      	ldr	r1, [r7, #16]
 800a294:	4618      	mov	r0, r3
 800a296:	f00c f937 	bl	8016508 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	3314      	adds	r3, #20
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f00c f9a7 	bl	80165f2 <sys_mbox_valid>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d005      	beq.n	800a2b6 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	3314      	adds	r3, #20
 800a2ae:	6939      	ldr	r1, [r7, #16]
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f00c f929 	bl	8016508 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a2b6:	7dfb      	ldrb	r3, [r7, #23]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d005      	beq.n	800a2c8 <err_tcp+0xe8>
 800a2bc:	7dfb      	ldrb	r3, [r7, #23]
 800a2be:	2b04      	cmp	r3, #4
 800a2c0:	d002      	beq.n	800a2c8 <err_tcp+0xe8>
 800a2c2:	7dfb      	ldrb	r3, [r7, #23]
 800a2c4:	2b03      	cmp	r3, #3
 800a2c6:	d143      	bne.n	800a350 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	7f1b      	ldrb	r3, [r3, #28]
 800a2cc:	f003 0304 	and.w	r3, r3, #4
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	bf14      	ite	ne
 800a2d4:	2301      	movne	r3, #1
 800a2d6:	2300      	moveq	r3, #0
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	7f1b      	ldrb	r3, [r3, #28]
 800a2e0:	f023 0304 	bic.w	r3, r3, #4
 800a2e4:	b2da      	uxtb	r2, r3
 800a2e6:	69fb      	ldr	r3, [r7, #28]
 800a2e8:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d13b      	bne.n	800a368 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a2f0:	69fb      	ldr	r3, [r7, #28]
 800a2f2:	6a1b      	ldr	r3, [r3, #32]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d106      	bne.n	800a306 <err_tcp+0x126>
 800a2f8:	4b1e      	ldr	r3, [pc, #120]	; (800a374 <err_tcp+0x194>)
 800a2fa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a2fe:	4920      	ldr	r1, [pc, #128]	; (800a380 <err_tcp+0x1a0>)
 800a300:	481e      	ldr	r0, [pc, #120]	; (800a37c <err_tcp+0x19c>)
 800a302:	f00c fc9f 	bl	8016c44 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a306:	7dfb      	ldrb	r3, [r7, #23]
 800a308:	2b04      	cmp	r3, #4
 800a30a:	d104      	bne.n	800a316 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	6a1b      	ldr	r3, [r3, #32]
 800a310:	2200      	movs	r2, #0
 800a312:	711a      	strb	r2, [r3, #4]
 800a314:	e003      	b.n	800a31e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	6a1b      	ldr	r3, [r3, #32]
 800a31a:	78fa      	ldrb	r2, [r7, #3]
 800a31c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	6a1b      	ldr	r3, [r3, #32]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	330c      	adds	r3, #12
 800a326:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a328:	68b8      	ldr	r0, [r7, #8]
 800a32a:	f00c f9f3 	bl	8016714 <sys_sem_valid>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d106      	bne.n	800a342 <err_tcp+0x162>
 800a334:	4b0f      	ldr	r3, [pc, #60]	; (800a374 <err_tcp+0x194>)
 800a336:	f240 12ef 	movw	r2, #495	; 0x1ef
 800a33a:	4912      	ldr	r1, [pc, #72]	; (800a384 <err_tcp+0x1a4>)
 800a33c:	480f      	ldr	r0, [pc, #60]	; (800a37c <err_tcp+0x19c>)
 800a33e:	f00c fc81 	bl	8016c44 <iprintf>
      conn->current_msg = NULL;
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	2200      	movs	r2, #0
 800a346:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a348:	68b8      	ldr	r0, [r7, #8]
 800a34a:	f00c f9c9 	bl	80166e0 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a34e:	e00b      	b.n	800a368 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	6a1b      	ldr	r3, [r3, #32]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d008      	beq.n	800a36a <err_tcp+0x18a>
 800a358:	4b06      	ldr	r3, [pc, #24]	; (800a374 <err_tcp+0x194>)
 800a35a:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a35e:	490a      	ldr	r1, [pc, #40]	; (800a388 <err_tcp+0x1a8>)
 800a360:	4806      	ldr	r0, [pc, #24]	; (800a37c <err_tcp+0x19c>)
 800a362:	f00c fc6f 	bl	8016c44 <iprintf>
  }
}
 800a366:	e000      	b.n	800a36a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a368:	bf00      	nop
}
 800a36a:	bf00      	nop
 800a36c:	3720      	adds	r7, #32
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	08017e30 	.word	0x08017e30
 800a378:	08017f88 	.word	0x08017f88
 800a37c:	08017e74 	.word	0x08017e74
 800a380:	08017f98 	.word	0x08017f98
 800a384:	08017fb4 	.word	0x08017fb4
 800a388:	08017fd0 	.word	0x08017fd0

0800a38c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a39a:	6879      	ldr	r1, [r7, #4]
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f004 fabd 	bl	800e91c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a3a2:	490a      	ldr	r1, [pc, #40]	; (800a3cc <setup_tcp+0x40>)
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f004 facb 	bl	800e940 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a3aa:	4909      	ldr	r1, [pc, #36]	; (800a3d0 <setup_tcp+0x44>)
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f004 fae9 	bl	800e984 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	4907      	ldr	r1, [pc, #28]	; (800a3d4 <setup_tcp+0x48>)
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f004 fb40 	bl	800ea3c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a3bc:	4906      	ldr	r1, [pc, #24]	; (800a3d8 <setup_tcp+0x4c>)
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f004 fb02 	bl	800e9c8 <tcp_err>
}
 800a3c4:	bf00      	nop
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	08009f65 	.word	0x08009f65
 800a3d0:	0800a139 	.word	0x0800a139
 800a3d4:	0800a071 	.word	0x0800a071
 800a3d8:	0800a1e1 	.word	0x0800a1e1

0800a3dc <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a3dc:	b590      	push	{r4, r7, lr}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d006      	beq.n	800a400 <pcb_new+0x24>
 800a3f2:	4b2b      	ldr	r3, [pc, #172]	; (800a4a0 <pcb_new+0xc4>)
 800a3f4:	f240 2265 	movw	r2, #613	; 0x265
 800a3f8:	492a      	ldr	r1, [pc, #168]	; (800a4a4 <pcb_new+0xc8>)
 800a3fa:	482b      	ldr	r0, [pc, #172]	; (800a4a8 <pcb_new+0xcc>)
 800a3fc:	f00c fc22 	bl	8016c44 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a40a:	2b10      	cmp	r3, #16
 800a40c:	d022      	beq.n	800a454 <pcb_new+0x78>
 800a40e:	2b20      	cmp	r3, #32
 800a410:	d133      	bne.n	800a47a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681c      	ldr	r4, [r3, #0]
 800a416:	7bfb      	ldrb	r3, [r7, #15]
 800a418:	4618      	mov	r0, r3
 800a41a:	f009 fd44 	bl	8013ea6 <udp_new_ip_type>
 800a41e:	4603      	mov	r3, r0
 800a420:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d02a      	beq.n	800a482 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	2b22      	cmp	r3, #34	; 0x22
 800a434:	d104      	bne.n	800a440 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	2201      	movs	r2, #1
 800a43e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6858      	ldr	r0, [r3, #4]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	461a      	mov	r2, r3
 800a44c:	4917      	ldr	r1, [pc, #92]	; (800a4ac <pcb_new+0xd0>)
 800a44e:	f009 fcb1 	bl	8013db4 <udp_recv>
      }
      break;
 800a452:	e016      	b.n	800a482 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681c      	ldr	r4, [r3, #0]
 800a458:	7bfb      	ldrb	r3, [r7, #15]
 800a45a:	4618      	mov	r0, r3
 800a45c:	f004 fa50 	bl	800e900 <tcp_new_ip_type>
 800a460:	4603      	mov	r3, r0
 800a462:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00b      	beq.n	800a486 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4618      	mov	r0, r3
 800a474:	f7ff ff8a 	bl	800a38c <setup_tcp>
      }
      break;
 800a478:	e005      	b.n	800a486 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	22fa      	movs	r2, #250	; 0xfa
 800a47e:	711a      	strb	r2, [r3, #4]
      return;
 800a480:	e00a      	b.n	800a498 <pcb_new+0xbc>
      break;
 800a482:	bf00      	nop
 800a484:	e000      	b.n	800a488 <pcb_new+0xac>
      break;
 800a486:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d102      	bne.n	800a498 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	22ff      	movs	r2, #255	; 0xff
 800a496:	711a      	strb	r2, [r3, #4]
  }
}
 800a498:	3714      	adds	r7, #20
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd90      	pop	{r4, r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	08017e30 	.word	0x08017e30
 800a4a4:	08018014 	.word	0x08018014
 800a4a8:	08017e74 	.word	0x08017e74
 800a4ac:	08009e69 	.word	0x08009e69

0800a4b0 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d102      	bne.n	800a4d2 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f7ff ff85 	bl	800a3dc <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a4d2:	bf00      	nop
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
	...

0800a4dc <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	6039      	str	r1, [r7, #0]
 800a4e6:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a4ec:	2007      	movs	r0, #7
 800a4ee:	f001 fdbf 	bl	800c070 <memp_malloc>
 800a4f2:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d101      	bne.n	800a4fe <netconn_alloc+0x22>
    return NULL;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	e052      	b.n	800a5a4 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2200      	movs	r2, #0
 800a502:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	79fa      	ldrb	r2, [r7, #7]
 800a508:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2200      	movs	r2, #0
 800a50e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a510:	79fb      	ldrb	r3, [r7, #7]
 800a512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a516:	2b10      	cmp	r3, #16
 800a518:	d004      	beq.n	800a524 <netconn_alloc+0x48>
 800a51a:	2b20      	cmp	r3, #32
 800a51c:	d105      	bne.n	800a52a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a51e:	2306      	movs	r3, #6
 800a520:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a522:	e00a      	b.n	800a53a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a524:	2306      	movs	r3, #6
 800a526:	617b      	str	r3, [r7, #20]
      break;
 800a528:	e007      	b.n	800a53a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a52a:	4b20      	ldr	r3, [pc, #128]	; (800a5ac <netconn_alloc+0xd0>)
 800a52c:	f240 22e5 	movw	r2, #741	; 0x2e5
 800a530:	491f      	ldr	r1, [pc, #124]	; (800a5b0 <netconn_alloc+0xd4>)
 800a532:	4820      	ldr	r0, [pc, #128]	; (800a5b4 <netconn_alloc+0xd8>)
 800a534:	f00c fb86 	bl	8016c44 <iprintf>
      goto free_and_return;
 800a538:	e02f      	b.n	800a59a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	3310      	adds	r3, #16
 800a53e:	6979      	ldr	r1, [r7, #20]
 800a540:	4618      	mov	r0, r3
 800a542:	f00b ffad 	bl	80164a0 <sys_mbox_new>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d125      	bne.n	800a598 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	330c      	adds	r3, #12
 800a550:	2100      	movs	r1, #0
 800a552:	4618      	mov	r0, r3
 800a554:	f00c f86b 	bl	801662e <sys_sem_new>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d005      	beq.n	800a56a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	3310      	adds	r3, #16
 800a562:	4618      	mov	r0, r3
 800a564:	f00b ffbe 	bl	80164e4 <sys_mbox_free>
    goto free_and_return;
 800a568:	e017      	b.n	800a59a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	3314      	adds	r3, #20
 800a56e:	4618      	mov	r0, r3
 800a570:	f00c f850 	bl	8016614 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2200      	movs	r2, #0
 800a578:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f04f 32ff 	mov.w	r2, #4294967295
 800a580:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	683a      	ldr	r2, [r7, #0]
 800a586:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2200      	movs	r2, #0
 800a58c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	7cfa      	ldrb	r2, [r7, #19]
 800a592:	771a      	strb	r2, [r3, #28]
  return conn;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	e005      	b.n	800a5a4 <netconn_alloc+0xc8>
    goto free_and_return;
 800a598:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a59a:	68f9      	ldr	r1, [r7, #12]
 800a59c:	2007      	movs	r0, #7
 800a59e:	f001 fdb9 	bl	800c114 <memp_free>
  return NULL;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3718      	adds	r7, #24
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	08017e30 	.word	0x08017e30
 800a5b0:	08018034 	.word	0x08018034
 800a5b4:	08017e74 	.word	0x08017e74

0800a5b8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d006      	beq.n	800a5d6 <netconn_free+0x1e>
 800a5c8:	4b1b      	ldr	r3, [pc, #108]	; (800a638 <netconn_free+0x80>)
 800a5ca:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a5ce:	491b      	ldr	r1, [pc, #108]	; (800a63c <netconn_free+0x84>)
 800a5d0:	481b      	ldr	r0, [pc, #108]	; (800a640 <netconn_free+0x88>)
 800a5d2:	f00c fb37 	bl	8016c44 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	3310      	adds	r3, #16
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f00c f809 	bl	80165f2 <sys_mbox_valid>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d006      	beq.n	800a5f4 <netconn_free+0x3c>
 800a5e6:	4b14      	ldr	r3, [pc, #80]	; (800a638 <netconn_free+0x80>)
 800a5e8:	f240 3223 	movw	r2, #803	; 0x323
 800a5ec:	4915      	ldr	r1, [pc, #84]	; (800a644 <netconn_free+0x8c>)
 800a5ee:	4814      	ldr	r0, [pc, #80]	; (800a640 <netconn_free+0x88>)
 800a5f0:	f00c fb28 	bl	8016c44 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	3314      	adds	r3, #20
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f00b fffa 	bl	80165f2 <sys_mbox_valid>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d006      	beq.n	800a612 <netconn_free+0x5a>
 800a604:	4b0c      	ldr	r3, [pc, #48]	; (800a638 <netconn_free+0x80>)
 800a606:	f240 3226 	movw	r2, #806	; 0x326
 800a60a:	490f      	ldr	r1, [pc, #60]	; (800a648 <netconn_free+0x90>)
 800a60c:	480c      	ldr	r0, [pc, #48]	; (800a640 <netconn_free+0x88>)
 800a60e:	f00c fb19 	bl	8016c44 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	330c      	adds	r3, #12
 800a616:	4618      	mov	r0, r3
 800a618:	f00c f86f 	bl	80166fa <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	330c      	adds	r3, #12
 800a620:	4618      	mov	r0, r3
 800a622:	f00c f888 	bl	8016736 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a626:	6879      	ldr	r1, [r7, #4]
 800a628:	2007      	movs	r0, #7
 800a62a:	f001 fd73 	bl	800c114 <memp_free>
}
 800a62e:	bf00      	nop
 800a630:	3708      	adds	r7, #8
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	08017e30 	.word	0x08017e30
 800a63c:	0801805c 	.word	0x0801805c
 800a640:	08017e74 	.word	0x08017e74
 800a644:	0801808c 	.word	0x0801808c
 800a648:	080180c8 	.word	0x080180c8

0800a64c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b086      	sub	sp, #24
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	3310      	adds	r3, #16
 800a658:	4618      	mov	r0, r3
 800a65a:	f00b ffca 	bl	80165f2 <sys_mbox_valid>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d02f      	beq.n	800a6c4 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a664:	e018      	b.n	800a698 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a66e:	2b10      	cmp	r3, #16
 800a670:	d10e      	bne.n	800a690 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	f107 020f 	add.w	r2, r7, #15
 800a678:	4611      	mov	r1, r2
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7ff fbba 	bl	8009df4 <lwip_netconn_is_err_msg>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d108      	bne.n	800a698 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	4618      	mov	r0, r3
 800a68a:	f002 fb83 	bl	800cd94 <pbuf_free>
 800a68e:	e003      	b.n	800a698 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	4618      	mov	r0, r3
 800a694:	f000 fdca 	bl	800b22c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	3310      	adds	r3, #16
 800a69c:	f107 0210 	add.w	r2, r7, #16
 800a6a0:	4611      	mov	r1, r2
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f00b ff89 	bl	80165ba <sys_arch_mbox_tryfetch>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ae:	d1da      	bne.n	800a666 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	3310      	adds	r3, #16
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f00b ff15 	bl	80164e4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	3310      	adds	r3, #16
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f00b ffa8 	bl	8016614 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	3314      	adds	r3, #20
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f00b ff92 	bl	80165f2 <sys_mbox_valid>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d034      	beq.n	800a73e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a6d4:	e01d      	b.n	800a712 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	f107 020e 	add.w	r2, r7, #14
 800a6dc:	4611      	mov	r1, r2
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7ff fb88 	bl	8009df4 <lwip_netconn_is_err_msg>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d113      	bne.n	800a712 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a6ee:	6978      	ldr	r0, [r7, #20]
 800a6f0:	f7ff ffac 	bl	800a64c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d007      	beq.n	800a70c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	4618      	mov	r0, r3
 800a702:	f003 f947 	bl	800d994 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	2200      	movs	r2, #0
 800a70a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a70c:	6978      	ldr	r0, [r7, #20]
 800a70e:	f7ff ff53 	bl	800a5b8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	3314      	adds	r3, #20
 800a716:	f107 0210 	add.w	r2, r7, #16
 800a71a:	4611      	mov	r1, r2
 800a71c:	4618      	mov	r0, r3
 800a71e:	f00b ff4c 	bl	80165ba <sys_arch_mbox_tryfetch>
 800a722:	4603      	mov	r3, r0
 800a724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a728:	d1d5      	bne.n	800a6d6 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	3314      	adds	r3, #20
 800a72e:	4618      	mov	r0, r3
 800a730:	f00b fed8 	bl	80164e4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	3314      	adds	r3, #20
 800a738:	4618      	mov	r0, r3
 800a73a:	f00b ff6b 	bl	8016614 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a73e:	bf00      	nop
 800a740:	3718      	adds	r7, #24
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
	...

0800a748 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	460b      	mov	r3, r1
 800a752:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a754:	2300      	movs	r3, #0
 800a756:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d106      	bne.n	800a76c <lwip_netconn_do_close_internal+0x24>
 800a75e:	4ba1      	ldr	r3, [pc, #644]	; (800a9e4 <lwip_netconn_do_close_internal+0x29c>)
 800a760:	f240 32a2 	movw	r2, #930	; 0x3a2
 800a764:	49a0      	ldr	r1, [pc, #640]	; (800a9e8 <lwip_netconn_do_close_internal+0x2a0>)
 800a766:	48a1      	ldr	r0, [pc, #644]	; (800a9ec <lwip_netconn_do_close_internal+0x2a4>)
 800a768:	f00c fa6c 	bl	8016c44 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a774:	2b10      	cmp	r3, #16
 800a776:	d006      	beq.n	800a786 <lwip_netconn_do_close_internal+0x3e>
 800a778:	4b9a      	ldr	r3, [pc, #616]	; (800a9e4 <lwip_netconn_do_close_internal+0x29c>)
 800a77a:	f240 32a3 	movw	r2, #931	; 0x3a3
 800a77e:	499c      	ldr	r1, [pc, #624]	; (800a9f0 <lwip_netconn_do_close_internal+0x2a8>)
 800a780:	489a      	ldr	r0, [pc, #616]	; (800a9ec <lwip_netconn_do_close_internal+0x2a4>)
 800a782:	f00c fa5f 	bl	8016c44 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	785b      	ldrb	r3, [r3, #1]
 800a78a:	2b04      	cmp	r3, #4
 800a78c:	d006      	beq.n	800a79c <lwip_netconn_do_close_internal+0x54>
 800a78e:	4b95      	ldr	r3, [pc, #596]	; (800a9e4 <lwip_netconn_do_close_internal+0x29c>)
 800a790:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800a794:	4997      	ldr	r1, [pc, #604]	; (800a9f4 <lwip_netconn_do_close_internal+0x2ac>)
 800a796:	4895      	ldr	r0, [pc, #596]	; (800a9ec <lwip_netconn_do_close_internal+0x2a4>)
 800a798:	f00c fa54 	bl	8016c44 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d106      	bne.n	800a7b2 <lwip_netconn_do_close_internal+0x6a>
 800a7a4:	4b8f      	ldr	r3, [pc, #572]	; (800a9e4 <lwip_netconn_do_close_internal+0x29c>)
 800a7a6:	f240 32a5 	movw	r2, #933	; 0x3a5
 800a7aa:	4993      	ldr	r1, [pc, #588]	; (800a9f8 <lwip_netconn_do_close_internal+0x2b0>)
 800a7ac:	488f      	ldr	r0, [pc, #572]	; (800a9ec <lwip_netconn_do_close_internal+0x2a4>)
 800a7ae:	f00c fa49 	bl	8016c44 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a1b      	ldr	r3, [r3, #32]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d106      	bne.n	800a7c8 <lwip_netconn_do_close_internal+0x80>
 800a7ba:	4b8a      	ldr	r3, [pc, #552]	; (800a9e4 <lwip_netconn_do_close_internal+0x29c>)
 800a7bc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a7c0:	498e      	ldr	r1, [pc, #568]	; (800a9fc <lwip_netconn_do_close_internal+0x2b4>)
 800a7c2:	488a      	ldr	r0, [pc, #552]	; (800a9ec <lwip_netconn_do_close_internal+0x2a4>)
 800a7c4:	f00c fa3e 	bl	8016c44 <iprintf>

  tpcb = conn->pcb.tcp;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a1b      	ldr	r3, [r3, #32]
 800a7d2:	7a1b      	ldrb	r3, [r3, #8]
 800a7d4:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a7d6:	7bfb      	ldrb	r3, [r7, #15]
 800a7d8:	f003 0301 	and.w	r3, r3, #1
 800a7dc:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a7de:	7bfb      	ldrb	r3, [r7, #15]
 800a7e0:	f003 0302 	and.w	r3, r3, #2
 800a7e4:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a7e6:	7bfb      	ldrb	r3, [r7, #15]
 800a7e8:	2b03      	cmp	r3, #3
 800a7ea:	d102      	bne.n	800a7f2 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	75bb      	strb	r3, [r7, #22]
 800a7f0:	e01f      	b.n	800a832 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a7f2:	7bbb      	ldrb	r3, [r7, #14]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00e      	beq.n	800a816 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a7fc:	2b05      	cmp	r3, #5
 800a7fe:	d007      	beq.n	800a810 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a804:	2b06      	cmp	r3, #6
 800a806:	d003      	beq.n	800a810 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a80c:	2b08      	cmp	r3, #8
 800a80e:	d102      	bne.n	800a816 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a810:	2301      	movs	r3, #1
 800a812:	75bb      	strb	r3, [r7, #22]
 800a814:	e00d      	b.n	800a832 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a816:	7b7b      	ldrb	r3, [r7, #13]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d008      	beq.n	800a82e <lwip_netconn_do_close_internal+0xe6>
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	8b5b      	ldrh	r3, [r3, #26]
 800a820:	f003 0310 	and.w	r3, r3, #16
 800a824:	2b00      	cmp	r3, #0
 800a826:	d002      	beq.n	800a82e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a828:	2301      	movs	r3, #1
 800a82a:	75bb      	strb	r3, [r7, #22]
 800a82c:	e001      	b.n	800a832 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a82e:	2300      	movs	r3, #0
 800a830:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a832:	7dbb      	ldrb	r3, [r7, #22]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d003      	beq.n	800a840 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a838:	2100      	movs	r1, #0
 800a83a:	6938      	ldr	r0, [r7, #16]
 800a83c:	f004 f86e 	bl	800e91c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	7d1b      	ldrb	r3, [r3, #20]
 800a844:	2b01      	cmp	r3, #1
 800a846:	d104      	bne.n	800a852 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a848:	2100      	movs	r1, #0
 800a84a:	6938      	ldr	r0, [r7, #16]
 800a84c:	f004 f8de 	bl	800ea0c <tcp_accept>
 800a850:	e01d      	b.n	800a88e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a852:	7bbb      	ldrb	r3, [r7, #14]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d007      	beq.n	800a868 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a858:	2100      	movs	r1, #0
 800a85a:	6938      	ldr	r0, [r7, #16]
 800a85c:	f004 f870 	bl	800e940 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a860:	2100      	movs	r1, #0
 800a862:	6938      	ldr	r0, [r7, #16]
 800a864:	f004 f8d2 	bl	800ea0c <tcp_accept>
    }
    if (shut_tx) {
 800a868:	7b7b      	ldrb	r3, [r7, #13]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d003      	beq.n	800a876 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a86e:	2100      	movs	r1, #0
 800a870:	6938      	ldr	r0, [r7, #16]
 800a872:	f004 f887 	bl	800e984 <tcp_sent>
    }
    if (shut_close) {
 800a876:	7dbb      	ldrb	r3, [r7, #22]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d008      	beq.n	800a88e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a87c:	2200      	movs	r2, #0
 800a87e:	2100      	movs	r1, #0
 800a880:	6938      	ldr	r0, [r7, #16]
 800a882:	f004 f8db 	bl	800ea3c <tcp_poll>
      tcp_err(tpcb, NULL);
 800a886:	2100      	movs	r1, #0
 800a888:	6938      	ldr	r0, [r7, #16]
 800a88a:	f004 f89d 	bl	800e9c8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a88e:	7dbb      	ldrb	r3, [r7, #22]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d005      	beq.n	800a8a0 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a894:	6938      	ldr	r0, [r7, #16]
 800a896:	f002 ff37 	bl	800d708 <tcp_close>
 800a89a:	4603      	mov	r3, r0
 800a89c:	75fb      	strb	r3, [r7, #23]
 800a89e:	e007      	b.n	800a8b0 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a8a0:	7bbb      	ldrb	r3, [r7, #14]
 800a8a2:	7b7a      	ldrb	r2, [r7, #13]
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	6938      	ldr	r0, [r7, #16]
 800a8a8:	f002 ff5a 	bl	800d760 <tcp_shutdown>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a8b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d102      	bne.n	800a8be <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	757b      	strb	r3, [r7, #21]
 800a8bc:	e016      	b.n	800a8ec <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a8be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c6:	d10f      	bne.n	800a8e8 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a1b      	ldr	r3, [r3, #32]
 800a8cc:	7a5b      	ldrb	r3, [r3, #9]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d10c      	bne.n	800a8ec <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a8d6:	7dbb      	ldrb	r3, [r7, #22]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d007      	beq.n	800a8ec <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a8dc:	6938      	ldr	r0, [r7, #16]
 800a8de:	f003 f859 	bl	800d994 <tcp_abort>
          err = ERR_OK;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	75fb      	strb	r3, [r7, #23]
 800a8e6:	e001      	b.n	800a8ec <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a8ec:	7d7b      	ldrb	r3, [r7, #21]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d044      	beq.n	800a97c <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a1b      	ldr	r3, [r3, #32]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	330c      	adds	r3, #12
 800a8fa:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a1b      	ldr	r3, [r3, #32]
 800a900:	7dfa      	ldrb	r2, [r7, #23]
 800a902:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a910:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d129      	bne.n	800a96c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a918:	7dbb      	ldrb	r3, [r7, #22]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00c      	beq.n	800a938 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2200      	movs	r2, #0
 800a922:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d005      	beq.n	800a938 <lwip_netconn_do_close_internal+0x1f0>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a930:	2200      	movs	r2, #0
 800a932:	2104      	movs	r1, #4
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	4798      	blx	r3
      }
      if (shut_rx) {
 800a938:	7bbb      	ldrb	r3, [r7, #14]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d009      	beq.n	800a952 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a942:	2b00      	cmp	r3, #0
 800a944:	d005      	beq.n	800a952 <lwip_netconn_do_close_internal+0x20a>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94a:	2200      	movs	r2, #0
 800a94c:	2100      	movs	r1, #0
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	4798      	blx	r3
      }
      if (shut_tx) {
 800a952:	7b7b      	ldrb	r3, [r7, #13]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d009      	beq.n	800a96c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d005      	beq.n	800a96c <lwip_netconn_do_close_internal+0x224>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a964:	2200      	movs	r2, #0
 800a966:	2102      	movs	r1, #2
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a96c:	78fb      	ldrb	r3, [r7, #3]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d002      	beq.n	800a978 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a972:	68b8      	ldr	r0, [r7, #8]
 800a974:	f00b feb4 	bl	80166e0 <sys_sem_signal>
    }
    return ERR_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	e02e      	b.n	800a9da <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800a97c:	7d7b      	ldrb	r3, [r7, #21]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d11e      	bne.n	800a9c0 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	7d1b      	ldrb	r3, [r3, #20]
 800a986:	2b01      	cmp	r3, #1
 800a988:	d106      	bne.n	800a998 <lwip_netconn_do_close_internal+0x250>
 800a98a:	4b16      	ldr	r3, [pc, #88]	; (800a9e4 <lwip_netconn_do_close_internal+0x29c>)
 800a98c:	f240 4241 	movw	r2, #1089	; 0x441
 800a990:	491b      	ldr	r1, [pc, #108]	; (800aa00 <lwip_netconn_do_close_internal+0x2b8>)
 800a992:	4816      	ldr	r0, [pc, #88]	; (800a9ec <lwip_netconn_do_close_internal+0x2a4>)
 800a994:	f00c f956 	bl	8016c44 <iprintf>
    if (shut_tx) {
 800a998:	7b7b      	ldrb	r3, [r7, #13]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d003      	beq.n	800a9a6 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800a99e:	4919      	ldr	r1, [pc, #100]	; (800aa04 <lwip_netconn_do_close_internal+0x2bc>)
 800a9a0:	6938      	ldr	r0, [r7, #16]
 800a9a2:	f003 ffef 	bl	800e984 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	4917      	ldr	r1, [pc, #92]	; (800aa08 <lwip_netconn_do_close_internal+0x2c0>)
 800a9aa:	6938      	ldr	r0, [r7, #16]
 800a9ac:	f004 f846 	bl	800ea3c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a9b0:	4916      	ldr	r1, [pc, #88]	; (800aa0c <lwip_netconn_do_close_internal+0x2c4>)
 800a9b2:	6938      	ldr	r0, [r7, #16]
 800a9b4:	f004 f808 	bl	800e9c8 <tcp_err>
    tcp_arg(tpcb, conn);
 800a9b8:	6879      	ldr	r1, [r7, #4]
 800a9ba:	6938      	ldr	r0, [r7, #16]
 800a9bc:	f003 ffae 	bl	800e91c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a9c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d106      	bne.n	800a9d6 <lwip_netconn_do_close_internal+0x28e>
 800a9c8:	4b06      	ldr	r3, [pc, #24]	; (800a9e4 <lwip_netconn_do_close_internal+0x29c>)
 800a9ca:	f240 424d 	movw	r2, #1101	; 0x44d
 800a9ce:	4910      	ldr	r1, [pc, #64]	; (800aa10 <lwip_netconn_do_close_internal+0x2c8>)
 800a9d0:	4806      	ldr	r0, [pc, #24]	; (800a9ec <lwip_netconn_do_close_internal+0x2a4>)
 800a9d2:	f00c f937 	bl	8016c44 <iprintf>
  return err;
 800a9d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3718      	adds	r7, #24
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	08017e30 	.word	0x08017e30
 800a9e8:	08018104 	.word	0x08018104
 800a9ec:	08017e74 	.word	0x08017e74
 800a9f0:	08018114 	.word	0x08018114
 800a9f4:	08018134 	.word	0x08018134
 800a9f8:	08018158 	.word	0x08018158
 800a9fc:	08017f98 	.word	0x08017f98
 800aa00:	0801816c 	.word	0x0801816c
 800aa04:	0800a139 	.word	0x0800a139
 800aa08:	0800a071 	.word	0x0800a071
 800aa0c:	0800a1e1 	.word	0x0800a1e1
 800aa10:	08018190 	.word	0x08018190

0800aa14 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	785b      	ldrb	r3, [r3, #1]
 800aa26:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800aa28:	7afb      	ldrb	r3, [r7, #11]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00d      	beq.n	800aa4a <lwip_netconn_do_delconn+0x36>
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa38:	2b10      	cmp	r3, #16
 800aa3a:	d006      	beq.n	800aa4a <lwip_netconn_do_delconn+0x36>
 800aa3c:	4b60      	ldr	r3, [pc, #384]	; (800abc0 <lwip_netconn_do_delconn+0x1ac>)
 800aa3e:	f240 425e 	movw	r2, #1118	; 0x45e
 800aa42:	4960      	ldr	r1, [pc, #384]	; (800abc4 <lwip_netconn_do_delconn+0x1b0>)
 800aa44:	4860      	ldr	r0, [pc, #384]	; (800abc8 <lwip_netconn_do_delconn+0x1b4>)
 800aa46:	f00c f8fd 	bl	8016c44 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800aa4a:	7afb      	ldrb	r3, [r7, #11]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d005      	beq.n	800aa5c <lwip_netconn_do_delconn+0x48>
 800aa50:	7afb      	ldrb	r3, [r7, #11]
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d002      	beq.n	800aa5c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800aa56:	7afb      	ldrb	r3, [r7, #11]
 800aa58:	2b03      	cmp	r3, #3
 800aa5a:	d109      	bne.n	800aa70 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800aa5c:	7afb      	ldrb	r3, [r7, #11]
 800aa5e:	2b03      	cmp	r3, #3
 800aa60:	d10a      	bne.n	800aa78 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	7f1b      	ldrb	r3, [r3, #28]
 800aa68:	f003 0304 	and.w	r3, r3, #4
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d103      	bne.n	800aa78 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	22fb      	movs	r2, #251	; 0xfb
 800aa74:	711a      	strb	r2, [r3, #4]
 800aa76:	e097      	b.n	800aba8 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800aa78:	7afb      	ldrb	r3, [r7, #11]
 800aa7a:	2b03      	cmp	r3, #3
 800aa7c:	d10d      	bne.n	800aa9a <lwip_netconn_do_delconn+0x86>
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	7f1b      	ldrb	r3, [r3, #28]
 800aa84:	f003 0304 	and.w	r3, r3, #4
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d106      	bne.n	800aa9a <lwip_netconn_do_delconn+0x86>
 800aa8c:	4b4c      	ldr	r3, [pc, #304]	; (800abc0 <lwip_netconn_do_delconn+0x1ac>)
 800aa8e:	f240 427a 	movw	r2, #1146	; 0x47a
 800aa92:	494e      	ldr	r1, [pc, #312]	; (800abcc <lwip_netconn_do_delconn+0x1b8>)
 800aa94:	484c      	ldr	r0, [pc, #304]	; (800abc8 <lwip_netconn_do_delconn+0x1b4>)
 800aa96:	f00c f8d5 	bl	8016c44 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7ff fdd1 	bl	800a64c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d05f      	beq.n	800ab74 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aabe:	2b10      	cmp	r3, #16
 800aac0:	d00d      	beq.n	800aade <lwip_netconn_do_delconn+0xca>
 800aac2:	2b20      	cmp	r3, #32
 800aac4:	d151      	bne.n	800ab6a <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	4618      	mov	r0, r3
 800aad8:	f009 f98c 	bl	8013df4 <udp_remove>
          break;
 800aadc:	e046      	b.n	800ab6c <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	6a1b      	ldr	r3, [r3, #32]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d006      	beq.n	800aaf6 <lwip_netconn_do_delconn+0xe2>
 800aae8:	4b35      	ldr	r3, [pc, #212]	; (800abc0 <lwip_netconn_do_delconn+0x1ac>)
 800aaea:	f240 4294 	movw	r2, #1172	; 0x494
 800aaee:	4938      	ldr	r1, [pc, #224]	; (800abd0 <lwip_netconn_do_delconn+0x1bc>)
 800aaf0:	4835      	ldr	r0, [pc, #212]	; (800abc8 <lwip_netconn_do_delconn+0x1b4>)
 800aaf2:	f00c f8a7 	bl	8016c44 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2204      	movs	r2, #4
 800aafc:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2203      	movs	r2, #3
 800ab02:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2100      	movs	r1, #0
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7ff fe18 	bl	800a748 <lwip_netconn_do_close_internal>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d04b      	beq.n	800abb6 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	785b      	ldrb	r3, [r3, #1]
 800ab24:	2b04      	cmp	r3, #4
 800ab26:	d006      	beq.n	800ab36 <lwip_netconn_do_delconn+0x122>
 800ab28:	4b25      	ldr	r3, [pc, #148]	; (800abc0 <lwip_netconn_do_delconn+0x1ac>)
 800ab2a:	f240 429a 	movw	r2, #1178	; 0x49a
 800ab2e:	4929      	ldr	r1, [pc, #164]	; (800abd4 <lwip_netconn_do_delconn+0x1c0>)
 800ab30:	4825      	ldr	r0, [pc, #148]	; (800abc8 <lwip_netconn_do_delconn+0x1b4>)
 800ab32:	f00c f887 	bl	8016c44 <iprintf>
            UNLOCK_TCPIP_CORE();
 800ab36:	4828      	ldr	r0, [pc, #160]	; (800abd8 <lwip_netconn_do_delconn+0x1c4>)
 800ab38:	f00b fe43 	bl	80167c2 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	330c      	adds	r3, #12
 800ab42:	2100      	movs	r1, #0
 800ab44:	4618      	mov	r0, r3
 800ab46:	f00b fd9a 	bl	801667e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800ab4a:	4823      	ldr	r0, [pc, #140]	; (800abd8 <lwip_netconn_do_delconn+0x1c4>)
 800ab4c:	f00b fe2a 	bl	80167a4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	785b      	ldrb	r3, [r3, #1]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d02d      	beq.n	800abb6 <lwip_netconn_do_delconn+0x1a2>
 800ab5a:	4b19      	ldr	r3, [pc, #100]	; (800abc0 <lwip_netconn_do_delconn+0x1ac>)
 800ab5c:	f240 429e 	movw	r2, #1182	; 0x49e
 800ab60:	491c      	ldr	r1, [pc, #112]	; (800abd4 <lwip_netconn_do_delconn+0x1c0>)
 800ab62:	4819      	ldr	r0, [pc, #100]	; (800abc8 <lwip_netconn_do_delconn+0x1b4>)
 800ab64:	f00c f86e 	bl	8016c44 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800ab68:	e025      	b.n	800abb6 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800ab6a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2200      	movs	r2, #0
 800ab72:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d007      	beq.n	800ab8e <lwip_netconn_do_delconn+0x17a>
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	6810      	ldr	r0, [r2, #0]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	2100      	movs	r1, #0
 800ab8c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d007      	beq.n	800aba8 <lwip_netconn_do_delconn+0x194>
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	6810      	ldr	r0, [r2, #0]
 800aba2:	2200      	movs	r2, #0
 800aba4:	2102      	movs	r1, #2
 800aba6:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	330c      	adds	r3, #12
 800abae:	4618      	mov	r0, r3
 800abb0:	f00b fdb0 	bl	8016714 <sys_sem_valid>
 800abb4:	e000      	b.n	800abb8 <lwip_netconn_do_delconn+0x1a4>
          return;
 800abb6:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800abb8:	3710      	adds	r7, #16
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	08017e30 	.word	0x08017e30
 800abc4:	080181a0 	.word	0x080181a0
 800abc8:	08017e74 	.word	0x08017e74
 800abcc:	080181b4 	.word	0x080181b4
 800abd0:	080181d4 	.word	0x080181d4
 800abd4:	080181f0 	.word	0x080181f0
 800abd8:	20009c9c 	.word	0x20009c9c

0800abdc <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d025      	beq.n	800ac3e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abfc:	2b10      	cmp	r3, #16
 800abfe:	d00e      	beq.n	800ac1e <lwip_netconn_do_bind+0x42>
 800ac00:	2b20      	cmp	r3, #32
 800ac02:	d119      	bne.n	800ac38 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	6858      	ldr	r0, [r3, #4]
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	6899      	ldr	r1, [r3, #8]
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	899b      	ldrh	r3, [r3, #12]
 800ac12:	461a      	mov	r2, r3
 800ac14:	f009 f846 	bl	8013ca4 <udp_bind>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	73fb      	strb	r3, [r7, #15]
        break;
 800ac1c:	e011      	b.n	800ac42 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	6858      	ldr	r0, [r3, #4]
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	6899      	ldr	r1, [r3, #8]
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	899b      	ldrh	r3, [r3, #12]
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	f002 febd 	bl	800d9ac <tcp_bind>
 800ac32:	4603      	mov	r3, r0
 800ac34:	73fb      	strb	r3, [r7, #15]
        break;
 800ac36:	e004      	b.n	800ac42 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800ac38:	23fa      	movs	r3, #250	; 0xfa
 800ac3a:	73fb      	strb	r3, [r7, #15]
        break;
 800ac3c:	e001      	b.n	800ac42 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800ac3e:	23fa      	movs	r3, #250	; 0xfa
 800ac40:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	7bfa      	ldrb	r2, [r7, #15]
 800ac46:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ac48:	bf00      	nop
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7ff f875 	bl	8009d50 <netconn_err>
 800ac66:	4603      	mov	r3, r0
 800ac68:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ac6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d134      	bne.n	800acdc <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d02d      	beq.n	800acd8 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac86:	2b20      	cmp	r3, #32
 800ac88:	d123      	bne.n	800acd2 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	689b      	ldr	r3, [r3, #8]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10c      	bne.n	800acae <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	685a      	ldr	r2, [r3, #4]
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4619      	mov	r1, r3
 800aca2:	4610      	mov	r0, r2
 800aca4:	f008 fe14 	bl	80138d0 <udp_send>
 800aca8:	4603      	mov	r3, r0
 800acaa:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800acac:	e016      	b.n	800acdc <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6858      	ldr	r0, [r3, #4]
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	6819      	ldr	r1, [r3, #0]
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	f103 0208 	add.w	r2, r3, #8
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	899b      	ldrh	r3, [r3, #12]
 800acc8:	f008 fe36 	bl	8013938 <udp_sendto>
 800accc:	4603      	mov	r3, r0
 800acce:	73fb      	strb	r3, [r7, #15]
          break;
 800acd0:	e004      	b.n	800acdc <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800acd2:	23f5      	movs	r3, #245	; 0xf5
 800acd4:	73fb      	strb	r3, [r7, #15]
          break;
 800acd6:	e001      	b.n	800acdc <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800acd8:	23f5      	movs	r3, #245	; 0xf5
 800acda:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	7bfa      	ldrb	r2, [r7, #15]
 800ace0:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ace2:	bf00      	nop
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b086      	sub	sp, #24
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	2200      	movs	r2, #0
 800acfa:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d022      	beq.n	800ad4c <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad10:	2b10      	cmp	r3, #16
 800ad12:	d11b      	bne.n	800ad4c <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad20:	d202      	bcs.n	800ad28 <lwip_netconn_do_recv+0x3e>
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	e001      	b.n	800ad2c <lwip_netconn_do_recv+0x42>
 800ad28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad2c:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	89fa      	ldrh	r2, [r7, #14]
 800ad36:	4611      	mov	r1, r2
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f002 ff29 	bl	800db90 <tcp_recved>
        remaining -= recved;
 800ad3e:	89fb      	ldrh	r3, [r7, #14]
 800ad40:	697a      	ldr	r2, [r7, #20]
 800ad42:	1ad3      	subs	r3, r2, r3
 800ad44:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d1e6      	bne.n	800ad1a <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ad4c:	bf00      	nop
 800ad4e:	3718      	adds	r7, #24
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b088      	sub	sp, #32
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d106      	bne.n	800ad78 <lwip_netconn_do_writemore+0x24>
 800ad6a:	4b96      	ldr	r3, [pc, #600]	; (800afc4 <lwip_netconn_do_writemore+0x270>)
 800ad6c:	f240 6273 	movw	r2, #1651	; 0x673
 800ad70:	4995      	ldr	r1, [pc, #596]	; (800afc8 <lwip_netconn_do_writemore+0x274>)
 800ad72:	4896      	ldr	r0, [pc, #600]	; (800afcc <lwip_netconn_do_writemore+0x278>)
 800ad74:	f00b ff66 	bl	8016c44 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	785b      	ldrb	r3, [r3, #1]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d006      	beq.n	800ad8e <lwip_netconn_do_writemore+0x3a>
 800ad80:	4b90      	ldr	r3, [pc, #576]	; (800afc4 <lwip_netconn_do_writemore+0x270>)
 800ad82:	f240 6274 	movw	r2, #1652	; 0x674
 800ad86:	4992      	ldr	r1, [pc, #584]	; (800afd0 <lwip_netconn_do_writemore+0x27c>)
 800ad88:	4890      	ldr	r0, [pc, #576]	; (800afcc <lwip_netconn_do_writemore+0x278>)
 800ad8a:	f00b ff5b 	bl	8016c44 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a1b      	ldr	r3, [r3, #32]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d106      	bne.n	800ada4 <lwip_netconn_do_writemore+0x50>
 800ad96:	4b8b      	ldr	r3, [pc, #556]	; (800afc4 <lwip_netconn_do_writemore+0x270>)
 800ad98:	f240 6275 	movw	r2, #1653	; 0x675
 800ad9c:	498d      	ldr	r1, [pc, #564]	; (800afd4 <lwip_netconn_do_writemore+0x280>)
 800ad9e:	488b      	ldr	r0, [pc, #556]	; (800afcc <lwip_netconn_do_writemore+0x278>)
 800ada0:	f00b ff50 	bl	8016c44 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d106      	bne.n	800adba <lwip_netconn_do_writemore+0x66>
 800adac:	4b85      	ldr	r3, [pc, #532]	; (800afc4 <lwip_netconn_do_writemore+0x270>)
 800adae:	f240 6276 	movw	r2, #1654	; 0x676
 800adb2:	4989      	ldr	r1, [pc, #548]	; (800afd8 <lwip_netconn_do_writemore+0x284>)
 800adb4:	4885      	ldr	r0, [pc, #532]	; (800afcc <lwip_netconn_do_writemore+0x278>)
 800adb6:	f00b ff45 	bl	8016c44 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a1b      	ldr	r3, [r3, #32]
 800adbe:	699a      	ldr	r2, [r3, #24]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6a1b      	ldr	r3, [r3, #32]
 800adc4:	695b      	ldr	r3, [r3, #20]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d306      	bcc.n	800add8 <lwip_netconn_do_writemore+0x84>
 800adca:	4b7e      	ldr	r3, [pc, #504]	; (800afc4 <lwip_netconn_do_writemore+0x270>)
 800adcc:	f240 6277 	movw	r2, #1655	; 0x677
 800add0:	4982      	ldr	r1, [pc, #520]	; (800afdc <lwip_netconn_do_writemore+0x288>)
 800add2:	487e      	ldr	r0, [pc, #504]	; (800afcc <lwip_netconn_do_writemore+0x278>)
 800add4:	f00b ff36 	bl	8016c44 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a1b      	ldr	r3, [r3, #32]
 800addc:	899b      	ldrh	r3, [r3, #12]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d106      	bne.n	800adf0 <lwip_netconn_do_writemore+0x9c>
 800ade2:	4b78      	ldr	r3, [pc, #480]	; (800afc4 <lwip_netconn_do_writemore+0x270>)
 800ade4:	f240 6279 	movw	r2, #1657	; 0x679
 800ade8:	497d      	ldr	r1, [pc, #500]	; (800afe0 <lwip_netconn_do_writemore+0x28c>)
 800adea:	4878      	ldr	r0, [pc, #480]	; (800afcc <lwip_netconn_do_writemore+0x278>)
 800adec:	f00b ff2a 	bl	8016c44 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6a1b      	ldr	r3, [r3, #32]
 800adf4:	7f1b      	ldrb	r3, [r3, #28]
 800adf6:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	7f1b      	ldrb	r3, [r3, #28]
 800adfc:	f003 0302 	and.w	r3, r3, #2
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d104      	bne.n	800ae0e <lwip_netconn_do_writemore+0xba>
 800ae04:	7ebb      	ldrb	r3, [r7, #26]
 800ae06:	f003 0304 	and.w	r3, r3, #4
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d001      	beq.n	800ae12 <lwip_netconn_do_writemore+0xbe>
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e000      	b.n	800ae14 <lwip_netconn_do_writemore+0xc0>
 800ae12:	2300      	movs	r3, #0
 800ae14:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a1b      	ldr	r3, [r3, #32]
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	681a      	ldr	r2, [r3, #0]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a1b      	ldr	r3, [r3, #32]
 800ae22:	691b      	ldr	r3, [r3, #16]
 800ae24:	4413      	add	r3, r2
 800ae26:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6a1b      	ldr	r3, [r3, #32]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	685a      	ldr	r2, [r3, #4]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6a1b      	ldr	r3, [r3, #32]
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae40:	d307      	bcc.n	800ae52 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800ae42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae46:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ae48:	7ebb      	ldrb	r3, [r7, #26]
 800ae4a:	f043 0302 	orr.w	r3, r3, #2
 800ae4e:	76bb      	strb	r3, [r7, #26]
 800ae50:	e001      	b.n	800ae56 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ae5e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800ae60:	89fa      	ldrh	r2, [r7, #14]
 800ae62:	8bbb      	ldrh	r3, [r7, #28]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d216      	bcs.n	800ae96 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800ae68:	89fb      	ldrh	r3, [r7, #14]
 800ae6a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800ae6c:	7e3b      	ldrb	r3, [r7, #24]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d00d      	beq.n	800ae8e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800ae72:	8bbb      	ldrh	r3, [r7, #28]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d10e      	bne.n	800ae96 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a1b      	ldr	r3, [r3, #32]
 800ae7c:	699b      	ldr	r3, [r3, #24]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d102      	bne.n	800ae88 <lwip_netconn_do_writemore+0x134>
 800ae82:	f06f 0306 	mvn.w	r3, #6
 800ae86:	e000      	b.n	800ae8a <lwip_netconn_do_writemore+0x136>
 800ae88:	2300      	movs	r3, #0
 800ae8a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800ae8c:	e07d      	b.n	800af8a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800ae8e:	7ebb      	ldrb	r3, [r7, #26]
 800ae90:	f043 0302 	orr.w	r3, r3, #2
 800ae94:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a1b      	ldr	r3, [r3, #32]
 800ae9a:	691a      	ldr	r2, [r3, #16]
 800ae9c:	8bbb      	ldrh	r3, [r7, #28]
 800ae9e:	441a      	add	r2, r3
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6a1b      	ldr	r3, [r3, #32]
 800aea4:	689b      	ldr	r3, [r3, #8]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d906      	bls.n	800aeba <lwip_netconn_do_writemore+0x166>
 800aeac:	4b45      	ldr	r3, [pc, #276]	; (800afc4 <lwip_netconn_do_writemore+0x270>)
 800aeae:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800aeb2:	494c      	ldr	r1, [pc, #304]	; (800afe4 <lwip_netconn_do_writemore+0x290>)
 800aeb4:	4845      	ldr	r0, [pc, #276]	; (800afcc <lwip_netconn_do_writemore+0x278>)
 800aeb6:	f00b fec5 	bl	8016c44 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800aeba:	8bbb      	ldrh	r3, [r7, #28]
 800aebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d103      	bne.n	800aecc <lwip_netconn_do_writemore+0x178>
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aeca:	d209      	bcs.n	800aee0 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800aed0:	8bba      	ldrh	r2, [r7, #28]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d10b      	bne.n	800aeee <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a1b      	ldr	r3, [r3, #32]
 800aeda:	899b      	ldrh	r3, [r3, #12]
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d906      	bls.n	800aeee <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800aee0:	2301      	movs	r3, #1
 800aee2:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800aee4:	7ebb      	ldrb	r3, [r7, #26]
 800aee6:	f043 0302 	orr.w	r3, r3, #2
 800aeea:	76bb      	strb	r3, [r7, #26]
 800aeec:	e001      	b.n	800aef2 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800aeee:	2300      	movs	r3, #0
 800aef0:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6858      	ldr	r0, [r3, #4]
 800aef6:	7ebb      	ldrb	r3, [r7, #26]
 800aef8:	8bba      	ldrh	r2, [r7, #28]
 800aefa:	6979      	ldr	r1, [r7, #20]
 800aefc:	f006 fc4c 	bl	8011798 <tcp_write>
 800af00:	4603      	mov	r3, r0
 800af02:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800af04:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d12c      	bne.n	800af66 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6a1b      	ldr	r3, [r3, #32]
 800af10:	6999      	ldr	r1, [r3, #24]
 800af12:	8bba      	ldrh	r2, [r7, #28]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6a1b      	ldr	r3, [r3, #32]
 800af18:	440a      	add	r2, r1
 800af1a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6a1b      	ldr	r3, [r3, #32]
 800af20:	6919      	ldr	r1, [r3, #16]
 800af22:	8bba      	ldrh	r2, [r7, #28]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6a1b      	ldr	r3, [r3, #32]
 800af28:	440a      	add	r2, r1
 800af2a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6a1b      	ldr	r3, [r3, #32]
 800af30:	691a      	ldr	r2, [r3, #16]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a1b      	ldr	r3, [r3, #32]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d113      	bne.n	800af66 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6a1b      	ldr	r3, [r3, #32]
 800af42:	899a      	ldrh	r2, [r3, #12]
 800af44:	3a01      	subs	r2, #1
 800af46:	b292      	uxth	r2, r2
 800af48:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a1b      	ldr	r3, [r3, #32]
 800af4e:	899b      	ldrh	r3, [r3, #12]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d008      	beq.n	800af66 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6a1b      	ldr	r3, [r3, #32]
 800af58:	689a      	ldr	r2, [r3, #8]
 800af5a:	3208      	adds	r2, #8
 800af5c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6a1b      	ldr	r3, [r3, #32]
 800af62:	2200      	movs	r2, #0
 800af64:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800af66:	7e7b      	ldrb	r3, [r7, #25]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d004      	beq.n	800af76 <lwip_netconn_do_writemore+0x222>
 800af6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af70:	2b00      	cmp	r3, #0
 800af72:	f43f af50 	beq.w	800ae16 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800af76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d004      	beq.n	800af88 <lwip_netconn_do_writemore+0x234>
 800af7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af86:	d146      	bne.n	800b016 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800af88:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800af8a:	7e3b      	ldrb	r3, [r7, #24]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d02b      	beq.n	800afe8 <lwip_netconn_do_writemore+0x294>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6a1b      	ldr	r3, [r3, #32]
 800af94:	699a      	ldr	r2, [r3, #24]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6a1b      	ldr	r3, [r3, #32]
 800af9a:	695b      	ldr	r3, [r3, #20]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d223      	bcs.n	800afe8 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d005      	beq.n	800afb4 <lwip_netconn_do_writemore+0x260>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afac:	2200      	movs	r2, #0
 800afae:	2103      	movs	r1, #3
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	7f1b      	ldrb	r3, [r3, #28]
 800afb8:	f043 0310 	orr.w	r3, r3, #16
 800afbc:	b2da      	uxtb	r2, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	771a      	strb	r2, [r3, #28]
 800afc2:	e028      	b.n	800b016 <lwip_netconn_do_writemore+0x2c2>
 800afc4:	08017e30 	.word	0x08017e30
 800afc8:	08017f88 	.word	0x08017f88
 800afcc:	08017e74 	.word	0x08017e74
 800afd0:	08018290 	.word	0x08018290
 800afd4:	08017f98 	.word	0x08017f98
 800afd8:	080182b0 	.word	0x080182b0
 800afdc:	080182c8 	.word	0x080182c8
 800afe0:	08018308 	.word	0x08018308
 800afe4:	08018330 	.word	0x08018330
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aff0:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800aff4:	d305      	bcc.n	800b002 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800affe:	2b04      	cmp	r3, #4
 800b000:	d909      	bls.n	800b016 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b006:	2b00      	cmp	r3, #0
 800b008:	d005      	beq.n	800b016 <lwip_netconn_do_writemore+0x2c2>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00e:	2200      	movs	r2, #0
 800b010:	2103      	movs	r1, #3
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b016:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d11d      	bne.n	800b05a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a1b      	ldr	r3, [r3, #32]
 800b022:	699a      	ldr	r2, [r3, #24]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6a1b      	ldr	r3, [r3, #32]
 800b028:	695b      	ldr	r3, [r3, #20]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d002      	beq.n	800b034 <lwip_netconn_do_writemore+0x2e0>
 800b02e:	7e3b      	ldrb	r3, [r7, #24]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d001      	beq.n	800b038 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b034:	2301      	movs	r3, #1
 800b036:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	4618      	mov	r0, r3
 800b03e:	f007 f995 	bl	801236c <tcp_output>
 800b042:	4603      	mov	r3, r0
 800b044:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b046:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b04a:	f113 0f04 	cmn.w	r3, #4
 800b04e:	d12c      	bne.n	800b0aa <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b050:	7b3b      	ldrb	r3, [r7, #12]
 800b052:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b054:	2301      	movs	r3, #1
 800b056:	76fb      	strb	r3, [r7, #27]
 800b058:	e027      	b.n	800b0aa <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800b05a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b05e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b062:	d120      	bne.n	800b0a6 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	4618      	mov	r0, r3
 800b06a:	f007 f97f 	bl	801236c <tcp_output>
 800b06e:	4603      	mov	r3, r0
 800b070:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b072:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b076:	f113 0f04 	cmn.w	r3, #4
 800b07a:	d104      	bne.n	800b086 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b07c:	7b7b      	ldrb	r3, [r7, #13]
 800b07e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b080:	2301      	movs	r3, #1
 800b082:	76fb      	strb	r3, [r7, #27]
 800b084:	e011      	b.n	800b0aa <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800b086:	7e3b      	ldrb	r3, [r7, #24]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d00e      	beq.n	800b0aa <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6a1b      	ldr	r3, [r3, #32]
 800b090:	699b      	ldr	r3, [r3, #24]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d102      	bne.n	800b09c <lwip_netconn_do_writemore+0x348>
 800b096:	f06f 0306 	mvn.w	r3, #6
 800b09a:	e000      	b.n	800b09e <lwip_netconn_do_writemore+0x34a>
 800b09c:	2300      	movs	r3, #0
 800b09e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	76fb      	strb	r3, [r7, #27]
 800b0a4:	e001      	b.n	800b0aa <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b0aa:	7efb      	ldrb	r3, [r7, #27]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d015      	beq.n	800b0dc <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a1b      	ldr	r3, [r3, #32]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	330c      	adds	r3, #12
 800b0b8:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6a1b      	ldr	r3, [r3, #32]
 800b0be:	7ffa      	ldrb	r2, [r7, #31]
 800b0c0:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b0ce:	78fb      	ldrb	r3, [r7, #3]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d006      	beq.n	800b0e2 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b0d4:	68b8      	ldr	r0, [r7, #8]
 800b0d6:	f00b fb03 	bl	80166e0 <sys_sem_signal>
 800b0da:	e002      	b.n	800b0e2 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b0dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b0e0:	e000      	b.n	800b0e4 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800b0e2:	2300      	movs	r3, #0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3720      	adds	r7, #32
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	785b      	ldrb	r3, [r3, #1]
 800b0fe:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d069      	beq.n	800b1de <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b114:	2b10      	cmp	r3, #16
 800b116:	d162      	bne.n	800b1de <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b11c:	2b03      	cmp	r3, #3
 800b11e:	d002      	beq.n	800b126 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b120:	7afb      	ldrb	r3, [r7, #11]
 800b122:	2b02      	cmp	r3, #2
 800b124:	d05b      	beq.n	800b1de <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b126:	7afb      	ldrb	r3, [r7, #11]
 800b128:	2b03      	cmp	r3, #3
 800b12a:	d103      	bne.n	800b134 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	22f5      	movs	r2, #245	; 0xf5
 800b130:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b132:	e059      	b.n	800b1e8 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b134:	7afb      	ldrb	r3, [r7, #11]
 800b136:	2b01      	cmp	r3, #1
 800b138:	d103      	bne.n	800b142 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	22fb      	movs	r2, #251	; 0xfb
 800b13e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b140:	e052      	b.n	800b1e8 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	7a1b      	ldrb	r3, [r3, #8]
 800b146:	f003 0301 	and.w	r3, r3, #1
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d004      	beq.n	800b158 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4618      	mov	r0, r3
 800b154:	f7ff fa7a 	bl	800a64c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	6a1b      	ldr	r3, [r3, #32]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d006      	beq.n	800b170 <lwip_netconn_do_close+0x84>
 800b162:	4b23      	ldr	r3, [pc, #140]	; (800b1f0 <lwip_netconn_do_close+0x104>)
 800b164:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800b168:	4922      	ldr	r1, [pc, #136]	; (800b1f4 <lwip_netconn_do_close+0x108>)
 800b16a:	4823      	ldr	r0, [pc, #140]	; (800b1f8 <lwip_netconn_do_close+0x10c>)
 800b16c:	f00b fd6a 	bl	8016c44 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	2204      	movs	r2, #4
 800b176:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2100      	movs	r1, #0
 800b186:	4618      	mov	r0, r3
 800b188:	f7ff fade 	bl	800a748 <lwip_netconn_do_close_internal>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d029      	beq.n	800b1e6 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	785b      	ldrb	r3, [r3, #1]
 800b198:	2b04      	cmp	r3, #4
 800b19a:	d006      	beq.n	800b1aa <lwip_netconn_do_close+0xbe>
 800b19c:	4b14      	ldr	r3, [pc, #80]	; (800b1f0 <lwip_netconn_do_close+0x104>)
 800b19e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800b1a2:	4916      	ldr	r1, [pc, #88]	; (800b1fc <lwip_netconn_do_close+0x110>)
 800b1a4:	4814      	ldr	r0, [pc, #80]	; (800b1f8 <lwip_netconn_do_close+0x10c>)
 800b1a6:	f00b fd4d 	bl	8016c44 <iprintf>
        UNLOCK_TCPIP_CORE();
 800b1aa:	4815      	ldr	r0, [pc, #84]	; (800b200 <lwip_netconn_do_close+0x114>)
 800b1ac:	f00b fb09 	bl	80167c2 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	330c      	adds	r3, #12
 800b1b6:	2100      	movs	r1, #0
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f00b fa60 	bl	801667e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b1be:	4810      	ldr	r0, [pc, #64]	; (800b200 <lwip_netconn_do_close+0x114>)
 800b1c0:	f00b faf0 	bl	80167a4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	785b      	ldrb	r3, [r3, #1]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d00b      	beq.n	800b1e6 <lwip_netconn_do_close+0xfa>
 800b1ce:	4b08      	ldr	r3, [pc, #32]	; (800b1f0 <lwip_netconn_do_close+0x104>)
 800b1d0:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800b1d4:	4909      	ldr	r1, [pc, #36]	; (800b1fc <lwip_netconn_do_close+0x110>)
 800b1d6:	4808      	ldr	r0, [pc, #32]	; (800b1f8 <lwip_netconn_do_close+0x10c>)
 800b1d8:	f00b fd34 	bl	8016c44 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b1dc:	e003      	b.n	800b1e6 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	22f5      	movs	r2, #245	; 0xf5
 800b1e2:	711a      	strb	r2, [r3, #4]
 800b1e4:	e000      	b.n	800b1e8 <lwip_netconn_do_close+0xfc>
      return;
 800b1e6:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b1e8:	3710      	adds	r7, #16
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	08017e30 	.word	0x08017e30
 800b1f4:	080181d4 	.word	0x080181d4
 800b1f8:	08017e74 	.word	0x08017e74
 800b1fc:	080181f0 	.word	0x080181f0
 800b200:	20009c9c 	.word	0x20009c9c

0800b204 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b082      	sub	sp, #8
 800b208:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b20a:	2006      	movs	r0, #6
 800b20c:	f000 ff30 	bl	800c070 <memp_malloc>
 800b210:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d004      	beq.n	800b222 <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 800b218:	2210      	movs	r2, #16
 800b21a:	2100      	movs	r1, #0
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f00b fc5f 	bl	8016ae0 <memset>
  }
  return buf;
 800b222:	687b      	ldr	r3, [r7, #4]
}
 800b224:	4618      	mov	r0, r3
 800b226:	3708      	adds	r7, #8
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d013      	beq.n	800b262 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d00b      	beq.n	800b25a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4618      	mov	r0, r3
 800b248:	f001 fda4 	bl	800cd94 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	605a      	str	r2, [r3, #4]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	685a      	ldr	r2, [r3, #4]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b25a:	6879      	ldr	r1, [r7, #4]
 800b25c:	2006      	movs	r0, #6
 800b25e:	f000 ff59 	bl	800c114 <memp_free>
  }
}
 800b262:	bf00      	nop
 800b264:	3708      	adds	r7, #8
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
	...

0800b26c <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	60f8      	str	r0, [r7, #12]
 800b274:	60b9      	str	r1, [r7, #8]
 800b276:	4613      	mov	r3, r2
 800b278:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d108      	bne.n	800b292 <netbuf_ref+0x26>
 800b280:	4b1c      	ldr	r3, [pc, #112]	; (800b2f4 <netbuf_ref+0x88>)
 800b282:	2299      	movs	r2, #153	; 0x99
 800b284:	491c      	ldr	r1, [pc, #112]	; (800b2f8 <netbuf_ref+0x8c>)
 800b286:	481d      	ldr	r0, [pc, #116]	; (800b2fc <netbuf_ref+0x90>)
 800b288:	f00b fcdc 	bl	8016c44 <iprintf>
 800b28c:	f06f 030f 	mvn.w	r3, #15
 800b290:	e02b      	b.n	800b2ea <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d004      	beq.n	800b2a4 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f001 fd78 	bl	800cd94 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800b2a4:	2241      	movs	r2, #65	; 0x41
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	2036      	movs	r0, #54	; 0x36
 800b2aa:	f001 fa8f 	bl	800c7cc <pbuf_alloc>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d105      	bne.n	800b2c8 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800b2c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b2c6:	e010      	b.n	800b2ea <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	68ba      	ldr	r2, [r7, #8]
 800b2ce:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	88fa      	ldrh	r2, [r7, #6]
 800b2d6:	811a      	strh	r2, [r3, #8]
 800b2d8:	68fa      	ldr	r2, [r7, #12]
 800b2da:	6812      	ldr	r2, [r2, #0]
 800b2dc:	891b      	ldrh	r3, [r3, #8]
 800b2de:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800b2e8:	2300      	movs	r3, #0
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3710      	adds	r7, #16
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	08018388 	.word	0x08018388
 800b2f8:	08018440 	.word	0x08018440
 800b2fc:	080183d8 	.word	0x080183d8

0800b300 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d108      	bne.n	800b324 <netbuf_data+0x24>
 800b312:	4b1b      	ldr	r3, [pc, #108]	; (800b380 <netbuf_data+0x80>)
 800b314:	22c6      	movs	r2, #198	; 0xc6
 800b316:	491b      	ldr	r1, [pc, #108]	; (800b384 <netbuf_data+0x84>)
 800b318:	481b      	ldr	r0, [pc, #108]	; (800b388 <netbuf_data+0x88>)
 800b31a:	f00b fc93 	bl	8016c44 <iprintf>
 800b31e:	f06f 030f 	mvn.w	r3, #15
 800b322:	e029      	b.n	800b378 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d108      	bne.n	800b33c <netbuf_data+0x3c>
 800b32a:	4b15      	ldr	r3, [pc, #84]	; (800b380 <netbuf_data+0x80>)
 800b32c:	22c7      	movs	r2, #199	; 0xc7
 800b32e:	4917      	ldr	r1, [pc, #92]	; (800b38c <netbuf_data+0x8c>)
 800b330:	4815      	ldr	r0, [pc, #84]	; (800b388 <netbuf_data+0x88>)
 800b332:	f00b fc87 	bl	8016c44 <iprintf>
 800b336:	f06f 030f 	mvn.w	r3, #15
 800b33a:	e01d      	b.n	800b378 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d108      	bne.n	800b354 <netbuf_data+0x54>
 800b342:	4b0f      	ldr	r3, [pc, #60]	; (800b380 <netbuf_data+0x80>)
 800b344:	22c8      	movs	r2, #200	; 0xc8
 800b346:	4912      	ldr	r1, [pc, #72]	; (800b390 <netbuf_data+0x90>)
 800b348:	480f      	ldr	r0, [pc, #60]	; (800b388 <netbuf_data+0x88>)
 800b34a:	f00b fc7b 	bl	8016c44 <iprintf>
 800b34e:	f06f 030f 	mvn.w	r3, #15
 800b352:	e011      	b.n	800b378 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d102      	bne.n	800b362 <netbuf_data+0x62>
    return ERR_BUF;
 800b35c:	f06f 0301 	mvn.w	r3, #1
 800b360:	e00a      	b.n	800b378 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	685a      	ldr	r2, [r3, #4]
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	895a      	ldrh	r2, [r3, #10]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800b376:	2300      	movs	r3, #0
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3710      	adds	r7, #16
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	08018388 	.word	0x08018388
 800b384:	08018490 	.word	0x08018490
 800b388:	080183d8 	.word	0x080183d8
 800b38c:	080184ac 	.word	0x080184ac
 800b390:	080184cc 	.word	0x080184cc

0800b394 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b39e:	f008 f89d 	bl	80134dc <sys_timeouts_sleeptime>
 800b3a2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3aa:	d10b      	bne.n	800b3c4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b3ac:	4813      	ldr	r0, [pc, #76]	; (800b3fc <tcpip_timeouts_mbox_fetch+0x68>)
 800b3ae:	f00b fa08 	bl	80167c2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	6839      	ldr	r1, [r7, #0]
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f00b f8c0 	bl	801653c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b3bc:	480f      	ldr	r0, [pc, #60]	; (800b3fc <tcpip_timeouts_mbox_fetch+0x68>)
 800b3be:	f00b f9f1 	bl	80167a4 <sys_mutex_lock>
    return;
 800b3c2:	e018      	b.n	800b3f6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d102      	bne.n	800b3d0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b3ca:	f008 f84d 	bl	8013468 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b3ce:	e7e6      	b.n	800b39e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b3d0:	480a      	ldr	r0, [pc, #40]	; (800b3fc <tcpip_timeouts_mbox_fetch+0x68>)
 800b3d2:	f00b f9f6 	bl	80167c2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b3d6:	68fa      	ldr	r2, [r7, #12]
 800b3d8:	6839      	ldr	r1, [r7, #0]
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f00b f8ae 	bl	801653c <sys_arch_mbox_fetch>
 800b3e0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b3e2:	4806      	ldr	r0, [pc, #24]	; (800b3fc <tcpip_timeouts_mbox_fetch+0x68>)
 800b3e4:	f00b f9de 	bl	80167a4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ee:	d102      	bne.n	800b3f6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b3f0:	f008 f83a 	bl	8013468 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b3f4:	e7d3      	b.n	800b39e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b3f6:	3710      	adds	r7, #16
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	20009c9c 	.word	0x20009c9c

0800b400 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b408:	4810      	ldr	r0, [pc, #64]	; (800b44c <tcpip_thread+0x4c>)
 800b40a:	f00b f9cb 	bl	80167a4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b40e:	4b10      	ldr	r3, [pc, #64]	; (800b450 <tcpip_thread+0x50>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d005      	beq.n	800b422 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b416:	4b0e      	ldr	r3, [pc, #56]	; (800b450 <tcpip_thread+0x50>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a0e      	ldr	r2, [pc, #56]	; (800b454 <tcpip_thread+0x54>)
 800b41c:	6812      	ldr	r2, [r2, #0]
 800b41e:	4610      	mov	r0, r2
 800b420:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b422:	f107 030c 	add.w	r3, r7, #12
 800b426:	4619      	mov	r1, r3
 800b428:	480b      	ldr	r0, [pc, #44]	; (800b458 <tcpip_thread+0x58>)
 800b42a:	f7ff ffb3 	bl	800b394 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d106      	bne.n	800b442 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b434:	4b09      	ldr	r3, [pc, #36]	; (800b45c <tcpip_thread+0x5c>)
 800b436:	2291      	movs	r2, #145	; 0x91
 800b438:	4909      	ldr	r1, [pc, #36]	; (800b460 <tcpip_thread+0x60>)
 800b43a:	480a      	ldr	r0, [pc, #40]	; (800b464 <tcpip_thread+0x64>)
 800b43c:	f00b fc02 	bl	8016c44 <iprintf>
      continue;
 800b440:	e003      	b.n	800b44a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	4618      	mov	r0, r3
 800b446:	f000 f80f 	bl	800b468 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b44a:	e7ea      	b.n	800b422 <tcpip_thread+0x22>
 800b44c:	20009c9c 	.word	0x20009c9c
 800b450:	200067f4 	.word	0x200067f4
 800b454:	200067f8 	.word	0x200067f8
 800b458:	200067fc 	.word	0x200067fc
 800b45c:	08018520 	.word	0x08018520
 800b460:	08018550 	.word	0x08018550
 800b464:	08018570 	.word	0x08018570

0800b468 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	2b02      	cmp	r3, #2
 800b476:	d026      	beq.n	800b4c6 <tcpip_thread_handle_msg+0x5e>
 800b478:	2b02      	cmp	r3, #2
 800b47a:	dc2b      	bgt.n	800b4d4 <tcpip_thread_handle_msg+0x6c>
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d002      	beq.n	800b486 <tcpip_thread_handle_msg+0x1e>
 800b480:	2b01      	cmp	r3, #1
 800b482:	d015      	beq.n	800b4b0 <tcpip_thread_handle_msg+0x48>
 800b484:	e026      	b.n	800b4d4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	6850      	ldr	r0, [r2, #4]
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	6892      	ldr	r2, [r2, #8]
 800b492:	4611      	mov	r1, r2
 800b494:	4798      	blx	r3
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d004      	beq.n	800b4a6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f001 fc77 	bl	800cd94 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b4a6:	6879      	ldr	r1, [r7, #4]
 800b4a8:	2009      	movs	r0, #9
 800b4aa:	f000 fe33 	bl	800c114 <memp_free>
      break;
 800b4ae:	e018      	b.n	800b4e2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	6892      	ldr	r2, [r2, #8]
 800b4b8:	4610      	mov	r0, r2
 800b4ba:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b4bc:	6879      	ldr	r1, [r7, #4]
 800b4be:	2008      	movs	r0, #8
 800b4c0:	f000 fe28 	bl	800c114 <memp_free>
      break;
 800b4c4:	e00d      	b.n	800b4e2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	6892      	ldr	r2, [r2, #8]
 800b4ce:	4610      	mov	r0, r2
 800b4d0:	4798      	blx	r3
      break;
 800b4d2:	e006      	b.n	800b4e2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b4d4:	4b05      	ldr	r3, [pc, #20]	; (800b4ec <tcpip_thread_handle_msg+0x84>)
 800b4d6:	22cf      	movs	r2, #207	; 0xcf
 800b4d8:	4905      	ldr	r1, [pc, #20]	; (800b4f0 <tcpip_thread_handle_msg+0x88>)
 800b4da:	4806      	ldr	r0, [pc, #24]	; (800b4f4 <tcpip_thread_handle_msg+0x8c>)
 800b4dc:	f00b fbb2 	bl	8016c44 <iprintf>
      break;
 800b4e0:	bf00      	nop
  }
}
 800b4e2:	bf00      	nop
 800b4e4:	3708      	adds	r7, #8
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	08018520 	.word	0x08018520
 800b4f0:	08018550 	.word	0x08018550
 800b4f4:	08018570 	.word	0x08018570

0800b4f8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b086      	sub	sp, #24
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b504:	481a      	ldr	r0, [pc, #104]	; (800b570 <tcpip_inpkt+0x78>)
 800b506:	f00b f874 	bl	80165f2 <sys_mbox_valid>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d105      	bne.n	800b51c <tcpip_inpkt+0x24>
 800b510:	4b18      	ldr	r3, [pc, #96]	; (800b574 <tcpip_inpkt+0x7c>)
 800b512:	22fc      	movs	r2, #252	; 0xfc
 800b514:	4918      	ldr	r1, [pc, #96]	; (800b578 <tcpip_inpkt+0x80>)
 800b516:	4819      	ldr	r0, [pc, #100]	; (800b57c <tcpip_inpkt+0x84>)
 800b518:	f00b fb94 	bl	8016c44 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b51c:	2009      	movs	r0, #9
 800b51e:	f000 fda7 	bl	800c070 <memp_malloc>
 800b522:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d102      	bne.n	800b530 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b52a:	f04f 33ff 	mov.w	r3, #4294967295
 800b52e:	e01a      	b.n	800b566 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	2200      	movs	r2, #0
 800b534:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	68fa      	ldr	r2, [r7, #12]
 800b53a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	68ba      	ldr	r2, [r7, #8]
 800b540:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b548:	6979      	ldr	r1, [r7, #20]
 800b54a:	4809      	ldr	r0, [pc, #36]	; (800b570 <tcpip_inpkt+0x78>)
 800b54c:	f00a ffdc 	bl	8016508 <sys_mbox_trypost>
 800b550:	4603      	mov	r3, r0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d006      	beq.n	800b564 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b556:	6979      	ldr	r1, [r7, #20]
 800b558:	2009      	movs	r0, #9
 800b55a:	f000 fddb 	bl	800c114 <memp_free>
    return ERR_MEM;
 800b55e:	f04f 33ff 	mov.w	r3, #4294967295
 800b562:	e000      	b.n	800b566 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b564:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b566:	4618      	mov	r0, r3
 800b568:	3718      	adds	r7, #24
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	200067fc 	.word	0x200067fc
 800b574:	08018520 	.word	0x08018520
 800b578:	08018598 	.word	0x08018598
 800b57c:	08018570 	.word	0x08018570

0800b580 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b590:	f003 0318 	and.w	r3, r3, #24
 800b594:	2b00      	cmp	r3, #0
 800b596:	d006      	beq.n	800b5a6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b598:	4a08      	ldr	r2, [pc, #32]	; (800b5bc <tcpip_input+0x3c>)
 800b59a:	6839      	ldr	r1, [r7, #0]
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f7ff ffab 	bl	800b4f8 <tcpip_inpkt>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	e005      	b.n	800b5b2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b5a6:	4a06      	ldr	r2, [pc, #24]	; (800b5c0 <tcpip_input+0x40>)
 800b5a8:	6839      	ldr	r1, [r7, #0]
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7ff ffa4 	bl	800b4f8 <tcpip_inpkt>
 800b5b0:	4603      	mov	r3, r0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3708      	adds	r7, #8
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	080162f5 	.word	0x080162f5
 800b5c0:	08015209 	.word	0x08015209

0800b5c4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b5ce:	4819      	ldr	r0, [pc, #100]	; (800b634 <tcpip_try_callback+0x70>)
 800b5d0:	f00b f80f 	bl	80165f2 <sys_mbox_valid>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d106      	bne.n	800b5e8 <tcpip_try_callback+0x24>
 800b5da:	4b17      	ldr	r3, [pc, #92]	; (800b638 <tcpip_try_callback+0x74>)
 800b5dc:	f240 125d 	movw	r2, #349	; 0x15d
 800b5e0:	4916      	ldr	r1, [pc, #88]	; (800b63c <tcpip_try_callback+0x78>)
 800b5e2:	4817      	ldr	r0, [pc, #92]	; (800b640 <tcpip_try_callback+0x7c>)
 800b5e4:	f00b fb2e 	bl	8016c44 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b5e8:	2008      	movs	r0, #8
 800b5ea:	f000 fd41 	bl	800c070 <memp_malloc>
 800b5ee:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d102      	bne.n	800b5fc <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b5f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b5fa:	e017      	b.n	800b62c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2201      	movs	r2, #1
 800b600:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	683a      	ldr	r2, [r7, #0]
 800b60c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b60e:	68f9      	ldr	r1, [r7, #12]
 800b610:	4808      	ldr	r0, [pc, #32]	; (800b634 <tcpip_try_callback+0x70>)
 800b612:	f00a ff79 	bl	8016508 <sys_mbox_trypost>
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d006      	beq.n	800b62a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b61c:	68f9      	ldr	r1, [r7, #12]
 800b61e:	2008      	movs	r0, #8
 800b620:	f000 fd78 	bl	800c114 <memp_free>
    return ERR_MEM;
 800b624:	f04f 33ff 	mov.w	r3, #4294967295
 800b628:	e000      	b.n	800b62c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b62a:	2300      	movs	r3, #0
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3710      	adds	r7, #16
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}
 800b634:	200067fc 	.word	0x200067fc
 800b638:	08018520 	.word	0x08018520
 800b63c:	08018598 	.word	0x08018598
 800b640:	08018570 	.word	0x08018570

0800b644 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b650:	4806      	ldr	r0, [pc, #24]	; (800b66c <tcpip_send_msg_wait_sem+0x28>)
 800b652:	f00b f8a7 	bl	80167a4 <sys_mutex_lock>
  fn(apimsg);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	68b8      	ldr	r0, [r7, #8]
 800b65a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b65c:	4803      	ldr	r0, [pc, #12]	; (800b66c <tcpip_send_msg_wait_sem+0x28>)
 800b65e:	f00b f8b0 	bl	80167c2 <sys_mutex_unlock>
  return ERR_OK;
 800b662:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b664:	4618      	mov	r0, r3
 800b666:	3710      	adds	r7, #16
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}
 800b66c:	20009c9c 	.word	0x20009c9c

0800b670 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b084      	sub	sp, #16
 800b674:	af02      	add	r7, sp, #8
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b67a:	f000 f871 	bl	800b760 <lwip_init>

  tcpip_init_done = initfunc;
 800b67e:	4a17      	ldr	r2, [pc, #92]	; (800b6dc <tcpip_init+0x6c>)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b684:	4a16      	ldr	r2, [pc, #88]	; (800b6e0 <tcpip_init+0x70>)
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b68a:	2106      	movs	r1, #6
 800b68c:	4815      	ldr	r0, [pc, #84]	; (800b6e4 <tcpip_init+0x74>)
 800b68e:	f00a ff07 	bl	80164a0 <sys_mbox_new>
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d006      	beq.n	800b6a6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b698:	4b13      	ldr	r3, [pc, #76]	; (800b6e8 <tcpip_init+0x78>)
 800b69a:	f240 2261 	movw	r2, #609	; 0x261
 800b69e:	4913      	ldr	r1, [pc, #76]	; (800b6ec <tcpip_init+0x7c>)
 800b6a0:	4813      	ldr	r0, [pc, #76]	; (800b6f0 <tcpip_init+0x80>)
 800b6a2:	f00b facf 	bl	8016c44 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b6a6:	4813      	ldr	r0, [pc, #76]	; (800b6f4 <tcpip_init+0x84>)
 800b6a8:	f00b f860 	bl	801676c <sys_mutex_new>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d006      	beq.n	800b6c0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b6b2:	4b0d      	ldr	r3, [pc, #52]	; (800b6e8 <tcpip_init+0x78>)
 800b6b4:	f240 2265 	movw	r2, #613	; 0x265
 800b6b8:	490f      	ldr	r1, [pc, #60]	; (800b6f8 <tcpip_init+0x88>)
 800b6ba:	480d      	ldr	r0, [pc, #52]	; (800b6f0 <tcpip_init+0x80>)
 800b6bc:	f00b fac2 	bl	8016c44 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	490c      	ldr	r1, [pc, #48]	; (800b6fc <tcpip_init+0x8c>)
 800b6cc:	480c      	ldr	r0, [pc, #48]	; (800b700 <tcpip_init+0x90>)
 800b6ce:	f00b f885 	bl	80167dc <sys_thread_new>
}
 800b6d2:	bf00      	nop
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	200067f4 	.word	0x200067f4
 800b6e0:	200067f8 	.word	0x200067f8
 800b6e4:	200067fc 	.word	0x200067fc
 800b6e8:	08018520 	.word	0x08018520
 800b6ec:	080185a8 	.word	0x080185a8
 800b6f0:	08018570 	.word	0x08018570
 800b6f4:	20009c9c 	.word	0x20009c9c
 800b6f8:	080185cc 	.word	0x080185cc
 800b6fc:	0800b401 	.word	0x0800b401
 800b700:	080185f0 	.word	0x080185f0

0800b704 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	4603      	mov	r3, r0
 800b70c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b70e:	88fb      	ldrh	r3, [r7, #6]
 800b710:	021b      	lsls	r3, r3, #8
 800b712:	b21a      	sxth	r2, r3
 800b714:	88fb      	ldrh	r3, [r7, #6]
 800b716:	0a1b      	lsrs	r3, r3, #8
 800b718:	b29b      	uxth	r3, r3
 800b71a:	b21b      	sxth	r3, r3
 800b71c:	4313      	orrs	r3, r2
 800b71e:	b21b      	sxth	r3, r3
 800b720:	b29b      	uxth	r3, r3
}
 800b722:	4618      	mov	r0, r3
 800b724:	370c      	adds	r7, #12
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr

0800b72e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b72e:	b480      	push	{r7}
 800b730:	b083      	sub	sp, #12
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	061a      	lsls	r2, r3, #24
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	021b      	lsls	r3, r3, #8
 800b73e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b742:	431a      	orrs	r2, r3
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	0a1b      	lsrs	r3, r3, #8
 800b748:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b74c:	431a      	orrs	r2, r3
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	0e1b      	lsrs	r3, r3, #24
 800b752:	4313      	orrs	r3, r2
}
 800b754:	4618      	mov	r0, r3
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b766:	2300      	movs	r3, #0
 800b768:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b76a:	f00a fff1 	bl	8016750 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b76e:	f000 f8d5 	bl	800b91c <mem_init>
  memp_init();
 800b772:	f000 fc31 	bl	800bfd8 <memp_init>
  pbuf_init();
  netif_init();
 800b776:	f000 fcf7 	bl	800c168 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b77a:	f007 fee7 	bl	801354c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b77e:	f001 fdb3 	bl	800d2e8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b782:	f007 fe29 	bl	80133d8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b786:	bf00      	nop
 800b788:	3708      	adds	r7, #8
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
	...

0800b790 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	4603      	mov	r3, r0
 800b798:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b79a:	4b05      	ldr	r3, [pc, #20]	; (800b7b0 <ptr_to_mem+0x20>)
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	88fb      	ldrh	r3, [r7, #6]
 800b7a0:	4413      	add	r3, r2
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	370c      	adds	r7, #12
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop
 800b7b0:	20006800 	.word	0x20006800

0800b7b4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b7bc:	4b05      	ldr	r3, [pc, #20]	; (800b7d4 <mem_to_ptr+0x20>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	1ad3      	subs	r3, r2, r3
 800b7c4:	b29b      	uxth	r3, r3
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	370c      	adds	r7, #12
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr
 800b7d2:	bf00      	nop
 800b7d4:	20006800 	.word	0x20006800

0800b7d8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b7d8:	b590      	push	{r4, r7, lr}
 800b7da:	b085      	sub	sp, #20
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b7e0:	4b45      	ldr	r3, [pc, #276]	; (800b8f8 <plug_holes+0x120>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d206      	bcs.n	800b7f8 <plug_holes+0x20>
 800b7ea:	4b44      	ldr	r3, [pc, #272]	; (800b8fc <plug_holes+0x124>)
 800b7ec:	f240 12df 	movw	r2, #479	; 0x1df
 800b7f0:	4943      	ldr	r1, [pc, #268]	; (800b900 <plug_holes+0x128>)
 800b7f2:	4844      	ldr	r0, [pc, #272]	; (800b904 <plug_holes+0x12c>)
 800b7f4:	f00b fa26 	bl	8016c44 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b7f8:	4b43      	ldr	r3, [pc, #268]	; (800b908 <plug_holes+0x130>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d306      	bcc.n	800b810 <plug_holes+0x38>
 800b802:	4b3e      	ldr	r3, [pc, #248]	; (800b8fc <plug_holes+0x124>)
 800b804:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b808:	4940      	ldr	r1, [pc, #256]	; (800b90c <plug_holes+0x134>)
 800b80a:	483e      	ldr	r0, [pc, #248]	; (800b904 <plug_holes+0x12c>)
 800b80c:	f00b fa1a 	bl	8016c44 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	791b      	ldrb	r3, [r3, #4]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d006      	beq.n	800b826 <plug_holes+0x4e>
 800b818:	4b38      	ldr	r3, [pc, #224]	; (800b8fc <plug_holes+0x124>)
 800b81a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b81e:	493c      	ldr	r1, [pc, #240]	; (800b910 <plug_holes+0x138>)
 800b820:	4838      	ldr	r0, [pc, #224]	; (800b904 <plug_holes+0x12c>)
 800b822:	f00b fa0f 	bl	8016c44 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	881b      	ldrh	r3, [r3, #0]
 800b82a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b82e:	d906      	bls.n	800b83e <plug_holes+0x66>
 800b830:	4b32      	ldr	r3, [pc, #200]	; (800b8fc <plug_holes+0x124>)
 800b832:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b836:	4937      	ldr	r1, [pc, #220]	; (800b914 <plug_holes+0x13c>)
 800b838:	4832      	ldr	r0, [pc, #200]	; (800b904 <plug_holes+0x12c>)
 800b83a:	f00b fa03 	bl	8016c44 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	881b      	ldrh	r3, [r3, #0]
 800b842:	4618      	mov	r0, r3
 800b844:	f7ff ffa4 	bl	800b790 <ptr_to_mem>
 800b848:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d024      	beq.n	800b89c <plug_holes+0xc4>
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	791b      	ldrb	r3, [r3, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d120      	bne.n	800b89c <plug_holes+0xc4>
 800b85a:	4b2b      	ldr	r3, [pc, #172]	; (800b908 <plug_holes+0x130>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	68fa      	ldr	r2, [r7, #12]
 800b860:	429a      	cmp	r2, r3
 800b862:	d01b      	beq.n	800b89c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b864:	4b2c      	ldr	r3, [pc, #176]	; (800b918 <plug_holes+0x140>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d102      	bne.n	800b874 <plug_holes+0x9c>
      lfree = mem;
 800b86e:	4a2a      	ldr	r2, [pc, #168]	; (800b918 <plug_holes+0x140>)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	881a      	ldrh	r2, [r3, #0]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	881b      	ldrh	r3, [r3, #0]
 800b880:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b884:	d00a      	beq.n	800b89c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	881b      	ldrh	r3, [r3, #0]
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7ff ff80 	bl	800b790 <ptr_to_mem>
 800b890:	4604      	mov	r4, r0
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f7ff ff8e 	bl	800b7b4 <mem_to_ptr>
 800b898:	4603      	mov	r3, r0
 800b89a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	885b      	ldrh	r3, [r3, #2]
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7ff ff75 	bl	800b790 <ptr_to_mem>
 800b8a6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b8a8:	68ba      	ldr	r2, [r7, #8]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d01f      	beq.n	800b8f0 <plug_holes+0x118>
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	791b      	ldrb	r3, [r3, #4]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d11b      	bne.n	800b8f0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b8b8:	4b17      	ldr	r3, [pc, #92]	; (800b918 <plug_holes+0x140>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d102      	bne.n	800b8c8 <plug_holes+0xf0>
      lfree = pmem;
 800b8c2:	4a15      	ldr	r2, [pc, #84]	; (800b918 <plug_holes+0x140>)
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	881a      	ldrh	r2, [r3, #0]
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	881b      	ldrh	r3, [r3, #0]
 800b8d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b8d8:	d00a      	beq.n	800b8f0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	881b      	ldrh	r3, [r3, #0]
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7ff ff56 	bl	800b790 <ptr_to_mem>
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	68b8      	ldr	r0, [r7, #8]
 800b8e8:	f7ff ff64 	bl	800b7b4 <mem_to_ptr>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b8f0:	bf00      	nop
 800b8f2:	3714      	adds	r7, #20
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd90      	pop	{r4, r7, pc}
 800b8f8:	20006800 	.word	0x20006800
 800b8fc:	08018600 	.word	0x08018600
 800b900:	08018630 	.word	0x08018630
 800b904:	08018648 	.word	0x08018648
 800b908:	20006804 	.word	0x20006804
 800b90c:	08018670 	.word	0x08018670
 800b910:	0801868c 	.word	0x0801868c
 800b914:	080186a8 	.word	0x080186a8
 800b918:	2000680c 	.word	0x2000680c

0800b91c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b922:	4b1f      	ldr	r3, [pc, #124]	; (800b9a0 <mem_init+0x84>)
 800b924:	3303      	adds	r3, #3
 800b926:	f023 0303 	bic.w	r3, r3, #3
 800b92a:	461a      	mov	r2, r3
 800b92c:	4b1d      	ldr	r3, [pc, #116]	; (800b9a4 <mem_init+0x88>)
 800b92e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b930:	4b1c      	ldr	r3, [pc, #112]	; (800b9a4 <mem_init+0x88>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b93c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2200      	movs	r2, #0
 800b942:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b94a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b94e:	f7ff ff1f 	bl	800b790 <ptr_to_mem>
 800b952:	4603      	mov	r3, r0
 800b954:	4a14      	ldr	r2, [pc, #80]	; (800b9a8 <mem_init+0x8c>)
 800b956:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b958:	4b13      	ldr	r3, [pc, #76]	; (800b9a8 <mem_init+0x8c>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2201      	movs	r2, #1
 800b95e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b960:	4b11      	ldr	r3, [pc, #68]	; (800b9a8 <mem_init+0x8c>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b968:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b96a:	4b0f      	ldr	r3, [pc, #60]	; (800b9a8 <mem_init+0x8c>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b972:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b974:	4b0b      	ldr	r3, [pc, #44]	; (800b9a4 <mem_init+0x88>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4a0c      	ldr	r2, [pc, #48]	; (800b9ac <mem_init+0x90>)
 800b97a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b97c:	480c      	ldr	r0, [pc, #48]	; (800b9b0 <mem_init+0x94>)
 800b97e:	f00a fef5 	bl	801676c <sys_mutex_new>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d006      	beq.n	800b996 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b988:	4b0a      	ldr	r3, [pc, #40]	; (800b9b4 <mem_init+0x98>)
 800b98a:	f240 221f 	movw	r2, #543	; 0x21f
 800b98e:	490a      	ldr	r1, [pc, #40]	; (800b9b8 <mem_init+0x9c>)
 800b990:	480a      	ldr	r0, [pc, #40]	; (800b9bc <mem_init+0xa0>)
 800b992:	f00b f957 	bl	8016c44 <iprintf>
  }
}
 800b996:	bf00      	nop
 800b998:	3708      	adds	r7, #8
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	20009cb8 	.word	0x20009cb8
 800b9a4:	20006800 	.word	0x20006800
 800b9a8:	20006804 	.word	0x20006804
 800b9ac:	2000680c 	.word	0x2000680c
 800b9b0:	20006808 	.word	0x20006808
 800b9b4:	08018600 	.word	0x08018600
 800b9b8:	080186d4 	.word	0x080186d4
 800b9bc:	08018648 	.word	0x08018648

0800b9c0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f7ff fef3 	bl	800b7b4 <mem_to_ptr>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	881b      	ldrh	r3, [r3, #0]
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7ff feda 	bl	800b790 <ptr_to_mem>
 800b9dc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	885b      	ldrh	r3, [r3, #2]
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7ff fed4 	bl	800b790 <ptr_to_mem>
 800b9e8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	881b      	ldrh	r3, [r3, #0]
 800b9ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b9f2:	d818      	bhi.n	800ba26 <mem_link_valid+0x66>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	885b      	ldrh	r3, [r3, #2]
 800b9f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b9fc:	d813      	bhi.n	800ba26 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ba02:	8afa      	ldrh	r2, [r7, #22]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d004      	beq.n	800ba12 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	881b      	ldrh	r3, [r3, #0]
 800ba0c:	8afa      	ldrh	r2, [r7, #22]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d109      	bne.n	800ba26 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ba12:	4b08      	ldr	r3, [pc, #32]	; (800ba34 <mem_link_valid+0x74>)
 800ba14:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba16:	693a      	ldr	r2, [r7, #16]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d006      	beq.n	800ba2a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	885b      	ldrh	r3, [r3, #2]
 800ba20:	8afa      	ldrh	r2, [r7, #22]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d001      	beq.n	800ba2a <mem_link_valid+0x6a>
    return 0;
 800ba26:	2300      	movs	r3, #0
 800ba28:	e000      	b.n	800ba2c <mem_link_valid+0x6c>
  }
  return 1;
 800ba2a:	2301      	movs	r3, #1
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3718      	adds	r7, #24
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	20006804 	.word	0x20006804

0800ba38 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b088      	sub	sp, #32
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d070      	beq.n	800bb28 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f003 0303 	and.w	r3, r3, #3
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d00d      	beq.n	800ba6c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ba50:	4b37      	ldr	r3, [pc, #220]	; (800bb30 <mem_free+0xf8>)
 800ba52:	f240 2273 	movw	r2, #627	; 0x273
 800ba56:	4937      	ldr	r1, [pc, #220]	; (800bb34 <mem_free+0xfc>)
 800ba58:	4837      	ldr	r0, [pc, #220]	; (800bb38 <mem_free+0x100>)
 800ba5a:	f00b f8f3 	bl	8016c44 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ba5e:	f00a fee3 	bl	8016828 <sys_arch_protect>
 800ba62:	60f8      	str	r0, [r7, #12]
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	f00a feed 	bl	8016844 <sys_arch_unprotect>
    return;
 800ba6a:	e05e      	b.n	800bb2a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	3b08      	subs	r3, #8
 800ba70:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ba72:	4b32      	ldr	r3, [pc, #200]	; (800bb3c <mem_free+0x104>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	69fa      	ldr	r2, [r7, #28]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d306      	bcc.n	800ba8a <mem_free+0x52>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f103 020c 	add.w	r2, r3, #12
 800ba82:	4b2f      	ldr	r3, [pc, #188]	; (800bb40 <mem_free+0x108>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d90d      	bls.n	800baa6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ba8a:	4b29      	ldr	r3, [pc, #164]	; (800bb30 <mem_free+0xf8>)
 800ba8c:	f240 227f 	movw	r2, #639	; 0x27f
 800ba90:	492c      	ldr	r1, [pc, #176]	; (800bb44 <mem_free+0x10c>)
 800ba92:	4829      	ldr	r0, [pc, #164]	; (800bb38 <mem_free+0x100>)
 800ba94:	f00b f8d6 	bl	8016c44 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ba98:	f00a fec6 	bl	8016828 <sys_arch_protect>
 800ba9c:	6138      	str	r0, [r7, #16]
 800ba9e:	6938      	ldr	r0, [r7, #16]
 800baa0:	f00a fed0 	bl	8016844 <sys_arch_unprotect>
    return;
 800baa4:	e041      	b.n	800bb2a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800baa6:	4828      	ldr	r0, [pc, #160]	; (800bb48 <mem_free+0x110>)
 800baa8:	f00a fe7c 	bl	80167a4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	791b      	ldrb	r3, [r3, #4]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d110      	bne.n	800bad6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bab4:	4b1e      	ldr	r3, [pc, #120]	; (800bb30 <mem_free+0xf8>)
 800bab6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800baba:	4924      	ldr	r1, [pc, #144]	; (800bb4c <mem_free+0x114>)
 800babc:	481e      	ldr	r0, [pc, #120]	; (800bb38 <mem_free+0x100>)
 800babe:	f00b f8c1 	bl	8016c44 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bac2:	4821      	ldr	r0, [pc, #132]	; (800bb48 <mem_free+0x110>)
 800bac4:	f00a fe7d 	bl	80167c2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bac8:	f00a feae 	bl	8016828 <sys_arch_protect>
 800bacc:	6178      	str	r0, [r7, #20]
 800bace:	6978      	ldr	r0, [r7, #20]
 800bad0:	f00a feb8 	bl	8016844 <sys_arch_unprotect>
    return;
 800bad4:	e029      	b.n	800bb2a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bad6:	69f8      	ldr	r0, [r7, #28]
 800bad8:	f7ff ff72 	bl	800b9c0 <mem_link_valid>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d110      	bne.n	800bb04 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bae2:	4b13      	ldr	r3, [pc, #76]	; (800bb30 <mem_free+0xf8>)
 800bae4:	f240 2295 	movw	r2, #661	; 0x295
 800bae8:	4919      	ldr	r1, [pc, #100]	; (800bb50 <mem_free+0x118>)
 800baea:	4813      	ldr	r0, [pc, #76]	; (800bb38 <mem_free+0x100>)
 800baec:	f00b f8aa 	bl	8016c44 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800baf0:	4815      	ldr	r0, [pc, #84]	; (800bb48 <mem_free+0x110>)
 800baf2:	f00a fe66 	bl	80167c2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800baf6:	f00a fe97 	bl	8016828 <sys_arch_protect>
 800bafa:	61b8      	str	r0, [r7, #24]
 800bafc:	69b8      	ldr	r0, [r7, #24]
 800bafe:	f00a fea1 	bl	8016844 <sys_arch_unprotect>
    return;
 800bb02:	e012      	b.n	800bb2a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bb04:	69fb      	ldr	r3, [r7, #28]
 800bb06:	2200      	movs	r2, #0
 800bb08:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bb0a:	4b12      	ldr	r3, [pc, #72]	; (800bb54 <mem_free+0x11c>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	69fa      	ldr	r2, [r7, #28]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d202      	bcs.n	800bb1a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bb14:	4a0f      	ldr	r2, [pc, #60]	; (800bb54 <mem_free+0x11c>)
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bb1a:	69f8      	ldr	r0, [r7, #28]
 800bb1c:	f7ff fe5c 	bl	800b7d8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bb20:	4809      	ldr	r0, [pc, #36]	; (800bb48 <mem_free+0x110>)
 800bb22:	f00a fe4e 	bl	80167c2 <sys_mutex_unlock>
 800bb26:	e000      	b.n	800bb2a <mem_free+0xf2>
    return;
 800bb28:	bf00      	nop
}
 800bb2a:	3720      	adds	r7, #32
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	08018600 	.word	0x08018600
 800bb34:	080186f0 	.word	0x080186f0
 800bb38:	08018648 	.word	0x08018648
 800bb3c:	20006800 	.word	0x20006800
 800bb40:	20006804 	.word	0x20006804
 800bb44:	08018714 	.word	0x08018714
 800bb48:	20006808 	.word	0x20006808
 800bb4c:	08018730 	.word	0x08018730
 800bb50:	08018758 	.word	0x08018758
 800bb54:	2000680c 	.word	0x2000680c

0800bb58 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b088      	sub	sp, #32
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	460b      	mov	r3, r1
 800bb62:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bb64:	887b      	ldrh	r3, [r7, #2]
 800bb66:	3303      	adds	r3, #3
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	f023 0303 	bic.w	r3, r3, #3
 800bb6e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bb70:	8bfb      	ldrh	r3, [r7, #30]
 800bb72:	2b0b      	cmp	r3, #11
 800bb74:	d801      	bhi.n	800bb7a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bb76:	230c      	movs	r3, #12
 800bb78:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bb7a:	8bfb      	ldrh	r3, [r7, #30]
 800bb7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb80:	d803      	bhi.n	800bb8a <mem_trim+0x32>
 800bb82:	8bfa      	ldrh	r2, [r7, #30]
 800bb84:	887b      	ldrh	r3, [r7, #2]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d201      	bcs.n	800bb8e <mem_trim+0x36>
    return NULL;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	e0d8      	b.n	800bd40 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bb8e:	4b6e      	ldr	r3, [pc, #440]	; (800bd48 <mem_trim+0x1f0>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d304      	bcc.n	800bba2 <mem_trim+0x4a>
 800bb98:	4b6c      	ldr	r3, [pc, #432]	; (800bd4c <mem_trim+0x1f4>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d306      	bcc.n	800bbb0 <mem_trim+0x58>
 800bba2:	4b6b      	ldr	r3, [pc, #428]	; (800bd50 <mem_trim+0x1f8>)
 800bba4:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bba8:	496a      	ldr	r1, [pc, #424]	; (800bd54 <mem_trim+0x1fc>)
 800bbaa:	486b      	ldr	r0, [pc, #428]	; (800bd58 <mem_trim+0x200>)
 800bbac:	f00b f84a 	bl	8016c44 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bbb0:	4b65      	ldr	r3, [pc, #404]	; (800bd48 <mem_trim+0x1f0>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d304      	bcc.n	800bbc4 <mem_trim+0x6c>
 800bbba:	4b64      	ldr	r3, [pc, #400]	; (800bd4c <mem_trim+0x1f4>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d307      	bcc.n	800bbd4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bbc4:	f00a fe30 	bl	8016828 <sys_arch_protect>
 800bbc8:	60b8      	str	r0, [r7, #8]
 800bbca:	68b8      	ldr	r0, [r7, #8]
 800bbcc:	f00a fe3a 	bl	8016844 <sys_arch_unprotect>
    return rmem;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	e0b5      	b.n	800bd40 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	3b08      	subs	r3, #8
 800bbd8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bbda:	69b8      	ldr	r0, [r7, #24]
 800bbdc:	f7ff fdea 	bl	800b7b4 <mem_to_ptr>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	881a      	ldrh	r2, [r3, #0]
 800bbe8:	8afb      	ldrh	r3, [r7, #22]
 800bbea:	1ad3      	subs	r3, r2, r3
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	3b08      	subs	r3, #8
 800bbf0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bbf2:	8bfa      	ldrh	r2, [r7, #30]
 800bbf4:	8abb      	ldrh	r3, [r7, #20]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d906      	bls.n	800bc08 <mem_trim+0xb0>
 800bbfa:	4b55      	ldr	r3, [pc, #340]	; (800bd50 <mem_trim+0x1f8>)
 800bbfc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bc00:	4956      	ldr	r1, [pc, #344]	; (800bd5c <mem_trim+0x204>)
 800bc02:	4855      	ldr	r0, [pc, #340]	; (800bd58 <mem_trim+0x200>)
 800bc04:	f00b f81e 	bl	8016c44 <iprintf>
  if (newsize > size) {
 800bc08:	8bfa      	ldrh	r2, [r7, #30]
 800bc0a:	8abb      	ldrh	r3, [r7, #20]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d901      	bls.n	800bc14 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bc10:	2300      	movs	r3, #0
 800bc12:	e095      	b.n	800bd40 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bc14:	8bfa      	ldrh	r2, [r7, #30]
 800bc16:	8abb      	ldrh	r3, [r7, #20]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d101      	bne.n	800bc20 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	e08f      	b.n	800bd40 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bc20:	484f      	ldr	r0, [pc, #316]	; (800bd60 <mem_trim+0x208>)
 800bc22:	f00a fdbf 	bl	80167a4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bc26:	69bb      	ldr	r3, [r7, #24]
 800bc28:	881b      	ldrh	r3, [r3, #0]
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7ff fdb0 	bl	800b790 <ptr_to_mem>
 800bc30:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	791b      	ldrb	r3, [r3, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d13f      	bne.n	800bcba <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bc3a:	69bb      	ldr	r3, [r7, #24]
 800bc3c:	881b      	ldrh	r3, [r3, #0]
 800bc3e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc42:	d106      	bne.n	800bc52 <mem_trim+0xfa>
 800bc44:	4b42      	ldr	r3, [pc, #264]	; (800bd50 <mem_trim+0x1f8>)
 800bc46:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bc4a:	4946      	ldr	r1, [pc, #280]	; (800bd64 <mem_trim+0x20c>)
 800bc4c:	4842      	ldr	r0, [pc, #264]	; (800bd58 <mem_trim+0x200>)
 800bc4e:	f00a fff9 	bl	8016c44 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	881b      	ldrh	r3, [r3, #0]
 800bc56:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bc58:	8afa      	ldrh	r2, [r7, #22]
 800bc5a:	8bfb      	ldrh	r3, [r7, #30]
 800bc5c:	4413      	add	r3, r2
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	3308      	adds	r3, #8
 800bc62:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bc64:	4b40      	ldr	r3, [pc, #256]	; (800bd68 <mem_trim+0x210>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	693a      	ldr	r2, [r7, #16]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d106      	bne.n	800bc7c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bc6e:	89fb      	ldrh	r3, [r7, #14]
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7ff fd8d 	bl	800b790 <ptr_to_mem>
 800bc76:	4603      	mov	r3, r0
 800bc78:	4a3b      	ldr	r2, [pc, #236]	; (800bd68 <mem_trim+0x210>)
 800bc7a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bc7c:	89fb      	ldrh	r3, [r7, #14]
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7ff fd86 	bl	800b790 <ptr_to_mem>
 800bc84:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	89ba      	ldrh	r2, [r7, #12]
 800bc90:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	8afa      	ldrh	r2, [r7, #22]
 800bc96:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	89fa      	ldrh	r2, [r7, #14]
 800bc9c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	881b      	ldrh	r3, [r3, #0]
 800bca2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bca6:	d047      	beq.n	800bd38 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	881b      	ldrh	r3, [r3, #0]
 800bcac:	4618      	mov	r0, r3
 800bcae:	f7ff fd6f 	bl	800b790 <ptr_to_mem>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	89fb      	ldrh	r3, [r7, #14]
 800bcb6:	8053      	strh	r3, [r2, #2]
 800bcb8:	e03e      	b.n	800bd38 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bcba:	8bfb      	ldrh	r3, [r7, #30]
 800bcbc:	f103 0214 	add.w	r2, r3, #20
 800bcc0:	8abb      	ldrh	r3, [r7, #20]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d838      	bhi.n	800bd38 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bcc6:	8afa      	ldrh	r2, [r7, #22]
 800bcc8:	8bfb      	ldrh	r3, [r7, #30]
 800bcca:	4413      	add	r3, r2
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	3308      	adds	r3, #8
 800bcd0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bcd2:	69bb      	ldr	r3, [r7, #24]
 800bcd4:	881b      	ldrh	r3, [r3, #0]
 800bcd6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bcda:	d106      	bne.n	800bcea <mem_trim+0x192>
 800bcdc:	4b1c      	ldr	r3, [pc, #112]	; (800bd50 <mem_trim+0x1f8>)
 800bcde:	f240 3216 	movw	r2, #790	; 0x316
 800bce2:	4920      	ldr	r1, [pc, #128]	; (800bd64 <mem_trim+0x20c>)
 800bce4:	481c      	ldr	r0, [pc, #112]	; (800bd58 <mem_trim+0x200>)
 800bce6:	f00a ffad 	bl	8016c44 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bcea:	89fb      	ldrh	r3, [r7, #14]
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7ff fd4f 	bl	800b790 <ptr_to_mem>
 800bcf2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bcf4:	4b1c      	ldr	r3, [pc, #112]	; (800bd68 <mem_trim+0x210>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	693a      	ldr	r2, [r7, #16]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d202      	bcs.n	800bd04 <mem_trim+0x1ac>
      lfree = mem2;
 800bcfe:	4a1a      	ldr	r2, [pc, #104]	; (800bd68 <mem_trim+0x210>)
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	2200      	movs	r2, #0
 800bd08:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	881a      	ldrh	r2, [r3, #0]
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	8afa      	ldrh	r2, [r7, #22]
 800bd16:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	89fa      	ldrh	r2, [r7, #14]
 800bd1c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	881b      	ldrh	r3, [r3, #0]
 800bd22:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd26:	d007      	beq.n	800bd38 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	881b      	ldrh	r3, [r3, #0]
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7ff fd2f 	bl	800b790 <ptr_to_mem>
 800bd32:	4602      	mov	r2, r0
 800bd34:	89fb      	ldrh	r3, [r7, #14]
 800bd36:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bd38:	4809      	ldr	r0, [pc, #36]	; (800bd60 <mem_trim+0x208>)
 800bd3a:	f00a fd42 	bl	80167c2 <sys_mutex_unlock>
  return rmem;
 800bd3e:	687b      	ldr	r3, [r7, #4]
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3720      	adds	r7, #32
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	20006800 	.word	0x20006800
 800bd4c:	20006804 	.word	0x20006804
 800bd50:	08018600 	.word	0x08018600
 800bd54:	0801878c 	.word	0x0801878c
 800bd58:	08018648 	.word	0x08018648
 800bd5c:	080187a4 	.word	0x080187a4
 800bd60:	20006808 	.word	0x20006808
 800bd64:	080187c4 	.word	0x080187c4
 800bd68:	2000680c 	.word	0x2000680c

0800bd6c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b088      	sub	sp, #32
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	4603      	mov	r3, r0
 800bd74:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bd76:	88fb      	ldrh	r3, [r7, #6]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d101      	bne.n	800bd80 <mem_malloc+0x14>
    return NULL;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	e0e2      	b.n	800bf46 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bd80:	88fb      	ldrh	r3, [r7, #6]
 800bd82:	3303      	adds	r3, #3
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	f023 0303 	bic.w	r3, r3, #3
 800bd8a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bd8c:	8bbb      	ldrh	r3, [r7, #28]
 800bd8e:	2b0b      	cmp	r3, #11
 800bd90:	d801      	bhi.n	800bd96 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bd92:	230c      	movs	r3, #12
 800bd94:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bd96:	8bbb      	ldrh	r3, [r7, #28]
 800bd98:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd9c:	d803      	bhi.n	800bda6 <mem_malloc+0x3a>
 800bd9e:	8bba      	ldrh	r2, [r7, #28]
 800bda0:	88fb      	ldrh	r3, [r7, #6]
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d201      	bcs.n	800bdaa <mem_malloc+0x3e>
    return NULL;
 800bda6:	2300      	movs	r3, #0
 800bda8:	e0cd      	b.n	800bf46 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bdaa:	4869      	ldr	r0, [pc, #420]	; (800bf50 <mem_malloc+0x1e4>)
 800bdac:	f00a fcfa 	bl	80167a4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bdb0:	4b68      	ldr	r3, [pc, #416]	; (800bf54 <mem_malloc+0x1e8>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7ff fcfd 	bl	800b7b4 <mem_to_ptr>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	83fb      	strh	r3, [r7, #30]
 800bdbe:	e0b7      	b.n	800bf30 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bdc0:	8bfb      	ldrh	r3, [r7, #30]
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7ff fce4 	bl	800b790 <ptr_to_mem>
 800bdc8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	791b      	ldrb	r3, [r3, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f040 80a7 	bne.w	800bf22 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	881b      	ldrh	r3, [r3, #0]
 800bdd8:	461a      	mov	r2, r3
 800bdda:	8bfb      	ldrh	r3, [r7, #30]
 800bddc:	1ad3      	subs	r3, r2, r3
 800bdde:	f1a3 0208 	sub.w	r2, r3, #8
 800bde2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bde4:	429a      	cmp	r2, r3
 800bde6:	f0c0 809c 	bcc.w	800bf22 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	881b      	ldrh	r3, [r3, #0]
 800bdee:	461a      	mov	r2, r3
 800bdf0:	8bfb      	ldrh	r3, [r7, #30]
 800bdf2:	1ad3      	subs	r3, r2, r3
 800bdf4:	f1a3 0208 	sub.w	r2, r3, #8
 800bdf8:	8bbb      	ldrh	r3, [r7, #28]
 800bdfa:	3314      	adds	r3, #20
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d333      	bcc.n	800be68 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800be00:	8bfa      	ldrh	r2, [r7, #30]
 800be02:	8bbb      	ldrh	r3, [r7, #28]
 800be04:	4413      	add	r3, r2
 800be06:	b29b      	uxth	r3, r3
 800be08:	3308      	adds	r3, #8
 800be0a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800be0c:	8a7b      	ldrh	r3, [r7, #18]
 800be0e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be12:	d106      	bne.n	800be22 <mem_malloc+0xb6>
 800be14:	4b50      	ldr	r3, [pc, #320]	; (800bf58 <mem_malloc+0x1ec>)
 800be16:	f240 3287 	movw	r2, #903	; 0x387
 800be1a:	4950      	ldr	r1, [pc, #320]	; (800bf5c <mem_malloc+0x1f0>)
 800be1c:	4850      	ldr	r0, [pc, #320]	; (800bf60 <mem_malloc+0x1f4>)
 800be1e:	f00a ff11 	bl	8016c44 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800be22:	8a7b      	ldrh	r3, [r7, #18]
 800be24:	4618      	mov	r0, r3
 800be26:	f7ff fcb3 	bl	800b790 <ptr_to_mem>
 800be2a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2200      	movs	r2, #0
 800be30:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	881a      	ldrh	r2, [r3, #0]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	8bfa      	ldrh	r2, [r7, #30]
 800be3e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	8a7a      	ldrh	r2, [r7, #18]
 800be44:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	2201      	movs	r2, #1
 800be4a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	881b      	ldrh	r3, [r3, #0]
 800be50:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be54:	d00b      	beq.n	800be6e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	881b      	ldrh	r3, [r3, #0]
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7ff fc98 	bl	800b790 <ptr_to_mem>
 800be60:	4602      	mov	r2, r0
 800be62:	8a7b      	ldrh	r3, [r7, #18]
 800be64:	8053      	strh	r3, [r2, #2]
 800be66:	e002      	b.n	800be6e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	2201      	movs	r2, #1
 800be6c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800be6e:	4b39      	ldr	r3, [pc, #228]	; (800bf54 <mem_malloc+0x1e8>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	697a      	ldr	r2, [r7, #20]
 800be74:	429a      	cmp	r2, r3
 800be76:	d127      	bne.n	800bec8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800be78:	4b36      	ldr	r3, [pc, #216]	; (800bf54 <mem_malloc+0x1e8>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800be7e:	e005      	b.n	800be8c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800be80:	69bb      	ldr	r3, [r7, #24]
 800be82:	881b      	ldrh	r3, [r3, #0]
 800be84:	4618      	mov	r0, r3
 800be86:	f7ff fc83 	bl	800b790 <ptr_to_mem>
 800be8a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800be8c:	69bb      	ldr	r3, [r7, #24]
 800be8e:	791b      	ldrb	r3, [r3, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d004      	beq.n	800be9e <mem_malloc+0x132>
 800be94:	4b33      	ldr	r3, [pc, #204]	; (800bf64 <mem_malloc+0x1f8>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	69ba      	ldr	r2, [r7, #24]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d1f0      	bne.n	800be80 <mem_malloc+0x114>
          }
          lfree = cur;
 800be9e:	4a2d      	ldr	r2, [pc, #180]	; (800bf54 <mem_malloc+0x1e8>)
 800bea0:	69bb      	ldr	r3, [r7, #24]
 800bea2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bea4:	4b2b      	ldr	r3, [pc, #172]	; (800bf54 <mem_malloc+0x1e8>)
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	4b2e      	ldr	r3, [pc, #184]	; (800bf64 <mem_malloc+0x1f8>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	429a      	cmp	r2, r3
 800beae:	d00b      	beq.n	800bec8 <mem_malloc+0x15c>
 800beb0:	4b28      	ldr	r3, [pc, #160]	; (800bf54 <mem_malloc+0x1e8>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	791b      	ldrb	r3, [r3, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d006      	beq.n	800bec8 <mem_malloc+0x15c>
 800beba:	4b27      	ldr	r3, [pc, #156]	; (800bf58 <mem_malloc+0x1ec>)
 800bebc:	f240 32b5 	movw	r2, #949	; 0x3b5
 800bec0:	4929      	ldr	r1, [pc, #164]	; (800bf68 <mem_malloc+0x1fc>)
 800bec2:	4827      	ldr	r0, [pc, #156]	; (800bf60 <mem_malloc+0x1f4>)
 800bec4:	f00a febe 	bl	8016c44 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800bec8:	4821      	ldr	r0, [pc, #132]	; (800bf50 <mem_malloc+0x1e4>)
 800beca:	f00a fc7a 	bl	80167c2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bece:	8bba      	ldrh	r2, [r7, #28]
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	4413      	add	r3, r2
 800bed4:	3308      	adds	r3, #8
 800bed6:	4a23      	ldr	r2, [pc, #140]	; (800bf64 <mem_malloc+0x1f8>)
 800bed8:	6812      	ldr	r2, [r2, #0]
 800beda:	4293      	cmp	r3, r2
 800bedc:	d906      	bls.n	800beec <mem_malloc+0x180>
 800bede:	4b1e      	ldr	r3, [pc, #120]	; (800bf58 <mem_malloc+0x1ec>)
 800bee0:	f240 32b9 	movw	r2, #953	; 0x3b9
 800bee4:	4921      	ldr	r1, [pc, #132]	; (800bf6c <mem_malloc+0x200>)
 800bee6:	481e      	ldr	r0, [pc, #120]	; (800bf60 <mem_malloc+0x1f4>)
 800bee8:	f00a feac 	bl	8016c44 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	f003 0303 	and.w	r3, r3, #3
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d006      	beq.n	800bf04 <mem_malloc+0x198>
 800bef6:	4b18      	ldr	r3, [pc, #96]	; (800bf58 <mem_malloc+0x1ec>)
 800bef8:	f240 32bb 	movw	r2, #955	; 0x3bb
 800befc:	491c      	ldr	r1, [pc, #112]	; (800bf70 <mem_malloc+0x204>)
 800befe:	4818      	ldr	r0, [pc, #96]	; (800bf60 <mem_malloc+0x1f4>)
 800bf00:	f00a fea0 	bl	8016c44 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	f003 0303 	and.w	r3, r3, #3
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d006      	beq.n	800bf1c <mem_malloc+0x1b0>
 800bf0e:	4b12      	ldr	r3, [pc, #72]	; (800bf58 <mem_malloc+0x1ec>)
 800bf10:	f240 32bd 	movw	r2, #957	; 0x3bd
 800bf14:	4917      	ldr	r1, [pc, #92]	; (800bf74 <mem_malloc+0x208>)
 800bf16:	4812      	ldr	r0, [pc, #72]	; (800bf60 <mem_malloc+0x1f4>)
 800bf18:	f00a fe94 	bl	8016c44 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	3308      	adds	r3, #8
 800bf20:	e011      	b.n	800bf46 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800bf22:	8bfb      	ldrh	r3, [r7, #30]
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7ff fc33 	bl	800b790 <ptr_to_mem>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	881b      	ldrh	r3, [r3, #0]
 800bf2e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bf30:	8bfa      	ldrh	r2, [r7, #30]
 800bf32:	8bbb      	ldrh	r3, [r7, #28]
 800bf34:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	f4ff af41 	bcc.w	800bdc0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800bf3e:	4804      	ldr	r0, [pc, #16]	; (800bf50 <mem_malloc+0x1e4>)
 800bf40:	f00a fc3f 	bl	80167c2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bf44:	2300      	movs	r3, #0
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3720      	adds	r7, #32
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	20006808 	.word	0x20006808
 800bf54:	2000680c 	.word	0x2000680c
 800bf58:	08018600 	.word	0x08018600
 800bf5c:	080187c4 	.word	0x080187c4
 800bf60:	08018648 	.word	0x08018648
 800bf64:	20006804 	.word	0x20006804
 800bf68:	080187d8 	.word	0x080187d8
 800bf6c:	080187f4 	.word	0x080187f4
 800bf70:	08018824 	.word	0x08018824
 800bf74:	08018854 	.word	0x08018854

0800bf78 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b085      	sub	sp, #20
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	689b      	ldr	r3, [r3, #8]
 800bf84:	2200      	movs	r2, #0
 800bf86:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	3303      	adds	r3, #3
 800bf8e:	f023 0303 	bic.w	r3, r3, #3
 800bf92:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bf94:	2300      	movs	r3, #0
 800bf96:	60fb      	str	r3, [r7, #12]
 800bf98:	e011      	b.n	800bfbe <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	689b      	ldr	r3, [r3, #8]
 800bf9e:	681a      	ldr	r2, [r3, #0]
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	68ba      	ldr	r2, [r7, #8]
 800bfaa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	881b      	ldrh	r3, [r3, #0]
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	3301      	adds	r3, #1
 800bfbc:	60fb      	str	r3, [r7, #12]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	885b      	ldrh	r3, [r3, #2]
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	dbe7      	blt.n	800bf9a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bfca:	bf00      	nop
 800bfcc:	bf00      	nop
 800bfce:	3714      	adds	r7, #20
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bfde:	2300      	movs	r3, #0
 800bfe0:	80fb      	strh	r3, [r7, #6]
 800bfe2:	e009      	b.n	800bff8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bfe4:	88fb      	ldrh	r3, [r7, #6]
 800bfe6:	4a08      	ldr	r2, [pc, #32]	; (800c008 <memp_init+0x30>)
 800bfe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7ff ffc3 	bl	800bf78 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bff2:	88fb      	ldrh	r3, [r7, #6]
 800bff4:	3301      	adds	r3, #1
 800bff6:	80fb      	strh	r3, [r7, #6]
 800bff8:	88fb      	ldrh	r3, [r7, #6]
 800bffa:	2b0c      	cmp	r3, #12
 800bffc:	d9f2      	bls.n	800bfe4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bffe:	bf00      	nop
 800c000:	bf00      	nop
 800c002:	3708      	adds	r7, #8
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	0801b060 	.word	0x0801b060

0800c00c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c014:	f00a fc08 	bl	8016828 <sys_arch_protect>
 800c018:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d015      	beq.n	800c054 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	689b      	ldr	r3, [r3, #8]
 800c02c:	68ba      	ldr	r2, [r7, #8]
 800c02e:	6812      	ldr	r2, [r2, #0]
 800c030:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	f003 0303 	and.w	r3, r3, #3
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d006      	beq.n	800c04a <do_memp_malloc_pool+0x3e>
 800c03c:	4b09      	ldr	r3, [pc, #36]	; (800c064 <do_memp_malloc_pool+0x58>)
 800c03e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c042:	4909      	ldr	r1, [pc, #36]	; (800c068 <do_memp_malloc_pool+0x5c>)
 800c044:	4809      	ldr	r0, [pc, #36]	; (800c06c <do_memp_malloc_pool+0x60>)
 800c046:	f00a fdfd 	bl	8016c44 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c04a:	68f8      	ldr	r0, [r7, #12]
 800c04c:	f00a fbfa 	bl	8016844 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	e003      	b.n	800c05c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	f00a fbf5 	bl	8016844 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3710      	adds	r7, #16
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}
 800c064:	08018878 	.word	0x08018878
 800c068:	080188a8 	.word	0x080188a8
 800c06c:	080188cc 	.word	0x080188cc

0800c070 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	4603      	mov	r3, r0
 800c078:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c07a:	79fb      	ldrb	r3, [r7, #7]
 800c07c:	2b0c      	cmp	r3, #12
 800c07e:	d908      	bls.n	800c092 <memp_malloc+0x22>
 800c080:	4b0a      	ldr	r3, [pc, #40]	; (800c0ac <memp_malloc+0x3c>)
 800c082:	f240 1257 	movw	r2, #343	; 0x157
 800c086:	490a      	ldr	r1, [pc, #40]	; (800c0b0 <memp_malloc+0x40>)
 800c088:	480a      	ldr	r0, [pc, #40]	; (800c0b4 <memp_malloc+0x44>)
 800c08a:	f00a fddb 	bl	8016c44 <iprintf>
 800c08e:	2300      	movs	r3, #0
 800c090:	e008      	b.n	800c0a4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c092:	79fb      	ldrb	r3, [r7, #7]
 800c094:	4a08      	ldr	r2, [pc, #32]	; (800c0b8 <memp_malloc+0x48>)
 800c096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7ff ffb6 	bl	800c00c <do_memp_malloc_pool>
 800c0a0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3710      	adds	r7, #16
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}
 800c0ac:	08018878 	.word	0x08018878
 800c0b0:	08018908 	.word	0x08018908
 800c0b4:	080188cc 	.word	0x080188cc
 800c0b8:	0801b060 	.word	0x0801b060

0800c0bc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b084      	sub	sp, #16
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	f003 0303 	and.w	r3, r3, #3
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d006      	beq.n	800c0de <do_memp_free_pool+0x22>
 800c0d0:	4b0d      	ldr	r3, [pc, #52]	; (800c108 <do_memp_free_pool+0x4c>)
 800c0d2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c0d6:	490d      	ldr	r1, [pc, #52]	; (800c10c <do_memp_free_pool+0x50>)
 800c0d8:	480d      	ldr	r0, [pc, #52]	; (800c110 <do_memp_free_pool+0x54>)
 800c0da:	f00a fdb3 	bl	8016c44 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c0e2:	f00a fba1 	bl	8016828 <sys_arch_protect>
 800c0e6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	689b      	ldr	r3, [r3, #8]
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	689b      	ldr	r3, [r3, #8]
 800c0f6:	68fa      	ldr	r2, [r7, #12]
 800c0f8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c0fa:	68b8      	ldr	r0, [r7, #8]
 800c0fc:	f00a fba2 	bl	8016844 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c100:	bf00      	nop
 800c102:	3710      	adds	r7, #16
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	08018878 	.word	0x08018878
 800c10c:	08018928 	.word	0x08018928
 800c110:	080188cc 	.word	0x080188cc

0800c114 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b082      	sub	sp, #8
 800c118:	af00      	add	r7, sp, #0
 800c11a:	4603      	mov	r3, r0
 800c11c:	6039      	str	r1, [r7, #0]
 800c11e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c120:	79fb      	ldrb	r3, [r7, #7]
 800c122:	2b0c      	cmp	r3, #12
 800c124:	d907      	bls.n	800c136 <memp_free+0x22>
 800c126:	4b0c      	ldr	r3, [pc, #48]	; (800c158 <memp_free+0x44>)
 800c128:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c12c:	490b      	ldr	r1, [pc, #44]	; (800c15c <memp_free+0x48>)
 800c12e:	480c      	ldr	r0, [pc, #48]	; (800c160 <memp_free+0x4c>)
 800c130:	f00a fd88 	bl	8016c44 <iprintf>
 800c134:	e00c      	b.n	800c150 <memp_free+0x3c>

  if (mem == NULL) {
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d008      	beq.n	800c14e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c13c:	79fb      	ldrb	r3, [r7, #7]
 800c13e:	4a09      	ldr	r2, [pc, #36]	; (800c164 <memp_free+0x50>)
 800c140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c144:	6839      	ldr	r1, [r7, #0]
 800c146:	4618      	mov	r0, r3
 800c148:	f7ff ffb8 	bl	800c0bc <do_memp_free_pool>
 800c14c:	e000      	b.n	800c150 <memp_free+0x3c>
    return;
 800c14e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c150:	3708      	adds	r7, #8
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	08018878 	.word	0x08018878
 800c15c:	08018948 	.word	0x08018948
 800c160:	080188cc 	.word	0x080188cc
 800c164:	0801b060 	.word	0x0801b060

0800c168 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c168:	b480      	push	{r7}
 800c16a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c16c:	bf00      	nop
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr
	...

0800c178 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b086      	sub	sp, #24
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	60b9      	str	r1, [r7, #8]
 800c182:	607a      	str	r2, [r7, #4]
 800c184:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d108      	bne.n	800c19e <netif_add+0x26>
 800c18c:	4b57      	ldr	r3, [pc, #348]	; (800c2ec <netif_add+0x174>)
 800c18e:	f240 1227 	movw	r2, #295	; 0x127
 800c192:	4957      	ldr	r1, [pc, #348]	; (800c2f0 <netif_add+0x178>)
 800c194:	4857      	ldr	r0, [pc, #348]	; (800c2f4 <netif_add+0x17c>)
 800c196:	f00a fd55 	bl	8016c44 <iprintf>
 800c19a:	2300      	movs	r3, #0
 800c19c:	e0a2      	b.n	800c2e4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d108      	bne.n	800c1b6 <netif_add+0x3e>
 800c1a4:	4b51      	ldr	r3, [pc, #324]	; (800c2ec <netif_add+0x174>)
 800c1a6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c1aa:	4953      	ldr	r1, [pc, #332]	; (800c2f8 <netif_add+0x180>)
 800c1ac:	4851      	ldr	r0, [pc, #324]	; (800c2f4 <netif_add+0x17c>)
 800c1ae:	f00a fd49 	bl	8016c44 <iprintf>
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	e096      	b.n	800c2e4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d101      	bne.n	800c1c0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c1bc:	4b4f      	ldr	r3, [pc, #316]	; (800c2fc <netif_add+0x184>)
 800c1be:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d101      	bne.n	800c1ca <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c1c6:	4b4d      	ldr	r3, [pc, #308]	; (800c2fc <netif_add+0x184>)
 800c1c8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d101      	bne.n	800c1d4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c1d0:	4b4a      	ldr	r3, [pc, #296]	; (800c2fc <netif_add+0x184>)
 800c1d2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	4a45      	ldr	r2, [pc, #276]	; (800c300 <netif_add+0x188>)
 800c1ea:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	6a3a      	ldr	r2, [r7, #32]
 800c204:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c206:	4b3f      	ldr	r3, [pc, #252]	; (800c304 <netif_add+0x18c>)
 800c208:	781a      	ldrb	r2, [r3, #0]
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c214:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	687a      	ldr	r2, [r7, #4]
 800c21a:	68b9      	ldr	r1, [r7, #8]
 800c21c:	68f8      	ldr	r0, [r7, #12]
 800c21e:	f000 f913 	bl	800c448 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	4798      	blx	r3
 800c228:	4603      	mov	r3, r0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d001      	beq.n	800c232 <netif_add+0xba>
    return NULL;
 800c22e:	2300      	movs	r3, #0
 800c230:	e058      	b.n	800c2e4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c238:	2bff      	cmp	r3, #255	; 0xff
 800c23a:	d103      	bne.n	800c244 <netif_add+0xcc>
        netif->num = 0;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2200      	movs	r2, #0
 800c240:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c244:	2300      	movs	r3, #0
 800c246:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c248:	4b2f      	ldr	r3, [pc, #188]	; (800c308 <netif_add+0x190>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	617b      	str	r3, [r7, #20]
 800c24e:	e02b      	b.n	800c2a8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c250:	697a      	ldr	r2, [r7, #20]
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	429a      	cmp	r2, r3
 800c256:	d106      	bne.n	800c266 <netif_add+0xee>
 800c258:	4b24      	ldr	r3, [pc, #144]	; (800c2ec <netif_add+0x174>)
 800c25a:	f240 128b 	movw	r2, #395	; 0x18b
 800c25e:	492b      	ldr	r1, [pc, #172]	; (800c30c <netif_add+0x194>)
 800c260:	4824      	ldr	r0, [pc, #144]	; (800c2f4 <netif_add+0x17c>)
 800c262:	f00a fcef 	bl	8016c44 <iprintf>
        num_netifs++;
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	3301      	adds	r3, #1
 800c26a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	2bff      	cmp	r3, #255	; 0xff
 800c270:	dd06      	ble.n	800c280 <netif_add+0x108>
 800c272:	4b1e      	ldr	r3, [pc, #120]	; (800c2ec <netif_add+0x174>)
 800c274:	f240 128d 	movw	r2, #397	; 0x18d
 800c278:	4925      	ldr	r1, [pc, #148]	; (800c310 <netif_add+0x198>)
 800c27a:	481e      	ldr	r0, [pc, #120]	; (800c2f4 <netif_add+0x17c>)
 800c27c:	f00a fce2 	bl	8016c44 <iprintf>
        if (netif2->num == netif->num) {
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d108      	bne.n	800c2a2 <netif_add+0x12a>
          netif->num++;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c296:	3301      	adds	r3, #1
 800c298:	b2da      	uxtb	r2, r3
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c2a0:	e005      	b.n	800c2ae <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	617b      	str	r3, [r7, #20]
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d1d0      	bne.n	800c250 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d1be      	bne.n	800c232 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c2ba:	2bfe      	cmp	r3, #254	; 0xfe
 800c2bc:	d103      	bne.n	800c2c6 <netif_add+0x14e>
    netif_num = 0;
 800c2be:	4b11      	ldr	r3, [pc, #68]	; (800c304 <netif_add+0x18c>)
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	701a      	strb	r2, [r3, #0]
 800c2c4:	e006      	b.n	800c2d4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	b2da      	uxtb	r2, r3
 800c2d0:	4b0c      	ldr	r3, [pc, #48]	; (800c304 <netif_add+0x18c>)
 800c2d2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c2d4:	4b0c      	ldr	r3, [pc, #48]	; (800c308 <netif_add+0x190>)
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c2dc:	4a0a      	ldr	r2, [pc, #40]	; (800c308 <netif_add+0x190>)
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3718      	adds	r7, #24
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	08018964 	.word	0x08018964
 800c2f0:	080189f8 	.word	0x080189f8
 800c2f4:	080189b4 	.word	0x080189b4
 800c2f8:	08018a14 	.word	0x08018a14
 800c2fc:	0801b0d4 	.word	0x0801b0d4
 800c300:	0800c65b 	.word	0x0800c65b
 800c304:	20006844 	.word	0x20006844
 800c308:	2000d3a4 	.word	0x2000d3a4
 800c30c:	08018a38 	.word	0x08018a38
 800c310:	08018a4c 	.word	0x08018a4c

0800c314 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c31e:	6839      	ldr	r1, [r7, #0]
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f002 fd31 	bl	800ed88 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c326:	6839      	ldr	r1, [r7, #0]
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f007 fdc9 	bl	8013ec0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c32e:	bf00      	nop
 800c330:	3708      	adds	r7, #8
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
	...

0800c338 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b086      	sub	sp, #24
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d106      	bne.n	800c358 <netif_do_set_ipaddr+0x20>
 800c34a:	4b1d      	ldr	r3, [pc, #116]	; (800c3c0 <netif_do_set_ipaddr+0x88>)
 800c34c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c350:	491c      	ldr	r1, [pc, #112]	; (800c3c4 <netif_do_set_ipaddr+0x8c>)
 800c352:	481d      	ldr	r0, [pc, #116]	; (800c3c8 <netif_do_set_ipaddr+0x90>)
 800c354:	f00a fc76 	bl	8016c44 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d106      	bne.n	800c36c <netif_do_set_ipaddr+0x34>
 800c35e:	4b18      	ldr	r3, [pc, #96]	; (800c3c0 <netif_do_set_ipaddr+0x88>)
 800c360:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c364:	4917      	ldr	r1, [pc, #92]	; (800c3c4 <netif_do_set_ipaddr+0x8c>)
 800c366:	4818      	ldr	r0, [pc, #96]	; (800c3c8 <netif_do_set_ipaddr+0x90>)
 800c368:	f00a fc6c 	bl	8016c44 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	3304      	adds	r3, #4
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	429a      	cmp	r2, r3
 800c378:	d01c      	beq.n	800c3b4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	3304      	adds	r3, #4
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c38a:	f107 0314 	add.w	r3, r7, #20
 800c38e:	4619      	mov	r1, r3
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f7ff ffbf 	bl	800c314 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d002      	beq.n	800c3a2 <netif_do_set_ipaddr+0x6a>
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	e000      	b.n	800c3a4 <netif_do_set_ipaddr+0x6c>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	68fa      	ldr	r2, [r7, #12]
 800c3a6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c3a8:	2101      	movs	r1, #1
 800c3aa:	68f8      	ldr	r0, [r7, #12]
 800c3ac:	f000 f8d2 	bl	800c554 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	e000      	b.n	800c3b6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c3b4:	2300      	movs	r3, #0
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3718      	adds	r7, #24
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	08018964 	.word	0x08018964
 800c3c4:	08018a7c 	.word	0x08018a7c
 800c3c8:	080189b4 	.word	0x080189b4

0800c3cc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b085      	sub	sp, #20
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	3308      	adds	r3, #8
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d00a      	beq.n	800c3fc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d002      	beq.n	800c3f2 <netif_do_set_netmask+0x26>
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	e000      	b.n	800c3f4 <netif_do_set_netmask+0x28>
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	68fa      	ldr	r2, [r7, #12]
 800c3f6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e000      	b.n	800c3fe <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c3fc:	2300      	movs	r3, #0
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3714      	adds	r7, #20
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr

0800c40a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c40a:	b480      	push	{r7}
 800c40c:	b085      	sub	sp, #20
 800c40e:	af00      	add	r7, sp, #0
 800c410:	60f8      	str	r0, [r7, #12]
 800c412:	60b9      	str	r1, [r7, #8]
 800c414:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	681a      	ldr	r2, [r3, #0]
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	330c      	adds	r3, #12
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	429a      	cmp	r2, r3
 800c422:	d00a      	beq.n	800c43a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d002      	beq.n	800c430 <netif_do_set_gw+0x26>
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	e000      	b.n	800c432 <netif_do_set_gw+0x28>
 800c430:	2300      	movs	r3, #0
 800c432:	68fa      	ldr	r2, [r7, #12]
 800c434:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c436:	2301      	movs	r3, #1
 800c438:	e000      	b.n	800c43c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c43a:	2300      	movs	r3, #0
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3714      	adds	r7, #20
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr

0800c448 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b088      	sub	sp, #32
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	607a      	str	r2, [r7, #4]
 800c454:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c456:	2300      	movs	r3, #0
 800c458:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c45a:	2300      	movs	r3, #0
 800c45c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d101      	bne.n	800c468 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c464:	4b1c      	ldr	r3, [pc, #112]	; (800c4d8 <netif_set_addr+0x90>)
 800c466:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d101      	bne.n	800c472 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c46e:	4b1a      	ldr	r3, [pc, #104]	; (800c4d8 <netif_set_addr+0x90>)
 800c470:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d101      	bne.n	800c47c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c478:	4b17      	ldr	r3, [pc, #92]	; (800c4d8 <netif_set_addr+0x90>)
 800c47a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d003      	beq.n	800c48a <netif_set_addr+0x42>
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d101      	bne.n	800c48e <netif_set_addr+0x46>
 800c48a:	2301      	movs	r3, #1
 800c48c:	e000      	b.n	800c490 <netif_set_addr+0x48>
 800c48e:	2300      	movs	r3, #0
 800c490:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d006      	beq.n	800c4a6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c498:	f107 0310 	add.w	r3, r7, #16
 800c49c:	461a      	mov	r2, r3
 800c49e:	68b9      	ldr	r1, [r7, #8]
 800c4a0:	68f8      	ldr	r0, [r7, #12]
 800c4a2:	f7ff ff49 	bl	800c338 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c4a6:	69fa      	ldr	r2, [r7, #28]
 800c4a8:	6879      	ldr	r1, [r7, #4]
 800c4aa:	68f8      	ldr	r0, [r7, #12]
 800c4ac:	f7ff ff8e 	bl	800c3cc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c4b0:	69ba      	ldr	r2, [r7, #24]
 800c4b2:	6839      	ldr	r1, [r7, #0]
 800c4b4:	68f8      	ldr	r0, [r7, #12]
 800c4b6:	f7ff ffa8 	bl	800c40a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d106      	bne.n	800c4ce <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c4c0:	f107 0310 	add.w	r3, r7, #16
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	68b9      	ldr	r1, [r7, #8]
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	f7ff ff35 	bl	800c338 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c4ce:	bf00      	nop
 800c4d0:	3720      	adds	r7, #32
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	0801b0d4 	.word	0x0801b0d4

0800c4dc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c4e4:	4a04      	ldr	r2, [pc, #16]	; (800c4f8 <netif_set_default+0x1c>)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c4ea:	bf00      	nop
 800c4ec:	370c      	adds	r7, #12
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	2000d3a8 	.word	0x2000d3a8

0800c4fc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d107      	bne.n	800c51a <netif_set_up+0x1e>
 800c50a:	4b0f      	ldr	r3, [pc, #60]	; (800c548 <netif_set_up+0x4c>)
 800c50c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c510:	490e      	ldr	r1, [pc, #56]	; (800c54c <netif_set_up+0x50>)
 800c512:	480f      	ldr	r0, [pc, #60]	; (800c550 <netif_set_up+0x54>)
 800c514:	f00a fb96 	bl	8016c44 <iprintf>
 800c518:	e013      	b.n	800c542 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c520:	f003 0301 	and.w	r3, r3, #1
 800c524:	2b00      	cmp	r3, #0
 800c526:	d10c      	bne.n	800c542 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c52e:	f043 0301 	orr.w	r3, r3, #1
 800c532:	b2da      	uxtb	r2, r3
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c53a:	2103      	movs	r1, #3
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 f809 	bl	800c554 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c542:	3708      	adds	r7, #8
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}
 800c548:	08018964 	.word	0x08018964
 800c54c:	08018aec 	.word	0x08018aec
 800c550:	080189b4 	.word	0x080189b4

0800c554 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b082      	sub	sp, #8
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	460b      	mov	r3, r1
 800c55e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d106      	bne.n	800c574 <netif_issue_reports+0x20>
 800c566:	4b18      	ldr	r3, [pc, #96]	; (800c5c8 <netif_issue_reports+0x74>)
 800c568:	f240 326d 	movw	r2, #877	; 0x36d
 800c56c:	4917      	ldr	r1, [pc, #92]	; (800c5cc <netif_issue_reports+0x78>)
 800c56e:	4818      	ldr	r0, [pc, #96]	; (800c5d0 <netif_issue_reports+0x7c>)
 800c570:	f00a fb68 	bl	8016c44 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c57a:	f003 0304 	and.w	r3, r3, #4
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d01e      	beq.n	800c5c0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c588:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d017      	beq.n	800c5c0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c590:	78fb      	ldrb	r3, [r7, #3]
 800c592:	f003 0301 	and.w	r3, r3, #1
 800c596:	2b00      	cmp	r3, #0
 800c598:	d013      	beq.n	800c5c2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	3304      	adds	r3, #4
 800c59e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d00e      	beq.n	800c5c2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c5aa:	f003 0308 	and.w	r3, r3, #8
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d007      	beq.n	800c5c2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	3304      	adds	r3, #4
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f008 fbeb 	bl	8014d94 <etharp_request>
 800c5be:	e000      	b.n	800c5c2 <netif_issue_reports+0x6e>
    return;
 800c5c0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c5c2:	3708      	adds	r7, #8
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	08018964 	.word	0x08018964
 800c5cc:	08018b08 	.word	0x08018b08
 800c5d0:	080189b4 	.word	0x080189b4

0800c5d4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d107      	bne.n	800c5f2 <netif_set_down+0x1e>
 800c5e2:	4b12      	ldr	r3, [pc, #72]	; (800c62c <netif_set_down+0x58>)
 800c5e4:	f240 329b 	movw	r2, #923	; 0x39b
 800c5e8:	4911      	ldr	r1, [pc, #68]	; (800c630 <netif_set_down+0x5c>)
 800c5ea:	4812      	ldr	r0, [pc, #72]	; (800c634 <netif_set_down+0x60>)
 800c5ec:	f00a fb2a 	bl	8016c44 <iprintf>
 800c5f0:	e019      	b.n	800c626 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c5f8:	f003 0301 	and.w	r3, r3, #1
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d012      	beq.n	800c626 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c606:	f023 0301 	bic.w	r3, r3, #1
 800c60a:	b2da      	uxtb	r2, r3
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c618:	f003 0308 	and.w	r3, r3, #8
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d002      	beq.n	800c626 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f007 ff75 	bl	8014510 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c626:	3708      	adds	r7, #8
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}
 800c62c:	08018964 	.word	0x08018964
 800c630:	08018b2c 	.word	0x08018b2c
 800c634:	080189b4 	.word	0x080189b4

0800c638 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c638:	b480      	push	{r7}
 800c63a:	b083      	sub	sp, #12
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d002      	beq.n	800c64e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	683a      	ldr	r2, [r7, #0]
 800c64c:	61da      	str	r2, [r3, #28]
  }
}
 800c64e:	bf00      	nop
 800c650:	370c      	adds	r7, #12
 800c652:	46bd      	mov	sp, r7
 800c654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c658:	4770      	bx	lr

0800c65a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c65a:	b480      	push	{r7}
 800c65c:	b085      	sub	sp, #20
 800c65e:	af00      	add	r7, sp, #0
 800c660:	60f8      	str	r0, [r7, #12]
 800c662:	60b9      	str	r1, [r7, #8]
 800c664:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c666:	f06f 030b 	mvn.w	r3, #11
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3714      	adds	r7, #20
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr
	...

0800c678 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c678:	b480      	push	{r7}
 800c67a:	b085      	sub	sp, #20
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	4603      	mov	r3, r0
 800c680:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c682:	79fb      	ldrb	r3, [r7, #7]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d013      	beq.n	800c6b0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c688:	4b0d      	ldr	r3, [pc, #52]	; (800c6c0 <netif_get_by_index+0x48>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	60fb      	str	r3, [r7, #12]
 800c68e:	e00c      	b.n	800c6aa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c696:	3301      	adds	r3, #1
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	79fa      	ldrb	r2, [r7, #7]
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d101      	bne.n	800c6a4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	e006      	b.n	800c6b2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	60fb      	str	r3, [r7, #12]
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d1ef      	bne.n	800c690 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c6b0:	2300      	movs	r3, #0
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3714      	adds	r7, #20
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop
 800c6c0:	2000d3a4 	.word	0x2000d3a4

0800c6c4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c6ca:	f00a f8ad 	bl	8016828 <sys_arch_protect>
 800c6ce:	6038      	str	r0, [r7, #0]
 800c6d0:	4b0d      	ldr	r3, [pc, #52]	; (800c708 <pbuf_free_ooseq+0x44>)
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	701a      	strb	r2, [r3, #0]
 800c6d6:	6838      	ldr	r0, [r7, #0]
 800c6d8:	f00a f8b4 	bl	8016844 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c6dc:	4b0b      	ldr	r3, [pc, #44]	; (800c70c <pbuf_free_ooseq+0x48>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	607b      	str	r3, [r7, #4]
 800c6e2:	e00a      	b.n	800c6fa <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d003      	beq.n	800c6f4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f002 fb89 	bl	800ee04 <tcp_free_ooseq>
      return;
 800c6f2:	e005      	b.n	800c700 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	68db      	ldr	r3, [r3, #12]
 800c6f8:	607b      	str	r3, [r7, #4]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d1f1      	bne.n	800c6e4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c700:	3708      	adds	r7, #8
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	2000d3ac 	.word	0x2000d3ac
 800c70c:	2000d3b4 	.word	0x2000d3b4

0800c710 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c718:	f7ff ffd4 	bl	800c6c4 <pbuf_free_ooseq>
}
 800c71c:	bf00      	nop
 800c71e:	3708      	adds	r7, #8
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c72a:	f00a f87d 	bl	8016828 <sys_arch_protect>
 800c72e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c730:	4b0f      	ldr	r3, [pc, #60]	; (800c770 <pbuf_pool_is_empty+0x4c>)
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c736:	4b0e      	ldr	r3, [pc, #56]	; (800c770 <pbuf_pool_is_empty+0x4c>)
 800c738:	2201      	movs	r2, #1
 800c73a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f00a f881 	bl	8016844 <sys_arch_unprotect>

  if (!queued) {
 800c742:	78fb      	ldrb	r3, [r7, #3]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d10f      	bne.n	800c768 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c748:	2100      	movs	r1, #0
 800c74a:	480a      	ldr	r0, [pc, #40]	; (800c774 <pbuf_pool_is_empty+0x50>)
 800c74c:	f7fe ff3a 	bl	800b5c4 <tcpip_try_callback>
 800c750:	4603      	mov	r3, r0
 800c752:	2b00      	cmp	r3, #0
 800c754:	d008      	beq.n	800c768 <pbuf_pool_is_empty+0x44>
 800c756:	f00a f867 	bl	8016828 <sys_arch_protect>
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	4b04      	ldr	r3, [pc, #16]	; (800c770 <pbuf_pool_is_empty+0x4c>)
 800c75e:	2200      	movs	r2, #0
 800c760:	701a      	strb	r2, [r3, #0]
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f00a f86e 	bl	8016844 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c768:	bf00      	nop
 800c76a:	3708      	adds	r7, #8
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	2000d3ac 	.word	0x2000d3ac
 800c774:	0800c711 	.word	0x0800c711

0800c778 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c778:	b480      	push	{r7}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	60b9      	str	r1, [r7, #8]
 800c782:	4611      	mov	r1, r2
 800c784:	461a      	mov	r2, r3
 800c786:	460b      	mov	r3, r1
 800c788:	80fb      	strh	r3, [r7, #6]
 800c78a:	4613      	mov	r3, r2
 800c78c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2200      	movs	r2, #0
 800c792:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	68ba      	ldr	r2, [r7, #8]
 800c798:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	88fa      	ldrh	r2, [r7, #6]
 800c79e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	88ba      	ldrh	r2, [r7, #4]
 800c7a4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c7a6:	8b3b      	ldrh	r3, [r7, #24]
 800c7a8:	b2da      	uxtb	r2, r3
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	7f3a      	ldrb	r2, [r7, #28]
 800c7b2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	73da      	strb	r2, [r3, #15]
}
 800c7c0:	bf00      	nop
 800c7c2:	3714      	adds	r7, #20
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b08c      	sub	sp, #48	; 0x30
 800c7d0:	af02      	add	r7, sp, #8
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	71fb      	strb	r3, [r7, #7]
 800c7d6:	460b      	mov	r3, r1
 800c7d8:	80bb      	strh	r3, [r7, #4]
 800c7da:	4613      	mov	r3, r2
 800c7dc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c7de:	79fb      	ldrb	r3, [r7, #7]
 800c7e0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c7e2:	887b      	ldrh	r3, [r7, #2]
 800c7e4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c7e8:	d07f      	beq.n	800c8ea <pbuf_alloc+0x11e>
 800c7ea:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c7ee:	f300 80c8 	bgt.w	800c982 <pbuf_alloc+0x1b6>
 800c7f2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c7f6:	d010      	beq.n	800c81a <pbuf_alloc+0x4e>
 800c7f8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c7fc:	f300 80c1 	bgt.w	800c982 <pbuf_alloc+0x1b6>
 800c800:	2b01      	cmp	r3, #1
 800c802:	d002      	beq.n	800c80a <pbuf_alloc+0x3e>
 800c804:	2b41      	cmp	r3, #65	; 0x41
 800c806:	f040 80bc 	bne.w	800c982 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c80a:	887a      	ldrh	r2, [r7, #2]
 800c80c:	88bb      	ldrh	r3, [r7, #4]
 800c80e:	4619      	mov	r1, r3
 800c810:	2000      	movs	r0, #0
 800c812:	f000 f8d1 	bl	800c9b8 <pbuf_alloc_reference>
 800c816:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c818:	e0bd      	b.n	800c996 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c81a:	2300      	movs	r3, #0
 800c81c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c81e:	2300      	movs	r3, #0
 800c820:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c822:	88bb      	ldrh	r3, [r7, #4]
 800c824:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c826:	200c      	movs	r0, #12
 800c828:	f7ff fc22 	bl	800c070 <memp_malloc>
 800c82c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d109      	bne.n	800c848 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c834:	f7ff ff76 	bl	800c724 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d002      	beq.n	800c844 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c83e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c840:	f000 faa8 	bl	800cd94 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c844:	2300      	movs	r3, #0
 800c846:	e0a7      	b.n	800c998 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c848:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c84a:	3303      	adds	r3, #3
 800c84c:	b29b      	uxth	r3, r3
 800c84e:	f023 0303 	bic.w	r3, r3, #3
 800c852:	b29b      	uxth	r3, r3
 800c854:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c858:	b29b      	uxth	r3, r3
 800c85a:	8b7a      	ldrh	r2, [r7, #26]
 800c85c:	4293      	cmp	r3, r2
 800c85e:	bf28      	it	cs
 800c860:	4613      	movcs	r3, r2
 800c862:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c864:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c866:	3310      	adds	r3, #16
 800c868:	693a      	ldr	r2, [r7, #16]
 800c86a:	4413      	add	r3, r2
 800c86c:	3303      	adds	r3, #3
 800c86e:	f023 0303 	bic.w	r3, r3, #3
 800c872:	4618      	mov	r0, r3
 800c874:	89f9      	ldrh	r1, [r7, #14]
 800c876:	8b7a      	ldrh	r2, [r7, #26]
 800c878:	2300      	movs	r3, #0
 800c87a:	9301      	str	r3, [sp, #4]
 800c87c:	887b      	ldrh	r3, [r7, #2]
 800c87e:	9300      	str	r3, [sp, #0]
 800c880:	460b      	mov	r3, r1
 800c882:	4601      	mov	r1, r0
 800c884:	6938      	ldr	r0, [r7, #16]
 800c886:	f7ff ff77 	bl	800c778 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	f003 0303 	and.w	r3, r3, #3
 800c892:	2b00      	cmp	r3, #0
 800c894:	d006      	beq.n	800c8a4 <pbuf_alloc+0xd8>
 800c896:	4b42      	ldr	r3, [pc, #264]	; (800c9a0 <pbuf_alloc+0x1d4>)
 800c898:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c89c:	4941      	ldr	r1, [pc, #260]	; (800c9a4 <pbuf_alloc+0x1d8>)
 800c89e:	4842      	ldr	r0, [pc, #264]	; (800c9a8 <pbuf_alloc+0x1dc>)
 800c8a0:	f00a f9d0 	bl	8016c44 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c8a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8a6:	3303      	adds	r3, #3
 800c8a8:	f023 0303 	bic.w	r3, r3, #3
 800c8ac:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c8b0:	d106      	bne.n	800c8c0 <pbuf_alloc+0xf4>
 800c8b2:	4b3b      	ldr	r3, [pc, #236]	; (800c9a0 <pbuf_alloc+0x1d4>)
 800c8b4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c8b8:	493c      	ldr	r1, [pc, #240]	; (800c9ac <pbuf_alloc+0x1e0>)
 800c8ba:	483b      	ldr	r0, [pc, #236]	; (800c9a8 <pbuf_alloc+0x1dc>)
 800c8bc:	f00a f9c2 	bl	8016c44 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d102      	bne.n	800c8cc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	627b      	str	r3, [r7, #36]	; 0x24
 800c8ca:	e002      	b.n	800c8d2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	693a      	ldr	r2, [r7, #16]
 800c8d0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c8d6:	8b7a      	ldrh	r2, [r7, #26]
 800c8d8:	89fb      	ldrh	r3, [r7, #14]
 800c8da:	1ad3      	subs	r3, r2, r3
 800c8dc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c8e2:	8b7b      	ldrh	r3, [r7, #26]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d19e      	bne.n	800c826 <pbuf_alloc+0x5a>
      break;
 800c8e8:	e055      	b.n	800c996 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c8ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8ec:	3303      	adds	r3, #3
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	f023 0303 	bic.w	r3, r3, #3
 800c8f4:	b29a      	uxth	r2, r3
 800c8f6:	88bb      	ldrh	r3, [r7, #4]
 800c8f8:	3303      	adds	r3, #3
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	f023 0303 	bic.w	r3, r3, #3
 800c900:	b29b      	uxth	r3, r3
 800c902:	4413      	add	r3, r2
 800c904:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c906:	8b3b      	ldrh	r3, [r7, #24]
 800c908:	3310      	adds	r3, #16
 800c90a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c90c:	8b3a      	ldrh	r2, [r7, #24]
 800c90e:	88bb      	ldrh	r3, [r7, #4]
 800c910:	3303      	adds	r3, #3
 800c912:	f023 0303 	bic.w	r3, r3, #3
 800c916:	429a      	cmp	r2, r3
 800c918:	d306      	bcc.n	800c928 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c91a:	8afa      	ldrh	r2, [r7, #22]
 800c91c:	88bb      	ldrh	r3, [r7, #4]
 800c91e:	3303      	adds	r3, #3
 800c920:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c924:	429a      	cmp	r2, r3
 800c926:	d201      	bcs.n	800c92c <pbuf_alloc+0x160>
        return NULL;
 800c928:	2300      	movs	r3, #0
 800c92a:	e035      	b.n	800c998 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c92c:	8afb      	ldrh	r3, [r7, #22]
 800c92e:	4618      	mov	r0, r3
 800c930:	f7ff fa1c 	bl	800bd6c <mem_malloc>
 800c934:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d101      	bne.n	800c940 <pbuf_alloc+0x174>
        return NULL;
 800c93c:	2300      	movs	r3, #0
 800c93e:	e02b      	b.n	800c998 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c940:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c942:	3310      	adds	r3, #16
 800c944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c946:	4413      	add	r3, r2
 800c948:	3303      	adds	r3, #3
 800c94a:	f023 0303 	bic.w	r3, r3, #3
 800c94e:	4618      	mov	r0, r3
 800c950:	88b9      	ldrh	r1, [r7, #4]
 800c952:	88ba      	ldrh	r2, [r7, #4]
 800c954:	2300      	movs	r3, #0
 800c956:	9301      	str	r3, [sp, #4]
 800c958:	887b      	ldrh	r3, [r7, #2]
 800c95a:	9300      	str	r3, [sp, #0]
 800c95c:	460b      	mov	r3, r1
 800c95e:	4601      	mov	r1, r0
 800c960:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c962:	f7ff ff09 	bl	800c778 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	f003 0303 	and.w	r3, r3, #3
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d010      	beq.n	800c994 <pbuf_alloc+0x1c8>
 800c972:	4b0b      	ldr	r3, [pc, #44]	; (800c9a0 <pbuf_alloc+0x1d4>)
 800c974:	f44f 7291 	mov.w	r2, #290	; 0x122
 800c978:	490d      	ldr	r1, [pc, #52]	; (800c9b0 <pbuf_alloc+0x1e4>)
 800c97a:	480b      	ldr	r0, [pc, #44]	; (800c9a8 <pbuf_alloc+0x1dc>)
 800c97c:	f00a f962 	bl	8016c44 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c980:	e008      	b.n	800c994 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c982:	4b07      	ldr	r3, [pc, #28]	; (800c9a0 <pbuf_alloc+0x1d4>)
 800c984:	f240 1227 	movw	r2, #295	; 0x127
 800c988:	490a      	ldr	r1, [pc, #40]	; (800c9b4 <pbuf_alloc+0x1e8>)
 800c98a:	4807      	ldr	r0, [pc, #28]	; (800c9a8 <pbuf_alloc+0x1dc>)
 800c98c:	f00a f95a 	bl	8016c44 <iprintf>
      return NULL;
 800c990:	2300      	movs	r3, #0
 800c992:	e001      	b.n	800c998 <pbuf_alloc+0x1cc>
      break;
 800c994:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3728      	adds	r7, #40	; 0x28
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	08018b94 	.word	0x08018b94
 800c9a4:	08018bc4 	.word	0x08018bc4
 800c9a8:	08018bf4 	.word	0x08018bf4
 800c9ac:	08018c1c 	.word	0x08018c1c
 800c9b0:	08018c50 	.word	0x08018c50
 800c9b4:	08018c7c 	.word	0x08018c7c

0800c9b8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b086      	sub	sp, #24
 800c9bc:	af02      	add	r7, sp, #8
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	807b      	strh	r3, [r7, #2]
 800c9c4:	4613      	mov	r3, r2
 800c9c6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c9c8:	883b      	ldrh	r3, [r7, #0]
 800c9ca:	2b41      	cmp	r3, #65	; 0x41
 800c9cc:	d009      	beq.n	800c9e2 <pbuf_alloc_reference+0x2a>
 800c9ce:	883b      	ldrh	r3, [r7, #0]
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d006      	beq.n	800c9e2 <pbuf_alloc_reference+0x2a>
 800c9d4:	4b0f      	ldr	r3, [pc, #60]	; (800ca14 <pbuf_alloc_reference+0x5c>)
 800c9d6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c9da:	490f      	ldr	r1, [pc, #60]	; (800ca18 <pbuf_alloc_reference+0x60>)
 800c9dc:	480f      	ldr	r0, [pc, #60]	; (800ca1c <pbuf_alloc_reference+0x64>)
 800c9de:	f00a f931 	bl	8016c44 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c9e2:	200b      	movs	r0, #11
 800c9e4:	f7ff fb44 	bl	800c070 <memp_malloc>
 800c9e8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d101      	bne.n	800c9f4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	e00b      	b.n	800ca0c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c9f4:	8879      	ldrh	r1, [r7, #2]
 800c9f6:	887a      	ldrh	r2, [r7, #2]
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	9301      	str	r3, [sp, #4]
 800c9fc:	883b      	ldrh	r3, [r7, #0]
 800c9fe:	9300      	str	r3, [sp, #0]
 800ca00:	460b      	mov	r3, r1
 800ca02:	6879      	ldr	r1, [r7, #4]
 800ca04:	68f8      	ldr	r0, [r7, #12]
 800ca06:	f7ff feb7 	bl	800c778 <pbuf_init_alloced_pbuf>
  return p;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3710      	adds	r7, #16
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	08018b94 	.word	0x08018b94
 800ca18:	08018c98 	.word	0x08018c98
 800ca1c:	08018bf4 	.word	0x08018bf4

0800ca20 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b088      	sub	sp, #32
 800ca24:	af02      	add	r7, sp, #8
 800ca26:	607b      	str	r3, [r7, #4]
 800ca28:	4603      	mov	r3, r0
 800ca2a:	73fb      	strb	r3, [r7, #15]
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	81bb      	strh	r3, [r7, #12]
 800ca30:	4613      	mov	r3, r2
 800ca32:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ca34:	7bfb      	ldrb	r3, [r7, #15]
 800ca36:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ca38:	8a7b      	ldrh	r3, [r7, #18]
 800ca3a:	3303      	adds	r3, #3
 800ca3c:	f023 0203 	bic.w	r2, r3, #3
 800ca40:	89bb      	ldrh	r3, [r7, #12]
 800ca42:	441a      	add	r2, r3
 800ca44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d901      	bls.n	800ca4e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	e018      	b.n	800ca80 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ca4e:	6a3b      	ldr	r3, [r7, #32]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d007      	beq.n	800ca64 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ca54:	8a7b      	ldrh	r3, [r7, #18]
 800ca56:	3303      	adds	r3, #3
 800ca58:	f023 0303 	bic.w	r3, r3, #3
 800ca5c:	6a3a      	ldr	r2, [r7, #32]
 800ca5e:	4413      	add	r3, r2
 800ca60:	617b      	str	r3, [r7, #20]
 800ca62:	e001      	b.n	800ca68 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ca64:	2300      	movs	r3, #0
 800ca66:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	89b9      	ldrh	r1, [r7, #12]
 800ca6c:	89ba      	ldrh	r2, [r7, #12]
 800ca6e:	2302      	movs	r3, #2
 800ca70:	9301      	str	r3, [sp, #4]
 800ca72:	897b      	ldrh	r3, [r7, #10]
 800ca74:	9300      	str	r3, [sp, #0]
 800ca76:	460b      	mov	r3, r1
 800ca78:	6979      	ldr	r1, [r7, #20]
 800ca7a:	f7ff fe7d 	bl	800c778 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ca7e:	687b      	ldr	r3, [r7, #4]
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3718      	adds	r7, #24
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}

0800ca88 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	460b      	mov	r3, r1
 800ca92:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d106      	bne.n	800caa8 <pbuf_realloc+0x20>
 800ca9a:	4b3a      	ldr	r3, [pc, #232]	; (800cb84 <pbuf_realloc+0xfc>)
 800ca9c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800caa0:	4939      	ldr	r1, [pc, #228]	; (800cb88 <pbuf_realloc+0x100>)
 800caa2:	483a      	ldr	r0, [pc, #232]	; (800cb8c <pbuf_realloc+0x104>)
 800caa4:	f00a f8ce 	bl	8016c44 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	891b      	ldrh	r3, [r3, #8]
 800caac:	887a      	ldrh	r2, [r7, #2]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d263      	bcs.n	800cb7a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	891a      	ldrh	r2, [r3, #8]
 800cab6:	887b      	ldrh	r3, [r7, #2]
 800cab8:	1ad3      	subs	r3, r2, r3
 800caba:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cabc:	887b      	ldrh	r3, [r7, #2]
 800cabe:	817b      	strh	r3, [r7, #10]
  q = p;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cac4:	e018      	b.n	800caf8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	895b      	ldrh	r3, [r3, #10]
 800caca:	897a      	ldrh	r2, [r7, #10]
 800cacc:	1ad3      	subs	r3, r2, r3
 800cace:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	891a      	ldrh	r2, [r3, #8]
 800cad4:	893b      	ldrh	r3, [r7, #8]
 800cad6:	1ad3      	subs	r3, r2, r3
 800cad8:	b29a      	uxth	r2, r3
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d106      	bne.n	800caf8 <pbuf_realloc+0x70>
 800caea:	4b26      	ldr	r3, [pc, #152]	; (800cb84 <pbuf_realloc+0xfc>)
 800caec:	f240 12af 	movw	r2, #431	; 0x1af
 800caf0:	4927      	ldr	r1, [pc, #156]	; (800cb90 <pbuf_realloc+0x108>)
 800caf2:	4826      	ldr	r0, [pc, #152]	; (800cb8c <pbuf_realloc+0x104>)
 800caf4:	f00a f8a6 	bl	8016c44 <iprintf>
  while (rem_len > q->len) {
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	895b      	ldrh	r3, [r3, #10]
 800cafc:	897a      	ldrh	r2, [r7, #10]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d8e1      	bhi.n	800cac6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	7b1b      	ldrb	r3, [r3, #12]
 800cb06:	f003 030f 	and.w	r3, r3, #15
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d121      	bne.n	800cb52 <pbuf_realloc+0xca>
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	895b      	ldrh	r3, [r3, #10]
 800cb12:	897a      	ldrh	r2, [r7, #10]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d01c      	beq.n	800cb52 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	7b5b      	ldrb	r3, [r3, #13]
 800cb1c:	f003 0302 	and.w	r3, r3, #2
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d116      	bne.n	800cb52 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	685a      	ldr	r2, [r3, #4]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	1ad3      	subs	r3, r2, r3
 800cb2c:	b29a      	uxth	r2, r3
 800cb2e:	897b      	ldrh	r3, [r7, #10]
 800cb30:	4413      	add	r3, r2
 800cb32:	b29b      	uxth	r3, r3
 800cb34:	4619      	mov	r1, r3
 800cb36:	68f8      	ldr	r0, [r7, #12]
 800cb38:	f7ff f80e 	bl	800bb58 <mem_trim>
 800cb3c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d106      	bne.n	800cb52 <pbuf_realloc+0xca>
 800cb44:	4b0f      	ldr	r3, [pc, #60]	; (800cb84 <pbuf_realloc+0xfc>)
 800cb46:	f240 12bd 	movw	r2, #445	; 0x1bd
 800cb4a:	4912      	ldr	r1, [pc, #72]	; (800cb94 <pbuf_realloc+0x10c>)
 800cb4c:	480f      	ldr	r0, [pc, #60]	; (800cb8c <pbuf_realloc+0x104>)
 800cb4e:	f00a f879 	bl	8016c44 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	897a      	ldrh	r2, [r7, #10]
 800cb56:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	895a      	ldrh	r2, [r3, #10]
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d004      	beq.n	800cb72 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f000 f911 	bl	800cd94 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2200      	movs	r2, #0
 800cb76:	601a      	str	r2, [r3, #0]
 800cb78:	e000      	b.n	800cb7c <pbuf_realloc+0xf4>
    return;
 800cb7a:	bf00      	nop

}
 800cb7c:	3710      	adds	r7, #16
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
 800cb82:	bf00      	nop
 800cb84:	08018b94 	.word	0x08018b94
 800cb88:	08018cac 	.word	0x08018cac
 800cb8c:	08018bf4 	.word	0x08018bf4
 800cb90:	08018cc4 	.word	0x08018cc4
 800cb94:	08018cdc 	.word	0x08018cdc

0800cb98 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b086      	sub	sp, #24
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	60f8      	str	r0, [r7, #12]
 800cba0:	60b9      	str	r1, [r7, #8]
 800cba2:	4613      	mov	r3, r2
 800cba4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d106      	bne.n	800cbba <pbuf_add_header_impl+0x22>
 800cbac:	4b2b      	ldr	r3, [pc, #172]	; (800cc5c <pbuf_add_header_impl+0xc4>)
 800cbae:	f240 12df 	movw	r2, #479	; 0x1df
 800cbb2:	492b      	ldr	r1, [pc, #172]	; (800cc60 <pbuf_add_header_impl+0xc8>)
 800cbb4:	482b      	ldr	r0, [pc, #172]	; (800cc64 <pbuf_add_header_impl+0xcc>)
 800cbb6:	f00a f845 	bl	8016c44 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d003      	beq.n	800cbc8 <pbuf_add_header_impl+0x30>
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbc6:	d301      	bcc.n	800cbcc <pbuf_add_header_impl+0x34>
    return 1;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	e043      	b.n	800cc54 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d101      	bne.n	800cbd6 <pbuf_add_header_impl+0x3e>
    return 0;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	e03e      	b.n	800cc54 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	891a      	ldrh	r2, [r3, #8]
 800cbde:	8a7b      	ldrh	r3, [r7, #18]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	8a7a      	ldrh	r2, [r7, #18]
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d901      	bls.n	800cbee <pbuf_add_header_impl+0x56>
    return 1;
 800cbea:	2301      	movs	r3, #1
 800cbec:	e032      	b.n	800cc54 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	7b1b      	ldrb	r3, [r3, #12]
 800cbf2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cbf4:	8a3b      	ldrh	r3, [r7, #16]
 800cbf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d00c      	beq.n	800cc18 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	685a      	ldr	r2, [r3, #4]
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	425b      	negs	r3, r3
 800cc06:	4413      	add	r3, r2
 800cc08:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	3310      	adds	r3, #16
 800cc0e:	697a      	ldr	r2, [r7, #20]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d20d      	bcs.n	800cc30 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800cc14:	2301      	movs	r3, #1
 800cc16:	e01d      	b.n	800cc54 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800cc18:	79fb      	ldrb	r3, [r7, #7]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d006      	beq.n	800cc2c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	685a      	ldr	r2, [r3, #4]
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	425b      	negs	r3, r3
 800cc26:	4413      	add	r3, r2
 800cc28:	617b      	str	r3, [r7, #20]
 800cc2a:	e001      	b.n	800cc30 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	e011      	b.n	800cc54 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	697a      	ldr	r2, [r7, #20]
 800cc34:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	895a      	ldrh	r2, [r3, #10]
 800cc3a:	8a7b      	ldrh	r3, [r7, #18]
 800cc3c:	4413      	add	r3, r2
 800cc3e:	b29a      	uxth	r2, r3
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	891a      	ldrh	r2, [r3, #8]
 800cc48:	8a7b      	ldrh	r3, [r7, #18]
 800cc4a:	4413      	add	r3, r2
 800cc4c:	b29a      	uxth	r2, r3
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	811a      	strh	r2, [r3, #8]


  return 0;
 800cc52:	2300      	movs	r3, #0
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3718      	adds	r7, #24
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}
 800cc5c:	08018b94 	.word	0x08018b94
 800cc60:	08018cf8 	.word	0x08018cf8
 800cc64:	08018bf4 	.word	0x08018bf4

0800cc68 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800cc72:	2200      	movs	r2, #0
 800cc74:	6839      	ldr	r1, [r7, #0]
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f7ff ff8e 	bl	800cb98 <pbuf_add_header_impl>
 800cc7c:	4603      	mov	r3, r0
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3708      	adds	r7, #8
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
	...

0800cc88 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b084      	sub	sp, #16
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d106      	bne.n	800cca6 <pbuf_remove_header+0x1e>
 800cc98:	4b20      	ldr	r3, [pc, #128]	; (800cd1c <pbuf_remove_header+0x94>)
 800cc9a:	f240 224b 	movw	r2, #587	; 0x24b
 800cc9e:	4920      	ldr	r1, [pc, #128]	; (800cd20 <pbuf_remove_header+0x98>)
 800cca0:	4820      	ldr	r0, [pc, #128]	; (800cd24 <pbuf_remove_header+0x9c>)
 800cca2:	f009 ffcf 	bl	8016c44 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d003      	beq.n	800ccb4 <pbuf_remove_header+0x2c>
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccb2:	d301      	bcc.n	800ccb8 <pbuf_remove_header+0x30>
    return 1;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	e02c      	b.n	800cd12 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d101      	bne.n	800ccc2 <pbuf_remove_header+0x3a>
    return 0;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	e027      	b.n	800cd12 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	895b      	ldrh	r3, [r3, #10]
 800ccca:	89fa      	ldrh	r2, [r7, #14]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d908      	bls.n	800cce2 <pbuf_remove_header+0x5a>
 800ccd0:	4b12      	ldr	r3, [pc, #72]	; (800cd1c <pbuf_remove_header+0x94>)
 800ccd2:	f240 2255 	movw	r2, #597	; 0x255
 800ccd6:	4914      	ldr	r1, [pc, #80]	; (800cd28 <pbuf_remove_header+0xa0>)
 800ccd8:	4812      	ldr	r0, [pc, #72]	; (800cd24 <pbuf_remove_header+0x9c>)
 800ccda:	f009 ffb3 	bl	8016c44 <iprintf>
 800ccde:	2301      	movs	r3, #1
 800cce0:	e017      	b.n	800cd12 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	685b      	ldr	r3, [r3, #4]
 800cce6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	685a      	ldr	r2, [r3, #4]
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	441a      	add	r2, r3
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	895a      	ldrh	r2, [r3, #10]
 800ccf8:	89fb      	ldrh	r3, [r7, #14]
 800ccfa:	1ad3      	subs	r3, r2, r3
 800ccfc:	b29a      	uxth	r2, r3
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	891a      	ldrh	r2, [r3, #8]
 800cd06:	89fb      	ldrh	r3, [r7, #14]
 800cd08:	1ad3      	subs	r3, r2, r3
 800cd0a:	b29a      	uxth	r2, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cd10:	2300      	movs	r3, #0
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3710      	adds	r7, #16
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	08018b94 	.word	0x08018b94
 800cd20:	08018cf8 	.word	0x08018cf8
 800cd24:	08018bf4 	.word	0x08018bf4
 800cd28:	08018d04 	.word	0x08018d04

0800cd2c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	460b      	mov	r3, r1
 800cd36:	807b      	strh	r3, [r7, #2]
 800cd38:	4613      	mov	r3, r2
 800cd3a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cd3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	da08      	bge.n	800cd56 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800cd44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd48:	425b      	negs	r3, r3
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f7ff ff9b 	bl	800cc88 <pbuf_remove_header>
 800cd52:	4603      	mov	r3, r0
 800cd54:	e007      	b.n	800cd66 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800cd56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd5a:	787a      	ldrb	r2, [r7, #1]
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f7ff ff1a 	bl	800cb98 <pbuf_add_header_impl>
 800cd64:	4603      	mov	r3, r0
  }
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3708      	adds	r7, #8
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}

0800cd6e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b082      	sub	sp, #8
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
 800cd76:	460b      	mov	r3, r1
 800cd78:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800cd7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd7e:	2201      	movs	r2, #1
 800cd80:	4619      	mov	r1, r3
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f7ff ffd2 	bl	800cd2c <pbuf_header_impl>
 800cd88:	4603      	mov	r3, r0
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3708      	adds	r7, #8
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}
	...

0800cd94 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b088      	sub	sp, #32
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d10b      	bne.n	800cdba <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d106      	bne.n	800cdb6 <pbuf_free+0x22>
 800cda8:	4b3b      	ldr	r3, [pc, #236]	; (800ce98 <pbuf_free+0x104>)
 800cdaa:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800cdae:	493b      	ldr	r1, [pc, #236]	; (800ce9c <pbuf_free+0x108>)
 800cdb0:	483b      	ldr	r0, [pc, #236]	; (800cea0 <pbuf_free+0x10c>)
 800cdb2:	f009 ff47 	bl	8016c44 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	e069      	b.n	800ce8e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800cdbe:	e062      	b.n	800ce86 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800cdc0:	f009 fd32 	bl	8016828 <sys_arch_protect>
 800cdc4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	7b9b      	ldrb	r3, [r3, #14]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d106      	bne.n	800cddc <pbuf_free+0x48>
 800cdce:	4b32      	ldr	r3, [pc, #200]	; (800ce98 <pbuf_free+0x104>)
 800cdd0:	f240 22f1 	movw	r2, #753	; 0x2f1
 800cdd4:	4933      	ldr	r1, [pc, #204]	; (800cea4 <pbuf_free+0x110>)
 800cdd6:	4832      	ldr	r0, [pc, #200]	; (800cea0 <pbuf_free+0x10c>)
 800cdd8:	f009 ff34 	bl	8016c44 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	7b9b      	ldrb	r3, [r3, #14]
 800cde0:	3b01      	subs	r3, #1
 800cde2:	b2da      	uxtb	r2, r3
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	739a      	strb	r2, [r3, #14]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	7b9b      	ldrb	r3, [r3, #14]
 800cdec:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800cdee:	69b8      	ldr	r0, [r7, #24]
 800cdf0:	f009 fd28 	bl	8016844 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cdf4:	7dfb      	ldrb	r3, [r7, #23]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d143      	bne.n	800ce82 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	7b1b      	ldrb	r3, [r3, #12]
 800ce04:	f003 030f 	and.w	r3, r3, #15
 800ce08:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	7b5b      	ldrb	r3, [r3, #13]
 800ce0e:	f003 0302 	and.w	r3, r3, #2
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d011      	beq.n	800ce3a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	691b      	ldr	r3, [r3, #16]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d106      	bne.n	800ce30 <pbuf_free+0x9c>
 800ce22:	4b1d      	ldr	r3, [pc, #116]	; (800ce98 <pbuf_free+0x104>)
 800ce24:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ce28:	491f      	ldr	r1, [pc, #124]	; (800cea8 <pbuf_free+0x114>)
 800ce2a:	481d      	ldr	r0, [pc, #116]	; (800cea0 <pbuf_free+0x10c>)
 800ce2c:	f009 ff0a 	bl	8016c44 <iprintf>
        pc->custom_free_function(p);
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	691b      	ldr	r3, [r3, #16]
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	4798      	blx	r3
 800ce38:	e01d      	b.n	800ce76 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ce3a:	7bfb      	ldrb	r3, [r7, #15]
 800ce3c:	2b02      	cmp	r3, #2
 800ce3e:	d104      	bne.n	800ce4a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ce40:	6879      	ldr	r1, [r7, #4]
 800ce42:	200c      	movs	r0, #12
 800ce44:	f7ff f966 	bl	800c114 <memp_free>
 800ce48:	e015      	b.n	800ce76 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ce4a:	7bfb      	ldrb	r3, [r7, #15]
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d104      	bne.n	800ce5a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ce50:	6879      	ldr	r1, [r7, #4]
 800ce52:	200b      	movs	r0, #11
 800ce54:	f7ff f95e 	bl	800c114 <memp_free>
 800ce58:	e00d      	b.n	800ce76 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ce5a:	7bfb      	ldrb	r3, [r7, #15]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d103      	bne.n	800ce68 <pbuf_free+0xd4>
          mem_free(p);
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7fe fde9 	bl	800ba38 <mem_free>
 800ce66:	e006      	b.n	800ce76 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ce68:	4b0b      	ldr	r3, [pc, #44]	; (800ce98 <pbuf_free+0x104>)
 800ce6a:	f240 320f 	movw	r2, #783	; 0x30f
 800ce6e:	490f      	ldr	r1, [pc, #60]	; (800ceac <pbuf_free+0x118>)
 800ce70:	480b      	ldr	r0, [pc, #44]	; (800cea0 <pbuf_free+0x10c>)
 800ce72:	f009 fee7 	bl	8016c44 <iprintf>
        }
      }
      count++;
 800ce76:	7ffb      	ldrb	r3, [r7, #31]
 800ce78:	3301      	adds	r3, #1
 800ce7a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	607b      	str	r3, [r7, #4]
 800ce80:	e001      	b.n	800ce86 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ce82:	2300      	movs	r3, #0
 800ce84:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d199      	bne.n	800cdc0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ce8c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3720      	adds	r7, #32
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	08018b94 	.word	0x08018b94
 800ce9c:	08018cf8 	.word	0x08018cf8
 800cea0:	08018bf4 	.word	0x08018bf4
 800cea4:	08018d24 	.word	0x08018d24
 800cea8:	08018d3c 	.word	0x08018d3c
 800ceac:	08018d60 	.word	0x08018d60

0800ceb0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b085      	sub	sp, #20
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800cebc:	e005      	b.n	800ceca <pbuf_clen+0x1a>
    ++len;
 800cebe:	89fb      	ldrh	r3, [r7, #14]
 800cec0:	3301      	adds	r3, #1
 800cec2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d1f6      	bne.n	800cebe <pbuf_clen+0xe>
  }
  return len;
 800ced0:	89fb      	ldrh	r3, [r7, #14]
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3714      	adds	r7, #20
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr
	...

0800cee0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d016      	beq.n	800cf1c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ceee:	f009 fc9b 	bl	8016828 <sys_arch_protect>
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	7b9b      	ldrb	r3, [r3, #14]
 800cef8:	3301      	adds	r3, #1
 800cefa:	b2da      	uxtb	r2, r3
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	739a      	strb	r2, [r3, #14]
 800cf00:	68f8      	ldr	r0, [r7, #12]
 800cf02:	f009 fc9f 	bl	8016844 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	7b9b      	ldrb	r3, [r3, #14]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d106      	bne.n	800cf1c <pbuf_ref+0x3c>
 800cf0e:	4b05      	ldr	r3, [pc, #20]	; (800cf24 <pbuf_ref+0x44>)
 800cf10:	f240 3242 	movw	r2, #834	; 0x342
 800cf14:	4904      	ldr	r1, [pc, #16]	; (800cf28 <pbuf_ref+0x48>)
 800cf16:	4805      	ldr	r0, [pc, #20]	; (800cf2c <pbuf_ref+0x4c>)
 800cf18:	f009 fe94 	bl	8016c44 <iprintf>
  }
}
 800cf1c:	bf00      	nop
 800cf1e:	3710      	adds	r7, #16
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}
 800cf24:	08018b94 	.word	0x08018b94
 800cf28:	08018d74 	.word	0x08018d74
 800cf2c:	08018bf4 	.word	0x08018bf4

0800cf30 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d002      	beq.n	800cf46 <pbuf_cat+0x16>
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d107      	bne.n	800cf56 <pbuf_cat+0x26>
 800cf46:	4b20      	ldr	r3, [pc, #128]	; (800cfc8 <pbuf_cat+0x98>)
 800cf48:	f240 3259 	movw	r2, #857	; 0x359
 800cf4c:	491f      	ldr	r1, [pc, #124]	; (800cfcc <pbuf_cat+0x9c>)
 800cf4e:	4820      	ldr	r0, [pc, #128]	; (800cfd0 <pbuf_cat+0xa0>)
 800cf50:	f009 fe78 	bl	8016c44 <iprintf>
 800cf54:	e034      	b.n	800cfc0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	60fb      	str	r3, [r7, #12]
 800cf5a:	e00a      	b.n	800cf72 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	891a      	ldrh	r2, [r3, #8]
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	891b      	ldrh	r3, [r3, #8]
 800cf64:	4413      	add	r3, r2
 800cf66:	b29a      	uxth	r2, r3
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	60fb      	str	r3, [r7, #12]
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d1f0      	bne.n	800cf5c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	891a      	ldrh	r2, [r3, #8]
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	895b      	ldrh	r3, [r3, #10]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d006      	beq.n	800cf94 <pbuf_cat+0x64>
 800cf86:	4b10      	ldr	r3, [pc, #64]	; (800cfc8 <pbuf_cat+0x98>)
 800cf88:	f240 3262 	movw	r2, #866	; 0x362
 800cf8c:	4911      	ldr	r1, [pc, #68]	; (800cfd4 <pbuf_cat+0xa4>)
 800cf8e:	4810      	ldr	r0, [pc, #64]	; (800cfd0 <pbuf_cat+0xa0>)
 800cf90:	f009 fe58 	bl	8016c44 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d006      	beq.n	800cfaa <pbuf_cat+0x7a>
 800cf9c:	4b0a      	ldr	r3, [pc, #40]	; (800cfc8 <pbuf_cat+0x98>)
 800cf9e:	f240 3263 	movw	r2, #867	; 0x363
 800cfa2:	490d      	ldr	r1, [pc, #52]	; (800cfd8 <pbuf_cat+0xa8>)
 800cfa4:	480a      	ldr	r0, [pc, #40]	; (800cfd0 <pbuf_cat+0xa0>)
 800cfa6:	f009 fe4d 	bl	8016c44 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	891a      	ldrh	r2, [r3, #8]
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	891b      	ldrh	r3, [r3, #8]
 800cfb2:	4413      	add	r3, r2
 800cfb4:	b29a      	uxth	r2, r3
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	683a      	ldr	r2, [r7, #0]
 800cfbe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	08018b94 	.word	0x08018b94
 800cfcc:	08018d88 	.word	0x08018d88
 800cfd0:	08018bf4 	.word	0x08018bf4
 800cfd4:	08018dc0 	.word	0x08018dc0
 800cfd8:	08018df0 	.word	0x08018df0

0800cfdc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800cfe6:	6839      	ldr	r1, [r7, #0]
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f7ff ffa1 	bl	800cf30 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800cfee:	6838      	ldr	r0, [r7, #0]
 800cff0:	f7ff ff76 	bl	800cee0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800cff4:	bf00      	nop
 800cff6:	3708      	adds	r7, #8
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b086      	sub	sp, #24
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d006:	2300      	movs	r3, #0
 800d008:	617b      	str	r3, [r7, #20]
 800d00a:	2300      	movs	r3, #0
 800d00c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d008      	beq.n	800d026 <pbuf_copy+0x2a>
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d005      	beq.n	800d026 <pbuf_copy+0x2a>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	891a      	ldrh	r2, [r3, #8]
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	891b      	ldrh	r3, [r3, #8]
 800d022:	429a      	cmp	r2, r3
 800d024:	d209      	bcs.n	800d03a <pbuf_copy+0x3e>
 800d026:	4b57      	ldr	r3, [pc, #348]	; (800d184 <pbuf_copy+0x188>)
 800d028:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d02c:	4956      	ldr	r1, [pc, #344]	; (800d188 <pbuf_copy+0x18c>)
 800d02e:	4857      	ldr	r0, [pc, #348]	; (800d18c <pbuf_copy+0x190>)
 800d030:	f009 fe08 	bl	8016c44 <iprintf>
 800d034:	f06f 030f 	mvn.w	r3, #15
 800d038:	e09f      	b.n	800d17a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	895b      	ldrh	r3, [r3, #10]
 800d03e:	461a      	mov	r2, r3
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	1ad2      	subs	r2, r2, r3
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	895b      	ldrh	r3, [r3, #10]
 800d048:	4619      	mov	r1, r3
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	1acb      	subs	r3, r1, r3
 800d04e:	429a      	cmp	r2, r3
 800d050:	d306      	bcc.n	800d060 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	895b      	ldrh	r3, [r3, #10]
 800d056:	461a      	mov	r2, r3
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	1ad3      	subs	r3, r2, r3
 800d05c:	60fb      	str	r3, [r7, #12]
 800d05e:	e005      	b.n	800d06c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	895b      	ldrh	r3, [r3, #10]
 800d064:	461a      	mov	r2, r3
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	1ad3      	subs	r3, r2, r3
 800d06a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	685a      	ldr	r2, [r3, #4]
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	18d0      	adds	r0, r2, r3
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	685a      	ldr	r2, [r3, #4]
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	4413      	add	r3, r2
 800d07c:	68fa      	ldr	r2, [r7, #12]
 800d07e:	4619      	mov	r1, r3
 800d080:	f009 fd20 	bl	8016ac4 <memcpy>
    offset_to += len;
 800d084:	697a      	ldr	r2, [r7, #20]
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	4413      	add	r3, r2
 800d08a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d08c:	693a      	ldr	r2, [r7, #16]
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	4413      	add	r3, r2
 800d092:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	895b      	ldrh	r3, [r3, #10]
 800d098:	461a      	mov	r2, r3
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d906      	bls.n	800d0ae <pbuf_copy+0xb2>
 800d0a0:	4b38      	ldr	r3, [pc, #224]	; (800d184 <pbuf_copy+0x188>)
 800d0a2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d0a6:	493a      	ldr	r1, [pc, #232]	; (800d190 <pbuf_copy+0x194>)
 800d0a8:	4838      	ldr	r0, [pc, #224]	; (800d18c <pbuf_copy+0x190>)
 800d0aa:	f009 fdcb 	bl	8016c44 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	895b      	ldrh	r3, [r3, #10]
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d906      	bls.n	800d0c8 <pbuf_copy+0xcc>
 800d0ba:	4b32      	ldr	r3, [pc, #200]	; (800d184 <pbuf_copy+0x188>)
 800d0bc:	f240 32da 	movw	r2, #986	; 0x3da
 800d0c0:	4934      	ldr	r1, [pc, #208]	; (800d194 <pbuf_copy+0x198>)
 800d0c2:	4832      	ldr	r0, [pc, #200]	; (800d18c <pbuf_copy+0x190>)
 800d0c4:	f009 fdbe 	bl	8016c44 <iprintf>
    if (offset_from >= p_from->len) {
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	895b      	ldrh	r3, [r3, #10]
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d304      	bcc.n	800d0de <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	895b      	ldrh	r3, [r3, #10]
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d114      	bne.n	800d114 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d10c      	bne.n	800d114 <pbuf_copy+0x118>
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d009      	beq.n	800d114 <pbuf_copy+0x118>
 800d100:	4b20      	ldr	r3, [pc, #128]	; (800d184 <pbuf_copy+0x188>)
 800d102:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d106:	4924      	ldr	r1, [pc, #144]	; (800d198 <pbuf_copy+0x19c>)
 800d108:	4820      	ldr	r0, [pc, #128]	; (800d18c <pbuf_copy+0x190>)
 800d10a:	f009 fd9b 	bl	8016c44 <iprintf>
 800d10e:	f06f 030f 	mvn.w	r3, #15
 800d112:	e032      	b.n	800d17a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d013      	beq.n	800d142 <pbuf_copy+0x146>
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	895a      	ldrh	r2, [r3, #10]
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	891b      	ldrh	r3, [r3, #8]
 800d122:	429a      	cmp	r2, r3
 800d124:	d10d      	bne.n	800d142 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d009      	beq.n	800d142 <pbuf_copy+0x146>
 800d12e:	4b15      	ldr	r3, [pc, #84]	; (800d184 <pbuf_copy+0x188>)
 800d130:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d134:	4919      	ldr	r1, [pc, #100]	; (800d19c <pbuf_copy+0x1a0>)
 800d136:	4815      	ldr	r0, [pc, #84]	; (800d18c <pbuf_copy+0x190>)
 800d138:	f009 fd84 	bl	8016c44 <iprintf>
 800d13c:	f06f 0305 	mvn.w	r3, #5
 800d140:	e01b      	b.n	800d17a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d013      	beq.n	800d170 <pbuf_copy+0x174>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	895a      	ldrh	r2, [r3, #10]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	891b      	ldrh	r3, [r3, #8]
 800d150:	429a      	cmp	r2, r3
 800d152:	d10d      	bne.n	800d170 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d009      	beq.n	800d170 <pbuf_copy+0x174>
 800d15c:	4b09      	ldr	r3, [pc, #36]	; (800d184 <pbuf_copy+0x188>)
 800d15e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d162:	490e      	ldr	r1, [pc, #56]	; (800d19c <pbuf_copy+0x1a0>)
 800d164:	4809      	ldr	r0, [pc, #36]	; (800d18c <pbuf_copy+0x190>)
 800d166:	f009 fd6d 	bl	8016c44 <iprintf>
 800d16a:	f06f 0305 	mvn.w	r3, #5
 800d16e:	e004      	b.n	800d17a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	f47f af61 	bne.w	800d03a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d178:	2300      	movs	r3, #0
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3718      	adds	r7, #24
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	08018b94 	.word	0x08018b94
 800d188:	08018e3c 	.word	0x08018e3c
 800d18c:	08018bf4 	.word	0x08018bf4
 800d190:	08018e6c 	.word	0x08018e6c
 800d194:	08018e84 	.word	0x08018e84
 800d198:	08018ea0 	.word	0x08018ea0
 800d19c:	08018eb0 	.word	0x08018eb0

0800d1a0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b088      	sub	sp, #32
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	60f8      	str	r0, [r7, #12]
 800d1a8:	60b9      	str	r1, [r7, #8]
 800d1aa:	4611      	mov	r1, r2
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	80fb      	strh	r3, [r7, #6]
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d108      	bne.n	800d1d6 <pbuf_copy_partial+0x36>
 800d1c4:	4b2b      	ldr	r3, [pc, #172]	; (800d274 <pbuf_copy_partial+0xd4>)
 800d1c6:	f240 420a 	movw	r2, #1034	; 0x40a
 800d1ca:	492b      	ldr	r1, [pc, #172]	; (800d278 <pbuf_copy_partial+0xd8>)
 800d1cc:	482b      	ldr	r0, [pc, #172]	; (800d27c <pbuf_copy_partial+0xdc>)
 800d1ce:	f009 fd39 	bl	8016c44 <iprintf>
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	e04a      	b.n	800d26c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d108      	bne.n	800d1ee <pbuf_copy_partial+0x4e>
 800d1dc:	4b25      	ldr	r3, [pc, #148]	; (800d274 <pbuf_copy_partial+0xd4>)
 800d1de:	f240 420b 	movw	r2, #1035	; 0x40b
 800d1e2:	4927      	ldr	r1, [pc, #156]	; (800d280 <pbuf_copy_partial+0xe0>)
 800d1e4:	4825      	ldr	r0, [pc, #148]	; (800d27c <pbuf_copy_partial+0xdc>)
 800d1e6:	f009 fd2d 	bl	8016c44 <iprintf>
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	e03e      	b.n	800d26c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	61fb      	str	r3, [r7, #28]
 800d1f2:	e034      	b.n	800d25e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d1f4:	88bb      	ldrh	r3, [r7, #4]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d00a      	beq.n	800d210 <pbuf_copy_partial+0x70>
 800d1fa:	69fb      	ldr	r3, [r7, #28]
 800d1fc:	895b      	ldrh	r3, [r3, #10]
 800d1fe:	88ba      	ldrh	r2, [r7, #4]
 800d200:	429a      	cmp	r2, r3
 800d202:	d305      	bcc.n	800d210 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	895b      	ldrh	r3, [r3, #10]
 800d208:	88ba      	ldrh	r2, [r7, #4]
 800d20a:	1ad3      	subs	r3, r2, r3
 800d20c:	80bb      	strh	r3, [r7, #4]
 800d20e:	e023      	b.n	800d258 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	895a      	ldrh	r2, [r3, #10]
 800d214:	88bb      	ldrh	r3, [r7, #4]
 800d216:	1ad3      	subs	r3, r2, r3
 800d218:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d21a:	8b3a      	ldrh	r2, [r7, #24]
 800d21c:	88fb      	ldrh	r3, [r7, #6]
 800d21e:	429a      	cmp	r2, r3
 800d220:	d901      	bls.n	800d226 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d222:	88fb      	ldrh	r3, [r7, #6]
 800d224:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d226:	8b7b      	ldrh	r3, [r7, #26]
 800d228:	68ba      	ldr	r2, [r7, #8]
 800d22a:	18d0      	adds	r0, r2, r3
 800d22c:	69fb      	ldr	r3, [r7, #28]
 800d22e:	685a      	ldr	r2, [r3, #4]
 800d230:	88bb      	ldrh	r3, [r7, #4]
 800d232:	4413      	add	r3, r2
 800d234:	8b3a      	ldrh	r2, [r7, #24]
 800d236:	4619      	mov	r1, r3
 800d238:	f009 fc44 	bl	8016ac4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d23c:	8afa      	ldrh	r2, [r7, #22]
 800d23e:	8b3b      	ldrh	r3, [r7, #24]
 800d240:	4413      	add	r3, r2
 800d242:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d244:	8b7a      	ldrh	r2, [r7, #26]
 800d246:	8b3b      	ldrh	r3, [r7, #24]
 800d248:	4413      	add	r3, r2
 800d24a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d24c:	88fa      	ldrh	r2, [r7, #6]
 800d24e:	8b3b      	ldrh	r3, [r7, #24]
 800d250:	1ad3      	subs	r3, r2, r3
 800d252:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d254:	2300      	movs	r3, #0
 800d256:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d258:	69fb      	ldr	r3, [r7, #28]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	61fb      	str	r3, [r7, #28]
 800d25e:	88fb      	ldrh	r3, [r7, #6]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d002      	beq.n	800d26a <pbuf_copy_partial+0xca>
 800d264:	69fb      	ldr	r3, [r7, #28]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d1c4      	bne.n	800d1f4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d26a:	8afb      	ldrh	r3, [r7, #22]
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3720      	adds	r7, #32
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	08018b94 	.word	0x08018b94
 800d278:	08018edc 	.word	0x08018edc
 800d27c:	08018bf4 	.word	0x08018bf4
 800d280:	08018efc 	.word	0x08018efc

0800d284 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	4603      	mov	r3, r0
 800d28c:	603a      	str	r2, [r7, #0]
 800d28e:	71fb      	strb	r3, [r7, #7]
 800d290:	460b      	mov	r3, r1
 800d292:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	8919      	ldrh	r1, [r3, #8]
 800d298:	88ba      	ldrh	r2, [r7, #4]
 800d29a:	79fb      	ldrb	r3, [r7, #7]
 800d29c:	4618      	mov	r0, r3
 800d29e:	f7ff fa95 	bl	800c7cc <pbuf_alloc>
 800d2a2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d101      	bne.n	800d2ae <pbuf_clone+0x2a>
    return NULL;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	e011      	b.n	800d2d2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d2ae:	6839      	ldr	r1, [r7, #0]
 800d2b0:	68f8      	ldr	r0, [r7, #12]
 800d2b2:	f7ff fea3 	bl	800cffc <pbuf_copy>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d2ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d006      	beq.n	800d2d0 <pbuf_clone+0x4c>
 800d2c2:	4b06      	ldr	r3, [pc, #24]	; (800d2dc <pbuf_clone+0x58>)
 800d2c4:	f240 5224 	movw	r2, #1316	; 0x524
 800d2c8:	4905      	ldr	r1, [pc, #20]	; (800d2e0 <pbuf_clone+0x5c>)
 800d2ca:	4806      	ldr	r0, [pc, #24]	; (800d2e4 <pbuf_clone+0x60>)
 800d2cc:	f009 fcba 	bl	8016c44 <iprintf>
  return q;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3710      	adds	r7, #16
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	08018b94 	.word	0x08018b94
 800d2e0:	08019008 	.word	0x08019008
 800d2e4:	08018bf4 	.word	0x08018bf4

0800d2e8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d2ec:	f009 fcc2 	bl	8016c74 <rand>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d2f8:	b29b      	uxth	r3, r3
 800d2fa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	4b01      	ldr	r3, [pc, #4]	; (800d308 <tcp_init+0x20>)
 800d302:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d304:	bf00      	nop
 800d306:	bd80      	pop	{r7, pc}
 800d308:	20000014 	.word	0x20000014

0800d30c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	7d1b      	ldrb	r3, [r3, #20]
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d105      	bne.n	800d328 <tcp_free+0x1c>
 800d31c:	4b06      	ldr	r3, [pc, #24]	; (800d338 <tcp_free+0x2c>)
 800d31e:	22d4      	movs	r2, #212	; 0xd4
 800d320:	4906      	ldr	r1, [pc, #24]	; (800d33c <tcp_free+0x30>)
 800d322:	4807      	ldr	r0, [pc, #28]	; (800d340 <tcp_free+0x34>)
 800d324:	f009 fc8e 	bl	8016c44 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d328:	6879      	ldr	r1, [r7, #4]
 800d32a:	2001      	movs	r0, #1
 800d32c:	f7fe fef2 	bl	800c114 <memp_free>
}
 800d330:	bf00      	nop
 800d332:	3708      	adds	r7, #8
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}
 800d338:	08019094 	.word	0x08019094
 800d33c:	080190c4 	.word	0x080190c4
 800d340:	080190d8 	.word	0x080190d8

0800d344 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b082      	sub	sp, #8
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	7d1b      	ldrb	r3, [r3, #20]
 800d350:	2b01      	cmp	r3, #1
 800d352:	d105      	bne.n	800d360 <tcp_free_listen+0x1c>
 800d354:	4b06      	ldr	r3, [pc, #24]	; (800d370 <tcp_free_listen+0x2c>)
 800d356:	22df      	movs	r2, #223	; 0xdf
 800d358:	4906      	ldr	r1, [pc, #24]	; (800d374 <tcp_free_listen+0x30>)
 800d35a:	4807      	ldr	r0, [pc, #28]	; (800d378 <tcp_free_listen+0x34>)
 800d35c:	f009 fc72 	bl	8016c44 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d360:	6879      	ldr	r1, [r7, #4]
 800d362:	2002      	movs	r0, #2
 800d364:	f7fe fed6 	bl	800c114 <memp_free>
}
 800d368:	bf00      	nop
 800d36a:	3708      	adds	r7, #8
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}
 800d370:	08019094 	.word	0x08019094
 800d374:	08019100 	.word	0x08019100
 800d378:	080190d8 	.word	0x080190d8

0800d37c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d380:	f000 ffdc 	bl	800e33c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d384:	4b07      	ldr	r3, [pc, #28]	; (800d3a4 <tcp_tmr+0x28>)
 800d386:	781b      	ldrb	r3, [r3, #0]
 800d388:	3301      	adds	r3, #1
 800d38a:	b2da      	uxtb	r2, r3
 800d38c:	4b05      	ldr	r3, [pc, #20]	; (800d3a4 <tcp_tmr+0x28>)
 800d38e:	701a      	strb	r2, [r3, #0]
 800d390:	4b04      	ldr	r3, [pc, #16]	; (800d3a4 <tcp_tmr+0x28>)
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	f003 0301 	and.w	r3, r3, #1
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d001      	beq.n	800d3a0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d39c:	f000 fc8e 	bl	800dcbc <tcp_slowtmr>
  }
}
 800d3a0:	bf00      	nop
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	20006845 	.word	0x20006845

0800d3a8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d105      	bne.n	800d3c4 <tcp_remove_listener+0x1c>
 800d3b8:	4b0d      	ldr	r3, [pc, #52]	; (800d3f0 <tcp_remove_listener+0x48>)
 800d3ba:	22ff      	movs	r2, #255	; 0xff
 800d3bc:	490d      	ldr	r1, [pc, #52]	; (800d3f4 <tcp_remove_listener+0x4c>)
 800d3be:	480e      	ldr	r0, [pc, #56]	; (800d3f8 <tcp_remove_listener+0x50>)
 800d3c0:	f009 fc40 	bl	8016c44 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	60fb      	str	r3, [r7, #12]
 800d3c8:	e00a      	b.n	800d3e0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3ce:	683a      	ldr	r2, [r7, #0]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d102      	bne.n	800d3da <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	68db      	ldr	r3, [r3, #12]
 800d3de:	60fb      	str	r3, [r7, #12]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d1f1      	bne.n	800d3ca <tcp_remove_listener+0x22>
    }
  }
}
 800d3e6:	bf00      	nop
 800d3e8:	bf00      	nop
 800d3ea:	3710      	adds	r7, #16
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}
 800d3f0:	08019094 	.word	0x08019094
 800d3f4:	0801911c 	.word	0x0801911c
 800d3f8:	080190d8 	.word	0x080190d8

0800d3fc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d106      	bne.n	800d418 <tcp_listen_closed+0x1c>
 800d40a:	4b14      	ldr	r3, [pc, #80]	; (800d45c <tcp_listen_closed+0x60>)
 800d40c:	f240 1211 	movw	r2, #273	; 0x111
 800d410:	4913      	ldr	r1, [pc, #76]	; (800d460 <tcp_listen_closed+0x64>)
 800d412:	4814      	ldr	r0, [pc, #80]	; (800d464 <tcp_listen_closed+0x68>)
 800d414:	f009 fc16 	bl	8016c44 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	7d1b      	ldrb	r3, [r3, #20]
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	d006      	beq.n	800d42e <tcp_listen_closed+0x32>
 800d420:	4b0e      	ldr	r3, [pc, #56]	; (800d45c <tcp_listen_closed+0x60>)
 800d422:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d426:	4910      	ldr	r1, [pc, #64]	; (800d468 <tcp_listen_closed+0x6c>)
 800d428:	480e      	ldr	r0, [pc, #56]	; (800d464 <tcp_listen_closed+0x68>)
 800d42a:	f009 fc0b 	bl	8016c44 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d42e:	2301      	movs	r3, #1
 800d430:	60fb      	str	r3, [r7, #12]
 800d432:	e00b      	b.n	800d44c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d434:	4a0d      	ldr	r2, [pc, #52]	; (800d46c <tcp_listen_closed+0x70>)
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	6879      	ldr	r1, [r7, #4]
 800d440:	4618      	mov	r0, r3
 800d442:	f7ff ffb1 	bl	800d3a8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	3301      	adds	r3, #1
 800d44a:	60fb      	str	r3, [r7, #12]
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2b03      	cmp	r3, #3
 800d450:	d9f0      	bls.n	800d434 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d452:	bf00      	nop
 800d454:	bf00      	nop
 800d456:	3710      	adds	r7, #16
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	08019094 	.word	0x08019094
 800d460:	08019144 	.word	0x08019144
 800d464:	080190d8 	.word	0x080190d8
 800d468:	08019150 	.word	0x08019150
 800d46c:	0801b0ac 	.word	0x0801b0ac

0800d470 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d470:	b5b0      	push	{r4, r5, r7, lr}
 800d472:	b088      	sub	sp, #32
 800d474:	af04      	add	r7, sp, #16
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	460b      	mov	r3, r1
 800d47a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d106      	bne.n	800d490 <tcp_close_shutdown+0x20>
 800d482:	4b63      	ldr	r3, [pc, #396]	; (800d610 <tcp_close_shutdown+0x1a0>)
 800d484:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d488:	4962      	ldr	r1, [pc, #392]	; (800d614 <tcp_close_shutdown+0x1a4>)
 800d48a:	4863      	ldr	r0, [pc, #396]	; (800d618 <tcp_close_shutdown+0x1a8>)
 800d48c:	f009 fbda 	bl	8016c44 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d490:	78fb      	ldrb	r3, [r7, #3]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d066      	beq.n	800d564 <tcp_close_shutdown+0xf4>
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	7d1b      	ldrb	r3, [r3, #20]
 800d49a:	2b04      	cmp	r3, #4
 800d49c:	d003      	beq.n	800d4a6 <tcp_close_shutdown+0x36>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	7d1b      	ldrb	r3, [r3, #20]
 800d4a2:	2b07      	cmp	r3, #7
 800d4a4:	d15e      	bne.n	800d564 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d104      	bne.n	800d4b8 <tcp_close_shutdown+0x48>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4b2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d4b6:	d055      	beq.n	800d564 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	8b5b      	ldrh	r3, [r3, #26]
 800d4bc:	f003 0310 	and.w	r3, r3, #16
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d106      	bne.n	800d4d2 <tcp_close_shutdown+0x62>
 800d4c4:	4b52      	ldr	r3, [pc, #328]	; (800d610 <tcp_close_shutdown+0x1a0>)
 800d4c6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d4ca:	4954      	ldr	r1, [pc, #336]	; (800d61c <tcp_close_shutdown+0x1ac>)
 800d4cc:	4852      	ldr	r0, [pc, #328]	; (800d618 <tcp_close_shutdown+0x1a8>)
 800d4ce:	f009 fbb9 	bl	8016c44 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d4da:	687d      	ldr	r5, [r7, #4]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	3304      	adds	r3, #4
 800d4e0:	687a      	ldr	r2, [r7, #4]
 800d4e2:	8ad2      	ldrh	r2, [r2, #22]
 800d4e4:	6879      	ldr	r1, [r7, #4]
 800d4e6:	8b09      	ldrh	r1, [r1, #24]
 800d4e8:	9102      	str	r1, [sp, #8]
 800d4ea:	9201      	str	r2, [sp, #4]
 800d4ec:	9300      	str	r3, [sp, #0]
 800d4ee:	462b      	mov	r3, r5
 800d4f0:	4622      	mov	r2, r4
 800d4f2:	4601      	mov	r1, r0
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f005 fced 	bl	8012ed4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f001 face 	bl	800ea9c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d500:	4b47      	ldr	r3, [pc, #284]	; (800d620 <tcp_close_shutdown+0x1b0>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	687a      	ldr	r2, [r7, #4]
 800d506:	429a      	cmp	r2, r3
 800d508:	d105      	bne.n	800d516 <tcp_close_shutdown+0xa6>
 800d50a:	4b45      	ldr	r3, [pc, #276]	; (800d620 <tcp_close_shutdown+0x1b0>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	68db      	ldr	r3, [r3, #12]
 800d510:	4a43      	ldr	r2, [pc, #268]	; (800d620 <tcp_close_shutdown+0x1b0>)
 800d512:	6013      	str	r3, [r2, #0]
 800d514:	e013      	b.n	800d53e <tcp_close_shutdown+0xce>
 800d516:	4b42      	ldr	r3, [pc, #264]	; (800d620 <tcp_close_shutdown+0x1b0>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	60fb      	str	r3, [r7, #12]
 800d51c:	e00c      	b.n	800d538 <tcp_close_shutdown+0xc8>
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	68db      	ldr	r3, [r3, #12]
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	429a      	cmp	r2, r3
 800d526:	d104      	bne.n	800d532 <tcp_close_shutdown+0xc2>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	68da      	ldr	r2, [r3, #12]
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	60da      	str	r2, [r3, #12]
 800d530:	e005      	b.n	800d53e <tcp_close_shutdown+0xce>
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	68db      	ldr	r3, [r3, #12]
 800d536:	60fb      	str	r3, [r7, #12]
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d1ef      	bne.n	800d51e <tcp_close_shutdown+0xae>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2200      	movs	r2, #0
 800d542:	60da      	str	r2, [r3, #12]
 800d544:	4b37      	ldr	r3, [pc, #220]	; (800d624 <tcp_close_shutdown+0x1b4>)
 800d546:	2201      	movs	r2, #1
 800d548:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d54a:	4b37      	ldr	r3, [pc, #220]	; (800d628 <tcp_close_shutdown+0x1b8>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	429a      	cmp	r2, r3
 800d552:	d102      	bne.n	800d55a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d554:	f003 ff62 	bl	801141c <tcp_trigger_input_pcb_close>
 800d558:	e002      	b.n	800d560 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f7ff fed6 	bl	800d30c <tcp_free>
      }
      return ERR_OK;
 800d560:	2300      	movs	r3, #0
 800d562:	e050      	b.n	800d606 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	7d1b      	ldrb	r3, [r3, #20]
 800d568:	2b02      	cmp	r3, #2
 800d56a:	d03b      	beq.n	800d5e4 <tcp_close_shutdown+0x174>
 800d56c:	2b02      	cmp	r3, #2
 800d56e:	dc44      	bgt.n	800d5fa <tcp_close_shutdown+0x18a>
 800d570:	2b00      	cmp	r3, #0
 800d572:	d002      	beq.n	800d57a <tcp_close_shutdown+0x10a>
 800d574:	2b01      	cmp	r3, #1
 800d576:	d02a      	beq.n	800d5ce <tcp_close_shutdown+0x15e>
 800d578:	e03f      	b.n	800d5fa <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	8adb      	ldrh	r3, [r3, #22]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d021      	beq.n	800d5c6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d582:	4b2a      	ldr	r3, [pc, #168]	; (800d62c <tcp_close_shutdown+0x1bc>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	687a      	ldr	r2, [r7, #4]
 800d588:	429a      	cmp	r2, r3
 800d58a:	d105      	bne.n	800d598 <tcp_close_shutdown+0x128>
 800d58c:	4b27      	ldr	r3, [pc, #156]	; (800d62c <tcp_close_shutdown+0x1bc>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	4a26      	ldr	r2, [pc, #152]	; (800d62c <tcp_close_shutdown+0x1bc>)
 800d594:	6013      	str	r3, [r2, #0]
 800d596:	e013      	b.n	800d5c0 <tcp_close_shutdown+0x150>
 800d598:	4b24      	ldr	r3, [pc, #144]	; (800d62c <tcp_close_shutdown+0x1bc>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	60bb      	str	r3, [r7, #8]
 800d59e:	e00c      	b.n	800d5ba <tcp_close_shutdown+0x14a>
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d104      	bne.n	800d5b4 <tcp_close_shutdown+0x144>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	68da      	ldr	r2, [r3, #12]
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	60da      	str	r2, [r3, #12]
 800d5b2:	e005      	b.n	800d5c0 <tcp_close_shutdown+0x150>
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	60bb      	str	r3, [r7, #8]
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d1ef      	bne.n	800d5a0 <tcp_close_shutdown+0x130>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f7ff fea0 	bl	800d30c <tcp_free>
      break;
 800d5cc:	e01a      	b.n	800d604 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f7ff ff14 	bl	800d3fc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d5d4:	6879      	ldr	r1, [r7, #4]
 800d5d6:	4816      	ldr	r0, [pc, #88]	; (800d630 <tcp_close_shutdown+0x1c0>)
 800d5d8:	f001 fab0 	bl	800eb3c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f7ff feb1 	bl	800d344 <tcp_free_listen>
      break;
 800d5e2:	e00f      	b.n	800d604 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d5e4:	6879      	ldr	r1, [r7, #4]
 800d5e6:	480e      	ldr	r0, [pc, #56]	; (800d620 <tcp_close_shutdown+0x1b0>)
 800d5e8:	f001 faa8 	bl	800eb3c <tcp_pcb_remove>
 800d5ec:	4b0d      	ldr	r3, [pc, #52]	; (800d624 <tcp_close_shutdown+0x1b4>)
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f7ff fe8a 	bl	800d30c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d5f8:	e004      	b.n	800d604 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f000 f81a 	bl	800d634 <tcp_close_shutdown_fin>
 800d600:	4603      	mov	r3, r0
 800d602:	e000      	b.n	800d606 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d604:	2300      	movs	r3, #0
}
 800d606:	4618      	mov	r0, r3
 800d608:	3710      	adds	r7, #16
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bdb0      	pop	{r4, r5, r7, pc}
 800d60e:	bf00      	nop
 800d610:	08019094 	.word	0x08019094
 800d614:	08019168 	.word	0x08019168
 800d618:	080190d8 	.word	0x080190d8
 800d61c:	08019188 	.word	0x08019188
 800d620:	2000d3b4 	.word	0x2000d3b4
 800d624:	2000d3b0 	.word	0x2000d3b0
 800d628:	2000d3c8 	.word	0x2000d3c8
 800d62c:	2000d3c0 	.word	0x2000d3c0
 800d630:	2000d3bc 	.word	0x2000d3bc

0800d634 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b084      	sub	sp, #16
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d106      	bne.n	800d650 <tcp_close_shutdown_fin+0x1c>
 800d642:	4b2e      	ldr	r3, [pc, #184]	; (800d6fc <tcp_close_shutdown_fin+0xc8>)
 800d644:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d648:	492d      	ldr	r1, [pc, #180]	; (800d700 <tcp_close_shutdown_fin+0xcc>)
 800d64a:	482e      	ldr	r0, [pc, #184]	; (800d704 <tcp_close_shutdown_fin+0xd0>)
 800d64c:	f009 fafa 	bl	8016c44 <iprintf>

  switch (pcb->state) {
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	7d1b      	ldrb	r3, [r3, #20]
 800d654:	2b07      	cmp	r3, #7
 800d656:	d020      	beq.n	800d69a <tcp_close_shutdown_fin+0x66>
 800d658:	2b07      	cmp	r3, #7
 800d65a:	dc2b      	bgt.n	800d6b4 <tcp_close_shutdown_fin+0x80>
 800d65c:	2b03      	cmp	r3, #3
 800d65e:	d002      	beq.n	800d666 <tcp_close_shutdown_fin+0x32>
 800d660:	2b04      	cmp	r3, #4
 800d662:	d00d      	beq.n	800d680 <tcp_close_shutdown_fin+0x4c>
 800d664:	e026      	b.n	800d6b4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f004 fd42 	bl	80120f0 <tcp_send_fin>
 800d66c:	4603      	mov	r3, r0
 800d66e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d11f      	bne.n	800d6b8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2205      	movs	r2, #5
 800d67c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d67e:	e01b      	b.n	800d6b8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f004 fd35 	bl	80120f0 <tcp_send_fin>
 800d686:	4603      	mov	r3, r0
 800d688:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d68a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d114      	bne.n	800d6bc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2205      	movs	r2, #5
 800d696:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d698:	e010      	b.n	800d6bc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f004 fd28 	bl	80120f0 <tcp_send_fin>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d6a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d109      	bne.n	800d6c0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2209      	movs	r2, #9
 800d6b0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d6b2:	e005      	b.n	800d6c0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	e01c      	b.n	800d6f2 <tcp_close_shutdown_fin+0xbe>
      break;
 800d6b8:	bf00      	nop
 800d6ba:	e002      	b.n	800d6c2 <tcp_close_shutdown_fin+0x8e>
      break;
 800d6bc:	bf00      	nop
 800d6be:	e000      	b.n	800d6c2 <tcp_close_shutdown_fin+0x8e>
      break;
 800d6c0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d6c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d103      	bne.n	800d6d2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f004 fe4e 	bl	801236c <tcp_output>
 800d6d0:	e00d      	b.n	800d6ee <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d6d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6da:	d108      	bne.n	800d6ee <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	8b5b      	ldrh	r3, [r3, #26]
 800d6e0:	f043 0308 	orr.w	r3, r3, #8
 800d6e4:	b29a      	uxth	r2, r3
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	e001      	b.n	800d6f2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d6ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3710      	adds	r7, #16
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}
 800d6fa:	bf00      	nop
 800d6fc:	08019094 	.word	0x08019094
 800d700:	08019144 	.word	0x08019144
 800d704:	080190d8 	.word	0x080190d8

0800d708 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d109      	bne.n	800d72a <tcp_close+0x22>
 800d716:	4b0f      	ldr	r3, [pc, #60]	; (800d754 <tcp_close+0x4c>)
 800d718:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d71c:	490e      	ldr	r1, [pc, #56]	; (800d758 <tcp_close+0x50>)
 800d71e:	480f      	ldr	r0, [pc, #60]	; (800d75c <tcp_close+0x54>)
 800d720:	f009 fa90 	bl	8016c44 <iprintf>
 800d724:	f06f 030f 	mvn.w	r3, #15
 800d728:	e00f      	b.n	800d74a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	7d1b      	ldrb	r3, [r3, #20]
 800d72e:	2b01      	cmp	r3, #1
 800d730:	d006      	beq.n	800d740 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	8b5b      	ldrh	r3, [r3, #26]
 800d736:	f043 0310 	orr.w	r3, r3, #16
 800d73a:	b29a      	uxth	r2, r3
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d740:	2101      	movs	r1, #1
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f7ff fe94 	bl	800d470 <tcp_close_shutdown>
 800d748:	4603      	mov	r3, r0
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3708      	adds	r7, #8
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	08019094 	.word	0x08019094
 800d758:	080191a4 	.word	0x080191a4
 800d75c:	080190d8 	.word	0x080190d8

0800d760 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b084      	sub	sp, #16
 800d764:	af00      	add	r7, sp, #0
 800d766:	60f8      	str	r0, [r7, #12]
 800d768:	60b9      	str	r1, [r7, #8]
 800d76a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d109      	bne.n	800d786 <tcp_shutdown+0x26>
 800d772:	4b26      	ldr	r3, [pc, #152]	; (800d80c <tcp_shutdown+0xac>)
 800d774:	f240 2207 	movw	r2, #519	; 0x207
 800d778:	4925      	ldr	r1, [pc, #148]	; (800d810 <tcp_shutdown+0xb0>)
 800d77a:	4826      	ldr	r0, [pc, #152]	; (800d814 <tcp_shutdown+0xb4>)
 800d77c:	f009 fa62 	bl	8016c44 <iprintf>
 800d780:	f06f 030f 	mvn.w	r3, #15
 800d784:	e03d      	b.n	800d802 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	7d1b      	ldrb	r3, [r3, #20]
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d102      	bne.n	800d794 <tcp_shutdown+0x34>
    return ERR_CONN;
 800d78e:	f06f 030a 	mvn.w	r3, #10
 800d792:	e036      	b.n	800d802 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d01b      	beq.n	800d7d2 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	8b5b      	ldrh	r3, [r3, #26]
 800d79e:	f043 0310 	orr.w	r3, r3, #16
 800d7a2:	b29a      	uxth	r2, r3
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d005      	beq.n	800d7ba <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d7ae:	2101      	movs	r1, #1
 800d7b0:	68f8      	ldr	r0, [r7, #12]
 800d7b2:	f7ff fe5d 	bl	800d470 <tcp_close_shutdown>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	e023      	b.n	800d802 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d007      	beq.n	800d7d2 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7ff fae4 	bl	800cd94 <pbuf_free>
      pcb->refused_data = NULL;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d013      	beq.n	800d800 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	7d1b      	ldrb	r3, [r3, #20]
 800d7dc:	2b04      	cmp	r3, #4
 800d7de:	dc02      	bgt.n	800d7e6 <tcp_shutdown+0x86>
 800d7e0:	2b03      	cmp	r3, #3
 800d7e2:	da02      	bge.n	800d7ea <tcp_shutdown+0x8a>
 800d7e4:	e009      	b.n	800d7fa <tcp_shutdown+0x9a>
 800d7e6:	2b07      	cmp	r3, #7
 800d7e8:	d107      	bne.n	800d7fa <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	68f8      	ldr	r0, [r7, #12]
 800d7f2:	f7ff fe3d 	bl	800d470 <tcp_close_shutdown>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	e003      	b.n	800d802 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d7fa:	f06f 030a 	mvn.w	r3, #10
 800d7fe:	e000      	b.n	800d802 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800d800:	2300      	movs	r3, #0
}
 800d802:	4618      	mov	r0, r3
 800d804:	3710      	adds	r7, #16
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	08019094 	.word	0x08019094
 800d810:	080191bc 	.word	0x080191bc
 800d814:	080190d8 	.word	0x080190d8

0800d818 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b08e      	sub	sp, #56	; 0x38
 800d81c:	af04      	add	r7, sp, #16
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d107      	bne.n	800d838 <tcp_abandon+0x20>
 800d828:	4b52      	ldr	r3, [pc, #328]	; (800d974 <tcp_abandon+0x15c>)
 800d82a:	f240 223d 	movw	r2, #573	; 0x23d
 800d82e:	4952      	ldr	r1, [pc, #328]	; (800d978 <tcp_abandon+0x160>)
 800d830:	4852      	ldr	r0, [pc, #328]	; (800d97c <tcp_abandon+0x164>)
 800d832:	f009 fa07 	bl	8016c44 <iprintf>
 800d836:	e099      	b.n	800d96c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	7d1b      	ldrb	r3, [r3, #20]
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d106      	bne.n	800d84e <tcp_abandon+0x36>
 800d840:	4b4c      	ldr	r3, [pc, #304]	; (800d974 <tcp_abandon+0x15c>)
 800d842:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d846:	494e      	ldr	r1, [pc, #312]	; (800d980 <tcp_abandon+0x168>)
 800d848:	484c      	ldr	r0, [pc, #304]	; (800d97c <tcp_abandon+0x164>)
 800d84a:	f009 f9fb 	bl	8016c44 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	7d1b      	ldrb	r3, [r3, #20]
 800d852:	2b0a      	cmp	r3, #10
 800d854:	d107      	bne.n	800d866 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d856:	6879      	ldr	r1, [r7, #4]
 800d858:	484a      	ldr	r0, [pc, #296]	; (800d984 <tcp_abandon+0x16c>)
 800d85a:	f001 f96f 	bl	800eb3c <tcp_pcb_remove>
    tcp_free(pcb);
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f7ff fd54 	bl	800d30c <tcp_free>
 800d864:	e082      	b.n	800d96c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d866:	2300      	movs	r3, #0
 800d868:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d86a:	2300      	movs	r3, #0
 800d86c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d872:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d878:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d880:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	691b      	ldr	r3, [r3, #16]
 800d886:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	7d1b      	ldrb	r3, [r3, #20]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d126      	bne.n	800d8de <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	8adb      	ldrh	r3, [r3, #22]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d02e      	beq.n	800d8f6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d898:	4b3b      	ldr	r3, [pc, #236]	; (800d988 <tcp_abandon+0x170>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	687a      	ldr	r2, [r7, #4]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d105      	bne.n	800d8ae <tcp_abandon+0x96>
 800d8a2:	4b39      	ldr	r3, [pc, #228]	; (800d988 <tcp_abandon+0x170>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	68db      	ldr	r3, [r3, #12]
 800d8a8:	4a37      	ldr	r2, [pc, #220]	; (800d988 <tcp_abandon+0x170>)
 800d8aa:	6013      	str	r3, [r2, #0]
 800d8ac:	e013      	b.n	800d8d6 <tcp_abandon+0xbe>
 800d8ae:	4b36      	ldr	r3, [pc, #216]	; (800d988 <tcp_abandon+0x170>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	61fb      	str	r3, [r7, #28]
 800d8b4:	e00c      	b.n	800d8d0 <tcp_abandon+0xb8>
 800d8b6:	69fb      	ldr	r3, [r7, #28]
 800d8b8:	68db      	ldr	r3, [r3, #12]
 800d8ba:	687a      	ldr	r2, [r7, #4]
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d104      	bne.n	800d8ca <tcp_abandon+0xb2>
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	68da      	ldr	r2, [r3, #12]
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	60da      	str	r2, [r3, #12]
 800d8c8:	e005      	b.n	800d8d6 <tcp_abandon+0xbe>
 800d8ca:	69fb      	ldr	r3, [r7, #28]
 800d8cc:	68db      	ldr	r3, [r3, #12]
 800d8ce:	61fb      	str	r3, [r7, #28]
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d1ef      	bne.n	800d8b6 <tcp_abandon+0x9e>
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2200      	movs	r2, #0
 800d8da:	60da      	str	r2, [r3, #12]
 800d8dc:	e00b      	b.n	800d8f6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	8adb      	ldrh	r3, [r3, #22]
 800d8e6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d8e8:	6879      	ldr	r1, [r7, #4]
 800d8ea:	4828      	ldr	r0, [pc, #160]	; (800d98c <tcp_abandon+0x174>)
 800d8ec:	f001 f926 	bl	800eb3c <tcp_pcb_remove>
 800d8f0:	4b27      	ldr	r3, [pc, #156]	; (800d990 <tcp_abandon+0x178>)
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d004      	beq.n	800d908 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d902:	4618      	mov	r0, r3
 800d904:	f000 fdfa 	bl	800e4fc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d004      	beq.n	800d91a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d914:	4618      	mov	r0, r3
 800d916:	f000 fdf1 	bl	800e4fc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d004      	beq.n	800d92c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d926:	4618      	mov	r0, r3
 800d928:	f000 fde8 	bl	800e4fc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d00e      	beq.n	800d950 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d932:	6879      	ldr	r1, [r7, #4]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	3304      	adds	r3, #4
 800d938:	687a      	ldr	r2, [r7, #4]
 800d93a:	8b12      	ldrh	r2, [r2, #24]
 800d93c:	9202      	str	r2, [sp, #8]
 800d93e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d940:	9201      	str	r2, [sp, #4]
 800d942:	9300      	str	r3, [sp, #0]
 800d944:	460b      	mov	r3, r1
 800d946:	697a      	ldr	r2, [r7, #20]
 800d948:	69b9      	ldr	r1, [r7, #24]
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f005 fac2 	bl	8012ed4 <tcp_rst>
    }
    last_state = pcb->state;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	7d1b      	ldrb	r3, [r3, #20]
 800d954:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f7ff fcd8 	bl	800d30c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d004      	beq.n	800d96c <tcp_abandon+0x154>
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	f06f 010c 	mvn.w	r1, #12
 800d968:	68f8      	ldr	r0, [r7, #12]
 800d96a:	4798      	blx	r3
  }
}
 800d96c:	3728      	adds	r7, #40	; 0x28
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
 800d972:	bf00      	nop
 800d974:	08019094 	.word	0x08019094
 800d978:	080191d8 	.word	0x080191d8
 800d97c:	080190d8 	.word	0x080190d8
 800d980:	080191f4 	.word	0x080191f4
 800d984:	2000d3c4 	.word	0x2000d3c4
 800d988:	2000d3c0 	.word	0x2000d3c0
 800d98c:	2000d3b4 	.word	0x2000d3b4
 800d990:	2000d3b0 	.word	0x2000d3b0

0800d994 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d99c:	2101      	movs	r1, #1
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f7ff ff3a 	bl	800d818 <tcp_abandon>
}
 800d9a4:	bf00      	nop
 800d9a6:	3708      	adds	r7, #8
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b088      	sub	sp, #32
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	60f8      	str	r0, [r7, #12]
 800d9b4:	60b9      	str	r1, [r7, #8]
 800d9b6:	4613      	mov	r3, r2
 800d9b8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d9ba:	2304      	movs	r3, #4
 800d9bc:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d101      	bne.n	800d9c8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d9c4:	4b3e      	ldr	r3, [pc, #248]	; (800dac0 <tcp_bind+0x114>)
 800d9c6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d109      	bne.n	800d9e2 <tcp_bind+0x36>
 800d9ce:	4b3d      	ldr	r3, [pc, #244]	; (800dac4 <tcp_bind+0x118>)
 800d9d0:	f240 22a9 	movw	r2, #681	; 0x2a9
 800d9d4:	493c      	ldr	r1, [pc, #240]	; (800dac8 <tcp_bind+0x11c>)
 800d9d6:	483d      	ldr	r0, [pc, #244]	; (800dacc <tcp_bind+0x120>)
 800d9d8:	f009 f934 	bl	8016c44 <iprintf>
 800d9dc:	f06f 030f 	mvn.w	r3, #15
 800d9e0:	e06a      	b.n	800dab8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	7d1b      	ldrb	r3, [r3, #20]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d009      	beq.n	800d9fe <tcp_bind+0x52>
 800d9ea:	4b36      	ldr	r3, [pc, #216]	; (800dac4 <tcp_bind+0x118>)
 800d9ec:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d9f0:	4937      	ldr	r1, [pc, #220]	; (800dad0 <tcp_bind+0x124>)
 800d9f2:	4836      	ldr	r0, [pc, #216]	; (800dacc <tcp_bind+0x120>)
 800d9f4:	f009 f926 	bl	8016c44 <iprintf>
 800d9f8:	f06f 0305 	mvn.w	r3, #5
 800d9fc:	e05c      	b.n	800dab8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800d9fe:	88fb      	ldrh	r3, [r7, #6]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d109      	bne.n	800da18 <tcp_bind+0x6c>
    port = tcp_new_port();
 800da04:	f000 f914 	bl	800dc30 <tcp_new_port>
 800da08:	4603      	mov	r3, r0
 800da0a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800da0c:	88fb      	ldrh	r3, [r7, #6]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d135      	bne.n	800da7e <tcp_bind+0xd2>
      return ERR_BUF;
 800da12:	f06f 0301 	mvn.w	r3, #1
 800da16:	e04f      	b.n	800dab8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800da18:	2300      	movs	r3, #0
 800da1a:	61fb      	str	r3, [r7, #28]
 800da1c:	e02b      	b.n	800da76 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800da1e:	4a2d      	ldr	r2, [pc, #180]	; (800dad4 <tcp_bind+0x128>)
 800da20:	69fb      	ldr	r3, [r7, #28]
 800da22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	61bb      	str	r3, [r7, #24]
 800da2a:	e01e      	b.n	800da6a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800da2c:	69bb      	ldr	r3, [r7, #24]
 800da2e:	8adb      	ldrh	r3, [r3, #22]
 800da30:	88fa      	ldrh	r2, [r7, #6]
 800da32:	429a      	cmp	r2, r3
 800da34:	d116      	bne.n	800da64 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800da36:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d010      	beq.n	800da5e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800da3c:	69bb      	ldr	r3, [r7, #24]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d00c      	beq.n	800da5e <tcp_bind+0xb2>
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d009      	beq.n	800da5e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d005      	beq.n	800da5e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800da52:	69bb      	ldr	r3, [r7, #24]
 800da54:	681a      	ldr	r2, [r3, #0]
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d102      	bne.n	800da64 <tcp_bind+0xb8>
              return ERR_USE;
 800da5e:	f06f 0307 	mvn.w	r3, #7
 800da62:	e029      	b.n	800dab8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800da64:	69bb      	ldr	r3, [r7, #24]
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	61bb      	str	r3, [r7, #24]
 800da6a:	69bb      	ldr	r3, [r7, #24]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d1dd      	bne.n	800da2c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800da70:	69fb      	ldr	r3, [r7, #28]
 800da72:	3301      	adds	r3, #1
 800da74:	61fb      	str	r3, [r7, #28]
 800da76:	69fa      	ldr	r2, [r7, #28]
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	429a      	cmp	r2, r3
 800da7c:	dbcf      	blt.n	800da1e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d00c      	beq.n	800da9e <tcp_bind+0xf2>
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d008      	beq.n	800da9e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d002      	beq.n	800da98 <tcp_bind+0xec>
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	e000      	b.n	800da9a <tcp_bind+0xee>
 800da98:	2300      	movs	r3, #0
 800da9a:	68fa      	ldr	r2, [r7, #12]
 800da9c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	88fa      	ldrh	r2, [r7, #6]
 800daa2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800daa4:	4b0c      	ldr	r3, [pc, #48]	; (800dad8 <tcp_bind+0x12c>)
 800daa6:	681a      	ldr	r2, [r3, #0]
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	60da      	str	r2, [r3, #12]
 800daac:	4a0a      	ldr	r2, [pc, #40]	; (800dad8 <tcp_bind+0x12c>)
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	6013      	str	r3, [r2, #0]
 800dab2:	f005 fbd1 	bl	8013258 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800dab6:	2300      	movs	r3, #0
}
 800dab8:	4618      	mov	r0, r3
 800daba:	3720      	adds	r7, #32
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}
 800dac0:	0801b0d4 	.word	0x0801b0d4
 800dac4:	08019094 	.word	0x08019094
 800dac8:	08019228 	.word	0x08019228
 800dacc:	080190d8 	.word	0x080190d8
 800dad0:	08019240 	.word	0x08019240
 800dad4:	0801b0ac 	.word	0x0801b0ac
 800dad8:	2000d3c0 	.word	0x2000d3c0

0800dadc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b084      	sub	sp, #16
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d106      	bne.n	800daf8 <tcp_update_rcv_ann_wnd+0x1c>
 800daea:	4b25      	ldr	r3, [pc, #148]	; (800db80 <tcp_update_rcv_ann_wnd+0xa4>)
 800daec:	f240 32a6 	movw	r2, #934	; 0x3a6
 800daf0:	4924      	ldr	r1, [pc, #144]	; (800db84 <tcp_update_rcv_ann_wnd+0xa8>)
 800daf2:	4825      	ldr	r0, [pc, #148]	; (800db88 <tcp_update_rcv_ann_wnd+0xac>)
 800daf4:	f009 f8a6 	bl	8016c44 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dafc:	687a      	ldr	r2, [r7, #4]
 800dafe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800db00:	4413      	add	r3, r2
 800db02:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800db0c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800db10:	bf28      	it	cs
 800db12:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800db16:	b292      	uxth	r2, r2
 800db18:	4413      	add	r3, r2
 800db1a:	68fa      	ldr	r2, [r7, #12]
 800db1c:	1ad3      	subs	r3, r2, r3
 800db1e:	2b00      	cmp	r3, #0
 800db20:	db08      	blt.n	800db34 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db2e:	68fa      	ldr	r2, [r7, #12]
 800db30:	1ad3      	subs	r3, r2, r3
 800db32:	e020      	b.n	800db76 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db3c:	1ad3      	subs	r3, r2, r3
 800db3e:	2b00      	cmp	r3, #0
 800db40:	dd03      	ble.n	800db4a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2200      	movs	r2, #0
 800db46:	855a      	strh	r2, [r3, #42]	; 0x2a
 800db48:	e014      	b.n	800db74 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db52:	1ad3      	subs	r3, r2, r3
 800db54:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db5c:	d306      	bcc.n	800db6c <tcp_update_rcv_ann_wnd+0x90>
 800db5e:	4b08      	ldr	r3, [pc, #32]	; (800db80 <tcp_update_rcv_ann_wnd+0xa4>)
 800db60:	f240 32b6 	movw	r2, #950	; 0x3b6
 800db64:	4909      	ldr	r1, [pc, #36]	; (800db8c <tcp_update_rcv_ann_wnd+0xb0>)
 800db66:	4808      	ldr	r0, [pc, #32]	; (800db88 <tcp_update_rcv_ann_wnd+0xac>)
 800db68:	f009 f86c 	bl	8016c44 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	b29a      	uxth	r2, r3
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800db74:	2300      	movs	r3, #0
  }
}
 800db76:	4618      	mov	r0, r3
 800db78:	3710      	adds	r7, #16
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	bf00      	nop
 800db80:	08019094 	.word	0x08019094
 800db84:	080192f0 	.word	0x080192f0
 800db88:	080190d8 	.word	0x080190d8
 800db8c:	08019314 	.word	0x08019314

0800db90 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	460b      	mov	r3, r1
 800db9a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d107      	bne.n	800dbb2 <tcp_recved+0x22>
 800dba2:	4b1f      	ldr	r3, [pc, #124]	; (800dc20 <tcp_recved+0x90>)
 800dba4:	f240 32cf 	movw	r2, #975	; 0x3cf
 800dba8:	491e      	ldr	r1, [pc, #120]	; (800dc24 <tcp_recved+0x94>)
 800dbaa:	481f      	ldr	r0, [pc, #124]	; (800dc28 <tcp_recved+0x98>)
 800dbac:	f009 f84a 	bl	8016c44 <iprintf>
 800dbb0:	e032      	b.n	800dc18 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	7d1b      	ldrb	r3, [r3, #20]
 800dbb6:	2b01      	cmp	r3, #1
 800dbb8:	d106      	bne.n	800dbc8 <tcp_recved+0x38>
 800dbba:	4b19      	ldr	r3, [pc, #100]	; (800dc20 <tcp_recved+0x90>)
 800dbbc:	f240 32d2 	movw	r2, #978	; 0x3d2
 800dbc0:	491a      	ldr	r1, [pc, #104]	; (800dc2c <tcp_recved+0x9c>)
 800dbc2:	4819      	ldr	r0, [pc, #100]	; (800dc28 <tcp_recved+0x98>)
 800dbc4:	f009 f83e 	bl	8016c44 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dbcc:	887b      	ldrh	r3, [r7, #2]
 800dbce:	4413      	add	r3, r2
 800dbd0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800dbd2:	89fb      	ldrh	r3, [r7, #14]
 800dbd4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dbd8:	d804      	bhi.n	800dbe4 <tcp_recved+0x54>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbde:	89fa      	ldrh	r2, [r7, #14]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d204      	bcs.n	800dbee <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dbea:	851a      	strh	r2, [r3, #40]	; 0x28
 800dbec:	e002      	b.n	800dbf4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	89fa      	ldrh	r2, [r7, #14]
 800dbf2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f7ff ff71 	bl	800dadc <tcp_update_rcv_ann_wnd>
 800dbfa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800dc02:	d309      	bcc.n	800dc18 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	8b5b      	ldrh	r3, [r3, #26]
 800dc08:	f043 0302 	orr.w	r3, r3, #2
 800dc0c:	b29a      	uxth	r2, r3
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f004 fbaa 	bl	801236c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800dc18:	3710      	adds	r7, #16
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
 800dc1e:	bf00      	nop
 800dc20:	08019094 	.word	0x08019094
 800dc24:	08019330 	.word	0x08019330
 800dc28:	080190d8 	.word	0x080190d8
 800dc2c:	08019348 	.word	0x08019348

0800dc30 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800dc30:	b480      	push	{r7}
 800dc32:	b083      	sub	sp, #12
 800dc34:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800dc36:	2300      	movs	r3, #0
 800dc38:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800dc3a:	4b1e      	ldr	r3, [pc, #120]	; (800dcb4 <tcp_new_port+0x84>)
 800dc3c:	881b      	ldrh	r3, [r3, #0]
 800dc3e:	3301      	adds	r3, #1
 800dc40:	b29a      	uxth	r2, r3
 800dc42:	4b1c      	ldr	r3, [pc, #112]	; (800dcb4 <tcp_new_port+0x84>)
 800dc44:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800dc46:	4b1b      	ldr	r3, [pc, #108]	; (800dcb4 <tcp_new_port+0x84>)
 800dc48:	881b      	ldrh	r3, [r3, #0]
 800dc4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d103      	bne.n	800dc5a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800dc52:	4b18      	ldr	r3, [pc, #96]	; (800dcb4 <tcp_new_port+0x84>)
 800dc54:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800dc58:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	71fb      	strb	r3, [r7, #7]
 800dc5e:	e01e      	b.n	800dc9e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800dc60:	79fb      	ldrb	r3, [r7, #7]
 800dc62:	4a15      	ldr	r2, [pc, #84]	; (800dcb8 <tcp_new_port+0x88>)
 800dc64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	603b      	str	r3, [r7, #0]
 800dc6c:	e011      	b.n	800dc92 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	8ada      	ldrh	r2, [r3, #22]
 800dc72:	4b10      	ldr	r3, [pc, #64]	; (800dcb4 <tcp_new_port+0x84>)
 800dc74:	881b      	ldrh	r3, [r3, #0]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d108      	bne.n	800dc8c <tcp_new_port+0x5c>
        n++;
 800dc7a:	88bb      	ldrh	r3, [r7, #4]
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800dc80:	88bb      	ldrh	r3, [r7, #4]
 800dc82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dc86:	d3d8      	bcc.n	800dc3a <tcp_new_port+0xa>
          return 0;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	e00d      	b.n	800dca8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	68db      	ldr	r3, [r3, #12]
 800dc90:	603b      	str	r3, [r7, #0]
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d1ea      	bne.n	800dc6e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800dc98:	79fb      	ldrb	r3, [r7, #7]
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	71fb      	strb	r3, [r7, #7]
 800dc9e:	79fb      	ldrb	r3, [r7, #7]
 800dca0:	2b03      	cmp	r3, #3
 800dca2:	d9dd      	bls.n	800dc60 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800dca4:	4b03      	ldr	r3, [pc, #12]	; (800dcb4 <tcp_new_port+0x84>)
 800dca6:	881b      	ldrh	r3, [r3, #0]
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	370c      	adds	r7, #12
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr
 800dcb4:	20000014 	.word	0x20000014
 800dcb8:	0801b0ac 	.word	0x0801b0ac

0800dcbc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800dcbc:	b5b0      	push	{r4, r5, r7, lr}
 800dcbe:	b090      	sub	sp, #64	; 0x40
 800dcc0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800dcc8:	4b94      	ldr	r3, [pc, #592]	; (800df1c <tcp_slowtmr+0x260>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	3301      	adds	r3, #1
 800dcce:	4a93      	ldr	r2, [pc, #588]	; (800df1c <tcp_slowtmr+0x260>)
 800dcd0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800dcd2:	4b93      	ldr	r3, [pc, #588]	; (800df20 <tcp_slowtmr+0x264>)
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	b2da      	uxtb	r2, r3
 800dcda:	4b91      	ldr	r3, [pc, #580]	; (800df20 <tcp_slowtmr+0x264>)
 800dcdc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800dcde:	2300      	movs	r3, #0
 800dce0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800dce2:	4b90      	ldr	r3, [pc, #576]	; (800df24 <tcp_slowtmr+0x268>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800dce8:	e29f      	b.n	800e22a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800dcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcec:	7d1b      	ldrb	r3, [r3, #20]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d106      	bne.n	800dd00 <tcp_slowtmr+0x44>
 800dcf2:	4b8d      	ldr	r3, [pc, #564]	; (800df28 <tcp_slowtmr+0x26c>)
 800dcf4:	f240 42be 	movw	r2, #1214	; 0x4be
 800dcf8:	498c      	ldr	r1, [pc, #560]	; (800df2c <tcp_slowtmr+0x270>)
 800dcfa:	488d      	ldr	r0, [pc, #564]	; (800df30 <tcp_slowtmr+0x274>)
 800dcfc:	f008 ffa2 	bl	8016c44 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800dd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd02:	7d1b      	ldrb	r3, [r3, #20]
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	d106      	bne.n	800dd16 <tcp_slowtmr+0x5a>
 800dd08:	4b87      	ldr	r3, [pc, #540]	; (800df28 <tcp_slowtmr+0x26c>)
 800dd0a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800dd0e:	4989      	ldr	r1, [pc, #548]	; (800df34 <tcp_slowtmr+0x278>)
 800dd10:	4887      	ldr	r0, [pc, #540]	; (800df30 <tcp_slowtmr+0x274>)
 800dd12:	f008 ff97 	bl	8016c44 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800dd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd18:	7d1b      	ldrb	r3, [r3, #20]
 800dd1a:	2b0a      	cmp	r3, #10
 800dd1c:	d106      	bne.n	800dd2c <tcp_slowtmr+0x70>
 800dd1e:	4b82      	ldr	r3, [pc, #520]	; (800df28 <tcp_slowtmr+0x26c>)
 800dd20:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800dd24:	4984      	ldr	r1, [pc, #528]	; (800df38 <tcp_slowtmr+0x27c>)
 800dd26:	4882      	ldr	r0, [pc, #520]	; (800df30 <tcp_slowtmr+0x274>)
 800dd28:	f008 ff8c 	bl	8016c44 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800dd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd2e:	7f9a      	ldrb	r2, [r3, #30]
 800dd30:	4b7b      	ldr	r3, [pc, #492]	; (800df20 <tcp_slowtmr+0x264>)
 800dd32:	781b      	ldrb	r3, [r3, #0]
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d105      	bne.n	800dd44 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800dd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd3a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd3e:	68db      	ldr	r3, [r3, #12]
 800dd40:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800dd42:	e272      	b.n	800e22a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800dd44:	4b76      	ldr	r3, [pc, #472]	; (800df20 <tcp_slowtmr+0x264>)
 800dd46:	781a      	ldrb	r2, [r3, #0]
 800dd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd4a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800dd52:	2300      	movs	r3, #0
 800dd54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800dd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5a:	7d1b      	ldrb	r3, [r3, #20]
 800dd5c:	2b02      	cmp	r3, #2
 800dd5e:	d10a      	bne.n	800dd76 <tcp_slowtmr+0xba>
 800dd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dd66:	2b05      	cmp	r3, #5
 800dd68:	d905      	bls.n	800dd76 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800dd6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd6e:	3301      	adds	r3, #1
 800dd70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dd74:	e11e      	b.n	800dfb4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800dd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dd7c:	2b0b      	cmp	r3, #11
 800dd7e:	d905      	bls.n	800dd8c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800dd80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd84:	3301      	adds	r3, #1
 800dd86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dd8a:	e113      	b.n	800dfb4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800dd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd8e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d075      	beq.n	800de82 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800dd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d006      	beq.n	800ddac <tcp_slowtmr+0xf0>
 800dd9e:	4b62      	ldr	r3, [pc, #392]	; (800df28 <tcp_slowtmr+0x26c>)
 800dda0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800dda4:	4965      	ldr	r1, [pc, #404]	; (800df3c <tcp_slowtmr+0x280>)
 800dda6:	4862      	ldr	r0, [pc, #392]	; (800df30 <tcp_slowtmr+0x274>)
 800dda8:	f008 ff4c 	bl	8016c44 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ddac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d106      	bne.n	800ddc2 <tcp_slowtmr+0x106>
 800ddb4:	4b5c      	ldr	r3, [pc, #368]	; (800df28 <tcp_slowtmr+0x26c>)
 800ddb6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ddba:	4961      	ldr	r1, [pc, #388]	; (800df40 <tcp_slowtmr+0x284>)
 800ddbc:	485c      	ldr	r0, [pc, #368]	; (800df30 <tcp_slowtmr+0x274>)
 800ddbe:	f008 ff41 	bl	8016c44 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ddc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ddc8:	2b0b      	cmp	r3, #11
 800ddca:	d905      	bls.n	800ddd8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ddcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ddd6:	e0ed      	b.n	800dfb4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ddd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddda:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ddde:	3b01      	subs	r3, #1
 800dde0:	4a58      	ldr	r2, [pc, #352]	; (800df44 <tcp_slowtmr+0x288>)
 800dde2:	5cd3      	ldrb	r3, [r2, r3]
 800dde4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800dde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ddec:	7c7a      	ldrb	r2, [r7, #17]
 800ddee:	429a      	cmp	r2, r3
 800ddf0:	d907      	bls.n	800de02 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ddf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ddf8:	3301      	adds	r3, #1
 800ddfa:	b2da      	uxtb	r2, r3
 800ddfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddfe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800de02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de04:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800de08:	7c7a      	ldrb	r2, [r7, #17]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	f200 80d2 	bhi.w	800dfb4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800de10:	2301      	movs	r3, #1
 800de12:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800de14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d108      	bne.n	800de30 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800de1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de20:	f005 f94c 	bl	80130bc <tcp_zero_window_probe>
 800de24:	4603      	mov	r3, r0
 800de26:	2b00      	cmp	r3, #0
 800de28:	d014      	beq.n	800de54 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800de2a:	2300      	movs	r3, #0
 800de2c:	623b      	str	r3, [r7, #32]
 800de2e:	e011      	b.n	800de54 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800de30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800de36:	4619      	mov	r1, r3
 800de38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de3a:	f004 f811 	bl	8011e60 <tcp_split_unsent_seg>
 800de3e:	4603      	mov	r3, r0
 800de40:	2b00      	cmp	r3, #0
 800de42:	d107      	bne.n	800de54 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800de44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de46:	f004 fa91 	bl	801236c <tcp_output>
 800de4a:	4603      	mov	r3, r0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d101      	bne.n	800de54 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800de50:	2300      	movs	r3, #0
 800de52:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800de54:	6a3b      	ldr	r3, [r7, #32]
 800de56:	2b00      	cmp	r3, #0
 800de58:	f000 80ac 	beq.w	800dfb4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800de5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de5e:	2200      	movs	r2, #0
 800de60:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800de64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de66:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800de6a:	2b06      	cmp	r3, #6
 800de6c:	f200 80a2 	bhi.w	800dfb4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800de70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de72:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800de76:	3301      	adds	r3, #1
 800de78:	b2da      	uxtb	r2, r3
 800de7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de7c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800de80:	e098      	b.n	800dfb4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800de82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de84:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800de88:	2b00      	cmp	r3, #0
 800de8a:	db0f      	blt.n	800deac <tcp_slowtmr+0x1f0>
 800de8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800de92:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800de96:	4293      	cmp	r3, r2
 800de98:	d008      	beq.n	800deac <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800de9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de9c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	3301      	adds	r3, #1
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	b21a      	sxth	r2, r3
 800dea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deaa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800deac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deae:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800deb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800deb8:	429a      	cmp	r2, r3
 800deba:	db7b      	blt.n	800dfb4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800debc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800debe:	f004 fd47 	bl	8012950 <tcp_rexmit_rto_prepare>
 800dec2:	4603      	mov	r3, r0
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d007      	beq.n	800ded8 <tcp_slowtmr+0x21c>
 800dec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800decc:	2b00      	cmp	r3, #0
 800dece:	d171      	bne.n	800dfb4 <tcp_slowtmr+0x2f8>
 800ded0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d06d      	beq.n	800dfb4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ded8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deda:	7d1b      	ldrb	r3, [r3, #20]
 800dedc:	2b02      	cmp	r3, #2
 800dede:	d03a      	beq.n	800df56 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800dee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dee6:	2b0c      	cmp	r3, #12
 800dee8:	bf28      	it	cs
 800deea:	230c      	movcs	r3, #12
 800deec:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800deee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800def4:	10db      	asrs	r3, r3, #3
 800def6:	b21b      	sxth	r3, r3
 800def8:	461a      	mov	r2, r3
 800defa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800df00:	4413      	add	r3, r2
 800df02:	7efa      	ldrb	r2, [r7, #27]
 800df04:	4910      	ldr	r1, [pc, #64]	; (800df48 <tcp_slowtmr+0x28c>)
 800df06:	5c8a      	ldrb	r2, [r1, r2]
 800df08:	4093      	lsls	r3, r2
 800df0a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800df12:	4293      	cmp	r3, r2
 800df14:	dc1a      	bgt.n	800df4c <tcp_slowtmr+0x290>
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	b21a      	sxth	r2, r3
 800df1a:	e019      	b.n	800df50 <tcp_slowtmr+0x294>
 800df1c:	2000d3b8 	.word	0x2000d3b8
 800df20:	20006846 	.word	0x20006846
 800df24:	2000d3b4 	.word	0x2000d3b4
 800df28:	08019094 	.word	0x08019094
 800df2c:	080193d8 	.word	0x080193d8
 800df30:	080190d8 	.word	0x080190d8
 800df34:	08019404 	.word	0x08019404
 800df38:	08019430 	.word	0x08019430
 800df3c:	08019460 	.word	0x08019460
 800df40:	08019494 	.word	0x08019494
 800df44:	0801b0a4 	.word	0x0801b0a4
 800df48:	0801b094 	.word	0x0801b094
 800df4c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800df50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800df56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df58:	2200      	movs	r2, #0
 800df5a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800df5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800df62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800df68:	4293      	cmp	r3, r2
 800df6a:	bf28      	it	cs
 800df6c:	4613      	movcs	r3, r2
 800df6e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800df70:	8a7b      	ldrh	r3, [r7, #18]
 800df72:	085b      	lsrs	r3, r3, #1
 800df74:	b29a      	uxth	r2, r3
 800df76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df78:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800df7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800df82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df86:	005b      	lsls	r3, r3, #1
 800df88:	b29b      	uxth	r3, r3
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d206      	bcs.n	800df9c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800df8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df92:	005b      	lsls	r3, r3, #1
 800df94:	b29a      	uxth	r2, r3
 800df96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df98:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800df9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df9e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800dfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800dfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800dfae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfb0:	f004 fd3e 	bl	8012a30 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800dfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb6:	7d1b      	ldrb	r3, [r3, #20]
 800dfb8:	2b06      	cmp	r3, #6
 800dfba:	d111      	bne.n	800dfe0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800dfbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfbe:	8b5b      	ldrh	r3, [r3, #26]
 800dfc0:	f003 0310 	and.w	r3, r3, #16
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d00b      	beq.n	800dfe0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dfc8:	4b9d      	ldr	r3, [pc, #628]	; (800e240 <tcp_slowtmr+0x584>)
 800dfca:	681a      	ldr	r2, [r3, #0]
 800dfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfce:	6a1b      	ldr	r3, [r3, #32]
 800dfd0:	1ad3      	subs	r3, r2, r3
 800dfd2:	2b28      	cmp	r3, #40	; 0x28
 800dfd4:	d904      	bls.n	800dfe0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800dfd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfda:	3301      	adds	r3, #1
 800dfdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe2:	7a5b      	ldrb	r3, [r3, #9]
 800dfe4:	f003 0308 	and.w	r3, r3, #8
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d04c      	beq.n	800e086 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800dfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfee:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dff0:	2b04      	cmp	r3, #4
 800dff2:	d003      	beq.n	800dffc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800dff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800dff8:	2b07      	cmp	r3, #7
 800dffa:	d144      	bne.n	800e086 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dffc:	4b90      	ldr	r3, [pc, #576]	; (800e240 <tcp_slowtmr+0x584>)
 800dffe:	681a      	ldr	r2, [r3, #0]
 800e000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e002:	6a1b      	ldr	r3, [r3, #32]
 800e004:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e00c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e010:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e014:	498b      	ldr	r1, [pc, #556]	; (800e244 <tcp_slowtmr+0x588>)
 800e016:	fba1 1303 	umull	r1, r3, r1, r3
 800e01a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d90a      	bls.n	800e036 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e024:	3301      	adds	r3, #1
 800e026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e02a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e02e:	3301      	adds	r3, #1
 800e030:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e034:	e027      	b.n	800e086 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e036:	4b82      	ldr	r3, [pc, #520]	; (800e240 <tcp_slowtmr+0x584>)
 800e038:	681a      	ldr	r2, [r3, #0]
 800e03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e03c:	6a1b      	ldr	r3, [r3, #32]
 800e03e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e042:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e048:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e04c:	4618      	mov	r0, r3
 800e04e:	4b7e      	ldr	r3, [pc, #504]	; (800e248 <tcp_slowtmr+0x58c>)
 800e050:	fb03 f300 	mul.w	r3, r3, r0
 800e054:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e056:	497b      	ldr	r1, [pc, #492]	; (800e244 <tcp_slowtmr+0x588>)
 800e058:	fba1 1303 	umull	r1, r3, r1, r3
 800e05c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e05e:	429a      	cmp	r2, r3
 800e060:	d911      	bls.n	800e086 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e062:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e064:	f004 ffea 	bl	801303c <tcp_keepalive>
 800e068:	4603      	mov	r3, r0
 800e06a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e06e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e072:	2b00      	cmp	r3, #0
 800e074:	d107      	bne.n	800e086 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e078:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e07c:	3301      	adds	r3, #1
 800e07e:	b2da      	uxtb	r2, r3
 800e080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e082:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d011      	beq.n	800e0b2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e08e:	4b6c      	ldr	r3, [pc, #432]	; (800e240 <tcp_slowtmr+0x584>)
 800e090:	681a      	ldr	r2, [r3, #0]
 800e092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e094:	6a1b      	ldr	r3, [r3, #32]
 800e096:	1ad2      	subs	r2, r2, r3
 800e098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e09a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e09e:	4619      	mov	r1, r3
 800e0a0:	460b      	mov	r3, r1
 800e0a2:	005b      	lsls	r3, r3, #1
 800e0a4:	440b      	add	r3, r1
 800e0a6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d302      	bcc.n	800e0b2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e0ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e0ae:	f000 fea9 	bl	800ee04 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b4:	7d1b      	ldrb	r3, [r3, #20]
 800e0b6:	2b03      	cmp	r3, #3
 800e0b8:	d10b      	bne.n	800e0d2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e0ba:	4b61      	ldr	r3, [pc, #388]	; (800e240 <tcp_slowtmr+0x584>)
 800e0bc:	681a      	ldr	r2, [r3, #0]
 800e0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c0:	6a1b      	ldr	r3, [r3, #32]
 800e0c2:	1ad3      	subs	r3, r2, r3
 800e0c4:	2b28      	cmp	r3, #40	; 0x28
 800e0c6:	d904      	bls.n	800e0d2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e0c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0cc:	3301      	adds	r3, #1
 800e0ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d4:	7d1b      	ldrb	r3, [r3, #20]
 800e0d6:	2b09      	cmp	r3, #9
 800e0d8:	d10b      	bne.n	800e0f2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e0da:	4b59      	ldr	r3, [pc, #356]	; (800e240 <tcp_slowtmr+0x584>)
 800e0dc:	681a      	ldr	r2, [r3, #0]
 800e0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e0:	6a1b      	ldr	r3, [r3, #32]
 800e0e2:	1ad3      	subs	r3, r2, r3
 800e0e4:	2bf0      	cmp	r3, #240	; 0xf0
 800e0e6:	d904      	bls.n	800e0f2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e0e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e0f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d060      	beq.n	800e1bc <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e100:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e102:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e104:	f000 fcca 	bl	800ea9c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d010      	beq.n	800e130 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e10e:	4b4f      	ldr	r3, [pc, #316]	; (800e24c <tcp_slowtmr+0x590>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e114:	429a      	cmp	r2, r3
 800e116:	d106      	bne.n	800e126 <tcp_slowtmr+0x46a>
 800e118:	4b4d      	ldr	r3, [pc, #308]	; (800e250 <tcp_slowtmr+0x594>)
 800e11a:	f240 526d 	movw	r2, #1389	; 0x56d
 800e11e:	494d      	ldr	r1, [pc, #308]	; (800e254 <tcp_slowtmr+0x598>)
 800e120:	484d      	ldr	r0, [pc, #308]	; (800e258 <tcp_slowtmr+0x59c>)
 800e122:	f008 fd8f 	bl	8016c44 <iprintf>
        prev->next = pcb->next;
 800e126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e128:	68da      	ldr	r2, [r3, #12]
 800e12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12c:	60da      	str	r2, [r3, #12]
 800e12e:	e00f      	b.n	800e150 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e130:	4b46      	ldr	r3, [pc, #280]	; (800e24c <tcp_slowtmr+0x590>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e136:	429a      	cmp	r2, r3
 800e138:	d006      	beq.n	800e148 <tcp_slowtmr+0x48c>
 800e13a:	4b45      	ldr	r3, [pc, #276]	; (800e250 <tcp_slowtmr+0x594>)
 800e13c:	f240 5271 	movw	r2, #1393	; 0x571
 800e140:	4946      	ldr	r1, [pc, #280]	; (800e25c <tcp_slowtmr+0x5a0>)
 800e142:	4845      	ldr	r0, [pc, #276]	; (800e258 <tcp_slowtmr+0x59c>)
 800e144:	f008 fd7e 	bl	8016c44 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e14a:	68db      	ldr	r3, [r3, #12]
 800e14c:	4a3f      	ldr	r2, [pc, #252]	; (800e24c <tcp_slowtmr+0x590>)
 800e14e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e150:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e154:	2b00      	cmp	r3, #0
 800e156:	d013      	beq.n	800e180 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e160:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e164:	3304      	adds	r3, #4
 800e166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e168:	8ad2      	ldrh	r2, [r2, #22]
 800e16a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e16c:	8b09      	ldrh	r1, [r1, #24]
 800e16e:	9102      	str	r1, [sp, #8]
 800e170:	9201      	str	r2, [sp, #4]
 800e172:	9300      	str	r3, [sp, #0]
 800e174:	462b      	mov	r3, r5
 800e176:	4622      	mov	r2, r4
 800e178:	4601      	mov	r1, r0
 800e17a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e17c:	f004 feaa 	bl	8012ed4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e182:	691b      	ldr	r3, [r3, #16]
 800e184:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e188:	7d1b      	ldrb	r3, [r3, #20]
 800e18a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e192:	68db      	ldr	r3, [r3, #12]
 800e194:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e196:	6838      	ldr	r0, [r7, #0]
 800e198:	f7ff f8b8 	bl	800d30c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e19c:	4b30      	ldr	r3, [pc, #192]	; (800e260 <tcp_slowtmr+0x5a4>)
 800e19e:	2200      	movs	r2, #0
 800e1a0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d004      	beq.n	800e1b2 <tcp_slowtmr+0x4f6>
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	f06f 010c 	mvn.w	r1, #12
 800e1ae:	68b8      	ldr	r0, [r7, #8]
 800e1b0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e1b2:	4b2b      	ldr	r3, [pc, #172]	; (800e260 <tcp_slowtmr+0x5a4>)
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d037      	beq.n	800e22a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e1ba:	e590      	b.n	800dcde <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c2:	68db      	ldr	r3, [r3, #12]
 800e1c4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c8:	7f1b      	ldrb	r3, [r3, #28]
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	b2da      	uxtb	r2, r3
 800e1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d4:	7f1a      	ldrb	r2, [r3, #28]
 800e1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d8:	7f5b      	ldrb	r3, [r3, #29]
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d325      	bcc.n	800e22a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e1e4:	4b1e      	ldr	r3, [pc, #120]	; (800e260 <tcp_slowtmr+0x5a4>)
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d00b      	beq.n	800e20c <tcp_slowtmr+0x550>
 800e1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1fc:	6912      	ldr	r2, [r2, #16]
 800e1fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e200:	4610      	mov	r0, r2
 800e202:	4798      	blx	r3
 800e204:	4603      	mov	r3, r0
 800e206:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e20a:	e002      	b.n	800e212 <tcp_slowtmr+0x556>
 800e20c:	2300      	movs	r3, #0
 800e20e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e212:	4b13      	ldr	r3, [pc, #76]	; (800e260 <tcp_slowtmr+0x5a4>)
 800e214:	781b      	ldrb	r3, [r3, #0]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d000      	beq.n	800e21c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e21a:	e560      	b.n	800dcde <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e21c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e220:	2b00      	cmp	r3, #0
 800e222:	d102      	bne.n	800e22a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e226:	f004 f8a1 	bl	801236c <tcp_output>
  while (pcb != NULL) {
 800e22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	f47f ad5c 	bne.w	800dcea <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e232:	2300      	movs	r3, #0
 800e234:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e236:	4b0b      	ldr	r3, [pc, #44]	; (800e264 <tcp_slowtmr+0x5a8>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e23c:	e067      	b.n	800e30e <tcp_slowtmr+0x652>
 800e23e:	bf00      	nop
 800e240:	2000d3b8 	.word	0x2000d3b8
 800e244:	10624dd3 	.word	0x10624dd3
 800e248:	000124f8 	.word	0x000124f8
 800e24c:	2000d3b4 	.word	0x2000d3b4
 800e250:	08019094 	.word	0x08019094
 800e254:	080194cc 	.word	0x080194cc
 800e258:	080190d8 	.word	0x080190d8
 800e25c:	080194f8 	.word	0x080194f8
 800e260:	2000d3b0 	.word	0x2000d3b0
 800e264:	2000d3c4 	.word	0x2000d3c4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26a:	7d1b      	ldrb	r3, [r3, #20]
 800e26c:	2b0a      	cmp	r3, #10
 800e26e:	d006      	beq.n	800e27e <tcp_slowtmr+0x5c2>
 800e270:	4b2b      	ldr	r3, [pc, #172]	; (800e320 <tcp_slowtmr+0x664>)
 800e272:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e276:	492b      	ldr	r1, [pc, #172]	; (800e324 <tcp_slowtmr+0x668>)
 800e278:	482b      	ldr	r0, [pc, #172]	; (800e328 <tcp_slowtmr+0x66c>)
 800e27a:	f008 fce3 	bl	8016c44 <iprintf>
    pcb_remove = 0;
 800e27e:	2300      	movs	r3, #0
 800e280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e284:	4b29      	ldr	r3, [pc, #164]	; (800e32c <tcp_slowtmr+0x670>)
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e28a:	6a1b      	ldr	r3, [r3, #32]
 800e28c:	1ad3      	subs	r3, r2, r3
 800e28e:	2bf0      	cmp	r3, #240	; 0xf0
 800e290:	d904      	bls.n	800e29c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e296:	3301      	adds	r3, #1
 800e298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e29c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d02f      	beq.n	800e304 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e2a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2a6:	f000 fbf9 	bl	800ea9c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d010      	beq.n	800e2d2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e2b0:	4b1f      	ldr	r3, [pc, #124]	; (800e330 <tcp_slowtmr+0x674>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d106      	bne.n	800e2c8 <tcp_slowtmr+0x60c>
 800e2ba:	4b19      	ldr	r3, [pc, #100]	; (800e320 <tcp_slowtmr+0x664>)
 800e2bc:	f240 52af 	movw	r2, #1455	; 0x5af
 800e2c0:	491c      	ldr	r1, [pc, #112]	; (800e334 <tcp_slowtmr+0x678>)
 800e2c2:	4819      	ldr	r0, [pc, #100]	; (800e328 <tcp_slowtmr+0x66c>)
 800e2c4:	f008 fcbe 	bl	8016c44 <iprintf>
        prev->next = pcb->next;
 800e2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ca:	68da      	ldr	r2, [r3, #12]
 800e2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ce:	60da      	str	r2, [r3, #12]
 800e2d0:	e00f      	b.n	800e2f2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e2d2:	4b17      	ldr	r3, [pc, #92]	; (800e330 <tcp_slowtmr+0x674>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d006      	beq.n	800e2ea <tcp_slowtmr+0x62e>
 800e2dc:	4b10      	ldr	r3, [pc, #64]	; (800e320 <tcp_slowtmr+0x664>)
 800e2de:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e2e2:	4915      	ldr	r1, [pc, #84]	; (800e338 <tcp_slowtmr+0x67c>)
 800e2e4:	4810      	ldr	r0, [pc, #64]	; (800e328 <tcp_slowtmr+0x66c>)
 800e2e6:	f008 fcad 	bl	8016c44 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ec:	68db      	ldr	r3, [r3, #12]
 800e2ee:	4a10      	ldr	r2, [pc, #64]	; (800e330 <tcp_slowtmr+0x674>)
 800e2f0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f8:	68db      	ldr	r3, [r3, #12]
 800e2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e2fc:	69f8      	ldr	r0, [r7, #28]
 800e2fe:	f7ff f805 	bl	800d30c <tcp_free>
 800e302:	e004      	b.n	800e30e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e306:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30a:	68db      	ldr	r3, [r3, #12]
 800e30c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e310:	2b00      	cmp	r3, #0
 800e312:	d1a9      	bne.n	800e268 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e314:	bf00      	nop
 800e316:	bf00      	nop
 800e318:	3730      	adds	r7, #48	; 0x30
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bdb0      	pop	{r4, r5, r7, pc}
 800e31e:	bf00      	nop
 800e320:	08019094 	.word	0x08019094
 800e324:	08019524 	.word	0x08019524
 800e328:	080190d8 	.word	0x080190d8
 800e32c:	2000d3b8 	.word	0x2000d3b8
 800e330:	2000d3c4 	.word	0x2000d3c4
 800e334:	08019554 	.word	0x08019554
 800e338:	0801957c 	.word	0x0801957c

0800e33c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b082      	sub	sp, #8
 800e340:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e342:	4b2d      	ldr	r3, [pc, #180]	; (800e3f8 <tcp_fasttmr+0xbc>)
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	3301      	adds	r3, #1
 800e348:	b2da      	uxtb	r2, r3
 800e34a:	4b2b      	ldr	r3, [pc, #172]	; (800e3f8 <tcp_fasttmr+0xbc>)
 800e34c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e34e:	4b2b      	ldr	r3, [pc, #172]	; (800e3fc <tcp_fasttmr+0xc0>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e354:	e048      	b.n	800e3e8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	7f9a      	ldrb	r2, [r3, #30]
 800e35a:	4b27      	ldr	r3, [pc, #156]	; (800e3f8 <tcp_fasttmr+0xbc>)
 800e35c:	781b      	ldrb	r3, [r3, #0]
 800e35e:	429a      	cmp	r2, r3
 800e360:	d03f      	beq.n	800e3e2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e362:	4b25      	ldr	r3, [pc, #148]	; (800e3f8 <tcp_fasttmr+0xbc>)
 800e364:	781a      	ldrb	r2, [r3, #0]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	8b5b      	ldrh	r3, [r3, #26]
 800e36e:	f003 0301 	and.w	r3, r3, #1
 800e372:	2b00      	cmp	r3, #0
 800e374:	d010      	beq.n	800e398 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	8b5b      	ldrh	r3, [r3, #26]
 800e37a:	f043 0302 	orr.w	r3, r3, #2
 800e37e:	b29a      	uxth	r2, r3
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f003 fff1 	bl	801236c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	8b5b      	ldrh	r3, [r3, #26]
 800e38e:	f023 0303 	bic.w	r3, r3, #3
 800e392:	b29a      	uxth	r2, r3
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	8b5b      	ldrh	r3, [r3, #26]
 800e39c:	f003 0308 	and.w	r3, r3, #8
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d009      	beq.n	800e3b8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	8b5b      	ldrh	r3, [r3, #26]
 800e3a8:	f023 0308 	bic.w	r3, r3, #8
 800e3ac:	b29a      	uxth	r2, r3
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f7ff f93e 	bl	800d634 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	68db      	ldr	r3, [r3, #12]
 800e3bc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d00a      	beq.n	800e3dc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e3c6:	4b0e      	ldr	r3, [pc, #56]	; (800e400 <tcp_fasttmr+0xc4>)
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f000 f819 	bl	800e404 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e3d2:	4b0b      	ldr	r3, [pc, #44]	; (800e400 <tcp_fasttmr+0xc4>)
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d000      	beq.n	800e3dc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e3da:	e7b8      	b.n	800e34e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	607b      	str	r3, [r7, #4]
 800e3e0:	e002      	b.n	800e3e8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	68db      	ldr	r3, [r3, #12]
 800e3e6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d1b3      	bne.n	800e356 <tcp_fasttmr+0x1a>
    }
  }
}
 800e3ee:	bf00      	nop
 800e3f0:	bf00      	nop
 800e3f2:	3708      	adds	r7, #8
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	20006846 	.word	0x20006846
 800e3fc:	2000d3b4 	.word	0x2000d3b4
 800e400:	2000d3b0 	.word	0x2000d3b0

0800e404 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e404:	b590      	push	{r4, r7, lr}
 800e406:	b085      	sub	sp, #20
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d109      	bne.n	800e426 <tcp_process_refused_data+0x22>
 800e412:	4b37      	ldr	r3, [pc, #220]	; (800e4f0 <tcp_process_refused_data+0xec>)
 800e414:	f240 6209 	movw	r2, #1545	; 0x609
 800e418:	4936      	ldr	r1, [pc, #216]	; (800e4f4 <tcp_process_refused_data+0xf0>)
 800e41a:	4837      	ldr	r0, [pc, #220]	; (800e4f8 <tcp_process_refused_data+0xf4>)
 800e41c:	f008 fc12 	bl	8016c44 <iprintf>
 800e420:	f06f 030f 	mvn.w	r3, #15
 800e424:	e060      	b.n	800e4e8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e42a:	7b5b      	ldrb	r3, [r3, #13]
 800e42c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e432:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2200      	movs	r2, #0
 800e438:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e440:	2b00      	cmp	r3, #0
 800e442:	d00b      	beq.n	800e45c <tcp_process_refused_data+0x58>
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6918      	ldr	r0, [r3, #16]
 800e44e:	2300      	movs	r3, #0
 800e450:	68ba      	ldr	r2, [r7, #8]
 800e452:	6879      	ldr	r1, [r7, #4]
 800e454:	47a0      	blx	r4
 800e456:	4603      	mov	r3, r0
 800e458:	73fb      	strb	r3, [r7, #15]
 800e45a:	e007      	b.n	800e46c <tcp_process_refused_data+0x68>
 800e45c:	2300      	movs	r3, #0
 800e45e:	68ba      	ldr	r2, [r7, #8]
 800e460:	6879      	ldr	r1, [r7, #4]
 800e462:	2000      	movs	r0, #0
 800e464:	f000 f8a4 	bl	800e5b0 <tcp_recv_null>
 800e468:	4603      	mov	r3, r0
 800e46a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e46c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d12a      	bne.n	800e4ca <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e474:	7bbb      	ldrb	r3, [r7, #14]
 800e476:	f003 0320 	and.w	r3, r3, #32
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d033      	beq.n	800e4e6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e482:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e486:	d005      	beq.n	800e494 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e48c:	3301      	adds	r3, #1
 800e48e:	b29a      	uxth	r2, r3
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d00b      	beq.n	800e4b6 <tcp_process_refused_data+0xb2>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6918      	ldr	r0, [r3, #16]
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	6879      	ldr	r1, [r7, #4]
 800e4ae:	47a0      	blx	r4
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	73fb      	strb	r3, [r7, #15]
 800e4b4:	e001      	b.n	800e4ba <tcp_process_refused_data+0xb6>
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e4ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4be:	f113 0f0d 	cmn.w	r3, #13
 800e4c2:	d110      	bne.n	800e4e6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e4c4:	f06f 030c 	mvn.w	r3, #12
 800e4c8:	e00e      	b.n	800e4e8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e4ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4ce:	f113 0f0d 	cmn.w	r3, #13
 800e4d2:	d102      	bne.n	800e4da <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e4d4:	f06f 030c 	mvn.w	r3, #12
 800e4d8:	e006      	b.n	800e4e8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	68ba      	ldr	r2, [r7, #8]
 800e4de:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e4e0:	f06f 0304 	mvn.w	r3, #4
 800e4e4:	e000      	b.n	800e4e8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e4e6:	2300      	movs	r3, #0
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3714      	adds	r7, #20
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd90      	pop	{r4, r7, pc}
 800e4f0:	08019094 	.word	0x08019094
 800e4f4:	080195a4 	.word	0x080195a4
 800e4f8:	080190d8 	.word	0x080190d8

0800e4fc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b084      	sub	sp, #16
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e504:	e007      	b.n	800e516 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f000 f80a 	bl	800e526 <tcp_seg_free>
    seg = next;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d1f4      	bne.n	800e506 <tcp_segs_free+0xa>
  }
}
 800e51c:	bf00      	nop
 800e51e:	bf00      	nop
 800e520:	3710      	adds	r7, #16
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}

0800e526 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e526:	b580      	push	{r7, lr}
 800e528:	b082      	sub	sp, #8
 800e52a:	af00      	add	r7, sp, #0
 800e52c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d00c      	beq.n	800e54e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	685b      	ldr	r3, [r3, #4]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d004      	beq.n	800e546 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	685b      	ldr	r3, [r3, #4]
 800e540:	4618      	mov	r0, r3
 800e542:	f7fe fc27 	bl	800cd94 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e546:	6879      	ldr	r1, [r7, #4]
 800e548:	2003      	movs	r0, #3
 800e54a:	f7fd fde3 	bl	800c114 <memp_free>
  }
}
 800e54e:	bf00      	nop
 800e550:	3708      	adds	r7, #8
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
	...

0800e558 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b084      	sub	sp, #16
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d106      	bne.n	800e574 <tcp_seg_copy+0x1c>
 800e566:	4b0f      	ldr	r3, [pc, #60]	; (800e5a4 <tcp_seg_copy+0x4c>)
 800e568:	f240 6282 	movw	r2, #1666	; 0x682
 800e56c:	490e      	ldr	r1, [pc, #56]	; (800e5a8 <tcp_seg_copy+0x50>)
 800e56e:	480f      	ldr	r0, [pc, #60]	; (800e5ac <tcp_seg_copy+0x54>)
 800e570:	f008 fb68 	bl	8016c44 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e574:	2003      	movs	r0, #3
 800e576:	f7fd fd7b 	bl	800c070 <memp_malloc>
 800e57a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d101      	bne.n	800e586 <tcp_seg_copy+0x2e>
    return NULL;
 800e582:	2300      	movs	r3, #0
 800e584:	e00a      	b.n	800e59c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e586:	2210      	movs	r2, #16
 800e588:	6879      	ldr	r1, [r7, #4]
 800e58a:	68f8      	ldr	r0, [r7, #12]
 800e58c:	f008 fa9a 	bl	8016ac4 <memcpy>
  pbuf_ref(cseg->p);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	685b      	ldr	r3, [r3, #4]
 800e594:	4618      	mov	r0, r3
 800e596:	f7fe fca3 	bl	800cee0 <pbuf_ref>
  return cseg;
 800e59a:	68fb      	ldr	r3, [r7, #12]
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3710      	adds	r7, #16
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	08019094 	.word	0x08019094
 800e5a8:	080195e8 	.word	0x080195e8
 800e5ac:	080190d8 	.word	0x080190d8

0800e5b0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b084      	sub	sp, #16
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	60f8      	str	r0, [r7, #12]
 800e5b8:	60b9      	str	r1, [r7, #8]
 800e5ba:	607a      	str	r2, [r7, #4]
 800e5bc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d109      	bne.n	800e5d8 <tcp_recv_null+0x28>
 800e5c4:	4b12      	ldr	r3, [pc, #72]	; (800e610 <tcp_recv_null+0x60>)
 800e5c6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e5ca:	4912      	ldr	r1, [pc, #72]	; (800e614 <tcp_recv_null+0x64>)
 800e5cc:	4812      	ldr	r0, [pc, #72]	; (800e618 <tcp_recv_null+0x68>)
 800e5ce:	f008 fb39 	bl	8016c44 <iprintf>
 800e5d2:	f06f 030f 	mvn.w	r3, #15
 800e5d6:	e016      	b.n	800e606 <tcp_recv_null+0x56>

  if (p != NULL) {
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d009      	beq.n	800e5f2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	891b      	ldrh	r3, [r3, #8]
 800e5e2:	4619      	mov	r1, r3
 800e5e4:	68b8      	ldr	r0, [r7, #8]
 800e5e6:	f7ff fad3 	bl	800db90 <tcp_recved>
    pbuf_free(p);
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f7fe fbd2 	bl	800cd94 <pbuf_free>
 800e5f0:	e008      	b.n	800e604 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e5f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d104      	bne.n	800e604 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e5fa:	68b8      	ldr	r0, [r7, #8]
 800e5fc:	f7ff f884 	bl	800d708 <tcp_close>
 800e600:	4603      	mov	r3, r0
 800e602:	e000      	b.n	800e606 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e604:	2300      	movs	r3, #0
}
 800e606:	4618      	mov	r0, r3
 800e608:	3710      	adds	r7, #16
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	bf00      	nop
 800e610:	08019094 	.word	0x08019094
 800e614:	08019604 	.word	0x08019604
 800e618:	080190d8 	.word	0x080190d8

0800e61c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b086      	sub	sp, #24
 800e620:	af00      	add	r7, sp, #0
 800e622:	4603      	mov	r3, r0
 800e624:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	db01      	blt.n	800e632 <tcp_kill_prio+0x16>
 800e62e:	79fb      	ldrb	r3, [r7, #7]
 800e630:	e000      	b.n	800e634 <tcp_kill_prio+0x18>
 800e632:	237f      	movs	r3, #127	; 0x7f
 800e634:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e636:	7afb      	ldrb	r3, [r7, #11]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d034      	beq.n	800e6a6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e63c:	7afb      	ldrb	r3, [r7, #11]
 800e63e:	3b01      	subs	r3, #1
 800e640:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e642:	2300      	movs	r3, #0
 800e644:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e646:	2300      	movs	r3, #0
 800e648:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e64a:	4b19      	ldr	r3, [pc, #100]	; (800e6b0 <tcp_kill_prio+0x94>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	617b      	str	r3, [r7, #20]
 800e650:	e01f      	b.n	800e692 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	7d5b      	ldrb	r3, [r3, #21]
 800e656:	7afa      	ldrb	r2, [r7, #11]
 800e658:	429a      	cmp	r2, r3
 800e65a:	d80c      	bhi.n	800e676 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e660:	7afa      	ldrb	r2, [r7, #11]
 800e662:	429a      	cmp	r2, r3
 800e664:	d112      	bne.n	800e68c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e666:	4b13      	ldr	r3, [pc, #76]	; (800e6b4 <tcp_kill_prio+0x98>)
 800e668:	681a      	ldr	r2, [r3, #0]
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	6a1b      	ldr	r3, [r3, #32]
 800e66e:	1ad3      	subs	r3, r2, r3
 800e670:	68fa      	ldr	r2, [r7, #12]
 800e672:	429a      	cmp	r2, r3
 800e674:	d80a      	bhi.n	800e68c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e676:	4b0f      	ldr	r3, [pc, #60]	; (800e6b4 <tcp_kill_prio+0x98>)
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	6a1b      	ldr	r3, [r3, #32]
 800e67e:	1ad3      	subs	r3, r2, r3
 800e680:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	7d5b      	ldrb	r3, [r3, #21]
 800e68a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	68db      	ldr	r3, [r3, #12]
 800e690:	617b      	str	r3, [r7, #20]
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d1dc      	bne.n	800e652 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e698:	693b      	ldr	r3, [r7, #16]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d004      	beq.n	800e6a8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e69e:	6938      	ldr	r0, [r7, #16]
 800e6a0:	f7ff f978 	bl	800d994 <tcp_abort>
 800e6a4:	e000      	b.n	800e6a8 <tcp_kill_prio+0x8c>
    return;
 800e6a6:	bf00      	nop
  }
}
 800e6a8:	3718      	adds	r7, #24
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	2000d3b4 	.word	0x2000d3b4
 800e6b4:	2000d3b8 	.word	0x2000d3b8

0800e6b8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b086      	sub	sp, #24
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	4603      	mov	r3, r0
 800e6c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e6c2:	79fb      	ldrb	r3, [r7, #7]
 800e6c4:	2b08      	cmp	r3, #8
 800e6c6:	d009      	beq.n	800e6dc <tcp_kill_state+0x24>
 800e6c8:	79fb      	ldrb	r3, [r7, #7]
 800e6ca:	2b09      	cmp	r3, #9
 800e6cc:	d006      	beq.n	800e6dc <tcp_kill_state+0x24>
 800e6ce:	4b1a      	ldr	r3, [pc, #104]	; (800e738 <tcp_kill_state+0x80>)
 800e6d0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e6d4:	4919      	ldr	r1, [pc, #100]	; (800e73c <tcp_kill_state+0x84>)
 800e6d6:	481a      	ldr	r0, [pc, #104]	; (800e740 <tcp_kill_state+0x88>)
 800e6d8:	f008 fab4 	bl	8016c44 <iprintf>

  inactivity = 0;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6e4:	4b17      	ldr	r3, [pc, #92]	; (800e744 <tcp_kill_state+0x8c>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	617b      	str	r3, [r7, #20]
 800e6ea:	e017      	b.n	800e71c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	7d1b      	ldrb	r3, [r3, #20]
 800e6f0:	79fa      	ldrb	r2, [r7, #7]
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d10f      	bne.n	800e716 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e6f6:	4b14      	ldr	r3, [pc, #80]	; (800e748 <tcp_kill_state+0x90>)
 800e6f8:	681a      	ldr	r2, [r3, #0]
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	6a1b      	ldr	r3, [r3, #32]
 800e6fe:	1ad3      	subs	r3, r2, r3
 800e700:	68fa      	ldr	r2, [r7, #12]
 800e702:	429a      	cmp	r2, r3
 800e704:	d807      	bhi.n	800e716 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e706:	4b10      	ldr	r3, [pc, #64]	; (800e748 <tcp_kill_state+0x90>)
 800e708:	681a      	ldr	r2, [r3, #0]
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	6a1b      	ldr	r3, [r3, #32]
 800e70e:	1ad3      	subs	r3, r2, r3
 800e710:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	68db      	ldr	r3, [r3, #12]
 800e71a:	617b      	str	r3, [r7, #20]
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d1e4      	bne.n	800e6ec <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d003      	beq.n	800e730 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e728:	2100      	movs	r1, #0
 800e72a:	6938      	ldr	r0, [r7, #16]
 800e72c:	f7ff f874 	bl	800d818 <tcp_abandon>
  }
}
 800e730:	bf00      	nop
 800e732:	3718      	adds	r7, #24
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	08019094 	.word	0x08019094
 800e73c:	08019620 	.word	0x08019620
 800e740:	080190d8 	.word	0x080190d8
 800e744:	2000d3b4 	.word	0x2000d3b4
 800e748:	2000d3b8 	.word	0x2000d3b8

0800e74c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e752:	2300      	movs	r3, #0
 800e754:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e756:	2300      	movs	r3, #0
 800e758:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e75a:	4b12      	ldr	r3, [pc, #72]	; (800e7a4 <tcp_kill_timewait+0x58>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	60fb      	str	r3, [r7, #12]
 800e760:	e012      	b.n	800e788 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e762:	4b11      	ldr	r3, [pc, #68]	; (800e7a8 <tcp_kill_timewait+0x5c>)
 800e764:	681a      	ldr	r2, [r3, #0]
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	6a1b      	ldr	r3, [r3, #32]
 800e76a:	1ad3      	subs	r3, r2, r3
 800e76c:	687a      	ldr	r2, [r7, #4]
 800e76e:	429a      	cmp	r2, r3
 800e770:	d807      	bhi.n	800e782 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e772:	4b0d      	ldr	r3, [pc, #52]	; (800e7a8 <tcp_kill_timewait+0x5c>)
 800e774:	681a      	ldr	r2, [r3, #0]
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	6a1b      	ldr	r3, [r3, #32]
 800e77a:	1ad3      	subs	r3, r2, r3
 800e77c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	68db      	ldr	r3, [r3, #12]
 800e786:	60fb      	str	r3, [r7, #12]
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d1e9      	bne.n	800e762 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d002      	beq.n	800e79a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e794:	68b8      	ldr	r0, [r7, #8]
 800e796:	f7ff f8fd 	bl	800d994 <tcp_abort>
  }
}
 800e79a:	bf00      	nop
 800e79c:	3710      	adds	r7, #16
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
 800e7a2:	bf00      	nop
 800e7a4:	2000d3c4 	.word	0x2000d3c4
 800e7a8:	2000d3b8 	.word	0x2000d3b8

0800e7ac <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e7b2:	4b10      	ldr	r3, [pc, #64]	; (800e7f4 <tcp_handle_closepend+0x48>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e7b8:	e014      	b.n	800e7e4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	68db      	ldr	r3, [r3, #12]
 800e7be:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	8b5b      	ldrh	r3, [r3, #26]
 800e7c4:	f003 0308 	and.w	r3, r3, #8
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d009      	beq.n	800e7e0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	8b5b      	ldrh	r3, [r3, #26]
 800e7d0:	f023 0308 	bic.w	r3, r3, #8
 800e7d4:	b29a      	uxth	r2, r3
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f7fe ff2a 	bl	800d634 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d1e7      	bne.n	800e7ba <tcp_handle_closepend+0xe>
  }
}
 800e7ea:	bf00      	nop
 800e7ec:	bf00      	nop
 800e7ee:	3708      	adds	r7, #8
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	2000d3b4 	.word	0x2000d3b4

0800e7f8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b084      	sub	sp, #16
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	4603      	mov	r3, r0
 800e800:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e802:	2001      	movs	r0, #1
 800e804:	f7fd fc34 	bl	800c070 <memp_malloc>
 800e808:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d126      	bne.n	800e85e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e810:	f7ff ffcc 	bl	800e7ac <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e814:	f7ff ff9a 	bl	800e74c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e818:	2001      	movs	r0, #1
 800e81a:	f7fd fc29 	bl	800c070 <memp_malloc>
 800e81e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d11b      	bne.n	800e85e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e826:	2009      	movs	r0, #9
 800e828:	f7ff ff46 	bl	800e6b8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e82c:	2001      	movs	r0, #1
 800e82e:	f7fd fc1f 	bl	800c070 <memp_malloc>
 800e832:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d111      	bne.n	800e85e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e83a:	2008      	movs	r0, #8
 800e83c:	f7ff ff3c 	bl	800e6b8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e840:	2001      	movs	r0, #1
 800e842:	f7fd fc15 	bl	800c070 <memp_malloc>
 800e846:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d107      	bne.n	800e85e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e84e:	79fb      	ldrb	r3, [r7, #7]
 800e850:	4618      	mov	r0, r3
 800e852:	f7ff fee3 	bl	800e61c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e856:	2001      	movs	r0, #1
 800e858:	f7fd fc0a 	bl	800c070 <memp_malloc>
 800e85c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d03f      	beq.n	800e8e4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e864:	229c      	movs	r2, #156	; 0x9c
 800e866:	2100      	movs	r1, #0
 800e868:	68f8      	ldr	r0, [r7, #12]
 800e86a:	f008 f939 	bl	8016ae0 <memset>
    pcb->prio = prio;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	79fa      	ldrb	r2, [r7, #7]
 800e872:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e87a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e884:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	22ff      	movs	r2, #255	; 0xff
 800e892:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e89a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	2206      	movs	r2, #6
 800e8a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	2206      	movs	r2, #6
 800e8a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e8b0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2201      	movs	r2, #1
 800e8b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e8ba:	4b0d      	ldr	r3, [pc, #52]	; (800e8f0 <tcp_alloc+0xf8>)
 800e8bc:	681a      	ldr	r2, [r3, #0]
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e8c2:	4b0c      	ldr	r3, [pc, #48]	; (800e8f4 <tcp_alloc+0xfc>)
 800e8c4:	781a      	ldrb	r2, [r3, #0]
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e8d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	4a08      	ldr	r2, [pc, #32]	; (800e8f8 <tcp_alloc+0x100>)
 800e8d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	4a07      	ldr	r2, [pc, #28]	; (800e8fc <tcp_alloc+0x104>)
 800e8e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3710      	adds	r7, #16
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
 800e8ee:	bf00      	nop
 800e8f0:	2000d3b8 	.word	0x2000d3b8
 800e8f4:	20006846 	.word	0x20006846
 800e8f8:	0800e5b1 	.word	0x0800e5b1
 800e8fc:	006ddd00 	.word	0x006ddd00

0800e900 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b084      	sub	sp, #16
 800e904:	af00      	add	r7, sp, #0
 800e906:	4603      	mov	r3, r0
 800e908:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e90a:	2040      	movs	r0, #64	; 0x40
 800e90c:	f7ff ff74 	bl	800e7f8 <tcp_alloc>
 800e910:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e912:	68fb      	ldr	r3, [r7, #12]
}
 800e914:	4618      	mov	r0, r3
 800e916:	3710      	adds	r7, #16
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}

0800e91c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b083      	sub	sp, #12
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d002      	beq.n	800e932 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	683a      	ldr	r2, [r7, #0]
 800e930:	611a      	str	r2, [r3, #16]
  }
}
 800e932:	bf00      	nop
 800e934:	370c      	adds	r7, #12
 800e936:	46bd      	mov	sp, r7
 800e938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93c:	4770      	bx	lr
	...

0800e940 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d00e      	beq.n	800e96e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	7d1b      	ldrb	r3, [r3, #20]
 800e954:	2b01      	cmp	r3, #1
 800e956:	d106      	bne.n	800e966 <tcp_recv+0x26>
 800e958:	4b07      	ldr	r3, [pc, #28]	; (800e978 <tcp_recv+0x38>)
 800e95a:	f240 72df 	movw	r2, #2015	; 0x7df
 800e95e:	4907      	ldr	r1, [pc, #28]	; (800e97c <tcp_recv+0x3c>)
 800e960:	4807      	ldr	r0, [pc, #28]	; (800e980 <tcp_recv+0x40>)
 800e962:	f008 f96f 	bl	8016c44 <iprintf>
    pcb->recv = recv;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	683a      	ldr	r2, [r7, #0]
 800e96a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800e96e:	bf00      	nop
 800e970:	3708      	adds	r7, #8
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	08019094 	.word	0x08019094
 800e97c:	08019630 	.word	0x08019630
 800e980:	080190d8 	.word	0x080190d8

0800e984 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b082      	sub	sp, #8
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d00e      	beq.n	800e9b2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	7d1b      	ldrb	r3, [r3, #20]
 800e998:	2b01      	cmp	r3, #1
 800e99a:	d106      	bne.n	800e9aa <tcp_sent+0x26>
 800e99c:	4b07      	ldr	r3, [pc, #28]	; (800e9bc <tcp_sent+0x38>)
 800e99e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800e9a2:	4907      	ldr	r1, [pc, #28]	; (800e9c0 <tcp_sent+0x3c>)
 800e9a4:	4807      	ldr	r0, [pc, #28]	; (800e9c4 <tcp_sent+0x40>)
 800e9a6:	f008 f94d 	bl	8016c44 <iprintf>
    pcb->sent = sent;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	683a      	ldr	r2, [r7, #0]
 800e9ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800e9b2:	bf00      	nop
 800e9b4:	3708      	adds	r7, #8
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	bf00      	nop
 800e9bc:	08019094 	.word	0x08019094
 800e9c0:	08019658 	.word	0x08019658
 800e9c4:	080190d8 	.word	0x080190d8

0800e9c8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d00e      	beq.n	800e9f6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	7d1b      	ldrb	r3, [r3, #20]
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d106      	bne.n	800e9ee <tcp_err+0x26>
 800e9e0:	4b07      	ldr	r3, [pc, #28]	; (800ea00 <tcp_err+0x38>)
 800e9e2:	f640 020d 	movw	r2, #2061	; 0x80d
 800e9e6:	4907      	ldr	r1, [pc, #28]	; (800ea04 <tcp_err+0x3c>)
 800e9e8:	4807      	ldr	r0, [pc, #28]	; (800ea08 <tcp_err+0x40>)
 800e9ea:	f008 f92b 	bl	8016c44 <iprintf>
    pcb->errf = err;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	683a      	ldr	r2, [r7, #0]
 800e9f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800e9f6:	bf00      	nop
 800e9f8:	3708      	adds	r7, #8
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}
 800e9fe:	bf00      	nop
 800ea00:	08019094 	.word	0x08019094
 800ea04:	08019680 	.word	0x08019680
 800ea08:	080190d8 	.word	0x080190d8

0800ea0c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b085      	sub	sp, #20
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
 800ea14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d008      	beq.n	800ea2e <tcp_accept+0x22>
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	7d1b      	ldrb	r3, [r3, #20]
 800ea20:	2b01      	cmp	r3, #1
 800ea22:	d104      	bne.n	800ea2e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	683a      	ldr	r2, [r7, #0]
 800ea2c:	619a      	str	r2, [r3, #24]
  }
}
 800ea2e:	bf00      	nop
 800ea30:	3714      	adds	r7, #20
 800ea32:	46bd      	mov	sp, r7
 800ea34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea38:	4770      	bx	lr
	...

0800ea3c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b084      	sub	sp, #16
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	60f8      	str	r0, [r7, #12]
 800ea44:	60b9      	str	r1, [r7, #8]
 800ea46:	4613      	mov	r3, r2
 800ea48:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d107      	bne.n	800ea60 <tcp_poll+0x24>
 800ea50:	4b0e      	ldr	r3, [pc, #56]	; (800ea8c <tcp_poll+0x50>)
 800ea52:	f640 023d 	movw	r2, #2109	; 0x83d
 800ea56:	490e      	ldr	r1, [pc, #56]	; (800ea90 <tcp_poll+0x54>)
 800ea58:	480e      	ldr	r0, [pc, #56]	; (800ea94 <tcp_poll+0x58>)
 800ea5a:	f008 f8f3 	bl	8016c44 <iprintf>
 800ea5e:	e011      	b.n	800ea84 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	7d1b      	ldrb	r3, [r3, #20]
 800ea64:	2b01      	cmp	r3, #1
 800ea66:	d106      	bne.n	800ea76 <tcp_poll+0x3a>
 800ea68:	4b08      	ldr	r3, [pc, #32]	; (800ea8c <tcp_poll+0x50>)
 800ea6a:	f640 023e 	movw	r2, #2110	; 0x83e
 800ea6e:	490a      	ldr	r1, [pc, #40]	; (800ea98 <tcp_poll+0x5c>)
 800ea70:	4808      	ldr	r0, [pc, #32]	; (800ea94 <tcp_poll+0x58>)
 800ea72:	f008 f8e7 	bl	8016c44 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	68ba      	ldr	r2, [r7, #8]
 800ea7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	79fa      	ldrb	r2, [r7, #7]
 800ea82:	775a      	strb	r2, [r3, #29]
}
 800ea84:	3710      	adds	r7, #16
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	bf00      	nop
 800ea8c:	08019094 	.word	0x08019094
 800ea90:	080196a8 	.word	0x080196a8
 800ea94:	080190d8 	.word	0x080190d8
 800ea98:	080196c0 	.word	0x080196c0

0800ea9c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b082      	sub	sp, #8
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d107      	bne.n	800eaba <tcp_pcb_purge+0x1e>
 800eaaa:	4b21      	ldr	r3, [pc, #132]	; (800eb30 <tcp_pcb_purge+0x94>)
 800eaac:	f640 0251 	movw	r2, #2129	; 0x851
 800eab0:	4920      	ldr	r1, [pc, #128]	; (800eb34 <tcp_pcb_purge+0x98>)
 800eab2:	4821      	ldr	r0, [pc, #132]	; (800eb38 <tcp_pcb_purge+0x9c>)
 800eab4:	f008 f8c6 	bl	8016c44 <iprintf>
 800eab8:	e037      	b.n	800eb2a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	7d1b      	ldrb	r3, [r3, #20]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d033      	beq.n	800eb2a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800eac6:	2b0a      	cmp	r3, #10
 800eac8:	d02f      	beq.n	800eb2a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800eace:	2b01      	cmp	r3, #1
 800ead0:	d02b      	beq.n	800eb2a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d007      	beq.n	800eaea <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eade:	4618      	mov	r0, r3
 800eae0:	f7fe f958 	bl	800cd94 <pbuf_free>
      pcb->refused_data = NULL;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2200      	movs	r2, #0
 800eae8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d002      	beq.n	800eaf8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f000 f986 	bl	800ee04 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eafe:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb04:	4618      	mov	r0, r3
 800eb06:	f7ff fcf9 	bl	800e4fc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7ff fcf4 	bl	800e4fc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	66da      	str	r2, [r3, #108]	; 0x6c
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2200      	movs	r2, #0
 800eb26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800eb2a:	3708      	adds	r7, #8
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	08019094 	.word	0x08019094
 800eb34:	080196e0 	.word	0x080196e0
 800eb38:	080190d8 	.word	0x080190d8

0800eb3c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d106      	bne.n	800eb5a <tcp_pcb_remove+0x1e>
 800eb4c:	4b3e      	ldr	r3, [pc, #248]	; (800ec48 <tcp_pcb_remove+0x10c>)
 800eb4e:	f640 0283 	movw	r2, #2179	; 0x883
 800eb52:	493e      	ldr	r1, [pc, #248]	; (800ec4c <tcp_pcb_remove+0x110>)
 800eb54:	483e      	ldr	r0, [pc, #248]	; (800ec50 <tcp_pcb_remove+0x114>)
 800eb56:	f008 f875 	bl	8016c44 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d106      	bne.n	800eb6e <tcp_pcb_remove+0x32>
 800eb60:	4b39      	ldr	r3, [pc, #228]	; (800ec48 <tcp_pcb_remove+0x10c>)
 800eb62:	f640 0284 	movw	r2, #2180	; 0x884
 800eb66:	493b      	ldr	r1, [pc, #236]	; (800ec54 <tcp_pcb_remove+0x118>)
 800eb68:	4839      	ldr	r0, [pc, #228]	; (800ec50 <tcp_pcb_remove+0x114>)
 800eb6a:	f008 f86b 	bl	8016c44 <iprintf>

  TCP_RMV(pcblist, pcb);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	683a      	ldr	r2, [r7, #0]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d105      	bne.n	800eb84 <tcp_pcb_remove+0x48>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	68da      	ldr	r2, [r3, #12]
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	601a      	str	r2, [r3, #0]
 800eb82:	e013      	b.n	800ebac <tcp_pcb_remove+0x70>
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	60fb      	str	r3, [r7, #12]
 800eb8a:	e00c      	b.n	800eba6 <tcp_pcb_remove+0x6a>
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	68db      	ldr	r3, [r3, #12]
 800eb90:	683a      	ldr	r2, [r7, #0]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d104      	bne.n	800eba0 <tcp_pcb_remove+0x64>
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	68da      	ldr	r2, [r3, #12]
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	60da      	str	r2, [r3, #12]
 800eb9e:	e005      	b.n	800ebac <tcp_pcb_remove+0x70>
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	68db      	ldr	r3, [r3, #12]
 800eba4:	60fb      	str	r3, [r7, #12]
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d1ef      	bne.n	800eb8c <tcp_pcb_remove+0x50>
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ebb2:	6838      	ldr	r0, [r7, #0]
 800ebb4:	f7ff ff72 	bl	800ea9c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	7d1b      	ldrb	r3, [r3, #20]
 800ebbc:	2b0a      	cmp	r3, #10
 800ebbe:	d013      	beq.n	800ebe8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d00f      	beq.n	800ebe8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	8b5b      	ldrh	r3, [r3, #26]
 800ebcc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d009      	beq.n	800ebe8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	8b5b      	ldrh	r3, [r3, #26]
 800ebd8:	f043 0302 	orr.w	r3, r3, #2
 800ebdc:	b29a      	uxth	r2, r3
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ebe2:	6838      	ldr	r0, [r7, #0]
 800ebe4:	f003 fbc2 	bl	801236c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	7d1b      	ldrb	r3, [r3, #20]
 800ebec:	2b01      	cmp	r3, #1
 800ebee:	d020      	beq.n	800ec32 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d006      	beq.n	800ec06 <tcp_pcb_remove+0xca>
 800ebf8:	4b13      	ldr	r3, [pc, #76]	; (800ec48 <tcp_pcb_remove+0x10c>)
 800ebfa:	f640 0293 	movw	r2, #2195	; 0x893
 800ebfe:	4916      	ldr	r1, [pc, #88]	; (800ec58 <tcp_pcb_remove+0x11c>)
 800ec00:	4813      	ldr	r0, [pc, #76]	; (800ec50 <tcp_pcb_remove+0x114>)
 800ec02:	f008 f81f 	bl	8016c44 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d006      	beq.n	800ec1c <tcp_pcb_remove+0xe0>
 800ec0e:	4b0e      	ldr	r3, [pc, #56]	; (800ec48 <tcp_pcb_remove+0x10c>)
 800ec10:	f640 0294 	movw	r2, #2196	; 0x894
 800ec14:	4911      	ldr	r1, [pc, #68]	; (800ec5c <tcp_pcb_remove+0x120>)
 800ec16:	480e      	ldr	r0, [pc, #56]	; (800ec50 <tcp_pcb_remove+0x114>)
 800ec18:	f008 f814 	bl	8016c44 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d006      	beq.n	800ec32 <tcp_pcb_remove+0xf6>
 800ec24:	4b08      	ldr	r3, [pc, #32]	; (800ec48 <tcp_pcb_remove+0x10c>)
 800ec26:	f640 0296 	movw	r2, #2198	; 0x896
 800ec2a:	490d      	ldr	r1, [pc, #52]	; (800ec60 <tcp_pcb_remove+0x124>)
 800ec2c:	4808      	ldr	r0, [pc, #32]	; (800ec50 <tcp_pcb_remove+0x114>)
 800ec2e:	f008 f809 	bl	8016c44 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	2200      	movs	r2, #0
 800ec36:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ec3e:	bf00      	nop
 800ec40:	3710      	adds	r7, #16
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}
 800ec46:	bf00      	nop
 800ec48:	08019094 	.word	0x08019094
 800ec4c:	080196fc 	.word	0x080196fc
 800ec50:	080190d8 	.word	0x080190d8
 800ec54:	08019718 	.word	0x08019718
 800ec58:	08019738 	.word	0x08019738
 800ec5c:	08019750 	.word	0x08019750
 800ec60:	0801976c 	.word	0x0801976c

0800ec64 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d106      	bne.n	800ec80 <tcp_next_iss+0x1c>
 800ec72:	4b0a      	ldr	r3, [pc, #40]	; (800ec9c <tcp_next_iss+0x38>)
 800ec74:	f640 02af 	movw	r2, #2223	; 0x8af
 800ec78:	4909      	ldr	r1, [pc, #36]	; (800eca0 <tcp_next_iss+0x3c>)
 800ec7a:	480a      	ldr	r0, [pc, #40]	; (800eca4 <tcp_next_iss+0x40>)
 800ec7c:	f007 ffe2 	bl	8016c44 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ec80:	4b09      	ldr	r3, [pc, #36]	; (800eca8 <tcp_next_iss+0x44>)
 800ec82:	681a      	ldr	r2, [r3, #0]
 800ec84:	4b09      	ldr	r3, [pc, #36]	; (800ecac <tcp_next_iss+0x48>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	4413      	add	r3, r2
 800ec8a:	4a07      	ldr	r2, [pc, #28]	; (800eca8 <tcp_next_iss+0x44>)
 800ec8c:	6013      	str	r3, [r2, #0]
  return iss;
 800ec8e:	4b06      	ldr	r3, [pc, #24]	; (800eca8 <tcp_next_iss+0x44>)
 800ec90:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ec92:	4618      	mov	r0, r3
 800ec94:	3708      	adds	r7, #8
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}
 800ec9a:	bf00      	nop
 800ec9c:	08019094 	.word	0x08019094
 800eca0:	08019784 	.word	0x08019784
 800eca4:	080190d8 	.word	0x080190d8
 800eca8:	20000018 	.word	0x20000018
 800ecac:	2000d3b8 	.word	0x2000d3b8

0800ecb0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b086      	sub	sp, #24
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	60b9      	str	r1, [r7, #8]
 800ecba:	607a      	str	r2, [r7, #4]
 800ecbc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d106      	bne.n	800ecd2 <tcp_eff_send_mss_netif+0x22>
 800ecc4:	4b14      	ldr	r3, [pc, #80]	; (800ed18 <tcp_eff_send_mss_netif+0x68>)
 800ecc6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ecca:	4914      	ldr	r1, [pc, #80]	; (800ed1c <tcp_eff_send_mss_netif+0x6c>)
 800eccc:	4814      	ldr	r0, [pc, #80]	; (800ed20 <tcp_eff_send_mss_netif+0x70>)
 800ecce:	f007 ffb9 	bl	8016c44 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d101      	bne.n	800ecdc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ecd8:	89fb      	ldrh	r3, [r7, #14]
 800ecda:	e019      	b.n	800ed10 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ece0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ece2:	8afb      	ldrh	r3, [r7, #22]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d012      	beq.n	800ed0e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ece8:	2328      	movs	r3, #40	; 0x28
 800ecea:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ecec:	8afa      	ldrh	r2, [r7, #22]
 800ecee:	8abb      	ldrh	r3, [r7, #20]
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	d904      	bls.n	800ecfe <tcp_eff_send_mss_netif+0x4e>
 800ecf4:	8afa      	ldrh	r2, [r7, #22]
 800ecf6:	8abb      	ldrh	r3, [r7, #20]
 800ecf8:	1ad3      	subs	r3, r2, r3
 800ecfa:	b29b      	uxth	r3, r3
 800ecfc:	e000      	b.n	800ed00 <tcp_eff_send_mss_netif+0x50>
 800ecfe:	2300      	movs	r3, #0
 800ed00:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ed02:	8a7a      	ldrh	r2, [r7, #18]
 800ed04:	89fb      	ldrh	r3, [r7, #14]
 800ed06:	4293      	cmp	r3, r2
 800ed08:	bf28      	it	cs
 800ed0a:	4613      	movcs	r3, r2
 800ed0c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ed0e:	89fb      	ldrh	r3, [r7, #14]
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3718      	adds	r7, #24
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}
 800ed18:	08019094 	.word	0x08019094
 800ed1c:	080197a0 	.word	0x080197a0
 800ed20:	080190d8 	.word	0x080190d8

0800ed24 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b084      	sub	sp, #16
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
 800ed2c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d119      	bne.n	800ed6c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ed38:	4b10      	ldr	r3, [pc, #64]	; (800ed7c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ed3a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ed3e:	4910      	ldr	r1, [pc, #64]	; (800ed80 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ed40:	4810      	ldr	r0, [pc, #64]	; (800ed84 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ed42:	f007 ff7f 	bl	8016c44 <iprintf>

  while (pcb != NULL) {
 800ed46:	e011      	b.n	800ed6c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	681a      	ldr	r2, [r3, #0]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	429a      	cmp	r2, r3
 800ed52:	d108      	bne.n	800ed66 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	68db      	ldr	r3, [r3, #12]
 800ed58:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ed5a:	68f8      	ldr	r0, [r7, #12]
 800ed5c:	f7fe fe1a 	bl	800d994 <tcp_abort>
      pcb = next;
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	60fb      	str	r3, [r7, #12]
 800ed64:	e002      	b.n	800ed6c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	68db      	ldr	r3, [r3, #12]
 800ed6a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d1ea      	bne.n	800ed48 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ed72:	bf00      	nop
 800ed74:	bf00      	nop
 800ed76:	3710      	adds	r7, #16
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}
 800ed7c:	08019094 	.word	0x08019094
 800ed80:	080197c8 	.word	0x080197c8
 800ed84:	080190d8 	.word	0x080190d8

0800ed88 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b084      	sub	sp, #16
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d02a      	beq.n	800edee <tcp_netif_ip_addr_changed+0x66>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d026      	beq.n	800edee <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800eda0:	4b15      	ldr	r3, [pc, #84]	; (800edf8 <tcp_netif_ip_addr_changed+0x70>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	4619      	mov	r1, r3
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f7ff ffbc 	bl	800ed24 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800edac:	4b13      	ldr	r3, [pc, #76]	; (800edfc <tcp_netif_ip_addr_changed+0x74>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4619      	mov	r1, r3
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f7ff ffb6 	bl	800ed24 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d017      	beq.n	800edee <tcp_netif_ip_addr_changed+0x66>
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d013      	beq.n	800edee <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800edc6:	4b0e      	ldr	r3, [pc, #56]	; (800ee00 <tcp_netif_ip_addr_changed+0x78>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	60fb      	str	r3, [r7, #12]
 800edcc:	e00c      	b.n	800ede8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	681a      	ldr	r2, [r3, #0]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	429a      	cmp	r2, r3
 800edd8:	d103      	bne.n	800ede2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	681a      	ldr	r2, [r3, #0]
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	68db      	ldr	r3, [r3, #12]
 800ede6:	60fb      	str	r3, [r7, #12]
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d1ef      	bne.n	800edce <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800edee:	bf00      	nop
 800edf0:	3710      	adds	r7, #16
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
 800edf6:	bf00      	nop
 800edf8:	2000d3b4 	.word	0x2000d3b4
 800edfc:	2000d3c0 	.word	0x2000d3c0
 800ee00:	2000d3bc 	.word	0x2000d3bc

0800ee04 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b082      	sub	sp, #8
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d007      	beq.n	800ee24 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f7ff fb6f 	bl	800e4fc <tcp_segs_free>
    pcb->ooseq = NULL;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2200      	movs	r2, #0
 800ee22:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ee24:	bf00      	nop
 800ee26:	3708      	adds	r7, #8
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}

0800ee2c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ee2c:	b590      	push	{r4, r7, lr}
 800ee2e:	b08d      	sub	sp, #52	; 0x34
 800ee30:	af04      	add	r7, sp, #16
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d105      	bne.n	800ee48 <tcp_input+0x1c>
 800ee3c:	4b9b      	ldr	r3, [pc, #620]	; (800f0ac <tcp_input+0x280>)
 800ee3e:	2283      	movs	r2, #131	; 0x83
 800ee40:	499b      	ldr	r1, [pc, #620]	; (800f0b0 <tcp_input+0x284>)
 800ee42:	489c      	ldr	r0, [pc, #624]	; (800f0b4 <tcp_input+0x288>)
 800ee44:	f007 fefe 	bl	8016c44 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	4a9a      	ldr	r2, [pc, #616]	; (800f0b8 <tcp_input+0x28c>)
 800ee4e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	895b      	ldrh	r3, [r3, #10]
 800ee54:	2b13      	cmp	r3, #19
 800ee56:	f240 83c4 	bls.w	800f5e2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ee5a:	4b98      	ldr	r3, [pc, #608]	; (800f0bc <tcp_input+0x290>)
 800ee5c:	695b      	ldr	r3, [r3, #20]
 800ee5e:	4a97      	ldr	r2, [pc, #604]	; (800f0bc <tcp_input+0x290>)
 800ee60:	6812      	ldr	r2, [r2, #0]
 800ee62:	4611      	mov	r1, r2
 800ee64:	4618      	mov	r0, r3
 800ee66:	f006 fbcb 	bl	8015600 <ip4_addr_isbroadcast_u32>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	f040 83ba 	bne.w	800f5e6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ee72:	4b92      	ldr	r3, [pc, #584]	; (800f0bc <tcp_input+0x290>)
 800ee74:	695b      	ldr	r3, [r3, #20]
 800ee76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ee7a:	2be0      	cmp	r3, #224	; 0xe0
 800ee7c:	f000 83b3 	beq.w	800f5e6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ee80:	4b8d      	ldr	r3, [pc, #564]	; (800f0b8 <tcp_input+0x28c>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	899b      	ldrh	r3, [r3, #12]
 800ee86:	b29b      	uxth	r3, r3
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f7fc fc3b 	bl	800b704 <lwip_htons>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	0b1b      	lsrs	r3, r3, #12
 800ee92:	b29b      	uxth	r3, r3
 800ee94:	b2db      	uxtb	r3, r3
 800ee96:	009b      	lsls	r3, r3, #2
 800ee98:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ee9a:	7cbb      	ldrb	r3, [r7, #18]
 800ee9c:	2b13      	cmp	r3, #19
 800ee9e:	f240 83a4 	bls.w	800f5ea <tcp_input+0x7be>
 800eea2:	7cbb      	ldrb	r3, [r7, #18]
 800eea4:	b29a      	uxth	r2, r3
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	891b      	ldrh	r3, [r3, #8]
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	f200 839d 	bhi.w	800f5ea <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800eeb0:	7cbb      	ldrb	r3, [r7, #18]
 800eeb2:	b29b      	uxth	r3, r3
 800eeb4:	3b14      	subs	r3, #20
 800eeb6:	b29a      	uxth	r2, r3
 800eeb8:	4b81      	ldr	r3, [pc, #516]	; (800f0c0 <tcp_input+0x294>)
 800eeba:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800eebc:	4b81      	ldr	r3, [pc, #516]	; (800f0c4 <tcp_input+0x298>)
 800eebe:	2200      	movs	r2, #0
 800eec0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	895a      	ldrh	r2, [r3, #10]
 800eec6:	7cbb      	ldrb	r3, [r7, #18]
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d309      	bcc.n	800eee2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800eece:	4b7c      	ldr	r3, [pc, #496]	; (800f0c0 <tcp_input+0x294>)
 800eed0:	881a      	ldrh	r2, [r3, #0]
 800eed2:	4b7d      	ldr	r3, [pc, #500]	; (800f0c8 <tcp_input+0x29c>)
 800eed4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800eed6:	7cbb      	ldrb	r3, [r7, #18]
 800eed8:	4619      	mov	r1, r3
 800eeda:	6878      	ldr	r0, [r7, #4]
 800eedc:	f7fd fed4 	bl	800cc88 <pbuf_remove_header>
 800eee0:	e04e      	b.n	800ef80 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d105      	bne.n	800eef6 <tcp_input+0xca>
 800eeea:	4b70      	ldr	r3, [pc, #448]	; (800f0ac <tcp_input+0x280>)
 800eeec:	22c2      	movs	r2, #194	; 0xc2
 800eeee:	4977      	ldr	r1, [pc, #476]	; (800f0cc <tcp_input+0x2a0>)
 800eef0:	4870      	ldr	r0, [pc, #448]	; (800f0b4 <tcp_input+0x288>)
 800eef2:	f007 fea7 	bl	8016c44 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800eef6:	2114      	movs	r1, #20
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f7fd fec5 	bl	800cc88 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	895a      	ldrh	r2, [r3, #10]
 800ef02:	4b71      	ldr	r3, [pc, #452]	; (800f0c8 <tcp_input+0x29c>)
 800ef04:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ef06:	4b6e      	ldr	r3, [pc, #440]	; (800f0c0 <tcp_input+0x294>)
 800ef08:	881a      	ldrh	r2, [r3, #0]
 800ef0a:	4b6f      	ldr	r3, [pc, #444]	; (800f0c8 <tcp_input+0x29c>)
 800ef0c:	881b      	ldrh	r3, [r3, #0]
 800ef0e:	1ad3      	subs	r3, r2, r3
 800ef10:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ef12:	4b6d      	ldr	r3, [pc, #436]	; (800f0c8 <tcp_input+0x29c>)
 800ef14:	881b      	ldrh	r3, [r3, #0]
 800ef16:	4619      	mov	r1, r3
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f7fd feb5 	bl	800cc88 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	895b      	ldrh	r3, [r3, #10]
 800ef24:	8a3a      	ldrh	r2, [r7, #16]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	f200 8361 	bhi.w	800f5ee <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	685b      	ldr	r3, [r3, #4]
 800ef32:	4a64      	ldr	r2, [pc, #400]	; (800f0c4 <tcp_input+0x298>)
 800ef34:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	8a3a      	ldrh	r2, [r7, #16]
 800ef3c:	4611      	mov	r1, r2
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7fd fea2 	bl	800cc88 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	891a      	ldrh	r2, [r3, #8]
 800ef48:	8a3b      	ldrh	r3, [r7, #16]
 800ef4a:	1ad3      	subs	r3, r2, r3
 800ef4c:	b29a      	uxth	r2, r3
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	895b      	ldrh	r3, [r3, #10]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d005      	beq.n	800ef66 <tcp_input+0x13a>
 800ef5a:	4b54      	ldr	r3, [pc, #336]	; (800f0ac <tcp_input+0x280>)
 800ef5c:	22df      	movs	r2, #223	; 0xdf
 800ef5e:	495c      	ldr	r1, [pc, #368]	; (800f0d0 <tcp_input+0x2a4>)
 800ef60:	4854      	ldr	r0, [pc, #336]	; (800f0b4 <tcp_input+0x288>)
 800ef62:	f007 fe6f 	bl	8016c44 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	891a      	ldrh	r2, [r3, #8]
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	891b      	ldrh	r3, [r3, #8]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d005      	beq.n	800ef80 <tcp_input+0x154>
 800ef74:	4b4d      	ldr	r3, [pc, #308]	; (800f0ac <tcp_input+0x280>)
 800ef76:	22e0      	movs	r2, #224	; 0xe0
 800ef78:	4956      	ldr	r1, [pc, #344]	; (800f0d4 <tcp_input+0x2a8>)
 800ef7a:	484e      	ldr	r0, [pc, #312]	; (800f0b4 <tcp_input+0x288>)
 800ef7c:	f007 fe62 	bl	8016c44 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ef80:	4b4d      	ldr	r3, [pc, #308]	; (800f0b8 <tcp_input+0x28c>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	881b      	ldrh	r3, [r3, #0]
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	4a4b      	ldr	r2, [pc, #300]	; (800f0b8 <tcp_input+0x28c>)
 800ef8a:	6814      	ldr	r4, [r2, #0]
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f7fc fbb9 	bl	800b704 <lwip_htons>
 800ef92:	4603      	mov	r3, r0
 800ef94:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ef96:	4b48      	ldr	r3, [pc, #288]	; (800f0b8 <tcp_input+0x28c>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	885b      	ldrh	r3, [r3, #2]
 800ef9c:	b29b      	uxth	r3, r3
 800ef9e:	4a46      	ldr	r2, [pc, #280]	; (800f0b8 <tcp_input+0x28c>)
 800efa0:	6814      	ldr	r4, [r2, #0]
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7fc fbae 	bl	800b704 <lwip_htons>
 800efa8:	4603      	mov	r3, r0
 800efaa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800efac:	4b42      	ldr	r3, [pc, #264]	; (800f0b8 <tcp_input+0x28c>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	685b      	ldr	r3, [r3, #4]
 800efb2:	4a41      	ldr	r2, [pc, #260]	; (800f0b8 <tcp_input+0x28c>)
 800efb4:	6814      	ldr	r4, [r2, #0]
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7fc fbb9 	bl	800b72e <lwip_htonl>
 800efbc:	4603      	mov	r3, r0
 800efbe:	6063      	str	r3, [r4, #4]
 800efc0:	6863      	ldr	r3, [r4, #4]
 800efc2:	4a45      	ldr	r2, [pc, #276]	; (800f0d8 <tcp_input+0x2ac>)
 800efc4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800efc6:	4b3c      	ldr	r3, [pc, #240]	; (800f0b8 <tcp_input+0x28c>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	689b      	ldr	r3, [r3, #8]
 800efcc:	4a3a      	ldr	r2, [pc, #232]	; (800f0b8 <tcp_input+0x28c>)
 800efce:	6814      	ldr	r4, [r2, #0]
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7fc fbac 	bl	800b72e <lwip_htonl>
 800efd6:	4603      	mov	r3, r0
 800efd8:	60a3      	str	r3, [r4, #8]
 800efda:	68a3      	ldr	r3, [r4, #8]
 800efdc:	4a3f      	ldr	r2, [pc, #252]	; (800f0dc <tcp_input+0x2b0>)
 800efde:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800efe0:	4b35      	ldr	r3, [pc, #212]	; (800f0b8 <tcp_input+0x28c>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	89db      	ldrh	r3, [r3, #14]
 800efe6:	b29b      	uxth	r3, r3
 800efe8:	4a33      	ldr	r2, [pc, #204]	; (800f0b8 <tcp_input+0x28c>)
 800efea:	6814      	ldr	r4, [r2, #0]
 800efec:	4618      	mov	r0, r3
 800efee:	f7fc fb89 	bl	800b704 <lwip_htons>
 800eff2:	4603      	mov	r3, r0
 800eff4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800eff6:	4b30      	ldr	r3, [pc, #192]	; (800f0b8 <tcp_input+0x28c>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	899b      	ldrh	r3, [r3, #12]
 800effc:	b29b      	uxth	r3, r3
 800effe:	4618      	mov	r0, r3
 800f000:	f7fc fb80 	bl	800b704 <lwip_htons>
 800f004:	4603      	mov	r3, r0
 800f006:	b2db      	uxtb	r3, r3
 800f008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f00c:	b2da      	uxtb	r2, r3
 800f00e:	4b34      	ldr	r3, [pc, #208]	; (800f0e0 <tcp_input+0x2b4>)
 800f010:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	891a      	ldrh	r2, [r3, #8]
 800f016:	4b33      	ldr	r3, [pc, #204]	; (800f0e4 <tcp_input+0x2b8>)
 800f018:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f01a:	4b31      	ldr	r3, [pc, #196]	; (800f0e0 <tcp_input+0x2b4>)
 800f01c:	781b      	ldrb	r3, [r3, #0]
 800f01e:	f003 0303 	and.w	r3, r3, #3
 800f022:	2b00      	cmp	r3, #0
 800f024:	d00c      	beq.n	800f040 <tcp_input+0x214>
    tcplen++;
 800f026:	4b2f      	ldr	r3, [pc, #188]	; (800f0e4 <tcp_input+0x2b8>)
 800f028:	881b      	ldrh	r3, [r3, #0]
 800f02a:	3301      	adds	r3, #1
 800f02c:	b29a      	uxth	r2, r3
 800f02e:	4b2d      	ldr	r3, [pc, #180]	; (800f0e4 <tcp_input+0x2b8>)
 800f030:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	891a      	ldrh	r2, [r3, #8]
 800f036:	4b2b      	ldr	r3, [pc, #172]	; (800f0e4 <tcp_input+0x2b8>)
 800f038:	881b      	ldrh	r3, [r3, #0]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	f200 82d9 	bhi.w	800f5f2 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f040:	2300      	movs	r3, #0
 800f042:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f044:	4b28      	ldr	r3, [pc, #160]	; (800f0e8 <tcp_input+0x2bc>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	61fb      	str	r3, [r7, #28]
 800f04a:	e09d      	b.n	800f188 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f04c:	69fb      	ldr	r3, [r7, #28]
 800f04e:	7d1b      	ldrb	r3, [r3, #20]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d105      	bne.n	800f060 <tcp_input+0x234>
 800f054:	4b15      	ldr	r3, [pc, #84]	; (800f0ac <tcp_input+0x280>)
 800f056:	22fb      	movs	r2, #251	; 0xfb
 800f058:	4924      	ldr	r1, [pc, #144]	; (800f0ec <tcp_input+0x2c0>)
 800f05a:	4816      	ldr	r0, [pc, #88]	; (800f0b4 <tcp_input+0x288>)
 800f05c:	f007 fdf2 	bl	8016c44 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f060:	69fb      	ldr	r3, [r7, #28]
 800f062:	7d1b      	ldrb	r3, [r3, #20]
 800f064:	2b0a      	cmp	r3, #10
 800f066:	d105      	bne.n	800f074 <tcp_input+0x248>
 800f068:	4b10      	ldr	r3, [pc, #64]	; (800f0ac <tcp_input+0x280>)
 800f06a:	22fc      	movs	r2, #252	; 0xfc
 800f06c:	4920      	ldr	r1, [pc, #128]	; (800f0f0 <tcp_input+0x2c4>)
 800f06e:	4811      	ldr	r0, [pc, #68]	; (800f0b4 <tcp_input+0x288>)
 800f070:	f007 fde8 	bl	8016c44 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f074:	69fb      	ldr	r3, [r7, #28]
 800f076:	7d1b      	ldrb	r3, [r3, #20]
 800f078:	2b01      	cmp	r3, #1
 800f07a:	d105      	bne.n	800f088 <tcp_input+0x25c>
 800f07c:	4b0b      	ldr	r3, [pc, #44]	; (800f0ac <tcp_input+0x280>)
 800f07e:	22fd      	movs	r2, #253	; 0xfd
 800f080:	491c      	ldr	r1, [pc, #112]	; (800f0f4 <tcp_input+0x2c8>)
 800f082:	480c      	ldr	r0, [pc, #48]	; (800f0b4 <tcp_input+0x288>)
 800f084:	f007 fdde 	bl	8016c44 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f088:	69fb      	ldr	r3, [r7, #28]
 800f08a:	7a1b      	ldrb	r3, [r3, #8]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d033      	beq.n	800f0f8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f090:	69fb      	ldr	r3, [r7, #28]
 800f092:	7a1a      	ldrb	r2, [r3, #8]
 800f094:	4b09      	ldr	r3, [pc, #36]	; (800f0bc <tcp_input+0x290>)
 800f096:	685b      	ldr	r3, [r3, #4]
 800f098:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f09c:	3301      	adds	r3, #1
 800f09e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d029      	beq.n	800f0f8 <tcp_input+0x2cc>
      prev = pcb;
 800f0a4:	69fb      	ldr	r3, [r7, #28]
 800f0a6:	61bb      	str	r3, [r7, #24]
      continue;
 800f0a8:	e06b      	b.n	800f182 <tcp_input+0x356>
 800f0aa:	bf00      	nop
 800f0ac:	080197fc 	.word	0x080197fc
 800f0b0:	08019830 	.word	0x08019830
 800f0b4:	08019848 	.word	0x08019848
 800f0b8:	20006858 	.word	0x20006858
 800f0bc:	20009ca0 	.word	0x20009ca0
 800f0c0:	2000685c 	.word	0x2000685c
 800f0c4:	20006860 	.word	0x20006860
 800f0c8:	2000685e 	.word	0x2000685e
 800f0cc:	08019870 	.word	0x08019870
 800f0d0:	08019880 	.word	0x08019880
 800f0d4:	0801988c 	.word	0x0801988c
 800f0d8:	20006868 	.word	0x20006868
 800f0dc:	2000686c 	.word	0x2000686c
 800f0e0:	20006874 	.word	0x20006874
 800f0e4:	20006872 	.word	0x20006872
 800f0e8:	2000d3b4 	.word	0x2000d3b4
 800f0ec:	080198ac 	.word	0x080198ac
 800f0f0:	080198d4 	.word	0x080198d4
 800f0f4:	08019900 	.word	0x08019900
    }

    if (pcb->remote_port == tcphdr->src &&
 800f0f8:	69fb      	ldr	r3, [r7, #28]
 800f0fa:	8b1a      	ldrh	r2, [r3, #24]
 800f0fc:	4b94      	ldr	r3, [pc, #592]	; (800f350 <tcp_input+0x524>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	881b      	ldrh	r3, [r3, #0]
 800f102:	b29b      	uxth	r3, r3
 800f104:	429a      	cmp	r2, r3
 800f106:	d13a      	bne.n	800f17e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f108:	69fb      	ldr	r3, [r7, #28]
 800f10a:	8ada      	ldrh	r2, [r3, #22]
 800f10c:	4b90      	ldr	r3, [pc, #576]	; (800f350 <tcp_input+0x524>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	885b      	ldrh	r3, [r3, #2]
 800f112:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f114:	429a      	cmp	r2, r3
 800f116:	d132      	bne.n	800f17e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f118:	69fb      	ldr	r3, [r7, #28]
 800f11a:	685a      	ldr	r2, [r3, #4]
 800f11c:	4b8d      	ldr	r3, [pc, #564]	; (800f354 <tcp_input+0x528>)
 800f11e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f120:	429a      	cmp	r2, r3
 800f122:	d12c      	bne.n	800f17e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f124:	69fb      	ldr	r3, [r7, #28]
 800f126:	681a      	ldr	r2, [r3, #0]
 800f128:	4b8a      	ldr	r3, [pc, #552]	; (800f354 <tcp_input+0x528>)
 800f12a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f12c:	429a      	cmp	r2, r3
 800f12e:	d126      	bne.n	800f17e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	68db      	ldr	r3, [r3, #12]
 800f134:	69fa      	ldr	r2, [r7, #28]
 800f136:	429a      	cmp	r2, r3
 800f138:	d106      	bne.n	800f148 <tcp_input+0x31c>
 800f13a:	4b87      	ldr	r3, [pc, #540]	; (800f358 <tcp_input+0x52c>)
 800f13c:	f240 120d 	movw	r2, #269	; 0x10d
 800f140:	4986      	ldr	r1, [pc, #536]	; (800f35c <tcp_input+0x530>)
 800f142:	4887      	ldr	r0, [pc, #540]	; (800f360 <tcp_input+0x534>)
 800f144:	f007 fd7e 	bl	8016c44 <iprintf>
      if (prev != NULL) {
 800f148:	69bb      	ldr	r3, [r7, #24]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d00a      	beq.n	800f164 <tcp_input+0x338>
        prev->next = pcb->next;
 800f14e:	69fb      	ldr	r3, [r7, #28]
 800f150:	68da      	ldr	r2, [r3, #12]
 800f152:	69bb      	ldr	r3, [r7, #24]
 800f154:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f156:	4b83      	ldr	r3, [pc, #524]	; (800f364 <tcp_input+0x538>)
 800f158:	681a      	ldr	r2, [r3, #0]
 800f15a:	69fb      	ldr	r3, [r7, #28]
 800f15c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f15e:	4a81      	ldr	r2, [pc, #516]	; (800f364 <tcp_input+0x538>)
 800f160:	69fb      	ldr	r3, [r7, #28]
 800f162:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f164:	69fb      	ldr	r3, [r7, #28]
 800f166:	68db      	ldr	r3, [r3, #12]
 800f168:	69fa      	ldr	r2, [r7, #28]
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d111      	bne.n	800f192 <tcp_input+0x366>
 800f16e:	4b7a      	ldr	r3, [pc, #488]	; (800f358 <tcp_input+0x52c>)
 800f170:	f240 1215 	movw	r2, #277	; 0x115
 800f174:	497c      	ldr	r1, [pc, #496]	; (800f368 <tcp_input+0x53c>)
 800f176:	487a      	ldr	r0, [pc, #488]	; (800f360 <tcp_input+0x534>)
 800f178:	f007 fd64 	bl	8016c44 <iprintf>
      break;
 800f17c:	e009      	b.n	800f192 <tcp_input+0x366>
    }
    prev = pcb;
 800f17e:	69fb      	ldr	r3, [r7, #28]
 800f180:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f182:	69fb      	ldr	r3, [r7, #28]
 800f184:	68db      	ldr	r3, [r3, #12]
 800f186:	61fb      	str	r3, [r7, #28]
 800f188:	69fb      	ldr	r3, [r7, #28]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	f47f af5e 	bne.w	800f04c <tcp_input+0x220>
 800f190:	e000      	b.n	800f194 <tcp_input+0x368>
      break;
 800f192:	bf00      	nop
  }

  if (pcb == NULL) {
 800f194:	69fb      	ldr	r3, [r7, #28]
 800f196:	2b00      	cmp	r3, #0
 800f198:	f040 8095 	bne.w	800f2c6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f19c:	4b73      	ldr	r3, [pc, #460]	; (800f36c <tcp_input+0x540>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	61fb      	str	r3, [r7, #28]
 800f1a2:	e03f      	b.n	800f224 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f1a4:	69fb      	ldr	r3, [r7, #28]
 800f1a6:	7d1b      	ldrb	r3, [r3, #20]
 800f1a8:	2b0a      	cmp	r3, #10
 800f1aa:	d006      	beq.n	800f1ba <tcp_input+0x38e>
 800f1ac:	4b6a      	ldr	r3, [pc, #424]	; (800f358 <tcp_input+0x52c>)
 800f1ae:	f240 121f 	movw	r2, #287	; 0x11f
 800f1b2:	496f      	ldr	r1, [pc, #444]	; (800f370 <tcp_input+0x544>)
 800f1b4:	486a      	ldr	r0, [pc, #424]	; (800f360 <tcp_input+0x534>)
 800f1b6:	f007 fd45 	bl	8016c44 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f1ba:	69fb      	ldr	r3, [r7, #28]
 800f1bc:	7a1b      	ldrb	r3, [r3, #8]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d009      	beq.n	800f1d6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f1c2:	69fb      	ldr	r3, [r7, #28]
 800f1c4:	7a1a      	ldrb	r2, [r3, #8]
 800f1c6:	4b63      	ldr	r3, [pc, #396]	; (800f354 <tcp_input+0x528>)
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f1ce:	3301      	adds	r3, #1
 800f1d0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d122      	bne.n	800f21c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f1d6:	69fb      	ldr	r3, [r7, #28]
 800f1d8:	8b1a      	ldrh	r2, [r3, #24]
 800f1da:	4b5d      	ldr	r3, [pc, #372]	; (800f350 <tcp_input+0x524>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	881b      	ldrh	r3, [r3, #0]
 800f1e0:	b29b      	uxth	r3, r3
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d11b      	bne.n	800f21e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f1e6:	69fb      	ldr	r3, [r7, #28]
 800f1e8:	8ada      	ldrh	r2, [r3, #22]
 800f1ea:	4b59      	ldr	r3, [pc, #356]	; (800f350 <tcp_input+0x524>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	885b      	ldrh	r3, [r3, #2]
 800f1f0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d113      	bne.n	800f21e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f1f6:	69fb      	ldr	r3, [r7, #28]
 800f1f8:	685a      	ldr	r2, [r3, #4]
 800f1fa:	4b56      	ldr	r3, [pc, #344]	; (800f354 <tcp_input+0x528>)
 800f1fc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f1fe:	429a      	cmp	r2, r3
 800f200:	d10d      	bne.n	800f21e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f202:	69fb      	ldr	r3, [r7, #28]
 800f204:	681a      	ldr	r2, [r3, #0]
 800f206:	4b53      	ldr	r3, [pc, #332]	; (800f354 <tcp_input+0x528>)
 800f208:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f20a:	429a      	cmp	r2, r3
 800f20c:	d107      	bne.n	800f21e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f20e:	69f8      	ldr	r0, [r7, #28]
 800f210:	f000 fb54 	bl	800f8bc <tcp_timewait_input>
        }
        pbuf_free(p);
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f7fd fdbd 	bl	800cd94 <pbuf_free>
        return;
 800f21a:	e1f0      	b.n	800f5fe <tcp_input+0x7d2>
        continue;
 800f21c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f21e:	69fb      	ldr	r3, [r7, #28]
 800f220:	68db      	ldr	r3, [r3, #12]
 800f222:	61fb      	str	r3, [r7, #28]
 800f224:	69fb      	ldr	r3, [r7, #28]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d1bc      	bne.n	800f1a4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f22a:	2300      	movs	r3, #0
 800f22c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f22e:	4b51      	ldr	r3, [pc, #324]	; (800f374 <tcp_input+0x548>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	617b      	str	r3, [r7, #20]
 800f234:	e02a      	b.n	800f28c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	7a1b      	ldrb	r3, [r3, #8]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d00c      	beq.n	800f258 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f23e:	697b      	ldr	r3, [r7, #20]
 800f240:	7a1a      	ldrb	r2, [r3, #8]
 800f242:	4b44      	ldr	r3, [pc, #272]	; (800f354 <tcp_input+0x528>)
 800f244:	685b      	ldr	r3, [r3, #4]
 800f246:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f24a:	3301      	adds	r3, #1
 800f24c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f24e:	429a      	cmp	r2, r3
 800f250:	d002      	beq.n	800f258 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	61bb      	str	r3, [r7, #24]
        continue;
 800f256:	e016      	b.n	800f286 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	8ada      	ldrh	r2, [r3, #22]
 800f25c:	4b3c      	ldr	r3, [pc, #240]	; (800f350 <tcp_input+0x524>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	885b      	ldrh	r3, [r3, #2]
 800f262:	b29b      	uxth	r3, r3
 800f264:	429a      	cmp	r2, r3
 800f266:	d10c      	bne.n	800f282 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	681a      	ldr	r2, [r3, #0]
 800f26c:	4b39      	ldr	r3, [pc, #228]	; (800f354 <tcp_input+0x528>)
 800f26e:	695b      	ldr	r3, [r3, #20]
 800f270:	429a      	cmp	r2, r3
 800f272:	d00f      	beq.n	800f294 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d00d      	beq.n	800f296 <tcp_input+0x46a>
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d009      	beq.n	800f296 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	68db      	ldr	r3, [r3, #12]
 800f28a:	617b      	str	r3, [r7, #20]
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d1d1      	bne.n	800f236 <tcp_input+0x40a>
 800f292:	e000      	b.n	800f296 <tcp_input+0x46a>
            break;
 800f294:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d014      	beq.n	800f2c6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f29c:	69bb      	ldr	r3, [r7, #24]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d00a      	beq.n	800f2b8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	68da      	ldr	r2, [r3, #12]
 800f2a6:	69bb      	ldr	r3, [r7, #24]
 800f2a8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f2aa:	4b32      	ldr	r3, [pc, #200]	; (800f374 <tcp_input+0x548>)
 800f2ac:	681a      	ldr	r2, [r3, #0]
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f2b2:	4a30      	ldr	r2, [pc, #192]	; (800f374 <tcp_input+0x548>)
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f2b8:	6978      	ldr	r0, [r7, #20]
 800f2ba:	f000 fa01 	bl	800f6c0 <tcp_listen_input>
      }
      pbuf_free(p);
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f7fd fd68 	bl	800cd94 <pbuf_free>
      return;
 800f2c4:	e19b      	b.n	800f5fe <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f2c6:	69fb      	ldr	r3, [r7, #28]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	f000 8160 	beq.w	800f58e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f2ce:	4b2a      	ldr	r3, [pc, #168]	; (800f378 <tcp_input+0x54c>)
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	891a      	ldrh	r2, [r3, #8]
 800f2d8:	4b27      	ldr	r3, [pc, #156]	; (800f378 <tcp_input+0x54c>)
 800f2da:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f2dc:	4a26      	ldr	r2, [pc, #152]	; (800f378 <tcp_input+0x54c>)
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f2e2:	4b1b      	ldr	r3, [pc, #108]	; (800f350 <tcp_input+0x524>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	4a24      	ldr	r2, [pc, #144]	; (800f378 <tcp_input+0x54c>)
 800f2e8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f2ea:	4b24      	ldr	r3, [pc, #144]	; (800f37c <tcp_input+0x550>)
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f2f0:	4b23      	ldr	r3, [pc, #140]	; (800f380 <tcp_input+0x554>)
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f2f6:	4b23      	ldr	r3, [pc, #140]	; (800f384 <tcp_input+0x558>)
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f2fc:	4b22      	ldr	r3, [pc, #136]	; (800f388 <tcp_input+0x55c>)
 800f2fe:	781b      	ldrb	r3, [r3, #0]
 800f300:	f003 0308 	and.w	r3, r3, #8
 800f304:	2b00      	cmp	r3, #0
 800f306:	d006      	beq.n	800f316 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	7b5b      	ldrb	r3, [r3, #13]
 800f30c:	f043 0301 	orr.w	r3, r3, #1
 800f310:	b2da      	uxtb	r2, r3
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f316:	69fb      	ldr	r3, [r7, #28]
 800f318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d038      	beq.n	800f390 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f31e:	69f8      	ldr	r0, [r7, #28]
 800f320:	f7ff f870 	bl	800e404 <tcp_process_refused_data>
 800f324:	4603      	mov	r3, r0
 800f326:	f113 0f0d 	cmn.w	r3, #13
 800f32a:	d007      	beq.n	800f33c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f32c:	69fb      	ldr	r3, [r7, #28]
 800f32e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f330:	2b00      	cmp	r3, #0
 800f332:	d02d      	beq.n	800f390 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f334:	4b15      	ldr	r3, [pc, #84]	; (800f38c <tcp_input+0x560>)
 800f336:	881b      	ldrh	r3, [r3, #0]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d029      	beq.n	800f390 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f33c:	69fb      	ldr	r3, [r7, #28]
 800f33e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f340:	2b00      	cmp	r3, #0
 800f342:	f040 8104 	bne.w	800f54e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f346:	69f8      	ldr	r0, [r7, #28]
 800f348:	f003 fe16 	bl	8012f78 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f34c:	e0ff      	b.n	800f54e <tcp_input+0x722>
 800f34e:	bf00      	nop
 800f350:	20006858 	.word	0x20006858
 800f354:	20009ca0 	.word	0x20009ca0
 800f358:	080197fc 	.word	0x080197fc
 800f35c:	08019928 	.word	0x08019928
 800f360:	08019848 	.word	0x08019848
 800f364:	2000d3b4 	.word	0x2000d3b4
 800f368:	08019954 	.word	0x08019954
 800f36c:	2000d3c4 	.word	0x2000d3c4
 800f370:	08019980 	.word	0x08019980
 800f374:	2000d3bc 	.word	0x2000d3bc
 800f378:	20006848 	.word	0x20006848
 800f37c:	20006878 	.word	0x20006878
 800f380:	20006875 	.word	0x20006875
 800f384:	20006870 	.word	0x20006870
 800f388:	20006874 	.word	0x20006874
 800f38c:	20006872 	.word	0x20006872
      }
    }
    tcp_input_pcb = pcb;
 800f390:	4a9c      	ldr	r2, [pc, #624]	; (800f604 <tcp_input+0x7d8>)
 800f392:	69fb      	ldr	r3, [r7, #28]
 800f394:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f396:	69f8      	ldr	r0, [r7, #28]
 800f398:	f000 fb0a 	bl	800f9b0 <tcp_process>
 800f39c:	4603      	mov	r3, r0
 800f39e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f3a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f3a4:	f113 0f0d 	cmn.w	r3, #13
 800f3a8:	f000 80d3 	beq.w	800f552 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800f3ac:	4b96      	ldr	r3, [pc, #600]	; (800f608 <tcp_input+0x7dc>)
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	f003 0308 	and.w	r3, r3, #8
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d015      	beq.n	800f3e4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f3b8:	69fb      	ldr	r3, [r7, #28]
 800f3ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d008      	beq.n	800f3d4 <tcp_input+0x5a8>
 800f3c2:	69fb      	ldr	r3, [r7, #28]
 800f3c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3c8:	69fa      	ldr	r2, [r7, #28]
 800f3ca:	6912      	ldr	r2, [r2, #16]
 800f3cc:	f06f 010d 	mvn.w	r1, #13
 800f3d0:	4610      	mov	r0, r2
 800f3d2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f3d4:	69f9      	ldr	r1, [r7, #28]
 800f3d6:	488d      	ldr	r0, [pc, #564]	; (800f60c <tcp_input+0x7e0>)
 800f3d8:	f7ff fbb0 	bl	800eb3c <tcp_pcb_remove>
        tcp_free(pcb);
 800f3dc:	69f8      	ldr	r0, [r7, #28]
 800f3de:	f7fd ff95 	bl	800d30c <tcp_free>
 800f3e2:	e0c1      	b.n	800f568 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f3e8:	4b89      	ldr	r3, [pc, #548]	; (800f610 <tcp_input+0x7e4>)
 800f3ea:	881b      	ldrh	r3, [r3, #0]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d01d      	beq.n	800f42c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f3f0:	4b87      	ldr	r3, [pc, #540]	; (800f610 <tcp_input+0x7e4>)
 800f3f2:	881b      	ldrh	r3, [r3, #0]
 800f3f4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f3f6:	69fb      	ldr	r3, [r7, #28]
 800f3f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d00a      	beq.n	800f416 <tcp_input+0x5ea>
 800f400:	69fb      	ldr	r3, [r7, #28]
 800f402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f406:	69fa      	ldr	r2, [r7, #28]
 800f408:	6910      	ldr	r0, [r2, #16]
 800f40a:	89fa      	ldrh	r2, [r7, #14]
 800f40c:	69f9      	ldr	r1, [r7, #28]
 800f40e:	4798      	blx	r3
 800f410:	4603      	mov	r3, r0
 800f412:	74fb      	strb	r3, [r7, #19]
 800f414:	e001      	b.n	800f41a <tcp_input+0x5ee>
 800f416:	2300      	movs	r3, #0
 800f418:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f41a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f41e:	f113 0f0d 	cmn.w	r3, #13
 800f422:	f000 8098 	beq.w	800f556 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f426:	4b7a      	ldr	r3, [pc, #488]	; (800f610 <tcp_input+0x7e4>)
 800f428:	2200      	movs	r2, #0
 800f42a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f42c:	69f8      	ldr	r0, [r7, #28]
 800f42e:	f000 f907 	bl	800f640 <tcp_input_delayed_close>
 800f432:	4603      	mov	r3, r0
 800f434:	2b00      	cmp	r3, #0
 800f436:	f040 8090 	bne.w	800f55a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f43a:	4b76      	ldr	r3, [pc, #472]	; (800f614 <tcp_input+0x7e8>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d041      	beq.n	800f4c6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f446:	2b00      	cmp	r3, #0
 800f448:	d006      	beq.n	800f458 <tcp_input+0x62c>
 800f44a:	4b73      	ldr	r3, [pc, #460]	; (800f618 <tcp_input+0x7ec>)
 800f44c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f450:	4972      	ldr	r1, [pc, #456]	; (800f61c <tcp_input+0x7f0>)
 800f452:	4873      	ldr	r0, [pc, #460]	; (800f620 <tcp_input+0x7f4>)
 800f454:	f007 fbf6 	bl	8016c44 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f458:	69fb      	ldr	r3, [r7, #28]
 800f45a:	8b5b      	ldrh	r3, [r3, #26]
 800f45c:	f003 0310 	and.w	r3, r3, #16
 800f460:	2b00      	cmp	r3, #0
 800f462:	d008      	beq.n	800f476 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f464:	4b6b      	ldr	r3, [pc, #428]	; (800f614 <tcp_input+0x7e8>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	4618      	mov	r0, r3
 800f46a:	f7fd fc93 	bl	800cd94 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f46e:	69f8      	ldr	r0, [r7, #28]
 800f470:	f7fe fa90 	bl	800d994 <tcp_abort>
            goto aborted;
 800f474:	e078      	b.n	800f568 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f476:	69fb      	ldr	r3, [r7, #28]
 800f478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d00c      	beq.n	800f49a <tcp_input+0x66e>
 800f480:	69fb      	ldr	r3, [r7, #28]
 800f482:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f486:	69fb      	ldr	r3, [r7, #28]
 800f488:	6918      	ldr	r0, [r3, #16]
 800f48a:	4b62      	ldr	r3, [pc, #392]	; (800f614 <tcp_input+0x7e8>)
 800f48c:	681a      	ldr	r2, [r3, #0]
 800f48e:	2300      	movs	r3, #0
 800f490:	69f9      	ldr	r1, [r7, #28]
 800f492:	47a0      	blx	r4
 800f494:	4603      	mov	r3, r0
 800f496:	74fb      	strb	r3, [r7, #19]
 800f498:	e008      	b.n	800f4ac <tcp_input+0x680>
 800f49a:	4b5e      	ldr	r3, [pc, #376]	; (800f614 <tcp_input+0x7e8>)
 800f49c:	681a      	ldr	r2, [r3, #0]
 800f49e:	2300      	movs	r3, #0
 800f4a0:	69f9      	ldr	r1, [r7, #28]
 800f4a2:	2000      	movs	r0, #0
 800f4a4:	f7ff f884 	bl	800e5b0 <tcp_recv_null>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f4ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f4b0:	f113 0f0d 	cmn.w	r3, #13
 800f4b4:	d053      	beq.n	800f55e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f4b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d003      	beq.n	800f4c6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f4be:	4b55      	ldr	r3, [pc, #340]	; (800f614 <tcp_input+0x7e8>)
 800f4c0:	681a      	ldr	r2, [r3, #0]
 800f4c2:	69fb      	ldr	r3, [r7, #28]
 800f4c4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f4c6:	4b50      	ldr	r3, [pc, #320]	; (800f608 <tcp_input+0x7dc>)
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	f003 0320 	and.w	r3, r3, #32
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d030      	beq.n	800f534 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800f4d2:	69fb      	ldr	r3, [r7, #28]
 800f4d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d009      	beq.n	800f4ee <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f4da:	69fb      	ldr	r3, [r7, #28]
 800f4dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f4de:	7b5a      	ldrb	r2, [r3, #13]
 800f4e0:	69fb      	ldr	r3, [r7, #28]
 800f4e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f4e4:	f042 0220 	orr.w	r2, r2, #32
 800f4e8:	b2d2      	uxtb	r2, r2
 800f4ea:	735a      	strb	r2, [r3, #13]
 800f4ec:	e022      	b.n	800f534 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f4ee:	69fb      	ldr	r3, [r7, #28]
 800f4f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f4f2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f4f6:	d005      	beq.n	800f504 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800f4f8:	69fb      	ldr	r3, [r7, #28]
 800f4fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f4fc:	3301      	adds	r3, #1
 800f4fe:	b29a      	uxth	r2, r3
 800f500:	69fb      	ldr	r3, [r7, #28]
 800f502:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d00b      	beq.n	800f526 <tcp_input+0x6fa>
 800f50e:	69fb      	ldr	r3, [r7, #28]
 800f510:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f514:	69fb      	ldr	r3, [r7, #28]
 800f516:	6918      	ldr	r0, [r3, #16]
 800f518:	2300      	movs	r3, #0
 800f51a:	2200      	movs	r2, #0
 800f51c:	69f9      	ldr	r1, [r7, #28]
 800f51e:	47a0      	blx	r4
 800f520:	4603      	mov	r3, r0
 800f522:	74fb      	strb	r3, [r7, #19]
 800f524:	e001      	b.n	800f52a <tcp_input+0x6fe>
 800f526:	2300      	movs	r3, #0
 800f528:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f52a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f52e:	f113 0f0d 	cmn.w	r3, #13
 800f532:	d016      	beq.n	800f562 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f534:	4b33      	ldr	r3, [pc, #204]	; (800f604 <tcp_input+0x7d8>)
 800f536:	2200      	movs	r2, #0
 800f538:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f53a:	69f8      	ldr	r0, [r7, #28]
 800f53c:	f000 f880 	bl	800f640 <tcp_input_delayed_close>
 800f540:	4603      	mov	r3, r0
 800f542:	2b00      	cmp	r3, #0
 800f544:	d10f      	bne.n	800f566 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f546:	69f8      	ldr	r0, [r7, #28]
 800f548:	f002 ff10 	bl	801236c <tcp_output>
 800f54c:	e00c      	b.n	800f568 <tcp_input+0x73c>
        goto aborted;
 800f54e:	bf00      	nop
 800f550:	e00a      	b.n	800f568 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f552:	bf00      	nop
 800f554:	e008      	b.n	800f568 <tcp_input+0x73c>
              goto aborted;
 800f556:	bf00      	nop
 800f558:	e006      	b.n	800f568 <tcp_input+0x73c>
          goto aborted;
 800f55a:	bf00      	nop
 800f55c:	e004      	b.n	800f568 <tcp_input+0x73c>
            goto aborted;
 800f55e:	bf00      	nop
 800f560:	e002      	b.n	800f568 <tcp_input+0x73c>
              goto aborted;
 800f562:	bf00      	nop
 800f564:	e000      	b.n	800f568 <tcp_input+0x73c>
          goto aborted;
 800f566:	bf00      	nop
    tcp_input_pcb = NULL;
 800f568:	4b26      	ldr	r3, [pc, #152]	; (800f604 <tcp_input+0x7d8>)
 800f56a:	2200      	movs	r2, #0
 800f56c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f56e:	4b29      	ldr	r3, [pc, #164]	; (800f614 <tcp_input+0x7e8>)
 800f570:	2200      	movs	r2, #0
 800f572:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f574:	4b2b      	ldr	r3, [pc, #172]	; (800f624 <tcp_input+0x7f8>)
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d03f      	beq.n	800f5fc <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800f57c:	4b29      	ldr	r3, [pc, #164]	; (800f624 <tcp_input+0x7f8>)
 800f57e:	685b      	ldr	r3, [r3, #4]
 800f580:	4618      	mov	r0, r3
 800f582:	f7fd fc07 	bl	800cd94 <pbuf_free>
      inseg.p = NULL;
 800f586:	4b27      	ldr	r3, [pc, #156]	; (800f624 <tcp_input+0x7f8>)
 800f588:	2200      	movs	r2, #0
 800f58a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f58c:	e036      	b.n	800f5fc <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f58e:	4b26      	ldr	r3, [pc, #152]	; (800f628 <tcp_input+0x7fc>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	899b      	ldrh	r3, [r3, #12]
 800f594:	b29b      	uxth	r3, r3
 800f596:	4618      	mov	r0, r3
 800f598:	f7fc f8b4 	bl	800b704 <lwip_htons>
 800f59c:	4603      	mov	r3, r0
 800f59e:	b2db      	uxtb	r3, r3
 800f5a0:	f003 0304 	and.w	r3, r3, #4
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d118      	bne.n	800f5da <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5a8:	4b20      	ldr	r3, [pc, #128]	; (800f62c <tcp_input+0x800>)
 800f5aa:	6819      	ldr	r1, [r3, #0]
 800f5ac:	4b20      	ldr	r3, [pc, #128]	; (800f630 <tcp_input+0x804>)
 800f5ae:	881b      	ldrh	r3, [r3, #0]
 800f5b0:	461a      	mov	r2, r3
 800f5b2:	4b20      	ldr	r3, [pc, #128]	; (800f634 <tcp_input+0x808>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f5b8:	4b1b      	ldr	r3, [pc, #108]	; (800f628 <tcp_input+0x7fc>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5bc:	885b      	ldrh	r3, [r3, #2]
 800f5be:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f5c0:	4a19      	ldr	r2, [pc, #100]	; (800f628 <tcp_input+0x7fc>)
 800f5c2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5c4:	8812      	ldrh	r2, [r2, #0]
 800f5c6:	b292      	uxth	r2, r2
 800f5c8:	9202      	str	r2, [sp, #8]
 800f5ca:	9301      	str	r3, [sp, #4]
 800f5cc:	4b1a      	ldr	r3, [pc, #104]	; (800f638 <tcp_input+0x80c>)
 800f5ce:	9300      	str	r3, [sp, #0]
 800f5d0:	4b1a      	ldr	r3, [pc, #104]	; (800f63c <tcp_input+0x810>)
 800f5d2:	4602      	mov	r2, r0
 800f5d4:	2000      	movs	r0, #0
 800f5d6:	f003 fc7d 	bl	8012ed4 <tcp_rst>
    pbuf_free(p);
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f7fd fbda 	bl	800cd94 <pbuf_free>
  return;
 800f5e0:	e00c      	b.n	800f5fc <tcp_input+0x7d0>
    goto dropped;
 800f5e2:	bf00      	nop
 800f5e4:	e006      	b.n	800f5f4 <tcp_input+0x7c8>
    goto dropped;
 800f5e6:	bf00      	nop
 800f5e8:	e004      	b.n	800f5f4 <tcp_input+0x7c8>
    goto dropped;
 800f5ea:	bf00      	nop
 800f5ec:	e002      	b.n	800f5f4 <tcp_input+0x7c8>
      goto dropped;
 800f5ee:	bf00      	nop
 800f5f0:	e000      	b.n	800f5f4 <tcp_input+0x7c8>
      goto dropped;
 800f5f2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f7fd fbcd 	bl	800cd94 <pbuf_free>
 800f5fa:	e000      	b.n	800f5fe <tcp_input+0x7d2>
  return;
 800f5fc:	bf00      	nop
}
 800f5fe:	3724      	adds	r7, #36	; 0x24
 800f600:	46bd      	mov	sp, r7
 800f602:	bd90      	pop	{r4, r7, pc}
 800f604:	2000d3c8 	.word	0x2000d3c8
 800f608:	20006875 	.word	0x20006875
 800f60c:	2000d3b4 	.word	0x2000d3b4
 800f610:	20006870 	.word	0x20006870
 800f614:	20006878 	.word	0x20006878
 800f618:	080197fc 	.word	0x080197fc
 800f61c:	080199b0 	.word	0x080199b0
 800f620:	08019848 	.word	0x08019848
 800f624:	20006848 	.word	0x20006848
 800f628:	20006858 	.word	0x20006858
 800f62c:	2000686c 	.word	0x2000686c
 800f630:	20006872 	.word	0x20006872
 800f634:	20006868 	.word	0x20006868
 800f638:	20009cb0 	.word	0x20009cb0
 800f63c:	20009cb4 	.word	0x20009cb4

0800f640 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b082      	sub	sp, #8
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d106      	bne.n	800f65c <tcp_input_delayed_close+0x1c>
 800f64e:	4b17      	ldr	r3, [pc, #92]	; (800f6ac <tcp_input_delayed_close+0x6c>)
 800f650:	f240 225a 	movw	r2, #602	; 0x25a
 800f654:	4916      	ldr	r1, [pc, #88]	; (800f6b0 <tcp_input_delayed_close+0x70>)
 800f656:	4817      	ldr	r0, [pc, #92]	; (800f6b4 <tcp_input_delayed_close+0x74>)
 800f658:	f007 faf4 	bl	8016c44 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f65c:	4b16      	ldr	r3, [pc, #88]	; (800f6b8 <tcp_input_delayed_close+0x78>)
 800f65e:	781b      	ldrb	r3, [r3, #0]
 800f660:	f003 0310 	and.w	r3, r3, #16
 800f664:	2b00      	cmp	r3, #0
 800f666:	d01c      	beq.n	800f6a2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	8b5b      	ldrh	r3, [r3, #26]
 800f66c:	f003 0310 	and.w	r3, r3, #16
 800f670:	2b00      	cmp	r3, #0
 800f672:	d10d      	bne.n	800f690 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d008      	beq.n	800f690 <tcp_input_delayed_close+0x50>
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f684:	687a      	ldr	r2, [r7, #4]
 800f686:	6912      	ldr	r2, [r2, #16]
 800f688:	f06f 010e 	mvn.w	r1, #14
 800f68c:	4610      	mov	r0, r2
 800f68e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f690:	6879      	ldr	r1, [r7, #4]
 800f692:	480a      	ldr	r0, [pc, #40]	; (800f6bc <tcp_input_delayed_close+0x7c>)
 800f694:	f7ff fa52 	bl	800eb3c <tcp_pcb_remove>
    tcp_free(pcb);
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f7fd fe37 	bl	800d30c <tcp_free>
    return 1;
 800f69e:	2301      	movs	r3, #1
 800f6a0:	e000      	b.n	800f6a4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f6a2:	2300      	movs	r3, #0
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3708      	adds	r7, #8
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	080197fc 	.word	0x080197fc
 800f6b0:	080199cc 	.word	0x080199cc
 800f6b4:	08019848 	.word	0x08019848
 800f6b8:	20006875 	.word	0x20006875
 800f6bc:	2000d3b4 	.word	0x2000d3b4

0800f6c0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f6c0:	b590      	push	{r4, r7, lr}
 800f6c2:	b08b      	sub	sp, #44	; 0x2c
 800f6c4:	af04      	add	r7, sp, #16
 800f6c6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f6c8:	4b6f      	ldr	r3, [pc, #444]	; (800f888 <tcp_listen_input+0x1c8>)
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	f003 0304 	and.w	r3, r3, #4
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	f040 80d2 	bne.w	800f87a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d106      	bne.n	800f6ea <tcp_listen_input+0x2a>
 800f6dc:	4b6b      	ldr	r3, [pc, #428]	; (800f88c <tcp_listen_input+0x1cc>)
 800f6de:	f240 2281 	movw	r2, #641	; 0x281
 800f6e2:	496b      	ldr	r1, [pc, #428]	; (800f890 <tcp_listen_input+0x1d0>)
 800f6e4:	486b      	ldr	r0, [pc, #428]	; (800f894 <tcp_listen_input+0x1d4>)
 800f6e6:	f007 faad 	bl	8016c44 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f6ea:	4b67      	ldr	r3, [pc, #412]	; (800f888 <tcp_listen_input+0x1c8>)
 800f6ec:	781b      	ldrb	r3, [r3, #0]
 800f6ee:	f003 0310 	and.w	r3, r3, #16
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d019      	beq.n	800f72a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f6f6:	4b68      	ldr	r3, [pc, #416]	; (800f898 <tcp_listen_input+0x1d8>)
 800f6f8:	6819      	ldr	r1, [r3, #0]
 800f6fa:	4b68      	ldr	r3, [pc, #416]	; (800f89c <tcp_listen_input+0x1dc>)
 800f6fc:	881b      	ldrh	r3, [r3, #0]
 800f6fe:	461a      	mov	r2, r3
 800f700:	4b67      	ldr	r3, [pc, #412]	; (800f8a0 <tcp_listen_input+0x1e0>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f706:	4b67      	ldr	r3, [pc, #412]	; (800f8a4 <tcp_listen_input+0x1e4>)
 800f708:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f70a:	885b      	ldrh	r3, [r3, #2]
 800f70c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f70e:	4a65      	ldr	r2, [pc, #404]	; (800f8a4 <tcp_listen_input+0x1e4>)
 800f710:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f712:	8812      	ldrh	r2, [r2, #0]
 800f714:	b292      	uxth	r2, r2
 800f716:	9202      	str	r2, [sp, #8]
 800f718:	9301      	str	r3, [sp, #4]
 800f71a:	4b63      	ldr	r3, [pc, #396]	; (800f8a8 <tcp_listen_input+0x1e8>)
 800f71c:	9300      	str	r3, [sp, #0]
 800f71e:	4b63      	ldr	r3, [pc, #396]	; (800f8ac <tcp_listen_input+0x1ec>)
 800f720:	4602      	mov	r2, r0
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f003 fbd6 	bl	8012ed4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f728:	e0a9      	b.n	800f87e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f72a:	4b57      	ldr	r3, [pc, #348]	; (800f888 <tcp_listen_input+0x1c8>)
 800f72c:	781b      	ldrb	r3, [r3, #0]
 800f72e:	f003 0302 	and.w	r3, r3, #2
 800f732:	2b00      	cmp	r3, #0
 800f734:	f000 80a3 	beq.w	800f87e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	7d5b      	ldrb	r3, [r3, #21]
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7ff f85b 	bl	800e7f8 <tcp_alloc>
 800f742:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f744:	697b      	ldr	r3, [r7, #20]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d111      	bne.n	800f76e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	699b      	ldr	r3, [r3, #24]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d00a      	beq.n	800f768 <tcp_listen_input+0xa8>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	699b      	ldr	r3, [r3, #24]
 800f756:	687a      	ldr	r2, [r7, #4]
 800f758:	6910      	ldr	r0, [r2, #16]
 800f75a:	f04f 32ff 	mov.w	r2, #4294967295
 800f75e:	2100      	movs	r1, #0
 800f760:	4798      	blx	r3
 800f762:	4603      	mov	r3, r0
 800f764:	73bb      	strb	r3, [r7, #14]
      return;
 800f766:	e08b      	b.n	800f880 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f768:	23f0      	movs	r3, #240	; 0xf0
 800f76a:	73bb      	strb	r3, [r7, #14]
      return;
 800f76c:	e088      	b.n	800f880 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f76e:	4b50      	ldr	r3, [pc, #320]	; (800f8b0 <tcp_listen_input+0x1f0>)
 800f770:	695a      	ldr	r2, [r3, #20]
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f776:	4b4e      	ldr	r3, [pc, #312]	; (800f8b0 <tcp_listen_input+0x1f0>)
 800f778:	691a      	ldr	r2, [r3, #16]
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	8ada      	ldrh	r2, [r3, #22]
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f786:	4b47      	ldr	r3, [pc, #284]	; (800f8a4 <tcp_listen_input+0x1e4>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	881b      	ldrh	r3, [r3, #0]
 800f78c:	b29a      	uxth	r2, r3
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	2203      	movs	r2, #3
 800f796:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f798:	4b41      	ldr	r3, [pc, #260]	; (800f8a0 <tcp_listen_input+0x1e0>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	1c5a      	adds	r2, r3, #1
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f7aa:	6978      	ldr	r0, [r7, #20]
 800f7ac:	f7ff fa5a 	bl	800ec64 <tcp_next_iss>
 800f7b0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	693a      	ldr	r2, [r7, #16]
 800f7b6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	693a      	ldr	r2, [r7, #16]
 800f7bc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f7be:	697b      	ldr	r3, [r7, #20]
 800f7c0:	693a      	ldr	r2, [r7, #16]
 800f7c2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	693a      	ldr	r2, [r7, #16]
 800f7c8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f7ca:	4b35      	ldr	r3, [pc, #212]	; (800f8a0 <tcp_listen_input+0x1e0>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	1e5a      	subs	r2, r3, #1
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	691a      	ldr	r2, [r3, #16]
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	687a      	ldr	r2, [r7, #4]
 800f7e0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	7a5b      	ldrb	r3, [r3, #9]
 800f7e6:	f003 030c 	and.w	r3, r3, #12
 800f7ea:	b2da      	uxtb	r2, r3
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	7a1a      	ldrb	r2, [r3, #8]
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f7f8:	4b2e      	ldr	r3, [pc, #184]	; (800f8b4 <tcp_listen_input+0x1f4>)
 800f7fa:	681a      	ldr	r2, [r3, #0]
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	60da      	str	r2, [r3, #12]
 800f800:	4a2c      	ldr	r2, [pc, #176]	; (800f8b4 <tcp_listen_input+0x1f4>)
 800f802:	697b      	ldr	r3, [r7, #20]
 800f804:	6013      	str	r3, [r2, #0]
 800f806:	f003 fd27 	bl	8013258 <tcp_timer_needed>
 800f80a:	4b2b      	ldr	r3, [pc, #172]	; (800f8b8 <tcp_listen_input+0x1f8>)
 800f80c:	2201      	movs	r2, #1
 800f80e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f810:	6978      	ldr	r0, [r7, #20]
 800f812:	f001 fd8d 	bl	8011330 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f816:	4b23      	ldr	r3, [pc, #140]	; (800f8a4 <tcp_listen_input+0x1e4>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	89db      	ldrh	r3, [r3, #14]
 800f81c:	b29a      	uxth	r2, r3
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	3304      	adds	r3, #4
 800f838:	4618      	mov	r0, r3
 800f83a:	f005 fc4b 	bl	80150d4 <ip4_route>
 800f83e:	4601      	mov	r1, r0
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	3304      	adds	r3, #4
 800f844:	461a      	mov	r2, r3
 800f846:	4620      	mov	r0, r4
 800f848:	f7ff fa32 	bl	800ecb0 <tcp_eff_send_mss_netif>
 800f84c:	4603      	mov	r3, r0
 800f84e:	461a      	mov	r2, r3
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f854:	2112      	movs	r1, #18
 800f856:	6978      	ldr	r0, [r7, #20]
 800f858:	f002 fc9a 	bl	8012190 <tcp_enqueue_flags>
 800f85c:	4603      	mov	r3, r0
 800f85e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d004      	beq.n	800f872 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f868:	2100      	movs	r1, #0
 800f86a:	6978      	ldr	r0, [r7, #20]
 800f86c:	f7fd ffd4 	bl	800d818 <tcp_abandon>
      return;
 800f870:	e006      	b.n	800f880 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f872:	6978      	ldr	r0, [r7, #20]
 800f874:	f002 fd7a 	bl	801236c <tcp_output>
  return;
 800f878:	e001      	b.n	800f87e <tcp_listen_input+0x1be>
    return;
 800f87a:	bf00      	nop
 800f87c:	e000      	b.n	800f880 <tcp_listen_input+0x1c0>
  return;
 800f87e:	bf00      	nop
}
 800f880:	371c      	adds	r7, #28
 800f882:	46bd      	mov	sp, r7
 800f884:	bd90      	pop	{r4, r7, pc}
 800f886:	bf00      	nop
 800f888:	20006874 	.word	0x20006874
 800f88c:	080197fc 	.word	0x080197fc
 800f890:	080199f4 	.word	0x080199f4
 800f894:	08019848 	.word	0x08019848
 800f898:	2000686c 	.word	0x2000686c
 800f89c:	20006872 	.word	0x20006872
 800f8a0:	20006868 	.word	0x20006868
 800f8a4:	20006858 	.word	0x20006858
 800f8a8:	20009cb0 	.word	0x20009cb0
 800f8ac:	20009cb4 	.word	0x20009cb4
 800f8b0:	20009ca0 	.word	0x20009ca0
 800f8b4:	2000d3b4 	.word	0x2000d3b4
 800f8b8:	2000d3b0 	.word	0x2000d3b0

0800f8bc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b086      	sub	sp, #24
 800f8c0:	af04      	add	r7, sp, #16
 800f8c2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f8c4:	4b2f      	ldr	r3, [pc, #188]	; (800f984 <tcp_timewait_input+0xc8>)
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	f003 0304 	and.w	r3, r3, #4
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d153      	bne.n	800f978 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d106      	bne.n	800f8e4 <tcp_timewait_input+0x28>
 800f8d6:	4b2c      	ldr	r3, [pc, #176]	; (800f988 <tcp_timewait_input+0xcc>)
 800f8d8:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f8dc:	492b      	ldr	r1, [pc, #172]	; (800f98c <tcp_timewait_input+0xd0>)
 800f8de:	482c      	ldr	r0, [pc, #176]	; (800f990 <tcp_timewait_input+0xd4>)
 800f8e0:	f007 f9b0 	bl	8016c44 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f8e4:	4b27      	ldr	r3, [pc, #156]	; (800f984 <tcp_timewait_input+0xc8>)
 800f8e6:	781b      	ldrb	r3, [r3, #0]
 800f8e8:	f003 0302 	and.w	r3, r3, #2
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d02a      	beq.n	800f946 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f8f0:	4b28      	ldr	r3, [pc, #160]	; (800f994 <tcp_timewait_input+0xd8>)
 800f8f2:	681a      	ldr	r2, [r3, #0]
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8f8:	1ad3      	subs	r3, r2, r3
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	db2d      	blt.n	800f95a <tcp_timewait_input+0x9e>
 800f8fe:	4b25      	ldr	r3, [pc, #148]	; (800f994 <tcp_timewait_input+0xd8>)
 800f900:	681a      	ldr	r2, [r3, #0]
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f906:	6879      	ldr	r1, [r7, #4]
 800f908:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f90a:	440b      	add	r3, r1
 800f90c:	1ad3      	subs	r3, r2, r3
 800f90e:	2b00      	cmp	r3, #0
 800f910:	dc23      	bgt.n	800f95a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f912:	4b21      	ldr	r3, [pc, #132]	; (800f998 <tcp_timewait_input+0xdc>)
 800f914:	6819      	ldr	r1, [r3, #0]
 800f916:	4b21      	ldr	r3, [pc, #132]	; (800f99c <tcp_timewait_input+0xe0>)
 800f918:	881b      	ldrh	r3, [r3, #0]
 800f91a:	461a      	mov	r2, r3
 800f91c:	4b1d      	ldr	r3, [pc, #116]	; (800f994 <tcp_timewait_input+0xd8>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f922:	4b1f      	ldr	r3, [pc, #124]	; (800f9a0 <tcp_timewait_input+0xe4>)
 800f924:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f926:	885b      	ldrh	r3, [r3, #2]
 800f928:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f92a:	4a1d      	ldr	r2, [pc, #116]	; (800f9a0 <tcp_timewait_input+0xe4>)
 800f92c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f92e:	8812      	ldrh	r2, [r2, #0]
 800f930:	b292      	uxth	r2, r2
 800f932:	9202      	str	r2, [sp, #8]
 800f934:	9301      	str	r3, [sp, #4]
 800f936:	4b1b      	ldr	r3, [pc, #108]	; (800f9a4 <tcp_timewait_input+0xe8>)
 800f938:	9300      	str	r3, [sp, #0]
 800f93a:	4b1b      	ldr	r3, [pc, #108]	; (800f9a8 <tcp_timewait_input+0xec>)
 800f93c:	4602      	mov	r2, r0
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f003 fac8 	bl	8012ed4 <tcp_rst>
      return;
 800f944:	e01b      	b.n	800f97e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f946:	4b0f      	ldr	r3, [pc, #60]	; (800f984 <tcp_timewait_input+0xc8>)
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	f003 0301 	and.w	r3, r3, #1
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d003      	beq.n	800f95a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f952:	4b16      	ldr	r3, [pc, #88]	; (800f9ac <tcp_timewait_input+0xf0>)
 800f954:	681a      	ldr	r2, [r3, #0]
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f95a:	4b10      	ldr	r3, [pc, #64]	; (800f99c <tcp_timewait_input+0xe0>)
 800f95c:	881b      	ldrh	r3, [r3, #0]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d00c      	beq.n	800f97c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	8b5b      	ldrh	r3, [r3, #26]
 800f966:	f043 0302 	orr.w	r3, r3, #2
 800f96a:	b29a      	uxth	r2, r3
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f002 fcfb 	bl	801236c <tcp_output>
  }
  return;
 800f976:	e001      	b.n	800f97c <tcp_timewait_input+0xc0>
    return;
 800f978:	bf00      	nop
 800f97a:	e000      	b.n	800f97e <tcp_timewait_input+0xc2>
  return;
 800f97c:	bf00      	nop
}
 800f97e:	3708      	adds	r7, #8
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}
 800f984:	20006874 	.word	0x20006874
 800f988:	080197fc 	.word	0x080197fc
 800f98c:	08019a14 	.word	0x08019a14
 800f990:	08019848 	.word	0x08019848
 800f994:	20006868 	.word	0x20006868
 800f998:	2000686c 	.word	0x2000686c
 800f99c:	20006872 	.word	0x20006872
 800f9a0:	20006858 	.word	0x20006858
 800f9a4:	20009cb0 	.word	0x20009cb0
 800f9a8:	20009cb4 	.word	0x20009cb4
 800f9ac:	2000d3b8 	.word	0x2000d3b8

0800f9b0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f9b0:	b590      	push	{r4, r7, lr}
 800f9b2:	b08d      	sub	sp, #52	; 0x34
 800f9b4:	af04      	add	r7, sp, #16
 800f9b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d106      	bne.n	800f9d4 <tcp_process+0x24>
 800f9c6:	4ba5      	ldr	r3, [pc, #660]	; (800fc5c <tcp_process+0x2ac>)
 800f9c8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f9cc:	49a4      	ldr	r1, [pc, #656]	; (800fc60 <tcp_process+0x2b0>)
 800f9ce:	48a5      	ldr	r0, [pc, #660]	; (800fc64 <tcp_process+0x2b4>)
 800f9d0:	f007 f938 	bl	8016c44 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f9d4:	4ba4      	ldr	r3, [pc, #656]	; (800fc68 <tcp_process+0x2b8>)
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	f003 0304 	and.w	r3, r3, #4
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d04e      	beq.n	800fa7e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	7d1b      	ldrb	r3, [r3, #20]
 800f9e4:	2b02      	cmp	r3, #2
 800f9e6:	d108      	bne.n	800f9fa <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f9ec:	4b9f      	ldr	r3, [pc, #636]	; (800fc6c <tcp_process+0x2bc>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	d123      	bne.n	800fa3c <tcp_process+0x8c>
        acceptable = 1;
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	76fb      	strb	r3, [r7, #27]
 800f9f8:	e020      	b.n	800fa3c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f9fe:	4b9c      	ldr	r3, [pc, #624]	; (800fc70 <tcp_process+0x2c0>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	429a      	cmp	r2, r3
 800fa04:	d102      	bne.n	800fa0c <tcp_process+0x5c>
        acceptable = 1;
 800fa06:	2301      	movs	r3, #1
 800fa08:	76fb      	strb	r3, [r7, #27]
 800fa0a:	e017      	b.n	800fa3c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fa0c:	4b98      	ldr	r3, [pc, #608]	; (800fc70 <tcp_process+0x2c0>)
 800fa0e:	681a      	ldr	r2, [r3, #0]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa14:	1ad3      	subs	r3, r2, r3
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	db10      	blt.n	800fa3c <tcp_process+0x8c>
 800fa1a:	4b95      	ldr	r3, [pc, #596]	; (800fc70 <tcp_process+0x2c0>)
 800fa1c:	681a      	ldr	r2, [r3, #0]
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa22:	6879      	ldr	r1, [r7, #4]
 800fa24:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fa26:	440b      	add	r3, r1
 800fa28:	1ad3      	subs	r3, r2, r3
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	dc06      	bgt.n	800fa3c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	8b5b      	ldrh	r3, [r3, #26]
 800fa32:	f043 0302 	orr.w	r3, r3, #2
 800fa36:	b29a      	uxth	r2, r3
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fa3c:	7efb      	ldrb	r3, [r7, #27]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d01b      	beq.n	800fa7a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	7d1b      	ldrb	r3, [r3, #20]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d106      	bne.n	800fa58 <tcp_process+0xa8>
 800fa4a:	4b84      	ldr	r3, [pc, #528]	; (800fc5c <tcp_process+0x2ac>)
 800fa4c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800fa50:	4988      	ldr	r1, [pc, #544]	; (800fc74 <tcp_process+0x2c4>)
 800fa52:	4884      	ldr	r0, [pc, #528]	; (800fc64 <tcp_process+0x2b4>)
 800fa54:	f007 f8f6 	bl	8016c44 <iprintf>
      recv_flags |= TF_RESET;
 800fa58:	4b87      	ldr	r3, [pc, #540]	; (800fc78 <tcp_process+0x2c8>)
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	f043 0308 	orr.w	r3, r3, #8
 800fa60:	b2da      	uxtb	r2, r3
 800fa62:	4b85      	ldr	r3, [pc, #532]	; (800fc78 <tcp_process+0x2c8>)
 800fa64:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	8b5b      	ldrh	r3, [r3, #26]
 800fa6a:	f023 0301 	bic.w	r3, r3, #1
 800fa6e:	b29a      	uxth	r2, r3
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fa74:	f06f 030d 	mvn.w	r3, #13
 800fa78:	e37a      	b.n	8010170 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	e378      	b.n	8010170 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fa7e:	4b7a      	ldr	r3, [pc, #488]	; (800fc68 <tcp_process+0x2b8>)
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	f003 0302 	and.w	r3, r3, #2
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d010      	beq.n	800faac <tcp_process+0xfc>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	7d1b      	ldrb	r3, [r3, #20]
 800fa8e:	2b02      	cmp	r3, #2
 800fa90:	d00c      	beq.n	800faac <tcp_process+0xfc>
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	7d1b      	ldrb	r3, [r3, #20]
 800fa96:	2b03      	cmp	r3, #3
 800fa98:	d008      	beq.n	800faac <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	8b5b      	ldrh	r3, [r3, #26]
 800fa9e:	f043 0302 	orr.w	r3, r3, #2
 800faa2:	b29a      	uxth	r2, r3
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800faa8:	2300      	movs	r3, #0
 800faaa:	e361      	b.n	8010170 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	8b5b      	ldrh	r3, [r3, #26]
 800fab0:	f003 0310 	and.w	r3, r3, #16
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d103      	bne.n	800fac0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fab8:	4b70      	ldr	r3, [pc, #448]	; (800fc7c <tcp_process+0x2cc>)
 800faba:	681a      	ldr	r2, [r3, #0]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2200      	movs	r2, #0
 800fac4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2200      	movs	r2, #0
 800facc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f001 fc2d 	bl	8011330 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	7d1b      	ldrb	r3, [r3, #20]
 800fada:	3b02      	subs	r3, #2
 800fadc:	2b07      	cmp	r3, #7
 800fade:	f200 8337 	bhi.w	8010150 <tcp_process+0x7a0>
 800fae2:	a201      	add	r2, pc, #4	; (adr r2, 800fae8 <tcp_process+0x138>)
 800fae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fae8:	0800fb09 	.word	0x0800fb09
 800faec:	0800fd39 	.word	0x0800fd39
 800faf0:	0800feb1 	.word	0x0800feb1
 800faf4:	0800fedb 	.word	0x0800fedb
 800faf8:	0800ffff 	.word	0x0800ffff
 800fafc:	0800feb1 	.word	0x0800feb1
 800fb00:	0801008b 	.word	0x0801008b
 800fb04:	0801011b 	.word	0x0801011b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fb08:	4b57      	ldr	r3, [pc, #348]	; (800fc68 <tcp_process+0x2b8>)
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	f003 0310 	and.w	r3, r3, #16
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	f000 80e4 	beq.w	800fcde <tcp_process+0x32e>
 800fb16:	4b54      	ldr	r3, [pc, #336]	; (800fc68 <tcp_process+0x2b8>)
 800fb18:	781b      	ldrb	r3, [r3, #0]
 800fb1a:	f003 0302 	and.w	r3, r3, #2
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	f000 80dd 	beq.w	800fcde <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb28:	1c5a      	adds	r2, r3, #1
 800fb2a:	4b50      	ldr	r3, [pc, #320]	; (800fc6c <tcp_process+0x2bc>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	429a      	cmp	r2, r3
 800fb30:	f040 80d5 	bne.w	800fcde <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800fb34:	4b4e      	ldr	r3, [pc, #312]	; (800fc70 <tcp_process+0x2c0>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	1c5a      	adds	r2, r3, #1
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800fb46:	4b49      	ldr	r3, [pc, #292]	; (800fc6c <tcp_process+0x2bc>)
 800fb48:	681a      	ldr	r2, [r3, #0]
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800fb4e:	4b4c      	ldr	r3, [pc, #304]	; (800fc80 <tcp_process+0x2d0>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	89db      	ldrh	r3, [r3, #14]
 800fb54:	b29a      	uxth	r2, r3
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fb68:	4b41      	ldr	r3, [pc, #260]	; (800fc70 <tcp_process+0x2c0>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	1e5a      	subs	r2, r3, #1
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2204      	movs	r2, #4
 800fb76:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	3304      	adds	r3, #4
 800fb80:	4618      	mov	r0, r3
 800fb82:	f005 faa7 	bl	80150d4 <ip4_route>
 800fb86:	4601      	mov	r1, r0
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	3304      	adds	r3, #4
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	4620      	mov	r0, r4
 800fb90:	f7ff f88e 	bl	800ecb0 <tcp_eff_send_mss_netif>
 800fb94:	4603      	mov	r3, r0
 800fb96:	461a      	mov	r2, r3
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fba0:	009a      	lsls	r2, r3, #2
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fba6:	005b      	lsls	r3, r3, #1
 800fba8:	f241 111c 	movw	r1, #4380	; 0x111c
 800fbac:	428b      	cmp	r3, r1
 800fbae:	bf38      	it	cc
 800fbb0:	460b      	movcc	r3, r1
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d204      	bcs.n	800fbc0 <tcp_process+0x210>
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbba:	009b      	lsls	r3, r3, #2
 800fbbc:	b29b      	uxth	r3, r3
 800fbbe:	e00d      	b.n	800fbdc <tcp_process+0x22c>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbc4:	005b      	lsls	r3, r3, #1
 800fbc6:	f241 121c 	movw	r2, #4380	; 0x111c
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	d904      	bls.n	800fbd8 <tcp_process+0x228>
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbd2:	005b      	lsls	r3, r3, #1
 800fbd4:	b29b      	uxth	r3, r3
 800fbd6:	e001      	b.n	800fbdc <tcp_process+0x22c>
 800fbd8:	f241 131c 	movw	r3, #4380	; 0x111c
 800fbdc:	687a      	ldr	r2, [r7, #4]
 800fbde:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d106      	bne.n	800fbfa <tcp_process+0x24a>
 800fbec:	4b1b      	ldr	r3, [pc, #108]	; (800fc5c <tcp_process+0x2ac>)
 800fbee:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800fbf2:	4924      	ldr	r1, [pc, #144]	; (800fc84 <tcp_process+0x2d4>)
 800fbf4:	481b      	ldr	r0, [pc, #108]	; (800fc64 <tcp_process+0x2b4>)
 800fbf6:	f007 f825 	bl	8016c44 <iprintf>
        --pcb->snd_queuelen;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fc00:	3b01      	subs	r3, #1
 800fc02:	b29a      	uxth	r2, r3
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc0e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fc10:	69fb      	ldr	r3, [r7, #28]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d111      	bne.n	800fc3a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc1a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fc1c:	69fb      	ldr	r3, [r7, #28]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d106      	bne.n	800fc30 <tcp_process+0x280>
 800fc22:	4b0e      	ldr	r3, [pc, #56]	; (800fc5c <tcp_process+0x2ac>)
 800fc24:	f44f 725d 	mov.w	r2, #884	; 0x374
 800fc28:	4917      	ldr	r1, [pc, #92]	; (800fc88 <tcp_process+0x2d8>)
 800fc2a:	480e      	ldr	r0, [pc, #56]	; (800fc64 <tcp_process+0x2b4>)
 800fc2c:	f007 f80a 	bl	8016c44 <iprintf>
          pcb->unsent = rseg->next;
 800fc30:	69fb      	ldr	r3, [r7, #28]
 800fc32:	681a      	ldr	r2, [r3, #0]
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	66da      	str	r2, [r3, #108]	; 0x6c
 800fc38:	e003      	b.n	800fc42 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800fc3a:	69fb      	ldr	r3, [r7, #28]
 800fc3c:	681a      	ldr	r2, [r3, #0]
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800fc42:	69f8      	ldr	r0, [r7, #28]
 800fc44:	f7fe fc6f 	bl	800e526 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d11d      	bne.n	800fc8c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc56:	861a      	strh	r2, [r3, #48]	; 0x30
 800fc58:	e01f      	b.n	800fc9a <tcp_process+0x2ea>
 800fc5a:	bf00      	nop
 800fc5c:	080197fc 	.word	0x080197fc
 800fc60:	08019a34 	.word	0x08019a34
 800fc64:	08019848 	.word	0x08019848
 800fc68:	20006874 	.word	0x20006874
 800fc6c:	2000686c 	.word	0x2000686c
 800fc70:	20006868 	.word	0x20006868
 800fc74:	08019a50 	.word	0x08019a50
 800fc78:	20006875 	.word	0x20006875
 800fc7c:	2000d3b8 	.word	0x2000d3b8
 800fc80:	20006858 	.word	0x20006858
 800fc84:	08019a70 	.word	0x08019a70
 800fc88:	08019a88 	.word	0x08019a88
        } else {
          pcb->rtime = 0;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	2200      	movs	r2, #0
 800fc96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d00a      	beq.n	800fcba <tcp_process+0x30a>
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fcaa:	687a      	ldr	r2, [r7, #4]
 800fcac:	6910      	ldr	r0, [r2, #16]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	6879      	ldr	r1, [r7, #4]
 800fcb2:	4798      	blx	r3
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	76bb      	strb	r3, [r7, #26]
 800fcb8:	e001      	b.n	800fcbe <tcp_process+0x30e>
 800fcba:	2300      	movs	r3, #0
 800fcbc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fcbe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fcc2:	f113 0f0d 	cmn.w	r3, #13
 800fcc6:	d102      	bne.n	800fcce <tcp_process+0x31e>
          return ERR_ABRT;
 800fcc8:	f06f 030c 	mvn.w	r3, #12
 800fccc:	e250      	b.n	8010170 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	8b5b      	ldrh	r3, [r3, #26]
 800fcd2:	f043 0302 	orr.w	r3, r3, #2
 800fcd6:	b29a      	uxth	r2, r3
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fcdc:	e23a      	b.n	8010154 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fcde:	4b9d      	ldr	r3, [pc, #628]	; (800ff54 <tcp_process+0x5a4>)
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	f003 0310 	and.w	r3, r3, #16
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	f000 8234 	beq.w	8010154 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcec:	4b9a      	ldr	r3, [pc, #616]	; (800ff58 <tcp_process+0x5a8>)
 800fcee:	6819      	ldr	r1, [r3, #0]
 800fcf0:	4b9a      	ldr	r3, [pc, #616]	; (800ff5c <tcp_process+0x5ac>)
 800fcf2:	881b      	ldrh	r3, [r3, #0]
 800fcf4:	461a      	mov	r2, r3
 800fcf6:	4b9a      	ldr	r3, [pc, #616]	; (800ff60 <tcp_process+0x5b0>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcfc:	4b99      	ldr	r3, [pc, #612]	; (800ff64 <tcp_process+0x5b4>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd00:	885b      	ldrh	r3, [r3, #2]
 800fd02:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd04:	4a97      	ldr	r2, [pc, #604]	; (800ff64 <tcp_process+0x5b4>)
 800fd06:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd08:	8812      	ldrh	r2, [r2, #0]
 800fd0a:	b292      	uxth	r2, r2
 800fd0c:	9202      	str	r2, [sp, #8]
 800fd0e:	9301      	str	r3, [sp, #4]
 800fd10:	4b95      	ldr	r3, [pc, #596]	; (800ff68 <tcp_process+0x5b8>)
 800fd12:	9300      	str	r3, [sp, #0]
 800fd14:	4b95      	ldr	r3, [pc, #596]	; (800ff6c <tcp_process+0x5bc>)
 800fd16:	4602      	mov	r2, r0
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f003 f8db 	bl	8012ed4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fd24:	2b05      	cmp	r3, #5
 800fd26:	f200 8215 	bhi.w	8010154 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800fd30:	6878      	ldr	r0, [r7, #4]
 800fd32:	f002 fea5 	bl	8012a80 <tcp_rexmit_rto>
      break;
 800fd36:	e20d      	b.n	8010154 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800fd38:	4b86      	ldr	r3, [pc, #536]	; (800ff54 <tcp_process+0x5a4>)
 800fd3a:	781b      	ldrb	r3, [r3, #0]
 800fd3c:	f003 0310 	and.w	r3, r3, #16
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	f000 80a1 	beq.w	800fe88 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd46:	4b84      	ldr	r3, [pc, #528]	; (800ff58 <tcp_process+0x5a8>)
 800fd48:	681a      	ldr	r2, [r3, #0]
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd4e:	1ad3      	subs	r3, r2, r3
 800fd50:	3b01      	subs	r3, #1
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	db7e      	blt.n	800fe54 <tcp_process+0x4a4>
 800fd56:	4b80      	ldr	r3, [pc, #512]	; (800ff58 <tcp_process+0x5a8>)
 800fd58:	681a      	ldr	r2, [r3, #0]
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd5e:	1ad3      	subs	r3, r2, r3
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	dc77      	bgt.n	800fe54 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2204      	movs	r2, #4
 800fd68:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d102      	bne.n	800fd78 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800fd72:	23fa      	movs	r3, #250	; 0xfa
 800fd74:	76bb      	strb	r3, [r7, #26]
 800fd76:	e01d      	b.n	800fdb4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fd7c:	699b      	ldr	r3, [r3, #24]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d106      	bne.n	800fd90 <tcp_process+0x3e0>
 800fd82:	4b7b      	ldr	r3, [pc, #492]	; (800ff70 <tcp_process+0x5c0>)
 800fd84:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800fd88:	497a      	ldr	r1, [pc, #488]	; (800ff74 <tcp_process+0x5c4>)
 800fd8a:	487b      	ldr	r0, [pc, #492]	; (800ff78 <tcp_process+0x5c8>)
 800fd8c:	f006 ff5a 	bl	8016c44 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fd94:	699b      	ldr	r3, [r3, #24]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d00a      	beq.n	800fdb0 <tcp_process+0x400>
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fd9e:	699b      	ldr	r3, [r3, #24]
 800fda0:	687a      	ldr	r2, [r7, #4]
 800fda2:	6910      	ldr	r0, [r2, #16]
 800fda4:	2200      	movs	r2, #0
 800fda6:	6879      	ldr	r1, [r7, #4]
 800fda8:	4798      	blx	r3
 800fdaa:	4603      	mov	r3, r0
 800fdac:	76bb      	strb	r3, [r7, #26]
 800fdae:	e001      	b.n	800fdb4 <tcp_process+0x404>
 800fdb0:	23f0      	movs	r3, #240	; 0xf0
 800fdb2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fdb4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d00a      	beq.n	800fdd2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fdbc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fdc0:	f113 0f0d 	cmn.w	r3, #13
 800fdc4:	d002      	beq.n	800fdcc <tcp_process+0x41c>
              tcp_abort(pcb);
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f7fd fde4 	bl	800d994 <tcp_abort>
            }
            return ERR_ABRT;
 800fdcc:	f06f 030c 	mvn.w	r3, #12
 800fdd0:	e1ce      	b.n	8010170 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	f000 fae0 	bl	8010398 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fdd8:	4b68      	ldr	r3, [pc, #416]	; (800ff7c <tcp_process+0x5cc>)
 800fdda:	881b      	ldrh	r3, [r3, #0]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d005      	beq.n	800fdec <tcp_process+0x43c>
            recv_acked--;
 800fde0:	4b66      	ldr	r3, [pc, #408]	; (800ff7c <tcp_process+0x5cc>)
 800fde2:	881b      	ldrh	r3, [r3, #0]
 800fde4:	3b01      	subs	r3, #1
 800fde6:	b29a      	uxth	r2, r3
 800fde8:	4b64      	ldr	r3, [pc, #400]	; (800ff7c <tcp_process+0x5cc>)
 800fdea:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fdf0:	009a      	lsls	r2, r3, #2
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fdf6:	005b      	lsls	r3, r3, #1
 800fdf8:	f241 111c 	movw	r1, #4380	; 0x111c
 800fdfc:	428b      	cmp	r3, r1
 800fdfe:	bf38      	it	cc
 800fe00:	460b      	movcc	r3, r1
 800fe02:	429a      	cmp	r2, r3
 800fe04:	d204      	bcs.n	800fe10 <tcp_process+0x460>
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe0a:	009b      	lsls	r3, r3, #2
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	e00d      	b.n	800fe2c <tcp_process+0x47c>
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe14:	005b      	lsls	r3, r3, #1
 800fe16:	f241 121c 	movw	r2, #4380	; 0x111c
 800fe1a:	4293      	cmp	r3, r2
 800fe1c:	d904      	bls.n	800fe28 <tcp_process+0x478>
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe22:	005b      	lsls	r3, r3, #1
 800fe24:	b29b      	uxth	r3, r3
 800fe26:	e001      	b.n	800fe2c <tcp_process+0x47c>
 800fe28:	f241 131c 	movw	r3, #4380	; 0x111c
 800fe2c:	687a      	ldr	r2, [r7, #4]
 800fe2e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800fe32:	4b53      	ldr	r3, [pc, #332]	; (800ff80 <tcp_process+0x5d0>)
 800fe34:	781b      	ldrb	r3, [r3, #0]
 800fe36:	f003 0320 	and.w	r3, r3, #32
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d037      	beq.n	800feae <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	8b5b      	ldrh	r3, [r3, #26]
 800fe42:	f043 0302 	orr.w	r3, r3, #2
 800fe46:	b29a      	uxth	r2, r3
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2207      	movs	r2, #7
 800fe50:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800fe52:	e02c      	b.n	800feae <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe54:	4b40      	ldr	r3, [pc, #256]	; (800ff58 <tcp_process+0x5a8>)
 800fe56:	6819      	ldr	r1, [r3, #0]
 800fe58:	4b40      	ldr	r3, [pc, #256]	; (800ff5c <tcp_process+0x5ac>)
 800fe5a:	881b      	ldrh	r3, [r3, #0]
 800fe5c:	461a      	mov	r2, r3
 800fe5e:	4b40      	ldr	r3, [pc, #256]	; (800ff60 <tcp_process+0x5b0>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe64:	4b3f      	ldr	r3, [pc, #252]	; (800ff64 <tcp_process+0x5b4>)
 800fe66:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe68:	885b      	ldrh	r3, [r3, #2]
 800fe6a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe6c:	4a3d      	ldr	r2, [pc, #244]	; (800ff64 <tcp_process+0x5b4>)
 800fe6e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe70:	8812      	ldrh	r2, [r2, #0]
 800fe72:	b292      	uxth	r2, r2
 800fe74:	9202      	str	r2, [sp, #8]
 800fe76:	9301      	str	r3, [sp, #4]
 800fe78:	4b3b      	ldr	r3, [pc, #236]	; (800ff68 <tcp_process+0x5b8>)
 800fe7a:	9300      	str	r3, [sp, #0]
 800fe7c:	4b3b      	ldr	r3, [pc, #236]	; (800ff6c <tcp_process+0x5bc>)
 800fe7e:	4602      	mov	r2, r0
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f003 f827 	bl	8012ed4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800fe86:	e167      	b.n	8010158 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800fe88:	4b32      	ldr	r3, [pc, #200]	; (800ff54 <tcp_process+0x5a4>)
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	f003 0302 	and.w	r3, r3, #2
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	f000 8161 	beq.w	8010158 <tcp_process+0x7a8>
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe9a:	1e5a      	subs	r2, r3, #1
 800fe9c:	4b30      	ldr	r3, [pc, #192]	; (800ff60 <tcp_process+0x5b0>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	429a      	cmp	r2, r3
 800fea2:	f040 8159 	bne.w	8010158 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f002 fe0c 	bl	8012ac4 <tcp_rexmit>
      break;
 800feac:	e154      	b.n	8010158 <tcp_process+0x7a8>
 800feae:	e153      	b.n	8010158 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f000 fa71 	bl	8010398 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800feb6:	4b32      	ldr	r3, [pc, #200]	; (800ff80 <tcp_process+0x5d0>)
 800feb8:	781b      	ldrb	r3, [r3, #0]
 800feba:	f003 0320 	and.w	r3, r3, #32
 800febe:	2b00      	cmp	r3, #0
 800fec0:	f000 814c 	beq.w	801015c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	8b5b      	ldrh	r3, [r3, #26]
 800fec8:	f043 0302 	orr.w	r3, r3, #2
 800fecc:	b29a      	uxth	r2, r3
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2207      	movs	r2, #7
 800fed6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fed8:	e140      	b.n	801015c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f000 fa5c 	bl	8010398 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fee0:	4b27      	ldr	r3, [pc, #156]	; (800ff80 <tcp_process+0x5d0>)
 800fee2:	781b      	ldrb	r3, [r3, #0]
 800fee4:	f003 0320 	and.w	r3, r3, #32
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d071      	beq.n	800ffd0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800feec:	4b19      	ldr	r3, [pc, #100]	; (800ff54 <tcp_process+0x5a4>)
 800feee:	781b      	ldrb	r3, [r3, #0]
 800fef0:	f003 0310 	and.w	r3, r3, #16
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d060      	beq.n	800ffba <tcp_process+0x60a>
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fefc:	4b16      	ldr	r3, [pc, #88]	; (800ff58 <tcp_process+0x5a8>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	429a      	cmp	r2, r3
 800ff02:	d15a      	bne.n	800ffba <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d156      	bne.n	800ffba <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	8b5b      	ldrh	r3, [r3, #26]
 800ff10:	f043 0302 	orr.w	r3, r3, #2
 800ff14:	b29a      	uxth	r2, r3
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f7fe fdbe 	bl	800ea9c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ff20:	4b18      	ldr	r3, [pc, #96]	; (800ff84 <tcp_process+0x5d4>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	687a      	ldr	r2, [r7, #4]
 800ff26:	429a      	cmp	r2, r3
 800ff28:	d105      	bne.n	800ff36 <tcp_process+0x586>
 800ff2a:	4b16      	ldr	r3, [pc, #88]	; (800ff84 <tcp_process+0x5d4>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	68db      	ldr	r3, [r3, #12]
 800ff30:	4a14      	ldr	r2, [pc, #80]	; (800ff84 <tcp_process+0x5d4>)
 800ff32:	6013      	str	r3, [r2, #0]
 800ff34:	e02e      	b.n	800ff94 <tcp_process+0x5e4>
 800ff36:	4b13      	ldr	r3, [pc, #76]	; (800ff84 <tcp_process+0x5d4>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	617b      	str	r3, [r7, #20]
 800ff3c:	e027      	b.n	800ff8e <tcp_process+0x5de>
 800ff3e:	697b      	ldr	r3, [r7, #20]
 800ff40:	68db      	ldr	r3, [r3, #12]
 800ff42:	687a      	ldr	r2, [r7, #4]
 800ff44:	429a      	cmp	r2, r3
 800ff46:	d11f      	bne.n	800ff88 <tcp_process+0x5d8>
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	68da      	ldr	r2, [r3, #12]
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	60da      	str	r2, [r3, #12]
 800ff50:	e020      	b.n	800ff94 <tcp_process+0x5e4>
 800ff52:	bf00      	nop
 800ff54:	20006874 	.word	0x20006874
 800ff58:	2000686c 	.word	0x2000686c
 800ff5c:	20006872 	.word	0x20006872
 800ff60:	20006868 	.word	0x20006868
 800ff64:	20006858 	.word	0x20006858
 800ff68:	20009cb0 	.word	0x20009cb0
 800ff6c:	20009cb4 	.word	0x20009cb4
 800ff70:	080197fc 	.word	0x080197fc
 800ff74:	08019a9c 	.word	0x08019a9c
 800ff78:	08019848 	.word	0x08019848
 800ff7c:	20006870 	.word	0x20006870
 800ff80:	20006875 	.word	0x20006875
 800ff84:	2000d3b4 	.word	0x2000d3b4
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	68db      	ldr	r3, [r3, #12]
 800ff8c:	617b      	str	r3, [r7, #20]
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d1d4      	bne.n	800ff3e <tcp_process+0x58e>
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2200      	movs	r2, #0
 800ff98:	60da      	str	r2, [r3, #12]
 800ff9a:	4b77      	ldr	r3, [pc, #476]	; (8010178 <tcp_process+0x7c8>)
 800ff9c:	2201      	movs	r2, #1
 800ff9e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	220a      	movs	r2, #10
 800ffa4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ffa6:	4b75      	ldr	r3, [pc, #468]	; (801017c <tcp_process+0x7cc>)
 800ffa8:	681a      	ldr	r2, [r3, #0]
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	60da      	str	r2, [r3, #12]
 800ffae:	4a73      	ldr	r2, [pc, #460]	; (801017c <tcp_process+0x7cc>)
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6013      	str	r3, [r2, #0]
 800ffb4:	f003 f950 	bl	8013258 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ffb8:	e0d2      	b.n	8010160 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	8b5b      	ldrh	r3, [r3, #26]
 800ffbe:	f043 0302 	orr.w	r3, r3, #2
 800ffc2:	b29a      	uxth	r2, r3
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2208      	movs	r2, #8
 800ffcc:	751a      	strb	r2, [r3, #20]
      break;
 800ffce:	e0c7      	b.n	8010160 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ffd0:	4b6b      	ldr	r3, [pc, #428]	; (8010180 <tcp_process+0x7d0>)
 800ffd2:	781b      	ldrb	r3, [r3, #0]
 800ffd4:	f003 0310 	and.w	r3, r3, #16
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	f000 80c1 	beq.w	8010160 <tcp_process+0x7b0>
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ffe2:	4b68      	ldr	r3, [pc, #416]	; (8010184 <tcp_process+0x7d4>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	f040 80ba 	bne.w	8010160 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	f040 80b5 	bne.w	8010160 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2206      	movs	r2, #6
 800fffa:	751a      	strb	r2, [r3, #20]
      break;
 800fffc:	e0b0      	b.n	8010160 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800fffe:	6878      	ldr	r0, [r7, #4]
 8010000:	f000 f9ca 	bl	8010398 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010004:	4b60      	ldr	r3, [pc, #384]	; (8010188 <tcp_process+0x7d8>)
 8010006:	781b      	ldrb	r3, [r3, #0]
 8010008:	f003 0320 	and.w	r3, r3, #32
 801000c:	2b00      	cmp	r3, #0
 801000e:	f000 80a9 	beq.w	8010164 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	8b5b      	ldrh	r3, [r3, #26]
 8010016:	f043 0302 	orr.w	r3, r3, #2
 801001a:	b29a      	uxth	r2, r3
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f7fe fd3b 	bl	800ea9c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010026:	4b59      	ldr	r3, [pc, #356]	; (801018c <tcp_process+0x7dc>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	429a      	cmp	r2, r3
 801002e:	d105      	bne.n	801003c <tcp_process+0x68c>
 8010030:	4b56      	ldr	r3, [pc, #344]	; (801018c <tcp_process+0x7dc>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	68db      	ldr	r3, [r3, #12]
 8010036:	4a55      	ldr	r2, [pc, #340]	; (801018c <tcp_process+0x7dc>)
 8010038:	6013      	str	r3, [r2, #0]
 801003a:	e013      	b.n	8010064 <tcp_process+0x6b4>
 801003c:	4b53      	ldr	r3, [pc, #332]	; (801018c <tcp_process+0x7dc>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	613b      	str	r3, [r7, #16]
 8010042:	e00c      	b.n	801005e <tcp_process+0x6ae>
 8010044:	693b      	ldr	r3, [r7, #16]
 8010046:	68db      	ldr	r3, [r3, #12]
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	429a      	cmp	r2, r3
 801004c:	d104      	bne.n	8010058 <tcp_process+0x6a8>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	68da      	ldr	r2, [r3, #12]
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	60da      	str	r2, [r3, #12]
 8010056:	e005      	b.n	8010064 <tcp_process+0x6b4>
 8010058:	693b      	ldr	r3, [r7, #16]
 801005a:	68db      	ldr	r3, [r3, #12]
 801005c:	613b      	str	r3, [r7, #16]
 801005e:	693b      	ldr	r3, [r7, #16]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d1ef      	bne.n	8010044 <tcp_process+0x694>
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2200      	movs	r2, #0
 8010068:	60da      	str	r2, [r3, #12]
 801006a:	4b43      	ldr	r3, [pc, #268]	; (8010178 <tcp_process+0x7c8>)
 801006c:	2201      	movs	r2, #1
 801006e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	220a      	movs	r2, #10
 8010074:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010076:	4b41      	ldr	r3, [pc, #260]	; (801017c <tcp_process+0x7cc>)
 8010078:	681a      	ldr	r2, [r3, #0]
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	60da      	str	r2, [r3, #12]
 801007e:	4a3f      	ldr	r2, [pc, #252]	; (801017c <tcp_process+0x7cc>)
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6013      	str	r3, [r2, #0]
 8010084:	f003 f8e8 	bl	8013258 <tcp_timer_needed>
      }
      break;
 8010088:	e06c      	b.n	8010164 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801008a:	6878      	ldr	r0, [r7, #4]
 801008c:	f000 f984 	bl	8010398 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010090:	4b3b      	ldr	r3, [pc, #236]	; (8010180 <tcp_process+0x7d0>)
 8010092:	781b      	ldrb	r3, [r3, #0]
 8010094:	f003 0310 	and.w	r3, r3, #16
 8010098:	2b00      	cmp	r3, #0
 801009a:	d065      	beq.n	8010168 <tcp_process+0x7b8>
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80100a0:	4b38      	ldr	r3, [pc, #224]	; (8010184 <tcp_process+0x7d4>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	429a      	cmp	r2, r3
 80100a6:	d15f      	bne.n	8010168 <tcp_process+0x7b8>
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d15b      	bne.n	8010168 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f7fe fcf3 	bl	800ea9c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80100b6:	4b35      	ldr	r3, [pc, #212]	; (801018c <tcp_process+0x7dc>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	687a      	ldr	r2, [r7, #4]
 80100bc:	429a      	cmp	r2, r3
 80100be:	d105      	bne.n	80100cc <tcp_process+0x71c>
 80100c0:	4b32      	ldr	r3, [pc, #200]	; (801018c <tcp_process+0x7dc>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	68db      	ldr	r3, [r3, #12]
 80100c6:	4a31      	ldr	r2, [pc, #196]	; (801018c <tcp_process+0x7dc>)
 80100c8:	6013      	str	r3, [r2, #0]
 80100ca:	e013      	b.n	80100f4 <tcp_process+0x744>
 80100cc:	4b2f      	ldr	r3, [pc, #188]	; (801018c <tcp_process+0x7dc>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	60fb      	str	r3, [r7, #12]
 80100d2:	e00c      	b.n	80100ee <tcp_process+0x73e>
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	68db      	ldr	r3, [r3, #12]
 80100d8:	687a      	ldr	r2, [r7, #4]
 80100da:	429a      	cmp	r2, r3
 80100dc:	d104      	bne.n	80100e8 <tcp_process+0x738>
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	68da      	ldr	r2, [r3, #12]
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	60da      	str	r2, [r3, #12]
 80100e6:	e005      	b.n	80100f4 <tcp_process+0x744>
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	68db      	ldr	r3, [r3, #12]
 80100ec:	60fb      	str	r3, [r7, #12]
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d1ef      	bne.n	80100d4 <tcp_process+0x724>
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2200      	movs	r2, #0
 80100f8:	60da      	str	r2, [r3, #12]
 80100fa:	4b1f      	ldr	r3, [pc, #124]	; (8010178 <tcp_process+0x7c8>)
 80100fc:	2201      	movs	r2, #1
 80100fe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	220a      	movs	r2, #10
 8010104:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010106:	4b1d      	ldr	r3, [pc, #116]	; (801017c <tcp_process+0x7cc>)
 8010108:	681a      	ldr	r2, [r3, #0]
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	60da      	str	r2, [r3, #12]
 801010e:	4a1b      	ldr	r2, [pc, #108]	; (801017c <tcp_process+0x7cc>)
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	6013      	str	r3, [r2, #0]
 8010114:	f003 f8a0 	bl	8013258 <tcp_timer_needed>
      }
      break;
 8010118:	e026      	b.n	8010168 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f000 f93c 	bl	8010398 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010120:	4b17      	ldr	r3, [pc, #92]	; (8010180 <tcp_process+0x7d0>)
 8010122:	781b      	ldrb	r3, [r3, #0]
 8010124:	f003 0310 	and.w	r3, r3, #16
 8010128:	2b00      	cmp	r3, #0
 801012a:	d01f      	beq.n	801016c <tcp_process+0x7bc>
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010130:	4b14      	ldr	r3, [pc, #80]	; (8010184 <tcp_process+0x7d4>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	429a      	cmp	r2, r3
 8010136:	d119      	bne.n	801016c <tcp_process+0x7bc>
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801013c:	2b00      	cmp	r3, #0
 801013e:	d115      	bne.n	801016c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010140:	4b11      	ldr	r3, [pc, #68]	; (8010188 <tcp_process+0x7d8>)
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	f043 0310 	orr.w	r3, r3, #16
 8010148:	b2da      	uxtb	r2, r3
 801014a:	4b0f      	ldr	r3, [pc, #60]	; (8010188 <tcp_process+0x7d8>)
 801014c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801014e:	e00d      	b.n	801016c <tcp_process+0x7bc>
    default:
      break;
 8010150:	bf00      	nop
 8010152:	e00c      	b.n	801016e <tcp_process+0x7be>
      break;
 8010154:	bf00      	nop
 8010156:	e00a      	b.n	801016e <tcp_process+0x7be>
      break;
 8010158:	bf00      	nop
 801015a:	e008      	b.n	801016e <tcp_process+0x7be>
      break;
 801015c:	bf00      	nop
 801015e:	e006      	b.n	801016e <tcp_process+0x7be>
      break;
 8010160:	bf00      	nop
 8010162:	e004      	b.n	801016e <tcp_process+0x7be>
      break;
 8010164:	bf00      	nop
 8010166:	e002      	b.n	801016e <tcp_process+0x7be>
      break;
 8010168:	bf00      	nop
 801016a:	e000      	b.n	801016e <tcp_process+0x7be>
      break;
 801016c:	bf00      	nop
  }
  return ERR_OK;
 801016e:	2300      	movs	r3, #0
}
 8010170:	4618      	mov	r0, r3
 8010172:	3724      	adds	r7, #36	; 0x24
 8010174:	46bd      	mov	sp, r7
 8010176:	bd90      	pop	{r4, r7, pc}
 8010178:	2000d3b0 	.word	0x2000d3b0
 801017c:	2000d3c4 	.word	0x2000d3c4
 8010180:	20006874 	.word	0x20006874
 8010184:	2000686c 	.word	0x2000686c
 8010188:	20006875 	.word	0x20006875
 801018c:	2000d3b4 	.word	0x2000d3b4

08010190 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010190:	b590      	push	{r4, r7, lr}
 8010192:	b085      	sub	sp, #20
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
 8010198:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d106      	bne.n	80101ae <tcp_oos_insert_segment+0x1e>
 80101a0:	4b3b      	ldr	r3, [pc, #236]	; (8010290 <tcp_oos_insert_segment+0x100>)
 80101a2:	f240 421f 	movw	r2, #1055	; 0x41f
 80101a6:	493b      	ldr	r1, [pc, #236]	; (8010294 <tcp_oos_insert_segment+0x104>)
 80101a8:	483b      	ldr	r0, [pc, #236]	; (8010298 <tcp_oos_insert_segment+0x108>)
 80101aa:	f006 fd4b 	bl	8016c44 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	68db      	ldr	r3, [r3, #12]
 80101b2:	899b      	ldrh	r3, [r3, #12]
 80101b4:	b29b      	uxth	r3, r3
 80101b6:	4618      	mov	r0, r3
 80101b8:	f7fb faa4 	bl	800b704 <lwip_htons>
 80101bc:	4603      	mov	r3, r0
 80101be:	b2db      	uxtb	r3, r3
 80101c0:	f003 0301 	and.w	r3, r3, #1
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d028      	beq.n	801021a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80101c8:	6838      	ldr	r0, [r7, #0]
 80101ca:	f7fe f997 	bl	800e4fc <tcp_segs_free>
    next = NULL;
 80101ce:	2300      	movs	r3, #0
 80101d0:	603b      	str	r3, [r7, #0]
 80101d2:	e056      	b.n	8010282 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	68db      	ldr	r3, [r3, #12]
 80101d8:	899b      	ldrh	r3, [r3, #12]
 80101da:	b29b      	uxth	r3, r3
 80101dc:	4618      	mov	r0, r3
 80101de:	f7fb fa91 	bl	800b704 <lwip_htons>
 80101e2:	4603      	mov	r3, r0
 80101e4:	b2db      	uxtb	r3, r3
 80101e6:	f003 0301 	and.w	r3, r3, #1
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d00d      	beq.n	801020a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	68db      	ldr	r3, [r3, #12]
 80101f2:	899b      	ldrh	r3, [r3, #12]
 80101f4:	b29c      	uxth	r4, r3
 80101f6:	2001      	movs	r0, #1
 80101f8:	f7fb fa84 	bl	800b704 <lwip_htons>
 80101fc:	4603      	mov	r3, r0
 80101fe:	461a      	mov	r2, r3
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	68db      	ldr	r3, [r3, #12]
 8010204:	4322      	orrs	r2, r4
 8010206:	b292      	uxth	r2, r2
 8010208:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010214:	68f8      	ldr	r0, [r7, #12]
 8010216:	f7fe f986 	bl	800e526 <tcp_seg_free>
    while (next &&
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d00e      	beq.n	801023e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	891b      	ldrh	r3, [r3, #8]
 8010224:	461a      	mov	r2, r3
 8010226:	4b1d      	ldr	r3, [pc, #116]	; (801029c <tcp_oos_insert_segment+0x10c>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	441a      	add	r2, r3
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	68db      	ldr	r3, [r3, #12]
 8010230:	685b      	ldr	r3, [r3, #4]
 8010232:	6839      	ldr	r1, [r7, #0]
 8010234:	8909      	ldrh	r1, [r1, #8]
 8010236:	440b      	add	r3, r1
 8010238:	1ad3      	subs	r3, r2, r3
    while (next &&
 801023a:	2b00      	cmp	r3, #0
 801023c:	daca      	bge.n	80101d4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d01e      	beq.n	8010282 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	891b      	ldrh	r3, [r3, #8]
 8010248:	461a      	mov	r2, r3
 801024a:	4b14      	ldr	r3, [pc, #80]	; (801029c <tcp_oos_insert_segment+0x10c>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	441a      	add	r2, r3
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	68db      	ldr	r3, [r3, #12]
 8010254:	685b      	ldr	r3, [r3, #4]
 8010256:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010258:	2b00      	cmp	r3, #0
 801025a:	dd12      	ble.n	8010282 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	68db      	ldr	r3, [r3, #12]
 8010260:	685b      	ldr	r3, [r3, #4]
 8010262:	b29a      	uxth	r2, r3
 8010264:	4b0d      	ldr	r3, [pc, #52]	; (801029c <tcp_oos_insert_segment+0x10c>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	b29b      	uxth	r3, r3
 801026a:	1ad3      	subs	r3, r2, r3
 801026c:	b29a      	uxth	r2, r3
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	685a      	ldr	r2, [r3, #4]
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	891b      	ldrh	r3, [r3, #8]
 801027a:	4619      	mov	r1, r3
 801027c:	4610      	mov	r0, r2
 801027e:	f7fc fc03 	bl	800ca88 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	683a      	ldr	r2, [r7, #0]
 8010286:	601a      	str	r2, [r3, #0]
}
 8010288:	bf00      	nop
 801028a:	3714      	adds	r7, #20
 801028c:	46bd      	mov	sp, r7
 801028e:	bd90      	pop	{r4, r7, pc}
 8010290:	080197fc 	.word	0x080197fc
 8010294:	08019abc 	.word	0x08019abc
 8010298:	08019848 	.word	0x08019848
 801029c:	20006868 	.word	0x20006868

080102a0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80102a0:	b5b0      	push	{r4, r5, r7, lr}
 80102a2:	b086      	sub	sp, #24
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	60f8      	str	r0, [r7, #12]
 80102a8:	60b9      	str	r1, [r7, #8]
 80102aa:	607a      	str	r2, [r7, #4]
 80102ac:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80102ae:	e03e      	b.n	801032e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	685b      	ldr	r3, [r3, #4]
 80102be:	4618      	mov	r0, r3
 80102c0:	f7fc fdf6 	bl	800ceb0 <pbuf_clen>
 80102c4:	4603      	mov	r3, r0
 80102c6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102ce:	8a7a      	ldrh	r2, [r7, #18]
 80102d0:	429a      	cmp	r2, r3
 80102d2:	d906      	bls.n	80102e2 <tcp_free_acked_segments+0x42>
 80102d4:	4b2a      	ldr	r3, [pc, #168]	; (8010380 <tcp_free_acked_segments+0xe0>)
 80102d6:	f240 4257 	movw	r2, #1111	; 0x457
 80102da:	492a      	ldr	r1, [pc, #168]	; (8010384 <tcp_free_acked_segments+0xe4>)
 80102dc:	482a      	ldr	r0, [pc, #168]	; (8010388 <tcp_free_acked_segments+0xe8>)
 80102de:	f006 fcb1 	bl	8016c44 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80102e8:	8a7b      	ldrh	r3, [r7, #18]
 80102ea:	1ad3      	subs	r3, r2, r3
 80102ec:	b29a      	uxth	r2, r3
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80102f4:	697b      	ldr	r3, [r7, #20]
 80102f6:	891a      	ldrh	r2, [r3, #8]
 80102f8:	4b24      	ldr	r3, [pc, #144]	; (801038c <tcp_free_acked_segments+0xec>)
 80102fa:	881b      	ldrh	r3, [r3, #0]
 80102fc:	4413      	add	r3, r2
 80102fe:	b29a      	uxth	r2, r3
 8010300:	4b22      	ldr	r3, [pc, #136]	; (801038c <tcp_free_acked_segments+0xec>)
 8010302:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010304:	6978      	ldr	r0, [r7, #20]
 8010306:	f7fe f90e 	bl	800e526 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010310:	2b00      	cmp	r3, #0
 8010312:	d00c      	beq.n	801032e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d109      	bne.n	801032e <tcp_free_acked_segments+0x8e>
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d106      	bne.n	801032e <tcp_free_acked_segments+0x8e>
 8010320:	4b17      	ldr	r3, [pc, #92]	; (8010380 <tcp_free_acked_segments+0xe0>)
 8010322:	f240 4261 	movw	r2, #1121	; 0x461
 8010326:	491a      	ldr	r1, [pc, #104]	; (8010390 <tcp_free_acked_segments+0xf0>)
 8010328:	4817      	ldr	r0, [pc, #92]	; (8010388 <tcp_free_acked_segments+0xe8>)
 801032a:	f006 fc8b 	bl	8016c44 <iprintf>
  while (seg_list != NULL &&
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d020      	beq.n	8010376 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	68db      	ldr	r3, [r3, #12]
 8010338:	685b      	ldr	r3, [r3, #4]
 801033a:	4618      	mov	r0, r3
 801033c:	f7fb f9f7 	bl	800b72e <lwip_htonl>
 8010340:	4604      	mov	r4, r0
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	891b      	ldrh	r3, [r3, #8]
 8010346:	461d      	mov	r5, r3
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	68db      	ldr	r3, [r3, #12]
 801034c:	899b      	ldrh	r3, [r3, #12]
 801034e:	b29b      	uxth	r3, r3
 8010350:	4618      	mov	r0, r3
 8010352:	f7fb f9d7 	bl	800b704 <lwip_htons>
 8010356:	4603      	mov	r3, r0
 8010358:	b2db      	uxtb	r3, r3
 801035a:	f003 0303 	and.w	r3, r3, #3
 801035e:	2b00      	cmp	r3, #0
 8010360:	d001      	beq.n	8010366 <tcp_free_acked_segments+0xc6>
 8010362:	2301      	movs	r3, #1
 8010364:	e000      	b.n	8010368 <tcp_free_acked_segments+0xc8>
 8010366:	2300      	movs	r3, #0
 8010368:	442b      	add	r3, r5
 801036a:	18e2      	adds	r2, r4, r3
 801036c:	4b09      	ldr	r3, [pc, #36]	; (8010394 <tcp_free_acked_segments+0xf4>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010372:	2b00      	cmp	r3, #0
 8010374:	dd9c      	ble.n	80102b0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010376:	68bb      	ldr	r3, [r7, #8]
}
 8010378:	4618      	mov	r0, r3
 801037a:	3718      	adds	r7, #24
 801037c:	46bd      	mov	sp, r7
 801037e:	bdb0      	pop	{r4, r5, r7, pc}
 8010380:	080197fc 	.word	0x080197fc
 8010384:	08019ae4 	.word	0x08019ae4
 8010388:	08019848 	.word	0x08019848
 801038c:	20006870 	.word	0x20006870
 8010390:	08019b0c 	.word	0x08019b0c
 8010394:	2000686c 	.word	0x2000686c

08010398 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010398:	b5b0      	push	{r4, r5, r7, lr}
 801039a:	b094      	sub	sp, #80	; 0x50
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80103a0:	2300      	movs	r3, #0
 80103a2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d106      	bne.n	80103b8 <tcp_receive+0x20>
 80103aa:	4ba6      	ldr	r3, [pc, #664]	; (8010644 <tcp_receive+0x2ac>)
 80103ac:	f240 427b 	movw	r2, #1147	; 0x47b
 80103b0:	49a5      	ldr	r1, [pc, #660]	; (8010648 <tcp_receive+0x2b0>)
 80103b2:	48a6      	ldr	r0, [pc, #664]	; (801064c <tcp_receive+0x2b4>)
 80103b4:	f006 fc46 	bl	8016c44 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	7d1b      	ldrb	r3, [r3, #20]
 80103bc:	2b03      	cmp	r3, #3
 80103be:	d806      	bhi.n	80103ce <tcp_receive+0x36>
 80103c0:	4ba0      	ldr	r3, [pc, #640]	; (8010644 <tcp_receive+0x2ac>)
 80103c2:	f240 427c 	movw	r2, #1148	; 0x47c
 80103c6:	49a2      	ldr	r1, [pc, #648]	; (8010650 <tcp_receive+0x2b8>)
 80103c8:	48a0      	ldr	r0, [pc, #640]	; (801064c <tcp_receive+0x2b4>)
 80103ca:	f006 fc3b 	bl	8016c44 <iprintf>

  if (flags & TCP_ACK) {
 80103ce:	4ba1      	ldr	r3, [pc, #644]	; (8010654 <tcp_receive+0x2bc>)
 80103d0:	781b      	ldrb	r3, [r3, #0]
 80103d2:	f003 0310 	and.w	r3, r3, #16
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	f000 8263 	beq.w	80108a2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80103e2:	461a      	mov	r2, r3
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103e8:	4413      	add	r3, r2
 80103ea:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80103f0:	4b99      	ldr	r3, [pc, #612]	; (8010658 <tcp_receive+0x2c0>)
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	1ad3      	subs	r3, r2, r3
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	db1b      	blt.n	8010432 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80103fe:	4b96      	ldr	r3, [pc, #600]	; (8010658 <tcp_receive+0x2c0>)
 8010400:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010402:	429a      	cmp	r2, r3
 8010404:	d106      	bne.n	8010414 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801040a:	4b94      	ldr	r3, [pc, #592]	; (801065c <tcp_receive+0x2c4>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	1ad3      	subs	r3, r2, r3
 8010410:	2b00      	cmp	r3, #0
 8010412:	db0e      	blt.n	8010432 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010418:	4b90      	ldr	r3, [pc, #576]	; (801065c <tcp_receive+0x2c4>)
 801041a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801041c:	429a      	cmp	r2, r3
 801041e:	d125      	bne.n	801046c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010420:	4b8f      	ldr	r3, [pc, #572]	; (8010660 <tcp_receive+0x2c8>)
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	89db      	ldrh	r3, [r3, #14]
 8010426:	b29a      	uxth	r2, r3
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801042e:	429a      	cmp	r2, r3
 8010430:	d91c      	bls.n	801046c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010432:	4b8b      	ldr	r3, [pc, #556]	; (8010660 <tcp_receive+0x2c8>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	89db      	ldrh	r3, [r3, #14]
 8010438:	b29a      	uxth	r2, r3
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801044c:	429a      	cmp	r2, r3
 801044e:	d205      	bcs.n	801045c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801045c:	4b7e      	ldr	r3, [pc, #504]	; (8010658 <tcp_receive+0x2c0>)
 801045e:	681a      	ldr	r2, [r3, #0]
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010464:	4b7d      	ldr	r3, [pc, #500]	; (801065c <tcp_receive+0x2c4>)
 8010466:	681a      	ldr	r2, [r3, #0]
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801046c:	4b7b      	ldr	r3, [pc, #492]	; (801065c <tcp_receive+0x2c4>)
 801046e:	681a      	ldr	r2, [r3, #0]
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010474:	1ad3      	subs	r3, r2, r3
 8010476:	2b00      	cmp	r3, #0
 8010478:	dc58      	bgt.n	801052c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801047a:	4b7a      	ldr	r3, [pc, #488]	; (8010664 <tcp_receive+0x2cc>)
 801047c:	881b      	ldrh	r3, [r3, #0]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d14b      	bne.n	801051a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010486:	687a      	ldr	r2, [r7, #4]
 8010488:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801048c:	4413      	add	r3, r2
 801048e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010490:	429a      	cmp	r2, r3
 8010492:	d142      	bne.n	801051a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801049a:	2b00      	cmp	r3, #0
 801049c:	db3d      	blt.n	801051a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80104a2:	4b6e      	ldr	r3, [pc, #440]	; (801065c <tcp_receive+0x2c4>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	429a      	cmp	r2, r3
 80104a8:	d137      	bne.n	801051a <tcp_receive+0x182>
              found_dupack = 1;
 80104aa:	2301      	movs	r3, #1
 80104ac:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80104b4:	2bff      	cmp	r3, #255	; 0xff
 80104b6:	d007      	beq.n	80104c8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80104be:	3301      	adds	r3, #1
 80104c0:	b2da      	uxtb	r2, r3
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80104ce:	2b03      	cmp	r3, #3
 80104d0:	d91b      	bls.n	801050a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104dc:	4413      	add	r3, r2
 80104de:	b29a      	uxth	r2, r3
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80104e6:	429a      	cmp	r2, r3
 80104e8:	d30a      	bcc.n	8010500 <tcp_receive+0x168>
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104f4:	4413      	add	r3, r2
 80104f6:	b29a      	uxth	r2, r3
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80104fe:	e004      	b.n	801050a <tcp_receive+0x172>
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010506:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010510:	2b02      	cmp	r3, #2
 8010512:	d902      	bls.n	801051a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f002 fb41 	bl	8012b9c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801051a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801051c:	2b00      	cmp	r3, #0
 801051e:	f040 8160 	bne.w	80107e2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	2200      	movs	r2, #0
 8010526:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801052a:	e15a      	b.n	80107e2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801052c:	4b4b      	ldr	r3, [pc, #300]	; (801065c <tcp_receive+0x2c4>)
 801052e:	681a      	ldr	r2, [r3, #0]
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010534:	1ad3      	subs	r3, r2, r3
 8010536:	3b01      	subs	r3, #1
 8010538:	2b00      	cmp	r3, #0
 801053a:	f2c0 814d 	blt.w	80107d8 <tcp_receive+0x440>
 801053e:	4b47      	ldr	r3, [pc, #284]	; (801065c <tcp_receive+0x2c4>)
 8010540:	681a      	ldr	r2, [r3, #0]
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010546:	1ad3      	subs	r3, r2, r3
 8010548:	2b00      	cmp	r3, #0
 801054a:	f300 8145 	bgt.w	80107d8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	8b5b      	ldrh	r3, [r3, #26]
 8010552:	f003 0304 	and.w	r3, r3, #4
 8010556:	2b00      	cmp	r3, #0
 8010558:	d010      	beq.n	801057c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	8b5b      	ldrh	r3, [r3, #26]
 801055e:	f023 0304 	bic.w	r3, r3, #4
 8010562:	b29a      	uxth	r2, r3
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2200      	movs	r2, #0
 8010578:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2200      	movs	r2, #0
 8010580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801058a:	10db      	asrs	r3, r3, #3
 801058c:	b21b      	sxth	r3, r3
 801058e:	b29a      	uxth	r2, r3
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010596:	b29b      	uxth	r3, r3
 8010598:	4413      	add	r3, r2
 801059a:	b29b      	uxth	r3, r3
 801059c:	b21a      	sxth	r2, r3
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80105a4:	4b2d      	ldr	r3, [pc, #180]	; (801065c <tcp_receive+0x2c4>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	b29a      	uxth	r2, r3
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105ae:	b29b      	uxth	r3, r3
 80105b0:	1ad3      	subs	r3, r2, r3
 80105b2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2200      	movs	r2, #0
 80105b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80105bc:	4b27      	ldr	r3, [pc, #156]	; (801065c <tcp_receive+0x2c4>)
 80105be:	681a      	ldr	r2, [r3, #0]
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	7d1b      	ldrb	r3, [r3, #20]
 80105c8:	2b03      	cmp	r3, #3
 80105ca:	f240 8096 	bls.w	80106fa <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80105da:	429a      	cmp	r2, r3
 80105dc:	d244      	bcs.n	8010668 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	8b5b      	ldrh	r3, [r3, #26]
 80105e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d001      	beq.n	80105ee <tcp_receive+0x256>
 80105ea:	2301      	movs	r3, #1
 80105ec:	e000      	b.n	80105f0 <tcp_receive+0x258>
 80105ee:	2302      	movs	r3, #2
 80105f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80105f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80105f8:	b29a      	uxth	r2, r3
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105fe:	fb12 f303 	smulbb	r3, r2, r3
 8010602:	b29b      	uxth	r3, r3
 8010604:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010606:	4293      	cmp	r3, r2
 8010608:	bf28      	it	cs
 801060a:	4613      	movcs	r3, r2
 801060c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010614:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010616:	4413      	add	r3, r2
 8010618:	b29a      	uxth	r2, r3
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010620:	429a      	cmp	r2, r3
 8010622:	d309      	bcc.n	8010638 <tcp_receive+0x2a0>
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801062a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801062c:	4413      	add	r3, r2
 801062e:	b29a      	uxth	r2, r3
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010636:	e060      	b.n	80106fa <tcp_receive+0x362>
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801063e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010642:	e05a      	b.n	80106fa <tcp_receive+0x362>
 8010644:	080197fc 	.word	0x080197fc
 8010648:	08019b2c 	.word	0x08019b2c
 801064c:	08019848 	.word	0x08019848
 8010650:	08019b48 	.word	0x08019b48
 8010654:	20006874 	.word	0x20006874
 8010658:	20006868 	.word	0x20006868
 801065c:	2000686c 	.word	0x2000686c
 8010660:	20006858 	.word	0x20006858
 8010664:	20006872 	.word	0x20006872
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801066e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010670:	4413      	add	r3, r2
 8010672:	b29a      	uxth	r2, r3
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801067a:	429a      	cmp	r2, r3
 801067c:	d309      	bcc.n	8010692 <tcp_receive+0x2fa>
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010684:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010686:	4413      	add	r3, r2
 8010688:	b29a      	uxth	r2, r3
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010690:	e004      	b.n	801069c <tcp_receive+0x304>
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010698:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d326      	bcc.n	80106fa <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80106b8:	1ad3      	subs	r3, r2, r3
 80106ba:	b29a      	uxth	r2, r3
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106cc:	4413      	add	r3, r2
 80106ce:	b29a      	uxth	r2, r3
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d30a      	bcc.n	80106f0 <tcp_receive+0x358>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106e4:	4413      	add	r3, r2
 80106e6:	b29a      	uxth	r2, r3
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80106ee:	e004      	b.n	80106fa <tcp_receive+0x362>
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80106f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010702:	4a98      	ldr	r2, [pc, #608]	; (8010964 <tcp_receive+0x5cc>)
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f7ff fdcb 	bl	80102a0 <tcp_free_acked_segments>
 801070a:	4602      	mov	r2, r0
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010718:	4a93      	ldr	r2, [pc, #588]	; (8010968 <tcp_receive+0x5d0>)
 801071a:	6878      	ldr	r0, [r7, #4]
 801071c:	f7ff fdc0 	bl	80102a0 <tcp_free_acked_segments>
 8010720:	4602      	mov	r2, r0
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801072a:	2b00      	cmp	r3, #0
 801072c:	d104      	bne.n	8010738 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010734:	861a      	strh	r2, [r3, #48]	; 0x30
 8010736:	e002      	b.n	801073e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2200      	movs	r2, #0
 801073c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2200      	movs	r2, #0
 8010742:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010748:	2b00      	cmp	r3, #0
 801074a:	d103      	bne.n	8010754 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2200      	movs	r2, #0
 8010750:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801075a:	4b84      	ldr	r3, [pc, #528]	; (801096c <tcp_receive+0x5d4>)
 801075c:	881b      	ldrh	r3, [r3, #0]
 801075e:	4413      	add	r3, r2
 8010760:	b29a      	uxth	r2, r3
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	8b5b      	ldrh	r3, [r3, #26]
 801076c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010770:	2b00      	cmp	r3, #0
 8010772:	d035      	beq.n	80107e0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010778:	2b00      	cmp	r3, #0
 801077a:	d118      	bne.n	80107ae <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010780:	2b00      	cmp	r3, #0
 8010782:	d00c      	beq.n	801079e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801078c:	68db      	ldr	r3, [r3, #12]
 801078e:	685b      	ldr	r3, [r3, #4]
 8010790:	4618      	mov	r0, r3
 8010792:	f7fa ffcc 	bl	800b72e <lwip_htonl>
 8010796:	4603      	mov	r3, r0
 8010798:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801079a:	2b00      	cmp	r3, #0
 801079c:	dc20      	bgt.n	80107e0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	8b5b      	ldrh	r3, [r3, #26]
 80107a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80107a6:	b29a      	uxth	r2, r3
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80107ac:	e018      	b.n	80107e0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107b6:	68db      	ldr	r3, [r3, #12]
 80107b8:	685b      	ldr	r3, [r3, #4]
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7fa ffb7 	bl	800b72e <lwip_htonl>
 80107c0:	4603      	mov	r3, r0
 80107c2:	1ae3      	subs	r3, r4, r3
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	dc0b      	bgt.n	80107e0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	8b5b      	ldrh	r3, [r3, #26]
 80107cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80107d0:	b29a      	uxth	r2, r3
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80107d6:	e003      	b.n	80107e0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f002 fbcd 	bl	8012f78 <tcp_send_empty_ack>
 80107de:	e000      	b.n	80107e2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80107e0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d05b      	beq.n	80108a2 <tcp_receive+0x50a>
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80107ee:	4b60      	ldr	r3, [pc, #384]	; (8010970 <tcp_receive+0x5d8>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	1ad3      	subs	r3, r2, r3
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	da54      	bge.n	80108a2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80107f8:	4b5e      	ldr	r3, [pc, #376]	; (8010974 <tcp_receive+0x5dc>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	b29a      	uxth	r2, r3
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010802:	b29b      	uxth	r3, r3
 8010804:	1ad3      	subs	r3, r2, r3
 8010806:	b29b      	uxth	r3, r3
 8010808:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801080c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010816:	10db      	asrs	r3, r3, #3
 8010818:	b21b      	sxth	r3, r3
 801081a:	b29b      	uxth	r3, r3
 801081c:	1ad3      	subs	r3, r2, r3
 801081e:	b29b      	uxth	r3, r3
 8010820:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801082a:	b29a      	uxth	r2, r3
 801082c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010830:	4413      	add	r3, r2
 8010832:	b29b      	uxth	r3, r3
 8010834:	b21a      	sxth	r2, r3
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801083a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801083e:	2b00      	cmp	r3, #0
 8010840:	da05      	bge.n	801084e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8010842:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010846:	425b      	negs	r3, r3
 8010848:	b29b      	uxth	r3, r3
 801084a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801084e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010858:	109b      	asrs	r3, r3, #2
 801085a:	b21b      	sxth	r3, r3
 801085c:	b29b      	uxth	r3, r3
 801085e:	1ad3      	subs	r3, r2, r3
 8010860:	b29b      	uxth	r3, r3
 8010862:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801086c:	b29a      	uxth	r2, r3
 801086e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010872:	4413      	add	r3, r2
 8010874:	b29b      	uxth	r3, r3
 8010876:	b21a      	sxth	r2, r3
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010882:	10db      	asrs	r3, r3, #3
 8010884:	b21b      	sxth	r3, r3
 8010886:	b29a      	uxth	r2, r3
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801088e:	b29b      	uxth	r3, r3
 8010890:	4413      	add	r3, r2
 8010892:	b29b      	uxth	r3, r3
 8010894:	b21a      	sxth	r2, r3
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2200      	movs	r2, #0
 80108a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80108a2:	4b35      	ldr	r3, [pc, #212]	; (8010978 <tcp_receive+0x5e0>)
 80108a4:	881b      	ldrh	r3, [r3, #0]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	f000 84e1 	beq.w	801126e <tcp_receive+0xed6>
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	7d1b      	ldrb	r3, [r3, #20]
 80108b0:	2b06      	cmp	r3, #6
 80108b2:	f200 84dc 	bhi.w	801126e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108ba:	4b30      	ldr	r3, [pc, #192]	; (801097c <tcp_receive+0x5e4>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	1ad3      	subs	r3, r2, r3
 80108c0:	3b01      	subs	r3, #1
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	f2c0 808e 	blt.w	80109e4 <tcp_receive+0x64c>
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108cc:	4b2a      	ldr	r3, [pc, #168]	; (8010978 <tcp_receive+0x5e0>)
 80108ce:	881b      	ldrh	r3, [r3, #0]
 80108d0:	4619      	mov	r1, r3
 80108d2:	4b2a      	ldr	r3, [pc, #168]	; (801097c <tcp_receive+0x5e4>)
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	440b      	add	r3, r1
 80108d8:	1ad3      	subs	r3, r2, r3
 80108da:	3301      	adds	r3, #1
 80108dc:	2b00      	cmp	r3, #0
 80108de:	f300 8081 	bgt.w	80109e4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80108e2:	4b27      	ldr	r3, [pc, #156]	; (8010980 <tcp_receive+0x5e8>)
 80108e4:	685b      	ldr	r3, [r3, #4]
 80108e6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108ec:	4b23      	ldr	r3, [pc, #140]	; (801097c <tcp_receive+0x5e4>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	1ad3      	subs	r3, r2, r3
 80108f2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80108f4:	4b22      	ldr	r3, [pc, #136]	; (8010980 <tcp_receive+0x5e8>)
 80108f6:	685b      	ldr	r3, [r3, #4]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d106      	bne.n	801090a <tcp_receive+0x572>
 80108fc:	4b21      	ldr	r3, [pc, #132]	; (8010984 <tcp_receive+0x5ec>)
 80108fe:	f240 5294 	movw	r2, #1428	; 0x594
 8010902:	4921      	ldr	r1, [pc, #132]	; (8010988 <tcp_receive+0x5f0>)
 8010904:	4821      	ldr	r0, [pc, #132]	; (801098c <tcp_receive+0x5f4>)
 8010906:	f006 f99d 	bl	8016c44 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801090c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010910:	4293      	cmp	r3, r2
 8010912:	d906      	bls.n	8010922 <tcp_receive+0x58a>
 8010914:	4b1b      	ldr	r3, [pc, #108]	; (8010984 <tcp_receive+0x5ec>)
 8010916:	f240 5295 	movw	r2, #1429	; 0x595
 801091a:	491d      	ldr	r1, [pc, #116]	; (8010990 <tcp_receive+0x5f8>)
 801091c:	481b      	ldr	r0, [pc, #108]	; (801098c <tcp_receive+0x5f4>)
 801091e:	f006 f991 	bl	8016c44 <iprintf>
      off = (u16_t)off32;
 8010922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010924:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010928:	4b15      	ldr	r3, [pc, #84]	; (8010980 <tcp_receive+0x5e8>)
 801092a:	685b      	ldr	r3, [r3, #4]
 801092c:	891b      	ldrh	r3, [r3, #8]
 801092e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010932:	429a      	cmp	r2, r3
 8010934:	d906      	bls.n	8010944 <tcp_receive+0x5ac>
 8010936:	4b13      	ldr	r3, [pc, #76]	; (8010984 <tcp_receive+0x5ec>)
 8010938:	f240 5297 	movw	r2, #1431	; 0x597
 801093c:	4915      	ldr	r1, [pc, #84]	; (8010994 <tcp_receive+0x5fc>)
 801093e:	4813      	ldr	r0, [pc, #76]	; (801098c <tcp_receive+0x5f4>)
 8010940:	f006 f980 	bl	8016c44 <iprintf>
      inseg.len -= off;
 8010944:	4b0e      	ldr	r3, [pc, #56]	; (8010980 <tcp_receive+0x5e8>)
 8010946:	891a      	ldrh	r2, [r3, #8]
 8010948:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801094c:	1ad3      	subs	r3, r2, r3
 801094e:	b29a      	uxth	r2, r3
 8010950:	4b0b      	ldr	r3, [pc, #44]	; (8010980 <tcp_receive+0x5e8>)
 8010952:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010954:	4b0a      	ldr	r3, [pc, #40]	; (8010980 <tcp_receive+0x5e8>)
 8010956:	685b      	ldr	r3, [r3, #4]
 8010958:	891a      	ldrh	r2, [r3, #8]
 801095a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801095e:	1ad3      	subs	r3, r2, r3
 8010960:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010962:	e029      	b.n	80109b8 <tcp_receive+0x620>
 8010964:	08019b64 	.word	0x08019b64
 8010968:	08019b6c 	.word	0x08019b6c
 801096c:	20006870 	.word	0x20006870
 8010970:	2000686c 	.word	0x2000686c
 8010974:	2000d3b8 	.word	0x2000d3b8
 8010978:	20006872 	.word	0x20006872
 801097c:	20006868 	.word	0x20006868
 8010980:	20006848 	.word	0x20006848
 8010984:	080197fc 	.word	0x080197fc
 8010988:	08019b74 	.word	0x08019b74
 801098c:	08019848 	.word	0x08019848
 8010990:	08019b84 	.word	0x08019b84
 8010994:	08019b94 	.word	0x08019b94
        off -= p->len;
 8010998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801099a:	895b      	ldrh	r3, [r3, #10]
 801099c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80109a0:	1ad3      	subs	r3, r2, r3
 80109a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80109a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109a8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80109aa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80109ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109ae:	2200      	movs	r2, #0
 80109b0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80109b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80109b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109ba:	895b      	ldrh	r3, [r3, #10]
 80109bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80109c0:	429a      	cmp	r2, r3
 80109c2:	d8e9      	bhi.n	8010998 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80109c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80109c8:	4619      	mov	r1, r3
 80109ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80109cc:	f7fc f95c 	bl	800cc88 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109d4:	4a91      	ldr	r2, [pc, #580]	; (8010c1c <tcp_receive+0x884>)
 80109d6:	6013      	str	r3, [r2, #0]
 80109d8:	4b91      	ldr	r3, [pc, #580]	; (8010c20 <tcp_receive+0x888>)
 80109da:	68db      	ldr	r3, [r3, #12]
 80109dc:	4a8f      	ldr	r2, [pc, #572]	; (8010c1c <tcp_receive+0x884>)
 80109de:	6812      	ldr	r2, [r2, #0]
 80109e0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80109e2:	e00d      	b.n	8010a00 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80109e4:	4b8d      	ldr	r3, [pc, #564]	; (8010c1c <tcp_receive+0x884>)
 80109e6:	681a      	ldr	r2, [r3, #0]
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109ec:	1ad3      	subs	r3, r2, r3
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	da06      	bge.n	8010a00 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	8b5b      	ldrh	r3, [r3, #26]
 80109f6:	f043 0302 	orr.w	r3, r3, #2
 80109fa:	b29a      	uxth	r2, r3
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010a00:	4b86      	ldr	r3, [pc, #536]	; (8010c1c <tcp_receive+0x884>)
 8010a02:	681a      	ldr	r2, [r3, #0]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a08:	1ad3      	subs	r3, r2, r3
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	f2c0 842a 	blt.w	8011264 <tcp_receive+0xecc>
 8010a10:	4b82      	ldr	r3, [pc, #520]	; (8010c1c <tcp_receive+0x884>)
 8010a12:	681a      	ldr	r2, [r3, #0]
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a18:	6879      	ldr	r1, [r7, #4]
 8010a1a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010a1c:	440b      	add	r3, r1
 8010a1e:	1ad3      	subs	r3, r2, r3
 8010a20:	3301      	adds	r3, #1
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	f300 841e 	bgt.w	8011264 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a2c:	4b7b      	ldr	r3, [pc, #492]	; (8010c1c <tcp_receive+0x884>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	429a      	cmp	r2, r3
 8010a32:	f040 829a 	bne.w	8010f6a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010a36:	4b7a      	ldr	r3, [pc, #488]	; (8010c20 <tcp_receive+0x888>)
 8010a38:	891c      	ldrh	r4, [r3, #8]
 8010a3a:	4b79      	ldr	r3, [pc, #484]	; (8010c20 <tcp_receive+0x888>)
 8010a3c:	68db      	ldr	r3, [r3, #12]
 8010a3e:	899b      	ldrh	r3, [r3, #12]
 8010a40:	b29b      	uxth	r3, r3
 8010a42:	4618      	mov	r0, r3
 8010a44:	f7fa fe5e 	bl	800b704 <lwip_htons>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	b2db      	uxtb	r3, r3
 8010a4c:	f003 0303 	and.w	r3, r3, #3
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d001      	beq.n	8010a58 <tcp_receive+0x6c0>
 8010a54:	2301      	movs	r3, #1
 8010a56:	e000      	b.n	8010a5a <tcp_receive+0x6c2>
 8010a58:	2300      	movs	r3, #0
 8010a5a:	4423      	add	r3, r4
 8010a5c:	b29a      	uxth	r2, r3
 8010a5e:	4b71      	ldr	r3, [pc, #452]	; (8010c24 <tcp_receive+0x88c>)
 8010a60:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010a66:	4b6f      	ldr	r3, [pc, #444]	; (8010c24 <tcp_receive+0x88c>)
 8010a68:	881b      	ldrh	r3, [r3, #0]
 8010a6a:	429a      	cmp	r2, r3
 8010a6c:	d275      	bcs.n	8010b5a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010a6e:	4b6c      	ldr	r3, [pc, #432]	; (8010c20 <tcp_receive+0x888>)
 8010a70:	68db      	ldr	r3, [r3, #12]
 8010a72:	899b      	ldrh	r3, [r3, #12]
 8010a74:	b29b      	uxth	r3, r3
 8010a76:	4618      	mov	r0, r3
 8010a78:	f7fa fe44 	bl	800b704 <lwip_htons>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	b2db      	uxtb	r3, r3
 8010a80:	f003 0301 	and.w	r3, r3, #1
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d01f      	beq.n	8010ac8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010a88:	4b65      	ldr	r3, [pc, #404]	; (8010c20 <tcp_receive+0x888>)
 8010a8a:	68db      	ldr	r3, [r3, #12]
 8010a8c:	899b      	ldrh	r3, [r3, #12]
 8010a8e:	b29b      	uxth	r3, r3
 8010a90:	b21b      	sxth	r3, r3
 8010a92:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010a96:	b21c      	sxth	r4, r3
 8010a98:	4b61      	ldr	r3, [pc, #388]	; (8010c20 <tcp_receive+0x888>)
 8010a9a:	68db      	ldr	r3, [r3, #12]
 8010a9c:	899b      	ldrh	r3, [r3, #12]
 8010a9e:	b29b      	uxth	r3, r3
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f7fa fe2f 	bl	800b704 <lwip_htons>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	b2db      	uxtb	r3, r3
 8010aaa:	b29b      	uxth	r3, r3
 8010aac:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010ab0:	b29b      	uxth	r3, r3
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7fa fe26 	bl	800b704 <lwip_htons>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	b21b      	sxth	r3, r3
 8010abc:	4323      	orrs	r3, r4
 8010abe:	b21a      	sxth	r2, r3
 8010ac0:	4b57      	ldr	r3, [pc, #348]	; (8010c20 <tcp_receive+0x888>)
 8010ac2:	68db      	ldr	r3, [r3, #12]
 8010ac4:	b292      	uxth	r2, r2
 8010ac6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010acc:	4b54      	ldr	r3, [pc, #336]	; (8010c20 <tcp_receive+0x888>)
 8010ace:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010ad0:	4b53      	ldr	r3, [pc, #332]	; (8010c20 <tcp_receive+0x888>)
 8010ad2:	68db      	ldr	r3, [r3, #12]
 8010ad4:	899b      	ldrh	r3, [r3, #12]
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f7fa fe13 	bl	800b704 <lwip_htons>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	b2db      	uxtb	r3, r3
 8010ae2:	f003 0302 	and.w	r3, r3, #2
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d005      	beq.n	8010af6 <tcp_receive+0x75e>
            inseg.len -= 1;
 8010aea:	4b4d      	ldr	r3, [pc, #308]	; (8010c20 <tcp_receive+0x888>)
 8010aec:	891b      	ldrh	r3, [r3, #8]
 8010aee:	3b01      	subs	r3, #1
 8010af0:	b29a      	uxth	r2, r3
 8010af2:	4b4b      	ldr	r3, [pc, #300]	; (8010c20 <tcp_receive+0x888>)
 8010af4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010af6:	4b4a      	ldr	r3, [pc, #296]	; (8010c20 <tcp_receive+0x888>)
 8010af8:	685b      	ldr	r3, [r3, #4]
 8010afa:	4a49      	ldr	r2, [pc, #292]	; (8010c20 <tcp_receive+0x888>)
 8010afc:	8912      	ldrh	r2, [r2, #8]
 8010afe:	4611      	mov	r1, r2
 8010b00:	4618      	mov	r0, r3
 8010b02:	f7fb ffc1 	bl	800ca88 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010b06:	4b46      	ldr	r3, [pc, #280]	; (8010c20 <tcp_receive+0x888>)
 8010b08:	891c      	ldrh	r4, [r3, #8]
 8010b0a:	4b45      	ldr	r3, [pc, #276]	; (8010c20 <tcp_receive+0x888>)
 8010b0c:	68db      	ldr	r3, [r3, #12]
 8010b0e:	899b      	ldrh	r3, [r3, #12]
 8010b10:	b29b      	uxth	r3, r3
 8010b12:	4618      	mov	r0, r3
 8010b14:	f7fa fdf6 	bl	800b704 <lwip_htons>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	b2db      	uxtb	r3, r3
 8010b1c:	f003 0303 	and.w	r3, r3, #3
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d001      	beq.n	8010b28 <tcp_receive+0x790>
 8010b24:	2301      	movs	r3, #1
 8010b26:	e000      	b.n	8010b2a <tcp_receive+0x792>
 8010b28:	2300      	movs	r3, #0
 8010b2a:	4423      	add	r3, r4
 8010b2c:	b29a      	uxth	r2, r3
 8010b2e:	4b3d      	ldr	r3, [pc, #244]	; (8010c24 <tcp_receive+0x88c>)
 8010b30:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010b32:	4b3c      	ldr	r3, [pc, #240]	; (8010c24 <tcp_receive+0x88c>)
 8010b34:	881b      	ldrh	r3, [r3, #0]
 8010b36:	461a      	mov	r2, r3
 8010b38:	4b38      	ldr	r3, [pc, #224]	; (8010c1c <tcp_receive+0x884>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	441a      	add	r2, r3
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b42:	6879      	ldr	r1, [r7, #4]
 8010b44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010b46:	440b      	add	r3, r1
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	d006      	beq.n	8010b5a <tcp_receive+0x7c2>
 8010b4c:	4b36      	ldr	r3, [pc, #216]	; (8010c28 <tcp_receive+0x890>)
 8010b4e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010b52:	4936      	ldr	r1, [pc, #216]	; (8010c2c <tcp_receive+0x894>)
 8010b54:	4836      	ldr	r0, [pc, #216]	; (8010c30 <tcp_receive+0x898>)
 8010b56:	f006 f875 	bl	8016c44 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	f000 80e7 	beq.w	8010d32 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010b64:	4b2e      	ldr	r3, [pc, #184]	; (8010c20 <tcp_receive+0x888>)
 8010b66:	68db      	ldr	r3, [r3, #12]
 8010b68:	899b      	ldrh	r3, [r3, #12]
 8010b6a:	b29b      	uxth	r3, r3
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7fa fdc9 	bl	800b704 <lwip_htons>
 8010b72:	4603      	mov	r3, r0
 8010b74:	b2db      	uxtb	r3, r3
 8010b76:	f003 0301 	and.w	r3, r3, #1
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d010      	beq.n	8010ba0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010b7e:	e00a      	b.n	8010b96 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b84:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b8a:	681a      	ldr	r2, [r3, #0]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010b90:	68f8      	ldr	r0, [r7, #12]
 8010b92:	f7fd fcc8 	bl	800e526 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d1f0      	bne.n	8010b80 <tcp_receive+0x7e8>
 8010b9e:	e0c8      	b.n	8010d32 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010ba6:	e052      	b.n	8010c4e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010baa:	68db      	ldr	r3, [r3, #12]
 8010bac:	899b      	ldrh	r3, [r3, #12]
 8010bae:	b29b      	uxth	r3, r3
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f7fa fda7 	bl	800b704 <lwip_htons>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	b2db      	uxtb	r3, r3
 8010bba:	f003 0301 	and.w	r3, r3, #1
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d03d      	beq.n	8010c3e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010bc2:	4b17      	ldr	r3, [pc, #92]	; (8010c20 <tcp_receive+0x888>)
 8010bc4:	68db      	ldr	r3, [r3, #12]
 8010bc6:	899b      	ldrh	r3, [r3, #12]
 8010bc8:	b29b      	uxth	r3, r3
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f7fa fd9a 	bl	800b704 <lwip_htons>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	b2db      	uxtb	r3, r3
 8010bd4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d130      	bne.n	8010c3e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010bdc:	4b10      	ldr	r3, [pc, #64]	; (8010c20 <tcp_receive+0x888>)
 8010bde:	68db      	ldr	r3, [r3, #12]
 8010be0:	899b      	ldrh	r3, [r3, #12]
 8010be2:	b29c      	uxth	r4, r3
 8010be4:	2001      	movs	r0, #1
 8010be6:	f7fa fd8d 	bl	800b704 <lwip_htons>
 8010bea:	4603      	mov	r3, r0
 8010bec:	461a      	mov	r2, r3
 8010bee:	4b0c      	ldr	r3, [pc, #48]	; (8010c20 <tcp_receive+0x888>)
 8010bf0:	68db      	ldr	r3, [r3, #12]
 8010bf2:	4322      	orrs	r2, r4
 8010bf4:	b292      	uxth	r2, r2
 8010bf6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010bf8:	4b09      	ldr	r3, [pc, #36]	; (8010c20 <tcp_receive+0x888>)
 8010bfa:	891c      	ldrh	r4, [r3, #8]
 8010bfc:	4b08      	ldr	r3, [pc, #32]	; (8010c20 <tcp_receive+0x888>)
 8010bfe:	68db      	ldr	r3, [r3, #12]
 8010c00:	899b      	ldrh	r3, [r3, #12]
 8010c02:	b29b      	uxth	r3, r3
 8010c04:	4618      	mov	r0, r3
 8010c06:	f7fa fd7d 	bl	800b704 <lwip_htons>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	b2db      	uxtb	r3, r3
 8010c0e:	f003 0303 	and.w	r3, r3, #3
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d00e      	beq.n	8010c34 <tcp_receive+0x89c>
 8010c16:	2301      	movs	r3, #1
 8010c18:	e00d      	b.n	8010c36 <tcp_receive+0x89e>
 8010c1a:	bf00      	nop
 8010c1c:	20006868 	.word	0x20006868
 8010c20:	20006848 	.word	0x20006848
 8010c24:	20006872 	.word	0x20006872
 8010c28:	080197fc 	.word	0x080197fc
 8010c2c:	08019ba4 	.word	0x08019ba4
 8010c30:	08019848 	.word	0x08019848
 8010c34:	2300      	movs	r3, #0
 8010c36:	4423      	add	r3, r4
 8010c38:	b29a      	uxth	r2, r3
 8010c3a:	4b98      	ldr	r3, [pc, #608]	; (8010e9c <tcp_receive+0xb04>)
 8010c3c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c40:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010c48:	6938      	ldr	r0, [r7, #16]
 8010c4a:	f7fd fc6c 	bl	800e526 <tcp_seg_free>
            while (next &&
 8010c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d00e      	beq.n	8010c72 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010c54:	4b91      	ldr	r3, [pc, #580]	; (8010e9c <tcp_receive+0xb04>)
 8010c56:	881b      	ldrh	r3, [r3, #0]
 8010c58:	461a      	mov	r2, r3
 8010c5a:	4b91      	ldr	r3, [pc, #580]	; (8010ea0 <tcp_receive+0xb08>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	441a      	add	r2, r3
 8010c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c62:	68db      	ldr	r3, [r3, #12]
 8010c64:	685b      	ldr	r3, [r3, #4]
 8010c66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010c68:	8909      	ldrh	r1, [r1, #8]
 8010c6a:	440b      	add	r3, r1
 8010c6c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	da9a      	bge.n	8010ba8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d059      	beq.n	8010d2c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8010c78:	4b88      	ldr	r3, [pc, #544]	; (8010e9c <tcp_receive+0xb04>)
 8010c7a:	881b      	ldrh	r3, [r3, #0]
 8010c7c:	461a      	mov	r2, r3
 8010c7e:	4b88      	ldr	r3, [pc, #544]	; (8010ea0 <tcp_receive+0xb08>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	441a      	add	r2, r3
 8010c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c86:	68db      	ldr	r3, [r3, #12]
 8010c88:	685b      	ldr	r3, [r3, #4]
 8010c8a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	dd4d      	ble.n	8010d2c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c92:	68db      	ldr	r3, [r3, #12]
 8010c94:	685b      	ldr	r3, [r3, #4]
 8010c96:	b29a      	uxth	r2, r3
 8010c98:	4b81      	ldr	r3, [pc, #516]	; (8010ea0 <tcp_receive+0xb08>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	b29b      	uxth	r3, r3
 8010c9e:	1ad3      	subs	r3, r2, r3
 8010ca0:	b29a      	uxth	r2, r3
 8010ca2:	4b80      	ldr	r3, [pc, #512]	; (8010ea4 <tcp_receive+0xb0c>)
 8010ca4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010ca6:	4b7f      	ldr	r3, [pc, #508]	; (8010ea4 <tcp_receive+0xb0c>)
 8010ca8:	68db      	ldr	r3, [r3, #12]
 8010caa:	899b      	ldrh	r3, [r3, #12]
 8010cac:	b29b      	uxth	r3, r3
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f7fa fd28 	bl	800b704 <lwip_htons>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	b2db      	uxtb	r3, r3
 8010cb8:	f003 0302 	and.w	r3, r3, #2
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d005      	beq.n	8010ccc <tcp_receive+0x934>
                inseg.len -= 1;
 8010cc0:	4b78      	ldr	r3, [pc, #480]	; (8010ea4 <tcp_receive+0xb0c>)
 8010cc2:	891b      	ldrh	r3, [r3, #8]
 8010cc4:	3b01      	subs	r3, #1
 8010cc6:	b29a      	uxth	r2, r3
 8010cc8:	4b76      	ldr	r3, [pc, #472]	; (8010ea4 <tcp_receive+0xb0c>)
 8010cca:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010ccc:	4b75      	ldr	r3, [pc, #468]	; (8010ea4 <tcp_receive+0xb0c>)
 8010cce:	685b      	ldr	r3, [r3, #4]
 8010cd0:	4a74      	ldr	r2, [pc, #464]	; (8010ea4 <tcp_receive+0xb0c>)
 8010cd2:	8912      	ldrh	r2, [r2, #8]
 8010cd4:	4611      	mov	r1, r2
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f7fb fed6 	bl	800ca88 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010cdc:	4b71      	ldr	r3, [pc, #452]	; (8010ea4 <tcp_receive+0xb0c>)
 8010cde:	891c      	ldrh	r4, [r3, #8]
 8010ce0:	4b70      	ldr	r3, [pc, #448]	; (8010ea4 <tcp_receive+0xb0c>)
 8010ce2:	68db      	ldr	r3, [r3, #12]
 8010ce4:	899b      	ldrh	r3, [r3, #12]
 8010ce6:	b29b      	uxth	r3, r3
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f7fa fd0b 	bl	800b704 <lwip_htons>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	b2db      	uxtb	r3, r3
 8010cf2:	f003 0303 	and.w	r3, r3, #3
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d001      	beq.n	8010cfe <tcp_receive+0x966>
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	e000      	b.n	8010d00 <tcp_receive+0x968>
 8010cfe:	2300      	movs	r3, #0
 8010d00:	4423      	add	r3, r4
 8010d02:	b29a      	uxth	r2, r3
 8010d04:	4b65      	ldr	r3, [pc, #404]	; (8010e9c <tcp_receive+0xb04>)
 8010d06:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010d08:	4b64      	ldr	r3, [pc, #400]	; (8010e9c <tcp_receive+0xb04>)
 8010d0a:	881b      	ldrh	r3, [r3, #0]
 8010d0c:	461a      	mov	r2, r3
 8010d0e:	4b64      	ldr	r3, [pc, #400]	; (8010ea0 <tcp_receive+0xb08>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	441a      	add	r2, r3
 8010d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d16:	68db      	ldr	r3, [r3, #12]
 8010d18:	685b      	ldr	r3, [r3, #4]
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d006      	beq.n	8010d2c <tcp_receive+0x994>
 8010d1e:	4b62      	ldr	r3, [pc, #392]	; (8010ea8 <tcp_receive+0xb10>)
 8010d20:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010d24:	4961      	ldr	r1, [pc, #388]	; (8010eac <tcp_receive+0xb14>)
 8010d26:	4862      	ldr	r0, [pc, #392]	; (8010eb0 <tcp_receive+0xb18>)
 8010d28:	f005 ff8c 	bl	8016c44 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010d30:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010d32:	4b5a      	ldr	r3, [pc, #360]	; (8010e9c <tcp_receive+0xb04>)
 8010d34:	881b      	ldrh	r3, [r3, #0]
 8010d36:	461a      	mov	r2, r3
 8010d38:	4b59      	ldr	r3, [pc, #356]	; (8010ea0 <tcp_receive+0xb08>)
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	441a      	add	r2, r3
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010d46:	4b55      	ldr	r3, [pc, #340]	; (8010e9c <tcp_receive+0xb04>)
 8010d48:	881b      	ldrh	r3, [r3, #0]
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	d206      	bcs.n	8010d5c <tcp_receive+0x9c4>
 8010d4e:	4b56      	ldr	r3, [pc, #344]	; (8010ea8 <tcp_receive+0xb10>)
 8010d50:	f240 6207 	movw	r2, #1543	; 0x607
 8010d54:	4957      	ldr	r1, [pc, #348]	; (8010eb4 <tcp_receive+0xb1c>)
 8010d56:	4856      	ldr	r0, [pc, #344]	; (8010eb0 <tcp_receive+0xb18>)
 8010d58:	f005 ff74 	bl	8016c44 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010d60:	4b4e      	ldr	r3, [pc, #312]	; (8010e9c <tcp_receive+0xb04>)
 8010d62:	881b      	ldrh	r3, [r3, #0]
 8010d64:	1ad3      	subs	r3, r2, r3
 8010d66:	b29a      	uxth	r2, r3
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010d6c:	6878      	ldr	r0, [r7, #4]
 8010d6e:	f7fc feb5 	bl	800dadc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010d72:	4b4c      	ldr	r3, [pc, #304]	; (8010ea4 <tcp_receive+0xb0c>)
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	891b      	ldrh	r3, [r3, #8]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d006      	beq.n	8010d8a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010d7c:	4b49      	ldr	r3, [pc, #292]	; (8010ea4 <tcp_receive+0xb0c>)
 8010d7e:	685b      	ldr	r3, [r3, #4]
 8010d80:	4a4d      	ldr	r2, [pc, #308]	; (8010eb8 <tcp_receive+0xb20>)
 8010d82:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010d84:	4b47      	ldr	r3, [pc, #284]	; (8010ea4 <tcp_receive+0xb0c>)
 8010d86:	2200      	movs	r2, #0
 8010d88:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010d8a:	4b46      	ldr	r3, [pc, #280]	; (8010ea4 <tcp_receive+0xb0c>)
 8010d8c:	68db      	ldr	r3, [r3, #12]
 8010d8e:	899b      	ldrh	r3, [r3, #12]
 8010d90:	b29b      	uxth	r3, r3
 8010d92:	4618      	mov	r0, r3
 8010d94:	f7fa fcb6 	bl	800b704 <lwip_htons>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	b2db      	uxtb	r3, r3
 8010d9c:	f003 0301 	and.w	r3, r3, #1
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	f000 80b8 	beq.w	8010f16 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010da6:	4b45      	ldr	r3, [pc, #276]	; (8010ebc <tcp_receive+0xb24>)
 8010da8:	781b      	ldrb	r3, [r3, #0]
 8010daa:	f043 0320 	orr.w	r3, r3, #32
 8010dae:	b2da      	uxtb	r2, r3
 8010db0:	4b42      	ldr	r3, [pc, #264]	; (8010ebc <tcp_receive+0xb24>)
 8010db2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010db4:	e0af      	b.n	8010f16 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010dba:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010dc0:	68db      	ldr	r3, [r3, #12]
 8010dc2:	685b      	ldr	r3, [r3, #4]
 8010dc4:	4a36      	ldr	r2, [pc, #216]	; (8010ea0 <tcp_receive+0xb08>)
 8010dc6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010dc8:	68bb      	ldr	r3, [r7, #8]
 8010dca:	891b      	ldrh	r3, [r3, #8]
 8010dcc:	461c      	mov	r4, r3
 8010dce:	68bb      	ldr	r3, [r7, #8]
 8010dd0:	68db      	ldr	r3, [r3, #12]
 8010dd2:	899b      	ldrh	r3, [r3, #12]
 8010dd4:	b29b      	uxth	r3, r3
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f7fa fc94 	bl	800b704 <lwip_htons>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	b2db      	uxtb	r3, r3
 8010de0:	f003 0303 	and.w	r3, r3, #3
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d001      	beq.n	8010dec <tcp_receive+0xa54>
 8010de8:	2301      	movs	r3, #1
 8010dea:	e000      	b.n	8010dee <tcp_receive+0xa56>
 8010dec:	2300      	movs	r3, #0
 8010dee:	191a      	adds	r2, r3, r4
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010df4:	441a      	add	r2, r3
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010dfe:	461c      	mov	r4, r3
 8010e00:	68bb      	ldr	r3, [r7, #8]
 8010e02:	891b      	ldrh	r3, [r3, #8]
 8010e04:	461d      	mov	r5, r3
 8010e06:	68bb      	ldr	r3, [r7, #8]
 8010e08:	68db      	ldr	r3, [r3, #12]
 8010e0a:	899b      	ldrh	r3, [r3, #12]
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f7fa fc78 	bl	800b704 <lwip_htons>
 8010e14:	4603      	mov	r3, r0
 8010e16:	b2db      	uxtb	r3, r3
 8010e18:	f003 0303 	and.w	r3, r3, #3
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d001      	beq.n	8010e24 <tcp_receive+0xa8c>
 8010e20:	2301      	movs	r3, #1
 8010e22:	e000      	b.n	8010e26 <tcp_receive+0xa8e>
 8010e24:	2300      	movs	r3, #0
 8010e26:	442b      	add	r3, r5
 8010e28:	429c      	cmp	r4, r3
 8010e2a:	d206      	bcs.n	8010e3a <tcp_receive+0xaa2>
 8010e2c:	4b1e      	ldr	r3, [pc, #120]	; (8010ea8 <tcp_receive+0xb10>)
 8010e2e:	f240 622b 	movw	r2, #1579	; 0x62b
 8010e32:	4923      	ldr	r1, [pc, #140]	; (8010ec0 <tcp_receive+0xb28>)
 8010e34:	481e      	ldr	r0, [pc, #120]	; (8010eb0 <tcp_receive+0xb18>)
 8010e36:	f005 ff05 	bl	8016c44 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	891b      	ldrh	r3, [r3, #8]
 8010e3e:	461c      	mov	r4, r3
 8010e40:	68bb      	ldr	r3, [r7, #8]
 8010e42:	68db      	ldr	r3, [r3, #12]
 8010e44:	899b      	ldrh	r3, [r3, #12]
 8010e46:	b29b      	uxth	r3, r3
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f7fa fc5b 	bl	800b704 <lwip_htons>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	b2db      	uxtb	r3, r3
 8010e52:	f003 0303 	and.w	r3, r3, #3
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d001      	beq.n	8010e5e <tcp_receive+0xac6>
 8010e5a:	2301      	movs	r3, #1
 8010e5c:	e000      	b.n	8010e60 <tcp_receive+0xac8>
 8010e5e:	2300      	movs	r3, #0
 8010e60:	1919      	adds	r1, r3, r4
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010e66:	b28b      	uxth	r3, r1
 8010e68:	1ad3      	subs	r3, r2, r3
 8010e6a:	b29a      	uxth	r2, r3
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010e70:	6878      	ldr	r0, [r7, #4]
 8010e72:	f7fc fe33 	bl	800dadc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010e76:	68bb      	ldr	r3, [r7, #8]
 8010e78:	685b      	ldr	r3, [r3, #4]
 8010e7a:	891b      	ldrh	r3, [r3, #8]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d028      	beq.n	8010ed2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010e80:	4b0d      	ldr	r3, [pc, #52]	; (8010eb8 <tcp_receive+0xb20>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d01d      	beq.n	8010ec4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8010e88:	4b0b      	ldr	r3, [pc, #44]	; (8010eb8 <tcp_receive+0xb20>)
 8010e8a:	681a      	ldr	r2, [r3, #0]
 8010e8c:	68bb      	ldr	r3, [r7, #8]
 8010e8e:	685b      	ldr	r3, [r3, #4]
 8010e90:	4619      	mov	r1, r3
 8010e92:	4610      	mov	r0, r2
 8010e94:	f7fc f84c 	bl	800cf30 <pbuf_cat>
 8010e98:	e018      	b.n	8010ecc <tcp_receive+0xb34>
 8010e9a:	bf00      	nop
 8010e9c:	20006872 	.word	0x20006872
 8010ea0:	20006868 	.word	0x20006868
 8010ea4:	20006848 	.word	0x20006848
 8010ea8:	080197fc 	.word	0x080197fc
 8010eac:	08019bdc 	.word	0x08019bdc
 8010eb0:	08019848 	.word	0x08019848
 8010eb4:	08019c18 	.word	0x08019c18
 8010eb8:	20006878 	.word	0x20006878
 8010ebc:	20006875 	.word	0x20006875
 8010ec0:	08019c38 	.word	0x08019c38
            } else {
              recv_data = cseg->p;
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	4a70      	ldr	r2, [pc, #448]	; (801108c <tcp_receive+0xcf4>)
 8010eca:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	2200      	movs	r2, #0
 8010ed0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	68db      	ldr	r3, [r3, #12]
 8010ed6:	899b      	ldrh	r3, [r3, #12]
 8010ed8:	b29b      	uxth	r3, r3
 8010eda:	4618      	mov	r0, r3
 8010edc:	f7fa fc12 	bl	800b704 <lwip_htons>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	b2db      	uxtb	r3, r3
 8010ee4:	f003 0301 	and.w	r3, r3, #1
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d00d      	beq.n	8010f08 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010eec:	4b68      	ldr	r3, [pc, #416]	; (8011090 <tcp_receive+0xcf8>)
 8010eee:	781b      	ldrb	r3, [r3, #0]
 8010ef0:	f043 0320 	orr.w	r3, r3, #32
 8010ef4:	b2da      	uxtb	r2, r3
 8010ef6:	4b66      	ldr	r3, [pc, #408]	; (8011090 <tcp_receive+0xcf8>)
 8010ef8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	7d1b      	ldrb	r3, [r3, #20]
 8010efe:	2b04      	cmp	r3, #4
 8010f00:	d102      	bne.n	8010f08 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2207      	movs	r2, #7
 8010f06:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	681a      	ldr	r2, [r3, #0]
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010f10:	68b8      	ldr	r0, [r7, #8]
 8010f12:	f7fd fb08 	bl	800e526 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d008      	beq.n	8010f30 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f22:	68db      	ldr	r3, [r3, #12]
 8010f24:	685a      	ldr	r2, [r3, #4]
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	f43f af43 	beq.w	8010db6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	8b5b      	ldrh	r3, [r3, #26]
 8010f34:	f003 0301 	and.w	r3, r3, #1
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d00e      	beq.n	8010f5a <tcp_receive+0xbc2>
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	8b5b      	ldrh	r3, [r3, #26]
 8010f40:	f023 0301 	bic.w	r3, r3, #1
 8010f44:	b29a      	uxth	r2, r3
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	835a      	strh	r2, [r3, #26]
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	8b5b      	ldrh	r3, [r3, #26]
 8010f4e:	f043 0302 	orr.w	r3, r3, #2
 8010f52:	b29a      	uxth	r2, r3
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010f58:	e188      	b.n	801126c <tcp_receive+0xed4>
        tcp_ack(pcb);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	8b5b      	ldrh	r3, [r3, #26]
 8010f5e:	f043 0301 	orr.w	r3, r3, #1
 8010f62:	b29a      	uxth	r2, r3
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010f68:	e180      	b.n	801126c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d106      	bne.n	8010f80 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010f72:	4848      	ldr	r0, [pc, #288]	; (8011094 <tcp_receive+0xcfc>)
 8010f74:	f7fd faf0 	bl	800e558 <tcp_seg_copy>
 8010f78:	4602      	mov	r2, r0
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	675a      	str	r2, [r3, #116]	; 0x74
 8010f7e:	e16d      	b.n	801125c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010f80:	2300      	movs	r3, #0
 8010f82:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f88:	63bb      	str	r3, [r7, #56]	; 0x38
 8010f8a:	e157      	b.n	801123c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8010f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f8e:	68db      	ldr	r3, [r3, #12]
 8010f90:	685a      	ldr	r2, [r3, #4]
 8010f92:	4b41      	ldr	r3, [pc, #260]	; (8011098 <tcp_receive+0xd00>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d11d      	bne.n	8010fd6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010f9a:	4b3e      	ldr	r3, [pc, #248]	; (8011094 <tcp_receive+0xcfc>)
 8010f9c:	891a      	ldrh	r2, [r3, #8]
 8010f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fa0:	891b      	ldrh	r3, [r3, #8]
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	f240 814f 	bls.w	8011246 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010fa8:	483a      	ldr	r0, [pc, #232]	; (8011094 <tcp_receive+0xcfc>)
 8010faa:	f7fd fad5 	bl	800e558 <tcp_seg_copy>
 8010fae:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	f000 8149 	beq.w	801124a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8010fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d003      	beq.n	8010fc6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fc0:	697a      	ldr	r2, [r7, #20]
 8010fc2:	601a      	str	r2, [r3, #0]
 8010fc4:	e002      	b.n	8010fcc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	697a      	ldr	r2, [r7, #20]
 8010fca:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010fcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010fce:	6978      	ldr	r0, [r7, #20]
 8010fd0:	f7ff f8de 	bl	8010190 <tcp_oos_insert_segment>
                }
                break;
 8010fd4:	e139      	b.n	801124a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d117      	bne.n	801100c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010fdc:	4b2e      	ldr	r3, [pc, #184]	; (8011098 <tcp_receive+0xd00>)
 8010fde:	681a      	ldr	r2, [r3, #0]
 8010fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fe2:	68db      	ldr	r3, [r3, #12]
 8010fe4:	685b      	ldr	r3, [r3, #4]
 8010fe6:	1ad3      	subs	r3, r2, r3
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	da57      	bge.n	801109c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010fec:	4829      	ldr	r0, [pc, #164]	; (8011094 <tcp_receive+0xcfc>)
 8010fee:	f7fd fab3 	bl	800e558 <tcp_seg_copy>
 8010ff2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010ff4:	69bb      	ldr	r3, [r7, #24]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	f000 8129 	beq.w	801124e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	69ba      	ldr	r2, [r7, #24]
 8011000:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011002:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011004:	69b8      	ldr	r0, [r7, #24]
 8011006:	f7ff f8c3 	bl	8010190 <tcp_oos_insert_segment>
                  }
                  break;
 801100a:	e120      	b.n	801124e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801100c:	4b22      	ldr	r3, [pc, #136]	; (8011098 <tcp_receive+0xd00>)
 801100e:	681a      	ldr	r2, [r3, #0]
 8011010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011012:	68db      	ldr	r3, [r3, #12]
 8011014:	685b      	ldr	r3, [r3, #4]
 8011016:	1ad3      	subs	r3, r2, r3
 8011018:	3b01      	subs	r3, #1
 801101a:	2b00      	cmp	r3, #0
 801101c:	db3e      	blt.n	801109c <tcp_receive+0xd04>
 801101e:	4b1e      	ldr	r3, [pc, #120]	; (8011098 <tcp_receive+0xd00>)
 8011020:	681a      	ldr	r2, [r3, #0]
 8011022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011024:	68db      	ldr	r3, [r3, #12]
 8011026:	685b      	ldr	r3, [r3, #4]
 8011028:	1ad3      	subs	r3, r2, r3
 801102a:	3301      	adds	r3, #1
 801102c:	2b00      	cmp	r3, #0
 801102e:	dc35      	bgt.n	801109c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011030:	4818      	ldr	r0, [pc, #96]	; (8011094 <tcp_receive+0xcfc>)
 8011032:	f7fd fa91 	bl	800e558 <tcp_seg_copy>
 8011036:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011038:	69fb      	ldr	r3, [r7, #28]
 801103a:	2b00      	cmp	r3, #0
 801103c:	f000 8109 	beq.w	8011252 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011042:	68db      	ldr	r3, [r3, #12]
 8011044:	685b      	ldr	r3, [r3, #4]
 8011046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011048:	8912      	ldrh	r2, [r2, #8]
 801104a:	441a      	add	r2, r3
 801104c:	4b12      	ldr	r3, [pc, #72]	; (8011098 <tcp_receive+0xd00>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	1ad3      	subs	r3, r2, r3
 8011052:	2b00      	cmp	r3, #0
 8011054:	dd12      	ble.n	801107c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011056:	4b10      	ldr	r3, [pc, #64]	; (8011098 <tcp_receive+0xd00>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	b29a      	uxth	r2, r3
 801105c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801105e:	68db      	ldr	r3, [r3, #12]
 8011060:	685b      	ldr	r3, [r3, #4]
 8011062:	b29b      	uxth	r3, r3
 8011064:	1ad3      	subs	r3, r2, r3
 8011066:	b29a      	uxth	r2, r3
 8011068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801106a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801106c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801106e:	685a      	ldr	r2, [r3, #4]
 8011070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011072:	891b      	ldrh	r3, [r3, #8]
 8011074:	4619      	mov	r1, r3
 8011076:	4610      	mov	r0, r2
 8011078:	f7fb fd06 	bl	800ca88 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801107c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801107e:	69fa      	ldr	r2, [r7, #28]
 8011080:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011082:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011084:	69f8      	ldr	r0, [r7, #28]
 8011086:	f7ff f883 	bl	8010190 <tcp_oos_insert_segment>
                  }
                  break;
 801108a:	e0e2      	b.n	8011252 <tcp_receive+0xeba>
 801108c:	20006878 	.word	0x20006878
 8011090:	20006875 	.word	0x20006875
 8011094:	20006848 	.word	0x20006848
 8011098:	20006868 	.word	0x20006868
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801109c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801109e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80110a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	f040 80c6 	bne.w	8011236 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80110aa:	4b80      	ldr	r3, [pc, #512]	; (80112ac <tcp_receive+0xf14>)
 80110ac:	681a      	ldr	r2, [r3, #0]
 80110ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110b0:	68db      	ldr	r3, [r3, #12]
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	f340 80bd 	ble.w	8011236 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80110bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110be:	68db      	ldr	r3, [r3, #12]
 80110c0:	899b      	ldrh	r3, [r3, #12]
 80110c2:	b29b      	uxth	r3, r3
 80110c4:	4618      	mov	r0, r3
 80110c6:	f7fa fb1d 	bl	800b704 <lwip_htons>
 80110ca:	4603      	mov	r3, r0
 80110cc:	b2db      	uxtb	r3, r3
 80110ce:	f003 0301 	and.w	r3, r3, #1
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	f040 80bf 	bne.w	8011256 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80110d8:	4875      	ldr	r0, [pc, #468]	; (80112b0 <tcp_receive+0xf18>)
 80110da:	f7fd fa3d 	bl	800e558 <tcp_seg_copy>
 80110de:	4602      	mov	r2, r0
 80110e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110e2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80110e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	f000 80b6 	beq.w	801125a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80110ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110f0:	68db      	ldr	r3, [r3, #12]
 80110f2:	685b      	ldr	r3, [r3, #4]
 80110f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110f6:	8912      	ldrh	r2, [r2, #8]
 80110f8:	441a      	add	r2, r3
 80110fa:	4b6c      	ldr	r3, [pc, #432]	; (80112ac <tcp_receive+0xf14>)
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	1ad3      	subs	r3, r2, r3
 8011100:	2b00      	cmp	r3, #0
 8011102:	dd12      	ble.n	801112a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011104:	4b69      	ldr	r3, [pc, #420]	; (80112ac <tcp_receive+0xf14>)
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	b29a      	uxth	r2, r3
 801110a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801110c:	68db      	ldr	r3, [r3, #12]
 801110e:	685b      	ldr	r3, [r3, #4]
 8011110:	b29b      	uxth	r3, r3
 8011112:	1ad3      	subs	r3, r2, r3
 8011114:	b29a      	uxth	r2, r3
 8011116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011118:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801111a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801111c:	685a      	ldr	r2, [r3, #4]
 801111e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011120:	891b      	ldrh	r3, [r3, #8]
 8011122:	4619      	mov	r1, r3
 8011124:	4610      	mov	r0, r2
 8011126:	f7fb fcaf 	bl	800ca88 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801112a:	4b62      	ldr	r3, [pc, #392]	; (80112b4 <tcp_receive+0xf1c>)
 801112c:	881b      	ldrh	r3, [r3, #0]
 801112e:	461a      	mov	r2, r3
 8011130:	4b5e      	ldr	r3, [pc, #376]	; (80112ac <tcp_receive+0xf14>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	441a      	add	r2, r3
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801113a:	6879      	ldr	r1, [r7, #4]
 801113c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801113e:	440b      	add	r3, r1
 8011140:	1ad3      	subs	r3, r2, r3
 8011142:	2b00      	cmp	r3, #0
 8011144:	f340 8089 	ble.w	801125a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	68db      	ldr	r3, [r3, #12]
 801114e:	899b      	ldrh	r3, [r3, #12]
 8011150:	b29b      	uxth	r3, r3
 8011152:	4618      	mov	r0, r3
 8011154:	f7fa fad6 	bl	800b704 <lwip_htons>
 8011158:	4603      	mov	r3, r0
 801115a:	b2db      	uxtb	r3, r3
 801115c:	f003 0301 	and.w	r3, r3, #1
 8011160:	2b00      	cmp	r3, #0
 8011162:	d022      	beq.n	80111aa <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	68db      	ldr	r3, [r3, #12]
 801116a:	899b      	ldrh	r3, [r3, #12]
 801116c:	b29b      	uxth	r3, r3
 801116e:	b21b      	sxth	r3, r3
 8011170:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011174:	b21c      	sxth	r4, r3
 8011176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	68db      	ldr	r3, [r3, #12]
 801117c:	899b      	ldrh	r3, [r3, #12]
 801117e:	b29b      	uxth	r3, r3
 8011180:	4618      	mov	r0, r3
 8011182:	f7fa fabf 	bl	800b704 <lwip_htons>
 8011186:	4603      	mov	r3, r0
 8011188:	b2db      	uxtb	r3, r3
 801118a:	b29b      	uxth	r3, r3
 801118c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011190:	b29b      	uxth	r3, r3
 8011192:	4618      	mov	r0, r3
 8011194:	f7fa fab6 	bl	800b704 <lwip_htons>
 8011198:	4603      	mov	r3, r0
 801119a:	b21b      	sxth	r3, r3
 801119c:	4323      	orrs	r3, r4
 801119e:	b21a      	sxth	r2, r3
 80111a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	68db      	ldr	r3, [r3, #12]
 80111a6:	b292      	uxth	r2, r2
 80111a8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111ae:	b29a      	uxth	r2, r3
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80111b4:	4413      	add	r3, r2
 80111b6:	b299      	uxth	r1, r3
 80111b8:	4b3c      	ldr	r3, [pc, #240]	; (80112ac <tcp_receive+0xf14>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	b29a      	uxth	r2, r3
 80111be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	1a8a      	subs	r2, r1, r2
 80111c4:	b292      	uxth	r2, r2
 80111c6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80111c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	685a      	ldr	r2, [r3, #4]
 80111ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	891b      	ldrh	r3, [r3, #8]
 80111d4:	4619      	mov	r1, r3
 80111d6:	4610      	mov	r0, r2
 80111d8:	f7fb fc56 	bl	800ca88 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80111dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	891c      	ldrh	r4, [r3, #8]
 80111e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	68db      	ldr	r3, [r3, #12]
 80111e8:	899b      	ldrh	r3, [r3, #12]
 80111ea:	b29b      	uxth	r3, r3
 80111ec:	4618      	mov	r0, r3
 80111ee:	f7fa fa89 	bl	800b704 <lwip_htons>
 80111f2:	4603      	mov	r3, r0
 80111f4:	b2db      	uxtb	r3, r3
 80111f6:	f003 0303 	and.w	r3, r3, #3
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d001      	beq.n	8011202 <tcp_receive+0xe6a>
 80111fe:	2301      	movs	r3, #1
 8011200:	e000      	b.n	8011204 <tcp_receive+0xe6c>
 8011202:	2300      	movs	r3, #0
 8011204:	4423      	add	r3, r4
 8011206:	b29a      	uxth	r2, r3
 8011208:	4b2a      	ldr	r3, [pc, #168]	; (80112b4 <tcp_receive+0xf1c>)
 801120a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801120c:	4b29      	ldr	r3, [pc, #164]	; (80112b4 <tcp_receive+0xf1c>)
 801120e:	881b      	ldrh	r3, [r3, #0]
 8011210:	461a      	mov	r2, r3
 8011212:	4b26      	ldr	r3, [pc, #152]	; (80112ac <tcp_receive+0xf14>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	441a      	add	r2, r3
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801121c:	6879      	ldr	r1, [r7, #4]
 801121e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011220:	440b      	add	r3, r1
 8011222:	429a      	cmp	r2, r3
 8011224:	d019      	beq.n	801125a <tcp_receive+0xec2>
 8011226:	4b24      	ldr	r3, [pc, #144]	; (80112b8 <tcp_receive+0xf20>)
 8011228:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801122c:	4923      	ldr	r1, [pc, #140]	; (80112bc <tcp_receive+0xf24>)
 801122e:	4824      	ldr	r0, [pc, #144]	; (80112c0 <tcp_receive+0xf28>)
 8011230:	f005 fd08 	bl	8016c44 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011234:	e011      	b.n	801125a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	63bb      	str	r3, [r7, #56]	; 0x38
 801123c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801123e:	2b00      	cmp	r3, #0
 8011240:	f47f aea4 	bne.w	8010f8c <tcp_receive+0xbf4>
 8011244:	e00a      	b.n	801125c <tcp_receive+0xec4>
                break;
 8011246:	bf00      	nop
 8011248:	e008      	b.n	801125c <tcp_receive+0xec4>
                break;
 801124a:	bf00      	nop
 801124c:	e006      	b.n	801125c <tcp_receive+0xec4>
                  break;
 801124e:	bf00      	nop
 8011250:	e004      	b.n	801125c <tcp_receive+0xec4>
                  break;
 8011252:	bf00      	nop
 8011254:	e002      	b.n	801125c <tcp_receive+0xec4>
                  break;
 8011256:	bf00      	nop
 8011258:	e000      	b.n	801125c <tcp_receive+0xec4>
                break;
 801125a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f001 fe8b 	bl	8012f78 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011262:	e003      	b.n	801126c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	f001 fe87 	bl	8012f78 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801126a:	e01a      	b.n	80112a2 <tcp_receive+0xf0a>
 801126c:	e019      	b.n	80112a2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801126e:	4b0f      	ldr	r3, [pc, #60]	; (80112ac <tcp_receive+0xf14>)
 8011270:	681a      	ldr	r2, [r3, #0]
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011276:	1ad3      	subs	r3, r2, r3
 8011278:	2b00      	cmp	r3, #0
 801127a:	db0a      	blt.n	8011292 <tcp_receive+0xefa>
 801127c:	4b0b      	ldr	r3, [pc, #44]	; (80112ac <tcp_receive+0xf14>)
 801127e:	681a      	ldr	r2, [r3, #0]
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011284:	6879      	ldr	r1, [r7, #4]
 8011286:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011288:	440b      	add	r3, r1
 801128a:	1ad3      	subs	r3, r2, r3
 801128c:	3301      	adds	r3, #1
 801128e:	2b00      	cmp	r3, #0
 8011290:	dd07      	ble.n	80112a2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	8b5b      	ldrh	r3, [r3, #26]
 8011296:	f043 0302 	orr.w	r3, r3, #2
 801129a:	b29a      	uxth	r2, r3
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80112a0:	e7ff      	b.n	80112a2 <tcp_receive+0xf0a>
 80112a2:	bf00      	nop
 80112a4:	3750      	adds	r7, #80	; 0x50
 80112a6:	46bd      	mov	sp, r7
 80112a8:	bdb0      	pop	{r4, r5, r7, pc}
 80112aa:	bf00      	nop
 80112ac:	20006868 	.word	0x20006868
 80112b0:	20006848 	.word	0x20006848
 80112b4:	20006872 	.word	0x20006872
 80112b8:	080197fc 	.word	0x080197fc
 80112bc:	08019ba4 	.word	0x08019ba4
 80112c0:	08019848 	.word	0x08019848

080112c4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80112c4:	b480      	push	{r7}
 80112c6:	b083      	sub	sp, #12
 80112c8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80112ca:	4b15      	ldr	r3, [pc, #84]	; (8011320 <tcp_get_next_optbyte+0x5c>)
 80112cc:	881b      	ldrh	r3, [r3, #0]
 80112ce:	1c5a      	adds	r2, r3, #1
 80112d0:	b291      	uxth	r1, r2
 80112d2:	4a13      	ldr	r2, [pc, #76]	; (8011320 <tcp_get_next_optbyte+0x5c>)
 80112d4:	8011      	strh	r1, [r2, #0]
 80112d6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80112d8:	4b12      	ldr	r3, [pc, #72]	; (8011324 <tcp_get_next_optbyte+0x60>)
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d004      	beq.n	80112ea <tcp_get_next_optbyte+0x26>
 80112e0:	4b11      	ldr	r3, [pc, #68]	; (8011328 <tcp_get_next_optbyte+0x64>)
 80112e2:	881b      	ldrh	r3, [r3, #0]
 80112e4:	88fa      	ldrh	r2, [r7, #6]
 80112e6:	429a      	cmp	r2, r3
 80112e8:	d208      	bcs.n	80112fc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80112ea:	4b10      	ldr	r3, [pc, #64]	; (801132c <tcp_get_next_optbyte+0x68>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	3314      	adds	r3, #20
 80112f0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80112f2:	88fb      	ldrh	r3, [r7, #6]
 80112f4:	683a      	ldr	r2, [r7, #0]
 80112f6:	4413      	add	r3, r2
 80112f8:	781b      	ldrb	r3, [r3, #0]
 80112fa:	e00b      	b.n	8011314 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80112fc:	88fb      	ldrh	r3, [r7, #6]
 80112fe:	b2da      	uxtb	r2, r3
 8011300:	4b09      	ldr	r3, [pc, #36]	; (8011328 <tcp_get_next_optbyte+0x64>)
 8011302:	881b      	ldrh	r3, [r3, #0]
 8011304:	b2db      	uxtb	r3, r3
 8011306:	1ad3      	subs	r3, r2, r3
 8011308:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801130a:	4b06      	ldr	r3, [pc, #24]	; (8011324 <tcp_get_next_optbyte+0x60>)
 801130c:	681a      	ldr	r2, [r3, #0]
 801130e:	797b      	ldrb	r3, [r7, #5]
 8011310:	4413      	add	r3, r2
 8011312:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011314:	4618      	mov	r0, r3
 8011316:	370c      	adds	r7, #12
 8011318:	46bd      	mov	sp, r7
 801131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131e:	4770      	bx	lr
 8011320:	20006864 	.word	0x20006864
 8011324:	20006860 	.word	0x20006860
 8011328:	2000685e 	.word	0x2000685e
 801132c:	20006858 	.word	0x20006858

08011330 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b084      	sub	sp, #16
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d106      	bne.n	801134c <tcp_parseopt+0x1c>
 801133e:	4b32      	ldr	r3, [pc, #200]	; (8011408 <tcp_parseopt+0xd8>)
 8011340:	f240 727d 	movw	r2, #1917	; 0x77d
 8011344:	4931      	ldr	r1, [pc, #196]	; (801140c <tcp_parseopt+0xdc>)
 8011346:	4832      	ldr	r0, [pc, #200]	; (8011410 <tcp_parseopt+0xe0>)
 8011348:	f005 fc7c 	bl	8016c44 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801134c:	4b31      	ldr	r3, [pc, #196]	; (8011414 <tcp_parseopt+0xe4>)
 801134e:	881b      	ldrh	r3, [r3, #0]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d055      	beq.n	8011400 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011354:	4b30      	ldr	r3, [pc, #192]	; (8011418 <tcp_parseopt+0xe8>)
 8011356:	2200      	movs	r2, #0
 8011358:	801a      	strh	r2, [r3, #0]
 801135a:	e045      	b.n	80113e8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801135c:	f7ff ffb2 	bl	80112c4 <tcp_get_next_optbyte>
 8011360:	4603      	mov	r3, r0
 8011362:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011364:	7bfb      	ldrb	r3, [r7, #15]
 8011366:	2b02      	cmp	r3, #2
 8011368:	d006      	beq.n	8011378 <tcp_parseopt+0x48>
 801136a:	2b02      	cmp	r3, #2
 801136c:	dc2b      	bgt.n	80113c6 <tcp_parseopt+0x96>
 801136e:	2b00      	cmp	r3, #0
 8011370:	d041      	beq.n	80113f6 <tcp_parseopt+0xc6>
 8011372:	2b01      	cmp	r3, #1
 8011374:	d127      	bne.n	80113c6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011376:	e037      	b.n	80113e8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011378:	f7ff ffa4 	bl	80112c4 <tcp_get_next_optbyte>
 801137c:	4603      	mov	r3, r0
 801137e:	2b04      	cmp	r3, #4
 8011380:	d13b      	bne.n	80113fa <tcp_parseopt+0xca>
 8011382:	4b25      	ldr	r3, [pc, #148]	; (8011418 <tcp_parseopt+0xe8>)
 8011384:	881b      	ldrh	r3, [r3, #0]
 8011386:	3301      	adds	r3, #1
 8011388:	4a22      	ldr	r2, [pc, #136]	; (8011414 <tcp_parseopt+0xe4>)
 801138a:	8812      	ldrh	r2, [r2, #0]
 801138c:	4293      	cmp	r3, r2
 801138e:	da34      	bge.n	80113fa <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011390:	f7ff ff98 	bl	80112c4 <tcp_get_next_optbyte>
 8011394:	4603      	mov	r3, r0
 8011396:	b29b      	uxth	r3, r3
 8011398:	021b      	lsls	r3, r3, #8
 801139a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801139c:	f7ff ff92 	bl	80112c4 <tcp_get_next_optbyte>
 80113a0:	4603      	mov	r3, r0
 80113a2:	b29a      	uxth	r2, r3
 80113a4:	89bb      	ldrh	r3, [r7, #12]
 80113a6:	4313      	orrs	r3, r2
 80113a8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80113aa:	89bb      	ldrh	r3, [r7, #12]
 80113ac:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80113b0:	d804      	bhi.n	80113bc <tcp_parseopt+0x8c>
 80113b2:	89bb      	ldrh	r3, [r7, #12]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d001      	beq.n	80113bc <tcp_parseopt+0x8c>
 80113b8:	89ba      	ldrh	r2, [r7, #12]
 80113ba:	e001      	b.n	80113c0 <tcp_parseopt+0x90>
 80113bc:	f44f 7206 	mov.w	r2, #536	; 0x218
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80113c4:	e010      	b.n	80113e8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80113c6:	f7ff ff7d 	bl	80112c4 <tcp_get_next_optbyte>
 80113ca:	4603      	mov	r3, r0
 80113cc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80113ce:	7afb      	ldrb	r3, [r7, #11]
 80113d0:	2b01      	cmp	r3, #1
 80113d2:	d914      	bls.n	80113fe <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80113d4:	7afb      	ldrb	r3, [r7, #11]
 80113d6:	b29a      	uxth	r2, r3
 80113d8:	4b0f      	ldr	r3, [pc, #60]	; (8011418 <tcp_parseopt+0xe8>)
 80113da:	881b      	ldrh	r3, [r3, #0]
 80113dc:	4413      	add	r3, r2
 80113de:	b29b      	uxth	r3, r3
 80113e0:	3b02      	subs	r3, #2
 80113e2:	b29a      	uxth	r2, r3
 80113e4:	4b0c      	ldr	r3, [pc, #48]	; (8011418 <tcp_parseopt+0xe8>)
 80113e6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80113e8:	4b0b      	ldr	r3, [pc, #44]	; (8011418 <tcp_parseopt+0xe8>)
 80113ea:	881a      	ldrh	r2, [r3, #0]
 80113ec:	4b09      	ldr	r3, [pc, #36]	; (8011414 <tcp_parseopt+0xe4>)
 80113ee:	881b      	ldrh	r3, [r3, #0]
 80113f0:	429a      	cmp	r2, r3
 80113f2:	d3b3      	bcc.n	801135c <tcp_parseopt+0x2c>
 80113f4:	e004      	b.n	8011400 <tcp_parseopt+0xd0>
          return;
 80113f6:	bf00      	nop
 80113f8:	e002      	b.n	8011400 <tcp_parseopt+0xd0>
            return;
 80113fa:	bf00      	nop
 80113fc:	e000      	b.n	8011400 <tcp_parseopt+0xd0>
            return;
 80113fe:	bf00      	nop
      }
    }
  }
}
 8011400:	3710      	adds	r7, #16
 8011402:	46bd      	mov	sp, r7
 8011404:	bd80      	pop	{r7, pc}
 8011406:	bf00      	nop
 8011408:	080197fc 	.word	0x080197fc
 801140c:	08019c60 	.word	0x08019c60
 8011410:	08019848 	.word	0x08019848
 8011414:	2000685c 	.word	0x2000685c
 8011418:	20006864 	.word	0x20006864

0801141c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801141c:	b480      	push	{r7}
 801141e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011420:	4b05      	ldr	r3, [pc, #20]	; (8011438 <tcp_trigger_input_pcb_close+0x1c>)
 8011422:	781b      	ldrb	r3, [r3, #0]
 8011424:	f043 0310 	orr.w	r3, r3, #16
 8011428:	b2da      	uxtb	r2, r3
 801142a:	4b03      	ldr	r3, [pc, #12]	; (8011438 <tcp_trigger_input_pcb_close+0x1c>)
 801142c:	701a      	strb	r2, [r3, #0]
}
 801142e:	bf00      	nop
 8011430:	46bd      	mov	sp, r7
 8011432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011436:	4770      	bx	lr
 8011438:	20006875 	.word	0x20006875

0801143c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b084      	sub	sp, #16
 8011440:	af00      	add	r7, sp, #0
 8011442:	60f8      	str	r0, [r7, #12]
 8011444:	60b9      	str	r1, [r7, #8]
 8011446:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d00a      	beq.n	8011464 <tcp_route+0x28>
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	7a1b      	ldrb	r3, [r3, #8]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d006      	beq.n	8011464 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	7a1b      	ldrb	r3, [r3, #8]
 801145a:	4618      	mov	r0, r3
 801145c:	f7fb f90c 	bl	800c678 <netif_get_by_index>
 8011460:	4603      	mov	r3, r0
 8011462:	e003      	b.n	801146c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f003 fe35 	bl	80150d4 <ip4_route>
 801146a:	4603      	mov	r3, r0
  }
}
 801146c:	4618      	mov	r0, r3
 801146e:	3710      	adds	r7, #16
 8011470:	46bd      	mov	sp, r7
 8011472:	bd80      	pop	{r7, pc}

08011474 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011474:	b590      	push	{r4, r7, lr}
 8011476:	b087      	sub	sp, #28
 8011478:	af00      	add	r7, sp, #0
 801147a:	60f8      	str	r0, [r7, #12]
 801147c:	60b9      	str	r1, [r7, #8]
 801147e:	603b      	str	r3, [r7, #0]
 8011480:	4613      	mov	r3, r2
 8011482:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d105      	bne.n	8011496 <tcp_create_segment+0x22>
 801148a:	4b44      	ldr	r3, [pc, #272]	; (801159c <tcp_create_segment+0x128>)
 801148c:	22a3      	movs	r2, #163	; 0xa3
 801148e:	4944      	ldr	r1, [pc, #272]	; (80115a0 <tcp_create_segment+0x12c>)
 8011490:	4844      	ldr	r0, [pc, #272]	; (80115a4 <tcp_create_segment+0x130>)
 8011492:	f005 fbd7 	bl	8016c44 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d105      	bne.n	80114a8 <tcp_create_segment+0x34>
 801149c:	4b3f      	ldr	r3, [pc, #252]	; (801159c <tcp_create_segment+0x128>)
 801149e:	22a4      	movs	r2, #164	; 0xa4
 80114a0:	4941      	ldr	r1, [pc, #260]	; (80115a8 <tcp_create_segment+0x134>)
 80114a2:	4840      	ldr	r0, [pc, #256]	; (80115a4 <tcp_create_segment+0x130>)
 80114a4:	f005 fbce 	bl	8016c44 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80114a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80114ac:	009b      	lsls	r3, r3, #2
 80114ae:	b2db      	uxtb	r3, r3
 80114b0:	f003 0304 	and.w	r3, r3, #4
 80114b4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80114b6:	2003      	movs	r0, #3
 80114b8:	f7fa fdda 	bl	800c070 <memp_malloc>
 80114bc:	6138      	str	r0, [r7, #16]
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d104      	bne.n	80114ce <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80114c4:	68b8      	ldr	r0, [r7, #8]
 80114c6:	f7fb fc65 	bl	800cd94 <pbuf_free>
    return NULL;
 80114ca:	2300      	movs	r3, #0
 80114cc:	e061      	b.n	8011592 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80114ce:	693b      	ldr	r3, [r7, #16]
 80114d0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80114d4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80114d6:	693b      	ldr	r3, [r7, #16]
 80114d8:	2200      	movs	r2, #0
 80114da:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80114dc:	693b      	ldr	r3, [r7, #16]
 80114de:	68ba      	ldr	r2, [r7, #8]
 80114e0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	891a      	ldrh	r2, [r3, #8]
 80114e6:	7dfb      	ldrb	r3, [r7, #23]
 80114e8:	b29b      	uxth	r3, r3
 80114ea:	429a      	cmp	r2, r3
 80114ec:	d205      	bcs.n	80114fa <tcp_create_segment+0x86>
 80114ee:	4b2b      	ldr	r3, [pc, #172]	; (801159c <tcp_create_segment+0x128>)
 80114f0:	22b0      	movs	r2, #176	; 0xb0
 80114f2:	492e      	ldr	r1, [pc, #184]	; (80115ac <tcp_create_segment+0x138>)
 80114f4:	482b      	ldr	r0, [pc, #172]	; (80115a4 <tcp_create_segment+0x130>)
 80114f6:	f005 fba5 	bl	8016c44 <iprintf>
  seg->len = p->tot_len - optlen;
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	891a      	ldrh	r2, [r3, #8]
 80114fe:	7dfb      	ldrb	r3, [r7, #23]
 8011500:	b29b      	uxth	r3, r3
 8011502:	1ad3      	subs	r3, r2, r3
 8011504:	b29a      	uxth	r2, r3
 8011506:	693b      	ldr	r3, [r7, #16]
 8011508:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801150a:	2114      	movs	r1, #20
 801150c:	68b8      	ldr	r0, [r7, #8]
 801150e:	f7fb fbab 	bl	800cc68 <pbuf_add_header>
 8011512:	4603      	mov	r3, r0
 8011514:	2b00      	cmp	r3, #0
 8011516:	d004      	beq.n	8011522 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011518:	6938      	ldr	r0, [r7, #16]
 801151a:	f7fd f804 	bl	800e526 <tcp_seg_free>
    return NULL;
 801151e:	2300      	movs	r3, #0
 8011520:	e037      	b.n	8011592 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011522:	693b      	ldr	r3, [r7, #16]
 8011524:	685b      	ldr	r3, [r3, #4]
 8011526:	685a      	ldr	r2, [r3, #4]
 8011528:	693b      	ldr	r3, [r7, #16]
 801152a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	8ada      	ldrh	r2, [r3, #22]
 8011530:	693b      	ldr	r3, [r7, #16]
 8011532:	68dc      	ldr	r4, [r3, #12]
 8011534:	4610      	mov	r0, r2
 8011536:	f7fa f8e5 	bl	800b704 <lwip_htons>
 801153a:	4603      	mov	r3, r0
 801153c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	8b1a      	ldrh	r2, [r3, #24]
 8011542:	693b      	ldr	r3, [r7, #16]
 8011544:	68dc      	ldr	r4, [r3, #12]
 8011546:	4610      	mov	r0, r2
 8011548:	f7fa f8dc 	bl	800b704 <lwip_htons>
 801154c:	4603      	mov	r3, r0
 801154e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011550:	693b      	ldr	r3, [r7, #16]
 8011552:	68dc      	ldr	r4, [r3, #12]
 8011554:	6838      	ldr	r0, [r7, #0]
 8011556:	f7fa f8ea 	bl	800b72e <lwip_htonl>
 801155a:	4603      	mov	r3, r0
 801155c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801155e:	7dfb      	ldrb	r3, [r7, #23]
 8011560:	089b      	lsrs	r3, r3, #2
 8011562:	b2db      	uxtb	r3, r3
 8011564:	b29b      	uxth	r3, r3
 8011566:	3305      	adds	r3, #5
 8011568:	b29b      	uxth	r3, r3
 801156a:	031b      	lsls	r3, r3, #12
 801156c:	b29a      	uxth	r2, r3
 801156e:	79fb      	ldrb	r3, [r7, #7]
 8011570:	b29b      	uxth	r3, r3
 8011572:	4313      	orrs	r3, r2
 8011574:	b29a      	uxth	r2, r3
 8011576:	693b      	ldr	r3, [r7, #16]
 8011578:	68dc      	ldr	r4, [r3, #12]
 801157a:	4610      	mov	r0, r2
 801157c:	f7fa f8c2 	bl	800b704 <lwip_htons>
 8011580:	4603      	mov	r3, r0
 8011582:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011584:	693b      	ldr	r3, [r7, #16]
 8011586:	68db      	ldr	r3, [r3, #12]
 8011588:	2200      	movs	r2, #0
 801158a:	749a      	strb	r2, [r3, #18]
 801158c:	2200      	movs	r2, #0
 801158e:	74da      	strb	r2, [r3, #19]
  return seg;
 8011590:	693b      	ldr	r3, [r7, #16]
}
 8011592:	4618      	mov	r0, r3
 8011594:	371c      	adds	r7, #28
 8011596:	46bd      	mov	sp, r7
 8011598:	bd90      	pop	{r4, r7, pc}
 801159a:	bf00      	nop
 801159c:	08019c7c 	.word	0x08019c7c
 80115a0:	08019cb0 	.word	0x08019cb0
 80115a4:	08019cd0 	.word	0x08019cd0
 80115a8:	08019cf8 	.word	0x08019cf8
 80115ac:	08019d1c 	.word	0x08019d1c

080115b0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b086      	sub	sp, #24
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	607b      	str	r3, [r7, #4]
 80115b8:	4603      	mov	r3, r0
 80115ba:	73fb      	strb	r3, [r7, #15]
 80115bc:	460b      	mov	r3, r1
 80115be:	81bb      	strh	r3, [r7, #12]
 80115c0:	4613      	mov	r3, r2
 80115c2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80115c4:	89bb      	ldrh	r3, [r7, #12]
 80115c6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d105      	bne.n	80115da <tcp_pbuf_prealloc+0x2a>
 80115ce:	4b30      	ldr	r3, [pc, #192]	; (8011690 <tcp_pbuf_prealloc+0xe0>)
 80115d0:	22e8      	movs	r2, #232	; 0xe8
 80115d2:	4930      	ldr	r1, [pc, #192]	; (8011694 <tcp_pbuf_prealloc+0xe4>)
 80115d4:	4830      	ldr	r0, [pc, #192]	; (8011698 <tcp_pbuf_prealloc+0xe8>)
 80115d6:	f005 fb35 	bl	8016c44 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80115da:	6a3b      	ldr	r3, [r7, #32]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d105      	bne.n	80115ec <tcp_pbuf_prealloc+0x3c>
 80115e0:	4b2b      	ldr	r3, [pc, #172]	; (8011690 <tcp_pbuf_prealloc+0xe0>)
 80115e2:	22e9      	movs	r2, #233	; 0xe9
 80115e4:	492d      	ldr	r1, [pc, #180]	; (801169c <tcp_pbuf_prealloc+0xec>)
 80115e6:	482c      	ldr	r0, [pc, #176]	; (8011698 <tcp_pbuf_prealloc+0xe8>)
 80115e8:	f005 fb2c 	bl	8016c44 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80115ec:	89ba      	ldrh	r2, [r7, #12]
 80115ee:	897b      	ldrh	r3, [r7, #10]
 80115f0:	429a      	cmp	r2, r3
 80115f2:	d221      	bcs.n	8011638 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80115f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80115f8:	f003 0302 	and.w	r3, r3, #2
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d111      	bne.n	8011624 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011600:	6a3b      	ldr	r3, [r7, #32]
 8011602:	8b5b      	ldrh	r3, [r3, #26]
 8011604:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011608:	2b00      	cmp	r3, #0
 801160a:	d115      	bne.n	8011638 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801160c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011610:	2b00      	cmp	r3, #0
 8011612:	d007      	beq.n	8011624 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011614:	6a3b      	ldr	r3, [r7, #32]
 8011616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011618:	2b00      	cmp	r3, #0
 801161a:	d103      	bne.n	8011624 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801161c:	6a3b      	ldr	r3, [r7, #32]
 801161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011620:	2b00      	cmp	r3, #0
 8011622:	d009      	beq.n	8011638 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011624:	89bb      	ldrh	r3, [r7, #12]
 8011626:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801162a:	f023 0203 	bic.w	r2, r3, #3
 801162e:	897b      	ldrh	r3, [r7, #10]
 8011630:	4293      	cmp	r3, r2
 8011632:	bf28      	it	cs
 8011634:	4613      	movcs	r3, r2
 8011636:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011638:	8af9      	ldrh	r1, [r7, #22]
 801163a:	7bfb      	ldrb	r3, [r7, #15]
 801163c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011640:	4618      	mov	r0, r3
 8011642:	f7fb f8c3 	bl	800c7cc <pbuf_alloc>
 8011646:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011648:	693b      	ldr	r3, [r7, #16]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d101      	bne.n	8011652 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801164e:	2300      	movs	r3, #0
 8011650:	e019      	b.n	8011686 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d006      	beq.n	8011668 <tcp_pbuf_prealloc+0xb8>
 801165a:	4b0d      	ldr	r3, [pc, #52]	; (8011690 <tcp_pbuf_prealloc+0xe0>)
 801165c:	f240 120b 	movw	r2, #267	; 0x10b
 8011660:	490f      	ldr	r1, [pc, #60]	; (80116a0 <tcp_pbuf_prealloc+0xf0>)
 8011662:	480d      	ldr	r0, [pc, #52]	; (8011698 <tcp_pbuf_prealloc+0xe8>)
 8011664:	f005 faee 	bl	8016c44 <iprintf>
  *oversize = p->len - length;
 8011668:	693b      	ldr	r3, [r7, #16]
 801166a:	895a      	ldrh	r2, [r3, #10]
 801166c:	89bb      	ldrh	r3, [r7, #12]
 801166e:	1ad3      	subs	r3, r2, r3
 8011670:	b29a      	uxth	r2, r3
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011676:	693b      	ldr	r3, [r7, #16]
 8011678:	89ba      	ldrh	r2, [r7, #12]
 801167a:	811a      	strh	r2, [r3, #8]
 801167c:	693b      	ldr	r3, [r7, #16]
 801167e:	891a      	ldrh	r2, [r3, #8]
 8011680:	693b      	ldr	r3, [r7, #16]
 8011682:	815a      	strh	r2, [r3, #10]
  return p;
 8011684:	693b      	ldr	r3, [r7, #16]
}
 8011686:	4618      	mov	r0, r3
 8011688:	3718      	adds	r7, #24
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}
 801168e:	bf00      	nop
 8011690:	08019c7c 	.word	0x08019c7c
 8011694:	08019d34 	.word	0x08019d34
 8011698:	08019cd0 	.word	0x08019cd0
 801169c:	08019d58 	.word	0x08019d58
 80116a0:	08019d78 	.word	0x08019d78

080116a4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b082      	sub	sp, #8
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
 80116ac:	460b      	mov	r3, r1
 80116ae:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d106      	bne.n	80116c4 <tcp_write_checks+0x20>
 80116b6:	4b33      	ldr	r3, [pc, #204]	; (8011784 <tcp_write_checks+0xe0>)
 80116b8:	f240 1233 	movw	r2, #307	; 0x133
 80116bc:	4932      	ldr	r1, [pc, #200]	; (8011788 <tcp_write_checks+0xe4>)
 80116be:	4833      	ldr	r0, [pc, #204]	; (801178c <tcp_write_checks+0xe8>)
 80116c0:	f005 fac0 	bl	8016c44 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	7d1b      	ldrb	r3, [r3, #20]
 80116c8:	2b04      	cmp	r3, #4
 80116ca:	d00e      	beq.n	80116ea <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80116d0:	2b07      	cmp	r3, #7
 80116d2:	d00a      	beq.n	80116ea <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80116d8:	2b02      	cmp	r3, #2
 80116da:	d006      	beq.n	80116ea <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80116e0:	2b03      	cmp	r3, #3
 80116e2:	d002      	beq.n	80116ea <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80116e4:	f06f 030a 	mvn.w	r3, #10
 80116e8:	e048      	b.n	801177c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80116ea:	887b      	ldrh	r3, [r7, #2]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d101      	bne.n	80116f4 <tcp_write_checks+0x50>
    return ERR_OK;
 80116f0:	2300      	movs	r3, #0
 80116f2:	e043      	b.n	801177c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80116fa:	887a      	ldrh	r2, [r7, #2]
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d909      	bls.n	8011714 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	8b5b      	ldrh	r3, [r3, #26]
 8011704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011708:	b29a      	uxth	r2, r3
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801170e:	f04f 33ff 	mov.w	r3, #4294967295
 8011712:	e033      	b.n	801177c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801171a:	2b08      	cmp	r3, #8
 801171c:	d909      	bls.n	8011732 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	8b5b      	ldrh	r3, [r3, #26]
 8011722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011726:	b29a      	uxth	r2, r3
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801172c:	f04f 33ff 	mov.w	r3, #4294967295
 8011730:	e024      	b.n	801177c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011738:	2b00      	cmp	r3, #0
 801173a:	d00f      	beq.n	801175c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011740:	2b00      	cmp	r3, #0
 8011742:	d11a      	bne.n	801177a <tcp_write_checks+0xd6>
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011748:	2b00      	cmp	r3, #0
 801174a:	d116      	bne.n	801177a <tcp_write_checks+0xd6>
 801174c:	4b0d      	ldr	r3, [pc, #52]	; (8011784 <tcp_write_checks+0xe0>)
 801174e:	f240 1255 	movw	r2, #341	; 0x155
 8011752:	490f      	ldr	r1, [pc, #60]	; (8011790 <tcp_write_checks+0xec>)
 8011754:	480d      	ldr	r0, [pc, #52]	; (801178c <tcp_write_checks+0xe8>)
 8011756:	f005 fa75 	bl	8016c44 <iprintf>
 801175a:	e00e      	b.n	801177a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011760:	2b00      	cmp	r3, #0
 8011762:	d103      	bne.n	801176c <tcp_write_checks+0xc8>
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011768:	2b00      	cmp	r3, #0
 801176a:	d006      	beq.n	801177a <tcp_write_checks+0xd6>
 801176c:	4b05      	ldr	r3, [pc, #20]	; (8011784 <tcp_write_checks+0xe0>)
 801176e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011772:	4908      	ldr	r1, [pc, #32]	; (8011794 <tcp_write_checks+0xf0>)
 8011774:	4805      	ldr	r0, [pc, #20]	; (801178c <tcp_write_checks+0xe8>)
 8011776:	f005 fa65 	bl	8016c44 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801177a:	2300      	movs	r3, #0
}
 801177c:	4618      	mov	r0, r3
 801177e:	3708      	adds	r7, #8
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}
 8011784:	08019c7c 	.word	0x08019c7c
 8011788:	08019d8c 	.word	0x08019d8c
 801178c:	08019cd0 	.word	0x08019cd0
 8011790:	08019dac 	.word	0x08019dac
 8011794:	08019de8 	.word	0x08019de8

08011798 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011798:	b590      	push	{r4, r7, lr}
 801179a:	b09b      	sub	sp, #108	; 0x6c
 801179c:	af04      	add	r7, sp, #16
 801179e:	60f8      	str	r0, [r7, #12]
 80117a0:	60b9      	str	r1, [r7, #8]
 80117a2:	4611      	mov	r1, r2
 80117a4:	461a      	mov	r2, r3
 80117a6:	460b      	mov	r3, r1
 80117a8:	80fb      	strh	r3, [r7, #6]
 80117aa:	4613      	mov	r3, r2
 80117ac:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80117ae:	2300      	movs	r3, #0
 80117b0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80117b2:	2300      	movs	r3, #0
 80117b4:	653b      	str	r3, [r7, #80]	; 0x50
 80117b6:	2300      	movs	r3, #0
 80117b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80117ba:	2300      	movs	r3, #0
 80117bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80117be:	2300      	movs	r3, #0
 80117c0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80117c2:	2300      	movs	r3, #0
 80117c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80117c8:	2300      	movs	r3, #0
 80117ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80117ce:	2300      	movs	r3, #0
 80117d0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80117d2:	2300      	movs	r3, #0
 80117d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80117d6:	2300      	movs	r3, #0
 80117d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d109      	bne.n	80117f4 <tcp_write+0x5c>
 80117e0:	4ba4      	ldr	r3, [pc, #656]	; (8011a74 <tcp_write+0x2dc>)
 80117e2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80117e6:	49a4      	ldr	r1, [pc, #656]	; (8011a78 <tcp_write+0x2e0>)
 80117e8:	48a4      	ldr	r0, [pc, #656]	; (8011a7c <tcp_write+0x2e4>)
 80117ea:	f005 fa2b 	bl	8016c44 <iprintf>
 80117ee:	f06f 030f 	mvn.w	r3, #15
 80117f2:	e32a      	b.n	8011e4a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80117fa:	085b      	lsrs	r3, r3, #1
 80117fc:	b29a      	uxth	r2, r3
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011802:	4293      	cmp	r3, r2
 8011804:	bf28      	it	cs
 8011806:	4613      	movcs	r3, r2
 8011808:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801180a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801180c:	2b00      	cmp	r3, #0
 801180e:	d102      	bne.n	8011816 <tcp_write+0x7e>
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011814:	e000      	b.n	8011818 <tcp_write+0x80>
 8011816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011818:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801181a:	68bb      	ldr	r3, [r7, #8]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d109      	bne.n	8011834 <tcp_write+0x9c>
 8011820:	4b94      	ldr	r3, [pc, #592]	; (8011a74 <tcp_write+0x2dc>)
 8011822:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011826:	4996      	ldr	r1, [pc, #600]	; (8011a80 <tcp_write+0x2e8>)
 8011828:	4894      	ldr	r0, [pc, #592]	; (8011a7c <tcp_write+0x2e4>)
 801182a:	f005 fa0b 	bl	8016c44 <iprintf>
 801182e:	f06f 030f 	mvn.w	r3, #15
 8011832:	e30a      	b.n	8011e4a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011834:	88fb      	ldrh	r3, [r7, #6]
 8011836:	4619      	mov	r1, r3
 8011838:	68f8      	ldr	r0, [r7, #12]
 801183a:	f7ff ff33 	bl	80116a4 <tcp_write_checks>
 801183e:	4603      	mov	r3, r0
 8011840:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011844:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011848:	2b00      	cmp	r3, #0
 801184a:	d002      	beq.n	8011852 <tcp_write+0xba>
    return err;
 801184c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011850:	e2fb      	b.n	8011e4a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011858:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801185c:	2300      	movs	r3, #0
 801185e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011866:	2b00      	cmp	r3, #0
 8011868:	f000 80f6 	beq.w	8011a58 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011870:	653b      	str	r3, [r7, #80]	; 0x50
 8011872:	e002      	b.n	801187a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801187a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d1f8      	bne.n	8011874 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011884:	7a9b      	ldrb	r3, [r3, #10]
 8011886:	009b      	lsls	r3, r3, #2
 8011888:	b29b      	uxth	r3, r3
 801188a:	f003 0304 	and.w	r3, r3, #4
 801188e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011890:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011894:	891b      	ldrh	r3, [r3, #8]
 8011896:	4619      	mov	r1, r3
 8011898:	8c3b      	ldrh	r3, [r7, #32]
 801189a:	440b      	add	r3, r1
 801189c:	429a      	cmp	r2, r3
 801189e:	da06      	bge.n	80118ae <tcp_write+0x116>
 80118a0:	4b74      	ldr	r3, [pc, #464]	; (8011a74 <tcp_write+0x2dc>)
 80118a2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80118a6:	4977      	ldr	r1, [pc, #476]	; (8011a84 <tcp_write+0x2ec>)
 80118a8:	4874      	ldr	r0, [pc, #464]	; (8011a7c <tcp_write+0x2e4>)
 80118aa:	f005 f9cb 	bl	8016c44 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80118ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118b0:	891a      	ldrh	r2, [r3, #8]
 80118b2:	8c3b      	ldrh	r3, [r7, #32]
 80118b4:	4413      	add	r3, r2
 80118b6:	b29b      	uxth	r3, r3
 80118b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80118ba:	1ad3      	subs	r3, r2, r3
 80118bc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80118c4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80118c6:	8a7b      	ldrh	r3, [r7, #18]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d026      	beq.n	801191a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80118cc:	8a7b      	ldrh	r3, [r7, #18]
 80118ce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80118d0:	429a      	cmp	r2, r3
 80118d2:	d206      	bcs.n	80118e2 <tcp_write+0x14a>
 80118d4:	4b67      	ldr	r3, [pc, #412]	; (8011a74 <tcp_write+0x2dc>)
 80118d6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80118da:	496b      	ldr	r1, [pc, #428]	; (8011a88 <tcp_write+0x2f0>)
 80118dc:	4867      	ldr	r0, [pc, #412]	; (8011a7c <tcp_write+0x2e4>)
 80118de:	f005 f9b1 	bl	8016c44 <iprintf>
      seg = last_unsent;
 80118e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118e4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80118e6:	8a7b      	ldrh	r3, [r7, #18]
 80118e8:	88fa      	ldrh	r2, [r7, #6]
 80118ea:	4293      	cmp	r3, r2
 80118ec:	bf28      	it	cs
 80118ee:	4613      	movcs	r3, r2
 80118f0:	b29b      	uxth	r3, r3
 80118f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80118f4:	4293      	cmp	r3, r2
 80118f6:	bf28      	it	cs
 80118f8:	4613      	movcs	r3, r2
 80118fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80118fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011900:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011902:	4413      	add	r3, r2
 8011904:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011908:	8a7a      	ldrh	r2, [r7, #18]
 801190a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801190c:	1ad3      	subs	r3, r2, r3
 801190e:	b29b      	uxth	r3, r3
 8011910:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011912:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011914:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011916:	1ad3      	subs	r3, r2, r3
 8011918:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801191a:	8a7b      	ldrh	r3, [r7, #18]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d00b      	beq.n	8011938 <tcp_write+0x1a0>
 8011920:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011924:	88fb      	ldrh	r3, [r7, #6]
 8011926:	429a      	cmp	r2, r3
 8011928:	d006      	beq.n	8011938 <tcp_write+0x1a0>
 801192a:	4b52      	ldr	r3, [pc, #328]	; (8011a74 <tcp_write+0x2dc>)
 801192c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011930:	4956      	ldr	r1, [pc, #344]	; (8011a8c <tcp_write+0x2f4>)
 8011932:	4852      	ldr	r0, [pc, #328]	; (8011a7c <tcp_write+0x2e4>)
 8011934:	f005 f986 	bl	8016c44 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011938:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801193c:	88fb      	ldrh	r3, [r7, #6]
 801193e:	429a      	cmp	r2, r3
 8011940:	f080 8167 	bcs.w	8011c12 <tcp_write+0x47a>
 8011944:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011946:	2b00      	cmp	r3, #0
 8011948:	f000 8163 	beq.w	8011c12 <tcp_write+0x47a>
 801194c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801194e:	891b      	ldrh	r3, [r3, #8]
 8011950:	2b00      	cmp	r3, #0
 8011952:	f000 815e 	beq.w	8011c12 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011956:	88fa      	ldrh	r2, [r7, #6]
 8011958:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801195c:	1ad2      	subs	r2, r2, r3
 801195e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011960:	4293      	cmp	r3, r2
 8011962:	bfa8      	it	ge
 8011964:	4613      	movge	r3, r2
 8011966:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801196a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801196c:	797b      	ldrb	r3, [r7, #5]
 801196e:	f003 0301 	and.w	r3, r3, #1
 8011972:	2b00      	cmp	r3, #0
 8011974:	d027      	beq.n	80119c6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011976:	f107 0012 	add.w	r0, r7, #18
 801197a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801197c:	8bf9      	ldrh	r1, [r7, #30]
 801197e:	2301      	movs	r3, #1
 8011980:	9302      	str	r3, [sp, #8]
 8011982:	797b      	ldrb	r3, [r7, #5]
 8011984:	9301      	str	r3, [sp, #4]
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	9300      	str	r3, [sp, #0]
 801198a:	4603      	mov	r3, r0
 801198c:	2000      	movs	r0, #0
 801198e:	f7ff fe0f 	bl	80115b0 <tcp_pbuf_prealloc>
 8011992:	6578      	str	r0, [r7, #84]	; 0x54
 8011994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011996:	2b00      	cmp	r3, #0
 8011998:	f000 8225 	beq.w	8011de6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801199c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801199e:	6858      	ldr	r0, [r3, #4]
 80119a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80119a4:	68ba      	ldr	r2, [r7, #8]
 80119a6:	4413      	add	r3, r2
 80119a8:	8bfa      	ldrh	r2, [r7, #30]
 80119aa:	4619      	mov	r1, r3
 80119ac:	f005 f88a 	bl	8016ac4 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80119b0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80119b2:	f7fb fa7d 	bl	800ceb0 <pbuf_clen>
 80119b6:	4603      	mov	r3, r0
 80119b8:	461a      	mov	r2, r3
 80119ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80119be:	4413      	add	r3, r2
 80119c0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80119c4:	e041      	b.n	8011a4a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80119c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119c8:	685b      	ldr	r3, [r3, #4]
 80119ca:	637b      	str	r3, [r7, #52]	; 0x34
 80119cc:	e002      	b.n	80119d4 <tcp_write+0x23c>
 80119ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	637b      	str	r3, [r7, #52]	; 0x34
 80119d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d1f8      	bne.n	80119ce <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80119dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119de:	7b1b      	ldrb	r3, [r3, #12]
 80119e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d115      	bne.n	8011a14 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80119e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119ea:	685b      	ldr	r3, [r3, #4]
 80119ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80119ee:	8952      	ldrh	r2, [r2, #10]
 80119f0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80119f2:	68ba      	ldr	r2, [r7, #8]
 80119f4:	429a      	cmp	r2, r3
 80119f6:	d10d      	bne.n	8011a14 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80119f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d006      	beq.n	8011a0e <tcp_write+0x276>
 8011a00:	4b1c      	ldr	r3, [pc, #112]	; (8011a74 <tcp_write+0x2dc>)
 8011a02:	f240 2231 	movw	r2, #561	; 0x231
 8011a06:	4922      	ldr	r1, [pc, #136]	; (8011a90 <tcp_write+0x2f8>)
 8011a08:	481c      	ldr	r0, [pc, #112]	; (8011a7c <tcp_write+0x2e4>)
 8011a0a:	f005 f91b 	bl	8016c44 <iprintf>
          extendlen = seglen;
 8011a0e:	8bfb      	ldrh	r3, [r7, #30]
 8011a10:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011a12:	e01a      	b.n	8011a4a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011a14:	8bfb      	ldrh	r3, [r7, #30]
 8011a16:	2201      	movs	r2, #1
 8011a18:	4619      	mov	r1, r3
 8011a1a:	2000      	movs	r0, #0
 8011a1c:	f7fa fed6 	bl	800c7cc <pbuf_alloc>
 8011a20:	6578      	str	r0, [r7, #84]	; 0x54
 8011a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	f000 81e0 	beq.w	8011dea <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011a2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011a2e:	68ba      	ldr	r2, [r7, #8]
 8011a30:	441a      	add	r2, r3
 8011a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a34:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011a36:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011a38:	f7fb fa3a 	bl	800ceb0 <pbuf_clen>
 8011a3c:	4603      	mov	r3, r0
 8011a3e:	461a      	mov	r2, r3
 8011a40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011a44:	4413      	add	r3, r2
 8011a46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011a4a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011a4e:	8bfb      	ldrh	r3, [r7, #30]
 8011a50:	4413      	add	r3, r2
 8011a52:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011a56:	e0dc      	b.n	8011c12 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	f000 80d7 	beq.w	8011c12 <tcp_write+0x47a>
 8011a64:	4b03      	ldr	r3, [pc, #12]	; (8011a74 <tcp_write+0x2dc>)
 8011a66:	f240 224a 	movw	r2, #586	; 0x24a
 8011a6a:	490a      	ldr	r1, [pc, #40]	; (8011a94 <tcp_write+0x2fc>)
 8011a6c:	4803      	ldr	r0, [pc, #12]	; (8011a7c <tcp_write+0x2e4>)
 8011a6e:	f005 f8e9 	bl	8016c44 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011a72:	e0ce      	b.n	8011c12 <tcp_write+0x47a>
 8011a74:	08019c7c 	.word	0x08019c7c
 8011a78:	08019e1c 	.word	0x08019e1c
 8011a7c:	08019cd0 	.word	0x08019cd0
 8011a80:	08019e34 	.word	0x08019e34
 8011a84:	08019e68 	.word	0x08019e68
 8011a88:	08019e80 	.word	0x08019e80
 8011a8c:	08019ea0 	.word	0x08019ea0
 8011a90:	08019ec0 	.word	0x08019ec0
 8011a94:	08019eec 	.word	0x08019eec
    struct pbuf *p;
    u16_t left = len - pos;
 8011a98:	88fa      	ldrh	r2, [r7, #6]
 8011a9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011a9e:	1ad3      	subs	r3, r2, r3
 8011aa0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011aa2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011aa6:	b29b      	uxth	r3, r3
 8011aa8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011aaa:	1ad3      	subs	r3, r2, r3
 8011aac:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011aae:	8b7a      	ldrh	r2, [r7, #26]
 8011ab0:	8bbb      	ldrh	r3, [r7, #28]
 8011ab2:	4293      	cmp	r3, r2
 8011ab4:	bf28      	it	cs
 8011ab6:	4613      	movcs	r3, r2
 8011ab8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011aba:	797b      	ldrb	r3, [r7, #5]
 8011abc:	f003 0301 	and.w	r3, r3, #1
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d036      	beq.n	8011b32 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011ac4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011ac8:	b29a      	uxth	r2, r3
 8011aca:	8b3b      	ldrh	r3, [r7, #24]
 8011acc:	4413      	add	r3, r2
 8011ace:	b299      	uxth	r1, r3
 8011ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	bf0c      	ite	eq
 8011ad6:	2301      	moveq	r3, #1
 8011ad8:	2300      	movne	r3, #0
 8011ada:	b2db      	uxtb	r3, r3
 8011adc:	f107 0012 	add.w	r0, r7, #18
 8011ae0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011ae2:	9302      	str	r3, [sp, #8]
 8011ae4:	797b      	ldrb	r3, [r7, #5]
 8011ae6:	9301      	str	r3, [sp, #4]
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	9300      	str	r3, [sp, #0]
 8011aec:	4603      	mov	r3, r0
 8011aee:	2036      	movs	r0, #54	; 0x36
 8011af0:	f7ff fd5e 	bl	80115b0 <tcp_pbuf_prealloc>
 8011af4:	6338      	str	r0, [r7, #48]	; 0x30
 8011af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	f000 8178 	beq.w	8011dee <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b00:	895b      	ldrh	r3, [r3, #10]
 8011b02:	8b3a      	ldrh	r2, [r7, #24]
 8011b04:	429a      	cmp	r2, r3
 8011b06:	d906      	bls.n	8011b16 <tcp_write+0x37e>
 8011b08:	4b8c      	ldr	r3, [pc, #560]	; (8011d3c <tcp_write+0x5a4>)
 8011b0a:	f240 2266 	movw	r2, #614	; 0x266
 8011b0e:	498c      	ldr	r1, [pc, #560]	; (8011d40 <tcp_write+0x5a8>)
 8011b10:	488c      	ldr	r0, [pc, #560]	; (8011d44 <tcp_write+0x5ac>)
 8011b12:	f005 f897 	bl	8016c44 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b18:	685a      	ldr	r2, [r3, #4]
 8011b1a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011b1e:	18d0      	adds	r0, r2, r3
 8011b20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b24:	68ba      	ldr	r2, [r7, #8]
 8011b26:	4413      	add	r3, r2
 8011b28:	8b3a      	ldrh	r2, [r7, #24]
 8011b2a:	4619      	mov	r1, r3
 8011b2c:	f004 ffca 	bl	8016ac4 <memcpy>
 8011b30:	e02f      	b.n	8011b92 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011b32:	8a7b      	ldrh	r3, [r7, #18]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d006      	beq.n	8011b46 <tcp_write+0x3ae>
 8011b38:	4b80      	ldr	r3, [pc, #512]	; (8011d3c <tcp_write+0x5a4>)
 8011b3a:	f240 2271 	movw	r2, #625	; 0x271
 8011b3e:	4982      	ldr	r1, [pc, #520]	; (8011d48 <tcp_write+0x5b0>)
 8011b40:	4880      	ldr	r0, [pc, #512]	; (8011d44 <tcp_write+0x5ac>)
 8011b42:	f005 f87f 	bl	8016c44 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011b46:	8b3b      	ldrh	r3, [r7, #24]
 8011b48:	2201      	movs	r2, #1
 8011b4a:	4619      	mov	r1, r3
 8011b4c:	2036      	movs	r0, #54	; 0x36
 8011b4e:	f7fa fe3d 	bl	800c7cc <pbuf_alloc>
 8011b52:	6178      	str	r0, [r7, #20]
 8011b54:	697b      	ldr	r3, [r7, #20]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	f000 814b 	beq.w	8011df2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011b5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b60:	68ba      	ldr	r2, [r7, #8]
 8011b62:	441a      	add	r2, r3
 8011b64:	697b      	ldr	r3, [r7, #20]
 8011b66:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011b68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011b6c:	b29b      	uxth	r3, r3
 8011b6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011b72:	4619      	mov	r1, r3
 8011b74:	2036      	movs	r0, #54	; 0x36
 8011b76:	f7fa fe29 	bl	800c7cc <pbuf_alloc>
 8011b7a:	6338      	str	r0, [r7, #48]	; 0x30
 8011b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d103      	bne.n	8011b8a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011b82:	6978      	ldr	r0, [r7, #20]
 8011b84:	f7fb f906 	bl	800cd94 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011b88:	e136      	b.n	8011df8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011b8a:	6979      	ldr	r1, [r7, #20]
 8011b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b8e:	f7fb f9cf 	bl	800cf30 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011b92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b94:	f7fb f98c 	bl	800ceb0 <pbuf_clen>
 8011b98:	4603      	mov	r3, r0
 8011b9a:	461a      	mov	r2, r3
 8011b9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011ba0:	4413      	add	r3, r2
 8011ba2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011ba6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011baa:	2b09      	cmp	r3, #9
 8011bac:	d903      	bls.n	8011bb6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011bae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011bb0:	f7fb f8f0 	bl	800cd94 <pbuf_free>
      goto memerr;
 8011bb4:	e120      	b.n	8011df8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011bba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011bbe:	441a      	add	r2, r3
 8011bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011bc4:	9300      	str	r3, [sp, #0]
 8011bc6:	4613      	mov	r3, r2
 8011bc8:	2200      	movs	r2, #0
 8011bca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011bcc:	68f8      	ldr	r0, [r7, #12]
 8011bce:	f7ff fc51 	bl	8011474 <tcp_create_segment>
 8011bd2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	f000 810d 	beq.w	8011df6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d102      	bne.n	8011be8 <tcp_write+0x450>
      queue = seg;
 8011be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011be4:	647b      	str	r3, [r7, #68]	; 0x44
 8011be6:	e00c      	b.n	8011c02 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d106      	bne.n	8011bfc <tcp_write+0x464>
 8011bee:	4b53      	ldr	r3, [pc, #332]	; (8011d3c <tcp_write+0x5a4>)
 8011bf0:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011bf4:	4955      	ldr	r1, [pc, #340]	; (8011d4c <tcp_write+0x5b4>)
 8011bf6:	4853      	ldr	r0, [pc, #332]	; (8011d44 <tcp_write+0x5ac>)
 8011bf8:	f005 f824 	bl	8016c44 <iprintf>
      prev_seg->next = seg;
 8011bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011bfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011c00:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c04:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011c06:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011c0a:	8b3b      	ldrh	r3, [r7, #24]
 8011c0c:	4413      	add	r3, r2
 8011c0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011c12:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011c16:	88fb      	ldrh	r3, [r7, #6]
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	f4ff af3d 	bcc.w	8011a98 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011c1e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d02c      	beq.n	8011c7e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c26:	685b      	ldr	r3, [r3, #4]
 8011c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011c2a:	e01e      	b.n	8011c6a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c2e:	891a      	ldrh	r2, [r3, #8]
 8011c30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011c32:	4413      	add	r3, r2
 8011c34:	b29a      	uxth	r2, r3
 8011c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c38:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d110      	bne.n	8011c64 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c44:	685b      	ldr	r3, [r3, #4]
 8011c46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c48:	8952      	ldrh	r2, [r2, #10]
 8011c4a:	4413      	add	r3, r2
 8011c4c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011c4e:	68b9      	ldr	r1, [r7, #8]
 8011c50:	4618      	mov	r0, r3
 8011c52:	f004 ff37 	bl	8016ac4 <memcpy>
        p->len += oversize_used;
 8011c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c58:	895a      	ldrh	r2, [r3, #10]
 8011c5a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011c5c:	4413      	add	r3, r2
 8011c5e:	b29a      	uxth	r2, r3
 8011c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c62:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d1dd      	bne.n	8011c2c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8011c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c72:	891a      	ldrh	r2, [r3, #8]
 8011c74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011c76:	4413      	add	r3, r2
 8011c78:	b29a      	uxth	r2, r3
 8011c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c7c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011c7e:	8a7a      	ldrh	r2, [r7, #18]
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d018      	beq.n	8011cbe <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d106      	bne.n	8011ca0 <tcp_write+0x508>
 8011c92:	4b2a      	ldr	r3, [pc, #168]	; (8011d3c <tcp_write+0x5a4>)
 8011c94:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8011c98:	492d      	ldr	r1, [pc, #180]	; (8011d50 <tcp_write+0x5b8>)
 8011c9a:	482a      	ldr	r0, [pc, #168]	; (8011d44 <tcp_write+0x5ac>)
 8011c9c:	f004 ffd2 	bl	8016c44 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ca2:	685b      	ldr	r3, [r3, #4]
 8011ca4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	f7fb f942 	bl	800cf30 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cae:	891a      	ldrh	r2, [r3, #8]
 8011cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011cb2:	891b      	ldrh	r3, [r3, #8]
 8011cb4:	4413      	add	r3, r2
 8011cb6:	b29a      	uxth	r2, r3
 8011cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cba:	811a      	strh	r2, [r3, #8]
 8011cbc:	e037      	b.n	8011d2e <tcp_write+0x596>
  } else if (extendlen > 0) {
 8011cbe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d034      	beq.n	8011d2e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d003      	beq.n	8011cd2 <tcp_write+0x53a>
 8011cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ccc:	685b      	ldr	r3, [r3, #4]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d106      	bne.n	8011ce0 <tcp_write+0x548>
 8011cd2:	4b1a      	ldr	r3, [pc, #104]	; (8011d3c <tcp_write+0x5a4>)
 8011cd4:	f240 22e6 	movw	r2, #742	; 0x2e6
 8011cd8:	491e      	ldr	r1, [pc, #120]	; (8011d54 <tcp_write+0x5bc>)
 8011cda:	481a      	ldr	r0, [pc, #104]	; (8011d44 <tcp_write+0x5ac>)
 8011cdc:	f004 ffb2 	bl	8016c44 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ce2:	685b      	ldr	r3, [r3, #4]
 8011ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8011ce6:	e009      	b.n	8011cfc <tcp_write+0x564>
      p->tot_len += extendlen;
 8011ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cea:	891a      	ldrh	r2, [r3, #8]
 8011cec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011cee:	4413      	add	r3, r2
 8011cf0:	b29a      	uxth	r2, r3
 8011cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8011cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d1f1      	bne.n	8011ce8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8011d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d06:	891a      	ldrh	r2, [r3, #8]
 8011d08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011d0a:	4413      	add	r3, r2
 8011d0c:	b29a      	uxth	r2, r3
 8011d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d10:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d14:	895a      	ldrh	r2, [r3, #10]
 8011d16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011d18:	4413      	add	r3, r2
 8011d1a:	b29a      	uxth	r2, r3
 8011d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d1e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d22:	891a      	ldrh	r2, [r3, #8]
 8011d24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011d26:	4413      	add	r3, r2
 8011d28:	b29a      	uxth	r2, r3
 8011d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d2c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d111      	bne.n	8011d58 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011d38:	66da      	str	r2, [r3, #108]	; 0x6c
 8011d3a:	e010      	b.n	8011d5e <tcp_write+0x5c6>
 8011d3c:	08019c7c 	.word	0x08019c7c
 8011d40:	08019f1c 	.word	0x08019f1c
 8011d44:	08019cd0 	.word	0x08019cd0
 8011d48:	08019f5c 	.word	0x08019f5c
 8011d4c:	08019f6c 	.word	0x08019f6c
 8011d50:	08019f80 	.word	0x08019f80
 8011d54:	08019fb8 	.word	0x08019fb8
  } else {
    last_unsent->next = queue;
 8011d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011d5c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011d62:	88fb      	ldrh	r3, [r7, #6]
 8011d64:	441a      	add	r2, r3
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011d70:	88fb      	ldrh	r3, [r7, #6]
 8011d72:	1ad3      	subs	r3, r2, r3
 8011d74:	b29a      	uxth	r2, r3
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011d82:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d00e      	beq.n	8011dae <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d10a      	bne.n	8011dae <tcp_write+0x616>
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d106      	bne.n	8011dae <tcp_write+0x616>
 8011da0:	4b2c      	ldr	r3, [pc, #176]	; (8011e54 <tcp_write+0x6bc>)
 8011da2:	f240 3212 	movw	r2, #786	; 0x312
 8011da6:	492c      	ldr	r1, [pc, #176]	; (8011e58 <tcp_write+0x6c0>)
 8011da8:	482c      	ldr	r0, [pc, #176]	; (8011e5c <tcp_write+0x6c4>)
 8011daa:	f004 ff4b 	bl	8016c44 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d016      	beq.n	8011de2 <tcp_write+0x64a>
 8011db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011db6:	68db      	ldr	r3, [r3, #12]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d012      	beq.n	8011de2 <tcp_write+0x64a>
 8011dbc:	797b      	ldrb	r3, [r7, #5]
 8011dbe:	f003 0302 	and.w	r3, r3, #2
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d10d      	bne.n	8011de2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dc8:	68db      	ldr	r3, [r3, #12]
 8011dca:	899b      	ldrh	r3, [r3, #12]
 8011dcc:	b29c      	uxth	r4, r3
 8011dce:	2008      	movs	r0, #8
 8011dd0:	f7f9 fc98 	bl	800b704 <lwip_htons>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	461a      	mov	r2, r3
 8011dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dda:	68db      	ldr	r3, [r3, #12]
 8011ddc:	4322      	orrs	r2, r4
 8011dde:	b292      	uxth	r2, r2
 8011de0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011de2:	2300      	movs	r3, #0
 8011de4:	e031      	b.n	8011e4a <tcp_write+0x6b2>
          goto memerr;
 8011de6:	bf00      	nop
 8011de8:	e006      	b.n	8011df8 <tcp_write+0x660>
            goto memerr;
 8011dea:	bf00      	nop
 8011dec:	e004      	b.n	8011df8 <tcp_write+0x660>
        goto memerr;
 8011dee:	bf00      	nop
 8011df0:	e002      	b.n	8011df8 <tcp_write+0x660>
        goto memerr;
 8011df2:	bf00      	nop
 8011df4:	e000      	b.n	8011df8 <tcp_write+0x660>
      goto memerr;
 8011df6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	8b5b      	ldrh	r3, [r3, #26]
 8011dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e00:	b29a      	uxth	r2, r3
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d002      	beq.n	8011e12 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8011e0c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011e0e:	f7fa ffc1 	bl	800cd94 <pbuf_free>
  }
  if (queue != NULL) {
 8011e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d002      	beq.n	8011e1e <tcp_write+0x686>
    tcp_segs_free(queue);
 8011e18:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011e1a:	f7fc fb6f 	bl	800e4fc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d00e      	beq.n	8011e46 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d10a      	bne.n	8011e46 <tcp_write+0x6ae>
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d106      	bne.n	8011e46 <tcp_write+0x6ae>
 8011e38:	4b06      	ldr	r3, [pc, #24]	; (8011e54 <tcp_write+0x6bc>)
 8011e3a:	f240 3227 	movw	r2, #807	; 0x327
 8011e3e:	4906      	ldr	r1, [pc, #24]	; (8011e58 <tcp_write+0x6c0>)
 8011e40:	4806      	ldr	r0, [pc, #24]	; (8011e5c <tcp_write+0x6c4>)
 8011e42:	f004 feff 	bl	8016c44 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011e46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	375c      	adds	r7, #92	; 0x5c
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd90      	pop	{r4, r7, pc}
 8011e52:	bf00      	nop
 8011e54:	08019c7c 	.word	0x08019c7c
 8011e58:	08019ff0 	.word	0x08019ff0
 8011e5c:	08019cd0 	.word	0x08019cd0

08011e60 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011e60:	b590      	push	{r4, r7, lr}
 8011e62:	b08b      	sub	sp, #44	; 0x2c
 8011e64:	af02      	add	r7, sp, #8
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	460b      	mov	r3, r1
 8011e6a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	61fb      	str	r3, [r7, #28]
 8011e70:	2300      	movs	r3, #0
 8011e72:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011e74:	2300      	movs	r3, #0
 8011e76:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d106      	bne.n	8011e8c <tcp_split_unsent_seg+0x2c>
 8011e7e:	4b95      	ldr	r3, [pc, #596]	; (80120d4 <tcp_split_unsent_seg+0x274>)
 8011e80:	f240 324b 	movw	r2, #843	; 0x34b
 8011e84:	4994      	ldr	r1, [pc, #592]	; (80120d8 <tcp_split_unsent_seg+0x278>)
 8011e86:	4895      	ldr	r0, [pc, #596]	; (80120dc <tcp_split_unsent_seg+0x27c>)
 8011e88:	f004 fedc 	bl	8016c44 <iprintf>

  useg = pcb->unsent;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e90:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011e92:	697b      	ldr	r3, [r7, #20]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d102      	bne.n	8011e9e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011e98:	f04f 33ff 	mov.w	r3, #4294967295
 8011e9c:	e116      	b.n	80120cc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011e9e:	887b      	ldrh	r3, [r7, #2]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d109      	bne.n	8011eb8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011ea4:	4b8b      	ldr	r3, [pc, #556]	; (80120d4 <tcp_split_unsent_seg+0x274>)
 8011ea6:	f240 3253 	movw	r2, #851	; 0x353
 8011eaa:	498d      	ldr	r1, [pc, #564]	; (80120e0 <tcp_split_unsent_seg+0x280>)
 8011eac:	488b      	ldr	r0, [pc, #556]	; (80120dc <tcp_split_unsent_seg+0x27c>)
 8011eae:	f004 fec9 	bl	8016c44 <iprintf>
    return ERR_VAL;
 8011eb2:	f06f 0305 	mvn.w	r3, #5
 8011eb6:	e109      	b.n	80120cc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011eb8:	697b      	ldr	r3, [r7, #20]
 8011eba:	891b      	ldrh	r3, [r3, #8]
 8011ebc:	887a      	ldrh	r2, [r7, #2]
 8011ebe:	429a      	cmp	r2, r3
 8011ec0:	d301      	bcc.n	8011ec6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	e102      	b.n	80120cc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011eca:	887a      	ldrh	r2, [r7, #2]
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d906      	bls.n	8011ede <tcp_split_unsent_seg+0x7e>
 8011ed0:	4b80      	ldr	r3, [pc, #512]	; (80120d4 <tcp_split_unsent_seg+0x274>)
 8011ed2:	f240 325b 	movw	r2, #859	; 0x35b
 8011ed6:	4983      	ldr	r1, [pc, #524]	; (80120e4 <tcp_split_unsent_seg+0x284>)
 8011ed8:	4880      	ldr	r0, [pc, #512]	; (80120dc <tcp_split_unsent_seg+0x27c>)
 8011eda:	f004 feb3 	bl	8016c44 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011ede:	697b      	ldr	r3, [r7, #20]
 8011ee0:	891b      	ldrh	r3, [r3, #8]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d106      	bne.n	8011ef4 <tcp_split_unsent_seg+0x94>
 8011ee6:	4b7b      	ldr	r3, [pc, #492]	; (80120d4 <tcp_split_unsent_seg+0x274>)
 8011ee8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011eec:	497e      	ldr	r1, [pc, #504]	; (80120e8 <tcp_split_unsent_seg+0x288>)
 8011eee:	487b      	ldr	r0, [pc, #492]	; (80120dc <tcp_split_unsent_seg+0x27c>)
 8011ef0:	f004 fea8 	bl	8016c44 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011ef4:	697b      	ldr	r3, [r7, #20]
 8011ef6:	7a9b      	ldrb	r3, [r3, #10]
 8011ef8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011efa:	7bfb      	ldrb	r3, [r7, #15]
 8011efc:	009b      	lsls	r3, r3, #2
 8011efe:	b2db      	uxtb	r3, r3
 8011f00:	f003 0304 	and.w	r3, r3, #4
 8011f04:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011f06:	697b      	ldr	r3, [r7, #20]
 8011f08:	891a      	ldrh	r2, [r3, #8]
 8011f0a:	887b      	ldrh	r3, [r7, #2]
 8011f0c:	1ad3      	subs	r3, r2, r3
 8011f0e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011f10:	7bbb      	ldrb	r3, [r7, #14]
 8011f12:	b29a      	uxth	r2, r3
 8011f14:	89bb      	ldrh	r3, [r7, #12]
 8011f16:	4413      	add	r3, r2
 8011f18:	b29b      	uxth	r3, r3
 8011f1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011f1e:	4619      	mov	r1, r3
 8011f20:	2036      	movs	r0, #54	; 0x36
 8011f22:	f7fa fc53 	bl	800c7cc <pbuf_alloc>
 8011f26:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011f28:	693b      	ldr	r3, [r7, #16]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	f000 80b7 	beq.w	801209e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011f30:	697b      	ldr	r3, [r7, #20]
 8011f32:	685b      	ldr	r3, [r3, #4]
 8011f34:	891a      	ldrh	r2, [r3, #8]
 8011f36:	697b      	ldr	r3, [r7, #20]
 8011f38:	891b      	ldrh	r3, [r3, #8]
 8011f3a:	1ad3      	subs	r3, r2, r3
 8011f3c:	b29a      	uxth	r2, r3
 8011f3e:	887b      	ldrh	r3, [r7, #2]
 8011f40:	4413      	add	r3, r2
 8011f42:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011f44:	697b      	ldr	r3, [r7, #20]
 8011f46:	6858      	ldr	r0, [r3, #4]
 8011f48:	693b      	ldr	r3, [r7, #16]
 8011f4a:	685a      	ldr	r2, [r3, #4]
 8011f4c:	7bbb      	ldrb	r3, [r7, #14]
 8011f4e:	18d1      	adds	r1, r2, r3
 8011f50:	897b      	ldrh	r3, [r7, #10]
 8011f52:	89ba      	ldrh	r2, [r7, #12]
 8011f54:	f7fb f924 	bl	800d1a0 <pbuf_copy_partial>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	461a      	mov	r2, r3
 8011f5c:	89bb      	ldrh	r3, [r7, #12]
 8011f5e:	4293      	cmp	r3, r2
 8011f60:	f040 809f 	bne.w	80120a2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011f64:	697b      	ldr	r3, [r7, #20]
 8011f66:	68db      	ldr	r3, [r3, #12]
 8011f68:	899b      	ldrh	r3, [r3, #12]
 8011f6a:	b29b      	uxth	r3, r3
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f7f9 fbc9 	bl	800b704 <lwip_htons>
 8011f72:	4603      	mov	r3, r0
 8011f74:	b2db      	uxtb	r3, r3
 8011f76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011f7a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011f80:	7efb      	ldrb	r3, [r7, #27]
 8011f82:	f003 0308 	and.w	r3, r3, #8
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d007      	beq.n	8011f9a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011f8a:	7efb      	ldrb	r3, [r7, #27]
 8011f8c:	f023 0308 	bic.w	r3, r3, #8
 8011f90:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011f92:	7ebb      	ldrb	r3, [r7, #26]
 8011f94:	f043 0308 	orr.w	r3, r3, #8
 8011f98:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011f9a:	7efb      	ldrb	r3, [r7, #27]
 8011f9c:	f003 0301 	and.w	r3, r3, #1
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d007      	beq.n	8011fb4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011fa4:	7efb      	ldrb	r3, [r7, #27]
 8011fa6:	f023 0301 	bic.w	r3, r3, #1
 8011faa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011fac:	7ebb      	ldrb	r3, [r7, #26]
 8011fae:	f043 0301 	orr.w	r3, r3, #1
 8011fb2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011fb4:	697b      	ldr	r3, [r7, #20]
 8011fb6:	68db      	ldr	r3, [r3, #12]
 8011fb8:	685b      	ldr	r3, [r3, #4]
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f7f9 fbb7 	bl	800b72e <lwip_htonl>
 8011fc0:	4602      	mov	r2, r0
 8011fc2:	887b      	ldrh	r3, [r7, #2]
 8011fc4:	18d1      	adds	r1, r2, r3
 8011fc6:	7eba      	ldrb	r2, [r7, #26]
 8011fc8:	7bfb      	ldrb	r3, [r7, #15]
 8011fca:	9300      	str	r3, [sp, #0]
 8011fcc:	460b      	mov	r3, r1
 8011fce:	6939      	ldr	r1, [r7, #16]
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f7ff fa4f 	bl	8011474 <tcp_create_segment>
 8011fd6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011fd8:	69fb      	ldr	r3, [r7, #28]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d063      	beq.n	80120a6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011fde:	697b      	ldr	r3, [r7, #20]
 8011fe0:	685b      	ldr	r3, [r3, #4]
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f7fa ff64 	bl	800ceb0 <pbuf_clen>
 8011fe8:	4603      	mov	r3, r0
 8011fea:	461a      	mov	r2, r3
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ff2:	1a9b      	subs	r3, r3, r2
 8011ff4:	b29a      	uxth	r2, r3
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	6858      	ldr	r0, [r3, #4]
 8012000:	697b      	ldr	r3, [r7, #20]
 8012002:	685b      	ldr	r3, [r3, #4]
 8012004:	891a      	ldrh	r2, [r3, #8]
 8012006:	89bb      	ldrh	r3, [r7, #12]
 8012008:	1ad3      	subs	r3, r2, r3
 801200a:	b29b      	uxth	r3, r3
 801200c:	4619      	mov	r1, r3
 801200e:	f7fa fd3b 	bl	800ca88 <pbuf_realloc>
  useg->len -= remainder;
 8012012:	697b      	ldr	r3, [r7, #20]
 8012014:	891a      	ldrh	r2, [r3, #8]
 8012016:	89bb      	ldrh	r3, [r7, #12]
 8012018:	1ad3      	subs	r3, r2, r3
 801201a:	b29a      	uxth	r2, r3
 801201c:	697b      	ldr	r3, [r7, #20]
 801201e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012020:	697b      	ldr	r3, [r7, #20]
 8012022:	68db      	ldr	r3, [r3, #12]
 8012024:	899b      	ldrh	r3, [r3, #12]
 8012026:	b29c      	uxth	r4, r3
 8012028:	7efb      	ldrb	r3, [r7, #27]
 801202a:	b29b      	uxth	r3, r3
 801202c:	4618      	mov	r0, r3
 801202e:	f7f9 fb69 	bl	800b704 <lwip_htons>
 8012032:	4603      	mov	r3, r0
 8012034:	461a      	mov	r2, r3
 8012036:	697b      	ldr	r3, [r7, #20]
 8012038:	68db      	ldr	r3, [r3, #12]
 801203a:	4322      	orrs	r2, r4
 801203c:	b292      	uxth	r2, r2
 801203e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012040:	697b      	ldr	r3, [r7, #20]
 8012042:	685b      	ldr	r3, [r3, #4]
 8012044:	4618      	mov	r0, r3
 8012046:	f7fa ff33 	bl	800ceb0 <pbuf_clen>
 801204a:	4603      	mov	r3, r0
 801204c:	461a      	mov	r2, r3
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012054:	4413      	add	r3, r2
 8012056:	b29a      	uxth	r2, r3
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801205e:	69fb      	ldr	r3, [r7, #28]
 8012060:	685b      	ldr	r3, [r3, #4]
 8012062:	4618      	mov	r0, r3
 8012064:	f7fa ff24 	bl	800ceb0 <pbuf_clen>
 8012068:	4603      	mov	r3, r0
 801206a:	461a      	mov	r2, r3
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012072:	4413      	add	r3, r2
 8012074:	b29a      	uxth	r2, r3
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801207c:	697b      	ldr	r3, [r7, #20]
 801207e:	681a      	ldr	r2, [r3, #0]
 8012080:	69fb      	ldr	r3, [r7, #28]
 8012082:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	69fa      	ldr	r2, [r7, #28]
 8012088:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801208a:	69fb      	ldr	r3, [r7, #28]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d103      	bne.n	801209a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	2200      	movs	r2, #0
 8012096:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801209a:	2300      	movs	r3, #0
 801209c:	e016      	b.n	80120cc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801209e:	bf00      	nop
 80120a0:	e002      	b.n	80120a8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80120a2:	bf00      	nop
 80120a4:	e000      	b.n	80120a8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80120a6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80120a8:	69fb      	ldr	r3, [r7, #28]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d006      	beq.n	80120bc <tcp_split_unsent_seg+0x25c>
 80120ae:	4b09      	ldr	r3, [pc, #36]	; (80120d4 <tcp_split_unsent_seg+0x274>)
 80120b0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80120b4:	490d      	ldr	r1, [pc, #52]	; (80120ec <tcp_split_unsent_seg+0x28c>)
 80120b6:	4809      	ldr	r0, [pc, #36]	; (80120dc <tcp_split_unsent_seg+0x27c>)
 80120b8:	f004 fdc4 	bl	8016c44 <iprintf>
  if (p != NULL) {
 80120bc:	693b      	ldr	r3, [r7, #16]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d002      	beq.n	80120c8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80120c2:	6938      	ldr	r0, [r7, #16]
 80120c4:	f7fa fe66 	bl	800cd94 <pbuf_free>
  }

  return ERR_MEM;
 80120c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80120cc:	4618      	mov	r0, r3
 80120ce:	3724      	adds	r7, #36	; 0x24
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd90      	pop	{r4, r7, pc}
 80120d4:	08019c7c 	.word	0x08019c7c
 80120d8:	0801a010 	.word	0x0801a010
 80120dc:	08019cd0 	.word	0x08019cd0
 80120e0:	0801a034 	.word	0x0801a034
 80120e4:	0801a058 	.word	0x0801a058
 80120e8:	0801a068 	.word	0x0801a068
 80120ec:	0801a078 	.word	0x0801a078

080120f0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80120f0:	b590      	push	{r4, r7, lr}
 80120f2:	b085      	sub	sp, #20
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d106      	bne.n	801210c <tcp_send_fin+0x1c>
 80120fe:	4b21      	ldr	r3, [pc, #132]	; (8012184 <tcp_send_fin+0x94>)
 8012100:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012104:	4920      	ldr	r1, [pc, #128]	; (8012188 <tcp_send_fin+0x98>)
 8012106:	4821      	ldr	r0, [pc, #132]	; (801218c <tcp_send_fin+0x9c>)
 8012108:	f004 fd9c 	bl	8016c44 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012110:	2b00      	cmp	r3, #0
 8012112:	d02e      	beq.n	8012172 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012118:	60fb      	str	r3, [r7, #12]
 801211a:	e002      	b.n	8012122 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d1f8      	bne.n	801211c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	68db      	ldr	r3, [r3, #12]
 801212e:	899b      	ldrh	r3, [r3, #12]
 8012130:	b29b      	uxth	r3, r3
 8012132:	4618      	mov	r0, r3
 8012134:	f7f9 fae6 	bl	800b704 <lwip_htons>
 8012138:	4603      	mov	r3, r0
 801213a:	b2db      	uxtb	r3, r3
 801213c:	f003 0307 	and.w	r3, r3, #7
 8012140:	2b00      	cmp	r3, #0
 8012142:	d116      	bne.n	8012172 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	68db      	ldr	r3, [r3, #12]
 8012148:	899b      	ldrh	r3, [r3, #12]
 801214a:	b29c      	uxth	r4, r3
 801214c:	2001      	movs	r0, #1
 801214e:	f7f9 fad9 	bl	800b704 <lwip_htons>
 8012152:	4603      	mov	r3, r0
 8012154:	461a      	mov	r2, r3
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	68db      	ldr	r3, [r3, #12]
 801215a:	4322      	orrs	r2, r4
 801215c:	b292      	uxth	r2, r2
 801215e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	8b5b      	ldrh	r3, [r3, #26]
 8012164:	f043 0320 	orr.w	r3, r3, #32
 8012168:	b29a      	uxth	r2, r3
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801216e:	2300      	movs	r3, #0
 8012170:	e004      	b.n	801217c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012172:	2101      	movs	r1, #1
 8012174:	6878      	ldr	r0, [r7, #4]
 8012176:	f000 f80b 	bl	8012190 <tcp_enqueue_flags>
 801217a:	4603      	mov	r3, r0
}
 801217c:	4618      	mov	r0, r3
 801217e:	3714      	adds	r7, #20
 8012180:	46bd      	mov	sp, r7
 8012182:	bd90      	pop	{r4, r7, pc}
 8012184:	08019c7c 	.word	0x08019c7c
 8012188:	0801a084 	.word	0x0801a084
 801218c:	08019cd0 	.word	0x08019cd0

08012190 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b08a      	sub	sp, #40	; 0x28
 8012194:	af02      	add	r7, sp, #8
 8012196:	6078      	str	r0, [r7, #4]
 8012198:	460b      	mov	r3, r1
 801219a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801219c:	2300      	movs	r3, #0
 801219e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80121a0:	2300      	movs	r3, #0
 80121a2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80121a4:	78fb      	ldrb	r3, [r7, #3]
 80121a6:	f003 0303 	and.w	r3, r3, #3
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d106      	bne.n	80121bc <tcp_enqueue_flags+0x2c>
 80121ae:	4b67      	ldr	r3, [pc, #412]	; (801234c <tcp_enqueue_flags+0x1bc>)
 80121b0:	f240 4211 	movw	r2, #1041	; 0x411
 80121b4:	4966      	ldr	r1, [pc, #408]	; (8012350 <tcp_enqueue_flags+0x1c0>)
 80121b6:	4867      	ldr	r0, [pc, #412]	; (8012354 <tcp_enqueue_flags+0x1c4>)
 80121b8:	f004 fd44 	bl	8016c44 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d106      	bne.n	80121d0 <tcp_enqueue_flags+0x40>
 80121c2:	4b62      	ldr	r3, [pc, #392]	; (801234c <tcp_enqueue_flags+0x1bc>)
 80121c4:	f240 4213 	movw	r2, #1043	; 0x413
 80121c8:	4963      	ldr	r1, [pc, #396]	; (8012358 <tcp_enqueue_flags+0x1c8>)
 80121ca:	4862      	ldr	r0, [pc, #392]	; (8012354 <tcp_enqueue_flags+0x1c4>)
 80121cc:	f004 fd3a 	bl	8016c44 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80121d0:	78fb      	ldrb	r3, [r7, #3]
 80121d2:	f003 0302 	and.w	r3, r3, #2
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d001      	beq.n	80121de <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80121da:	2301      	movs	r3, #1
 80121dc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80121de:	7ffb      	ldrb	r3, [r7, #31]
 80121e0:	009b      	lsls	r3, r3, #2
 80121e2:	b2db      	uxtb	r3, r3
 80121e4:	f003 0304 	and.w	r3, r3, #4
 80121e8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80121ea:	7dfb      	ldrb	r3, [r7, #23]
 80121ec:	b29b      	uxth	r3, r3
 80121ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80121f2:	4619      	mov	r1, r3
 80121f4:	2036      	movs	r0, #54	; 0x36
 80121f6:	f7fa fae9 	bl	800c7cc <pbuf_alloc>
 80121fa:	6138      	str	r0, [r7, #16]
 80121fc:	693b      	ldr	r3, [r7, #16]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d109      	bne.n	8012216 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	8b5b      	ldrh	r3, [r3, #26]
 8012206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801220a:	b29a      	uxth	r2, r3
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012210:	f04f 33ff 	mov.w	r3, #4294967295
 8012214:	e095      	b.n	8012342 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012216:	693b      	ldr	r3, [r7, #16]
 8012218:	895a      	ldrh	r2, [r3, #10]
 801221a:	7dfb      	ldrb	r3, [r7, #23]
 801221c:	b29b      	uxth	r3, r3
 801221e:	429a      	cmp	r2, r3
 8012220:	d206      	bcs.n	8012230 <tcp_enqueue_flags+0xa0>
 8012222:	4b4a      	ldr	r3, [pc, #296]	; (801234c <tcp_enqueue_flags+0x1bc>)
 8012224:	f240 4239 	movw	r2, #1081	; 0x439
 8012228:	494c      	ldr	r1, [pc, #304]	; (801235c <tcp_enqueue_flags+0x1cc>)
 801222a:	484a      	ldr	r0, [pc, #296]	; (8012354 <tcp_enqueue_flags+0x1c4>)
 801222c:	f004 fd0a 	bl	8016c44 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012234:	78fa      	ldrb	r2, [r7, #3]
 8012236:	7ffb      	ldrb	r3, [r7, #31]
 8012238:	9300      	str	r3, [sp, #0]
 801223a:	460b      	mov	r3, r1
 801223c:	6939      	ldr	r1, [r7, #16]
 801223e:	6878      	ldr	r0, [r7, #4]
 8012240:	f7ff f918 	bl	8011474 <tcp_create_segment>
 8012244:	60f8      	str	r0, [r7, #12]
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d109      	bne.n	8012260 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	8b5b      	ldrh	r3, [r3, #26]
 8012250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012254:	b29a      	uxth	r2, r3
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801225a:	f04f 33ff 	mov.w	r3, #4294967295
 801225e:	e070      	b.n	8012342 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	68db      	ldr	r3, [r3, #12]
 8012264:	f003 0303 	and.w	r3, r3, #3
 8012268:	2b00      	cmp	r3, #0
 801226a:	d006      	beq.n	801227a <tcp_enqueue_flags+0xea>
 801226c:	4b37      	ldr	r3, [pc, #220]	; (801234c <tcp_enqueue_flags+0x1bc>)
 801226e:	f240 4242 	movw	r2, #1090	; 0x442
 8012272:	493b      	ldr	r1, [pc, #236]	; (8012360 <tcp_enqueue_flags+0x1d0>)
 8012274:	4837      	ldr	r0, [pc, #220]	; (8012354 <tcp_enqueue_flags+0x1c4>)
 8012276:	f004 fce5 	bl	8016c44 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	891b      	ldrh	r3, [r3, #8]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d006      	beq.n	8012290 <tcp_enqueue_flags+0x100>
 8012282:	4b32      	ldr	r3, [pc, #200]	; (801234c <tcp_enqueue_flags+0x1bc>)
 8012284:	f240 4243 	movw	r2, #1091	; 0x443
 8012288:	4936      	ldr	r1, [pc, #216]	; (8012364 <tcp_enqueue_flags+0x1d4>)
 801228a:	4832      	ldr	r0, [pc, #200]	; (8012354 <tcp_enqueue_flags+0x1c4>)
 801228c:	f004 fcda 	bl	8016c44 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012294:	2b00      	cmp	r3, #0
 8012296:	d103      	bne.n	80122a0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	68fa      	ldr	r2, [r7, #12]
 801229c:	66da      	str	r2, [r3, #108]	; 0x6c
 801229e:	e00d      	b.n	80122bc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122a4:	61bb      	str	r3, [r7, #24]
 80122a6:	e002      	b.n	80122ae <tcp_enqueue_flags+0x11e>
 80122a8:	69bb      	ldr	r3, [r7, #24]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	61bb      	str	r3, [r7, #24]
 80122ae:	69bb      	ldr	r3, [r7, #24]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d1f8      	bne.n	80122a8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80122b6:	69bb      	ldr	r3, [r7, #24]
 80122b8:	68fa      	ldr	r2, [r7, #12]
 80122ba:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	2200      	movs	r2, #0
 80122c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80122c4:	78fb      	ldrb	r3, [r7, #3]
 80122c6:	f003 0302 	and.w	r3, r3, #2
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d104      	bne.n	80122d8 <tcp_enqueue_flags+0x148>
 80122ce:	78fb      	ldrb	r3, [r7, #3]
 80122d0:	f003 0301 	and.w	r3, r3, #1
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d004      	beq.n	80122e2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80122dc:	1c5a      	adds	r2, r3, #1
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80122e2:	78fb      	ldrb	r3, [r7, #3]
 80122e4:	f003 0301 	and.w	r3, r3, #1
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d006      	beq.n	80122fa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	8b5b      	ldrh	r3, [r3, #26]
 80122f0:	f043 0320 	orr.w	r3, r3, #32
 80122f4:	b29a      	uxth	r2, r3
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	685b      	ldr	r3, [r3, #4]
 80122fe:	4618      	mov	r0, r3
 8012300:	f7fa fdd6 	bl	800ceb0 <pbuf_clen>
 8012304:	4603      	mov	r3, r0
 8012306:	461a      	mov	r2, r3
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801230e:	4413      	add	r3, r2
 8012310:	b29a      	uxth	r2, r3
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801231e:	2b00      	cmp	r3, #0
 8012320:	d00e      	beq.n	8012340 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012326:	2b00      	cmp	r3, #0
 8012328:	d10a      	bne.n	8012340 <tcp_enqueue_flags+0x1b0>
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801232e:	2b00      	cmp	r3, #0
 8012330:	d106      	bne.n	8012340 <tcp_enqueue_flags+0x1b0>
 8012332:	4b06      	ldr	r3, [pc, #24]	; (801234c <tcp_enqueue_flags+0x1bc>)
 8012334:	f240 4265 	movw	r2, #1125	; 0x465
 8012338:	490b      	ldr	r1, [pc, #44]	; (8012368 <tcp_enqueue_flags+0x1d8>)
 801233a:	4806      	ldr	r0, [pc, #24]	; (8012354 <tcp_enqueue_flags+0x1c4>)
 801233c:	f004 fc82 	bl	8016c44 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012340:	2300      	movs	r3, #0
}
 8012342:	4618      	mov	r0, r3
 8012344:	3720      	adds	r7, #32
 8012346:	46bd      	mov	sp, r7
 8012348:	bd80      	pop	{r7, pc}
 801234a:	bf00      	nop
 801234c:	08019c7c 	.word	0x08019c7c
 8012350:	0801a0a0 	.word	0x0801a0a0
 8012354:	08019cd0 	.word	0x08019cd0
 8012358:	0801a0f8 	.word	0x0801a0f8
 801235c:	0801a118 	.word	0x0801a118
 8012360:	0801a154 	.word	0x0801a154
 8012364:	0801a16c 	.word	0x0801a16c
 8012368:	0801a198 	.word	0x0801a198

0801236c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801236c:	b5b0      	push	{r4, r5, r7, lr}
 801236e:	b08a      	sub	sp, #40	; 0x28
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d106      	bne.n	8012388 <tcp_output+0x1c>
 801237a:	4b9e      	ldr	r3, [pc, #632]	; (80125f4 <tcp_output+0x288>)
 801237c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012380:	499d      	ldr	r1, [pc, #628]	; (80125f8 <tcp_output+0x28c>)
 8012382:	489e      	ldr	r0, [pc, #632]	; (80125fc <tcp_output+0x290>)
 8012384:	f004 fc5e 	bl	8016c44 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	7d1b      	ldrb	r3, [r3, #20]
 801238c:	2b01      	cmp	r3, #1
 801238e:	d106      	bne.n	801239e <tcp_output+0x32>
 8012390:	4b98      	ldr	r3, [pc, #608]	; (80125f4 <tcp_output+0x288>)
 8012392:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012396:	499a      	ldr	r1, [pc, #616]	; (8012600 <tcp_output+0x294>)
 8012398:	4898      	ldr	r0, [pc, #608]	; (80125fc <tcp_output+0x290>)
 801239a:	f004 fc53 	bl	8016c44 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801239e:	4b99      	ldr	r3, [pc, #612]	; (8012604 <tcp_output+0x298>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	687a      	ldr	r2, [r7, #4]
 80123a4:	429a      	cmp	r2, r3
 80123a6:	d101      	bne.n	80123ac <tcp_output+0x40>
    return ERR_OK;
 80123a8:	2300      	movs	r3, #0
 80123aa:	e1ce      	b.n	801274a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80123b8:	4293      	cmp	r3, r2
 80123ba:	bf28      	it	cs
 80123bc:	4613      	movcs	r3, r2
 80123be:	b29b      	uxth	r3, r3
 80123c0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80123c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d10b      	bne.n	80123e6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	8b5b      	ldrh	r3, [r3, #26]
 80123d2:	f003 0302 	and.w	r3, r3, #2
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	f000 81aa 	beq.w	8012730 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f000 fdcb 	bl	8012f78 <tcp_send_empty_ack>
 80123e2:	4603      	mov	r3, r0
 80123e4:	e1b1      	b.n	801274a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80123e6:	6879      	ldr	r1, [r7, #4]
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	3304      	adds	r3, #4
 80123ec:	461a      	mov	r2, r3
 80123ee:	6878      	ldr	r0, [r7, #4]
 80123f0:	f7ff f824 	bl	801143c <tcp_route>
 80123f4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80123f6:	697b      	ldr	r3, [r7, #20]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d102      	bne.n	8012402 <tcp_output+0x96>
    return ERR_RTE;
 80123fc:	f06f 0303 	mvn.w	r3, #3
 8012400:	e1a3      	b.n	801274a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d003      	beq.n	8012410 <tcp_output+0xa4>
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d111      	bne.n	8012434 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012410:	697b      	ldr	r3, [r7, #20]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d002      	beq.n	801241c <tcp_output+0xb0>
 8012416:	697b      	ldr	r3, [r7, #20]
 8012418:	3304      	adds	r3, #4
 801241a:	e000      	b.n	801241e <tcp_output+0xb2>
 801241c:	2300      	movs	r3, #0
 801241e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012420:	693b      	ldr	r3, [r7, #16]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d102      	bne.n	801242c <tcp_output+0xc0>
      return ERR_RTE;
 8012426:	f06f 0303 	mvn.w	r3, #3
 801242a:	e18e      	b.n	801274a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801242c:	693b      	ldr	r3, [r7, #16]
 801242e:	681a      	ldr	r2, [r3, #0]
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012436:	68db      	ldr	r3, [r3, #12]
 8012438:	685b      	ldr	r3, [r3, #4]
 801243a:	4618      	mov	r0, r3
 801243c:	f7f9 f977 	bl	800b72e <lwip_htonl>
 8012440:	4602      	mov	r2, r0
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012446:	1ad3      	subs	r3, r2, r3
 8012448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801244a:	8912      	ldrh	r2, [r2, #8]
 801244c:	4413      	add	r3, r2
 801244e:	69ba      	ldr	r2, [r7, #24]
 8012450:	429a      	cmp	r2, r3
 8012452:	d227      	bcs.n	80124a4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801245a:	461a      	mov	r2, r3
 801245c:	69bb      	ldr	r3, [r7, #24]
 801245e:	4293      	cmp	r3, r2
 8012460:	d114      	bne.n	801248c <tcp_output+0x120>
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012466:	2b00      	cmp	r3, #0
 8012468:	d110      	bne.n	801248c <tcp_output+0x120>
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012470:	2b00      	cmp	r3, #0
 8012472:	d10b      	bne.n	801248c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2200      	movs	r2, #0
 8012478:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2201      	movs	r2, #1
 8012480:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2200      	movs	r2, #0
 8012488:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	8b5b      	ldrh	r3, [r3, #26]
 8012490:	f003 0302 	and.w	r3, r3, #2
 8012494:	2b00      	cmp	r3, #0
 8012496:	f000 814d 	beq.w	8012734 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	f000 fd6c 	bl	8012f78 <tcp_send_empty_ack>
 80124a0:	4603      	mov	r3, r0
 80124a2:	e152      	b.n	801274a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	2200      	movs	r2, #0
 80124a8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124b0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80124b2:	6a3b      	ldr	r3, [r7, #32]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	f000 811c 	beq.w	80126f2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80124ba:	e002      	b.n	80124c2 <tcp_output+0x156>
 80124bc:	6a3b      	ldr	r3, [r7, #32]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	623b      	str	r3, [r7, #32]
 80124c2:	6a3b      	ldr	r3, [r7, #32]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d1f8      	bne.n	80124bc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80124ca:	e112      	b.n	80126f2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80124cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ce:	68db      	ldr	r3, [r3, #12]
 80124d0:	899b      	ldrh	r3, [r3, #12]
 80124d2:	b29b      	uxth	r3, r3
 80124d4:	4618      	mov	r0, r3
 80124d6:	f7f9 f915 	bl	800b704 <lwip_htons>
 80124da:	4603      	mov	r3, r0
 80124dc:	b2db      	uxtb	r3, r3
 80124de:	f003 0304 	and.w	r3, r3, #4
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d006      	beq.n	80124f4 <tcp_output+0x188>
 80124e6:	4b43      	ldr	r3, [pc, #268]	; (80125f4 <tcp_output+0x288>)
 80124e8:	f240 5236 	movw	r2, #1334	; 0x536
 80124ec:	4946      	ldr	r1, [pc, #280]	; (8012608 <tcp_output+0x29c>)
 80124ee:	4843      	ldr	r0, [pc, #268]	; (80125fc <tcp_output+0x290>)
 80124f0:	f004 fba8 	bl	8016c44 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d01f      	beq.n	801253c <tcp_output+0x1d0>
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	8b5b      	ldrh	r3, [r3, #26]
 8012500:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012504:	2b00      	cmp	r3, #0
 8012506:	d119      	bne.n	801253c <tcp_output+0x1d0>
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801250c:	2b00      	cmp	r3, #0
 801250e:	d00b      	beq.n	8012528 <tcp_output+0x1bc>
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d110      	bne.n	801253c <tcp_output+0x1d0>
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801251e:	891a      	ldrh	r2, [r3, #8]
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012524:	429a      	cmp	r2, r3
 8012526:	d209      	bcs.n	801253c <tcp_output+0x1d0>
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801252e:	2b00      	cmp	r3, #0
 8012530:	d004      	beq.n	801253c <tcp_output+0x1d0>
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012538:	2b08      	cmp	r3, #8
 801253a:	d901      	bls.n	8012540 <tcp_output+0x1d4>
 801253c:	2301      	movs	r3, #1
 801253e:	e000      	b.n	8012542 <tcp_output+0x1d6>
 8012540:	2300      	movs	r3, #0
 8012542:	2b00      	cmp	r3, #0
 8012544:	d106      	bne.n	8012554 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	8b5b      	ldrh	r3, [r3, #26]
 801254a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801254e:	2b00      	cmp	r3, #0
 8012550:	f000 80e4 	beq.w	801271c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	7d1b      	ldrb	r3, [r3, #20]
 8012558:	2b02      	cmp	r3, #2
 801255a:	d00d      	beq.n	8012578 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801255e:	68db      	ldr	r3, [r3, #12]
 8012560:	899b      	ldrh	r3, [r3, #12]
 8012562:	b29c      	uxth	r4, r3
 8012564:	2010      	movs	r0, #16
 8012566:	f7f9 f8cd 	bl	800b704 <lwip_htons>
 801256a:	4603      	mov	r3, r0
 801256c:	461a      	mov	r2, r3
 801256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012570:	68db      	ldr	r3, [r3, #12]
 8012572:	4322      	orrs	r2, r4
 8012574:	b292      	uxth	r2, r2
 8012576:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012578:	697a      	ldr	r2, [r7, #20]
 801257a:	6879      	ldr	r1, [r7, #4]
 801257c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801257e:	f000 f909 	bl	8012794 <tcp_output_segment>
 8012582:	4603      	mov	r3, r0
 8012584:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d009      	beq.n	80125a2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	8b5b      	ldrh	r3, [r3, #26]
 8012592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012596:	b29a      	uxth	r2, r3
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	835a      	strh	r2, [r3, #26]
      return err;
 801259c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125a0:	e0d3      	b.n	801274a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80125a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125a4:	681a      	ldr	r2, [r3, #0]
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	7d1b      	ldrb	r3, [r3, #20]
 80125ae:	2b02      	cmp	r3, #2
 80125b0:	d006      	beq.n	80125c0 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	8b5b      	ldrh	r3, [r3, #26]
 80125b6:	f023 0303 	bic.w	r3, r3, #3
 80125ba:	b29a      	uxth	r2, r3
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80125c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125c2:	68db      	ldr	r3, [r3, #12]
 80125c4:	685b      	ldr	r3, [r3, #4]
 80125c6:	4618      	mov	r0, r3
 80125c8:	f7f9 f8b1 	bl	800b72e <lwip_htonl>
 80125cc:	4604      	mov	r4, r0
 80125ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125d0:	891b      	ldrh	r3, [r3, #8]
 80125d2:	461d      	mov	r5, r3
 80125d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125d6:	68db      	ldr	r3, [r3, #12]
 80125d8:	899b      	ldrh	r3, [r3, #12]
 80125da:	b29b      	uxth	r3, r3
 80125dc:	4618      	mov	r0, r3
 80125de:	f7f9 f891 	bl	800b704 <lwip_htons>
 80125e2:	4603      	mov	r3, r0
 80125e4:	b2db      	uxtb	r3, r3
 80125e6:	f003 0303 	and.w	r3, r3, #3
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d00e      	beq.n	801260c <tcp_output+0x2a0>
 80125ee:	2301      	movs	r3, #1
 80125f0:	e00d      	b.n	801260e <tcp_output+0x2a2>
 80125f2:	bf00      	nop
 80125f4:	08019c7c 	.word	0x08019c7c
 80125f8:	0801a1c0 	.word	0x0801a1c0
 80125fc:	08019cd0 	.word	0x08019cd0
 8012600:	0801a1d8 	.word	0x0801a1d8
 8012604:	2000d3c8 	.word	0x2000d3c8
 8012608:	0801a200 	.word	0x0801a200
 801260c:	2300      	movs	r3, #0
 801260e:	442b      	add	r3, r5
 8012610:	4423      	add	r3, r4
 8012612:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	1ad3      	subs	r3, r2, r3
 801261c:	2b00      	cmp	r3, #0
 801261e:	da02      	bge.n	8012626 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	68ba      	ldr	r2, [r7, #8]
 8012624:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012628:	891b      	ldrh	r3, [r3, #8]
 801262a:	461c      	mov	r4, r3
 801262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801262e:	68db      	ldr	r3, [r3, #12]
 8012630:	899b      	ldrh	r3, [r3, #12]
 8012632:	b29b      	uxth	r3, r3
 8012634:	4618      	mov	r0, r3
 8012636:	f7f9 f865 	bl	800b704 <lwip_htons>
 801263a:	4603      	mov	r3, r0
 801263c:	b2db      	uxtb	r3, r3
 801263e:	f003 0303 	and.w	r3, r3, #3
 8012642:	2b00      	cmp	r3, #0
 8012644:	d001      	beq.n	801264a <tcp_output+0x2de>
 8012646:	2301      	movs	r3, #1
 8012648:	e000      	b.n	801264c <tcp_output+0x2e0>
 801264a:	2300      	movs	r3, #0
 801264c:	4423      	add	r3, r4
 801264e:	2b00      	cmp	r3, #0
 8012650:	d049      	beq.n	80126e6 <tcp_output+0x37a>
      seg->next = NULL;
 8012652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012654:	2200      	movs	r2, #0
 8012656:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801265c:	2b00      	cmp	r3, #0
 801265e:	d105      	bne.n	801266c <tcp_output+0x300>
        pcb->unacked = seg;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012664:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012668:	623b      	str	r3, [r7, #32]
 801266a:	e03f      	b.n	80126ec <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801266e:	68db      	ldr	r3, [r3, #12]
 8012670:	685b      	ldr	r3, [r3, #4]
 8012672:	4618      	mov	r0, r3
 8012674:	f7f9 f85b 	bl	800b72e <lwip_htonl>
 8012678:	4604      	mov	r4, r0
 801267a:	6a3b      	ldr	r3, [r7, #32]
 801267c:	68db      	ldr	r3, [r3, #12]
 801267e:	685b      	ldr	r3, [r3, #4]
 8012680:	4618      	mov	r0, r3
 8012682:	f7f9 f854 	bl	800b72e <lwip_htonl>
 8012686:	4603      	mov	r3, r0
 8012688:	1ae3      	subs	r3, r4, r3
 801268a:	2b00      	cmp	r3, #0
 801268c:	da24      	bge.n	80126d8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	3370      	adds	r3, #112	; 0x70
 8012692:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012694:	e002      	b.n	801269c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012696:	69fb      	ldr	r3, [r7, #28]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801269c:	69fb      	ldr	r3, [r7, #28]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d011      	beq.n	80126c8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80126a4:	69fb      	ldr	r3, [r7, #28]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	68db      	ldr	r3, [r3, #12]
 80126aa:	685b      	ldr	r3, [r3, #4]
 80126ac:	4618      	mov	r0, r3
 80126ae:	f7f9 f83e 	bl	800b72e <lwip_htonl>
 80126b2:	4604      	mov	r4, r0
 80126b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126b6:	68db      	ldr	r3, [r3, #12]
 80126b8:	685b      	ldr	r3, [r3, #4]
 80126ba:	4618      	mov	r0, r3
 80126bc:	f7f9 f837 	bl	800b72e <lwip_htonl>
 80126c0:	4603      	mov	r3, r0
 80126c2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	dbe6      	blt.n	8012696 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80126c8:	69fb      	ldr	r3, [r7, #28]
 80126ca:	681a      	ldr	r2, [r3, #0]
 80126cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ce:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80126d0:	69fb      	ldr	r3, [r7, #28]
 80126d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126d4:	601a      	str	r2, [r3, #0]
 80126d6:	e009      	b.n	80126ec <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80126d8:	6a3b      	ldr	r3, [r7, #32]
 80126da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126dc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80126de:	6a3b      	ldr	r3, [r7, #32]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	623b      	str	r3, [r7, #32]
 80126e4:	e002      	b.n	80126ec <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80126e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80126e8:	f7fb ff1d 	bl	800e526 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126f0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80126f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d012      	beq.n	801271e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80126f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126fa:	68db      	ldr	r3, [r3, #12]
 80126fc:	685b      	ldr	r3, [r3, #4]
 80126fe:	4618      	mov	r0, r3
 8012700:	f7f9 f815 	bl	800b72e <lwip_htonl>
 8012704:	4602      	mov	r2, r0
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801270a:	1ad3      	subs	r3, r2, r3
 801270c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801270e:	8912      	ldrh	r2, [r2, #8]
 8012710:	4413      	add	r3, r2
  while (seg != NULL &&
 8012712:	69ba      	ldr	r2, [r7, #24]
 8012714:	429a      	cmp	r2, r3
 8012716:	f4bf aed9 	bcs.w	80124cc <tcp_output+0x160>
 801271a:	e000      	b.n	801271e <tcp_output+0x3b2>
      break;
 801271c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012722:	2b00      	cmp	r3, #0
 8012724:	d108      	bne.n	8012738 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	2200      	movs	r2, #0
 801272a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801272e:	e004      	b.n	801273a <tcp_output+0x3ce>
    goto output_done;
 8012730:	bf00      	nop
 8012732:	e002      	b.n	801273a <tcp_output+0x3ce>
    goto output_done;
 8012734:	bf00      	nop
 8012736:	e000      	b.n	801273a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012738:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	8b5b      	ldrh	r3, [r3, #26]
 801273e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012742:	b29a      	uxth	r2, r3
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012748:	2300      	movs	r3, #0
}
 801274a:	4618      	mov	r0, r3
 801274c:	3728      	adds	r7, #40	; 0x28
 801274e:	46bd      	mov	sp, r7
 8012750:	bdb0      	pop	{r4, r5, r7, pc}
 8012752:	bf00      	nop

08012754 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b082      	sub	sp, #8
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d106      	bne.n	8012770 <tcp_output_segment_busy+0x1c>
 8012762:	4b09      	ldr	r3, [pc, #36]	; (8012788 <tcp_output_segment_busy+0x34>)
 8012764:	f240 529a 	movw	r2, #1434	; 0x59a
 8012768:	4908      	ldr	r1, [pc, #32]	; (801278c <tcp_output_segment_busy+0x38>)
 801276a:	4809      	ldr	r0, [pc, #36]	; (8012790 <tcp_output_segment_busy+0x3c>)
 801276c:	f004 fa6a 	bl	8016c44 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	685b      	ldr	r3, [r3, #4]
 8012774:	7b9b      	ldrb	r3, [r3, #14]
 8012776:	2b01      	cmp	r3, #1
 8012778:	d001      	beq.n	801277e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801277a:	2301      	movs	r3, #1
 801277c:	e000      	b.n	8012780 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801277e:	2300      	movs	r3, #0
}
 8012780:	4618      	mov	r0, r3
 8012782:	3708      	adds	r7, #8
 8012784:	46bd      	mov	sp, r7
 8012786:	bd80      	pop	{r7, pc}
 8012788:	08019c7c 	.word	0x08019c7c
 801278c:	0801a218 	.word	0x0801a218
 8012790:	08019cd0 	.word	0x08019cd0

08012794 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012794:	b5b0      	push	{r4, r5, r7, lr}
 8012796:	b08c      	sub	sp, #48	; 0x30
 8012798:	af04      	add	r7, sp, #16
 801279a:	60f8      	str	r0, [r7, #12]
 801279c:	60b9      	str	r1, [r7, #8]
 801279e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d106      	bne.n	80127b4 <tcp_output_segment+0x20>
 80127a6:	4b63      	ldr	r3, [pc, #396]	; (8012934 <tcp_output_segment+0x1a0>)
 80127a8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80127ac:	4962      	ldr	r1, [pc, #392]	; (8012938 <tcp_output_segment+0x1a4>)
 80127ae:	4863      	ldr	r0, [pc, #396]	; (801293c <tcp_output_segment+0x1a8>)
 80127b0:	f004 fa48 	bl	8016c44 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d106      	bne.n	80127c8 <tcp_output_segment+0x34>
 80127ba:	4b5e      	ldr	r3, [pc, #376]	; (8012934 <tcp_output_segment+0x1a0>)
 80127bc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80127c0:	495f      	ldr	r1, [pc, #380]	; (8012940 <tcp_output_segment+0x1ac>)
 80127c2:	485e      	ldr	r0, [pc, #376]	; (801293c <tcp_output_segment+0x1a8>)
 80127c4:	f004 fa3e 	bl	8016c44 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d106      	bne.n	80127dc <tcp_output_segment+0x48>
 80127ce:	4b59      	ldr	r3, [pc, #356]	; (8012934 <tcp_output_segment+0x1a0>)
 80127d0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80127d4:	495b      	ldr	r1, [pc, #364]	; (8012944 <tcp_output_segment+0x1b0>)
 80127d6:	4859      	ldr	r0, [pc, #356]	; (801293c <tcp_output_segment+0x1a8>)
 80127d8:	f004 fa34 	bl	8016c44 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80127dc:	68f8      	ldr	r0, [r7, #12]
 80127de:	f7ff ffb9 	bl	8012754 <tcp_output_segment_busy>
 80127e2:	4603      	mov	r3, r0
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d001      	beq.n	80127ec <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80127e8:	2300      	movs	r3, #0
 80127ea:	e09f      	b.n	801292c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80127ec:	68bb      	ldr	r3, [r7, #8]
 80127ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	68dc      	ldr	r4, [r3, #12]
 80127f4:	4610      	mov	r0, r2
 80127f6:	f7f8 ff9a 	bl	800b72e <lwip_htonl>
 80127fa:	4603      	mov	r3, r0
 80127fc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80127fe:	68bb      	ldr	r3, [r7, #8]
 8012800:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	68dc      	ldr	r4, [r3, #12]
 8012806:	4610      	mov	r0, r2
 8012808:	f7f8 ff7c 	bl	800b704 <lwip_htons>
 801280c:	4603      	mov	r3, r0
 801280e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012810:	68bb      	ldr	r3, [r7, #8]
 8012812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012814:	68ba      	ldr	r2, [r7, #8]
 8012816:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012818:	441a      	add	r2, r3
 801281a:	68bb      	ldr	r3, [r7, #8]
 801281c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	68db      	ldr	r3, [r3, #12]
 8012822:	3314      	adds	r3, #20
 8012824:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	7a9b      	ldrb	r3, [r3, #10]
 801282a:	f003 0301 	and.w	r3, r3, #1
 801282e:	2b00      	cmp	r3, #0
 8012830:	d015      	beq.n	801285e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	3304      	adds	r3, #4
 8012836:	461a      	mov	r2, r3
 8012838:	6879      	ldr	r1, [r7, #4]
 801283a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801283e:	f7fc fa37 	bl	800ecb0 <tcp_eff_send_mss_netif>
 8012842:	4603      	mov	r3, r0
 8012844:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012846:	8b7b      	ldrh	r3, [r7, #26]
 8012848:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801284c:	4618      	mov	r0, r3
 801284e:	f7f8 ff6e 	bl	800b72e <lwip_htonl>
 8012852:	4602      	mov	r2, r0
 8012854:	69fb      	ldr	r3, [r7, #28]
 8012856:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012858:	69fb      	ldr	r3, [r7, #28]
 801285a:	3304      	adds	r3, #4
 801285c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801285e:	68bb      	ldr	r3, [r7, #8]
 8012860:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012864:	2b00      	cmp	r3, #0
 8012866:	da02      	bge.n	801286e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012868:	68bb      	ldr	r3, [r7, #8]
 801286a:	2200      	movs	r2, #0
 801286c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801286e:	68bb      	ldr	r3, [r7, #8]
 8012870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012872:	2b00      	cmp	r3, #0
 8012874:	d10c      	bne.n	8012890 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012876:	4b34      	ldr	r3, [pc, #208]	; (8012948 <tcp_output_segment+0x1b4>)
 8012878:	681a      	ldr	r2, [r3, #0]
 801287a:	68bb      	ldr	r3, [r7, #8]
 801287c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	68db      	ldr	r3, [r3, #12]
 8012882:	685b      	ldr	r3, [r3, #4]
 8012884:	4618      	mov	r0, r3
 8012886:	f7f8 ff52 	bl	800b72e <lwip_htonl>
 801288a:	4602      	mov	r2, r0
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	68da      	ldr	r2, [r3, #12]
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	685b      	ldr	r3, [r3, #4]
 8012898:	685b      	ldr	r3, [r3, #4]
 801289a:	1ad3      	subs	r3, r2, r3
 801289c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	685b      	ldr	r3, [r3, #4]
 80128a2:	8959      	ldrh	r1, [r3, #10]
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	685b      	ldr	r3, [r3, #4]
 80128a8:	8b3a      	ldrh	r2, [r7, #24]
 80128aa:	1a8a      	subs	r2, r1, r2
 80128ac:	b292      	uxth	r2, r2
 80128ae:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	685b      	ldr	r3, [r3, #4]
 80128b4:	8919      	ldrh	r1, [r3, #8]
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	685b      	ldr	r3, [r3, #4]
 80128ba:	8b3a      	ldrh	r2, [r7, #24]
 80128bc:	1a8a      	subs	r2, r1, r2
 80128be:	b292      	uxth	r2, r2
 80128c0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	685b      	ldr	r3, [r3, #4]
 80128c6:	68fa      	ldr	r2, [r7, #12]
 80128c8:	68d2      	ldr	r2, [r2, #12]
 80128ca:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	68db      	ldr	r3, [r3, #12]
 80128d0:	2200      	movs	r2, #0
 80128d2:	741a      	strb	r2, [r3, #16]
 80128d4:	2200      	movs	r2, #0
 80128d6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	68db      	ldr	r3, [r3, #12]
 80128dc:	f103 0214 	add.w	r2, r3, #20
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	7a9b      	ldrb	r3, [r3, #10]
 80128e4:	009b      	lsls	r3, r3, #2
 80128e6:	f003 0304 	and.w	r3, r3, #4
 80128ea:	4413      	add	r3, r2
 80128ec:	69fa      	ldr	r2, [r7, #28]
 80128ee:	429a      	cmp	r2, r3
 80128f0:	d006      	beq.n	8012900 <tcp_output_segment+0x16c>
 80128f2:	4b10      	ldr	r3, [pc, #64]	; (8012934 <tcp_output_segment+0x1a0>)
 80128f4:	f240 621c 	movw	r2, #1564	; 0x61c
 80128f8:	4914      	ldr	r1, [pc, #80]	; (801294c <tcp_output_segment+0x1b8>)
 80128fa:	4810      	ldr	r0, [pc, #64]	; (801293c <tcp_output_segment+0x1a8>)
 80128fc:	f004 f9a2 	bl	8016c44 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	6858      	ldr	r0, [r3, #4]
 8012904:	68b9      	ldr	r1, [r7, #8]
 8012906:	68bb      	ldr	r3, [r7, #8]
 8012908:	1d1c      	adds	r4, r3, #4
 801290a:	68bb      	ldr	r3, [r7, #8]
 801290c:	7add      	ldrb	r5, [r3, #11]
 801290e:	68bb      	ldr	r3, [r7, #8]
 8012910:	7a9b      	ldrb	r3, [r3, #10]
 8012912:	687a      	ldr	r2, [r7, #4]
 8012914:	9202      	str	r2, [sp, #8]
 8012916:	2206      	movs	r2, #6
 8012918:	9201      	str	r2, [sp, #4]
 801291a:	9300      	str	r3, [sp, #0]
 801291c:	462b      	mov	r3, r5
 801291e:	4622      	mov	r2, r4
 8012920:	f002 fd96 	bl	8015450 <ip4_output_if>
 8012924:	4603      	mov	r3, r0
 8012926:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012928:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801292c:	4618      	mov	r0, r3
 801292e:	3720      	adds	r7, #32
 8012930:	46bd      	mov	sp, r7
 8012932:	bdb0      	pop	{r4, r5, r7, pc}
 8012934:	08019c7c 	.word	0x08019c7c
 8012938:	0801a240 	.word	0x0801a240
 801293c:	08019cd0 	.word	0x08019cd0
 8012940:	0801a260 	.word	0x0801a260
 8012944:	0801a280 	.word	0x0801a280
 8012948:	2000d3b8 	.word	0x2000d3b8
 801294c:	0801a2a4 	.word	0x0801a2a4

08012950 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012950:	b5b0      	push	{r4, r5, r7, lr}
 8012952:	b084      	sub	sp, #16
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d106      	bne.n	801296c <tcp_rexmit_rto_prepare+0x1c>
 801295e:	4b31      	ldr	r3, [pc, #196]	; (8012a24 <tcp_rexmit_rto_prepare+0xd4>)
 8012960:	f240 6263 	movw	r2, #1635	; 0x663
 8012964:	4930      	ldr	r1, [pc, #192]	; (8012a28 <tcp_rexmit_rto_prepare+0xd8>)
 8012966:	4831      	ldr	r0, [pc, #196]	; (8012a2c <tcp_rexmit_rto_prepare+0xdc>)
 8012968:	f004 f96c 	bl	8016c44 <iprintf>

  if (pcb->unacked == NULL) {
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012970:	2b00      	cmp	r3, #0
 8012972:	d102      	bne.n	801297a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012974:	f06f 0305 	mvn.w	r3, #5
 8012978:	e050      	b.n	8012a1c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801297e:	60fb      	str	r3, [r7, #12]
 8012980:	e00b      	b.n	801299a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012982:	68f8      	ldr	r0, [r7, #12]
 8012984:	f7ff fee6 	bl	8012754 <tcp_output_segment_busy>
 8012988:	4603      	mov	r3, r0
 801298a:	2b00      	cmp	r3, #0
 801298c:	d002      	beq.n	8012994 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801298e:	f06f 0305 	mvn.w	r3, #5
 8012992:	e043      	b.n	8012a1c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	60fb      	str	r3, [r7, #12]
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d1ef      	bne.n	8012982 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80129a2:	68f8      	ldr	r0, [r7, #12]
 80129a4:	f7ff fed6 	bl	8012754 <tcp_output_segment_busy>
 80129a8:	4603      	mov	r3, r0
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d002      	beq.n	80129b4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80129ae:	f06f 0305 	mvn.w	r3, #5
 80129b2:	e033      	b.n	8012a1c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	2200      	movs	r2, #0
 80129c8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	8b5b      	ldrh	r3, [r3, #26]
 80129ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80129d2:	b29a      	uxth	r2, r3
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	68db      	ldr	r3, [r3, #12]
 80129dc:	685b      	ldr	r3, [r3, #4]
 80129de:	4618      	mov	r0, r3
 80129e0:	f7f8 fea5 	bl	800b72e <lwip_htonl>
 80129e4:	4604      	mov	r4, r0
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	891b      	ldrh	r3, [r3, #8]
 80129ea:	461d      	mov	r5, r3
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	68db      	ldr	r3, [r3, #12]
 80129f0:	899b      	ldrh	r3, [r3, #12]
 80129f2:	b29b      	uxth	r3, r3
 80129f4:	4618      	mov	r0, r3
 80129f6:	f7f8 fe85 	bl	800b704 <lwip_htons>
 80129fa:	4603      	mov	r3, r0
 80129fc:	b2db      	uxtb	r3, r3
 80129fe:	f003 0303 	and.w	r3, r3, #3
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d001      	beq.n	8012a0a <tcp_rexmit_rto_prepare+0xba>
 8012a06:	2301      	movs	r3, #1
 8012a08:	e000      	b.n	8012a0c <tcp_rexmit_rto_prepare+0xbc>
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	442b      	add	r3, r5
 8012a0e:	18e2      	adds	r2, r4, r3
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	2200      	movs	r2, #0
 8012a18:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012a1a:	2300      	movs	r3, #0
}
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	3710      	adds	r7, #16
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bdb0      	pop	{r4, r5, r7, pc}
 8012a24:	08019c7c 	.word	0x08019c7c
 8012a28:	0801a2b8 	.word	0x0801a2b8
 8012a2c:	08019cd0 	.word	0x08019cd0

08012a30 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b082      	sub	sp, #8
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d106      	bne.n	8012a4c <tcp_rexmit_rto_commit+0x1c>
 8012a3e:	4b0d      	ldr	r3, [pc, #52]	; (8012a74 <tcp_rexmit_rto_commit+0x44>)
 8012a40:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012a44:	490c      	ldr	r1, [pc, #48]	; (8012a78 <tcp_rexmit_rto_commit+0x48>)
 8012a46:	480d      	ldr	r0, [pc, #52]	; (8012a7c <tcp_rexmit_rto_commit+0x4c>)
 8012a48:	f004 f8fc 	bl	8016c44 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012a52:	2bff      	cmp	r3, #255	; 0xff
 8012a54:	d007      	beq.n	8012a66 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012a5c:	3301      	adds	r3, #1
 8012a5e:	b2da      	uxtb	r2, r3
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f7ff fc80 	bl	801236c <tcp_output>
}
 8012a6c:	bf00      	nop
 8012a6e:	3708      	adds	r7, #8
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bd80      	pop	{r7, pc}
 8012a74:	08019c7c 	.word	0x08019c7c
 8012a78:	0801a2dc 	.word	0x0801a2dc
 8012a7c:	08019cd0 	.word	0x08019cd0

08012a80 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b082      	sub	sp, #8
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d106      	bne.n	8012a9c <tcp_rexmit_rto+0x1c>
 8012a8e:	4b0a      	ldr	r3, [pc, #40]	; (8012ab8 <tcp_rexmit_rto+0x38>)
 8012a90:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012a94:	4909      	ldr	r1, [pc, #36]	; (8012abc <tcp_rexmit_rto+0x3c>)
 8012a96:	480a      	ldr	r0, [pc, #40]	; (8012ac0 <tcp_rexmit_rto+0x40>)
 8012a98:	f004 f8d4 	bl	8016c44 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012a9c:	6878      	ldr	r0, [r7, #4]
 8012a9e:	f7ff ff57 	bl	8012950 <tcp_rexmit_rto_prepare>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d102      	bne.n	8012aae <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012aa8:	6878      	ldr	r0, [r7, #4]
 8012aaa:	f7ff ffc1 	bl	8012a30 <tcp_rexmit_rto_commit>
  }
}
 8012aae:	bf00      	nop
 8012ab0:	3708      	adds	r7, #8
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bd80      	pop	{r7, pc}
 8012ab6:	bf00      	nop
 8012ab8:	08019c7c 	.word	0x08019c7c
 8012abc:	0801a300 	.word	0x0801a300
 8012ac0:	08019cd0 	.word	0x08019cd0

08012ac4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012ac4:	b590      	push	{r4, r7, lr}
 8012ac6:	b085      	sub	sp, #20
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d106      	bne.n	8012ae0 <tcp_rexmit+0x1c>
 8012ad2:	4b2f      	ldr	r3, [pc, #188]	; (8012b90 <tcp_rexmit+0xcc>)
 8012ad4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012ad8:	492e      	ldr	r1, [pc, #184]	; (8012b94 <tcp_rexmit+0xd0>)
 8012ada:	482f      	ldr	r0, [pc, #188]	; (8012b98 <tcp_rexmit+0xd4>)
 8012adc:	f004 f8b2 	bl	8016c44 <iprintf>

  if (pcb->unacked == NULL) {
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d102      	bne.n	8012aee <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012ae8:	f06f 0305 	mvn.w	r3, #5
 8012aec:	e04c      	b.n	8012b88 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012af2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012af4:	68b8      	ldr	r0, [r7, #8]
 8012af6:	f7ff fe2d 	bl	8012754 <tcp_output_segment_busy>
 8012afa:	4603      	mov	r3, r0
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d002      	beq.n	8012b06 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012b00:	f06f 0305 	mvn.w	r3, #5
 8012b04:	e040      	b.n	8012b88 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012b06:	68bb      	ldr	r3, [r7, #8]
 8012b08:	681a      	ldr	r2, [r3, #0]
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	336c      	adds	r3, #108	; 0x6c
 8012b12:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012b14:	e002      	b.n	8012b1c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d011      	beq.n	8012b48 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	68db      	ldr	r3, [r3, #12]
 8012b2a:	685b      	ldr	r3, [r3, #4]
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f7f8 fdfe 	bl	800b72e <lwip_htonl>
 8012b32:	4604      	mov	r4, r0
 8012b34:	68bb      	ldr	r3, [r7, #8]
 8012b36:	68db      	ldr	r3, [r3, #12]
 8012b38:	685b      	ldr	r3, [r3, #4]
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f7f8 fdf7 	bl	800b72e <lwip_htonl>
 8012b40:	4603      	mov	r3, r0
 8012b42:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	dbe6      	blt.n	8012b16 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	681a      	ldr	r2, [r3, #0]
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	68ba      	ldr	r2, [r7, #8]
 8012b54:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012b56:	68bb      	ldr	r3, [r7, #8]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d103      	bne.n	8012b66 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	2200      	movs	r2, #0
 8012b62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012b6c:	2bff      	cmp	r3, #255	; 0xff
 8012b6e:	d007      	beq.n	8012b80 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012b76:	3301      	adds	r3, #1
 8012b78:	b2da      	uxtb	r2, r3
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	2200      	movs	r2, #0
 8012b84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012b86:	2300      	movs	r3, #0
}
 8012b88:	4618      	mov	r0, r3
 8012b8a:	3714      	adds	r7, #20
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	bd90      	pop	{r4, r7, pc}
 8012b90:	08019c7c 	.word	0x08019c7c
 8012b94:	0801a31c 	.word	0x0801a31c
 8012b98:	08019cd0 	.word	0x08019cd0

08012b9c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b082      	sub	sp, #8
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d106      	bne.n	8012bb8 <tcp_rexmit_fast+0x1c>
 8012baa:	4b2a      	ldr	r3, [pc, #168]	; (8012c54 <tcp_rexmit_fast+0xb8>)
 8012bac:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012bb0:	4929      	ldr	r1, [pc, #164]	; (8012c58 <tcp_rexmit_fast+0xbc>)
 8012bb2:	482a      	ldr	r0, [pc, #168]	; (8012c5c <tcp_rexmit_fast+0xc0>)
 8012bb4:	f004 f846 	bl	8016c44 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d044      	beq.n	8012c4a <tcp_rexmit_fast+0xae>
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	8b5b      	ldrh	r3, [r3, #26]
 8012bc4:	f003 0304 	and.w	r3, r3, #4
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d13e      	bne.n	8012c4a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012bcc:	6878      	ldr	r0, [r7, #4]
 8012bce:	f7ff ff79 	bl	8012ac4 <tcp_rexmit>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d138      	bne.n	8012c4a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012be4:	4293      	cmp	r3, r2
 8012be6:	bf28      	it	cs
 8012be8:	4613      	movcs	r3, r2
 8012bea:	b29b      	uxth	r3, r3
 8012bec:	0fda      	lsrs	r2, r3, #31
 8012bee:	4413      	add	r3, r2
 8012bf0:	105b      	asrs	r3, r3, #1
 8012bf2:	b29a      	uxth	r2, r3
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012c00:	461a      	mov	r2, r3
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c06:	005b      	lsls	r3, r3, #1
 8012c08:	429a      	cmp	r2, r3
 8012c0a:	d206      	bcs.n	8012c1a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c10:	005b      	lsls	r3, r3, #1
 8012c12:	b29a      	uxth	r2, r3
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c24:	4619      	mov	r1, r3
 8012c26:	0049      	lsls	r1, r1, #1
 8012c28:	440b      	add	r3, r1
 8012c2a:	b29b      	uxth	r3, r3
 8012c2c:	4413      	add	r3, r2
 8012c2e:	b29a      	uxth	r2, r3
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	8b5b      	ldrh	r3, [r3, #26]
 8012c3a:	f043 0304 	orr.w	r3, r3, #4
 8012c3e:	b29a      	uxth	r2, r3
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2200      	movs	r2, #0
 8012c48:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012c4a:	bf00      	nop
 8012c4c:	3708      	adds	r7, #8
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	bd80      	pop	{r7, pc}
 8012c52:	bf00      	nop
 8012c54:	08019c7c 	.word	0x08019c7c
 8012c58:	0801a334 	.word	0x0801a334
 8012c5c:	08019cd0 	.word	0x08019cd0

08012c60 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b086      	sub	sp, #24
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	60f8      	str	r0, [r7, #12]
 8012c68:	607b      	str	r3, [r7, #4]
 8012c6a:	460b      	mov	r3, r1
 8012c6c:	817b      	strh	r3, [r7, #10]
 8012c6e:	4613      	mov	r3, r2
 8012c70:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012c72:	897a      	ldrh	r2, [r7, #10]
 8012c74:	893b      	ldrh	r3, [r7, #8]
 8012c76:	4413      	add	r3, r2
 8012c78:	b29b      	uxth	r3, r3
 8012c7a:	3314      	adds	r3, #20
 8012c7c:	b29b      	uxth	r3, r3
 8012c7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012c82:	4619      	mov	r1, r3
 8012c84:	2022      	movs	r0, #34	; 0x22
 8012c86:	f7f9 fda1 	bl	800c7cc <pbuf_alloc>
 8012c8a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012c8c:	697b      	ldr	r3, [r7, #20]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d04d      	beq.n	8012d2e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012c92:	897b      	ldrh	r3, [r7, #10]
 8012c94:	3313      	adds	r3, #19
 8012c96:	697a      	ldr	r2, [r7, #20]
 8012c98:	8952      	ldrh	r2, [r2, #10]
 8012c9a:	4293      	cmp	r3, r2
 8012c9c:	db06      	blt.n	8012cac <tcp_output_alloc_header_common+0x4c>
 8012c9e:	4b26      	ldr	r3, [pc, #152]	; (8012d38 <tcp_output_alloc_header_common+0xd8>)
 8012ca0:	f240 7223 	movw	r2, #1827	; 0x723
 8012ca4:	4925      	ldr	r1, [pc, #148]	; (8012d3c <tcp_output_alloc_header_common+0xdc>)
 8012ca6:	4826      	ldr	r0, [pc, #152]	; (8012d40 <tcp_output_alloc_header_common+0xe0>)
 8012ca8:	f003 ffcc 	bl	8016c44 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012cac:	697b      	ldr	r3, [r7, #20]
 8012cae:	685b      	ldr	r3, [r3, #4]
 8012cb0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012cb2:	8c3b      	ldrh	r3, [r7, #32]
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f7f8 fd25 	bl	800b704 <lwip_htons>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	461a      	mov	r2, r3
 8012cbe:	693b      	ldr	r3, [r7, #16]
 8012cc0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012cc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f7f8 fd1d 	bl	800b704 <lwip_htons>
 8012cca:	4603      	mov	r3, r0
 8012ccc:	461a      	mov	r2, r3
 8012cce:	693b      	ldr	r3, [r7, #16]
 8012cd0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012cd2:	693b      	ldr	r3, [r7, #16]
 8012cd4:	687a      	ldr	r2, [r7, #4]
 8012cd6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012cd8:	68f8      	ldr	r0, [r7, #12]
 8012cda:	f7f8 fd28 	bl	800b72e <lwip_htonl>
 8012cde:	4602      	mov	r2, r0
 8012ce0:	693b      	ldr	r3, [r7, #16]
 8012ce2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012ce4:	897b      	ldrh	r3, [r7, #10]
 8012ce6:	089b      	lsrs	r3, r3, #2
 8012ce8:	b29b      	uxth	r3, r3
 8012cea:	3305      	adds	r3, #5
 8012cec:	b29b      	uxth	r3, r3
 8012cee:	031b      	lsls	r3, r3, #12
 8012cf0:	b29a      	uxth	r2, r3
 8012cf2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012cf6:	b29b      	uxth	r3, r3
 8012cf8:	4313      	orrs	r3, r2
 8012cfa:	b29b      	uxth	r3, r3
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f7f8 fd01 	bl	800b704 <lwip_htons>
 8012d02:	4603      	mov	r3, r0
 8012d04:	461a      	mov	r2, r3
 8012d06:	693b      	ldr	r3, [r7, #16]
 8012d08:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012d0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f7f8 fcf9 	bl	800b704 <lwip_htons>
 8012d12:	4603      	mov	r3, r0
 8012d14:	461a      	mov	r2, r3
 8012d16:	693b      	ldr	r3, [r7, #16]
 8012d18:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012d1a:	693b      	ldr	r3, [r7, #16]
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	741a      	strb	r2, [r3, #16]
 8012d20:	2200      	movs	r2, #0
 8012d22:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012d24:	693b      	ldr	r3, [r7, #16]
 8012d26:	2200      	movs	r2, #0
 8012d28:	749a      	strb	r2, [r3, #18]
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012d2e:	697b      	ldr	r3, [r7, #20]
}
 8012d30:	4618      	mov	r0, r3
 8012d32:	3718      	adds	r7, #24
 8012d34:	46bd      	mov	sp, r7
 8012d36:	bd80      	pop	{r7, pc}
 8012d38:	08019c7c 	.word	0x08019c7c
 8012d3c:	0801a354 	.word	0x0801a354
 8012d40:	08019cd0 	.word	0x08019cd0

08012d44 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012d44:	b5b0      	push	{r4, r5, r7, lr}
 8012d46:	b08a      	sub	sp, #40	; 0x28
 8012d48:	af04      	add	r7, sp, #16
 8012d4a:	60f8      	str	r0, [r7, #12]
 8012d4c:	607b      	str	r3, [r7, #4]
 8012d4e:	460b      	mov	r3, r1
 8012d50:	817b      	strh	r3, [r7, #10]
 8012d52:	4613      	mov	r3, r2
 8012d54:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d106      	bne.n	8012d6a <tcp_output_alloc_header+0x26>
 8012d5c:	4b15      	ldr	r3, [pc, #84]	; (8012db4 <tcp_output_alloc_header+0x70>)
 8012d5e:	f240 7242 	movw	r2, #1858	; 0x742
 8012d62:	4915      	ldr	r1, [pc, #84]	; (8012db8 <tcp_output_alloc_header+0x74>)
 8012d64:	4815      	ldr	r0, [pc, #84]	; (8012dbc <tcp_output_alloc_header+0x78>)
 8012d66:	f003 ff6d 	bl	8016c44 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	8adb      	ldrh	r3, [r3, #22]
 8012d72:	68fa      	ldr	r2, [r7, #12]
 8012d74:	8b12      	ldrh	r2, [r2, #24]
 8012d76:	68f9      	ldr	r1, [r7, #12]
 8012d78:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012d7a:	893d      	ldrh	r5, [r7, #8]
 8012d7c:	897c      	ldrh	r4, [r7, #10]
 8012d7e:	9103      	str	r1, [sp, #12]
 8012d80:	2110      	movs	r1, #16
 8012d82:	9102      	str	r1, [sp, #8]
 8012d84:	9201      	str	r2, [sp, #4]
 8012d86:	9300      	str	r3, [sp, #0]
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	462a      	mov	r2, r5
 8012d8c:	4621      	mov	r1, r4
 8012d8e:	f7ff ff67 	bl	8012c60 <tcp_output_alloc_header_common>
 8012d92:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012d94:	697b      	ldr	r3, [r7, #20]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d006      	beq.n	8012da8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d9e:	68fa      	ldr	r2, [r7, #12]
 8012da0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012da2:	441a      	add	r2, r3
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012da8:	697b      	ldr	r3, [r7, #20]
}
 8012daa:	4618      	mov	r0, r3
 8012dac:	3718      	adds	r7, #24
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bdb0      	pop	{r4, r5, r7, pc}
 8012db2:	bf00      	nop
 8012db4:	08019c7c 	.word	0x08019c7c
 8012db8:	0801a384 	.word	0x0801a384
 8012dbc:	08019cd0 	.word	0x08019cd0

08012dc0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b088      	sub	sp, #32
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	60f8      	str	r0, [r7, #12]
 8012dc8:	60b9      	str	r1, [r7, #8]
 8012dca:	4611      	mov	r1, r2
 8012dcc:	461a      	mov	r2, r3
 8012dce:	460b      	mov	r3, r1
 8012dd0:	71fb      	strb	r3, [r7, #7]
 8012dd2:	4613      	mov	r3, r2
 8012dd4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012dda:	68bb      	ldr	r3, [r7, #8]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d106      	bne.n	8012dee <tcp_output_fill_options+0x2e>
 8012de0:	4b13      	ldr	r3, [pc, #76]	; (8012e30 <tcp_output_fill_options+0x70>)
 8012de2:	f240 7256 	movw	r2, #1878	; 0x756
 8012de6:	4913      	ldr	r1, [pc, #76]	; (8012e34 <tcp_output_fill_options+0x74>)
 8012de8:	4813      	ldr	r0, [pc, #76]	; (8012e38 <tcp_output_fill_options+0x78>)
 8012dea:	f003 ff2b 	bl	8016c44 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012dee:	68bb      	ldr	r3, [r7, #8]
 8012df0:	685b      	ldr	r3, [r3, #4]
 8012df2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012df4:	69bb      	ldr	r3, [r7, #24]
 8012df6:	3314      	adds	r3, #20
 8012df8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012dfa:	69bb      	ldr	r3, [r7, #24]
 8012dfc:	f103 0214 	add.w	r2, r3, #20
 8012e00:	8bfb      	ldrh	r3, [r7, #30]
 8012e02:	009b      	lsls	r3, r3, #2
 8012e04:	4619      	mov	r1, r3
 8012e06:	79fb      	ldrb	r3, [r7, #7]
 8012e08:	009b      	lsls	r3, r3, #2
 8012e0a:	f003 0304 	and.w	r3, r3, #4
 8012e0e:	440b      	add	r3, r1
 8012e10:	4413      	add	r3, r2
 8012e12:	697a      	ldr	r2, [r7, #20]
 8012e14:	429a      	cmp	r2, r3
 8012e16:	d006      	beq.n	8012e26 <tcp_output_fill_options+0x66>
 8012e18:	4b05      	ldr	r3, [pc, #20]	; (8012e30 <tcp_output_fill_options+0x70>)
 8012e1a:	f240 7275 	movw	r2, #1909	; 0x775
 8012e1e:	4907      	ldr	r1, [pc, #28]	; (8012e3c <tcp_output_fill_options+0x7c>)
 8012e20:	4805      	ldr	r0, [pc, #20]	; (8012e38 <tcp_output_fill_options+0x78>)
 8012e22:	f003 ff0f 	bl	8016c44 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012e26:	bf00      	nop
 8012e28:	3720      	adds	r7, #32
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	bd80      	pop	{r7, pc}
 8012e2e:	bf00      	nop
 8012e30:	08019c7c 	.word	0x08019c7c
 8012e34:	0801a3ac 	.word	0x0801a3ac
 8012e38:	08019cd0 	.word	0x08019cd0
 8012e3c:	0801a2a4 	.word	0x0801a2a4

08012e40 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b08a      	sub	sp, #40	; 0x28
 8012e44:	af04      	add	r7, sp, #16
 8012e46:	60f8      	str	r0, [r7, #12]
 8012e48:	60b9      	str	r1, [r7, #8]
 8012e4a:	607a      	str	r2, [r7, #4]
 8012e4c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012e4e:	68bb      	ldr	r3, [r7, #8]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d106      	bne.n	8012e62 <tcp_output_control_segment+0x22>
 8012e54:	4b1c      	ldr	r3, [pc, #112]	; (8012ec8 <tcp_output_control_segment+0x88>)
 8012e56:	f240 7287 	movw	r2, #1927	; 0x787
 8012e5a:	491c      	ldr	r1, [pc, #112]	; (8012ecc <tcp_output_control_segment+0x8c>)
 8012e5c:	481c      	ldr	r0, [pc, #112]	; (8012ed0 <tcp_output_control_segment+0x90>)
 8012e5e:	f003 fef1 	bl	8016c44 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012e62:	683a      	ldr	r2, [r7, #0]
 8012e64:	6879      	ldr	r1, [r7, #4]
 8012e66:	68f8      	ldr	r0, [r7, #12]
 8012e68:	f7fe fae8 	bl	801143c <tcp_route>
 8012e6c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012e6e:	693b      	ldr	r3, [r7, #16]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d102      	bne.n	8012e7a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012e74:	23fc      	movs	r3, #252	; 0xfc
 8012e76:	75fb      	strb	r3, [r7, #23]
 8012e78:	e01c      	b.n	8012eb4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d006      	beq.n	8012e8e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	7adb      	ldrb	r3, [r3, #11]
 8012e84:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	7a9b      	ldrb	r3, [r3, #10]
 8012e8a:	757b      	strb	r3, [r7, #21]
 8012e8c:	e003      	b.n	8012e96 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012e8e:	23ff      	movs	r3, #255	; 0xff
 8012e90:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012e92:	2300      	movs	r3, #0
 8012e94:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012e96:	7dba      	ldrb	r2, [r7, #22]
 8012e98:	693b      	ldr	r3, [r7, #16]
 8012e9a:	9302      	str	r3, [sp, #8]
 8012e9c:	2306      	movs	r3, #6
 8012e9e:	9301      	str	r3, [sp, #4]
 8012ea0:	7d7b      	ldrb	r3, [r7, #21]
 8012ea2:	9300      	str	r3, [sp, #0]
 8012ea4:	4613      	mov	r3, r2
 8012ea6:	683a      	ldr	r2, [r7, #0]
 8012ea8:	6879      	ldr	r1, [r7, #4]
 8012eaa:	68b8      	ldr	r0, [r7, #8]
 8012eac:	f002 fad0 	bl	8015450 <ip4_output_if>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012eb4:	68b8      	ldr	r0, [r7, #8]
 8012eb6:	f7f9 ff6d 	bl	800cd94 <pbuf_free>
  return err;
 8012eba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	3718      	adds	r7, #24
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	bd80      	pop	{r7, pc}
 8012ec6:	bf00      	nop
 8012ec8:	08019c7c 	.word	0x08019c7c
 8012ecc:	0801a3d4 	.word	0x0801a3d4
 8012ed0:	08019cd0 	.word	0x08019cd0

08012ed4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012ed4:	b590      	push	{r4, r7, lr}
 8012ed6:	b08b      	sub	sp, #44	; 0x2c
 8012ed8:	af04      	add	r7, sp, #16
 8012eda:	60f8      	str	r0, [r7, #12]
 8012edc:	60b9      	str	r1, [r7, #8]
 8012ede:	607a      	str	r2, [r7, #4]
 8012ee0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012ee2:	683b      	ldr	r3, [r7, #0]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d106      	bne.n	8012ef6 <tcp_rst+0x22>
 8012ee8:	4b1f      	ldr	r3, [pc, #124]	; (8012f68 <tcp_rst+0x94>)
 8012eea:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012eee:	491f      	ldr	r1, [pc, #124]	; (8012f6c <tcp_rst+0x98>)
 8012ef0:	481f      	ldr	r0, [pc, #124]	; (8012f70 <tcp_rst+0x9c>)
 8012ef2:	f003 fea7 	bl	8016c44 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d106      	bne.n	8012f0a <tcp_rst+0x36>
 8012efc:	4b1a      	ldr	r3, [pc, #104]	; (8012f68 <tcp_rst+0x94>)
 8012efe:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012f02:	491c      	ldr	r1, [pc, #112]	; (8012f74 <tcp_rst+0xa0>)
 8012f04:	481a      	ldr	r0, [pc, #104]	; (8012f70 <tcp_rst+0x9c>)
 8012f06:	f003 fe9d 	bl	8016c44 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012f0e:	f246 0308 	movw	r3, #24584	; 0x6008
 8012f12:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012f14:	7dfb      	ldrb	r3, [r7, #23]
 8012f16:	b29c      	uxth	r4, r3
 8012f18:	68b8      	ldr	r0, [r7, #8]
 8012f1a:	f7f8 fc08 	bl	800b72e <lwip_htonl>
 8012f1e:	4602      	mov	r2, r0
 8012f20:	8abb      	ldrh	r3, [r7, #20]
 8012f22:	9303      	str	r3, [sp, #12]
 8012f24:	2314      	movs	r3, #20
 8012f26:	9302      	str	r3, [sp, #8]
 8012f28:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012f2a:	9301      	str	r3, [sp, #4]
 8012f2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012f2e:	9300      	str	r3, [sp, #0]
 8012f30:	4613      	mov	r3, r2
 8012f32:	2200      	movs	r2, #0
 8012f34:	4621      	mov	r1, r4
 8012f36:	6878      	ldr	r0, [r7, #4]
 8012f38:	f7ff fe92 	bl	8012c60 <tcp_output_alloc_header_common>
 8012f3c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012f3e:	693b      	ldr	r3, [r7, #16]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d00c      	beq.n	8012f5e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012f44:	7dfb      	ldrb	r3, [r7, #23]
 8012f46:	2200      	movs	r2, #0
 8012f48:	6939      	ldr	r1, [r7, #16]
 8012f4a:	68f8      	ldr	r0, [r7, #12]
 8012f4c:	f7ff ff38 	bl	8012dc0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f52:	683a      	ldr	r2, [r7, #0]
 8012f54:	6939      	ldr	r1, [r7, #16]
 8012f56:	68f8      	ldr	r0, [r7, #12]
 8012f58:	f7ff ff72 	bl	8012e40 <tcp_output_control_segment>
 8012f5c:	e000      	b.n	8012f60 <tcp_rst+0x8c>
    return;
 8012f5e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012f60:	371c      	adds	r7, #28
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd90      	pop	{r4, r7, pc}
 8012f66:	bf00      	nop
 8012f68:	08019c7c 	.word	0x08019c7c
 8012f6c:	0801a400 	.word	0x0801a400
 8012f70:	08019cd0 	.word	0x08019cd0
 8012f74:	0801a41c 	.word	0x0801a41c

08012f78 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012f78:	b590      	push	{r4, r7, lr}
 8012f7a:	b087      	sub	sp, #28
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012f80:	2300      	movs	r3, #0
 8012f82:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012f84:	2300      	movs	r3, #0
 8012f86:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d106      	bne.n	8012f9c <tcp_send_empty_ack+0x24>
 8012f8e:	4b28      	ldr	r3, [pc, #160]	; (8013030 <tcp_send_empty_ack+0xb8>)
 8012f90:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012f94:	4927      	ldr	r1, [pc, #156]	; (8013034 <tcp_send_empty_ack+0xbc>)
 8012f96:	4828      	ldr	r0, [pc, #160]	; (8013038 <tcp_send_empty_ack+0xc0>)
 8012f98:	f003 fe54 	bl	8016c44 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012f9c:	7dfb      	ldrb	r3, [r7, #23]
 8012f9e:	009b      	lsls	r3, r3, #2
 8012fa0:	b2db      	uxtb	r3, r3
 8012fa2:	f003 0304 	and.w	r3, r3, #4
 8012fa6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012fa8:	7d7b      	ldrb	r3, [r7, #21]
 8012faa:	b29c      	uxth	r4, r3
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	f7f8 fbbc 	bl	800b72e <lwip_htonl>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	2200      	movs	r2, #0
 8012fba:	4621      	mov	r1, r4
 8012fbc:	6878      	ldr	r0, [r7, #4]
 8012fbe:	f7ff fec1 	bl	8012d44 <tcp_output_alloc_header>
 8012fc2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012fc4:	693b      	ldr	r3, [r7, #16]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d109      	bne.n	8012fde <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	8b5b      	ldrh	r3, [r3, #26]
 8012fce:	f043 0303 	orr.w	r3, r3, #3
 8012fd2:	b29a      	uxth	r2, r3
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012fd8:	f06f 0301 	mvn.w	r3, #1
 8012fdc:	e023      	b.n	8013026 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012fde:	7dbb      	ldrb	r3, [r7, #22]
 8012fe0:	7dfa      	ldrb	r2, [r7, #23]
 8012fe2:	6939      	ldr	r1, [r7, #16]
 8012fe4:	6878      	ldr	r0, [r7, #4]
 8012fe6:	f7ff feeb 	bl	8012dc0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012fea:	687a      	ldr	r2, [r7, #4]
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	3304      	adds	r3, #4
 8012ff0:	6939      	ldr	r1, [r7, #16]
 8012ff2:	6878      	ldr	r0, [r7, #4]
 8012ff4:	f7ff ff24 	bl	8012e40 <tcp_output_control_segment>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d007      	beq.n	8013014 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	8b5b      	ldrh	r3, [r3, #26]
 8013008:	f043 0303 	orr.w	r3, r3, #3
 801300c:	b29a      	uxth	r2, r3
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	835a      	strh	r2, [r3, #26]
 8013012:	e006      	b.n	8013022 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	8b5b      	ldrh	r3, [r3, #26]
 8013018:	f023 0303 	bic.w	r3, r3, #3
 801301c:	b29a      	uxth	r2, r3
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013022:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013026:	4618      	mov	r0, r3
 8013028:	371c      	adds	r7, #28
 801302a:	46bd      	mov	sp, r7
 801302c:	bd90      	pop	{r4, r7, pc}
 801302e:	bf00      	nop
 8013030:	08019c7c 	.word	0x08019c7c
 8013034:	0801a438 	.word	0x0801a438
 8013038:	08019cd0 	.word	0x08019cd0

0801303c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801303c:	b590      	push	{r4, r7, lr}
 801303e:	b087      	sub	sp, #28
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013044:	2300      	movs	r3, #0
 8013046:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d106      	bne.n	801305c <tcp_keepalive+0x20>
 801304e:	4b18      	ldr	r3, [pc, #96]	; (80130b0 <tcp_keepalive+0x74>)
 8013050:	f640 0224 	movw	r2, #2084	; 0x824
 8013054:	4917      	ldr	r1, [pc, #92]	; (80130b4 <tcp_keepalive+0x78>)
 8013056:	4818      	ldr	r0, [pc, #96]	; (80130b8 <tcp_keepalive+0x7c>)
 8013058:	f003 fdf4 	bl	8016c44 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801305c:	7dfb      	ldrb	r3, [r7, #23]
 801305e:	b29c      	uxth	r4, r3
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013064:	3b01      	subs	r3, #1
 8013066:	4618      	mov	r0, r3
 8013068:	f7f8 fb61 	bl	800b72e <lwip_htonl>
 801306c:	4603      	mov	r3, r0
 801306e:	2200      	movs	r2, #0
 8013070:	4621      	mov	r1, r4
 8013072:	6878      	ldr	r0, [r7, #4]
 8013074:	f7ff fe66 	bl	8012d44 <tcp_output_alloc_header>
 8013078:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801307a:	693b      	ldr	r3, [r7, #16]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d102      	bne.n	8013086 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013080:	f04f 33ff 	mov.w	r3, #4294967295
 8013084:	e010      	b.n	80130a8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013086:	7dfb      	ldrb	r3, [r7, #23]
 8013088:	2200      	movs	r2, #0
 801308a:	6939      	ldr	r1, [r7, #16]
 801308c:	6878      	ldr	r0, [r7, #4]
 801308e:	f7ff fe97 	bl	8012dc0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013092:	687a      	ldr	r2, [r7, #4]
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	3304      	adds	r3, #4
 8013098:	6939      	ldr	r1, [r7, #16]
 801309a:	6878      	ldr	r0, [r7, #4]
 801309c:	f7ff fed0 	bl	8012e40 <tcp_output_control_segment>
 80130a0:	4603      	mov	r3, r0
 80130a2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80130a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80130a8:	4618      	mov	r0, r3
 80130aa:	371c      	adds	r7, #28
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd90      	pop	{r4, r7, pc}
 80130b0:	08019c7c 	.word	0x08019c7c
 80130b4:	0801a458 	.word	0x0801a458
 80130b8:	08019cd0 	.word	0x08019cd0

080130bc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80130bc:	b590      	push	{r4, r7, lr}
 80130be:	b08b      	sub	sp, #44	; 0x2c
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80130c4:	2300      	movs	r3, #0
 80130c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d106      	bne.n	80130de <tcp_zero_window_probe+0x22>
 80130d0:	4b4c      	ldr	r3, [pc, #304]	; (8013204 <tcp_zero_window_probe+0x148>)
 80130d2:	f640 024f 	movw	r2, #2127	; 0x84f
 80130d6:	494c      	ldr	r1, [pc, #304]	; (8013208 <tcp_zero_window_probe+0x14c>)
 80130d8:	484c      	ldr	r0, [pc, #304]	; (801320c <tcp_zero_window_probe+0x150>)
 80130da:	f003 fdb3 	bl	8016c44 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130e2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80130e4:	6a3b      	ldr	r3, [r7, #32]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d101      	bne.n	80130ee <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80130ea:	2300      	movs	r3, #0
 80130ec:	e086      	b.n	80131fc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80130f4:	2bff      	cmp	r3, #255	; 0xff
 80130f6:	d007      	beq.n	8013108 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80130fe:	3301      	adds	r3, #1
 8013100:	b2da      	uxtb	r2, r3
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013108:	6a3b      	ldr	r3, [r7, #32]
 801310a:	68db      	ldr	r3, [r3, #12]
 801310c:	899b      	ldrh	r3, [r3, #12]
 801310e:	b29b      	uxth	r3, r3
 8013110:	4618      	mov	r0, r3
 8013112:	f7f8 faf7 	bl	800b704 <lwip_htons>
 8013116:	4603      	mov	r3, r0
 8013118:	b2db      	uxtb	r3, r3
 801311a:	f003 0301 	and.w	r3, r3, #1
 801311e:	2b00      	cmp	r3, #0
 8013120:	d005      	beq.n	801312e <tcp_zero_window_probe+0x72>
 8013122:	6a3b      	ldr	r3, [r7, #32]
 8013124:	891b      	ldrh	r3, [r3, #8]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d101      	bne.n	801312e <tcp_zero_window_probe+0x72>
 801312a:	2301      	movs	r3, #1
 801312c:	e000      	b.n	8013130 <tcp_zero_window_probe+0x74>
 801312e:	2300      	movs	r3, #0
 8013130:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013132:	7ffb      	ldrb	r3, [r7, #31]
 8013134:	2b00      	cmp	r3, #0
 8013136:	bf0c      	ite	eq
 8013138:	2301      	moveq	r3, #1
 801313a:	2300      	movne	r3, #0
 801313c:	b2db      	uxtb	r3, r3
 801313e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013144:	b299      	uxth	r1, r3
 8013146:	6a3b      	ldr	r3, [r7, #32]
 8013148:	68db      	ldr	r3, [r3, #12]
 801314a:	685b      	ldr	r3, [r3, #4]
 801314c:	8bba      	ldrh	r2, [r7, #28]
 801314e:	6878      	ldr	r0, [r7, #4]
 8013150:	f7ff fdf8 	bl	8012d44 <tcp_output_alloc_header>
 8013154:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013156:	69bb      	ldr	r3, [r7, #24]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d102      	bne.n	8013162 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801315c:	f04f 33ff 	mov.w	r3, #4294967295
 8013160:	e04c      	b.n	80131fc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013162:	69bb      	ldr	r3, [r7, #24]
 8013164:	685b      	ldr	r3, [r3, #4]
 8013166:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013168:	7ffb      	ldrb	r3, [r7, #31]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d011      	beq.n	8013192 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	899b      	ldrh	r3, [r3, #12]
 8013172:	b29b      	uxth	r3, r3
 8013174:	b21b      	sxth	r3, r3
 8013176:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801317a:	b21c      	sxth	r4, r3
 801317c:	2011      	movs	r0, #17
 801317e:	f7f8 fac1 	bl	800b704 <lwip_htons>
 8013182:	4603      	mov	r3, r0
 8013184:	b21b      	sxth	r3, r3
 8013186:	4323      	orrs	r3, r4
 8013188:	b21b      	sxth	r3, r3
 801318a:	b29a      	uxth	r2, r3
 801318c:	697b      	ldr	r3, [r7, #20]
 801318e:	819a      	strh	r2, [r3, #12]
 8013190:	e010      	b.n	80131b4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013192:	69bb      	ldr	r3, [r7, #24]
 8013194:	685b      	ldr	r3, [r3, #4]
 8013196:	3314      	adds	r3, #20
 8013198:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801319a:	6a3b      	ldr	r3, [r7, #32]
 801319c:	6858      	ldr	r0, [r3, #4]
 801319e:	6a3b      	ldr	r3, [r7, #32]
 80131a0:	685b      	ldr	r3, [r3, #4]
 80131a2:	891a      	ldrh	r2, [r3, #8]
 80131a4:	6a3b      	ldr	r3, [r7, #32]
 80131a6:	891b      	ldrh	r3, [r3, #8]
 80131a8:	1ad3      	subs	r3, r2, r3
 80131aa:	b29b      	uxth	r3, r3
 80131ac:	2201      	movs	r2, #1
 80131ae:	6939      	ldr	r1, [r7, #16]
 80131b0:	f7f9 fff6 	bl	800d1a0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80131b4:	6a3b      	ldr	r3, [r7, #32]
 80131b6:	68db      	ldr	r3, [r3, #12]
 80131b8:	685b      	ldr	r3, [r3, #4]
 80131ba:	4618      	mov	r0, r3
 80131bc:	f7f8 fab7 	bl	800b72e <lwip_htonl>
 80131c0:	4603      	mov	r3, r0
 80131c2:	3301      	adds	r3, #1
 80131c4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	1ad3      	subs	r3, r2, r3
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	da02      	bge.n	80131d8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	68fa      	ldr	r2, [r7, #12]
 80131d6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80131d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80131dc:	2200      	movs	r2, #0
 80131de:	69b9      	ldr	r1, [r7, #24]
 80131e0:	6878      	ldr	r0, [r7, #4]
 80131e2:	f7ff fded 	bl	8012dc0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80131e6:	687a      	ldr	r2, [r7, #4]
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	3304      	adds	r3, #4
 80131ec:	69b9      	ldr	r1, [r7, #24]
 80131ee:	6878      	ldr	r0, [r7, #4]
 80131f0:	f7ff fe26 	bl	8012e40 <tcp_output_control_segment>
 80131f4:	4603      	mov	r3, r0
 80131f6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80131f8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80131fc:	4618      	mov	r0, r3
 80131fe:	372c      	adds	r7, #44	; 0x2c
 8013200:	46bd      	mov	sp, r7
 8013202:	bd90      	pop	{r4, r7, pc}
 8013204:	08019c7c 	.word	0x08019c7c
 8013208:	0801a474 	.word	0x0801a474
 801320c:	08019cd0 	.word	0x08019cd0

08013210 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013210:	b580      	push	{r7, lr}
 8013212:	b082      	sub	sp, #8
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013218:	f7fa f8b0 	bl	800d37c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801321c:	4b0a      	ldr	r3, [pc, #40]	; (8013248 <tcpip_tcp_timer+0x38>)
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d103      	bne.n	801322c <tcpip_tcp_timer+0x1c>
 8013224:	4b09      	ldr	r3, [pc, #36]	; (801324c <tcpip_tcp_timer+0x3c>)
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d005      	beq.n	8013238 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801322c:	2200      	movs	r2, #0
 801322e:	4908      	ldr	r1, [pc, #32]	; (8013250 <tcpip_tcp_timer+0x40>)
 8013230:	20fa      	movs	r0, #250	; 0xfa
 8013232:	f000 f8f3 	bl	801341c <sys_timeout>
 8013236:	e003      	b.n	8013240 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013238:	4b06      	ldr	r3, [pc, #24]	; (8013254 <tcpip_tcp_timer+0x44>)
 801323a:	2200      	movs	r2, #0
 801323c:	601a      	str	r2, [r3, #0]
  }
}
 801323e:	bf00      	nop
 8013240:	bf00      	nop
 8013242:	3708      	adds	r7, #8
 8013244:	46bd      	mov	sp, r7
 8013246:	bd80      	pop	{r7, pc}
 8013248:	2000d3b4 	.word	0x2000d3b4
 801324c:	2000d3c4 	.word	0x2000d3c4
 8013250:	08013211 	.word	0x08013211
 8013254:	20006884 	.word	0x20006884

08013258 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013258:	b580      	push	{r7, lr}
 801325a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801325c:	4b0a      	ldr	r3, [pc, #40]	; (8013288 <tcp_timer_needed+0x30>)
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d10f      	bne.n	8013284 <tcp_timer_needed+0x2c>
 8013264:	4b09      	ldr	r3, [pc, #36]	; (801328c <tcp_timer_needed+0x34>)
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d103      	bne.n	8013274 <tcp_timer_needed+0x1c>
 801326c:	4b08      	ldr	r3, [pc, #32]	; (8013290 <tcp_timer_needed+0x38>)
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d007      	beq.n	8013284 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013274:	4b04      	ldr	r3, [pc, #16]	; (8013288 <tcp_timer_needed+0x30>)
 8013276:	2201      	movs	r2, #1
 8013278:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801327a:	2200      	movs	r2, #0
 801327c:	4905      	ldr	r1, [pc, #20]	; (8013294 <tcp_timer_needed+0x3c>)
 801327e:	20fa      	movs	r0, #250	; 0xfa
 8013280:	f000 f8cc 	bl	801341c <sys_timeout>
  }
}
 8013284:	bf00      	nop
 8013286:	bd80      	pop	{r7, pc}
 8013288:	20006884 	.word	0x20006884
 801328c:	2000d3b4 	.word	0x2000d3b4
 8013290:	2000d3c4 	.word	0x2000d3c4
 8013294:	08013211 	.word	0x08013211

08013298 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b086      	sub	sp, #24
 801329c:	af00      	add	r7, sp, #0
 801329e:	60f8      	str	r0, [r7, #12]
 80132a0:	60b9      	str	r1, [r7, #8]
 80132a2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80132a4:	200a      	movs	r0, #10
 80132a6:	f7f8 fee3 	bl	800c070 <memp_malloc>
 80132aa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80132ac:	693b      	ldr	r3, [r7, #16]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d109      	bne.n	80132c6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80132b2:	693b      	ldr	r3, [r7, #16]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d151      	bne.n	801335c <sys_timeout_abs+0xc4>
 80132b8:	4b2a      	ldr	r3, [pc, #168]	; (8013364 <sys_timeout_abs+0xcc>)
 80132ba:	22be      	movs	r2, #190	; 0xbe
 80132bc:	492a      	ldr	r1, [pc, #168]	; (8013368 <sys_timeout_abs+0xd0>)
 80132be:	482b      	ldr	r0, [pc, #172]	; (801336c <sys_timeout_abs+0xd4>)
 80132c0:	f003 fcc0 	bl	8016c44 <iprintf>
    return;
 80132c4:	e04a      	b.n	801335c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80132c6:	693b      	ldr	r3, [r7, #16]
 80132c8:	2200      	movs	r2, #0
 80132ca:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80132cc:	693b      	ldr	r3, [r7, #16]
 80132ce:	68ba      	ldr	r2, [r7, #8]
 80132d0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80132d2:	693b      	ldr	r3, [r7, #16]
 80132d4:	687a      	ldr	r2, [r7, #4]
 80132d6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80132d8:	693b      	ldr	r3, [r7, #16]
 80132da:	68fa      	ldr	r2, [r7, #12]
 80132dc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80132de:	4b24      	ldr	r3, [pc, #144]	; (8013370 <sys_timeout_abs+0xd8>)
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d103      	bne.n	80132ee <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80132e6:	4a22      	ldr	r2, [pc, #136]	; (8013370 <sys_timeout_abs+0xd8>)
 80132e8:	693b      	ldr	r3, [r7, #16]
 80132ea:	6013      	str	r3, [r2, #0]
    return;
 80132ec:	e037      	b.n	801335e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80132ee:	693b      	ldr	r3, [r7, #16]
 80132f0:	685a      	ldr	r2, [r3, #4]
 80132f2:	4b1f      	ldr	r3, [pc, #124]	; (8013370 <sys_timeout_abs+0xd8>)
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	685b      	ldr	r3, [r3, #4]
 80132f8:	1ad3      	subs	r3, r2, r3
 80132fa:	0fdb      	lsrs	r3, r3, #31
 80132fc:	f003 0301 	and.w	r3, r3, #1
 8013300:	b2db      	uxtb	r3, r3
 8013302:	2b00      	cmp	r3, #0
 8013304:	d007      	beq.n	8013316 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013306:	4b1a      	ldr	r3, [pc, #104]	; (8013370 <sys_timeout_abs+0xd8>)
 8013308:	681a      	ldr	r2, [r3, #0]
 801330a:	693b      	ldr	r3, [r7, #16]
 801330c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801330e:	4a18      	ldr	r2, [pc, #96]	; (8013370 <sys_timeout_abs+0xd8>)
 8013310:	693b      	ldr	r3, [r7, #16]
 8013312:	6013      	str	r3, [r2, #0]
 8013314:	e023      	b.n	801335e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013316:	4b16      	ldr	r3, [pc, #88]	; (8013370 <sys_timeout_abs+0xd8>)
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	617b      	str	r3, [r7, #20]
 801331c:	e01a      	b.n	8013354 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801331e:	697b      	ldr	r3, [r7, #20]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d00b      	beq.n	801333e <sys_timeout_abs+0xa6>
 8013326:	693b      	ldr	r3, [r7, #16]
 8013328:	685a      	ldr	r2, [r3, #4]
 801332a:	697b      	ldr	r3, [r7, #20]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	685b      	ldr	r3, [r3, #4]
 8013330:	1ad3      	subs	r3, r2, r3
 8013332:	0fdb      	lsrs	r3, r3, #31
 8013334:	f003 0301 	and.w	r3, r3, #1
 8013338:	b2db      	uxtb	r3, r3
 801333a:	2b00      	cmp	r3, #0
 801333c:	d007      	beq.n	801334e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	681a      	ldr	r2, [r3, #0]
 8013342:	693b      	ldr	r3, [r7, #16]
 8013344:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013346:	697b      	ldr	r3, [r7, #20]
 8013348:	693a      	ldr	r2, [r7, #16]
 801334a:	601a      	str	r2, [r3, #0]
        break;
 801334c:	e007      	b.n	801335e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801334e:	697b      	ldr	r3, [r7, #20]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	617b      	str	r3, [r7, #20]
 8013354:	697b      	ldr	r3, [r7, #20]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d1e1      	bne.n	801331e <sys_timeout_abs+0x86>
 801335a:	e000      	b.n	801335e <sys_timeout_abs+0xc6>
    return;
 801335c:	bf00      	nop
      }
    }
  }
}
 801335e:	3718      	adds	r7, #24
 8013360:	46bd      	mov	sp, r7
 8013362:	bd80      	pop	{r7, pc}
 8013364:	0801a498 	.word	0x0801a498
 8013368:	0801a4cc 	.word	0x0801a4cc
 801336c:	0801a50c 	.word	0x0801a50c
 8013370:	2000687c 	.word	0x2000687c

08013374 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013374:	b580      	push	{r7, lr}
 8013376:	b086      	sub	sp, #24
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013380:	697b      	ldr	r3, [r7, #20]
 8013382:	685b      	ldr	r3, [r3, #4]
 8013384:	4798      	blx	r3

  now = sys_now();
 8013386:	f7f3 f8c9 	bl	800651c <sys_now>
 801338a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801338c:	697b      	ldr	r3, [r7, #20]
 801338e:	681a      	ldr	r2, [r3, #0]
 8013390:	4b0f      	ldr	r3, [pc, #60]	; (80133d0 <lwip_cyclic_timer+0x5c>)
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	4413      	add	r3, r2
 8013396:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013398:	68fa      	ldr	r2, [r7, #12]
 801339a:	693b      	ldr	r3, [r7, #16]
 801339c:	1ad3      	subs	r3, r2, r3
 801339e:	0fdb      	lsrs	r3, r3, #31
 80133a0:	f003 0301 	and.w	r3, r3, #1
 80133a4:	b2db      	uxtb	r3, r3
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d009      	beq.n	80133be <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80133aa:	697b      	ldr	r3, [r7, #20]
 80133ac:	681a      	ldr	r2, [r3, #0]
 80133ae:	693b      	ldr	r3, [r7, #16]
 80133b0:	4413      	add	r3, r2
 80133b2:	687a      	ldr	r2, [r7, #4]
 80133b4:	4907      	ldr	r1, [pc, #28]	; (80133d4 <lwip_cyclic_timer+0x60>)
 80133b6:	4618      	mov	r0, r3
 80133b8:	f7ff ff6e 	bl	8013298 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80133bc:	e004      	b.n	80133c8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80133be:	687a      	ldr	r2, [r7, #4]
 80133c0:	4904      	ldr	r1, [pc, #16]	; (80133d4 <lwip_cyclic_timer+0x60>)
 80133c2:	68f8      	ldr	r0, [r7, #12]
 80133c4:	f7ff ff68 	bl	8013298 <sys_timeout_abs>
}
 80133c8:	bf00      	nop
 80133ca:	3718      	adds	r7, #24
 80133cc:	46bd      	mov	sp, r7
 80133ce:	bd80      	pop	{r7, pc}
 80133d0:	20006880 	.word	0x20006880
 80133d4:	08013375 	.word	0x08013375

080133d8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	b082      	sub	sp, #8
 80133dc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80133de:	2301      	movs	r3, #1
 80133e0:	607b      	str	r3, [r7, #4]
 80133e2:	e00e      	b.n	8013402 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80133e4:	4a0b      	ldr	r2, [pc, #44]	; (8013414 <sys_timeouts_init+0x3c>)
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	00db      	lsls	r3, r3, #3
 80133f0:	4a08      	ldr	r2, [pc, #32]	; (8013414 <sys_timeouts_init+0x3c>)
 80133f2:	4413      	add	r3, r2
 80133f4:	461a      	mov	r2, r3
 80133f6:	4908      	ldr	r1, [pc, #32]	; (8013418 <sys_timeouts_init+0x40>)
 80133f8:	f000 f810 	bl	801341c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	3301      	adds	r3, #1
 8013400:	607b      	str	r3, [r7, #4]
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	2b02      	cmp	r3, #2
 8013406:	d9ed      	bls.n	80133e4 <sys_timeouts_init+0xc>
  }
}
 8013408:	bf00      	nop
 801340a:	bf00      	nop
 801340c:	3708      	adds	r7, #8
 801340e:	46bd      	mov	sp, r7
 8013410:	bd80      	pop	{r7, pc}
 8013412:	bf00      	nop
 8013414:	0801b0bc 	.word	0x0801b0bc
 8013418:	08013375 	.word	0x08013375

0801341c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b086      	sub	sp, #24
 8013420:	af00      	add	r7, sp, #0
 8013422:	60f8      	str	r0, [r7, #12]
 8013424:	60b9      	str	r1, [r7, #8]
 8013426:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801342e:	d306      	bcc.n	801343e <sys_timeout+0x22>
 8013430:	4b0a      	ldr	r3, [pc, #40]	; (801345c <sys_timeout+0x40>)
 8013432:	f240 1229 	movw	r2, #297	; 0x129
 8013436:	490a      	ldr	r1, [pc, #40]	; (8013460 <sys_timeout+0x44>)
 8013438:	480a      	ldr	r0, [pc, #40]	; (8013464 <sys_timeout+0x48>)
 801343a:	f003 fc03 	bl	8016c44 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801343e:	f7f3 f86d 	bl	800651c <sys_now>
 8013442:	4602      	mov	r2, r0
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	4413      	add	r3, r2
 8013448:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801344a:	687a      	ldr	r2, [r7, #4]
 801344c:	68b9      	ldr	r1, [r7, #8]
 801344e:	6978      	ldr	r0, [r7, #20]
 8013450:	f7ff ff22 	bl	8013298 <sys_timeout_abs>
#endif
}
 8013454:	bf00      	nop
 8013456:	3718      	adds	r7, #24
 8013458:	46bd      	mov	sp, r7
 801345a:	bd80      	pop	{r7, pc}
 801345c:	0801a498 	.word	0x0801a498
 8013460:	0801a534 	.word	0x0801a534
 8013464:	0801a50c 	.word	0x0801a50c

08013468 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b084      	sub	sp, #16
 801346c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801346e:	f7f3 f855 	bl	800651c <sys_now>
 8013472:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013474:	4b17      	ldr	r3, [pc, #92]	; (80134d4 <sys_check_timeouts+0x6c>)
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801347a:	68bb      	ldr	r3, [r7, #8]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d022      	beq.n	80134c6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013480:	68bb      	ldr	r3, [r7, #8]
 8013482:	685b      	ldr	r3, [r3, #4]
 8013484:	68fa      	ldr	r2, [r7, #12]
 8013486:	1ad3      	subs	r3, r2, r3
 8013488:	0fdb      	lsrs	r3, r3, #31
 801348a:	f003 0301 	and.w	r3, r3, #1
 801348e:	b2db      	uxtb	r3, r3
 8013490:	2b00      	cmp	r3, #0
 8013492:	d11a      	bne.n	80134ca <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013494:	68bb      	ldr	r3, [r7, #8]
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	4a0e      	ldr	r2, [pc, #56]	; (80134d4 <sys_check_timeouts+0x6c>)
 801349a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801349c:	68bb      	ldr	r3, [r7, #8]
 801349e:	689b      	ldr	r3, [r3, #8]
 80134a0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80134a2:	68bb      	ldr	r3, [r7, #8]
 80134a4:	68db      	ldr	r3, [r3, #12]
 80134a6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80134a8:	68bb      	ldr	r3, [r7, #8]
 80134aa:	685b      	ldr	r3, [r3, #4]
 80134ac:	4a0a      	ldr	r2, [pc, #40]	; (80134d8 <sys_check_timeouts+0x70>)
 80134ae:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80134b0:	68b9      	ldr	r1, [r7, #8]
 80134b2:	200a      	movs	r0, #10
 80134b4:	f7f8 fe2e 	bl	800c114 <memp_free>
    if (handler != NULL) {
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d0da      	beq.n	8013474 <sys_check_timeouts+0xc>
      handler(arg);
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	6838      	ldr	r0, [r7, #0]
 80134c2:	4798      	blx	r3
  do {
 80134c4:	e7d6      	b.n	8013474 <sys_check_timeouts+0xc>
      return;
 80134c6:	bf00      	nop
 80134c8:	e000      	b.n	80134cc <sys_check_timeouts+0x64>
      return;
 80134ca:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80134cc:	3710      	adds	r7, #16
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bd80      	pop	{r7, pc}
 80134d2:	bf00      	nop
 80134d4:	2000687c 	.word	0x2000687c
 80134d8:	20006880 	.word	0x20006880

080134dc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b082      	sub	sp, #8
 80134e0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80134e2:	4b16      	ldr	r3, [pc, #88]	; (801353c <sys_timeouts_sleeptime+0x60>)
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d102      	bne.n	80134f0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80134ea:	f04f 33ff 	mov.w	r3, #4294967295
 80134ee:	e020      	b.n	8013532 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80134f0:	f7f3 f814 	bl	800651c <sys_now>
 80134f4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80134f6:	4b11      	ldr	r3, [pc, #68]	; (801353c <sys_timeouts_sleeptime+0x60>)
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	685a      	ldr	r2, [r3, #4]
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	1ad3      	subs	r3, r2, r3
 8013500:	0fdb      	lsrs	r3, r3, #31
 8013502:	f003 0301 	and.w	r3, r3, #1
 8013506:	b2db      	uxtb	r3, r3
 8013508:	2b00      	cmp	r3, #0
 801350a:	d001      	beq.n	8013510 <sys_timeouts_sleeptime+0x34>
    return 0;
 801350c:	2300      	movs	r3, #0
 801350e:	e010      	b.n	8013532 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013510:	4b0a      	ldr	r3, [pc, #40]	; (801353c <sys_timeouts_sleeptime+0x60>)
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	685a      	ldr	r2, [r3, #4]
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	1ad3      	subs	r3, r2, r3
 801351a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801351c:	683b      	ldr	r3, [r7, #0]
 801351e:	2b00      	cmp	r3, #0
 8013520:	da06      	bge.n	8013530 <sys_timeouts_sleeptime+0x54>
 8013522:	4b07      	ldr	r3, [pc, #28]	; (8013540 <sys_timeouts_sleeptime+0x64>)
 8013524:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013528:	4906      	ldr	r1, [pc, #24]	; (8013544 <sys_timeouts_sleeptime+0x68>)
 801352a:	4807      	ldr	r0, [pc, #28]	; (8013548 <sys_timeouts_sleeptime+0x6c>)
 801352c:	f003 fb8a 	bl	8016c44 <iprintf>
    return ret;
 8013530:	683b      	ldr	r3, [r7, #0]
  }
}
 8013532:	4618      	mov	r0, r3
 8013534:	3708      	adds	r7, #8
 8013536:	46bd      	mov	sp, r7
 8013538:	bd80      	pop	{r7, pc}
 801353a:	bf00      	nop
 801353c:	2000687c 	.word	0x2000687c
 8013540:	0801a498 	.word	0x0801a498
 8013544:	0801a56c 	.word	0x0801a56c
 8013548:	0801a50c 	.word	0x0801a50c

0801354c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801354c:	b580      	push	{r7, lr}
 801354e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013550:	f003 fb90 	bl	8016c74 <rand>
 8013554:	4603      	mov	r3, r0
 8013556:	b29b      	uxth	r3, r3
 8013558:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801355c:	b29b      	uxth	r3, r3
 801355e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013562:	b29a      	uxth	r2, r3
 8013564:	4b01      	ldr	r3, [pc, #4]	; (801356c <udp_init+0x20>)
 8013566:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013568:	bf00      	nop
 801356a:	bd80      	pop	{r7, pc}
 801356c:	2000001c 	.word	0x2000001c

08013570 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013570:	b480      	push	{r7}
 8013572:	b083      	sub	sp, #12
 8013574:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013576:	2300      	movs	r3, #0
 8013578:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801357a:	4b17      	ldr	r3, [pc, #92]	; (80135d8 <udp_new_port+0x68>)
 801357c:	881b      	ldrh	r3, [r3, #0]
 801357e:	1c5a      	adds	r2, r3, #1
 8013580:	b291      	uxth	r1, r2
 8013582:	4a15      	ldr	r2, [pc, #84]	; (80135d8 <udp_new_port+0x68>)
 8013584:	8011      	strh	r1, [r2, #0]
 8013586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801358a:	4293      	cmp	r3, r2
 801358c:	d103      	bne.n	8013596 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801358e:	4b12      	ldr	r3, [pc, #72]	; (80135d8 <udp_new_port+0x68>)
 8013590:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013594:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013596:	4b11      	ldr	r3, [pc, #68]	; (80135dc <udp_new_port+0x6c>)
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	603b      	str	r3, [r7, #0]
 801359c:	e011      	b.n	80135c2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801359e:	683b      	ldr	r3, [r7, #0]
 80135a0:	8a5a      	ldrh	r2, [r3, #18]
 80135a2:	4b0d      	ldr	r3, [pc, #52]	; (80135d8 <udp_new_port+0x68>)
 80135a4:	881b      	ldrh	r3, [r3, #0]
 80135a6:	429a      	cmp	r2, r3
 80135a8:	d108      	bne.n	80135bc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80135aa:	88fb      	ldrh	r3, [r7, #6]
 80135ac:	3301      	adds	r3, #1
 80135ae:	80fb      	strh	r3, [r7, #6]
 80135b0:	88fb      	ldrh	r3, [r7, #6]
 80135b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80135b6:	d3e0      	bcc.n	801357a <udp_new_port+0xa>
        return 0;
 80135b8:	2300      	movs	r3, #0
 80135ba:	e007      	b.n	80135cc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80135bc:	683b      	ldr	r3, [r7, #0]
 80135be:	68db      	ldr	r3, [r3, #12]
 80135c0:	603b      	str	r3, [r7, #0]
 80135c2:	683b      	ldr	r3, [r7, #0]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d1ea      	bne.n	801359e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80135c8:	4b03      	ldr	r3, [pc, #12]	; (80135d8 <udp_new_port+0x68>)
 80135ca:	881b      	ldrh	r3, [r3, #0]
}
 80135cc:	4618      	mov	r0, r3
 80135ce:	370c      	adds	r7, #12
 80135d0:	46bd      	mov	sp, r7
 80135d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d6:	4770      	bx	lr
 80135d8:	2000001c 	.word	0x2000001c
 80135dc:	2000d3cc 	.word	0x2000d3cc

080135e0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b084      	sub	sp, #16
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	60f8      	str	r0, [r7, #12]
 80135e8:	60b9      	str	r1, [r7, #8]
 80135ea:	4613      	mov	r3, r2
 80135ec:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d105      	bne.n	8013600 <udp_input_local_match+0x20>
 80135f4:	4b27      	ldr	r3, [pc, #156]	; (8013694 <udp_input_local_match+0xb4>)
 80135f6:	2287      	movs	r2, #135	; 0x87
 80135f8:	4927      	ldr	r1, [pc, #156]	; (8013698 <udp_input_local_match+0xb8>)
 80135fa:	4828      	ldr	r0, [pc, #160]	; (801369c <udp_input_local_match+0xbc>)
 80135fc:	f003 fb22 	bl	8016c44 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d105      	bne.n	8013612 <udp_input_local_match+0x32>
 8013606:	4b23      	ldr	r3, [pc, #140]	; (8013694 <udp_input_local_match+0xb4>)
 8013608:	2288      	movs	r2, #136	; 0x88
 801360a:	4925      	ldr	r1, [pc, #148]	; (80136a0 <udp_input_local_match+0xc0>)
 801360c:	4823      	ldr	r0, [pc, #140]	; (801369c <udp_input_local_match+0xbc>)
 801360e:	f003 fb19 	bl	8016c44 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	7a1b      	ldrb	r3, [r3, #8]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d00b      	beq.n	8013632 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	7a1a      	ldrb	r2, [r3, #8]
 801361e:	4b21      	ldr	r3, [pc, #132]	; (80136a4 <udp_input_local_match+0xc4>)
 8013620:	685b      	ldr	r3, [r3, #4]
 8013622:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013626:	3301      	adds	r3, #1
 8013628:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801362a:	429a      	cmp	r2, r3
 801362c:	d001      	beq.n	8013632 <udp_input_local_match+0x52>
    return 0;
 801362e:	2300      	movs	r3, #0
 8013630:	e02b      	b.n	801368a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013632:	79fb      	ldrb	r3, [r7, #7]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d018      	beq.n	801366a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d013      	beq.n	8013666 <udp_input_local_match+0x86>
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	2b00      	cmp	r3, #0
 8013644:	d00f      	beq.n	8013666 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013646:	4b17      	ldr	r3, [pc, #92]	; (80136a4 <udp_input_local_match+0xc4>)
 8013648:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801364a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801364e:	d00a      	beq.n	8013666 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	681a      	ldr	r2, [r3, #0]
 8013654:	4b13      	ldr	r3, [pc, #76]	; (80136a4 <udp_input_local_match+0xc4>)
 8013656:	695b      	ldr	r3, [r3, #20]
 8013658:	405a      	eors	r2, r3
 801365a:	68bb      	ldr	r3, [r7, #8]
 801365c:	3308      	adds	r3, #8
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013662:	2b00      	cmp	r3, #0
 8013664:	d110      	bne.n	8013688 <udp_input_local_match+0xa8>
          return 1;
 8013666:	2301      	movs	r3, #1
 8013668:	e00f      	b.n	801368a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d009      	beq.n	8013684 <udp_input_local_match+0xa4>
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d005      	beq.n	8013684 <udp_input_local_match+0xa4>
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	681a      	ldr	r2, [r3, #0]
 801367c:	4b09      	ldr	r3, [pc, #36]	; (80136a4 <udp_input_local_match+0xc4>)
 801367e:	695b      	ldr	r3, [r3, #20]
 8013680:	429a      	cmp	r2, r3
 8013682:	d101      	bne.n	8013688 <udp_input_local_match+0xa8>
        return 1;
 8013684:	2301      	movs	r3, #1
 8013686:	e000      	b.n	801368a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013688:	2300      	movs	r3, #0
}
 801368a:	4618      	mov	r0, r3
 801368c:	3710      	adds	r7, #16
 801368e:	46bd      	mov	sp, r7
 8013690:	bd80      	pop	{r7, pc}
 8013692:	bf00      	nop
 8013694:	0801a580 	.word	0x0801a580
 8013698:	0801a5b0 	.word	0x0801a5b0
 801369c:	0801a5d4 	.word	0x0801a5d4
 80136a0:	0801a5fc 	.word	0x0801a5fc
 80136a4:	20009ca0 	.word	0x20009ca0

080136a8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80136a8:	b590      	push	{r4, r7, lr}
 80136aa:	b08d      	sub	sp, #52	; 0x34
 80136ac:	af02      	add	r7, sp, #8
 80136ae:	6078      	str	r0, [r7, #4]
 80136b0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80136b2:	2300      	movs	r3, #0
 80136b4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d105      	bne.n	80136c8 <udp_input+0x20>
 80136bc:	4b7c      	ldr	r3, [pc, #496]	; (80138b0 <udp_input+0x208>)
 80136be:	22cf      	movs	r2, #207	; 0xcf
 80136c0:	497c      	ldr	r1, [pc, #496]	; (80138b4 <udp_input+0x20c>)
 80136c2:	487d      	ldr	r0, [pc, #500]	; (80138b8 <udp_input+0x210>)
 80136c4:	f003 fabe 	bl	8016c44 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80136c8:	683b      	ldr	r3, [r7, #0]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d105      	bne.n	80136da <udp_input+0x32>
 80136ce:	4b78      	ldr	r3, [pc, #480]	; (80138b0 <udp_input+0x208>)
 80136d0:	22d0      	movs	r2, #208	; 0xd0
 80136d2:	497a      	ldr	r1, [pc, #488]	; (80138bc <udp_input+0x214>)
 80136d4:	4878      	ldr	r0, [pc, #480]	; (80138b8 <udp_input+0x210>)
 80136d6:	f003 fab5 	bl	8016c44 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	895b      	ldrh	r3, [r3, #10]
 80136de:	2b07      	cmp	r3, #7
 80136e0:	d803      	bhi.n	80136ea <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80136e2:	6878      	ldr	r0, [r7, #4]
 80136e4:	f7f9 fb56 	bl	800cd94 <pbuf_free>
    goto end;
 80136e8:	e0de      	b.n	80138a8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	685b      	ldr	r3, [r3, #4]
 80136ee:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80136f0:	4b73      	ldr	r3, [pc, #460]	; (80138c0 <udp_input+0x218>)
 80136f2:	695b      	ldr	r3, [r3, #20]
 80136f4:	4a72      	ldr	r2, [pc, #456]	; (80138c0 <udp_input+0x218>)
 80136f6:	6812      	ldr	r2, [r2, #0]
 80136f8:	4611      	mov	r1, r2
 80136fa:	4618      	mov	r0, r3
 80136fc:	f001 ff80 	bl	8015600 <ip4_addr_isbroadcast_u32>
 8013700:	4603      	mov	r3, r0
 8013702:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013704:	697b      	ldr	r3, [r7, #20]
 8013706:	881b      	ldrh	r3, [r3, #0]
 8013708:	b29b      	uxth	r3, r3
 801370a:	4618      	mov	r0, r3
 801370c:	f7f7 fffa 	bl	800b704 <lwip_htons>
 8013710:	4603      	mov	r3, r0
 8013712:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013714:	697b      	ldr	r3, [r7, #20]
 8013716:	885b      	ldrh	r3, [r3, #2]
 8013718:	b29b      	uxth	r3, r3
 801371a:	4618      	mov	r0, r3
 801371c:	f7f7 fff2 	bl	800b704 <lwip_htons>
 8013720:	4603      	mov	r3, r0
 8013722:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013724:	2300      	movs	r3, #0
 8013726:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013728:	2300      	movs	r3, #0
 801372a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801372c:	2300      	movs	r3, #0
 801372e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013730:	4b64      	ldr	r3, [pc, #400]	; (80138c4 <udp_input+0x21c>)
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	627b      	str	r3, [r7, #36]	; 0x24
 8013736:	e054      	b.n	80137e2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801373a:	8a5b      	ldrh	r3, [r3, #18]
 801373c:	89fa      	ldrh	r2, [r7, #14]
 801373e:	429a      	cmp	r2, r3
 8013740:	d14a      	bne.n	80137d8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013742:	7cfb      	ldrb	r3, [r7, #19]
 8013744:	461a      	mov	r2, r3
 8013746:	6839      	ldr	r1, [r7, #0]
 8013748:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801374a:	f7ff ff49 	bl	80135e0 <udp_input_local_match>
 801374e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013750:	2b00      	cmp	r3, #0
 8013752:	d041      	beq.n	80137d8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013756:	7c1b      	ldrb	r3, [r3, #16]
 8013758:	f003 0304 	and.w	r3, r3, #4
 801375c:	2b00      	cmp	r3, #0
 801375e:	d11d      	bne.n	801379c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013760:	69fb      	ldr	r3, [r7, #28]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d102      	bne.n	801376c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013768:	61fb      	str	r3, [r7, #28]
 801376a:	e017      	b.n	801379c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801376c:	7cfb      	ldrb	r3, [r7, #19]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d014      	beq.n	801379c <udp_input+0xf4>
 8013772:	4b53      	ldr	r3, [pc, #332]	; (80138c0 <udp_input+0x218>)
 8013774:	695b      	ldr	r3, [r3, #20]
 8013776:	f1b3 3fff 	cmp.w	r3, #4294967295
 801377a:	d10f      	bne.n	801379c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801377c:	69fb      	ldr	r3, [r7, #28]
 801377e:	681a      	ldr	r2, [r3, #0]
 8013780:	683b      	ldr	r3, [r7, #0]
 8013782:	3304      	adds	r3, #4
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	429a      	cmp	r2, r3
 8013788:	d008      	beq.n	801379c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801378c:	681a      	ldr	r2, [r3, #0]
 801378e:	683b      	ldr	r3, [r7, #0]
 8013790:	3304      	adds	r3, #4
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	429a      	cmp	r2, r3
 8013796:	d101      	bne.n	801379c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801379a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801379e:	8a9b      	ldrh	r3, [r3, #20]
 80137a0:	8a3a      	ldrh	r2, [r7, #16]
 80137a2:	429a      	cmp	r2, r3
 80137a4:	d118      	bne.n	80137d8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80137a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137a8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d005      	beq.n	80137ba <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80137ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b0:	685a      	ldr	r2, [r3, #4]
 80137b2:	4b43      	ldr	r3, [pc, #268]	; (80138c0 <udp_input+0x218>)
 80137b4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80137b6:	429a      	cmp	r2, r3
 80137b8:	d10e      	bne.n	80137d8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80137ba:	6a3b      	ldr	r3, [r7, #32]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d014      	beq.n	80137ea <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80137c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137c2:	68da      	ldr	r2, [r3, #12]
 80137c4:	6a3b      	ldr	r3, [r7, #32]
 80137c6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80137c8:	4b3e      	ldr	r3, [pc, #248]	; (80138c4 <udp_input+0x21c>)
 80137ca:	681a      	ldr	r2, [r3, #0]
 80137cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ce:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80137d0:	4a3c      	ldr	r2, [pc, #240]	; (80138c4 <udp_input+0x21c>)
 80137d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137d4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80137d6:	e008      	b.n	80137ea <udp_input+0x142>
      }
    }

    prev = pcb;
 80137d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137da:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80137dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137de:	68db      	ldr	r3, [r3, #12]
 80137e0:	627b      	str	r3, [r7, #36]	; 0x24
 80137e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d1a7      	bne.n	8013738 <udp_input+0x90>
 80137e8:	e000      	b.n	80137ec <udp_input+0x144>
        break;
 80137ea:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80137ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d101      	bne.n	80137f6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80137f2:	69fb      	ldr	r3, [r7, #28]
 80137f4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80137f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d002      	beq.n	8013802 <udp_input+0x15a>
    for_us = 1;
 80137fc:	2301      	movs	r3, #1
 80137fe:	76fb      	strb	r3, [r7, #27]
 8013800:	e00a      	b.n	8013818 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	3304      	adds	r3, #4
 8013806:	681a      	ldr	r2, [r3, #0]
 8013808:	4b2d      	ldr	r3, [pc, #180]	; (80138c0 <udp_input+0x218>)
 801380a:	695b      	ldr	r3, [r3, #20]
 801380c:	429a      	cmp	r2, r3
 801380e:	bf0c      	ite	eq
 8013810:	2301      	moveq	r3, #1
 8013812:	2300      	movne	r3, #0
 8013814:	b2db      	uxtb	r3, r3
 8013816:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013818:	7efb      	ldrb	r3, [r7, #27]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d041      	beq.n	80138a2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801381e:	2108      	movs	r1, #8
 8013820:	6878      	ldr	r0, [r7, #4]
 8013822:	f7f9 fa31 	bl	800cc88 <pbuf_remove_header>
 8013826:	4603      	mov	r3, r0
 8013828:	2b00      	cmp	r3, #0
 801382a:	d00a      	beq.n	8013842 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801382c:	4b20      	ldr	r3, [pc, #128]	; (80138b0 <udp_input+0x208>)
 801382e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013832:	4925      	ldr	r1, [pc, #148]	; (80138c8 <udp_input+0x220>)
 8013834:	4820      	ldr	r0, [pc, #128]	; (80138b8 <udp_input+0x210>)
 8013836:	f003 fa05 	bl	8016c44 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801383a:	6878      	ldr	r0, [r7, #4]
 801383c:	f7f9 faaa 	bl	800cd94 <pbuf_free>
      goto end;
 8013840:	e032      	b.n	80138a8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013844:	2b00      	cmp	r3, #0
 8013846:	d012      	beq.n	801386e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801384a:	699b      	ldr	r3, [r3, #24]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d00a      	beq.n	8013866 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013852:	699c      	ldr	r4, [r3, #24]
 8013854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013856:	69d8      	ldr	r0, [r3, #28]
 8013858:	8a3b      	ldrh	r3, [r7, #16]
 801385a:	9300      	str	r3, [sp, #0]
 801385c:	4b1b      	ldr	r3, [pc, #108]	; (80138cc <udp_input+0x224>)
 801385e:	687a      	ldr	r2, [r7, #4]
 8013860:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013862:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013864:	e021      	b.n	80138aa <udp_input+0x202>
        pbuf_free(p);
 8013866:	6878      	ldr	r0, [r7, #4]
 8013868:	f7f9 fa94 	bl	800cd94 <pbuf_free>
        goto end;
 801386c:	e01c      	b.n	80138a8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801386e:	7cfb      	ldrb	r3, [r7, #19]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d112      	bne.n	801389a <udp_input+0x1f2>
 8013874:	4b12      	ldr	r3, [pc, #72]	; (80138c0 <udp_input+0x218>)
 8013876:	695b      	ldr	r3, [r3, #20]
 8013878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801387c:	2be0      	cmp	r3, #224	; 0xe0
 801387e:	d00c      	beq.n	801389a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013880:	4b0f      	ldr	r3, [pc, #60]	; (80138c0 <udp_input+0x218>)
 8013882:	899b      	ldrh	r3, [r3, #12]
 8013884:	3308      	adds	r3, #8
 8013886:	b29b      	uxth	r3, r3
 8013888:	b21b      	sxth	r3, r3
 801388a:	4619      	mov	r1, r3
 801388c:	6878      	ldr	r0, [r7, #4]
 801388e:	f7f9 fa6e 	bl	800cd6e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013892:	2103      	movs	r1, #3
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	f001 fb93 	bl	8014fc0 <icmp_dest_unreach>
      pbuf_free(p);
 801389a:	6878      	ldr	r0, [r7, #4]
 801389c:	f7f9 fa7a 	bl	800cd94 <pbuf_free>
  return;
 80138a0:	e003      	b.n	80138aa <udp_input+0x202>
    pbuf_free(p);
 80138a2:	6878      	ldr	r0, [r7, #4]
 80138a4:	f7f9 fa76 	bl	800cd94 <pbuf_free>
  return;
 80138a8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80138aa:	372c      	adds	r7, #44	; 0x2c
 80138ac:	46bd      	mov	sp, r7
 80138ae:	bd90      	pop	{r4, r7, pc}
 80138b0:	0801a580 	.word	0x0801a580
 80138b4:	0801a624 	.word	0x0801a624
 80138b8:	0801a5d4 	.word	0x0801a5d4
 80138bc:	0801a63c 	.word	0x0801a63c
 80138c0:	20009ca0 	.word	0x20009ca0
 80138c4:	2000d3cc 	.word	0x2000d3cc
 80138c8:	0801a658 	.word	0x0801a658
 80138cc:	20009cb0 	.word	0x20009cb0

080138d0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b082      	sub	sp, #8
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	6078      	str	r0, [r7, #4]
 80138d8:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d109      	bne.n	80138f4 <udp_send+0x24>
 80138e0:	4b11      	ldr	r3, [pc, #68]	; (8013928 <udp_send+0x58>)
 80138e2:	f240 12d5 	movw	r2, #469	; 0x1d5
 80138e6:	4911      	ldr	r1, [pc, #68]	; (801392c <udp_send+0x5c>)
 80138e8:	4811      	ldr	r0, [pc, #68]	; (8013930 <udp_send+0x60>)
 80138ea:	f003 f9ab 	bl	8016c44 <iprintf>
 80138ee:	f06f 030f 	mvn.w	r3, #15
 80138f2:	e015      	b.n	8013920 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80138f4:	683b      	ldr	r3, [r7, #0]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d109      	bne.n	801390e <udp_send+0x3e>
 80138fa:	4b0b      	ldr	r3, [pc, #44]	; (8013928 <udp_send+0x58>)
 80138fc:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8013900:	490c      	ldr	r1, [pc, #48]	; (8013934 <udp_send+0x64>)
 8013902:	480b      	ldr	r0, [pc, #44]	; (8013930 <udp_send+0x60>)
 8013904:	f003 f99e 	bl	8016c44 <iprintf>
 8013908:	f06f 030f 	mvn.w	r3, #15
 801390c:	e008      	b.n	8013920 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	1d1a      	adds	r2, r3, #4
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	8a9b      	ldrh	r3, [r3, #20]
 8013916:	6839      	ldr	r1, [r7, #0]
 8013918:	6878      	ldr	r0, [r7, #4]
 801391a:	f000 f80d 	bl	8013938 <udp_sendto>
 801391e:	4603      	mov	r3, r0
}
 8013920:	4618      	mov	r0, r3
 8013922:	3708      	adds	r7, #8
 8013924:	46bd      	mov	sp, r7
 8013926:	bd80      	pop	{r7, pc}
 8013928:	0801a580 	.word	0x0801a580
 801392c:	0801a674 	.word	0x0801a674
 8013930:	0801a5d4 	.word	0x0801a5d4
 8013934:	0801a68c 	.word	0x0801a68c

08013938 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8013938:	b580      	push	{r7, lr}
 801393a:	b088      	sub	sp, #32
 801393c:	af02      	add	r7, sp, #8
 801393e:	60f8      	str	r0, [r7, #12]
 8013940:	60b9      	str	r1, [r7, #8]
 8013942:	607a      	str	r2, [r7, #4]
 8013944:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d109      	bne.n	8013960 <udp_sendto+0x28>
 801394c:	4b23      	ldr	r3, [pc, #140]	; (80139dc <udp_sendto+0xa4>)
 801394e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013952:	4923      	ldr	r1, [pc, #140]	; (80139e0 <udp_sendto+0xa8>)
 8013954:	4823      	ldr	r0, [pc, #140]	; (80139e4 <udp_sendto+0xac>)
 8013956:	f003 f975 	bl	8016c44 <iprintf>
 801395a:	f06f 030f 	mvn.w	r3, #15
 801395e:	e038      	b.n	80139d2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8013960:	68bb      	ldr	r3, [r7, #8]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d109      	bne.n	801397a <udp_sendto+0x42>
 8013966:	4b1d      	ldr	r3, [pc, #116]	; (80139dc <udp_sendto+0xa4>)
 8013968:	f240 2219 	movw	r2, #537	; 0x219
 801396c:	491e      	ldr	r1, [pc, #120]	; (80139e8 <udp_sendto+0xb0>)
 801396e:	481d      	ldr	r0, [pc, #116]	; (80139e4 <udp_sendto+0xac>)
 8013970:	f003 f968 	bl	8016c44 <iprintf>
 8013974:	f06f 030f 	mvn.w	r3, #15
 8013978:	e02b      	b.n	80139d2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d109      	bne.n	8013994 <udp_sendto+0x5c>
 8013980:	4b16      	ldr	r3, [pc, #88]	; (80139dc <udp_sendto+0xa4>)
 8013982:	f240 221a 	movw	r2, #538	; 0x21a
 8013986:	4919      	ldr	r1, [pc, #100]	; (80139ec <udp_sendto+0xb4>)
 8013988:	4816      	ldr	r0, [pc, #88]	; (80139e4 <udp_sendto+0xac>)
 801398a:	f003 f95b 	bl	8016c44 <iprintf>
 801398e:	f06f 030f 	mvn.w	r3, #15
 8013992:	e01e      	b.n	80139d2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	7a1b      	ldrb	r3, [r3, #8]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d006      	beq.n	80139aa <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	7a1b      	ldrb	r3, [r3, #8]
 80139a0:	4618      	mov	r0, r3
 80139a2:	f7f8 fe69 	bl	800c678 <netif_get_by_index>
 80139a6:	6178      	str	r0, [r7, #20]
 80139a8:	e003      	b.n	80139b2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80139aa:	6878      	ldr	r0, [r7, #4]
 80139ac:	f001 fb92 	bl	80150d4 <ip4_route>
 80139b0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80139b2:	697b      	ldr	r3, [r7, #20]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d102      	bne.n	80139be <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80139b8:	f06f 0303 	mvn.w	r3, #3
 80139bc:	e009      	b.n	80139d2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80139be:	887a      	ldrh	r2, [r7, #2]
 80139c0:	697b      	ldr	r3, [r7, #20]
 80139c2:	9300      	str	r3, [sp, #0]
 80139c4:	4613      	mov	r3, r2
 80139c6:	687a      	ldr	r2, [r7, #4]
 80139c8:	68b9      	ldr	r1, [r7, #8]
 80139ca:	68f8      	ldr	r0, [r7, #12]
 80139cc:	f000 f810 	bl	80139f0 <udp_sendto_if>
 80139d0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80139d2:	4618      	mov	r0, r3
 80139d4:	3718      	adds	r7, #24
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bd80      	pop	{r7, pc}
 80139da:	bf00      	nop
 80139dc:	0801a580 	.word	0x0801a580
 80139e0:	0801a6a4 	.word	0x0801a6a4
 80139e4:	0801a5d4 	.word	0x0801a5d4
 80139e8:	0801a6bc 	.word	0x0801a6bc
 80139ec:	0801a6d8 	.word	0x0801a6d8

080139f0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80139f0:	b580      	push	{r7, lr}
 80139f2:	b088      	sub	sp, #32
 80139f4:	af02      	add	r7, sp, #8
 80139f6:	60f8      	str	r0, [r7, #12]
 80139f8:	60b9      	str	r1, [r7, #8]
 80139fa:	607a      	str	r2, [r7, #4]
 80139fc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d109      	bne.n	8013a18 <udp_sendto_if+0x28>
 8013a04:	4b2e      	ldr	r3, [pc, #184]	; (8013ac0 <udp_sendto_if+0xd0>)
 8013a06:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013a0a:	492e      	ldr	r1, [pc, #184]	; (8013ac4 <udp_sendto_if+0xd4>)
 8013a0c:	482e      	ldr	r0, [pc, #184]	; (8013ac8 <udp_sendto_if+0xd8>)
 8013a0e:	f003 f919 	bl	8016c44 <iprintf>
 8013a12:	f06f 030f 	mvn.w	r3, #15
 8013a16:	e04f      	b.n	8013ab8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013a18:	68bb      	ldr	r3, [r7, #8]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d109      	bne.n	8013a32 <udp_sendto_if+0x42>
 8013a1e:	4b28      	ldr	r3, [pc, #160]	; (8013ac0 <udp_sendto_if+0xd0>)
 8013a20:	f240 2281 	movw	r2, #641	; 0x281
 8013a24:	4929      	ldr	r1, [pc, #164]	; (8013acc <udp_sendto_if+0xdc>)
 8013a26:	4828      	ldr	r0, [pc, #160]	; (8013ac8 <udp_sendto_if+0xd8>)
 8013a28:	f003 f90c 	bl	8016c44 <iprintf>
 8013a2c:	f06f 030f 	mvn.w	r3, #15
 8013a30:	e042      	b.n	8013ab8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d109      	bne.n	8013a4c <udp_sendto_if+0x5c>
 8013a38:	4b21      	ldr	r3, [pc, #132]	; (8013ac0 <udp_sendto_if+0xd0>)
 8013a3a:	f240 2282 	movw	r2, #642	; 0x282
 8013a3e:	4924      	ldr	r1, [pc, #144]	; (8013ad0 <udp_sendto_if+0xe0>)
 8013a40:	4821      	ldr	r0, [pc, #132]	; (8013ac8 <udp_sendto_if+0xd8>)
 8013a42:	f003 f8ff 	bl	8016c44 <iprintf>
 8013a46:	f06f 030f 	mvn.w	r3, #15
 8013a4a:	e035      	b.n	8013ab8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013a4c:	6a3b      	ldr	r3, [r7, #32]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d109      	bne.n	8013a66 <udp_sendto_if+0x76>
 8013a52:	4b1b      	ldr	r3, [pc, #108]	; (8013ac0 <udp_sendto_if+0xd0>)
 8013a54:	f240 2283 	movw	r2, #643	; 0x283
 8013a58:	491e      	ldr	r1, [pc, #120]	; (8013ad4 <udp_sendto_if+0xe4>)
 8013a5a:	481b      	ldr	r0, [pc, #108]	; (8013ac8 <udp_sendto_if+0xd8>)
 8013a5c:	f003 f8f2 	bl	8016c44 <iprintf>
 8013a60:	f06f 030f 	mvn.w	r3, #15
 8013a64:	e028      	b.n	8013ab8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d009      	beq.n	8013a80 <udp_sendto_if+0x90>
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d005      	beq.n	8013a80 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013a7c:	2be0      	cmp	r3, #224	; 0xe0
 8013a7e:	d103      	bne.n	8013a88 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013a80:	6a3b      	ldr	r3, [r7, #32]
 8013a82:	3304      	adds	r3, #4
 8013a84:	617b      	str	r3, [r7, #20]
 8013a86:	e00b      	b.n	8013aa0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	681a      	ldr	r2, [r3, #0]
 8013a8c:	6a3b      	ldr	r3, [r7, #32]
 8013a8e:	3304      	adds	r3, #4
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	429a      	cmp	r2, r3
 8013a94:	d002      	beq.n	8013a9c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013a96:	f06f 0303 	mvn.w	r3, #3
 8013a9a:	e00d      	b.n	8013ab8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013aa0:	887a      	ldrh	r2, [r7, #2]
 8013aa2:	697b      	ldr	r3, [r7, #20]
 8013aa4:	9301      	str	r3, [sp, #4]
 8013aa6:	6a3b      	ldr	r3, [r7, #32]
 8013aa8:	9300      	str	r3, [sp, #0]
 8013aaa:	4613      	mov	r3, r2
 8013aac:	687a      	ldr	r2, [r7, #4]
 8013aae:	68b9      	ldr	r1, [r7, #8]
 8013ab0:	68f8      	ldr	r0, [r7, #12]
 8013ab2:	f000 f811 	bl	8013ad8 <udp_sendto_if_src>
 8013ab6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013ab8:	4618      	mov	r0, r3
 8013aba:	3718      	adds	r7, #24
 8013abc:	46bd      	mov	sp, r7
 8013abe:	bd80      	pop	{r7, pc}
 8013ac0:	0801a580 	.word	0x0801a580
 8013ac4:	0801a6f4 	.word	0x0801a6f4
 8013ac8:	0801a5d4 	.word	0x0801a5d4
 8013acc:	0801a710 	.word	0x0801a710
 8013ad0:	0801a72c 	.word	0x0801a72c
 8013ad4:	0801a74c 	.word	0x0801a74c

08013ad8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b08c      	sub	sp, #48	; 0x30
 8013adc:	af04      	add	r7, sp, #16
 8013ade:	60f8      	str	r0, [r7, #12]
 8013ae0:	60b9      	str	r1, [r7, #8]
 8013ae2:	607a      	str	r2, [r7, #4]
 8013ae4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d109      	bne.n	8013b00 <udp_sendto_if_src+0x28>
 8013aec:	4b65      	ldr	r3, [pc, #404]	; (8013c84 <udp_sendto_if_src+0x1ac>)
 8013aee:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013af2:	4965      	ldr	r1, [pc, #404]	; (8013c88 <udp_sendto_if_src+0x1b0>)
 8013af4:	4865      	ldr	r0, [pc, #404]	; (8013c8c <udp_sendto_if_src+0x1b4>)
 8013af6:	f003 f8a5 	bl	8016c44 <iprintf>
 8013afa:	f06f 030f 	mvn.w	r3, #15
 8013afe:	e0bc      	b.n	8013c7a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013b00:	68bb      	ldr	r3, [r7, #8]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d109      	bne.n	8013b1a <udp_sendto_if_src+0x42>
 8013b06:	4b5f      	ldr	r3, [pc, #380]	; (8013c84 <udp_sendto_if_src+0x1ac>)
 8013b08:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013b0c:	4960      	ldr	r1, [pc, #384]	; (8013c90 <udp_sendto_if_src+0x1b8>)
 8013b0e:	485f      	ldr	r0, [pc, #380]	; (8013c8c <udp_sendto_if_src+0x1b4>)
 8013b10:	f003 f898 	bl	8016c44 <iprintf>
 8013b14:	f06f 030f 	mvn.w	r3, #15
 8013b18:	e0af      	b.n	8013c7a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d109      	bne.n	8013b34 <udp_sendto_if_src+0x5c>
 8013b20:	4b58      	ldr	r3, [pc, #352]	; (8013c84 <udp_sendto_if_src+0x1ac>)
 8013b22:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013b26:	495b      	ldr	r1, [pc, #364]	; (8013c94 <udp_sendto_if_src+0x1bc>)
 8013b28:	4858      	ldr	r0, [pc, #352]	; (8013c8c <udp_sendto_if_src+0x1b4>)
 8013b2a:	f003 f88b 	bl	8016c44 <iprintf>
 8013b2e:	f06f 030f 	mvn.w	r3, #15
 8013b32:	e0a2      	b.n	8013c7a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d109      	bne.n	8013b4e <udp_sendto_if_src+0x76>
 8013b3a:	4b52      	ldr	r3, [pc, #328]	; (8013c84 <udp_sendto_if_src+0x1ac>)
 8013b3c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013b40:	4955      	ldr	r1, [pc, #340]	; (8013c98 <udp_sendto_if_src+0x1c0>)
 8013b42:	4852      	ldr	r0, [pc, #328]	; (8013c8c <udp_sendto_if_src+0x1b4>)
 8013b44:	f003 f87e 	bl	8016c44 <iprintf>
 8013b48:	f06f 030f 	mvn.w	r3, #15
 8013b4c:	e095      	b.n	8013c7a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d109      	bne.n	8013b68 <udp_sendto_if_src+0x90>
 8013b54:	4b4b      	ldr	r3, [pc, #300]	; (8013c84 <udp_sendto_if_src+0x1ac>)
 8013b56:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013b5a:	4950      	ldr	r1, [pc, #320]	; (8013c9c <udp_sendto_if_src+0x1c4>)
 8013b5c:	484b      	ldr	r0, [pc, #300]	; (8013c8c <udp_sendto_if_src+0x1b4>)
 8013b5e:	f003 f871 	bl	8016c44 <iprintf>
 8013b62:	f06f 030f 	mvn.w	r3, #15
 8013b66:	e088      	b.n	8013c7a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	8a5b      	ldrh	r3, [r3, #18]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d10f      	bne.n	8013b90 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013b70:	68f9      	ldr	r1, [r7, #12]
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	8a5b      	ldrh	r3, [r3, #18]
 8013b76:	461a      	mov	r2, r3
 8013b78:	68f8      	ldr	r0, [r7, #12]
 8013b7a:	f000 f893 	bl	8013ca4 <udp_bind>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013b82:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d002      	beq.n	8013b90 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013b8a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013b8e:	e074      	b.n	8013c7a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013b90:	68bb      	ldr	r3, [r7, #8]
 8013b92:	891b      	ldrh	r3, [r3, #8]
 8013b94:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013b98:	4293      	cmp	r3, r2
 8013b9a:	d902      	bls.n	8013ba2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8013ba0:	e06b      	b.n	8013c7a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013ba2:	2108      	movs	r1, #8
 8013ba4:	68b8      	ldr	r0, [r7, #8]
 8013ba6:	f7f9 f85f 	bl	800cc68 <pbuf_add_header>
 8013baa:	4603      	mov	r3, r0
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d015      	beq.n	8013bdc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013bb0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013bb4:	2108      	movs	r1, #8
 8013bb6:	2022      	movs	r0, #34	; 0x22
 8013bb8:	f7f8 fe08 	bl	800c7cc <pbuf_alloc>
 8013bbc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013bbe:	69fb      	ldr	r3, [r7, #28]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d102      	bne.n	8013bca <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8013bc8:	e057      	b.n	8013c7a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013bca:	68bb      	ldr	r3, [r7, #8]
 8013bcc:	891b      	ldrh	r3, [r3, #8]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d006      	beq.n	8013be0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013bd2:	68b9      	ldr	r1, [r7, #8]
 8013bd4:	69f8      	ldr	r0, [r7, #28]
 8013bd6:	f7f9 fa01 	bl	800cfdc <pbuf_chain>
 8013bda:	e001      	b.n	8013be0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013bdc:	68bb      	ldr	r3, [r7, #8]
 8013bde:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013be0:	69fb      	ldr	r3, [r7, #28]
 8013be2:	895b      	ldrh	r3, [r3, #10]
 8013be4:	2b07      	cmp	r3, #7
 8013be6:	d806      	bhi.n	8013bf6 <udp_sendto_if_src+0x11e>
 8013be8:	4b26      	ldr	r3, [pc, #152]	; (8013c84 <udp_sendto_if_src+0x1ac>)
 8013bea:	f240 320d 	movw	r2, #781	; 0x30d
 8013bee:	492c      	ldr	r1, [pc, #176]	; (8013ca0 <udp_sendto_if_src+0x1c8>)
 8013bf0:	4826      	ldr	r0, [pc, #152]	; (8013c8c <udp_sendto_if_src+0x1b4>)
 8013bf2:	f003 f827 	bl	8016c44 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013bf6:	69fb      	ldr	r3, [r7, #28]
 8013bf8:	685b      	ldr	r3, [r3, #4]
 8013bfa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	8a5b      	ldrh	r3, [r3, #18]
 8013c00:	4618      	mov	r0, r3
 8013c02:	f7f7 fd7f 	bl	800b704 <lwip_htons>
 8013c06:	4603      	mov	r3, r0
 8013c08:	461a      	mov	r2, r3
 8013c0a:	697b      	ldr	r3, [r7, #20]
 8013c0c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013c0e:	887b      	ldrh	r3, [r7, #2]
 8013c10:	4618      	mov	r0, r3
 8013c12:	f7f7 fd77 	bl	800b704 <lwip_htons>
 8013c16:	4603      	mov	r3, r0
 8013c18:	461a      	mov	r2, r3
 8013c1a:	697b      	ldr	r3, [r7, #20]
 8013c1c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013c1e:	697b      	ldr	r3, [r7, #20]
 8013c20:	2200      	movs	r2, #0
 8013c22:	719a      	strb	r2, [r3, #6]
 8013c24:	2200      	movs	r2, #0
 8013c26:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013c28:	69fb      	ldr	r3, [r7, #28]
 8013c2a:	891b      	ldrh	r3, [r3, #8]
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	f7f7 fd69 	bl	800b704 <lwip_htons>
 8013c32:	4603      	mov	r3, r0
 8013c34:	461a      	mov	r2, r3
 8013c36:	697b      	ldr	r3, [r7, #20]
 8013c38:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013c3a:	2311      	movs	r3, #17
 8013c3c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	7adb      	ldrb	r3, [r3, #11]
 8013c42:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	7a9b      	ldrb	r3, [r3, #10]
 8013c48:	7cb9      	ldrb	r1, [r7, #18]
 8013c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c4c:	9202      	str	r2, [sp, #8]
 8013c4e:	7cfa      	ldrb	r2, [r7, #19]
 8013c50:	9201      	str	r2, [sp, #4]
 8013c52:	9300      	str	r3, [sp, #0]
 8013c54:	460b      	mov	r3, r1
 8013c56:	687a      	ldr	r2, [r7, #4]
 8013c58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013c5a:	69f8      	ldr	r0, [r7, #28]
 8013c5c:	f001 fc22 	bl	80154a4 <ip4_output_if_src>
 8013c60:	4603      	mov	r3, r0
 8013c62:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013c64:	69fa      	ldr	r2, [r7, #28]
 8013c66:	68bb      	ldr	r3, [r7, #8]
 8013c68:	429a      	cmp	r2, r3
 8013c6a:	d004      	beq.n	8013c76 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013c6c:	69f8      	ldr	r0, [r7, #28]
 8013c6e:	f7f9 f891 	bl	800cd94 <pbuf_free>
    q = NULL;
 8013c72:	2300      	movs	r3, #0
 8013c74:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013c76:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	3720      	adds	r7, #32
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	bd80      	pop	{r7, pc}
 8013c82:	bf00      	nop
 8013c84:	0801a580 	.word	0x0801a580
 8013c88:	0801a76c 	.word	0x0801a76c
 8013c8c:	0801a5d4 	.word	0x0801a5d4
 8013c90:	0801a78c 	.word	0x0801a78c
 8013c94:	0801a7ac 	.word	0x0801a7ac
 8013c98:	0801a7d0 	.word	0x0801a7d0
 8013c9c:	0801a7f4 	.word	0x0801a7f4
 8013ca0:	0801a818 	.word	0x0801a818

08013ca4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013ca4:	b580      	push	{r7, lr}
 8013ca6:	b086      	sub	sp, #24
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	60f8      	str	r0, [r7, #12]
 8013cac:	60b9      	str	r1, [r7, #8]
 8013cae:	4613      	mov	r3, r2
 8013cb0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013cb2:	68bb      	ldr	r3, [r7, #8]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d101      	bne.n	8013cbc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013cb8:	4b39      	ldr	r3, [pc, #228]	; (8013da0 <udp_bind+0xfc>)
 8013cba:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d109      	bne.n	8013cd6 <udp_bind+0x32>
 8013cc2:	4b38      	ldr	r3, [pc, #224]	; (8013da4 <udp_bind+0x100>)
 8013cc4:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013cc8:	4937      	ldr	r1, [pc, #220]	; (8013da8 <udp_bind+0x104>)
 8013cca:	4838      	ldr	r0, [pc, #224]	; (8013dac <udp_bind+0x108>)
 8013ccc:	f002 ffba 	bl	8016c44 <iprintf>
 8013cd0:	f06f 030f 	mvn.w	r3, #15
 8013cd4:	e060      	b.n	8013d98 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013cda:	4b35      	ldr	r3, [pc, #212]	; (8013db0 <udp_bind+0x10c>)
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	617b      	str	r3, [r7, #20]
 8013ce0:	e009      	b.n	8013cf6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013ce2:	68fa      	ldr	r2, [r7, #12]
 8013ce4:	697b      	ldr	r3, [r7, #20]
 8013ce6:	429a      	cmp	r2, r3
 8013ce8:	d102      	bne.n	8013cf0 <udp_bind+0x4c>
      rebind = 1;
 8013cea:	2301      	movs	r3, #1
 8013cec:	74fb      	strb	r3, [r7, #19]
      break;
 8013cee:	e005      	b.n	8013cfc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013cf0:	697b      	ldr	r3, [r7, #20]
 8013cf2:	68db      	ldr	r3, [r3, #12]
 8013cf4:	617b      	str	r3, [r7, #20]
 8013cf6:	697b      	ldr	r3, [r7, #20]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d1f2      	bne.n	8013ce2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013cfc:	88fb      	ldrh	r3, [r7, #6]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d109      	bne.n	8013d16 <udp_bind+0x72>
    port = udp_new_port();
 8013d02:	f7ff fc35 	bl	8013570 <udp_new_port>
 8013d06:	4603      	mov	r3, r0
 8013d08:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013d0a:	88fb      	ldrh	r3, [r7, #6]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d12c      	bne.n	8013d6a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013d10:	f06f 0307 	mvn.w	r3, #7
 8013d14:	e040      	b.n	8013d98 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013d16:	4b26      	ldr	r3, [pc, #152]	; (8013db0 <udp_bind+0x10c>)
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	617b      	str	r3, [r7, #20]
 8013d1c:	e022      	b.n	8013d64 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013d1e:	68fa      	ldr	r2, [r7, #12]
 8013d20:	697b      	ldr	r3, [r7, #20]
 8013d22:	429a      	cmp	r2, r3
 8013d24:	d01b      	beq.n	8013d5e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013d26:	697b      	ldr	r3, [r7, #20]
 8013d28:	8a5b      	ldrh	r3, [r3, #18]
 8013d2a:	88fa      	ldrh	r2, [r7, #6]
 8013d2c:	429a      	cmp	r2, r3
 8013d2e:	d116      	bne.n	8013d5e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013d30:	697b      	ldr	r3, [r7, #20]
 8013d32:	681a      	ldr	r2, [r3, #0]
 8013d34:	68bb      	ldr	r3, [r7, #8]
 8013d36:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013d38:	429a      	cmp	r2, r3
 8013d3a:	d00d      	beq.n	8013d58 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013d3c:	68bb      	ldr	r3, [r7, #8]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d00a      	beq.n	8013d58 <udp_bind+0xb4>
 8013d42:	68bb      	ldr	r3, [r7, #8]
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d006      	beq.n	8013d58 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013d4a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d003      	beq.n	8013d58 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013d50:	697b      	ldr	r3, [r7, #20]
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d102      	bne.n	8013d5e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013d58:	f06f 0307 	mvn.w	r3, #7
 8013d5c:	e01c      	b.n	8013d98 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013d5e:	697b      	ldr	r3, [r7, #20]
 8013d60:	68db      	ldr	r3, [r3, #12]
 8013d62:	617b      	str	r3, [r7, #20]
 8013d64:	697b      	ldr	r3, [r7, #20]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d1d9      	bne.n	8013d1e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013d6a:	68bb      	ldr	r3, [r7, #8]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d002      	beq.n	8013d76 <udp_bind+0xd2>
 8013d70:	68bb      	ldr	r3, [r7, #8]
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	e000      	b.n	8013d78 <udp_bind+0xd4>
 8013d76:	2300      	movs	r3, #0
 8013d78:	68fa      	ldr	r2, [r7, #12]
 8013d7a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	88fa      	ldrh	r2, [r7, #6]
 8013d80:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013d82:	7cfb      	ldrb	r3, [r7, #19]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d106      	bne.n	8013d96 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013d88:	4b09      	ldr	r3, [pc, #36]	; (8013db0 <udp_bind+0x10c>)
 8013d8a:	681a      	ldr	r2, [r3, #0]
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013d90:	4a07      	ldr	r2, [pc, #28]	; (8013db0 <udp_bind+0x10c>)
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013d96:	2300      	movs	r3, #0
}
 8013d98:	4618      	mov	r0, r3
 8013d9a:	3718      	adds	r7, #24
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bd80      	pop	{r7, pc}
 8013da0:	0801b0d4 	.word	0x0801b0d4
 8013da4:	0801a580 	.word	0x0801a580
 8013da8:	0801a848 	.word	0x0801a848
 8013dac:	0801a5d4 	.word	0x0801a5d4
 8013db0:	2000d3cc 	.word	0x2000d3cc

08013db4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b084      	sub	sp, #16
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	60f8      	str	r0, [r7, #12]
 8013dbc:	60b9      	str	r1, [r7, #8]
 8013dbe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d107      	bne.n	8013dd6 <udp_recv+0x22>
 8013dc6:	4b08      	ldr	r3, [pc, #32]	; (8013de8 <udp_recv+0x34>)
 8013dc8:	f240 428a 	movw	r2, #1162	; 0x48a
 8013dcc:	4907      	ldr	r1, [pc, #28]	; (8013dec <udp_recv+0x38>)
 8013dce:	4808      	ldr	r0, [pc, #32]	; (8013df0 <udp_recv+0x3c>)
 8013dd0:	f002 ff38 	bl	8016c44 <iprintf>
 8013dd4:	e005      	b.n	8013de2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	68ba      	ldr	r2, [r7, #8]
 8013dda:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	687a      	ldr	r2, [r7, #4]
 8013de0:	61da      	str	r2, [r3, #28]
}
 8013de2:	3710      	adds	r7, #16
 8013de4:	46bd      	mov	sp, r7
 8013de6:	bd80      	pop	{r7, pc}
 8013de8:	0801a580 	.word	0x0801a580
 8013dec:	0801a8b4 	.word	0x0801a8b4
 8013df0:	0801a5d4 	.word	0x0801a5d4

08013df4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b084      	sub	sp, #16
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d107      	bne.n	8013e12 <udp_remove+0x1e>
 8013e02:	4b19      	ldr	r3, [pc, #100]	; (8013e68 <udp_remove+0x74>)
 8013e04:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013e08:	4918      	ldr	r1, [pc, #96]	; (8013e6c <udp_remove+0x78>)
 8013e0a:	4819      	ldr	r0, [pc, #100]	; (8013e70 <udp_remove+0x7c>)
 8013e0c:	f002 ff1a 	bl	8016c44 <iprintf>
 8013e10:	e026      	b.n	8013e60 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013e12:	4b18      	ldr	r3, [pc, #96]	; (8013e74 <udp_remove+0x80>)
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	687a      	ldr	r2, [r7, #4]
 8013e18:	429a      	cmp	r2, r3
 8013e1a:	d105      	bne.n	8013e28 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013e1c:	4b15      	ldr	r3, [pc, #84]	; (8013e74 <udp_remove+0x80>)
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	68db      	ldr	r3, [r3, #12]
 8013e22:	4a14      	ldr	r2, [pc, #80]	; (8013e74 <udp_remove+0x80>)
 8013e24:	6013      	str	r3, [r2, #0]
 8013e26:	e017      	b.n	8013e58 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013e28:	4b12      	ldr	r3, [pc, #72]	; (8013e74 <udp_remove+0x80>)
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	60fb      	str	r3, [r7, #12]
 8013e2e:	e010      	b.n	8013e52 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	68db      	ldr	r3, [r3, #12]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d009      	beq.n	8013e4c <udp_remove+0x58>
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	68db      	ldr	r3, [r3, #12]
 8013e3c:	687a      	ldr	r2, [r7, #4]
 8013e3e:	429a      	cmp	r2, r3
 8013e40:	d104      	bne.n	8013e4c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	68da      	ldr	r2, [r3, #12]
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	60da      	str	r2, [r3, #12]
        break;
 8013e4a:	e005      	b.n	8013e58 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	68db      	ldr	r3, [r3, #12]
 8013e50:	60fb      	str	r3, [r7, #12]
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d1eb      	bne.n	8013e30 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013e58:	6879      	ldr	r1, [r7, #4]
 8013e5a:	2000      	movs	r0, #0
 8013e5c:	f7f8 f95a 	bl	800c114 <memp_free>
}
 8013e60:	3710      	adds	r7, #16
 8013e62:	46bd      	mov	sp, r7
 8013e64:	bd80      	pop	{r7, pc}
 8013e66:	bf00      	nop
 8013e68:	0801a580 	.word	0x0801a580
 8013e6c:	0801a8cc 	.word	0x0801a8cc
 8013e70:	0801a5d4 	.word	0x0801a5d4
 8013e74:	2000d3cc 	.word	0x2000d3cc

08013e78 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b082      	sub	sp, #8
 8013e7c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013e7e:	2000      	movs	r0, #0
 8013e80:	f7f8 f8f6 	bl	800c070 <memp_malloc>
 8013e84:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d007      	beq.n	8013e9c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013e8c:	2220      	movs	r2, #32
 8013e8e:	2100      	movs	r1, #0
 8013e90:	6878      	ldr	r0, [r7, #4]
 8013e92:	f002 fe25 	bl	8016ae0 <memset>
    pcb->ttl = UDP_TTL;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	22ff      	movs	r2, #255	; 0xff
 8013e9a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013e9c:	687b      	ldr	r3, [r7, #4]
}
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	3708      	adds	r7, #8
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	bd80      	pop	{r7, pc}

08013ea6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8013ea6:	b580      	push	{r7, lr}
 8013ea8:	b084      	sub	sp, #16
 8013eaa:	af00      	add	r7, sp, #0
 8013eac:	4603      	mov	r3, r0
 8013eae:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8013eb0:	f7ff ffe2 	bl	8013e78 <udp_new>
 8013eb4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013eb6:	68fb      	ldr	r3, [r7, #12]
}
 8013eb8:	4618      	mov	r0, r3
 8013eba:	3710      	adds	r7, #16
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	bd80      	pop	{r7, pc}

08013ec0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013ec0:	b480      	push	{r7}
 8013ec2:	b085      	sub	sp, #20
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
 8013ec8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d01e      	beq.n	8013f0e <udp_netif_ip_addr_changed+0x4e>
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d01a      	beq.n	8013f0e <udp_netif_ip_addr_changed+0x4e>
 8013ed8:	683b      	ldr	r3, [r7, #0]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d017      	beq.n	8013f0e <udp_netif_ip_addr_changed+0x4e>
 8013ede:	683b      	ldr	r3, [r7, #0]
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d013      	beq.n	8013f0e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013ee6:	4b0d      	ldr	r3, [pc, #52]	; (8013f1c <udp_netif_ip_addr_changed+0x5c>)
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	60fb      	str	r3, [r7, #12]
 8013eec:	e00c      	b.n	8013f08 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	681a      	ldr	r2, [r3, #0]
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	429a      	cmp	r2, r3
 8013ef8:	d103      	bne.n	8013f02 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013efa:	683b      	ldr	r3, [r7, #0]
 8013efc:	681a      	ldr	r2, [r3, #0]
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	68db      	ldr	r3, [r3, #12]
 8013f06:	60fb      	str	r3, [r7, #12]
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d1ef      	bne.n	8013eee <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013f0e:	bf00      	nop
 8013f10:	3714      	adds	r7, #20
 8013f12:	46bd      	mov	sp, r7
 8013f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f18:	4770      	bx	lr
 8013f1a:	bf00      	nop
 8013f1c:	2000d3cc 	.word	0x2000d3cc

08013f20 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b082      	sub	sp, #8
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013f28:	4915      	ldr	r1, [pc, #84]	; (8013f80 <etharp_free_entry+0x60>)
 8013f2a:	687a      	ldr	r2, [r7, #4]
 8013f2c:	4613      	mov	r3, r2
 8013f2e:	005b      	lsls	r3, r3, #1
 8013f30:	4413      	add	r3, r2
 8013f32:	00db      	lsls	r3, r3, #3
 8013f34:	440b      	add	r3, r1
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d013      	beq.n	8013f64 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013f3c:	4910      	ldr	r1, [pc, #64]	; (8013f80 <etharp_free_entry+0x60>)
 8013f3e:	687a      	ldr	r2, [r7, #4]
 8013f40:	4613      	mov	r3, r2
 8013f42:	005b      	lsls	r3, r3, #1
 8013f44:	4413      	add	r3, r2
 8013f46:	00db      	lsls	r3, r3, #3
 8013f48:	440b      	add	r3, r1
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	f7f8 ff21 	bl	800cd94 <pbuf_free>
    arp_table[i].q = NULL;
 8013f52:	490b      	ldr	r1, [pc, #44]	; (8013f80 <etharp_free_entry+0x60>)
 8013f54:	687a      	ldr	r2, [r7, #4]
 8013f56:	4613      	mov	r3, r2
 8013f58:	005b      	lsls	r3, r3, #1
 8013f5a:	4413      	add	r3, r2
 8013f5c:	00db      	lsls	r3, r3, #3
 8013f5e:	440b      	add	r3, r1
 8013f60:	2200      	movs	r2, #0
 8013f62:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013f64:	4906      	ldr	r1, [pc, #24]	; (8013f80 <etharp_free_entry+0x60>)
 8013f66:	687a      	ldr	r2, [r7, #4]
 8013f68:	4613      	mov	r3, r2
 8013f6a:	005b      	lsls	r3, r3, #1
 8013f6c:	4413      	add	r3, r2
 8013f6e:	00db      	lsls	r3, r3, #3
 8013f70:	440b      	add	r3, r1
 8013f72:	3314      	adds	r3, #20
 8013f74:	2200      	movs	r2, #0
 8013f76:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013f78:	bf00      	nop
 8013f7a:	3708      	adds	r7, #8
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	bd80      	pop	{r7, pc}
 8013f80:	20006888 	.word	0x20006888

08013f84 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b082      	sub	sp, #8
 8013f88:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	607b      	str	r3, [r7, #4]
 8013f8e:	e096      	b.n	80140be <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013f90:	494f      	ldr	r1, [pc, #316]	; (80140d0 <etharp_tmr+0x14c>)
 8013f92:	687a      	ldr	r2, [r7, #4]
 8013f94:	4613      	mov	r3, r2
 8013f96:	005b      	lsls	r3, r3, #1
 8013f98:	4413      	add	r3, r2
 8013f9a:	00db      	lsls	r3, r3, #3
 8013f9c:	440b      	add	r3, r1
 8013f9e:	3314      	adds	r3, #20
 8013fa0:	781b      	ldrb	r3, [r3, #0]
 8013fa2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013fa4:	78fb      	ldrb	r3, [r7, #3]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	f000 8086 	beq.w	80140b8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013fac:	4948      	ldr	r1, [pc, #288]	; (80140d0 <etharp_tmr+0x14c>)
 8013fae:	687a      	ldr	r2, [r7, #4]
 8013fb0:	4613      	mov	r3, r2
 8013fb2:	005b      	lsls	r3, r3, #1
 8013fb4:	4413      	add	r3, r2
 8013fb6:	00db      	lsls	r3, r3, #3
 8013fb8:	440b      	add	r3, r1
 8013fba:	3312      	adds	r3, #18
 8013fbc:	881b      	ldrh	r3, [r3, #0]
 8013fbe:	3301      	adds	r3, #1
 8013fc0:	b298      	uxth	r0, r3
 8013fc2:	4943      	ldr	r1, [pc, #268]	; (80140d0 <etharp_tmr+0x14c>)
 8013fc4:	687a      	ldr	r2, [r7, #4]
 8013fc6:	4613      	mov	r3, r2
 8013fc8:	005b      	lsls	r3, r3, #1
 8013fca:	4413      	add	r3, r2
 8013fcc:	00db      	lsls	r3, r3, #3
 8013fce:	440b      	add	r3, r1
 8013fd0:	3312      	adds	r3, #18
 8013fd2:	4602      	mov	r2, r0
 8013fd4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013fd6:	493e      	ldr	r1, [pc, #248]	; (80140d0 <etharp_tmr+0x14c>)
 8013fd8:	687a      	ldr	r2, [r7, #4]
 8013fda:	4613      	mov	r3, r2
 8013fdc:	005b      	lsls	r3, r3, #1
 8013fde:	4413      	add	r3, r2
 8013fe0:	00db      	lsls	r3, r3, #3
 8013fe2:	440b      	add	r3, r1
 8013fe4:	3312      	adds	r3, #18
 8013fe6:	881b      	ldrh	r3, [r3, #0]
 8013fe8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013fec:	d215      	bcs.n	801401a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013fee:	4938      	ldr	r1, [pc, #224]	; (80140d0 <etharp_tmr+0x14c>)
 8013ff0:	687a      	ldr	r2, [r7, #4]
 8013ff2:	4613      	mov	r3, r2
 8013ff4:	005b      	lsls	r3, r3, #1
 8013ff6:	4413      	add	r3, r2
 8013ff8:	00db      	lsls	r3, r3, #3
 8013ffa:	440b      	add	r3, r1
 8013ffc:	3314      	adds	r3, #20
 8013ffe:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014000:	2b01      	cmp	r3, #1
 8014002:	d10e      	bne.n	8014022 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014004:	4932      	ldr	r1, [pc, #200]	; (80140d0 <etharp_tmr+0x14c>)
 8014006:	687a      	ldr	r2, [r7, #4]
 8014008:	4613      	mov	r3, r2
 801400a:	005b      	lsls	r3, r3, #1
 801400c:	4413      	add	r3, r2
 801400e:	00db      	lsls	r3, r3, #3
 8014010:	440b      	add	r3, r1
 8014012:	3312      	adds	r3, #18
 8014014:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014016:	2b04      	cmp	r3, #4
 8014018:	d903      	bls.n	8014022 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801401a:	6878      	ldr	r0, [r7, #4]
 801401c:	f7ff ff80 	bl	8013f20 <etharp_free_entry>
 8014020:	e04a      	b.n	80140b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014022:	492b      	ldr	r1, [pc, #172]	; (80140d0 <etharp_tmr+0x14c>)
 8014024:	687a      	ldr	r2, [r7, #4]
 8014026:	4613      	mov	r3, r2
 8014028:	005b      	lsls	r3, r3, #1
 801402a:	4413      	add	r3, r2
 801402c:	00db      	lsls	r3, r3, #3
 801402e:	440b      	add	r3, r1
 8014030:	3314      	adds	r3, #20
 8014032:	781b      	ldrb	r3, [r3, #0]
 8014034:	2b03      	cmp	r3, #3
 8014036:	d10a      	bne.n	801404e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014038:	4925      	ldr	r1, [pc, #148]	; (80140d0 <etharp_tmr+0x14c>)
 801403a:	687a      	ldr	r2, [r7, #4]
 801403c:	4613      	mov	r3, r2
 801403e:	005b      	lsls	r3, r3, #1
 8014040:	4413      	add	r3, r2
 8014042:	00db      	lsls	r3, r3, #3
 8014044:	440b      	add	r3, r1
 8014046:	3314      	adds	r3, #20
 8014048:	2204      	movs	r2, #4
 801404a:	701a      	strb	r2, [r3, #0]
 801404c:	e034      	b.n	80140b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801404e:	4920      	ldr	r1, [pc, #128]	; (80140d0 <etharp_tmr+0x14c>)
 8014050:	687a      	ldr	r2, [r7, #4]
 8014052:	4613      	mov	r3, r2
 8014054:	005b      	lsls	r3, r3, #1
 8014056:	4413      	add	r3, r2
 8014058:	00db      	lsls	r3, r3, #3
 801405a:	440b      	add	r3, r1
 801405c:	3314      	adds	r3, #20
 801405e:	781b      	ldrb	r3, [r3, #0]
 8014060:	2b04      	cmp	r3, #4
 8014062:	d10a      	bne.n	801407a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014064:	491a      	ldr	r1, [pc, #104]	; (80140d0 <etharp_tmr+0x14c>)
 8014066:	687a      	ldr	r2, [r7, #4]
 8014068:	4613      	mov	r3, r2
 801406a:	005b      	lsls	r3, r3, #1
 801406c:	4413      	add	r3, r2
 801406e:	00db      	lsls	r3, r3, #3
 8014070:	440b      	add	r3, r1
 8014072:	3314      	adds	r3, #20
 8014074:	2202      	movs	r2, #2
 8014076:	701a      	strb	r2, [r3, #0]
 8014078:	e01e      	b.n	80140b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801407a:	4915      	ldr	r1, [pc, #84]	; (80140d0 <etharp_tmr+0x14c>)
 801407c:	687a      	ldr	r2, [r7, #4]
 801407e:	4613      	mov	r3, r2
 8014080:	005b      	lsls	r3, r3, #1
 8014082:	4413      	add	r3, r2
 8014084:	00db      	lsls	r3, r3, #3
 8014086:	440b      	add	r3, r1
 8014088:	3314      	adds	r3, #20
 801408a:	781b      	ldrb	r3, [r3, #0]
 801408c:	2b01      	cmp	r3, #1
 801408e:	d113      	bne.n	80140b8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014090:	490f      	ldr	r1, [pc, #60]	; (80140d0 <etharp_tmr+0x14c>)
 8014092:	687a      	ldr	r2, [r7, #4]
 8014094:	4613      	mov	r3, r2
 8014096:	005b      	lsls	r3, r3, #1
 8014098:	4413      	add	r3, r2
 801409a:	00db      	lsls	r3, r3, #3
 801409c:	440b      	add	r3, r1
 801409e:	3308      	adds	r3, #8
 80140a0:	6818      	ldr	r0, [r3, #0]
 80140a2:	687a      	ldr	r2, [r7, #4]
 80140a4:	4613      	mov	r3, r2
 80140a6:	005b      	lsls	r3, r3, #1
 80140a8:	4413      	add	r3, r2
 80140aa:	00db      	lsls	r3, r3, #3
 80140ac:	4a08      	ldr	r2, [pc, #32]	; (80140d0 <etharp_tmr+0x14c>)
 80140ae:	4413      	add	r3, r2
 80140b0:	3304      	adds	r3, #4
 80140b2:	4619      	mov	r1, r3
 80140b4:	f000 fe6e 	bl	8014d94 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	3301      	adds	r3, #1
 80140bc:	607b      	str	r3, [r7, #4]
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	2b09      	cmp	r3, #9
 80140c2:	f77f af65 	ble.w	8013f90 <etharp_tmr+0xc>
      }
    }
  }
}
 80140c6:	bf00      	nop
 80140c8:	bf00      	nop
 80140ca:	3708      	adds	r7, #8
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}
 80140d0:	20006888 	.word	0x20006888

080140d4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b08a      	sub	sp, #40	; 0x28
 80140d8:	af00      	add	r7, sp, #0
 80140da:	60f8      	str	r0, [r7, #12]
 80140dc:	460b      	mov	r3, r1
 80140de:	607a      	str	r2, [r7, #4]
 80140e0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80140e2:	230a      	movs	r3, #10
 80140e4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80140e6:	230a      	movs	r3, #10
 80140e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80140ea:	230a      	movs	r3, #10
 80140ec:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80140ee:	2300      	movs	r3, #0
 80140f0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80140f2:	230a      	movs	r3, #10
 80140f4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80140f6:	2300      	movs	r3, #0
 80140f8:	83bb      	strh	r3, [r7, #28]
 80140fa:	2300      	movs	r3, #0
 80140fc:	837b      	strh	r3, [r7, #26]
 80140fe:	2300      	movs	r3, #0
 8014100:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014102:	2300      	movs	r3, #0
 8014104:	843b      	strh	r3, [r7, #32]
 8014106:	e0ae      	b.n	8014266 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014108:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801410c:	49a6      	ldr	r1, [pc, #664]	; (80143a8 <etharp_find_entry+0x2d4>)
 801410e:	4613      	mov	r3, r2
 8014110:	005b      	lsls	r3, r3, #1
 8014112:	4413      	add	r3, r2
 8014114:	00db      	lsls	r3, r3, #3
 8014116:	440b      	add	r3, r1
 8014118:	3314      	adds	r3, #20
 801411a:	781b      	ldrb	r3, [r3, #0]
 801411c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801411e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014122:	2b0a      	cmp	r3, #10
 8014124:	d105      	bne.n	8014132 <etharp_find_entry+0x5e>
 8014126:	7dfb      	ldrb	r3, [r7, #23]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d102      	bne.n	8014132 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801412c:	8c3b      	ldrh	r3, [r7, #32]
 801412e:	847b      	strh	r3, [r7, #34]	; 0x22
 8014130:	e095      	b.n	801425e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014132:	7dfb      	ldrb	r3, [r7, #23]
 8014134:	2b00      	cmp	r3, #0
 8014136:	f000 8092 	beq.w	801425e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801413a:	7dfb      	ldrb	r3, [r7, #23]
 801413c:	2b01      	cmp	r3, #1
 801413e:	d009      	beq.n	8014154 <etharp_find_entry+0x80>
 8014140:	7dfb      	ldrb	r3, [r7, #23]
 8014142:	2b01      	cmp	r3, #1
 8014144:	d806      	bhi.n	8014154 <etharp_find_entry+0x80>
 8014146:	4b99      	ldr	r3, [pc, #612]	; (80143ac <etharp_find_entry+0x2d8>)
 8014148:	f240 1223 	movw	r2, #291	; 0x123
 801414c:	4998      	ldr	r1, [pc, #608]	; (80143b0 <etharp_find_entry+0x2dc>)
 801414e:	4899      	ldr	r0, [pc, #612]	; (80143b4 <etharp_find_entry+0x2e0>)
 8014150:	f002 fd78 	bl	8016c44 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d020      	beq.n	801419c <etharp_find_entry+0xc8>
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	6819      	ldr	r1, [r3, #0]
 801415e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014162:	4891      	ldr	r0, [pc, #580]	; (80143a8 <etharp_find_entry+0x2d4>)
 8014164:	4613      	mov	r3, r2
 8014166:	005b      	lsls	r3, r3, #1
 8014168:	4413      	add	r3, r2
 801416a:	00db      	lsls	r3, r3, #3
 801416c:	4403      	add	r3, r0
 801416e:	3304      	adds	r3, #4
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	4299      	cmp	r1, r3
 8014174:	d112      	bne.n	801419c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d00c      	beq.n	8014196 <etharp_find_entry+0xc2>
 801417c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014180:	4989      	ldr	r1, [pc, #548]	; (80143a8 <etharp_find_entry+0x2d4>)
 8014182:	4613      	mov	r3, r2
 8014184:	005b      	lsls	r3, r3, #1
 8014186:	4413      	add	r3, r2
 8014188:	00db      	lsls	r3, r3, #3
 801418a:	440b      	add	r3, r1
 801418c:	3308      	adds	r3, #8
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	687a      	ldr	r2, [r7, #4]
 8014192:	429a      	cmp	r2, r3
 8014194:	d102      	bne.n	801419c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014196:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801419a:	e100      	b.n	801439e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801419c:	7dfb      	ldrb	r3, [r7, #23]
 801419e:	2b01      	cmp	r3, #1
 80141a0:	d140      	bne.n	8014224 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80141a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141a6:	4980      	ldr	r1, [pc, #512]	; (80143a8 <etharp_find_entry+0x2d4>)
 80141a8:	4613      	mov	r3, r2
 80141aa:	005b      	lsls	r3, r3, #1
 80141ac:	4413      	add	r3, r2
 80141ae:	00db      	lsls	r3, r3, #3
 80141b0:	440b      	add	r3, r1
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d01a      	beq.n	80141ee <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80141b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141bc:	497a      	ldr	r1, [pc, #488]	; (80143a8 <etharp_find_entry+0x2d4>)
 80141be:	4613      	mov	r3, r2
 80141c0:	005b      	lsls	r3, r3, #1
 80141c2:	4413      	add	r3, r2
 80141c4:	00db      	lsls	r3, r3, #3
 80141c6:	440b      	add	r3, r1
 80141c8:	3312      	adds	r3, #18
 80141ca:	881b      	ldrh	r3, [r3, #0]
 80141cc:	8bba      	ldrh	r2, [r7, #28]
 80141ce:	429a      	cmp	r2, r3
 80141d0:	d845      	bhi.n	801425e <etharp_find_entry+0x18a>
            old_queue = i;
 80141d2:	8c3b      	ldrh	r3, [r7, #32]
 80141d4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80141d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141da:	4973      	ldr	r1, [pc, #460]	; (80143a8 <etharp_find_entry+0x2d4>)
 80141dc:	4613      	mov	r3, r2
 80141de:	005b      	lsls	r3, r3, #1
 80141e0:	4413      	add	r3, r2
 80141e2:	00db      	lsls	r3, r3, #3
 80141e4:	440b      	add	r3, r1
 80141e6:	3312      	adds	r3, #18
 80141e8:	881b      	ldrh	r3, [r3, #0]
 80141ea:	83bb      	strh	r3, [r7, #28]
 80141ec:	e037      	b.n	801425e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80141ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141f2:	496d      	ldr	r1, [pc, #436]	; (80143a8 <etharp_find_entry+0x2d4>)
 80141f4:	4613      	mov	r3, r2
 80141f6:	005b      	lsls	r3, r3, #1
 80141f8:	4413      	add	r3, r2
 80141fa:	00db      	lsls	r3, r3, #3
 80141fc:	440b      	add	r3, r1
 80141fe:	3312      	adds	r3, #18
 8014200:	881b      	ldrh	r3, [r3, #0]
 8014202:	8b7a      	ldrh	r2, [r7, #26]
 8014204:	429a      	cmp	r2, r3
 8014206:	d82a      	bhi.n	801425e <etharp_find_entry+0x18a>
            old_pending = i;
 8014208:	8c3b      	ldrh	r3, [r7, #32]
 801420a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801420c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014210:	4965      	ldr	r1, [pc, #404]	; (80143a8 <etharp_find_entry+0x2d4>)
 8014212:	4613      	mov	r3, r2
 8014214:	005b      	lsls	r3, r3, #1
 8014216:	4413      	add	r3, r2
 8014218:	00db      	lsls	r3, r3, #3
 801421a:	440b      	add	r3, r1
 801421c:	3312      	adds	r3, #18
 801421e:	881b      	ldrh	r3, [r3, #0]
 8014220:	837b      	strh	r3, [r7, #26]
 8014222:	e01c      	b.n	801425e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014224:	7dfb      	ldrb	r3, [r7, #23]
 8014226:	2b01      	cmp	r3, #1
 8014228:	d919      	bls.n	801425e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801422a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801422e:	495e      	ldr	r1, [pc, #376]	; (80143a8 <etharp_find_entry+0x2d4>)
 8014230:	4613      	mov	r3, r2
 8014232:	005b      	lsls	r3, r3, #1
 8014234:	4413      	add	r3, r2
 8014236:	00db      	lsls	r3, r3, #3
 8014238:	440b      	add	r3, r1
 801423a:	3312      	adds	r3, #18
 801423c:	881b      	ldrh	r3, [r3, #0]
 801423e:	8b3a      	ldrh	r2, [r7, #24]
 8014240:	429a      	cmp	r2, r3
 8014242:	d80c      	bhi.n	801425e <etharp_find_entry+0x18a>
            old_stable = i;
 8014244:	8c3b      	ldrh	r3, [r7, #32]
 8014246:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014248:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801424c:	4956      	ldr	r1, [pc, #344]	; (80143a8 <etharp_find_entry+0x2d4>)
 801424e:	4613      	mov	r3, r2
 8014250:	005b      	lsls	r3, r3, #1
 8014252:	4413      	add	r3, r2
 8014254:	00db      	lsls	r3, r3, #3
 8014256:	440b      	add	r3, r1
 8014258:	3312      	adds	r3, #18
 801425a:	881b      	ldrh	r3, [r3, #0]
 801425c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801425e:	8c3b      	ldrh	r3, [r7, #32]
 8014260:	3301      	adds	r3, #1
 8014262:	b29b      	uxth	r3, r3
 8014264:	843b      	strh	r3, [r7, #32]
 8014266:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801426a:	2b09      	cmp	r3, #9
 801426c:	f77f af4c 	ble.w	8014108 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014270:	7afb      	ldrb	r3, [r7, #11]
 8014272:	f003 0302 	and.w	r3, r3, #2
 8014276:	2b00      	cmp	r3, #0
 8014278:	d108      	bne.n	801428c <etharp_find_entry+0x1b8>
 801427a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801427e:	2b0a      	cmp	r3, #10
 8014280:	d107      	bne.n	8014292 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014282:	7afb      	ldrb	r3, [r7, #11]
 8014284:	f003 0301 	and.w	r3, r3, #1
 8014288:	2b00      	cmp	r3, #0
 801428a:	d102      	bne.n	8014292 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801428c:	f04f 33ff 	mov.w	r3, #4294967295
 8014290:	e085      	b.n	801439e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014292:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014296:	2b09      	cmp	r3, #9
 8014298:	dc02      	bgt.n	80142a0 <etharp_find_entry+0x1cc>
    i = empty;
 801429a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801429c:	843b      	strh	r3, [r7, #32]
 801429e:	e039      	b.n	8014314 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80142a0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80142a4:	2b09      	cmp	r3, #9
 80142a6:	dc14      	bgt.n	80142d2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80142a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80142aa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80142ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142b0:	493d      	ldr	r1, [pc, #244]	; (80143a8 <etharp_find_entry+0x2d4>)
 80142b2:	4613      	mov	r3, r2
 80142b4:	005b      	lsls	r3, r3, #1
 80142b6:	4413      	add	r3, r2
 80142b8:	00db      	lsls	r3, r3, #3
 80142ba:	440b      	add	r3, r1
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d018      	beq.n	80142f4 <etharp_find_entry+0x220>
 80142c2:	4b3a      	ldr	r3, [pc, #232]	; (80143ac <etharp_find_entry+0x2d8>)
 80142c4:	f240 126d 	movw	r2, #365	; 0x16d
 80142c8:	493b      	ldr	r1, [pc, #236]	; (80143b8 <etharp_find_entry+0x2e4>)
 80142ca:	483a      	ldr	r0, [pc, #232]	; (80143b4 <etharp_find_entry+0x2e0>)
 80142cc:	f002 fcba 	bl	8016c44 <iprintf>
 80142d0:	e010      	b.n	80142f4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80142d2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80142d6:	2b09      	cmp	r3, #9
 80142d8:	dc02      	bgt.n	80142e0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80142da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80142dc:	843b      	strh	r3, [r7, #32]
 80142de:	e009      	b.n	80142f4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80142e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80142e4:	2b09      	cmp	r3, #9
 80142e6:	dc02      	bgt.n	80142ee <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80142e8:	8bfb      	ldrh	r3, [r7, #30]
 80142ea:	843b      	strh	r3, [r7, #32]
 80142ec:	e002      	b.n	80142f4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80142ee:	f04f 33ff 	mov.w	r3, #4294967295
 80142f2:	e054      	b.n	801439e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80142f4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80142f8:	2b09      	cmp	r3, #9
 80142fa:	dd06      	ble.n	801430a <etharp_find_entry+0x236>
 80142fc:	4b2b      	ldr	r3, [pc, #172]	; (80143ac <etharp_find_entry+0x2d8>)
 80142fe:	f240 127f 	movw	r2, #383	; 0x17f
 8014302:	492e      	ldr	r1, [pc, #184]	; (80143bc <etharp_find_entry+0x2e8>)
 8014304:	482b      	ldr	r0, [pc, #172]	; (80143b4 <etharp_find_entry+0x2e0>)
 8014306:	f002 fc9d 	bl	8016c44 <iprintf>
    etharp_free_entry(i);
 801430a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801430e:	4618      	mov	r0, r3
 8014310:	f7ff fe06 	bl	8013f20 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014314:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014318:	2b09      	cmp	r3, #9
 801431a:	dd06      	ble.n	801432a <etharp_find_entry+0x256>
 801431c:	4b23      	ldr	r3, [pc, #140]	; (80143ac <etharp_find_entry+0x2d8>)
 801431e:	f240 1283 	movw	r2, #387	; 0x183
 8014322:	4926      	ldr	r1, [pc, #152]	; (80143bc <etharp_find_entry+0x2e8>)
 8014324:	4823      	ldr	r0, [pc, #140]	; (80143b4 <etharp_find_entry+0x2e0>)
 8014326:	f002 fc8d 	bl	8016c44 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801432a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801432e:	491e      	ldr	r1, [pc, #120]	; (80143a8 <etharp_find_entry+0x2d4>)
 8014330:	4613      	mov	r3, r2
 8014332:	005b      	lsls	r3, r3, #1
 8014334:	4413      	add	r3, r2
 8014336:	00db      	lsls	r3, r3, #3
 8014338:	440b      	add	r3, r1
 801433a:	3314      	adds	r3, #20
 801433c:	781b      	ldrb	r3, [r3, #0]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d006      	beq.n	8014350 <etharp_find_entry+0x27c>
 8014342:	4b1a      	ldr	r3, [pc, #104]	; (80143ac <etharp_find_entry+0x2d8>)
 8014344:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014348:	491d      	ldr	r1, [pc, #116]	; (80143c0 <etharp_find_entry+0x2ec>)
 801434a:	481a      	ldr	r0, [pc, #104]	; (80143b4 <etharp_find_entry+0x2e0>)
 801434c:	f002 fc7a 	bl	8016c44 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d00b      	beq.n	801436e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014356:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	6819      	ldr	r1, [r3, #0]
 801435e:	4812      	ldr	r0, [pc, #72]	; (80143a8 <etharp_find_entry+0x2d4>)
 8014360:	4613      	mov	r3, r2
 8014362:	005b      	lsls	r3, r3, #1
 8014364:	4413      	add	r3, r2
 8014366:	00db      	lsls	r3, r3, #3
 8014368:	4403      	add	r3, r0
 801436a:	3304      	adds	r3, #4
 801436c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801436e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014372:	490d      	ldr	r1, [pc, #52]	; (80143a8 <etharp_find_entry+0x2d4>)
 8014374:	4613      	mov	r3, r2
 8014376:	005b      	lsls	r3, r3, #1
 8014378:	4413      	add	r3, r2
 801437a:	00db      	lsls	r3, r3, #3
 801437c:	440b      	add	r3, r1
 801437e:	3312      	adds	r3, #18
 8014380:	2200      	movs	r2, #0
 8014382:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014384:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014388:	4907      	ldr	r1, [pc, #28]	; (80143a8 <etharp_find_entry+0x2d4>)
 801438a:	4613      	mov	r3, r2
 801438c:	005b      	lsls	r3, r3, #1
 801438e:	4413      	add	r3, r2
 8014390:	00db      	lsls	r3, r3, #3
 8014392:	440b      	add	r3, r1
 8014394:	3308      	adds	r3, #8
 8014396:	687a      	ldr	r2, [r7, #4]
 8014398:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801439a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801439e:	4618      	mov	r0, r3
 80143a0:	3728      	adds	r7, #40	; 0x28
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd80      	pop	{r7, pc}
 80143a6:	bf00      	nop
 80143a8:	20006888 	.word	0x20006888
 80143ac:	0801a8e4 	.word	0x0801a8e4
 80143b0:	0801a91c 	.word	0x0801a91c
 80143b4:	0801a95c 	.word	0x0801a95c
 80143b8:	0801a984 	.word	0x0801a984
 80143bc:	0801a99c 	.word	0x0801a99c
 80143c0:	0801a9b0 	.word	0x0801a9b0

080143c4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b088      	sub	sp, #32
 80143c8:	af02      	add	r7, sp, #8
 80143ca:	60f8      	str	r0, [r7, #12]
 80143cc:	60b9      	str	r1, [r7, #8]
 80143ce:	607a      	str	r2, [r7, #4]
 80143d0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80143d8:	2b06      	cmp	r3, #6
 80143da:	d006      	beq.n	80143ea <etharp_update_arp_entry+0x26>
 80143dc:	4b48      	ldr	r3, [pc, #288]	; (8014500 <etharp_update_arp_entry+0x13c>)
 80143de:	f240 12a9 	movw	r2, #425	; 0x1a9
 80143e2:	4948      	ldr	r1, [pc, #288]	; (8014504 <etharp_update_arp_entry+0x140>)
 80143e4:	4848      	ldr	r0, [pc, #288]	; (8014508 <etharp_update_arp_entry+0x144>)
 80143e6:	f002 fc2d 	bl	8016c44 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80143ea:	68bb      	ldr	r3, [r7, #8]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d012      	beq.n	8014416 <etharp_update_arp_entry+0x52>
 80143f0:	68bb      	ldr	r3, [r7, #8]
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d00e      	beq.n	8014416 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80143f8:	68bb      	ldr	r3, [r7, #8]
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	68f9      	ldr	r1, [r7, #12]
 80143fe:	4618      	mov	r0, r3
 8014400:	f001 f8fe 	bl	8015600 <ip4_addr_isbroadcast_u32>
 8014404:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014406:	2b00      	cmp	r3, #0
 8014408:	d105      	bne.n	8014416 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801440a:	68bb      	ldr	r3, [r7, #8]
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014412:	2be0      	cmp	r3, #224	; 0xe0
 8014414:	d102      	bne.n	801441c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014416:	f06f 030f 	mvn.w	r3, #15
 801441a:	e06c      	b.n	80144f6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801441c:	78fb      	ldrb	r3, [r7, #3]
 801441e:	68fa      	ldr	r2, [r7, #12]
 8014420:	4619      	mov	r1, r3
 8014422:	68b8      	ldr	r0, [r7, #8]
 8014424:	f7ff fe56 	bl	80140d4 <etharp_find_entry>
 8014428:	4603      	mov	r3, r0
 801442a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801442c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014430:	2b00      	cmp	r3, #0
 8014432:	da02      	bge.n	801443a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014434:	8afb      	ldrh	r3, [r7, #22]
 8014436:	b25b      	sxtb	r3, r3
 8014438:	e05d      	b.n	80144f6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801443a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801443e:	4933      	ldr	r1, [pc, #204]	; (801450c <etharp_update_arp_entry+0x148>)
 8014440:	4613      	mov	r3, r2
 8014442:	005b      	lsls	r3, r3, #1
 8014444:	4413      	add	r3, r2
 8014446:	00db      	lsls	r3, r3, #3
 8014448:	440b      	add	r3, r1
 801444a:	3314      	adds	r3, #20
 801444c:	2202      	movs	r2, #2
 801444e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014450:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014454:	492d      	ldr	r1, [pc, #180]	; (801450c <etharp_update_arp_entry+0x148>)
 8014456:	4613      	mov	r3, r2
 8014458:	005b      	lsls	r3, r3, #1
 801445a:	4413      	add	r3, r2
 801445c:	00db      	lsls	r3, r3, #3
 801445e:	440b      	add	r3, r1
 8014460:	3308      	adds	r3, #8
 8014462:	68fa      	ldr	r2, [r7, #12]
 8014464:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014466:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801446a:	4613      	mov	r3, r2
 801446c:	005b      	lsls	r3, r3, #1
 801446e:	4413      	add	r3, r2
 8014470:	00db      	lsls	r3, r3, #3
 8014472:	3308      	adds	r3, #8
 8014474:	4a25      	ldr	r2, [pc, #148]	; (801450c <etharp_update_arp_entry+0x148>)
 8014476:	4413      	add	r3, r2
 8014478:	3304      	adds	r3, #4
 801447a:	2206      	movs	r2, #6
 801447c:	6879      	ldr	r1, [r7, #4]
 801447e:	4618      	mov	r0, r3
 8014480:	f002 fb20 	bl	8016ac4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014484:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014488:	4920      	ldr	r1, [pc, #128]	; (801450c <etharp_update_arp_entry+0x148>)
 801448a:	4613      	mov	r3, r2
 801448c:	005b      	lsls	r3, r3, #1
 801448e:	4413      	add	r3, r2
 8014490:	00db      	lsls	r3, r3, #3
 8014492:	440b      	add	r3, r1
 8014494:	3312      	adds	r3, #18
 8014496:	2200      	movs	r2, #0
 8014498:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801449a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801449e:	491b      	ldr	r1, [pc, #108]	; (801450c <etharp_update_arp_entry+0x148>)
 80144a0:	4613      	mov	r3, r2
 80144a2:	005b      	lsls	r3, r3, #1
 80144a4:	4413      	add	r3, r2
 80144a6:	00db      	lsls	r3, r3, #3
 80144a8:	440b      	add	r3, r1
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d021      	beq.n	80144f4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80144b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144b4:	4915      	ldr	r1, [pc, #84]	; (801450c <etharp_update_arp_entry+0x148>)
 80144b6:	4613      	mov	r3, r2
 80144b8:	005b      	lsls	r3, r3, #1
 80144ba:	4413      	add	r3, r2
 80144bc:	00db      	lsls	r3, r3, #3
 80144be:	440b      	add	r3, r1
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80144c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144c8:	4910      	ldr	r1, [pc, #64]	; (801450c <etharp_update_arp_entry+0x148>)
 80144ca:	4613      	mov	r3, r2
 80144cc:	005b      	lsls	r3, r3, #1
 80144ce:	4413      	add	r3, r2
 80144d0:	00db      	lsls	r3, r3, #3
 80144d2:	440b      	add	r3, r1
 80144d4:	2200      	movs	r2, #0
 80144d6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80144de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80144e2:	9300      	str	r3, [sp, #0]
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	6939      	ldr	r1, [r7, #16]
 80144e8:	68f8      	ldr	r0, [r7, #12]
 80144ea:	f001 ff91 	bl	8016410 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80144ee:	6938      	ldr	r0, [r7, #16]
 80144f0:	f7f8 fc50 	bl	800cd94 <pbuf_free>
  }
  return ERR_OK;
 80144f4:	2300      	movs	r3, #0
}
 80144f6:	4618      	mov	r0, r3
 80144f8:	3718      	adds	r7, #24
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd80      	pop	{r7, pc}
 80144fe:	bf00      	nop
 8014500:	0801a8e4 	.word	0x0801a8e4
 8014504:	0801a9dc 	.word	0x0801a9dc
 8014508:	0801a95c 	.word	0x0801a95c
 801450c:	20006888 	.word	0x20006888

08014510 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014510:	b580      	push	{r7, lr}
 8014512:	b084      	sub	sp, #16
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014518:	2300      	movs	r3, #0
 801451a:	60fb      	str	r3, [r7, #12]
 801451c:	e01e      	b.n	801455c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801451e:	4913      	ldr	r1, [pc, #76]	; (801456c <etharp_cleanup_netif+0x5c>)
 8014520:	68fa      	ldr	r2, [r7, #12]
 8014522:	4613      	mov	r3, r2
 8014524:	005b      	lsls	r3, r3, #1
 8014526:	4413      	add	r3, r2
 8014528:	00db      	lsls	r3, r3, #3
 801452a:	440b      	add	r3, r1
 801452c:	3314      	adds	r3, #20
 801452e:	781b      	ldrb	r3, [r3, #0]
 8014530:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014532:	7afb      	ldrb	r3, [r7, #11]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d00e      	beq.n	8014556 <etharp_cleanup_netif+0x46>
 8014538:	490c      	ldr	r1, [pc, #48]	; (801456c <etharp_cleanup_netif+0x5c>)
 801453a:	68fa      	ldr	r2, [r7, #12]
 801453c:	4613      	mov	r3, r2
 801453e:	005b      	lsls	r3, r3, #1
 8014540:	4413      	add	r3, r2
 8014542:	00db      	lsls	r3, r3, #3
 8014544:	440b      	add	r3, r1
 8014546:	3308      	adds	r3, #8
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	687a      	ldr	r2, [r7, #4]
 801454c:	429a      	cmp	r2, r3
 801454e:	d102      	bne.n	8014556 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014550:	68f8      	ldr	r0, [r7, #12]
 8014552:	f7ff fce5 	bl	8013f20 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	3301      	adds	r3, #1
 801455a:	60fb      	str	r3, [r7, #12]
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	2b09      	cmp	r3, #9
 8014560:	dddd      	ble.n	801451e <etharp_cleanup_netif+0xe>
    }
  }
}
 8014562:	bf00      	nop
 8014564:	bf00      	nop
 8014566:	3710      	adds	r7, #16
 8014568:	46bd      	mov	sp, r7
 801456a:	bd80      	pop	{r7, pc}
 801456c:	20006888 	.word	0x20006888

08014570 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014570:	b5b0      	push	{r4, r5, r7, lr}
 8014572:	b08a      	sub	sp, #40	; 0x28
 8014574:	af04      	add	r7, sp, #16
 8014576:	6078      	str	r0, [r7, #4]
 8014578:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801457a:	683b      	ldr	r3, [r7, #0]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d107      	bne.n	8014590 <etharp_input+0x20>
 8014580:	4b3d      	ldr	r3, [pc, #244]	; (8014678 <etharp_input+0x108>)
 8014582:	f240 228a 	movw	r2, #650	; 0x28a
 8014586:	493d      	ldr	r1, [pc, #244]	; (801467c <etharp_input+0x10c>)
 8014588:	483d      	ldr	r0, [pc, #244]	; (8014680 <etharp_input+0x110>)
 801458a:	f002 fb5b 	bl	8016c44 <iprintf>
 801458e:	e06f      	b.n	8014670 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	685b      	ldr	r3, [r3, #4]
 8014594:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014596:	693b      	ldr	r3, [r7, #16]
 8014598:	881b      	ldrh	r3, [r3, #0]
 801459a:	b29b      	uxth	r3, r3
 801459c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80145a0:	d10c      	bne.n	80145bc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80145a2:	693b      	ldr	r3, [r7, #16]
 80145a4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80145a6:	2b06      	cmp	r3, #6
 80145a8:	d108      	bne.n	80145bc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80145aa:	693b      	ldr	r3, [r7, #16]
 80145ac:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80145ae:	2b04      	cmp	r3, #4
 80145b0:	d104      	bne.n	80145bc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80145b2:	693b      	ldr	r3, [r7, #16]
 80145b4:	885b      	ldrh	r3, [r3, #2]
 80145b6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80145b8:	2b08      	cmp	r3, #8
 80145ba:	d003      	beq.n	80145c4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80145bc:	6878      	ldr	r0, [r7, #4]
 80145be:	f7f8 fbe9 	bl	800cd94 <pbuf_free>
    return;
 80145c2:	e055      	b.n	8014670 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80145c4:	693b      	ldr	r3, [r7, #16]
 80145c6:	330e      	adds	r3, #14
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80145cc:	693b      	ldr	r3, [r7, #16]
 80145ce:	3318      	adds	r3, #24
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80145d4:	683b      	ldr	r3, [r7, #0]
 80145d6:	3304      	adds	r3, #4
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d102      	bne.n	80145e4 <etharp_input+0x74>
    for_us = 0;
 80145de:	2300      	movs	r3, #0
 80145e0:	75fb      	strb	r3, [r7, #23]
 80145e2:	e009      	b.n	80145f8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80145e4:	68ba      	ldr	r2, [r7, #8]
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	3304      	adds	r3, #4
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	429a      	cmp	r2, r3
 80145ee:	bf0c      	ite	eq
 80145f0:	2301      	moveq	r3, #1
 80145f2:	2300      	movne	r3, #0
 80145f4:	b2db      	uxtb	r3, r3
 80145f6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80145f8:	693b      	ldr	r3, [r7, #16]
 80145fa:	f103 0208 	add.w	r2, r3, #8
 80145fe:	7dfb      	ldrb	r3, [r7, #23]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d001      	beq.n	8014608 <etharp_input+0x98>
 8014604:	2301      	movs	r3, #1
 8014606:	e000      	b.n	801460a <etharp_input+0x9a>
 8014608:	2302      	movs	r3, #2
 801460a:	f107 010c 	add.w	r1, r7, #12
 801460e:	6838      	ldr	r0, [r7, #0]
 8014610:	f7ff fed8 	bl	80143c4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014614:	693b      	ldr	r3, [r7, #16]
 8014616:	88db      	ldrh	r3, [r3, #6]
 8014618:	b29b      	uxth	r3, r3
 801461a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801461e:	d003      	beq.n	8014628 <etharp_input+0xb8>
 8014620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014624:	d01e      	beq.n	8014664 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014626:	e020      	b.n	801466a <etharp_input+0xfa>
      if (for_us) {
 8014628:	7dfb      	ldrb	r3, [r7, #23]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d01c      	beq.n	8014668 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801462e:	683b      	ldr	r3, [r7, #0]
 8014630:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014634:	693b      	ldr	r3, [r7, #16]
 8014636:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014640:	683b      	ldr	r3, [r7, #0]
 8014642:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014644:	693a      	ldr	r2, [r7, #16]
 8014646:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014648:	2102      	movs	r1, #2
 801464a:	9103      	str	r1, [sp, #12]
 801464c:	f107 010c 	add.w	r1, r7, #12
 8014650:	9102      	str	r1, [sp, #8]
 8014652:	9201      	str	r2, [sp, #4]
 8014654:	9300      	str	r3, [sp, #0]
 8014656:	462b      	mov	r3, r5
 8014658:	4622      	mov	r2, r4
 801465a:	4601      	mov	r1, r0
 801465c:	6838      	ldr	r0, [r7, #0]
 801465e:	f000 faeb 	bl	8014c38 <etharp_raw>
      break;
 8014662:	e001      	b.n	8014668 <etharp_input+0xf8>
      break;
 8014664:	bf00      	nop
 8014666:	e000      	b.n	801466a <etharp_input+0xfa>
      break;
 8014668:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801466a:	6878      	ldr	r0, [r7, #4]
 801466c:	f7f8 fb92 	bl	800cd94 <pbuf_free>
}
 8014670:	3718      	adds	r7, #24
 8014672:	46bd      	mov	sp, r7
 8014674:	bdb0      	pop	{r4, r5, r7, pc}
 8014676:	bf00      	nop
 8014678:	0801a8e4 	.word	0x0801a8e4
 801467c:	0801aa34 	.word	0x0801aa34
 8014680:	0801a95c 	.word	0x0801a95c

08014684 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014684:	b580      	push	{r7, lr}
 8014686:	b086      	sub	sp, #24
 8014688:	af02      	add	r7, sp, #8
 801468a:	60f8      	str	r0, [r7, #12]
 801468c:	60b9      	str	r1, [r7, #8]
 801468e:	4613      	mov	r3, r2
 8014690:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014692:	79fa      	ldrb	r2, [r7, #7]
 8014694:	4944      	ldr	r1, [pc, #272]	; (80147a8 <etharp_output_to_arp_index+0x124>)
 8014696:	4613      	mov	r3, r2
 8014698:	005b      	lsls	r3, r3, #1
 801469a:	4413      	add	r3, r2
 801469c:	00db      	lsls	r3, r3, #3
 801469e:	440b      	add	r3, r1
 80146a0:	3314      	adds	r3, #20
 80146a2:	781b      	ldrb	r3, [r3, #0]
 80146a4:	2b01      	cmp	r3, #1
 80146a6:	d806      	bhi.n	80146b6 <etharp_output_to_arp_index+0x32>
 80146a8:	4b40      	ldr	r3, [pc, #256]	; (80147ac <etharp_output_to_arp_index+0x128>)
 80146aa:	f240 22ee 	movw	r2, #750	; 0x2ee
 80146ae:	4940      	ldr	r1, [pc, #256]	; (80147b0 <etharp_output_to_arp_index+0x12c>)
 80146b0:	4840      	ldr	r0, [pc, #256]	; (80147b4 <etharp_output_to_arp_index+0x130>)
 80146b2:	f002 fac7 	bl	8016c44 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80146b6:	79fa      	ldrb	r2, [r7, #7]
 80146b8:	493b      	ldr	r1, [pc, #236]	; (80147a8 <etharp_output_to_arp_index+0x124>)
 80146ba:	4613      	mov	r3, r2
 80146bc:	005b      	lsls	r3, r3, #1
 80146be:	4413      	add	r3, r2
 80146c0:	00db      	lsls	r3, r3, #3
 80146c2:	440b      	add	r3, r1
 80146c4:	3314      	adds	r3, #20
 80146c6:	781b      	ldrb	r3, [r3, #0]
 80146c8:	2b02      	cmp	r3, #2
 80146ca:	d153      	bne.n	8014774 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80146cc:	79fa      	ldrb	r2, [r7, #7]
 80146ce:	4936      	ldr	r1, [pc, #216]	; (80147a8 <etharp_output_to_arp_index+0x124>)
 80146d0:	4613      	mov	r3, r2
 80146d2:	005b      	lsls	r3, r3, #1
 80146d4:	4413      	add	r3, r2
 80146d6:	00db      	lsls	r3, r3, #3
 80146d8:	440b      	add	r3, r1
 80146da:	3312      	adds	r3, #18
 80146dc:	881b      	ldrh	r3, [r3, #0]
 80146de:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80146e2:	d919      	bls.n	8014718 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80146e4:	79fa      	ldrb	r2, [r7, #7]
 80146e6:	4613      	mov	r3, r2
 80146e8:	005b      	lsls	r3, r3, #1
 80146ea:	4413      	add	r3, r2
 80146ec:	00db      	lsls	r3, r3, #3
 80146ee:	4a2e      	ldr	r2, [pc, #184]	; (80147a8 <etharp_output_to_arp_index+0x124>)
 80146f0:	4413      	add	r3, r2
 80146f2:	3304      	adds	r3, #4
 80146f4:	4619      	mov	r1, r3
 80146f6:	68f8      	ldr	r0, [r7, #12]
 80146f8:	f000 fb4c 	bl	8014d94 <etharp_request>
 80146fc:	4603      	mov	r3, r0
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d138      	bne.n	8014774 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014702:	79fa      	ldrb	r2, [r7, #7]
 8014704:	4928      	ldr	r1, [pc, #160]	; (80147a8 <etharp_output_to_arp_index+0x124>)
 8014706:	4613      	mov	r3, r2
 8014708:	005b      	lsls	r3, r3, #1
 801470a:	4413      	add	r3, r2
 801470c:	00db      	lsls	r3, r3, #3
 801470e:	440b      	add	r3, r1
 8014710:	3314      	adds	r3, #20
 8014712:	2203      	movs	r2, #3
 8014714:	701a      	strb	r2, [r3, #0]
 8014716:	e02d      	b.n	8014774 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014718:	79fa      	ldrb	r2, [r7, #7]
 801471a:	4923      	ldr	r1, [pc, #140]	; (80147a8 <etharp_output_to_arp_index+0x124>)
 801471c:	4613      	mov	r3, r2
 801471e:	005b      	lsls	r3, r3, #1
 8014720:	4413      	add	r3, r2
 8014722:	00db      	lsls	r3, r3, #3
 8014724:	440b      	add	r3, r1
 8014726:	3312      	adds	r3, #18
 8014728:	881b      	ldrh	r3, [r3, #0]
 801472a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801472e:	d321      	bcc.n	8014774 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014730:	79fa      	ldrb	r2, [r7, #7]
 8014732:	4613      	mov	r3, r2
 8014734:	005b      	lsls	r3, r3, #1
 8014736:	4413      	add	r3, r2
 8014738:	00db      	lsls	r3, r3, #3
 801473a:	4a1b      	ldr	r2, [pc, #108]	; (80147a8 <etharp_output_to_arp_index+0x124>)
 801473c:	4413      	add	r3, r2
 801473e:	1d19      	adds	r1, r3, #4
 8014740:	79fa      	ldrb	r2, [r7, #7]
 8014742:	4613      	mov	r3, r2
 8014744:	005b      	lsls	r3, r3, #1
 8014746:	4413      	add	r3, r2
 8014748:	00db      	lsls	r3, r3, #3
 801474a:	3308      	adds	r3, #8
 801474c:	4a16      	ldr	r2, [pc, #88]	; (80147a8 <etharp_output_to_arp_index+0x124>)
 801474e:	4413      	add	r3, r2
 8014750:	3304      	adds	r3, #4
 8014752:	461a      	mov	r2, r3
 8014754:	68f8      	ldr	r0, [r7, #12]
 8014756:	f000 fafb 	bl	8014d50 <etharp_request_dst>
 801475a:	4603      	mov	r3, r0
 801475c:	2b00      	cmp	r3, #0
 801475e:	d109      	bne.n	8014774 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014760:	79fa      	ldrb	r2, [r7, #7]
 8014762:	4911      	ldr	r1, [pc, #68]	; (80147a8 <etharp_output_to_arp_index+0x124>)
 8014764:	4613      	mov	r3, r2
 8014766:	005b      	lsls	r3, r3, #1
 8014768:	4413      	add	r3, r2
 801476a:	00db      	lsls	r3, r3, #3
 801476c:	440b      	add	r3, r1
 801476e:	3314      	adds	r3, #20
 8014770:	2203      	movs	r2, #3
 8014772:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801477a:	79fa      	ldrb	r2, [r7, #7]
 801477c:	4613      	mov	r3, r2
 801477e:	005b      	lsls	r3, r3, #1
 8014780:	4413      	add	r3, r2
 8014782:	00db      	lsls	r3, r3, #3
 8014784:	3308      	adds	r3, #8
 8014786:	4a08      	ldr	r2, [pc, #32]	; (80147a8 <etharp_output_to_arp_index+0x124>)
 8014788:	4413      	add	r3, r2
 801478a:	3304      	adds	r3, #4
 801478c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014790:	9200      	str	r2, [sp, #0]
 8014792:	460a      	mov	r2, r1
 8014794:	68b9      	ldr	r1, [r7, #8]
 8014796:	68f8      	ldr	r0, [r7, #12]
 8014798:	f001 fe3a 	bl	8016410 <ethernet_output>
 801479c:	4603      	mov	r3, r0
}
 801479e:	4618      	mov	r0, r3
 80147a0:	3710      	adds	r7, #16
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd80      	pop	{r7, pc}
 80147a6:	bf00      	nop
 80147a8:	20006888 	.word	0x20006888
 80147ac:	0801a8e4 	.word	0x0801a8e4
 80147b0:	0801aa54 	.word	0x0801aa54
 80147b4:	0801a95c 	.word	0x0801a95c

080147b8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b08a      	sub	sp, #40	; 0x28
 80147bc:	af02      	add	r7, sp, #8
 80147be:	60f8      	str	r0, [r7, #12]
 80147c0:	60b9      	str	r1, [r7, #8]
 80147c2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d106      	bne.n	80147dc <etharp_output+0x24>
 80147ce:	4b73      	ldr	r3, [pc, #460]	; (801499c <etharp_output+0x1e4>)
 80147d0:	f240 321e 	movw	r2, #798	; 0x31e
 80147d4:	4972      	ldr	r1, [pc, #456]	; (80149a0 <etharp_output+0x1e8>)
 80147d6:	4873      	ldr	r0, [pc, #460]	; (80149a4 <etharp_output+0x1ec>)
 80147d8:	f002 fa34 	bl	8016c44 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80147dc:	68bb      	ldr	r3, [r7, #8]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d106      	bne.n	80147f0 <etharp_output+0x38>
 80147e2:	4b6e      	ldr	r3, [pc, #440]	; (801499c <etharp_output+0x1e4>)
 80147e4:	f240 321f 	movw	r2, #799	; 0x31f
 80147e8:	496f      	ldr	r1, [pc, #444]	; (80149a8 <etharp_output+0x1f0>)
 80147ea:	486e      	ldr	r0, [pc, #440]	; (80149a4 <etharp_output+0x1ec>)
 80147ec:	f002 fa2a 	bl	8016c44 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d106      	bne.n	8014804 <etharp_output+0x4c>
 80147f6:	4b69      	ldr	r3, [pc, #420]	; (801499c <etharp_output+0x1e4>)
 80147f8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80147fc:	496b      	ldr	r1, [pc, #428]	; (80149ac <etharp_output+0x1f4>)
 80147fe:	4869      	ldr	r0, [pc, #420]	; (80149a4 <etharp_output+0x1ec>)
 8014800:	f002 fa20 	bl	8016c44 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	68f9      	ldr	r1, [r7, #12]
 801480a:	4618      	mov	r0, r3
 801480c:	f000 fef8 	bl	8015600 <ip4_addr_isbroadcast_u32>
 8014810:	4603      	mov	r3, r0
 8014812:	2b00      	cmp	r3, #0
 8014814:	d002      	beq.n	801481c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014816:	4b66      	ldr	r3, [pc, #408]	; (80149b0 <etharp_output+0x1f8>)
 8014818:	61fb      	str	r3, [r7, #28]
 801481a:	e0af      	b.n	801497c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014824:	2be0      	cmp	r3, #224	; 0xe0
 8014826:	d118      	bne.n	801485a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014828:	2301      	movs	r3, #1
 801482a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801482c:	2300      	movs	r3, #0
 801482e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014830:	235e      	movs	r3, #94	; 0x5e
 8014832:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	3301      	adds	r3, #1
 8014838:	781b      	ldrb	r3, [r3, #0]
 801483a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801483e:	b2db      	uxtb	r3, r3
 8014840:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	3302      	adds	r3, #2
 8014846:	781b      	ldrb	r3, [r3, #0]
 8014848:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	3303      	adds	r3, #3
 801484e:	781b      	ldrb	r3, [r3, #0]
 8014850:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014852:	f107 0310 	add.w	r3, r7, #16
 8014856:	61fb      	str	r3, [r7, #28]
 8014858:	e090      	b.n	801497c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	681a      	ldr	r2, [r3, #0]
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	3304      	adds	r3, #4
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	405a      	eors	r2, r3
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	3308      	adds	r3, #8
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	4013      	ands	r3, r2
 801486e:	2b00      	cmp	r3, #0
 8014870:	d012      	beq.n	8014898 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014878:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801487c:	4293      	cmp	r3, r2
 801487e:	d00b      	beq.n	8014898 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	330c      	adds	r3, #12
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d003      	beq.n	8014892 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	330c      	adds	r3, #12
 801488e:	61bb      	str	r3, [r7, #24]
 8014890:	e002      	b.n	8014898 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014892:	f06f 0303 	mvn.w	r3, #3
 8014896:	e07d      	b.n	8014994 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014898:	4b46      	ldr	r3, [pc, #280]	; (80149b4 <etharp_output+0x1fc>)
 801489a:	781b      	ldrb	r3, [r3, #0]
 801489c:	4619      	mov	r1, r3
 801489e:	4a46      	ldr	r2, [pc, #280]	; (80149b8 <etharp_output+0x200>)
 80148a0:	460b      	mov	r3, r1
 80148a2:	005b      	lsls	r3, r3, #1
 80148a4:	440b      	add	r3, r1
 80148a6:	00db      	lsls	r3, r3, #3
 80148a8:	4413      	add	r3, r2
 80148aa:	3314      	adds	r3, #20
 80148ac:	781b      	ldrb	r3, [r3, #0]
 80148ae:	2b01      	cmp	r3, #1
 80148b0:	d925      	bls.n	80148fe <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80148b2:	4b40      	ldr	r3, [pc, #256]	; (80149b4 <etharp_output+0x1fc>)
 80148b4:	781b      	ldrb	r3, [r3, #0]
 80148b6:	4619      	mov	r1, r3
 80148b8:	4a3f      	ldr	r2, [pc, #252]	; (80149b8 <etharp_output+0x200>)
 80148ba:	460b      	mov	r3, r1
 80148bc:	005b      	lsls	r3, r3, #1
 80148be:	440b      	add	r3, r1
 80148c0:	00db      	lsls	r3, r3, #3
 80148c2:	4413      	add	r3, r2
 80148c4:	3308      	adds	r3, #8
 80148c6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80148c8:	68fa      	ldr	r2, [r7, #12]
 80148ca:	429a      	cmp	r2, r3
 80148cc:	d117      	bne.n	80148fe <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80148ce:	69bb      	ldr	r3, [r7, #24]
 80148d0:	681a      	ldr	r2, [r3, #0]
 80148d2:	4b38      	ldr	r3, [pc, #224]	; (80149b4 <etharp_output+0x1fc>)
 80148d4:	781b      	ldrb	r3, [r3, #0]
 80148d6:	4618      	mov	r0, r3
 80148d8:	4937      	ldr	r1, [pc, #220]	; (80149b8 <etharp_output+0x200>)
 80148da:	4603      	mov	r3, r0
 80148dc:	005b      	lsls	r3, r3, #1
 80148de:	4403      	add	r3, r0
 80148e0:	00db      	lsls	r3, r3, #3
 80148e2:	440b      	add	r3, r1
 80148e4:	3304      	adds	r3, #4
 80148e6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80148e8:	429a      	cmp	r2, r3
 80148ea:	d108      	bne.n	80148fe <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80148ec:	4b31      	ldr	r3, [pc, #196]	; (80149b4 <etharp_output+0x1fc>)
 80148ee:	781b      	ldrb	r3, [r3, #0]
 80148f0:	461a      	mov	r2, r3
 80148f2:	68b9      	ldr	r1, [r7, #8]
 80148f4:	68f8      	ldr	r0, [r7, #12]
 80148f6:	f7ff fec5 	bl	8014684 <etharp_output_to_arp_index>
 80148fa:	4603      	mov	r3, r0
 80148fc:	e04a      	b.n	8014994 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80148fe:	2300      	movs	r3, #0
 8014900:	75fb      	strb	r3, [r7, #23]
 8014902:	e031      	b.n	8014968 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014904:	7dfa      	ldrb	r2, [r7, #23]
 8014906:	492c      	ldr	r1, [pc, #176]	; (80149b8 <etharp_output+0x200>)
 8014908:	4613      	mov	r3, r2
 801490a:	005b      	lsls	r3, r3, #1
 801490c:	4413      	add	r3, r2
 801490e:	00db      	lsls	r3, r3, #3
 8014910:	440b      	add	r3, r1
 8014912:	3314      	adds	r3, #20
 8014914:	781b      	ldrb	r3, [r3, #0]
 8014916:	2b01      	cmp	r3, #1
 8014918:	d923      	bls.n	8014962 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801491a:	7dfa      	ldrb	r2, [r7, #23]
 801491c:	4926      	ldr	r1, [pc, #152]	; (80149b8 <etharp_output+0x200>)
 801491e:	4613      	mov	r3, r2
 8014920:	005b      	lsls	r3, r3, #1
 8014922:	4413      	add	r3, r2
 8014924:	00db      	lsls	r3, r3, #3
 8014926:	440b      	add	r3, r1
 8014928:	3308      	adds	r3, #8
 801492a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801492c:	68fa      	ldr	r2, [r7, #12]
 801492e:	429a      	cmp	r2, r3
 8014930:	d117      	bne.n	8014962 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014932:	69bb      	ldr	r3, [r7, #24]
 8014934:	6819      	ldr	r1, [r3, #0]
 8014936:	7dfa      	ldrb	r2, [r7, #23]
 8014938:	481f      	ldr	r0, [pc, #124]	; (80149b8 <etharp_output+0x200>)
 801493a:	4613      	mov	r3, r2
 801493c:	005b      	lsls	r3, r3, #1
 801493e:	4413      	add	r3, r2
 8014940:	00db      	lsls	r3, r3, #3
 8014942:	4403      	add	r3, r0
 8014944:	3304      	adds	r3, #4
 8014946:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014948:	4299      	cmp	r1, r3
 801494a:	d10a      	bne.n	8014962 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801494c:	4a19      	ldr	r2, [pc, #100]	; (80149b4 <etharp_output+0x1fc>)
 801494e:	7dfb      	ldrb	r3, [r7, #23]
 8014950:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014952:	7dfb      	ldrb	r3, [r7, #23]
 8014954:	461a      	mov	r2, r3
 8014956:	68b9      	ldr	r1, [r7, #8]
 8014958:	68f8      	ldr	r0, [r7, #12]
 801495a:	f7ff fe93 	bl	8014684 <etharp_output_to_arp_index>
 801495e:	4603      	mov	r3, r0
 8014960:	e018      	b.n	8014994 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014962:	7dfb      	ldrb	r3, [r7, #23]
 8014964:	3301      	adds	r3, #1
 8014966:	75fb      	strb	r3, [r7, #23]
 8014968:	7dfb      	ldrb	r3, [r7, #23]
 801496a:	2b09      	cmp	r3, #9
 801496c:	d9ca      	bls.n	8014904 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801496e:	68ba      	ldr	r2, [r7, #8]
 8014970:	69b9      	ldr	r1, [r7, #24]
 8014972:	68f8      	ldr	r0, [r7, #12]
 8014974:	f000 f822 	bl	80149bc <etharp_query>
 8014978:	4603      	mov	r3, r0
 801497a:	e00b      	b.n	8014994 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014982:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014986:	9300      	str	r3, [sp, #0]
 8014988:	69fb      	ldr	r3, [r7, #28]
 801498a:	68b9      	ldr	r1, [r7, #8]
 801498c:	68f8      	ldr	r0, [r7, #12]
 801498e:	f001 fd3f 	bl	8016410 <ethernet_output>
 8014992:	4603      	mov	r3, r0
}
 8014994:	4618      	mov	r0, r3
 8014996:	3720      	adds	r7, #32
 8014998:	46bd      	mov	sp, r7
 801499a:	bd80      	pop	{r7, pc}
 801499c:	0801a8e4 	.word	0x0801a8e4
 80149a0:	0801aa34 	.word	0x0801aa34
 80149a4:	0801a95c 	.word	0x0801a95c
 80149a8:	0801aa84 	.word	0x0801aa84
 80149ac:	0801aa24 	.word	0x0801aa24
 80149b0:	0801b0d8 	.word	0x0801b0d8
 80149b4:	20006978 	.word	0x20006978
 80149b8:	20006888 	.word	0x20006888

080149bc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80149bc:	b580      	push	{r7, lr}
 80149be:	b08c      	sub	sp, #48	; 0x30
 80149c0:	af02      	add	r7, sp, #8
 80149c2:	60f8      	str	r0, [r7, #12]
 80149c4:	60b9      	str	r1, [r7, #8]
 80149c6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	3326      	adds	r3, #38	; 0x26
 80149cc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80149ce:	23ff      	movs	r3, #255	; 0xff
 80149d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80149d4:	2300      	movs	r3, #0
 80149d6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80149d8:	68bb      	ldr	r3, [r7, #8]
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	68f9      	ldr	r1, [r7, #12]
 80149de:	4618      	mov	r0, r3
 80149e0:	f000 fe0e 	bl	8015600 <ip4_addr_isbroadcast_u32>
 80149e4:	4603      	mov	r3, r0
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d10c      	bne.n	8014a04 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80149ea:	68bb      	ldr	r3, [r7, #8]
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80149f2:	2be0      	cmp	r3, #224	; 0xe0
 80149f4:	d006      	beq.n	8014a04 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80149f6:	68bb      	ldr	r3, [r7, #8]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d003      	beq.n	8014a04 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80149fc:	68bb      	ldr	r3, [r7, #8]
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d102      	bne.n	8014a0a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014a04:	f06f 030f 	mvn.w	r3, #15
 8014a08:	e101      	b.n	8014c0e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014a0a:	68fa      	ldr	r2, [r7, #12]
 8014a0c:	2101      	movs	r1, #1
 8014a0e:	68b8      	ldr	r0, [r7, #8]
 8014a10:	f7ff fb60 	bl	80140d4 <etharp_find_entry>
 8014a14:	4603      	mov	r3, r0
 8014a16:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014a18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	da02      	bge.n	8014a26 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014a20:	8a7b      	ldrh	r3, [r7, #18]
 8014a22:	b25b      	sxtb	r3, r3
 8014a24:	e0f3      	b.n	8014c0e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014a26:	8a7b      	ldrh	r3, [r7, #18]
 8014a28:	2b7e      	cmp	r3, #126	; 0x7e
 8014a2a:	d906      	bls.n	8014a3a <etharp_query+0x7e>
 8014a2c:	4b7a      	ldr	r3, [pc, #488]	; (8014c18 <etharp_query+0x25c>)
 8014a2e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014a32:	497a      	ldr	r1, [pc, #488]	; (8014c1c <etharp_query+0x260>)
 8014a34:	487a      	ldr	r0, [pc, #488]	; (8014c20 <etharp_query+0x264>)
 8014a36:	f002 f905 	bl	8016c44 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014a3a:	8a7b      	ldrh	r3, [r7, #18]
 8014a3c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014a3e:	7c7a      	ldrb	r2, [r7, #17]
 8014a40:	4978      	ldr	r1, [pc, #480]	; (8014c24 <etharp_query+0x268>)
 8014a42:	4613      	mov	r3, r2
 8014a44:	005b      	lsls	r3, r3, #1
 8014a46:	4413      	add	r3, r2
 8014a48:	00db      	lsls	r3, r3, #3
 8014a4a:	440b      	add	r3, r1
 8014a4c:	3314      	adds	r3, #20
 8014a4e:	781b      	ldrb	r3, [r3, #0]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d115      	bne.n	8014a80 <etharp_query+0xc4>
    is_new_entry = 1;
 8014a54:	2301      	movs	r3, #1
 8014a56:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014a58:	7c7a      	ldrb	r2, [r7, #17]
 8014a5a:	4972      	ldr	r1, [pc, #456]	; (8014c24 <etharp_query+0x268>)
 8014a5c:	4613      	mov	r3, r2
 8014a5e:	005b      	lsls	r3, r3, #1
 8014a60:	4413      	add	r3, r2
 8014a62:	00db      	lsls	r3, r3, #3
 8014a64:	440b      	add	r3, r1
 8014a66:	3314      	adds	r3, #20
 8014a68:	2201      	movs	r2, #1
 8014a6a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014a6c:	7c7a      	ldrb	r2, [r7, #17]
 8014a6e:	496d      	ldr	r1, [pc, #436]	; (8014c24 <etharp_query+0x268>)
 8014a70:	4613      	mov	r3, r2
 8014a72:	005b      	lsls	r3, r3, #1
 8014a74:	4413      	add	r3, r2
 8014a76:	00db      	lsls	r3, r3, #3
 8014a78:	440b      	add	r3, r1
 8014a7a:	3308      	adds	r3, #8
 8014a7c:	68fa      	ldr	r2, [r7, #12]
 8014a7e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014a80:	7c7a      	ldrb	r2, [r7, #17]
 8014a82:	4968      	ldr	r1, [pc, #416]	; (8014c24 <etharp_query+0x268>)
 8014a84:	4613      	mov	r3, r2
 8014a86:	005b      	lsls	r3, r3, #1
 8014a88:	4413      	add	r3, r2
 8014a8a:	00db      	lsls	r3, r3, #3
 8014a8c:	440b      	add	r3, r1
 8014a8e:	3314      	adds	r3, #20
 8014a90:	781b      	ldrb	r3, [r3, #0]
 8014a92:	2b01      	cmp	r3, #1
 8014a94:	d011      	beq.n	8014aba <etharp_query+0xfe>
 8014a96:	7c7a      	ldrb	r2, [r7, #17]
 8014a98:	4962      	ldr	r1, [pc, #392]	; (8014c24 <etharp_query+0x268>)
 8014a9a:	4613      	mov	r3, r2
 8014a9c:	005b      	lsls	r3, r3, #1
 8014a9e:	4413      	add	r3, r2
 8014aa0:	00db      	lsls	r3, r3, #3
 8014aa2:	440b      	add	r3, r1
 8014aa4:	3314      	adds	r3, #20
 8014aa6:	781b      	ldrb	r3, [r3, #0]
 8014aa8:	2b01      	cmp	r3, #1
 8014aaa:	d806      	bhi.n	8014aba <etharp_query+0xfe>
 8014aac:	4b5a      	ldr	r3, [pc, #360]	; (8014c18 <etharp_query+0x25c>)
 8014aae:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014ab2:	495d      	ldr	r1, [pc, #372]	; (8014c28 <etharp_query+0x26c>)
 8014ab4:	485a      	ldr	r0, [pc, #360]	; (8014c20 <etharp_query+0x264>)
 8014ab6:	f002 f8c5 	bl	8016c44 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014aba:	6a3b      	ldr	r3, [r7, #32]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d102      	bne.n	8014ac6 <etharp_query+0x10a>
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d10c      	bne.n	8014ae0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014ac6:	68b9      	ldr	r1, [r7, #8]
 8014ac8:	68f8      	ldr	r0, [r7, #12]
 8014aca:	f000 f963 	bl	8014d94 <etharp_request>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d102      	bne.n	8014ae0 <etharp_query+0x124>
      return result;
 8014ada:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014ade:	e096      	b.n	8014c0e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d106      	bne.n	8014af4 <etharp_query+0x138>
 8014ae6:	4b4c      	ldr	r3, [pc, #304]	; (8014c18 <etharp_query+0x25c>)
 8014ae8:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014aec:	494f      	ldr	r1, [pc, #316]	; (8014c2c <etharp_query+0x270>)
 8014aee:	484c      	ldr	r0, [pc, #304]	; (8014c20 <etharp_query+0x264>)
 8014af0:	f002 f8a8 	bl	8016c44 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014af4:	7c7a      	ldrb	r2, [r7, #17]
 8014af6:	494b      	ldr	r1, [pc, #300]	; (8014c24 <etharp_query+0x268>)
 8014af8:	4613      	mov	r3, r2
 8014afa:	005b      	lsls	r3, r3, #1
 8014afc:	4413      	add	r3, r2
 8014afe:	00db      	lsls	r3, r3, #3
 8014b00:	440b      	add	r3, r1
 8014b02:	3314      	adds	r3, #20
 8014b04:	781b      	ldrb	r3, [r3, #0]
 8014b06:	2b01      	cmp	r3, #1
 8014b08:	d917      	bls.n	8014b3a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014b0a:	4a49      	ldr	r2, [pc, #292]	; (8014c30 <etharp_query+0x274>)
 8014b0c:	7c7b      	ldrb	r3, [r7, #17]
 8014b0e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014b10:	7c7a      	ldrb	r2, [r7, #17]
 8014b12:	4613      	mov	r3, r2
 8014b14:	005b      	lsls	r3, r3, #1
 8014b16:	4413      	add	r3, r2
 8014b18:	00db      	lsls	r3, r3, #3
 8014b1a:	3308      	adds	r3, #8
 8014b1c:	4a41      	ldr	r2, [pc, #260]	; (8014c24 <etharp_query+0x268>)
 8014b1e:	4413      	add	r3, r2
 8014b20:	3304      	adds	r3, #4
 8014b22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014b26:	9200      	str	r2, [sp, #0]
 8014b28:	697a      	ldr	r2, [r7, #20]
 8014b2a:	6879      	ldr	r1, [r7, #4]
 8014b2c:	68f8      	ldr	r0, [r7, #12]
 8014b2e:	f001 fc6f 	bl	8016410 <ethernet_output>
 8014b32:	4603      	mov	r3, r0
 8014b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014b38:	e067      	b.n	8014c0a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014b3a:	7c7a      	ldrb	r2, [r7, #17]
 8014b3c:	4939      	ldr	r1, [pc, #228]	; (8014c24 <etharp_query+0x268>)
 8014b3e:	4613      	mov	r3, r2
 8014b40:	005b      	lsls	r3, r3, #1
 8014b42:	4413      	add	r3, r2
 8014b44:	00db      	lsls	r3, r3, #3
 8014b46:	440b      	add	r3, r1
 8014b48:	3314      	adds	r3, #20
 8014b4a:	781b      	ldrb	r3, [r3, #0]
 8014b4c:	2b01      	cmp	r3, #1
 8014b4e:	d15c      	bne.n	8014c0a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014b50:	2300      	movs	r3, #0
 8014b52:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014b58:	e01c      	b.n	8014b94 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014b5a:	69fb      	ldr	r3, [r7, #28]
 8014b5c:	895a      	ldrh	r2, [r3, #10]
 8014b5e:	69fb      	ldr	r3, [r7, #28]
 8014b60:	891b      	ldrh	r3, [r3, #8]
 8014b62:	429a      	cmp	r2, r3
 8014b64:	d10a      	bne.n	8014b7c <etharp_query+0x1c0>
 8014b66:	69fb      	ldr	r3, [r7, #28]
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d006      	beq.n	8014b7c <etharp_query+0x1c0>
 8014b6e:	4b2a      	ldr	r3, [pc, #168]	; (8014c18 <etharp_query+0x25c>)
 8014b70:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014b74:	492f      	ldr	r1, [pc, #188]	; (8014c34 <etharp_query+0x278>)
 8014b76:	482a      	ldr	r0, [pc, #168]	; (8014c20 <etharp_query+0x264>)
 8014b78:	f002 f864 	bl	8016c44 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014b7c:	69fb      	ldr	r3, [r7, #28]
 8014b7e:	7b1b      	ldrb	r3, [r3, #12]
 8014b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d002      	beq.n	8014b8e <etharp_query+0x1d2>
        copy_needed = 1;
 8014b88:	2301      	movs	r3, #1
 8014b8a:	61bb      	str	r3, [r7, #24]
        break;
 8014b8c:	e005      	b.n	8014b9a <etharp_query+0x1de>
      }
      p = p->next;
 8014b8e:	69fb      	ldr	r3, [r7, #28]
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014b94:	69fb      	ldr	r3, [r7, #28]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d1df      	bne.n	8014b5a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014b9a:	69bb      	ldr	r3, [r7, #24]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d007      	beq.n	8014bb0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014ba0:	687a      	ldr	r2, [r7, #4]
 8014ba2:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014ba6:	200e      	movs	r0, #14
 8014ba8:	f7f8 fb6c 	bl	800d284 <pbuf_clone>
 8014bac:	61f8      	str	r0, [r7, #28]
 8014bae:	e004      	b.n	8014bba <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014bb4:	69f8      	ldr	r0, [r7, #28]
 8014bb6:	f7f8 f993 	bl	800cee0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014bba:	69fb      	ldr	r3, [r7, #28]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d021      	beq.n	8014c04 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014bc0:	7c7a      	ldrb	r2, [r7, #17]
 8014bc2:	4918      	ldr	r1, [pc, #96]	; (8014c24 <etharp_query+0x268>)
 8014bc4:	4613      	mov	r3, r2
 8014bc6:	005b      	lsls	r3, r3, #1
 8014bc8:	4413      	add	r3, r2
 8014bca:	00db      	lsls	r3, r3, #3
 8014bcc:	440b      	add	r3, r1
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d00a      	beq.n	8014bea <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014bd4:	7c7a      	ldrb	r2, [r7, #17]
 8014bd6:	4913      	ldr	r1, [pc, #76]	; (8014c24 <etharp_query+0x268>)
 8014bd8:	4613      	mov	r3, r2
 8014bda:	005b      	lsls	r3, r3, #1
 8014bdc:	4413      	add	r3, r2
 8014bde:	00db      	lsls	r3, r3, #3
 8014be0:	440b      	add	r3, r1
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	4618      	mov	r0, r3
 8014be6:	f7f8 f8d5 	bl	800cd94 <pbuf_free>
      }
      arp_table[i].q = p;
 8014bea:	7c7a      	ldrb	r2, [r7, #17]
 8014bec:	490d      	ldr	r1, [pc, #52]	; (8014c24 <etharp_query+0x268>)
 8014bee:	4613      	mov	r3, r2
 8014bf0:	005b      	lsls	r3, r3, #1
 8014bf2:	4413      	add	r3, r2
 8014bf4:	00db      	lsls	r3, r3, #3
 8014bf6:	440b      	add	r3, r1
 8014bf8:	69fa      	ldr	r2, [r7, #28]
 8014bfa:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014c02:	e002      	b.n	8014c0a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014c04:	23ff      	movs	r3, #255	; 0xff
 8014c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014c0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014c0e:	4618      	mov	r0, r3
 8014c10:	3728      	adds	r7, #40	; 0x28
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bd80      	pop	{r7, pc}
 8014c16:	bf00      	nop
 8014c18:	0801a8e4 	.word	0x0801a8e4
 8014c1c:	0801aa90 	.word	0x0801aa90
 8014c20:	0801a95c 	.word	0x0801a95c
 8014c24:	20006888 	.word	0x20006888
 8014c28:	0801aaa0 	.word	0x0801aaa0
 8014c2c:	0801aa84 	.word	0x0801aa84
 8014c30:	20006978 	.word	0x20006978
 8014c34:	0801aac8 	.word	0x0801aac8

08014c38 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b08a      	sub	sp, #40	; 0x28
 8014c3c:	af02      	add	r7, sp, #8
 8014c3e:	60f8      	str	r0, [r7, #12]
 8014c40:	60b9      	str	r1, [r7, #8]
 8014c42:	607a      	str	r2, [r7, #4]
 8014c44:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014c46:	2300      	movs	r3, #0
 8014c48:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d106      	bne.n	8014c5e <etharp_raw+0x26>
 8014c50:	4b3a      	ldr	r3, [pc, #232]	; (8014d3c <etharp_raw+0x104>)
 8014c52:	f240 4257 	movw	r2, #1111	; 0x457
 8014c56:	493a      	ldr	r1, [pc, #232]	; (8014d40 <etharp_raw+0x108>)
 8014c58:	483a      	ldr	r0, [pc, #232]	; (8014d44 <etharp_raw+0x10c>)
 8014c5a:	f001 fff3 	bl	8016c44 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014c5e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014c62:	211c      	movs	r1, #28
 8014c64:	200e      	movs	r0, #14
 8014c66:	f7f7 fdb1 	bl	800c7cc <pbuf_alloc>
 8014c6a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014c6c:	69bb      	ldr	r3, [r7, #24]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d102      	bne.n	8014c78 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014c72:	f04f 33ff 	mov.w	r3, #4294967295
 8014c76:	e05d      	b.n	8014d34 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014c78:	69bb      	ldr	r3, [r7, #24]
 8014c7a:	895b      	ldrh	r3, [r3, #10]
 8014c7c:	2b1b      	cmp	r3, #27
 8014c7e:	d806      	bhi.n	8014c8e <etharp_raw+0x56>
 8014c80:	4b2e      	ldr	r3, [pc, #184]	; (8014d3c <etharp_raw+0x104>)
 8014c82:	f240 4262 	movw	r2, #1122	; 0x462
 8014c86:	4930      	ldr	r1, [pc, #192]	; (8014d48 <etharp_raw+0x110>)
 8014c88:	482e      	ldr	r0, [pc, #184]	; (8014d44 <etharp_raw+0x10c>)
 8014c8a:	f001 ffdb 	bl	8016c44 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014c8e:	69bb      	ldr	r3, [r7, #24]
 8014c90:	685b      	ldr	r3, [r3, #4]
 8014c92:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014c94:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014c96:	4618      	mov	r0, r3
 8014c98:	f7f6 fd34 	bl	800b704 <lwip_htons>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	461a      	mov	r2, r3
 8014ca0:	697b      	ldr	r3, [r7, #20]
 8014ca2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014caa:	2b06      	cmp	r3, #6
 8014cac:	d006      	beq.n	8014cbc <etharp_raw+0x84>
 8014cae:	4b23      	ldr	r3, [pc, #140]	; (8014d3c <etharp_raw+0x104>)
 8014cb0:	f240 4269 	movw	r2, #1129	; 0x469
 8014cb4:	4925      	ldr	r1, [pc, #148]	; (8014d4c <etharp_raw+0x114>)
 8014cb6:	4823      	ldr	r0, [pc, #140]	; (8014d44 <etharp_raw+0x10c>)
 8014cb8:	f001 ffc4 	bl	8016c44 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014cbc:	697b      	ldr	r3, [r7, #20]
 8014cbe:	3308      	adds	r3, #8
 8014cc0:	2206      	movs	r2, #6
 8014cc2:	6839      	ldr	r1, [r7, #0]
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	f001 fefd 	bl	8016ac4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014cca:	697b      	ldr	r3, [r7, #20]
 8014ccc:	3312      	adds	r3, #18
 8014cce:	2206      	movs	r2, #6
 8014cd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	f001 fef6 	bl	8016ac4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014cd8:	697b      	ldr	r3, [r7, #20]
 8014cda:	330e      	adds	r3, #14
 8014cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014cde:	6812      	ldr	r2, [r2, #0]
 8014ce0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014ce2:	697b      	ldr	r3, [r7, #20]
 8014ce4:	3318      	adds	r3, #24
 8014ce6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014ce8:	6812      	ldr	r2, [r2, #0]
 8014cea:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014cec:	697b      	ldr	r3, [r7, #20]
 8014cee:	2200      	movs	r2, #0
 8014cf0:	701a      	strb	r2, [r3, #0]
 8014cf2:	2200      	movs	r2, #0
 8014cf4:	f042 0201 	orr.w	r2, r2, #1
 8014cf8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014cfa:	697b      	ldr	r3, [r7, #20]
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	f042 0208 	orr.w	r2, r2, #8
 8014d02:	709a      	strb	r2, [r3, #2]
 8014d04:	2200      	movs	r2, #0
 8014d06:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014d08:	697b      	ldr	r3, [r7, #20]
 8014d0a:	2206      	movs	r2, #6
 8014d0c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014d0e:	697b      	ldr	r3, [r7, #20]
 8014d10:	2204      	movs	r2, #4
 8014d12:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014d14:	f640 0306 	movw	r3, #2054	; 0x806
 8014d18:	9300      	str	r3, [sp, #0]
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	68ba      	ldr	r2, [r7, #8]
 8014d1e:	69b9      	ldr	r1, [r7, #24]
 8014d20:	68f8      	ldr	r0, [r7, #12]
 8014d22:	f001 fb75 	bl	8016410 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014d26:	69b8      	ldr	r0, [r7, #24]
 8014d28:	f7f8 f834 	bl	800cd94 <pbuf_free>
  p = NULL;
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014d30:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014d34:	4618      	mov	r0, r3
 8014d36:	3720      	adds	r7, #32
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	bd80      	pop	{r7, pc}
 8014d3c:	0801a8e4 	.word	0x0801a8e4
 8014d40:	0801aa34 	.word	0x0801aa34
 8014d44:	0801a95c 	.word	0x0801a95c
 8014d48:	0801aae4 	.word	0x0801aae4
 8014d4c:	0801ab18 	.word	0x0801ab18

08014d50 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b088      	sub	sp, #32
 8014d54:	af04      	add	r7, sp, #16
 8014d56:	60f8      	str	r0, [r7, #12]
 8014d58:	60b9      	str	r1, [r7, #8]
 8014d5a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014d6c:	2201      	movs	r2, #1
 8014d6e:	9203      	str	r2, [sp, #12]
 8014d70:	68ba      	ldr	r2, [r7, #8]
 8014d72:	9202      	str	r2, [sp, #8]
 8014d74:	4a06      	ldr	r2, [pc, #24]	; (8014d90 <etharp_request_dst+0x40>)
 8014d76:	9201      	str	r2, [sp, #4]
 8014d78:	9300      	str	r3, [sp, #0]
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	687a      	ldr	r2, [r7, #4]
 8014d7e:	68f8      	ldr	r0, [r7, #12]
 8014d80:	f7ff ff5a 	bl	8014c38 <etharp_raw>
 8014d84:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014d86:	4618      	mov	r0, r3
 8014d88:	3710      	adds	r7, #16
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	bd80      	pop	{r7, pc}
 8014d8e:	bf00      	nop
 8014d90:	0801b0e0 	.word	0x0801b0e0

08014d94 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014d94:	b580      	push	{r7, lr}
 8014d96:	b082      	sub	sp, #8
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	6078      	str	r0, [r7, #4]
 8014d9c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014d9e:	4a05      	ldr	r2, [pc, #20]	; (8014db4 <etharp_request+0x20>)
 8014da0:	6839      	ldr	r1, [r7, #0]
 8014da2:	6878      	ldr	r0, [r7, #4]
 8014da4:	f7ff ffd4 	bl	8014d50 <etharp_request_dst>
 8014da8:	4603      	mov	r3, r0
}
 8014daa:	4618      	mov	r0, r3
 8014dac:	3708      	adds	r7, #8
 8014dae:	46bd      	mov	sp, r7
 8014db0:	bd80      	pop	{r7, pc}
 8014db2:	bf00      	nop
 8014db4:	0801b0d8 	.word	0x0801b0d8

08014db8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b08e      	sub	sp, #56	; 0x38
 8014dbc:	af04      	add	r7, sp, #16
 8014dbe:	6078      	str	r0, [r7, #4]
 8014dc0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014dc2:	4b79      	ldr	r3, [pc, #484]	; (8014fa8 <icmp_input+0x1f0>)
 8014dc4:	689b      	ldr	r3, [r3, #8]
 8014dc6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dca:	781b      	ldrb	r3, [r3, #0]
 8014dcc:	f003 030f 	and.w	r3, r3, #15
 8014dd0:	b2db      	uxtb	r3, r3
 8014dd2:	009b      	lsls	r3, r3, #2
 8014dd4:	b2db      	uxtb	r3, r3
 8014dd6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014dd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014dda:	2b13      	cmp	r3, #19
 8014ddc:	f240 80cd 	bls.w	8014f7a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	895b      	ldrh	r3, [r3, #10]
 8014de4:	2b03      	cmp	r3, #3
 8014de6:	f240 80ca 	bls.w	8014f7e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	685b      	ldr	r3, [r3, #4]
 8014dee:	781b      	ldrb	r3, [r3, #0]
 8014df0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014df4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	f000 80b7 	beq.w	8014f6c <icmp_input+0x1b4>
 8014dfe:	2b08      	cmp	r3, #8
 8014e00:	f040 80b7 	bne.w	8014f72 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014e04:	4b69      	ldr	r3, [pc, #420]	; (8014fac <icmp_input+0x1f4>)
 8014e06:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014e08:	4b67      	ldr	r3, [pc, #412]	; (8014fa8 <icmp_input+0x1f0>)
 8014e0a:	695b      	ldr	r3, [r3, #20]
 8014e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014e10:	2be0      	cmp	r3, #224	; 0xe0
 8014e12:	f000 80bb 	beq.w	8014f8c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014e16:	4b64      	ldr	r3, [pc, #400]	; (8014fa8 <icmp_input+0x1f0>)
 8014e18:	695b      	ldr	r3, [r3, #20]
 8014e1a:	4a63      	ldr	r2, [pc, #396]	; (8014fa8 <icmp_input+0x1f0>)
 8014e1c:	6812      	ldr	r2, [r2, #0]
 8014e1e:	4611      	mov	r1, r2
 8014e20:	4618      	mov	r0, r3
 8014e22:	f000 fbed 	bl	8015600 <ip4_addr_isbroadcast_u32>
 8014e26:	4603      	mov	r3, r0
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	f040 80b1 	bne.w	8014f90 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	891b      	ldrh	r3, [r3, #8]
 8014e32:	2b07      	cmp	r3, #7
 8014e34:	f240 80a5 	bls.w	8014f82 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014e38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014e3a:	330e      	adds	r3, #14
 8014e3c:	4619      	mov	r1, r3
 8014e3e:	6878      	ldr	r0, [r7, #4]
 8014e40:	f7f7 ff12 	bl	800cc68 <pbuf_add_header>
 8014e44:	4603      	mov	r3, r0
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d04b      	beq.n	8014ee2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	891a      	ldrh	r2, [r3, #8]
 8014e4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014e50:	4413      	add	r3, r2
 8014e52:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	891b      	ldrh	r3, [r3, #8]
 8014e58:	8b7a      	ldrh	r2, [r7, #26]
 8014e5a:	429a      	cmp	r2, r3
 8014e5c:	f0c0 809a 	bcc.w	8014f94 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014e60:	8b7b      	ldrh	r3, [r7, #26]
 8014e62:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014e66:	4619      	mov	r1, r3
 8014e68:	200e      	movs	r0, #14
 8014e6a:	f7f7 fcaf 	bl	800c7cc <pbuf_alloc>
 8014e6e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014e70:	697b      	ldr	r3, [r7, #20]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	f000 8090 	beq.w	8014f98 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014e78:	697b      	ldr	r3, [r7, #20]
 8014e7a:	895b      	ldrh	r3, [r3, #10]
 8014e7c:	461a      	mov	r2, r3
 8014e7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014e80:	3308      	adds	r3, #8
 8014e82:	429a      	cmp	r2, r3
 8014e84:	d203      	bcs.n	8014e8e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014e86:	6978      	ldr	r0, [r7, #20]
 8014e88:	f7f7 ff84 	bl	800cd94 <pbuf_free>
          goto icmperr;
 8014e8c:	e085      	b.n	8014f9a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014e8e:	697b      	ldr	r3, [r7, #20]
 8014e90:	685b      	ldr	r3, [r3, #4]
 8014e92:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014e94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014e96:	4618      	mov	r0, r3
 8014e98:	f001 fe14 	bl	8016ac4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014e9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014e9e:	4619      	mov	r1, r3
 8014ea0:	6978      	ldr	r0, [r7, #20]
 8014ea2:	f7f7 fef1 	bl	800cc88 <pbuf_remove_header>
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d009      	beq.n	8014ec0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014eac:	4b40      	ldr	r3, [pc, #256]	; (8014fb0 <icmp_input+0x1f8>)
 8014eae:	22b6      	movs	r2, #182	; 0xb6
 8014eb0:	4940      	ldr	r1, [pc, #256]	; (8014fb4 <icmp_input+0x1fc>)
 8014eb2:	4841      	ldr	r0, [pc, #260]	; (8014fb8 <icmp_input+0x200>)
 8014eb4:	f001 fec6 	bl	8016c44 <iprintf>
          pbuf_free(r);
 8014eb8:	6978      	ldr	r0, [r7, #20]
 8014eba:	f7f7 ff6b 	bl	800cd94 <pbuf_free>
          goto icmperr;
 8014ebe:	e06c      	b.n	8014f9a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014ec0:	6879      	ldr	r1, [r7, #4]
 8014ec2:	6978      	ldr	r0, [r7, #20]
 8014ec4:	f7f8 f89a 	bl	800cffc <pbuf_copy>
 8014ec8:	4603      	mov	r3, r0
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d003      	beq.n	8014ed6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014ece:	6978      	ldr	r0, [r7, #20]
 8014ed0:	f7f7 ff60 	bl	800cd94 <pbuf_free>
          goto icmperr;
 8014ed4:	e061      	b.n	8014f9a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014ed6:	6878      	ldr	r0, [r7, #4]
 8014ed8:	f7f7 ff5c 	bl	800cd94 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014edc:	697b      	ldr	r3, [r7, #20]
 8014ede:	607b      	str	r3, [r7, #4]
 8014ee0:	e00f      	b.n	8014f02 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014ee2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ee4:	330e      	adds	r3, #14
 8014ee6:	4619      	mov	r1, r3
 8014ee8:	6878      	ldr	r0, [r7, #4]
 8014eea:	f7f7 fecd 	bl	800cc88 <pbuf_remove_header>
 8014eee:	4603      	mov	r3, r0
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d006      	beq.n	8014f02 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014ef4:	4b2e      	ldr	r3, [pc, #184]	; (8014fb0 <icmp_input+0x1f8>)
 8014ef6:	22c7      	movs	r2, #199	; 0xc7
 8014ef8:	4930      	ldr	r1, [pc, #192]	; (8014fbc <icmp_input+0x204>)
 8014efa:	482f      	ldr	r0, [pc, #188]	; (8014fb8 <icmp_input+0x200>)
 8014efc:	f001 fea2 	bl	8016c44 <iprintf>
          goto icmperr;
 8014f00:	e04b      	b.n	8014f9a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	685b      	ldr	r3, [r3, #4]
 8014f06:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014f08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f0a:	4619      	mov	r1, r3
 8014f0c:	6878      	ldr	r0, [r7, #4]
 8014f0e:	f7f7 feab 	bl	800cc68 <pbuf_add_header>
 8014f12:	4603      	mov	r3, r0
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d12b      	bne.n	8014f70 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	685b      	ldr	r3, [r3, #4]
 8014f1c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014f1e:	69fb      	ldr	r3, [r7, #28]
 8014f20:	681a      	ldr	r2, [r3, #0]
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014f26:	4b20      	ldr	r3, [pc, #128]	; (8014fa8 <icmp_input+0x1f0>)
 8014f28:	691a      	ldr	r2, [r3, #16]
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014f2e:	693b      	ldr	r3, [r7, #16]
 8014f30:	2200      	movs	r2, #0
 8014f32:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014f34:	693b      	ldr	r3, [r7, #16]
 8014f36:	2200      	movs	r2, #0
 8014f38:	709a      	strb	r2, [r3, #2]
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	22ff      	movs	r2, #255	; 0xff
 8014f42:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	2200      	movs	r2, #0
 8014f48:	729a      	strb	r2, [r3, #10]
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014f4e:	683b      	ldr	r3, [r7, #0]
 8014f50:	9302      	str	r3, [sp, #8]
 8014f52:	2301      	movs	r3, #1
 8014f54:	9301      	str	r3, [sp, #4]
 8014f56:	2300      	movs	r3, #0
 8014f58:	9300      	str	r3, [sp, #0]
 8014f5a:	23ff      	movs	r3, #255	; 0xff
 8014f5c:	2200      	movs	r2, #0
 8014f5e:	69f9      	ldr	r1, [r7, #28]
 8014f60:	6878      	ldr	r0, [r7, #4]
 8014f62:	f000 fa75 	bl	8015450 <ip4_output_if>
 8014f66:	4603      	mov	r3, r0
 8014f68:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014f6a:	e001      	b.n	8014f70 <icmp_input+0x1b8>
      break;
 8014f6c:	bf00      	nop
 8014f6e:	e000      	b.n	8014f72 <icmp_input+0x1ba>
      break;
 8014f70:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014f72:	6878      	ldr	r0, [r7, #4]
 8014f74:	f7f7 ff0e 	bl	800cd94 <pbuf_free>
  return;
 8014f78:	e013      	b.n	8014fa2 <icmp_input+0x1ea>
    goto lenerr;
 8014f7a:	bf00      	nop
 8014f7c:	e002      	b.n	8014f84 <icmp_input+0x1cc>
    goto lenerr;
 8014f7e:	bf00      	nop
 8014f80:	e000      	b.n	8014f84 <icmp_input+0x1cc>
        goto lenerr;
 8014f82:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014f84:	6878      	ldr	r0, [r7, #4]
 8014f86:	f7f7 ff05 	bl	800cd94 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014f8a:	e00a      	b.n	8014fa2 <icmp_input+0x1ea>
        goto icmperr;
 8014f8c:	bf00      	nop
 8014f8e:	e004      	b.n	8014f9a <icmp_input+0x1e2>
        goto icmperr;
 8014f90:	bf00      	nop
 8014f92:	e002      	b.n	8014f9a <icmp_input+0x1e2>
          goto icmperr;
 8014f94:	bf00      	nop
 8014f96:	e000      	b.n	8014f9a <icmp_input+0x1e2>
          goto icmperr;
 8014f98:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014f9a:	6878      	ldr	r0, [r7, #4]
 8014f9c:	f7f7 fefa 	bl	800cd94 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014fa0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014fa2:	3728      	adds	r7, #40	; 0x28
 8014fa4:	46bd      	mov	sp, r7
 8014fa6:	bd80      	pop	{r7, pc}
 8014fa8:	20009ca0 	.word	0x20009ca0
 8014fac:	20009cb4 	.word	0x20009cb4
 8014fb0:	0801ab5c 	.word	0x0801ab5c
 8014fb4:	0801ab94 	.word	0x0801ab94
 8014fb8:	0801abcc 	.word	0x0801abcc
 8014fbc:	0801abf4 	.word	0x0801abf4

08014fc0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b082      	sub	sp, #8
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
 8014fc8:	460b      	mov	r3, r1
 8014fca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014fcc:	78fb      	ldrb	r3, [r7, #3]
 8014fce:	461a      	mov	r2, r3
 8014fd0:	2103      	movs	r1, #3
 8014fd2:	6878      	ldr	r0, [r7, #4]
 8014fd4:	f000 f814 	bl	8015000 <icmp_send_response>
}
 8014fd8:	bf00      	nop
 8014fda:	3708      	adds	r7, #8
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}

08014fe0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b082      	sub	sp, #8
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
 8014fe8:	460b      	mov	r3, r1
 8014fea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014fec:	78fb      	ldrb	r3, [r7, #3]
 8014fee:	461a      	mov	r2, r3
 8014ff0:	210b      	movs	r1, #11
 8014ff2:	6878      	ldr	r0, [r7, #4]
 8014ff4:	f000 f804 	bl	8015000 <icmp_send_response>
}
 8014ff8:	bf00      	nop
 8014ffa:	3708      	adds	r7, #8
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	bd80      	pop	{r7, pc}

08015000 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015000:	b580      	push	{r7, lr}
 8015002:	b08c      	sub	sp, #48	; 0x30
 8015004:	af04      	add	r7, sp, #16
 8015006:	6078      	str	r0, [r7, #4]
 8015008:	460b      	mov	r3, r1
 801500a:	70fb      	strb	r3, [r7, #3]
 801500c:	4613      	mov	r3, r2
 801500e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015010:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015014:	2124      	movs	r1, #36	; 0x24
 8015016:	2022      	movs	r0, #34	; 0x22
 8015018:	f7f7 fbd8 	bl	800c7cc <pbuf_alloc>
 801501c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801501e:	69fb      	ldr	r3, [r7, #28]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d04c      	beq.n	80150be <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015024:	69fb      	ldr	r3, [r7, #28]
 8015026:	895b      	ldrh	r3, [r3, #10]
 8015028:	2b23      	cmp	r3, #35	; 0x23
 801502a:	d806      	bhi.n	801503a <icmp_send_response+0x3a>
 801502c:	4b26      	ldr	r3, [pc, #152]	; (80150c8 <icmp_send_response+0xc8>)
 801502e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015032:	4926      	ldr	r1, [pc, #152]	; (80150cc <icmp_send_response+0xcc>)
 8015034:	4826      	ldr	r0, [pc, #152]	; (80150d0 <icmp_send_response+0xd0>)
 8015036:	f001 fe05 	bl	8016c44 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	685b      	ldr	r3, [r3, #4]
 801503e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015040:	69fb      	ldr	r3, [r7, #28]
 8015042:	685b      	ldr	r3, [r3, #4]
 8015044:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015046:	697b      	ldr	r3, [r7, #20]
 8015048:	78fa      	ldrb	r2, [r7, #3]
 801504a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801504c:	697b      	ldr	r3, [r7, #20]
 801504e:	78ba      	ldrb	r2, [r7, #2]
 8015050:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015052:	697b      	ldr	r3, [r7, #20]
 8015054:	2200      	movs	r2, #0
 8015056:	711a      	strb	r2, [r3, #4]
 8015058:	2200      	movs	r2, #0
 801505a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801505c:	697b      	ldr	r3, [r7, #20]
 801505e:	2200      	movs	r2, #0
 8015060:	719a      	strb	r2, [r3, #6]
 8015062:	2200      	movs	r2, #0
 8015064:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015066:	69fb      	ldr	r3, [r7, #28]
 8015068:	685b      	ldr	r3, [r3, #4]
 801506a:	f103 0008 	add.w	r0, r3, #8
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	685b      	ldr	r3, [r3, #4]
 8015072:	221c      	movs	r2, #28
 8015074:	4619      	mov	r1, r3
 8015076:	f001 fd25 	bl	8016ac4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801507a:	69bb      	ldr	r3, [r7, #24]
 801507c:	68db      	ldr	r3, [r3, #12]
 801507e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015080:	f107 030c 	add.w	r3, r7, #12
 8015084:	4618      	mov	r0, r3
 8015086:	f000 f825 	bl	80150d4 <ip4_route>
 801508a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801508c:	693b      	ldr	r3, [r7, #16]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d011      	beq.n	80150b6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015092:	697b      	ldr	r3, [r7, #20]
 8015094:	2200      	movs	r2, #0
 8015096:	709a      	strb	r2, [r3, #2]
 8015098:	2200      	movs	r2, #0
 801509a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801509c:	f107 020c 	add.w	r2, r7, #12
 80150a0:	693b      	ldr	r3, [r7, #16]
 80150a2:	9302      	str	r3, [sp, #8]
 80150a4:	2301      	movs	r3, #1
 80150a6:	9301      	str	r3, [sp, #4]
 80150a8:	2300      	movs	r3, #0
 80150aa:	9300      	str	r3, [sp, #0]
 80150ac:	23ff      	movs	r3, #255	; 0xff
 80150ae:	2100      	movs	r1, #0
 80150b0:	69f8      	ldr	r0, [r7, #28]
 80150b2:	f000 f9cd 	bl	8015450 <ip4_output_if>
  }
  pbuf_free(q);
 80150b6:	69f8      	ldr	r0, [r7, #28]
 80150b8:	f7f7 fe6c 	bl	800cd94 <pbuf_free>
 80150bc:	e000      	b.n	80150c0 <icmp_send_response+0xc0>
    return;
 80150be:	bf00      	nop
}
 80150c0:	3720      	adds	r7, #32
 80150c2:	46bd      	mov	sp, r7
 80150c4:	bd80      	pop	{r7, pc}
 80150c6:	bf00      	nop
 80150c8:	0801ab5c 	.word	0x0801ab5c
 80150cc:	0801ac28 	.word	0x0801ac28
 80150d0:	0801abcc 	.word	0x0801abcc

080150d4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80150d4:	b480      	push	{r7}
 80150d6:	b085      	sub	sp, #20
 80150d8:	af00      	add	r7, sp, #0
 80150da:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80150dc:	4b33      	ldr	r3, [pc, #204]	; (80151ac <ip4_route+0xd8>)
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	60fb      	str	r3, [r7, #12]
 80150e2:	e036      	b.n	8015152 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80150ea:	f003 0301 	and.w	r3, r3, #1
 80150ee:	b2db      	uxtb	r3, r3
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d02b      	beq.n	801514c <ip4_route+0x78>
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80150fa:	089b      	lsrs	r3, r3, #2
 80150fc:	f003 0301 	and.w	r3, r3, #1
 8015100:	b2db      	uxtb	r3, r3
 8015102:	2b00      	cmp	r3, #0
 8015104:	d022      	beq.n	801514c <ip4_route+0x78>
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	3304      	adds	r3, #4
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d01d      	beq.n	801514c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	681a      	ldr	r2, [r3, #0]
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	3304      	adds	r3, #4
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	405a      	eors	r2, r3
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	3308      	adds	r3, #8
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	4013      	ands	r3, r2
 8015124:	2b00      	cmp	r3, #0
 8015126:	d101      	bne.n	801512c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	e038      	b.n	801519e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015132:	f003 0302 	and.w	r3, r3, #2
 8015136:	2b00      	cmp	r3, #0
 8015138:	d108      	bne.n	801514c <ip4_route+0x78>
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	681a      	ldr	r2, [r3, #0]
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	330c      	adds	r3, #12
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	429a      	cmp	r2, r3
 8015146:	d101      	bne.n	801514c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	e028      	b.n	801519e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	60fb      	str	r3, [r7, #12]
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d1c5      	bne.n	80150e4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015158:	4b15      	ldr	r3, [pc, #84]	; (80151b0 <ip4_route+0xdc>)
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	2b00      	cmp	r3, #0
 801515e:	d01a      	beq.n	8015196 <ip4_route+0xc2>
 8015160:	4b13      	ldr	r3, [pc, #76]	; (80151b0 <ip4_route+0xdc>)
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015168:	f003 0301 	and.w	r3, r3, #1
 801516c:	2b00      	cmp	r3, #0
 801516e:	d012      	beq.n	8015196 <ip4_route+0xc2>
 8015170:	4b0f      	ldr	r3, [pc, #60]	; (80151b0 <ip4_route+0xdc>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015178:	f003 0304 	and.w	r3, r3, #4
 801517c:	2b00      	cmp	r3, #0
 801517e:	d00a      	beq.n	8015196 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015180:	4b0b      	ldr	r3, [pc, #44]	; (80151b0 <ip4_route+0xdc>)
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	3304      	adds	r3, #4
 8015186:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015188:	2b00      	cmp	r3, #0
 801518a:	d004      	beq.n	8015196 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	b2db      	uxtb	r3, r3
 8015192:	2b7f      	cmp	r3, #127	; 0x7f
 8015194:	d101      	bne.n	801519a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015196:	2300      	movs	r3, #0
 8015198:	e001      	b.n	801519e <ip4_route+0xca>
  }

  return netif_default;
 801519a:	4b05      	ldr	r3, [pc, #20]	; (80151b0 <ip4_route+0xdc>)
 801519c:	681b      	ldr	r3, [r3, #0]
}
 801519e:	4618      	mov	r0, r3
 80151a0:	3714      	adds	r7, #20
 80151a2:	46bd      	mov	sp, r7
 80151a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a8:	4770      	bx	lr
 80151aa:	bf00      	nop
 80151ac:	2000d3a4 	.word	0x2000d3a4
 80151b0:	2000d3a8 	.word	0x2000d3a8

080151b4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b082      	sub	sp, #8
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80151c2:	f003 0301 	and.w	r3, r3, #1
 80151c6:	b2db      	uxtb	r3, r3
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d016      	beq.n	80151fa <ip4_input_accept+0x46>
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	3304      	adds	r3, #4
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d011      	beq.n	80151fa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80151d6:	4b0b      	ldr	r3, [pc, #44]	; (8015204 <ip4_input_accept+0x50>)
 80151d8:	695a      	ldr	r2, [r3, #20]
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	3304      	adds	r3, #4
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	429a      	cmp	r2, r3
 80151e2:	d008      	beq.n	80151f6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80151e4:	4b07      	ldr	r3, [pc, #28]	; (8015204 <ip4_input_accept+0x50>)
 80151e6:	695b      	ldr	r3, [r3, #20]
 80151e8:	6879      	ldr	r1, [r7, #4]
 80151ea:	4618      	mov	r0, r3
 80151ec:	f000 fa08 	bl	8015600 <ip4_addr_isbroadcast_u32>
 80151f0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d001      	beq.n	80151fa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80151f6:	2301      	movs	r3, #1
 80151f8:	e000      	b.n	80151fc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80151fa:	2300      	movs	r3, #0
}
 80151fc:	4618      	mov	r0, r3
 80151fe:	3708      	adds	r7, #8
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}
 8015204:	20009ca0 	.word	0x20009ca0

08015208 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b086      	sub	sp, #24
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
 8015210:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	685b      	ldr	r3, [r3, #4]
 8015216:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015218:	697b      	ldr	r3, [r7, #20]
 801521a:	781b      	ldrb	r3, [r3, #0]
 801521c:	091b      	lsrs	r3, r3, #4
 801521e:	b2db      	uxtb	r3, r3
 8015220:	2b04      	cmp	r3, #4
 8015222:	d004      	beq.n	801522e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015224:	6878      	ldr	r0, [r7, #4]
 8015226:	f7f7 fdb5 	bl	800cd94 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801522a:	2300      	movs	r3, #0
 801522c:	e107      	b.n	801543e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801522e:	697b      	ldr	r3, [r7, #20]
 8015230:	781b      	ldrb	r3, [r3, #0]
 8015232:	f003 030f 	and.w	r3, r3, #15
 8015236:	b2db      	uxtb	r3, r3
 8015238:	009b      	lsls	r3, r3, #2
 801523a:	b2db      	uxtb	r3, r3
 801523c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801523e:	697b      	ldr	r3, [r7, #20]
 8015240:	885b      	ldrh	r3, [r3, #2]
 8015242:	b29b      	uxth	r3, r3
 8015244:	4618      	mov	r0, r3
 8015246:	f7f6 fa5d 	bl	800b704 <lwip_htons>
 801524a:	4603      	mov	r3, r0
 801524c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	891b      	ldrh	r3, [r3, #8]
 8015252:	89ba      	ldrh	r2, [r7, #12]
 8015254:	429a      	cmp	r2, r3
 8015256:	d204      	bcs.n	8015262 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015258:	89bb      	ldrh	r3, [r7, #12]
 801525a:	4619      	mov	r1, r3
 801525c:	6878      	ldr	r0, [r7, #4]
 801525e:	f7f7 fc13 	bl	800ca88 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	895b      	ldrh	r3, [r3, #10]
 8015266:	89fa      	ldrh	r2, [r7, #14]
 8015268:	429a      	cmp	r2, r3
 801526a:	d807      	bhi.n	801527c <ip4_input+0x74>
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	891b      	ldrh	r3, [r3, #8]
 8015270:	89ba      	ldrh	r2, [r7, #12]
 8015272:	429a      	cmp	r2, r3
 8015274:	d802      	bhi.n	801527c <ip4_input+0x74>
 8015276:	89fb      	ldrh	r3, [r7, #14]
 8015278:	2b13      	cmp	r3, #19
 801527a:	d804      	bhi.n	8015286 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801527c:	6878      	ldr	r0, [r7, #4]
 801527e:	f7f7 fd89 	bl	800cd94 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015282:	2300      	movs	r3, #0
 8015284:	e0db      	b.n	801543e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015286:	697b      	ldr	r3, [r7, #20]
 8015288:	691b      	ldr	r3, [r3, #16]
 801528a:	4a6f      	ldr	r2, [pc, #444]	; (8015448 <ip4_input+0x240>)
 801528c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801528e:	697b      	ldr	r3, [r7, #20]
 8015290:	68db      	ldr	r3, [r3, #12]
 8015292:	4a6d      	ldr	r2, [pc, #436]	; (8015448 <ip4_input+0x240>)
 8015294:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015296:	4b6c      	ldr	r3, [pc, #432]	; (8015448 <ip4_input+0x240>)
 8015298:	695b      	ldr	r3, [r3, #20]
 801529a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801529e:	2be0      	cmp	r3, #224	; 0xe0
 80152a0:	d112      	bne.n	80152c8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80152a2:	683b      	ldr	r3, [r7, #0]
 80152a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152a8:	f003 0301 	and.w	r3, r3, #1
 80152ac:	b2db      	uxtb	r3, r3
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d007      	beq.n	80152c2 <ip4_input+0xba>
 80152b2:	683b      	ldr	r3, [r7, #0]
 80152b4:	3304      	adds	r3, #4
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d002      	beq.n	80152c2 <ip4_input+0xba>
      netif = inp;
 80152bc:	683b      	ldr	r3, [r7, #0]
 80152be:	613b      	str	r3, [r7, #16]
 80152c0:	e02a      	b.n	8015318 <ip4_input+0x110>
    } else {
      netif = NULL;
 80152c2:	2300      	movs	r3, #0
 80152c4:	613b      	str	r3, [r7, #16]
 80152c6:	e027      	b.n	8015318 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80152c8:	6838      	ldr	r0, [r7, #0]
 80152ca:	f7ff ff73 	bl	80151b4 <ip4_input_accept>
 80152ce:	4603      	mov	r3, r0
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d002      	beq.n	80152da <ip4_input+0xd2>
      netif = inp;
 80152d4:	683b      	ldr	r3, [r7, #0]
 80152d6:	613b      	str	r3, [r7, #16]
 80152d8:	e01e      	b.n	8015318 <ip4_input+0x110>
    } else {
      netif = NULL;
 80152da:	2300      	movs	r3, #0
 80152dc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80152de:	4b5a      	ldr	r3, [pc, #360]	; (8015448 <ip4_input+0x240>)
 80152e0:	695b      	ldr	r3, [r3, #20]
 80152e2:	b2db      	uxtb	r3, r3
 80152e4:	2b7f      	cmp	r3, #127	; 0x7f
 80152e6:	d017      	beq.n	8015318 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80152e8:	4b58      	ldr	r3, [pc, #352]	; (801544c <ip4_input+0x244>)
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	613b      	str	r3, [r7, #16]
 80152ee:	e00e      	b.n	801530e <ip4_input+0x106>
          if (netif == inp) {
 80152f0:	693a      	ldr	r2, [r7, #16]
 80152f2:	683b      	ldr	r3, [r7, #0]
 80152f4:	429a      	cmp	r2, r3
 80152f6:	d006      	beq.n	8015306 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80152f8:	6938      	ldr	r0, [r7, #16]
 80152fa:	f7ff ff5b 	bl	80151b4 <ip4_input_accept>
 80152fe:	4603      	mov	r3, r0
 8015300:	2b00      	cmp	r3, #0
 8015302:	d108      	bne.n	8015316 <ip4_input+0x10e>
 8015304:	e000      	b.n	8015308 <ip4_input+0x100>
            continue;
 8015306:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015308:	693b      	ldr	r3, [r7, #16]
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	613b      	str	r3, [r7, #16]
 801530e:	693b      	ldr	r3, [r7, #16]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d1ed      	bne.n	80152f0 <ip4_input+0xe8>
 8015314:	e000      	b.n	8015318 <ip4_input+0x110>
            break;
 8015316:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015318:	4b4b      	ldr	r3, [pc, #300]	; (8015448 <ip4_input+0x240>)
 801531a:	691b      	ldr	r3, [r3, #16]
 801531c:	6839      	ldr	r1, [r7, #0]
 801531e:	4618      	mov	r0, r3
 8015320:	f000 f96e 	bl	8015600 <ip4_addr_isbroadcast_u32>
 8015324:	4603      	mov	r3, r0
 8015326:	2b00      	cmp	r3, #0
 8015328:	d105      	bne.n	8015336 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801532a:	4b47      	ldr	r3, [pc, #284]	; (8015448 <ip4_input+0x240>)
 801532c:	691b      	ldr	r3, [r3, #16]
 801532e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015332:	2be0      	cmp	r3, #224	; 0xe0
 8015334:	d104      	bne.n	8015340 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015336:	6878      	ldr	r0, [r7, #4]
 8015338:	f7f7 fd2c 	bl	800cd94 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801533c:	2300      	movs	r3, #0
 801533e:	e07e      	b.n	801543e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015340:	693b      	ldr	r3, [r7, #16]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d104      	bne.n	8015350 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015346:	6878      	ldr	r0, [r7, #4]
 8015348:	f7f7 fd24 	bl	800cd94 <pbuf_free>
    return ERR_OK;
 801534c:	2300      	movs	r3, #0
 801534e:	e076      	b.n	801543e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015350:	697b      	ldr	r3, [r7, #20]
 8015352:	88db      	ldrh	r3, [r3, #6]
 8015354:	b29b      	uxth	r3, r3
 8015356:	461a      	mov	r2, r3
 8015358:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801535c:	4013      	ands	r3, r2
 801535e:	2b00      	cmp	r3, #0
 8015360:	d00b      	beq.n	801537a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015362:	6878      	ldr	r0, [r7, #4]
 8015364:	f000 fc92 	bl	8015c8c <ip4_reass>
 8015368:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d101      	bne.n	8015374 <ip4_input+0x16c>
      return ERR_OK;
 8015370:	2300      	movs	r3, #0
 8015372:	e064      	b.n	801543e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	685b      	ldr	r3, [r3, #4]
 8015378:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801537a:	4a33      	ldr	r2, [pc, #204]	; (8015448 <ip4_input+0x240>)
 801537c:	693b      	ldr	r3, [r7, #16]
 801537e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015380:	4a31      	ldr	r2, [pc, #196]	; (8015448 <ip4_input+0x240>)
 8015382:	683b      	ldr	r3, [r7, #0]
 8015384:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015386:	4a30      	ldr	r2, [pc, #192]	; (8015448 <ip4_input+0x240>)
 8015388:	697b      	ldr	r3, [r7, #20]
 801538a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801538c:	697b      	ldr	r3, [r7, #20]
 801538e:	781b      	ldrb	r3, [r3, #0]
 8015390:	f003 030f 	and.w	r3, r3, #15
 8015394:	b2db      	uxtb	r3, r3
 8015396:	009b      	lsls	r3, r3, #2
 8015398:	b2db      	uxtb	r3, r3
 801539a:	b29a      	uxth	r2, r3
 801539c:	4b2a      	ldr	r3, [pc, #168]	; (8015448 <ip4_input+0x240>)
 801539e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80153a0:	89fb      	ldrh	r3, [r7, #14]
 80153a2:	4619      	mov	r1, r3
 80153a4:	6878      	ldr	r0, [r7, #4]
 80153a6:	f7f7 fc6f 	bl	800cc88 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80153aa:	697b      	ldr	r3, [r7, #20]
 80153ac:	7a5b      	ldrb	r3, [r3, #9]
 80153ae:	2b11      	cmp	r3, #17
 80153b0:	d006      	beq.n	80153c0 <ip4_input+0x1b8>
 80153b2:	2b11      	cmp	r3, #17
 80153b4:	dc13      	bgt.n	80153de <ip4_input+0x1d6>
 80153b6:	2b01      	cmp	r3, #1
 80153b8:	d00c      	beq.n	80153d4 <ip4_input+0x1cc>
 80153ba:	2b06      	cmp	r3, #6
 80153bc:	d005      	beq.n	80153ca <ip4_input+0x1c2>
 80153be:	e00e      	b.n	80153de <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80153c0:	6839      	ldr	r1, [r7, #0]
 80153c2:	6878      	ldr	r0, [r7, #4]
 80153c4:	f7fe f970 	bl	80136a8 <udp_input>
        break;
 80153c8:	e026      	b.n	8015418 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80153ca:	6839      	ldr	r1, [r7, #0]
 80153cc:	6878      	ldr	r0, [r7, #4]
 80153ce:	f7f9 fd2d 	bl	800ee2c <tcp_input>
        break;
 80153d2:	e021      	b.n	8015418 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80153d4:	6839      	ldr	r1, [r7, #0]
 80153d6:	6878      	ldr	r0, [r7, #4]
 80153d8:	f7ff fcee 	bl	8014db8 <icmp_input>
        break;
 80153dc:	e01c      	b.n	8015418 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80153de:	4b1a      	ldr	r3, [pc, #104]	; (8015448 <ip4_input+0x240>)
 80153e0:	695b      	ldr	r3, [r3, #20]
 80153e2:	6939      	ldr	r1, [r7, #16]
 80153e4:	4618      	mov	r0, r3
 80153e6:	f000 f90b 	bl	8015600 <ip4_addr_isbroadcast_u32>
 80153ea:	4603      	mov	r3, r0
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d10f      	bne.n	8015410 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80153f0:	4b15      	ldr	r3, [pc, #84]	; (8015448 <ip4_input+0x240>)
 80153f2:	695b      	ldr	r3, [r3, #20]
 80153f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80153f8:	2be0      	cmp	r3, #224	; 0xe0
 80153fa:	d009      	beq.n	8015410 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80153fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015400:	4619      	mov	r1, r3
 8015402:	6878      	ldr	r0, [r7, #4]
 8015404:	f7f7 fcb3 	bl	800cd6e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015408:	2102      	movs	r1, #2
 801540a:	6878      	ldr	r0, [r7, #4]
 801540c:	f7ff fdd8 	bl	8014fc0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015410:	6878      	ldr	r0, [r7, #4]
 8015412:	f7f7 fcbf 	bl	800cd94 <pbuf_free>
        break;
 8015416:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015418:	4b0b      	ldr	r3, [pc, #44]	; (8015448 <ip4_input+0x240>)
 801541a:	2200      	movs	r2, #0
 801541c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801541e:	4b0a      	ldr	r3, [pc, #40]	; (8015448 <ip4_input+0x240>)
 8015420:	2200      	movs	r2, #0
 8015422:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015424:	4b08      	ldr	r3, [pc, #32]	; (8015448 <ip4_input+0x240>)
 8015426:	2200      	movs	r2, #0
 8015428:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801542a:	4b07      	ldr	r3, [pc, #28]	; (8015448 <ip4_input+0x240>)
 801542c:	2200      	movs	r2, #0
 801542e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015430:	4b05      	ldr	r3, [pc, #20]	; (8015448 <ip4_input+0x240>)
 8015432:	2200      	movs	r2, #0
 8015434:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015436:	4b04      	ldr	r3, [pc, #16]	; (8015448 <ip4_input+0x240>)
 8015438:	2200      	movs	r2, #0
 801543a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801543c:	2300      	movs	r3, #0
}
 801543e:	4618      	mov	r0, r3
 8015440:	3718      	adds	r7, #24
 8015442:	46bd      	mov	sp, r7
 8015444:	bd80      	pop	{r7, pc}
 8015446:	bf00      	nop
 8015448:	20009ca0 	.word	0x20009ca0
 801544c:	2000d3a4 	.word	0x2000d3a4

08015450 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015450:	b580      	push	{r7, lr}
 8015452:	b08a      	sub	sp, #40	; 0x28
 8015454:	af04      	add	r7, sp, #16
 8015456:	60f8      	str	r0, [r7, #12]
 8015458:	60b9      	str	r1, [r7, #8]
 801545a:	607a      	str	r2, [r7, #4]
 801545c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801545e:	68bb      	ldr	r3, [r7, #8]
 8015460:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d009      	beq.n	801547c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015468:	68bb      	ldr	r3, [r7, #8]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d003      	beq.n	8015476 <ip4_output_if+0x26>
 801546e:	68bb      	ldr	r3, [r7, #8]
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d102      	bne.n	801547c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015478:	3304      	adds	r3, #4
 801547a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801547c:	78fa      	ldrb	r2, [r7, #3]
 801547e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015480:	9302      	str	r3, [sp, #8]
 8015482:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015486:	9301      	str	r3, [sp, #4]
 8015488:	f897 3020 	ldrb.w	r3, [r7, #32]
 801548c:	9300      	str	r3, [sp, #0]
 801548e:	4613      	mov	r3, r2
 8015490:	687a      	ldr	r2, [r7, #4]
 8015492:	6979      	ldr	r1, [r7, #20]
 8015494:	68f8      	ldr	r0, [r7, #12]
 8015496:	f000 f805 	bl	80154a4 <ip4_output_if_src>
 801549a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801549c:	4618      	mov	r0, r3
 801549e:	3718      	adds	r7, #24
 80154a0:	46bd      	mov	sp, r7
 80154a2:	bd80      	pop	{r7, pc}

080154a4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b088      	sub	sp, #32
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	60f8      	str	r0, [r7, #12]
 80154ac:	60b9      	str	r1, [r7, #8]
 80154ae:	607a      	str	r2, [r7, #4]
 80154b0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	7b9b      	ldrb	r3, [r3, #14]
 80154b6:	2b01      	cmp	r3, #1
 80154b8:	d006      	beq.n	80154c8 <ip4_output_if_src+0x24>
 80154ba:	4b4b      	ldr	r3, [pc, #300]	; (80155e8 <ip4_output_if_src+0x144>)
 80154bc:	f44f 7255 	mov.w	r2, #852	; 0x354
 80154c0:	494a      	ldr	r1, [pc, #296]	; (80155ec <ip4_output_if_src+0x148>)
 80154c2:	484b      	ldr	r0, [pc, #300]	; (80155f0 <ip4_output_if_src+0x14c>)
 80154c4:	f001 fbbe 	bl	8016c44 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d060      	beq.n	8015590 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80154ce:	2314      	movs	r3, #20
 80154d0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80154d2:	2114      	movs	r1, #20
 80154d4:	68f8      	ldr	r0, [r7, #12]
 80154d6:	f7f7 fbc7 	bl	800cc68 <pbuf_add_header>
 80154da:	4603      	mov	r3, r0
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d002      	beq.n	80154e6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80154e0:	f06f 0301 	mvn.w	r3, #1
 80154e4:	e07c      	b.n	80155e0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	685b      	ldr	r3, [r3, #4]
 80154ea:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	895b      	ldrh	r3, [r3, #10]
 80154f0:	2b13      	cmp	r3, #19
 80154f2:	d806      	bhi.n	8015502 <ip4_output_if_src+0x5e>
 80154f4:	4b3c      	ldr	r3, [pc, #240]	; (80155e8 <ip4_output_if_src+0x144>)
 80154f6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80154fa:	493e      	ldr	r1, [pc, #248]	; (80155f4 <ip4_output_if_src+0x150>)
 80154fc:	483c      	ldr	r0, [pc, #240]	; (80155f0 <ip4_output_if_src+0x14c>)
 80154fe:	f001 fba1 	bl	8016c44 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015502:	69fb      	ldr	r3, [r7, #28]
 8015504:	78fa      	ldrb	r2, [r7, #3]
 8015506:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015508:	69fb      	ldr	r3, [r7, #28]
 801550a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801550e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	681a      	ldr	r2, [r3, #0]
 8015514:	69fb      	ldr	r3, [r7, #28]
 8015516:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015518:	8b7b      	ldrh	r3, [r7, #26]
 801551a:	089b      	lsrs	r3, r3, #2
 801551c:	b29b      	uxth	r3, r3
 801551e:	b2db      	uxtb	r3, r3
 8015520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015524:	b2da      	uxtb	r2, r3
 8015526:	69fb      	ldr	r3, [r7, #28]
 8015528:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801552a:	69fb      	ldr	r3, [r7, #28]
 801552c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015530:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	891b      	ldrh	r3, [r3, #8]
 8015536:	4618      	mov	r0, r3
 8015538:	f7f6 f8e4 	bl	800b704 <lwip_htons>
 801553c:	4603      	mov	r3, r0
 801553e:	461a      	mov	r2, r3
 8015540:	69fb      	ldr	r3, [r7, #28]
 8015542:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015544:	69fb      	ldr	r3, [r7, #28]
 8015546:	2200      	movs	r2, #0
 8015548:	719a      	strb	r2, [r3, #6]
 801554a:	2200      	movs	r2, #0
 801554c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801554e:	4b2a      	ldr	r3, [pc, #168]	; (80155f8 <ip4_output_if_src+0x154>)
 8015550:	881b      	ldrh	r3, [r3, #0]
 8015552:	4618      	mov	r0, r3
 8015554:	f7f6 f8d6 	bl	800b704 <lwip_htons>
 8015558:	4603      	mov	r3, r0
 801555a:	461a      	mov	r2, r3
 801555c:	69fb      	ldr	r3, [r7, #28]
 801555e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015560:	4b25      	ldr	r3, [pc, #148]	; (80155f8 <ip4_output_if_src+0x154>)
 8015562:	881b      	ldrh	r3, [r3, #0]
 8015564:	3301      	adds	r3, #1
 8015566:	b29a      	uxth	r2, r3
 8015568:	4b23      	ldr	r3, [pc, #140]	; (80155f8 <ip4_output_if_src+0x154>)
 801556a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801556c:	68bb      	ldr	r3, [r7, #8]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d104      	bne.n	801557c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015572:	4b22      	ldr	r3, [pc, #136]	; (80155fc <ip4_output_if_src+0x158>)
 8015574:	681a      	ldr	r2, [r3, #0]
 8015576:	69fb      	ldr	r3, [r7, #28]
 8015578:	60da      	str	r2, [r3, #12]
 801557a:	e003      	b.n	8015584 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801557c:	68bb      	ldr	r3, [r7, #8]
 801557e:	681a      	ldr	r2, [r3, #0]
 8015580:	69fb      	ldr	r3, [r7, #28]
 8015582:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015584:	69fb      	ldr	r3, [r7, #28]
 8015586:	2200      	movs	r2, #0
 8015588:	729a      	strb	r2, [r3, #10]
 801558a:	2200      	movs	r2, #0
 801558c:	72da      	strb	r2, [r3, #11]
 801558e:	e00f      	b.n	80155b0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	895b      	ldrh	r3, [r3, #10]
 8015594:	2b13      	cmp	r3, #19
 8015596:	d802      	bhi.n	801559e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015598:	f06f 0301 	mvn.w	r3, #1
 801559c:	e020      	b.n	80155e0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	685b      	ldr	r3, [r3, #4]
 80155a2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80155a4:	69fb      	ldr	r3, [r7, #28]
 80155a6:	691b      	ldr	r3, [r3, #16]
 80155a8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80155aa:	f107 0314 	add.w	r3, r7, #20
 80155ae:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80155b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d00c      	beq.n	80155d2 <ip4_output_if_src+0x12e>
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	891a      	ldrh	r2, [r3, #8]
 80155bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80155c0:	429a      	cmp	r2, r3
 80155c2:	d906      	bls.n	80155d2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80155c4:	687a      	ldr	r2, [r7, #4]
 80155c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80155c8:	68f8      	ldr	r0, [r7, #12]
 80155ca:	f000 fd4d 	bl	8016068 <ip4_frag>
 80155ce:	4603      	mov	r3, r0
 80155d0:	e006      	b.n	80155e0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80155d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155d4:	695b      	ldr	r3, [r3, #20]
 80155d6:	687a      	ldr	r2, [r7, #4]
 80155d8:	68f9      	ldr	r1, [r7, #12]
 80155da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80155dc:	4798      	blx	r3
 80155de:	4603      	mov	r3, r0
}
 80155e0:	4618      	mov	r0, r3
 80155e2:	3720      	adds	r7, #32
 80155e4:	46bd      	mov	sp, r7
 80155e6:	bd80      	pop	{r7, pc}
 80155e8:	0801ac54 	.word	0x0801ac54
 80155ec:	0801ac88 	.word	0x0801ac88
 80155f0:	0801ac94 	.word	0x0801ac94
 80155f4:	0801acbc 	.word	0x0801acbc
 80155f8:	2000697a 	.word	0x2000697a
 80155fc:	0801b0d4 	.word	0x0801b0d4

08015600 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015600:	b480      	push	{r7}
 8015602:	b085      	sub	sp, #20
 8015604:	af00      	add	r7, sp, #0
 8015606:	6078      	str	r0, [r7, #4]
 8015608:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015614:	d002      	beq.n	801561c <ip4_addr_isbroadcast_u32+0x1c>
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d101      	bne.n	8015620 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801561c:	2301      	movs	r3, #1
 801561e:	e02a      	b.n	8015676 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015620:	683b      	ldr	r3, [r7, #0]
 8015622:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015626:	f003 0302 	and.w	r3, r3, #2
 801562a:	2b00      	cmp	r3, #0
 801562c:	d101      	bne.n	8015632 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801562e:	2300      	movs	r3, #0
 8015630:	e021      	b.n	8015676 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015632:	683b      	ldr	r3, [r7, #0]
 8015634:	3304      	adds	r3, #4
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	687a      	ldr	r2, [r7, #4]
 801563a:	429a      	cmp	r2, r3
 801563c:	d101      	bne.n	8015642 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801563e:	2300      	movs	r3, #0
 8015640:	e019      	b.n	8015676 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015642:	68fa      	ldr	r2, [r7, #12]
 8015644:	683b      	ldr	r3, [r7, #0]
 8015646:	3304      	adds	r3, #4
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	405a      	eors	r2, r3
 801564c:	683b      	ldr	r3, [r7, #0]
 801564e:	3308      	adds	r3, #8
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	4013      	ands	r3, r2
 8015654:	2b00      	cmp	r3, #0
 8015656:	d10d      	bne.n	8015674 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015658:	683b      	ldr	r3, [r7, #0]
 801565a:	3308      	adds	r3, #8
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	43da      	mvns	r2, r3
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015664:	683b      	ldr	r3, [r7, #0]
 8015666:	3308      	adds	r3, #8
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801566c:	429a      	cmp	r2, r3
 801566e:	d101      	bne.n	8015674 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015670:	2301      	movs	r3, #1
 8015672:	e000      	b.n	8015676 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015674:	2300      	movs	r3, #0
  }
}
 8015676:	4618      	mov	r0, r3
 8015678:	3714      	adds	r7, #20
 801567a:	46bd      	mov	sp, r7
 801567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015680:	4770      	bx	lr
	...

08015684 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015684:	b580      	push	{r7, lr}
 8015686:	b084      	sub	sp, #16
 8015688:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801568a:	2300      	movs	r3, #0
 801568c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801568e:	4b12      	ldr	r3, [pc, #72]	; (80156d8 <ip_reass_tmr+0x54>)
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015694:	e018      	b.n	80156c8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	7fdb      	ldrb	r3, [r3, #31]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d00b      	beq.n	80156b6 <ip_reass_tmr+0x32>
      r->timer--;
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	7fdb      	ldrb	r3, [r3, #31]
 80156a2:	3b01      	subs	r3, #1
 80156a4:	b2da      	uxtb	r2, r3
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	60fb      	str	r3, [r7, #12]
 80156b4:	e008      	b.n	80156c8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80156c0:	68b9      	ldr	r1, [r7, #8]
 80156c2:	6878      	ldr	r0, [r7, #4]
 80156c4:	f000 f80a 	bl	80156dc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d1e3      	bne.n	8015696 <ip_reass_tmr+0x12>
    }
  }
}
 80156ce:	bf00      	nop
 80156d0:	bf00      	nop
 80156d2:	3710      	adds	r7, #16
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd80      	pop	{r7, pc}
 80156d8:	2000697c 	.word	0x2000697c

080156dc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80156dc:	b580      	push	{r7, lr}
 80156de:	b088      	sub	sp, #32
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
 80156e4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80156e6:	2300      	movs	r3, #0
 80156e8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80156ea:	683a      	ldr	r2, [r7, #0]
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	429a      	cmp	r2, r3
 80156f0:	d105      	bne.n	80156fe <ip_reass_free_complete_datagram+0x22>
 80156f2:	4b45      	ldr	r3, [pc, #276]	; (8015808 <ip_reass_free_complete_datagram+0x12c>)
 80156f4:	22ab      	movs	r2, #171	; 0xab
 80156f6:	4945      	ldr	r1, [pc, #276]	; (801580c <ip_reass_free_complete_datagram+0x130>)
 80156f8:	4845      	ldr	r0, [pc, #276]	; (8015810 <ip_reass_free_complete_datagram+0x134>)
 80156fa:	f001 faa3 	bl	8016c44 <iprintf>
  if (prev != NULL) {
 80156fe:	683b      	ldr	r3, [r7, #0]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d00a      	beq.n	801571a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015704:	683b      	ldr	r3, [r7, #0]
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	687a      	ldr	r2, [r7, #4]
 801570a:	429a      	cmp	r2, r3
 801570c:	d005      	beq.n	801571a <ip_reass_free_complete_datagram+0x3e>
 801570e:	4b3e      	ldr	r3, [pc, #248]	; (8015808 <ip_reass_free_complete_datagram+0x12c>)
 8015710:	22ad      	movs	r2, #173	; 0xad
 8015712:	4940      	ldr	r1, [pc, #256]	; (8015814 <ip_reass_free_complete_datagram+0x138>)
 8015714:	483e      	ldr	r0, [pc, #248]	; (8015810 <ip_reass_free_complete_datagram+0x134>)
 8015716:	f001 fa95 	bl	8016c44 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	685b      	ldr	r3, [r3, #4]
 801571e:	685b      	ldr	r3, [r3, #4]
 8015720:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015722:	697b      	ldr	r3, [r7, #20]
 8015724:	889b      	ldrh	r3, [r3, #4]
 8015726:	b29b      	uxth	r3, r3
 8015728:	2b00      	cmp	r3, #0
 801572a:	d12a      	bne.n	8015782 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	685b      	ldr	r3, [r3, #4]
 8015730:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015732:	697b      	ldr	r3, [r7, #20]
 8015734:	681a      	ldr	r2, [r3, #0]
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801573a:	69bb      	ldr	r3, [r7, #24]
 801573c:	6858      	ldr	r0, [r3, #4]
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	3308      	adds	r3, #8
 8015742:	2214      	movs	r2, #20
 8015744:	4619      	mov	r1, r3
 8015746:	f001 f9bd 	bl	8016ac4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801574a:	2101      	movs	r1, #1
 801574c:	69b8      	ldr	r0, [r7, #24]
 801574e:	f7ff fc47 	bl	8014fe0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015752:	69b8      	ldr	r0, [r7, #24]
 8015754:	f7f7 fbac 	bl	800ceb0 <pbuf_clen>
 8015758:	4603      	mov	r3, r0
 801575a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801575c:	8bfa      	ldrh	r2, [r7, #30]
 801575e:	8a7b      	ldrh	r3, [r7, #18]
 8015760:	4413      	add	r3, r2
 8015762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015766:	db05      	blt.n	8015774 <ip_reass_free_complete_datagram+0x98>
 8015768:	4b27      	ldr	r3, [pc, #156]	; (8015808 <ip_reass_free_complete_datagram+0x12c>)
 801576a:	22bc      	movs	r2, #188	; 0xbc
 801576c:	492a      	ldr	r1, [pc, #168]	; (8015818 <ip_reass_free_complete_datagram+0x13c>)
 801576e:	4828      	ldr	r0, [pc, #160]	; (8015810 <ip_reass_free_complete_datagram+0x134>)
 8015770:	f001 fa68 	bl	8016c44 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015774:	8bfa      	ldrh	r2, [r7, #30]
 8015776:	8a7b      	ldrh	r3, [r7, #18]
 8015778:	4413      	add	r3, r2
 801577a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801577c:	69b8      	ldr	r0, [r7, #24]
 801577e:	f7f7 fb09 	bl	800cd94 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	685b      	ldr	r3, [r3, #4]
 8015786:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015788:	e01f      	b.n	80157ca <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801578a:	69bb      	ldr	r3, [r7, #24]
 801578c:	685b      	ldr	r3, [r3, #4]
 801578e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015790:	69bb      	ldr	r3, [r7, #24]
 8015792:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015794:	697b      	ldr	r3, [r7, #20]
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801579a:	68f8      	ldr	r0, [r7, #12]
 801579c:	f7f7 fb88 	bl	800ceb0 <pbuf_clen>
 80157a0:	4603      	mov	r3, r0
 80157a2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80157a4:	8bfa      	ldrh	r2, [r7, #30]
 80157a6:	8a7b      	ldrh	r3, [r7, #18]
 80157a8:	4413      	add	r3, r2
 80157aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80157ae:	db05      	blt.n	80157bc <ip_reass_free_complete_datagram+0xe0>
 80157b0:	4b15      	ldr	r3, [pc, #84]	; (8015808 <ip_reass_free_complete_datagram+0x12c>)
 80157b2:	22cc      	movs	r2, #204	; 0xcc
 80157b4:	4918      	ldr	r1, [pc, #96]	; (8015818 <ip_reass_free_complete_datagram+0x13c>)
 80157b6:	4816      	ldr	r0, [pc, #88]	; (8015810 <ip_reass_free_complete_datagram+0x134>)
 80157b8:	f001 fa44 	bl	8016c44 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80157bc:	8bfa      	ldrh	r2, [r7, #30]
 80157be:	8a7b      	ldrh	r3, [r7, #18]
 80157c0:	4413      	add	r3, r2
 80157c2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80157c4:	68f8      	ldr	r0, [r7, #12]
 80157c6:	f7f7 fae5 	bl	800cd94 <pbuf_free>
  while (p != NULL) {
 80157ca:	69bb      	ldr	r3, [r7, #24]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d1dc      	bne.n	801578a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80157d0:	6839      	ldr	r1, [r7, #0]
 80157d2:	6878      	ldr	r0, [r7, #4]
 80157d4:	f000 f8c2 	bl	801595c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80157d8:	4b10      	ldr	r3, [pc, #64]	; (801581c <ip_reass_free_complete_datagram+0x140>)
 80157da:	881b      	ldrh	r3, [r3, #0]
 80157dc:	8bfa      	ldrh	r2, [r7, #30]
 80157de:	429a      	cmp	r2, r3
 80157e0:	d905      	bls.n	80157ee <ip_reass_free_complete_datagram+0x112>
 80157e2:	4b09      	ldr	r3, [pc, #36]	; (8015808 <ip_reass_free_complete_datagram+0x12c>)
 80157e4:	22d2      	movs	r2, #210	; 0xd2
 80157e6:	490e      	ldr	r1, [pc, #56]	; (8015820 <ip_reass_free_complete_datagram+0x144>)
 80157e8:	4809      	ldr	r0, [pc, #36]	; (8015810 <ip_reass_free_complete_datagram+0x134>)
 80157ea:	f001 fa2b 	bl	8016c44 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80157ee:	4b0b      	ldr	r3, [pc, #44]	; (801581c <ip_reass_free_complete_datagram+0x140>)
 80157f0:	881a      	ldrh	r2, [r3, #0]
 80157f2:	8bfb      	ldrh	r3, [r7, #30]
 80157f4:	1ad3      	subs	r3, r2, r3
 80157f6:	b29a      	uxth	r2, r3
 80157f8:	4b08      	ldr	r3, [pc, #32]	; (801581c <ip_reass_free_complete_datagram+0x140>)
 80157fa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80157fc:	8bfb      	ldrh	r3, [r7, #30]
}
 80157fe:	4618      	mov	r0, r3
 8015800:	3720      	adds	r7, #32
 8015802:	46bd      	mov	sp, r7
 8015804:	bd80      	pop	{r7, pc}
 8015806:	bf00      	nop
 8015808:	0801acec 	.word	0x0801acec
 801580c:	0801ad28 	.word	0x0801ad28
 8015810:	0801ad34 	.word	0x0801ad34
 8015814:	0801ad5c 	.word	0x0801ad5c
 8015818:	0801ad70 	.word	0x0801ad70
 801581c:	20006980 	.word	0x20006980
 8015820:	0801ad90 	.word	0x0801ad90

08015824 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b08a      	sub	sp, #40	; 0x28
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
 801582c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801582e:	2300      	movs	r3, #0
 8015830:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015832:	2300      	movs	r3, #0
 8015834:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015836:	2300      	movs	r3, #0
 8015838:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801583a:	2300      	movs	r3, #0
 801583c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801583e:	2300      	movs	r3, #0
 8015840:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015842:	4b28      	ldr	r3, [pc, #160]	; (80158e4 <ip_reass_remove_oldest_datagram+0xc0>)
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015848:	e030      	b.n	80158ac <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801584c:	695a      	ldr	r2, [r3, #20]
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	68db      	ldr	r3, [r3, #12]
 8015852:	429a      	cmp	r2, r3
 8015854:	d10c      	bne.n	8015870 <ip_reass_remove_oldest_datagram+0x4c>
 8015856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015858:	699a      	ldr	r2, [r3, #24]
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	691b      	ldr	r3, [r3, #16]
 801585e:	429a      	cmp	r2, r3
 8015860:	d106      	bne.n	8015870 <ip_reass_remove_oldest_datagram+0x4c>
 8015862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015864:	899a      	ldrh	r2, [r3, #12]
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	889b      	ldrh	r3, [r3, #4]
 801586a:	b29b      	uxth	r3, r3
 801586c:	429a      	cmp	r2, r3
 801586e:	d014      	beq.n	801589a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015870:	693b      	ldr	r3, [r7, #16]
 8015872:	3301      	adds	r3, #1
 8015874:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015876:	6a3b      	ldr	r3, [r7, #32]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d104      	bne.n	8015886 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801587e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015880:	69fb      	ldr	r3, [r7, #28]
 8015882:	61bb      	str	r3, [r7, #24]
 8015884:	e009      	b.n	801589a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015888:	7fda      	ldrb	r2, [r3, #31]
 801588a:	6a3b      	ldr	r3, [r7, #32]
 801588c:	7fdb      	ldrb	r3, [r3, #31]
 801588e:	429a      	cmp	r2, r3
 8015890:	d803      	bhi.n	801589a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015894:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015896:	69fb      	ldr	r3, [r7, #28]
 8015898:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d001      	beq.n	80158a6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80158a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158a4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80158a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80158ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d1cb      	bne.n	801584a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80158b2:	6a3b      	ldr	r3, [r7, #32]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d008      	beq.n	80158ca <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80158b8:	69b9      	ldr	r1, [r7, #24]
 80158ba:	6a38      	ldr	r0, [r7, #32]
 80158bc:	f7ff ff0e 	bl	80156dc <ip_reass_free_complete_datagram>
 80158c0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80158c2:	697a      	ldr	r2, [r7, #20]
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	4413      	add	r3, r2
 80158c8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80158ca:	697a      	ldr	r2, [r7, #20]
 80158cc:	683b      	ldr	r3, [r7, #0]
 80158ce:	429a      	cmp	r2, r3
 80158d0:	da02      	bge.n	80158d8 <ip_reass_remove_oldest_datagram+0xb4>
 80158d2:	693b      	ldr	r3, [r7, #16]
 80158d4:	2b01      	cmp	r3, #1
 80158d6:	dcac      	bgt.n	8015832 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80158d8:	697b      	ldr	r3, [r7, #20]
}
 80158da:	4618      	mov	r0, r3
 80158dc:	3728      	adds	r7, #40	; 0x28
 80158de:	46bd      	mov	sp, r7
 80158e0:	bd80      	pop	{r7, pc}
 80158e2:	bf00      	nop
 80158e4:	2000697c 	.word	0x2000697c

080158e8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b084      	sub	sp, #16
 80158ec:	af00      	add	r7, sp, #0
 80158ee:	6078      	str	r0, [r7, #4]
 80158f0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80158f2:	2004      	movs	r0, #4
 80158f4:	f7f6 fbbc 	bl	800c070 <memp_malloc>
 80158f8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d110      	bne.n	8015922 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015900:	6839      	ldr	r1, [r7, #0]
 8015902:	6878      	ldr	r0, [r7, #4]
 8015904:	f7ff ff8e 	bl	8015824 <ip_reass_remove_oldest_datagram>
 8015908:	4602      	mov	r2, r0
 801590a:	683b      	ldr	r3, [r7, #0]
 801590c:	4293      	cmp	r3, r2
 801590e:	dc03      	bgt.n	8015918 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015910:	2004      	movs	r0, #4
 8015912:	f7f6 fbad 	bl	800c070 <memp_malloc>
 8015916:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d101      	bne.n	8015922 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801591e:	2300      	movs	r3, #0
 8015920:	e016      	b.n	8015950 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015922:	2220      	movs	r2, #32
 8015924:	2100      	movs	r1, #0
 8015926:	68f8      	ldr	r0, [r7, #12]
 8015928:	f001 f8da 	bl	8016ae0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	220f      	movs	r2, #15
 8015930:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015932:	4b09      	ldr	r3, [pc, #36]	; (8015958 <ip_reass_enqueue_new_datagram+0x70>)
 8015934:	681a      	ldr	r2, [r3, #0]
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801593a:	4a07      	ldr	r2, [pc, #28]	; (8015958 <ip_reass_enqueue_new_datagram+0x70>)
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	3308      	adds	r3, #8
 8015944:	2214      	movs	r2, #20
 8015946:	6879      	ldr	r1, [r7, #4]
 8015948:	4618      	mov	r0, r3
 801594a:	f001 f8bb 	bl	8016ac4 <memcpy>
  return ipr;
 801594e:	68fb      	ldr	r3, [r7, #12]
}
 8015950:	4618      	mov	r0, r3
 8015952:	3710      	adds	r7, #16
 8015954:	46bd      	mov	sp, r7
 8015956:	bd80      	pop	{r7, pc}
 8015958:	2000697c 	.word	0x2000697c

0801595c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801595c:	b580      	push	{r7, lr}
 801595e:	b082      	sub	sp, #8
 8015960:	af00      	add	r7, sp, #0
 8015962:	6078      	str	r0, [r7, #4]
 8015964:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015966:	4b10      	ldr	r3, [pc, #64]	; (80159a8 <ip_reass_dequeue_datagram+0x4c>)
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	687a      	ldr	r2, [r7, #4]
 801596c:	429a      	cmp	r2, r3
 801596e:	d104      	bne.n	801597a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	4a0c      	ldr	r2, [pc, #48]	; (80159a8 <ip_reass_dequeue_datagram+0x4c>)
 8015976:	6013      	str	r3, [r2, #0]
 8015978:	e00d      	b.n	8015996 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801597a:	683b      	ldr	r3, [r7, #0]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d106      	bne.n	801598e <ip_reass_dequeue_datagram+0x32>
 8015980:	4b0a      	ldr	r3, [pc, #40]	; (80159ac <ip_reass_dequeue_datagram+0x50>)
 8015982:	f240 1245 	movw	r2, #325	; 0x145
 8015986:	490a      	ldr	r1, [pc, #40]	; (80159b0 <ip_reass_dequeue_datagram+0x54>)
 8015988:	480a      	ldr	r0, [pc, #40]	; (80159b4 <ip_reass_dequeue_datagram+0x58>)
 801598a:	f001 f95b 	bl	8016c44 <iprintf>
    prev->next = ipr->next;
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	681a      	ldr	r2, [r3, #0]
 8015992:	683b      	ldr	r3, [r7, #0]
 8015994:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015996:	6879      	ldr	r1, [r7, #4]
 8015998:	2004      	movs	r0, #4
 801599a:	f7f6 fbbb 	bl	800c114 <memp_free>
}
 801599e:	bf00      	nop
 80159a0:	3708      	adds	r7, #8
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bd80      	pop	{r7, pc}
 80159a6:	bf00      	nop
 80159a8:	2000697c 	.word	0x2000697c
 80159ac:	0801acec 	.word	0x0801acec
 80159b0:	0801adb4 	.word	0x0801adb4
 80159b4:	0801ad34 	.word	0x0801ad34

080159b8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80159b8:	b580      	push	{r7, lr}
 80159ba:	b08c      	sub	sp, #48	; 0x30
 80159bc:	af00      	add	r7, sp, #0
 80159be:	60f8      	str	r0, [r7, #12]
 80159c0:	60b9      	str	r1, [r7, #8]
 80159c2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80159c4:	2300      	movs	r3, #0
 80159c6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80159c8:	2301      	movs	r3, #1
 80159ca:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80159cc:	68bb      	ldr	r3, [r7, #8]
 80159ce:	685b      	ldr	r3, [r3, #4]
 80159d0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80159d2:	69fb      	ldr	r3, [r7, #28]
 80159d4:	885b      	ldrh	r3, [r3, #2]
 80159d6:	b29b      	uxth	r3, r3
 80159d8:	4618      	mov	r0, r3
 80159da:	f7f5 fe93 	bl	800b704 <lwip_htons>
 80159de:	4603      	mov	r3, r0
 80159e0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80159e2:	69fb      	ldr	r3, [r7, #28]
 80159e4:	781b      	ldrb	r3, [r3, #0]
 80159e6:	f003 030f 	and.w	r3, r3, #15
 80159ea:	b2db      	uxtb	r3, r3
 80159ec:	009b      	lsls	r3, r3, #2
 80159ee:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80159f0:	7e7b      	ldrb	r3, [r7, #25]
 80159f2:	b29b      	uxth	r3, r3
 80159f4:	8b7a      	ldrh	r2, [r7, #26]
 80159f6:	429a      	cmp	r2, r3
 80159f8:	d202      	bcs.n	8015a00 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80159fa:	f04f 33ff 	mov.w	r3, #4294967295
 80159fe:	e135      	b.n	8015c6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015a00:	7e7b      	ldrb	r3, [r7, #25]
 8015a02:	b29b      	uxth	r3, r3
 8015a04:	8b7a      	ldrh	r2, [r7, #26]
 8015a06:	1ad3      	subs	r3, r2, r3
 8015a08:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015a0a:	69fb      	ldr	r3, [r7, #28]
 8015a0c:	88db      	ldrh	r3, [r3, #6]
 8015a0e:	b29b      	uxth	r3, r3
 8015a10:	4618      	mov	r0, r3
 8015a12:	f7f5 fe77 	bl	800b704 <lwip_htons>
 8015a16:	4603      	mov	r3, r0
 8015a18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015a1c:	b29b      	uxth	r3, r3
 8015a1e:	00db      	lsls	r3, r3, #3
 8015a20:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015a22:	68bb      	ldr	r3, [r7, #8]
 8015a24:	685b      	ldr	r3, [r3, #4]
 8015a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	701a      	strb	r2, [r3, #0]
 8015a2e:	2200      	movs	r2, #0
 8015a30:	705a      	strb	r2, [r3, #1]
 8015a32:	2200      	movs	r2, #0
 8015a34:	709a      	strb	r2, [r3, #2]
 8015a36:	2200      	movs	r2, #0
 8015a38:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a3c:	8afa      	ldrh	r2, [r7, #22]
 8015a3e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015a40:	8afa      	ldrh	r2, [r7, #22]
 8015a42:	8b7b      	ldrh	r3, [r7, #26]
 8015a44:	4413      	add	r3, r2
 8015a46:	b29a      	uxth	r2, r3
 8015a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a4a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a4e:	88db      	ldrh	r3, [r3, #6]
 8015a50:	b29b      	uxth	r3, r3
 8015a52:	8afa      	ldrh	r2, [r7, #22]
 8015a54:	429a      	cmp	r2, r3
 8015a56:	d902      	bls.n	8015a5e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015a58:	f04f 33ff 	mov.w	r3, #4294967295
 8015a5c:	e106      	b.n	8015c6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	685b      	ldr	r3, [r3, #4]
 8015a62:	627b      	str	r3, [r7, #36]	; 0x24
 8015a64:	e068      	b.n	8015b38 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a68:	685b      	ldr	r3, [r3, #4]
 8015a6a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a6e:	889b      	ldrh	r3, [r3, #4]
 8015a70:	b29a      	uxth	r2, r3
 8015a72:	693b      	ldr	r3, [r7, #16]
 8015a74:	889b      	ldrh	r3, [r3, #4]
 8015a76:	b29b      	uxth	r3, r3
 8015a78:	429a      	cmp	r2, r3
 8015a7a:	d235      	bcs.n	8015ae8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a80:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d020      	beq.n	8015aca <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a8a:	889b      	ldrh	r3, [r3, #4]
 8015a8c:	b29a      	uxth	r2, r3
 8015a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a90:	88db      	ldrh	r3, [r3, #6]
 8015a92:	b29b      	uxth	r3, r3
 8015a94:	429a      	cmp	r2, r3
 8015a96:	d307      	bcc.n	8015aa8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a9a:	88db      	ldrh	r3, [r3, #6]
 8015a9c:	b29a      	uxth	r2, r3
 8015a9e:	693b      	ldr	r3, [r7, #16]
 8015aa0:	889b      	ldrh	r3, [r3, #4]
 8015aa2:	b29b      	uxth	r3, r3
 8015aa4:	429a      	cmp	r2, r3
 8015aa6:	d902      	bls.n	8015aae <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8015aac:	e0de      	b.n	8015c6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ab0:	68ba      	ldr	r2, [r7, #8]
 8015ab2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ab6:	88db      	ldrh	r3, [r3, #6]
 8015ab8:	b29a      	uxth	r2, r3
 8015aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015abc:	889b      	ldrh	r3, [r3, #4]
 8015abe:	b29b      	uxth	r3, r3
 8015ac0:	429a      	cmp	r2, r3
 8015ac2:	d03d      	beq.n	8015b40 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015ac8:	e03a      	b.n	8015b40 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015acc:	88db      	ldrh	r3, [r3, #6]
 8015ace:	b29a      	uxth	r2, r3
 8015ad0:	693b      	ldr	r3, [r7, #16]
 8015ad2:	889b      	ldrh	r3, [r3, #4]
 8015ad4:	b29b      	uxth	r3, r3
 8015ad6:	429a      	cmp	r2, r3
 8015ad8:	d902      	bls.n	8015ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015ada:	f04f 33ff 	mov.w	r3, #4294967295
 8015ade:	e0c5      	b.n	8015c6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	68ba      	ldr	r2, [r7, #8]
 8015ae4:	605a      	str	r2, [r3, #4]
      break;
 8015ae6:	e02b      	b.n	8015b40 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aea:	889b      	ldrh	r3, [r3, #4]
 8015aec:	b29a      	uxth	r2, r3
 8015aee:	693b      	ldr	r3, [r7, #16]
 8015af0:	889b      	ldrh	r3, [r3, #4]
 8015af2:	b29b      	uxth	r3, r3
 8015af4:	429a      	cmp	r2, r3
 8015af6:	d102      	bne.n	8015afe <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015af8:	f04f 33ff 	mov.w	r3, #4294967295
 8015afc:	e0b6      	b.n	8015c6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b00:	889b      	ldrh	r3, [r3, #4]
 8015b02:	b29a      	uxth	r2, r3
 8015b04:	693b      	ldr	r3, [r7, #16]
 8015b06:	88db      	ldrh	r3, [r3, #6]
 8015b08:	b29b      	uxth	r3, r3
 8015b0a:	429a      	cmp	r2, r3
 8015b0c:	d202      	bcs.n	8015b14 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8015b12:	e0ab      	b.n	8015c6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d009      	beq.n	8015b2e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b1c:	88db      	ldrh	r3, [r3, #6]
 8015b1e:	b29a      	uxth	r2, r3
 8015b20:	693b      	ldr	r3, [r7, #16]
 8015b22:	889b      	ldrh	r3, [r3, #4]
 8015b24:	b29b      	uxth	r3, r3
 8015b26:	429a      	cmp	r2, r3
 8015b28:	d001      	beq.n	8015b2e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015b2e:	693b      	ldr	r3, [r7, #16]
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015b34:	693b      	ldr	r3, [r7, #16]
 8015b36:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d193      	bne.n	8015a66 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015b3e:	e000      	b.n	8015b42 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015b40:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d12d      	bne.n	8015ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d01c      	beq.n	8015b88 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b50:	88db      	ldrh	r3, [r3, #6]
 8015b52:	b29a      	uxth	r2, r3
 8015b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b56:	889b      	ldrh	r3, [r3, #4]
 8015b58:	b29b      	uxth	r3, r3
 8015b5a:	429a      	cmp	r2, r3
 8015b5c:	d906      	bls.n	8015b6c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015b5e:	4b45      	ldr	r3, [pc, #276]	; (8015c74 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015b60:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015b64:	4944      	ldr	r1, [pc, #272]	; (8015c78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015b66:	4845      	ldr	r0, [pc, #276]	; (8015c7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015b68:	f001 f86c 	bl	8016c44 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b6e:	68ba      	ldr	r2, [r7, #8]
 8015b70:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b74:	88db      	ldrh	r3, [r3, #6]
 8015b76:	b29a      	uxth	r2, r3
 8015b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b7a:	889b      	ldrh	r3, [r3, #4]
 8015b7c:	b29b      	uxth	r3, r3
 8015b7e:	429a      	cmp	r2, r3
 8015b80:	d010      	beq.n	8015ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015b82:	2300      	movs	r3, #0
 8015b84:	623b      	str	r3, [r7, #32]
 8015b86:	e00d      	b.n	8015ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	685b      	ldr	r3, [r3, #4]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d006      	beq.n	8015b9e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015b90:	4b38      	ldr	r3, [pc, #224]	; (8015c74 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015b92:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015b96:	493a      	ldr	r1, [pc, #232]	; (8015c80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015b98:	4838      	ldr	r0, [pc, #224]	; (8015c7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015b9a:	f001 f853 	bl	8016c44 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	68ba      	ldr	r2, [r7, #8]
 8015ba2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d105      	bne.n	8015bb6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	7f9b      	ldrb	r3, [r3, #30]
 8015bae:	f003 0301 	and.w	r3, r3, #1
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d059      	beq.n	8015c6a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015bb6:	6a3b      	ldr	r3, [r7, #32]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d04f      	beq.n	8015c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	685b      	ldr	r3, [r3, #4]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d006      	beq.n	8015bd2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	685b      	ldr	r3, [r3, #4]
 8015bc8:	685b      	ldr	r3, [r3, #4]
 8015bca:	889b      	ldrh	r3, [r3, #4]
 8015bcc:	b29b      	uxth	r3, r3
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d002      	beq.n	8015bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015bd2:	2300      	movs	r3, #0
 8015bd4:	623b      	str	r3, [r7, #32]
 8015bd6:	e041      	b.n	8015c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bda:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015be2:	e012      	b.n	8015c0a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015be6:	685b      	ldr	r3, [r3, #4]
 8015be8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bec:	88db      	ldrh	r3, [r3, #6]
 8015bee:	b29a      	uxth	r2, r3
 8015bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bf2:	889b      	ldrh	r3, [r3, #4]
 8015bf4:	b29b      	uxth	r3, r3
 8015bf6:	429a      	cmp	r2, r3
 8015bf8:	d002      	beq.n	8015c00 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	623b      	str	r3, [r7, #32]
            break;
 8015bfe:	e007      	b.n	8015c10 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c02:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d1e9      	bne.n	8015be4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015c10:	6a3b      	ldr	r3, [r7, #32]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d022      	beq.n	8015c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	685b      	ldr	r3, [r3, #4]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d106      	bne.n	8015c2c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015c1e:	4b15      	ldr	r3, [pc, #84]	; (8015c74 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015c20:	f240 12df 	movw	r2, #479	; 0x1df
 8015c24:	4917      	ldr	r1, [pc, #92]	; (8015c84 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015c26:	4815      	ldr	r0, [pc, #84]	; (8015c7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015c28:	f001 f80c 	bl	8016c44 <iprintf>
          LWIP_ASSERT("sanity check",
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	685b      	ldr	r3, [r3, #4]
 8015c30:	685b      	ldr	r3, [r3, #4]
 8015c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015c34:	429a      	cmp	r2, r3
 8015c36:	d106      	bne.n	8015c46 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015c38:	4b0e      	ldr	r3, [pc, #56]	; (8015c74 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015c3a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015c3e:	4911      	ldr	r1, [pc, #68]	; (8015c84 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015c40:	480e      	ldr	r0, [pc, #56]	; (8015c7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015c42:	f000 ffff 	bl	8016c44 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d006      	beq.n	8015c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015c4e:	4b09      	ldr	r3, [pc, #36]	; (8015c74 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015c50:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015c54:	490c      	ldr	r1, [pc, #48]	; (8015c88 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015c56:	4809      	ldr	r0, [pc, #36]	; (8015c7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015c58:	f000 fff4 	bl	8016c44 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015c5c:	6a3b      	ldr	r3, [r7, #32]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	bf14      	ite	ne
 8015c62:	2301      	movne	r3, #1
 8015c64:	2300      	moveq	r3, #0
 8015c66:	b2db      	uxtb	r3, r3
 8015c68:	e000      	b.n	8015c6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015c6a:	2300      	movs	r3, #0
}
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	3730      	adds	r7, #48	; 0x30
 8015c70:	46bd      	mov	sp, r7
 8015c72:	bd80      	pop	{r7, pc}
 8015c74:	0801acec 	.word	0x0801acec
 8015c78:	0801add0 	.word	0x0801add0
 8015c7c:	0801ad34 	.word	0x0801ad34
 8015c80:	0801adf0 	.word	0x0801adf0
 8015c84:	0801ae28 	.word	0x0801ae28
 8015c88:	0801ae38 	.word	0x0801ae38

08015c8c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b08e      	sub	sp, #56	; 0x38
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	685b      	ldr	r3, [r3, #4]
 8015c98:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c9c:	781b      	ldrb	r3, [r3, #0]
 8015c9e:	f003 030f 	and.w	r3, r3, #15
 8015ca2:	b2db      	uxtb	r3, r3
 8015ca4:	009b      	lsls	r3, r3, #2
 8015ca6:	b2db      	uxtb	r3, r3
 8015ca8:	2b14      	cmp	r3, #20
 8015caa:	f040 8167 	bne.w	8015f7c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cb0:	88db      	ldrh	r3, [r3, #6]
 8015cb2:	b29b      	uxth	r3, r3
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	f7f5 fd25 	bl	800b704 <lwip_htons>
 8015cba:	4603      	mov	r3, r0
 8015cbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015cc0:	b29b      	uxth	r3, r3
 8015cc2:	00db      	lsls	r3, r3, #3
 8015cc4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc8:	885b      	ldrh	r3, [r3, #2]
 8015cca:	b29b      	uxth	r3, r3
 8015ccc:	4618      	mov	r0, r3
 8015cce:	f7f5 fd19 	bl	800b704 <lwip_htons>
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cd8:	781b      	ldrb	r3, [r3, #0]
 8015cda:	f003 030f 	and.w	r3, r3, #15
 8015cde:	b2db      	uxtb	r3, r3
 8015ce0:	009b      	lsls	r3, r3, #2
 8015ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015ce6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015cea:	b29b      	uxth	r3, r3
 8015cec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015cee:	429a      	cmp	r2, r3
 8015cf0:	f0c0 8146 	bcc.w	8015f80 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015cf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015cf8:	b29b      	uxth	r3, r3
 8015cfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015cfc:	1ad3      	subs	r3, r2, r3
 8015cfe:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015d00:	6878      	ldr	r0, [r7, #4]
 8015d02:	f7f7 f8d5 	bl	800ceb0 <pbuf_clen>
 8015d06:	4603      	mov	r3, r0
 8015d08:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015d0a:	4b9f      	ldr	r3, [pc, #636]	; (8015f88 <ip4_reass+0x2fc>)
 8015d0c:	881b      	ldrh	r3, [r3, #0]
 8015d0e:	461a      	mov	r2, r3
 8015d10:	8c3b      	ldrh	r3, [r7, #32]
 8015d12:	4413      	add	r3, r2
 8015d14:	2b0a      	cmp	r3, #10
 8015d16:	dd10      	ble.n	8015d3a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015d18:	8c3b      	ldrh	r3, [r7, #32]
 8015d1a:	4619      	mov	r1, r3
 8015d1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d1e:	f7ff fd81 	bl	8015824 <ip_reass_remove_oldest_datagram>
 8015d22:	4603      	mov	r3, r0
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	f000 812d 	beq.w	8015f84 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015d2a:	4b97      	ldr	r3, [pc, #604]	; (8015f88 <ip4_reass+0x2fc>)
 8015d2c:	881b      	ldrh	r3, [r3, #0]
 8015d2e:	461a      	mov	r2, r3
 8015d30:	8c3b      	ldrh	r3, [r7, #32]
 8015d32:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015d34:	2b0a      	cmp	r3, #10
 8015d36:	f300 8125 	bgt.w	8015f84 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015d3a:	4b94      	ldr	r3, [pc, #592]	; (8015f8c <ip4_reass+0x300>)
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	633b      	str	r3, [r7, #48]	; 0x30
 8015d40:	e015      	b.n	8015d6e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d44:	695a      	ldr	r2, [r3, #20]
 8015d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d48:	68db      	ldr	r3, [r3, #12]
 8015d4a:	429a      	cmp	r2, r3
 8015d4c:	d10c      	bne.n	8015d68 <ip4_reass+0xdc>
 8015d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d50:	699a      	ldr	r2, [r3, #24]
 8015d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d54:	691b      	ldr	r3, [r3, #16]
 8015d56:	429a      	cmp	r2, r3
 8015d58:	d106      	bne.n	8015d68 <ip4_reass+0xdc>
 8015d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d5c:	899a      	ldrh	r2, [r3, #12]
 8015d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d60:	889b      	ldrh	r3, [r3, #4]
 8015d62:	b29b      	uxth	r3, r3
 8015d64:	429a      	cmp	r2, r3
 8015d66:	d006      	beq.n	8015d76 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	633b      	str	r3, [r7, #48]	; 0x30
 8015d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d1e6      	bne.n	8015d42 <ip4_reass+0xb6>
 8015d74:	e000      	b.n	8015d78 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015d76:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d109      	bne.n	8015d92 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015d7e:	8c3b      	ldrh	r3, [r7, #32]
 8015d80:	4619      	mov	r1, r3
 8015d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d84:	f7ff fdb0 	bl	80158e8 <ip_reass_enqueue_new_datagram>
 8015d88:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d11c      	bne.n	8015dca <ip4_reass+0x13e>
      goto nullreturn;
 8015d90:	e109      	b.n	8015fa6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d94:	88db      	ldrh	r3, [r3, #6]
 8015d96:	b29b      	uxth	r3, r3
 8015d98:	4618      	mov	r0, r3
 8015d9a:	f7f5 fcb3 	bl	800b704 <lwip_htons>
 8015d9e:	4603      	mov	r3, r0
 8015da0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d110      	bne.n	8015dca <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015daa:	89db      	ldrh	r3, [r3, #14]
 8015dac:	4618      	mov	r0, r3
 8015dae:	f7f5 fca9 	bl	800b704 <lwip_htons>
 8015db2:	4603      	mov	r3, r0
 8015db4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d006      	beq.n	8015dca <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dbe:	3308      	adds	r3, #8
 8015dc0:	2214      	movs	r2, #20
 8015dc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	f000 fe7d 	bl	8016ac4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dcc:	88db      	ldrh	r3, [r3, #6]
 8015dce:	b29b      	uxth	r3, r3
 8015dd0:	f003 0320 	and.w	r3, r3, #32
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	bf0c      	ite	eq
 8015dd8:	2301      	moveq	r3, #1
 8015dda:	2300      	movne	r3, #0
 8015ddc:	b2db      	uxtb	r3, r3
 8015dde:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015de0:	69fb      	ldr	r3, [r7, #28]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d00e      	beq.n	8015e04 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015de6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015de8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015dea:	4413      	add	r3, r2
 8015dec:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015dee:	8b7a      	ldrh	r2, [r7, #26]
 8015df0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015df2:	429a      	cmp	r2, r3
 8015df4:	f0c0 80a0 	bcc.w	8015f38 <ip4_reass+0x2ac>
 8015df8:	8b7b      	ldrh	r3, [r7, #26]
 8015dfa:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015dfe:	4293      	cmp	r3, r2
 8015e00:	f200 809a 	bhi.w	8015f38 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015e04:	69fa      	ldr	r2, [r7, #28]
 8015e06:	6879      	ldr	r1, [r7, #4]
 8015e08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e0a:	f7ff fdd5 	bl	80159b8 <ip_reass_chain_frag_into_datagram_and_validate>
 8015e0e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015e10:	697b      	ldr	r3, [r7, #20]
 8015e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e16:	f000 8091 	beq.w	8015f3c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015e1a:	4b5b      	ldr	r3, [pc, #364]	; (8015f88 <ip4_reass+0x2fc>)
 8015e1c:	881a      	ldrh	r2, [r3, #0]
 8015e1e:	8c3b      	ldrh	r3, [r7, #32]
 8015e20:	4413      	add	r3, r2
 8015e22:	b29a      	uxth	r2, r3
 8015e24:	4b58      	ldr	r3, [pc, #352]	; (8015f88 <ip4_reass+0x2fc>)
 8015e26:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015e28:	69fb      	ldr	r3, [r7, #28]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d00d      	beq.n	8015e4a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015e2e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015e30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e32:	4413      	add	r3, r2
 8015e34:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e38:	8a7a      	ldrh	r2, [r7, #18]
 8015e3a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e3e:	7f9b      	ldrb	r3, [r3, #30]
 8015e40:	f043 0301 	orr.w	r3, r3, #1
 8015e44:	b2da      	uxtb	r2, r3
 8015e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e48:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015e4a:	697b      	ldr	r3, [r7, #20]
 8015e4c:	2b01      	cmp	r3, #1
 8015e4e:	d171      	bne.n	8015f34 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e52:	8b9b      	ldrh	r3, [r3, #28]
 8015e54:	3314      	adds	r3, #20
 8015e56:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e5a:	685b      	ldr	r3, [r3, #4]
 8015e5c:	685b      	ldr	r3, [r3, #4]
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e64:	685b      	ldr	r3, [r3, #4]
 8015e66:	685b      	ldr	r3, [r3, #4]
 8015e68:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e6c:	3308      	adds	r3, #8
 8015e6e:	2214      	movs	r2, #20
 8015e70:	4619      	mov	r1, r3
 8015e72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e74:	f000 fe26 	bl	8016ac4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015e78:	8a3b      	ldrh	r3, [r7, #16]
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	f7f5 fc42 	bl	800b704 <lwip_htons>
 8015e80:	4603      	mov	r3, r0
 8015e82:	461a      	mov	r2, r3
 8015e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e86:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	719a      	strb	r2, [r3, #6]
 8015e8e:	2200      	movs	r2, #0
 8015e90:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e94:	2200      	movs	r2, #0
 8015e96:	729a      	strb	r2, [r3, #10]
 8015e98:	2200      	movs	r2, #0
 8015e9a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e9e:	685b      	ldr	r3, [r3, #4]
 8015ea0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015ea2:	e00d      	b.n	8015ec0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ea6:	685b      	ldr	r3, [r3, #4]
 8015ea8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015eaa:	2114      	movs	r1, #20
 8015eac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015eae:	f7f6 feeb 	bl	800cc88 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015eb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015eb4:	6878      	ldr	r0, [r7, #4]
 8015eb6:	f7f7 f83b 	bl	800cf30 <pbuf_cat>
      r = iprh->next_pbuf;
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d1ee      	bne.n	8015ea4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015ec6:	4b31      	ldr	r3, [pc, #196]	; (8015f8c <ip4_reass+0x300>)
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ecc:	429a      	cmp	r2, r3
 8015ece:	d102      	bne.n	8015ed6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015ed0:	2300      	movs	r3, #0
 8015ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015ed4:	e010      	b.n	8015ef8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015ed6:	4b2d      	ldr	r3, [pc, #180]	; (8015f8c <ip4_reass+0x300>)
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015edc:	e007      	b.n	8015eee <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ee4:	429a      	cmp	r2, r3
 8015ee6:	d006      	beq.n	8015ef6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d1f4      	bne.n	8015ede <ip4_reass+0x252>
 8015ef4:	e000      	b.n	8015ef8 <ip4_reass+0x26c>
          break;
 8015ef6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015ef8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015efa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015efc:	f7ff fd2e 	bl	801595c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015f00:	6878      	ldr	r0, [r7, #4]
 8015f02:	f7f6 ffd5 	bl	800ceb0 <pbuf_clen>
 8015f06:	4603      	mov	r3, r0
 8015f08:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015f0a:	4b1f      	ldr	r3, [pc, #124]	; (8015f88 <ip4_reass+0x2fc>)
 8015f0c:	881b      	ldrh	r3, [r3, #0]
 8015f0e:	8c3a      	ldrh	r2, [r7, #32]
 8015f10:	429a      	cmp	r2, r3
 8015f12:	d906      	bls.n	8015f22 <ip4_reass+0x296>
 8015f14:	4b1e      	ldr	r3, [pc, #120]	; (8015f90 <ip4_reass+0x304>)
 8015f16:	f240 229b 	movw	r2, #667	; 0x29b
 8015f1a:	491e      	ldr	r1, [pc, #120]	; (8015f94 <ip4_reass+0x308>)
 8015f1c:	481e      	ldr	r0, [pc, #120]	; (8015f98 <ip4_reass+0x30c>)
 8015f1e:	f000 fe91 	bl	8016c44 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015f22:	4b19      	ldr	r3, [pc, #100]	; (8015f88 <ip4_reass+0x2fc>)
 8015f24:	881a      	ldrh	r2, [r3, #0]
 8015f26:	8c3b      	ldrh	r3, [r7, #32]
 8015f28:	1ad3      	subs	r3, r2, r3
 8015f2a:	b29a      	uxth	r2, r3
 8015f2c:	4b16      	ldr	r3, [pc, #88]	; (8015f88 <ip4_reass+0x2fc>)
 8015f2e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	e03c      	b.n	8015fae <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015f34:	2300      	movs	r3, #0
 8015f36:	e03a      	b.n	8015fae <ip4_reass+0x322>
      goto nullreturn_ipr;
 8015f38:	bf00      	nop
 8015f3a:	e000      	b.n	8015f3e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8015f3c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d106      	bne.n	8015f52 <ip4_reass+0x2c6>
 8015f44:	4b12      	ldr	r3, [pc, #72]	; (8015f90 <ip4_reass+0x304>)
 8015f46:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015f4a:	4914      	ldr	r1, [pc, #80]	; (8015f9c <ip4_reass+0x310>)
 8015f4c:	4812      	ldr	r0, [pc, #72]	; (8015f98 <ip4_reass+0x30c>)
 8015f4e:	f000 fe79 	bl	8016c44 <iprintf>
  if (ipr->p == NULL) {
 8015f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f54:	685b      	ldr	r3, [r3, #4]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d124      	bne.n	8015fa4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015f5a:	4b0c      	ldr	r3, [pc, #48]	; (8015f8c <ip4_reass+0x300>)
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f60:	429a      	cmp	r2, r3
 8015f62:	d006      	beq.n	8015f72 <ip4_reass+0x2e6>
 8015f64:	4b0a      	ldr	r3, [pc, #40]	; (8015f90 <ip4_reass+0x304>)
 8015f66:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015f6a:	490d      	ldr	r1, [pc, #52]	; (8015fa0 <ip4_reass+0x314>)
 8015f6c:	480a      	ldr	r0, [pc, #40]	; (8015f98 <ip4_reass+0x30c>)
 8015f6e:	f000 fe69 	bl	8016c44 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015f72:	2100      	movs	r1, #0
 8015f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f76:	f7ff fcf1 	bl	801595c <ip_reass_dequeue_datagram>
 8015f7a:	e014      	b.n	8015fa6 <ip4_reass+0x31a>
    goto nullreturn;
 8015f7c:	bf00      	nop
 8015f7e:	e012      	b.n	8015fa6 <ip4_reass+0x31a>
    goto nullreturn;
 8015f80:	bf00      	nop
 8015f82:	e010      	b.n	8015fa6 <ip4_reass+0x31a>
      goto nullreturn;
 8015f84:	bf00      	nop
 8015f86:	e00e      	b.n	8015fa6 <ip4_reass+0x31a>
 8015f88:	20006980 	.word	0x20006980
 8015f8c:	2000697c 	.word	0x2000697c
 8015f90:	0801acec 	.word	0x0801acec
 8015f94:	0801ae5c 	.word	0x0801ae5c
 8015f98:	0801ad34 	.word	0x0801ad34
 8015f9c:	0801ae78 	.word	0x0801ae78
 8015fa0:	0801ae84 	.word	0x0801ae84
  }

nullreturn:
 8015fa4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015fa6:	6878      	ldr	r0, [r7, #4]
 8015fa8:	f7f6 fef4 	bl	800cd94 <pbuf_free>
  return NULL;
 8015fac:	2300      	movs	r3, #0
}
 8015fae:	4618      	mov	r0, r3
 8015fb0:	3738      	adds	r7, #56	; 0x38
 8015fb2:	46bd      	mov	sp, r7
 8015fb4:	bd80      	pop	{r7, pc}
 8015fb6:	bf00      	nop

08015fb8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015fb8:	b580      	push	{r7, lr}
 8015fba:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015fbc:	2005      	movs	r0, #5
 8015fbe:	f7f6 f857 	bl	800c070 <memp_malloc>
 8015fc2:	4603      	mov	r3, r0
}
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	bd80      	pop	{r7, pc}

08015fc8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b082      	sub	sp, #8
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d106      	bne.n	8015fe4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015fd6:	4b07      	ldr	r3, [pc, #28]	; (8015ff4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015fd8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015fdc:	4906      	ldr	r1, [pc, #24]	; (8015ff8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8015fde:	4807      	ldr	r0, [pc, #28]	; (8015ffc <ip_frag_free_pbuf_custom_ref+0x34>)
 8015fe0:	f000 fe30 	bl	8016c44 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015fe4:	6879      	ldr	r1, [r7, #4]
 8015fe6:	2005      	movs	r0, #5
 8015fe8:	f7f6 f894 	bl	800c114 <memp_free>
}
 8015fec:	bf00      	nop
 8015fee:	3708      	adds	r7, #8
 8015ff0:	46bd      	mov	sp, r7
 8015ff2:	bd80      	pop	{r7, pc}
 8015ff4:	0801acec 	.word	0x0801acec
 8015ff8:	0801aea4 	.word	0x0801aea4
 8015ffc:	0801ad34 	.word	0x0801ad34

08016000 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016000:	b580      	push	{r7, lr}
 8016002:	b084      	sub	sp, #16
 8016004:	af00      	add	r7, sp, #0
 8016006:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d106      	bne.n	8016020 <ipfrag_free_pbuf_custom+0x20>
 8016012:	4b11      	ldr	r3, [pc, #68]	; (8016058 <ipfrag_free_pbuf_custom+0x58>)
 8016014:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016018:	4910      	ldr	r1, [pc, #64]	; (801605c <ipfrag_free_pbuf_custom+0x5c>)
 801601a:	4811      	ldr	r0, [pc, #68]	; (8016060 <ipfrag_free_pbuf_custom+0x60>)
 801601c:	f000 fe12 	bl	8016c44 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016020:	68fa      	ldr	r2, [r7, #12]
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	429a      	cmp	r2, r3
 8016026:	d006      	beq.n	8016036 <ipfrag_free_pbuf_custom+0x36>
 8016028:	4b0b      	ldr	r3, [pc, #44]	; (8016058 <ipfrag_free_pbuf_custom+0x58>)
 801602a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801602e:	490d      	ldr	r1, [pc, #52]	; (8016064 <ipfrag_free_pbuf_custom+0x64>)
 8016030:	480b      	ldr	r0, [pc, #44]	; (8016060 <ipfrag_free_pbuf_custom+0x60>)
 8016032:	f000 fe07 	bl	8016c44 <iprintf>
  if (pcr->original != NULL) {
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	695b      	ldr	r3, [r3, #20]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d004      	beq.n	8016048 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	695b      	ldr	r3, [r3, #20]
 8016042:	4618      	mov	r0, r3
 8016044:	f7f6 fea6 	bl	800cd94 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016048:	68f8      	ldr	r0, [r7, #12]
 801604a:	f7ff ffbd 	bl	8015fc8 <ip_frag_free_pbuf_custom_ref>
}
 801604e:	bf00      	nop
 8016050:	3710      	adds	r7, #16
 8016052:	46bd      	mov	sp, r7
 8016054:	bd80      	pop	{r7, pc}
 8016056:	bf00      	nop
 8016058:	0801acec 	.word	0x0801acec
 801605c:	0801aeb0 	.word	0x0801aeb0
 8016060:	0801ad34 	.word	0x0801ad34
 8016064:	0801aebc 	.word	0x0801aebc

08016068 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b094      	sub	sp, #80	; 0x50
 801606c:	af02      	add	r7, sp, #8
 801606e:	60f8      	str	r0, [r7, #12]
 8016070:	60b9      	str	r1, [r7, #8]
 8016072:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016074:	2300      	movs	r3, #0
 8016076:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801607a:	68bb      	ldr	r3, [r7, #8]
 801607c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801607e:	3b14      	subs	r3, #20
 8016080:	2b00      	cmp	r3, #0
 8016082:	da00      	bge.n	8016086 <ip4_frag+0x1e>
 8016084:	3307      	adds	r3, #7
 8016086:	10db      	asrs	r3, r3, #3
 8016088:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801608a:	2314      	movs	r3, #20
 801608c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	685b      	ldr	r3, [r3, #4]
 8016092:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016096:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801609a:	781b      	ldrb	r3, [r3, #0]
 801609c:	f003 030f 	and.w	r3, r3, #15
 80160a0:	b2db      	uxtb	r3, r3
 80160a2:	009b      	lsls	r3, r3, #2
 80160a4:	b2db      	uxtb	r3, r3
 80160a6:	2b14      	cmp	r3, #20
 80160a8:	d002      	beq.n	80160b0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80160aa:	f06f 0305 	mvn.w	r3, #5
 80160ae:	e110      	b.n	80162d2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	895b      	ldrh	r3, [r3, #10]
 80160b4:	2b13      	cmp	r3, #19
 80160b6:	d809      	bhi.n	80160cc <ip4_frag+0x64>
 80160b8:	4b88      	ldr	r3, [pc, #544]	; (80162dc <ip4_frag+0x274>)
 80160ba:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80160be:	4988      	ldr	r1, [pc, #544]	; (80162e0 <ip4_frag+0x278>)
 80160c0:	4888      	ldr	r0, [pc, #544]	; (80162e4 <ip4_frag+0x27c>)
 80160c2:	f000 fdbf 	bl	8016c44 <iprintf>
 80160c6:	f06f 0305 	mvn.w	r3, #5
 80160ca:	e102      	b.n	80162d2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80160cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160ce:	88db      	ldrh	r3, [r3, #6]
 80160d0:	b29b      	uxth	r3, r3
 80160d2:	4618      	mov	r0, r3
 80160d4:	f7f5 fb16 	bl	800b704 <lwip_htons>
 80160d8:	4603      	mov	r3, r0
 80160da:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80160dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80160de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80160e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80160e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80160e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80160ec:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	891b      	ldrh	r3, [r3, #8]
 80160f2:	3b14      	subs	r3, #20
 80160f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80160f8:	e0e1      	b.n	80162be <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80160fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80160fc:	00db      	lsls	r3, r3, #3
 80160fe:	b29b      	uxth	r3, r3
 8016100:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016104:	4293      	cmp	r3, r2
 8016106:	bf28      	it	cs
 8016108:	4613      	movcs	r3, r2
 801610a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801610c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016110:	2114      	movs	r1, #20
 8016112:	200e      	movs	r0, #14
 8016114:	f7f6 fb5a 	bl	800c7cc <pbuf_alloc>
 8016118:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801611c:	2b00      	cmp	r3, #0
 801611e:	f000 80d5 	beq.w	80162cc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016124:	895b      	ldrh	r3, [r3, #10]
 8016126:	2b13      	cmp	r3, #19
 8016128:	d806      	bhi.n	8016138 <ip4_frag+0xd0>
 801612a:	4b6c      	ldr	r3, [pc, #432]	; (80162dc <ip4_frag+0x274>)
 801612c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016130:	496d      	ldr	r1, [pc, #436]	; (80162e8 <ip4_frag+0x280>)
 8016132:	486c      	ldr	r0, [pc, #432]	; (80162e4 <ip4_frag+0x27c>)
 8016134:	f000 fd86 	bl	8016c44 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801613a:	685b      	ldr	r3, [r3, #4]
 801613c:	2214      	movs	r2, #20
 801613e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016140:	4618      	mov	r0, r3
 8016142:	f000 fcbf 	bl	8016ac4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016148:	685b      	ldr	r3, [r3, #4]
 801614a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801614c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801614e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016152:	e064      	b.n	801621e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	895a      	ldrh	r2, [r3, #10]
 8016158:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801615a:	1ad3      	subs	r3, r2, r3
 801615c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	895b      	ldrh	r3, [r3, #10]
 8016162:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016164:	429a      	cmp	r2, r3
 8016166:	d906      	bls.n	8016176 <ip4_frag+0x10e>
 8016168:	4b5c      	ldr	r3, [pc, #368]	; (80162dc <ip4_frag+0x274>)
 801616a:	f240 322d 	movw	r2, #813	; 0x32d
 801616e:	495f      	ldr	r1, [pc, #380]	; (80162ec <ip4_frag+0x284>)
 8016170:	485c      	ldr	r0, [pc, #368]	; (80162e4 <ip4_frag+0x27c>)
 8016172:	f000 fd67 	bl	8016c44 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016176:	8bfa      	ldrh	r2, [r7, #30]
 8016178:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801617c:	4293      	cmp	r3, r2
 801617e:	bf28      	it	cs
 8016180:	4613      	movcs	r3, r2
 8016182:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016186:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801618a:	2b00      	cmp	r3, #0
 801618c:	d105      	bne.n	801619a <ip4_frag+0x132>
        poff = 0;
 801618e:	2300      	movs	r3, #0
 8016190:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	60fb      	str	r3, [r7, #12]
        continue;
 8016198:	e041      	b.n	801621e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801619a:	f7ff ff0d 	bl	8015fb8 <ip_frag_alloc_pbuf_custom_ref>
 801619e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80161a0:	69bb      	ldr	r3, [r7, #24]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d103      	bne.n	80161ae <ip4_frag+0x146>
        pbuf_free(rambuf);
 80161a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80161a8:	f7f6 fdf4 	bl	800cd94 <pbuf_free>
        goto memerr;
 80161ac:	e08f      	b.n	80162ce <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80161ae:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80161b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80161b6:	4413      	add	r3, r2
 80161b8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80161bc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80161c0:	9201      	str	r2, [sp, #4]
 80161c2:	9300      	str	r3, [sp, #0]
 80161c4:	4603      	mov	r3, r0
 80161c6:	2241      	movs	r2, #65	; 0x41
 80161c8:	2000      	movs	r0, #0
 80161ca:	f7f6 fc29 	bl	800ca20 <pbuf_alloced_custom>
 80161ce:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80161d0:	697b      	ldr	r3, [r7, #20]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d106      	bne.n	80161e4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80161d6:	69b8      	ldr	r0, [r7, #24]
 80161d8:	f7ff fef6 	bl	8015fc8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80161dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80161de:	f7f6 fdd9 	bl	800cd94 <pbuf_free>
        goto memerr;
 80161e2:	e074      	b.n	80162ce <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80161e4:	68f8      	ldr	r0, [r7, #12]
 80161e6:	f7f6 fe7b 	bl	800cee0 <pbuf_ref>
      pcr->original = p;
 80161ea:	69bb      	ldr	r3, [r7, #24]
 80161ec:	68fa      	ldr	r2, [r7, #12]
 80161ee:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80161f0:	69bb      	ldr	r3, [r7, #24]
 80161f2:	4a3f      	ldr	r2, [pc, #252]	; (80162f0 <ip4_frag+0x288>)
 80161f4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80161f6:	6979      	ldr	r1, [r7, #20]
 80161f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80161fa:	f7f6 fe99 	bl	800cf30 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80161fe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016202:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016206:	1ad3      	subs	r3, r2, r3
 8016208:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801620c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016210:	2b00      	cmp	r3, #0
 8016212:	d004      	beq.n	801621e <ip4_frag+0x1b6>
        poff = 0;
 8016214:	2300      	movs	r3, #0
 8016216:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801621e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016222:	2b00      	cmp	r3, #0
 8016224:	d196      	bne.n	8016154 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016226:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016228:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801622c:	4413      	add	r3, r2
 801622e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016230:	68bb      	ldr	r3, [r7, #8]
 8016232:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016234:	f1a3 0213 	sub.w	r2, r3, #19
 8016238:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801623c:	429a      	cmp	r2, r3
 801623e:	bfcc      	ite	gt
 8016240:	2301      	movgt	r3, #1
 8016242:	2300      	movle	r3, #0
 8016244:	b2db      	uxtb	r3, r3
 8016246:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016248:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801624c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016250:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016252:	6a3b      	ldr	r3, [r7, #32]
 8016254:	2b00      	cmp	r3, #0
 8016256:	d002      	beq.n	801625e <ip4_frag+0x1f6>
 8016258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801625a:	2b00      	cmp	r3, #0
 801625c:	d003      	beq.n	8016266 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801625e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016260:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016264:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016266:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016268:	4618      	mov	r0, r3
 801626a:	f7f5 fa4b 	bl	800b704 <lwip_htons>
 801626e:	4603      	mov	r3, r0
 8016270:	461a      	mov	r2, r3
 8016272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016274:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016276:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016278:	3314      	adds	r3, #20
 801627a:	b29b      	uxth	r3, r3
 801627c:	4618      	mov	r0, r3
 801627e:	f7f5 fa41 	bl	800b704 <lwip_htons>
 8016282:	4603      	mov	r3, r0
 8016284:	461a      	mov	r2, r3
 8016286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016288:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801628c:	2200      	movs	r2, #0
 801628e:	729a      	strb	r2, [r3, #10]
 8016290:	2200      	movs	r2, #0
 8016292:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016294:	68bb      	ldr	r3, [r7, #8]
 8016296:	695b      	ldr	r3, [r3, #20]
 8016298:	687a      	ldr	r2, [r7, #4]
 801629a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801629c:	68b8      	ldr	r0, [r7, #8]
 801629e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80162a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80162a2:	f7f6 fd77 	bl	800cd94 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80162a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80162aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80162ac:	1ad3      	subs	r3, r2, r3
 80162ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80162b2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80162b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80162b8:	4413      	add	r3, r2
 80162ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80162be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	f47f af19 	bne.w	80160fa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80162c8:	2300      	movs	r3, #0
 80162ca:	e002      	b.n	80162d2 <ip4_frag+0x26a>
      goto memerr;
 80162cc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80162ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80162d2:	4618      	mov	r0, r3
 80162d4:	3748      	adds	r7, #72	; 0x48
 80162d6:	46bd      	mov	sp, r7
 80162d8:	bd80      	pop	{r7, pc}
 80162da:	bf00      	nop
 80162dc:	0801acec 	.word	0x0801acec
 80162e0:	0801aec8 	.word	0x0801aec8
 80162e4:	0801ad34 	.word	0x0801ad34
 80162e8:	0801aee4 	.word	0x0801aee4
 80162ec:	0801af04 	.word	0x0801af04
 80162f0:	08016001 	.word	0x08016001

080162f4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80162f4:	b580      	push	{r7, lr}
 80162f6:	b086      	sub	sp, #24
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	6078      	str	r0, [r7, #4]
 80162fc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80162fe:	230e      	movs	r3, #14
 8016300:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	895b      	ldrh	r3, [r3, #10]
 8016306:	2b0e      	cmp	r3, #14
 8016308:	d96e      	bls.n	80163e8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	7bdb      	ldrb	r3, [r3, #15]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d106      	bne.n	8016320 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016312:	683b      	ldr	r3, [r7, #0]
 8016314:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016318:	3301      	adds	r3, #1
 801631a:	b2da      	uxtb	r2, r3
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	685b      	ldr	r3, [r3, #4]
 8016324:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016326:	693b      	ldr	r3, [r7, #16]
 8016328:	7b1a      	ldrb	r2, [r3, #12]
 801632a:	7b5b      	ldrb	r3, [r3, #13]
 801632c:	021b      	lsls	r3, r3, #8
 801632e:	4313      	orrs	r3, r2
 8016330:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016332:	693b      	ldr	r3, [r7, #16]
 8016334:	781b      	ldrb	r3, [r3, #0]
 8016336:	f003 0301 	and.w	r3, r3, #1
 801633a:	2b00      	cmp	r3, #0
 801633c:	d023      	beq.n	8016386 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801633e:	693b      	ldr	r3, [r7, #16]
 8016340:	781b      	ldrb	r3, [r3, #0]
 8016342:	2b01      	cmp	r3, #1
 8016344:	d10f      	bne.n	8016366 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016346:	693b      	ldr	r3, [r7, #16]
 8016348:	785b      	ldrb	r3, [r3, #1]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d11b      	bne.n	8016386 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801634e:	693b      	ldr	r3, [r7, #16]
 8016350:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016352:	2b5e      	cmp	r3, #94	; 0x5e
 8016354:	d117      	bne.n	8016386 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	7b5b      	ldrb	r3, [r3, #13]
 801635a:	f043 0310 	orr.w	r3, r3, #16
 801635e:	b2da      	uxtb	r2, r3
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	735a      	strb	r2, [r3, #13]
 8016364:	e00f      	b.n	8016386 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016366:	693b      	ldr	r3, [r7, #16]
 8016368:	2206      	movs	r2, #6
 801636a:	4928      	ldr	r1, [pc, #160]	; (801640c <ethernet_input+0x118>)
 801636c:	4618      	mov	r0, r3
 801636e:	f000 fb9b 	bl	8016aa8 <memcmp>
 8016372:	4603      	mov	r3, r0
 8016374:	2b00      	cmp	r3, #0
 8016376:	d106      	bne.n	8016386 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	7b5b      	ldrb	r3, [r3, #13]
 801637c:	f043 0308 	orr.w	r3, r3, #8
 8016380:	b2da      	uxtb	r2, r3
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016386:	89fb      	ldrh	r3, [r7, #14]
 8016388:	2b08      	cmp	r3, #8
 801638a:	d003      	beq.n	8016394 <ethernet_input+0xa0>
 801638c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016390:	d014      	beq.n	80163bc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016392:	e032      	b.n	80163fa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016394:	683b      	ldr	r3, [r7, #0]
 8016396:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801639a:	f003 0308 	and.w	r3, r3, #8
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d024      	beq.n	80163ec <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80163a2:	8afb      	ldrh	r3, [r7, #22]
 80163a4:	4619      	mov	r1, r3
 80163a6:	6878      	ldr	r0, [r7, #4]
 80163a8:	f7f6 fc6e 	bl	800cc88 <pbuf_remove_header>
 80163ac:	4603      	mov	r3, r0
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d11e      	bne.n	80163f0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80163b2:	6839      	ldr	r1, [r7, #0]
 80163b4:	6878      	ldr	r0, [r7, #4]
 80163b6:	f7fe ff27 	bl	8015208 <ip4_input>
      break;
 80163ba:	e013      	b.n	80163e4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80163bc:	683b      	ldr	r3, [r7, #0]
 80163be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80163c2:	f003 0308 	and.w	r3, r3, #8
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d014      	beq.n	80163f4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80163ca:	8afb      	ldrh	r3, [r7, #22]
 80163cc:	4619      	mov	r1, r3
 80163ce:	6878      	ldr	r0, [r7, #4]
 80163d0:	f7f6 fc5a 	bl	800cc88 <pbuf_remove_header>
 80163d4:	4603      	mov	r3, r0
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d10e      	bne.n	80163f8 <ethernet_input+0x104>
        etharp_input(p, netif);
 80163da:	6839      	ldr	r1, [r7, #0]
 80163dc:	6878      	ldr	r0, [r7, #4]
 80163de:	f7fe f8c7 	bl	8014570 <etharp_input>
      break;
 80163e2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80163e4:	2300      	movs	r3, #0
 80163e6:	e00c      	b.n	8016402 <ethernet_input+0x10e>
    goto free_and_return;
 80163e8:	bf00      	nop
 80163ea:	e006      	b.n	80163fa <ethernet_input+0x106>
        goto free_and_return;
 80163ec:	bf00      	nop
 80163ee:	e004      	b.n	80163fa <ethernet_input+0x106>
        goto free_and_return;
 80163f0:	bf00      	nop
 80163f2:	e002      	b.n	80163fa <ethernet_input+0x106>
        goto free_and_return;
 80163f4:	bf00      	nop
 80163f6:	e000      	b.n	80163fa <ethernet_input+0x106>
        goto free_and_return;
 80163f8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80163fa:	6878      	ldr	r0, [r7, #4]
 80163fc:	f7f6 fcca 	bl	800cd94 <pbuf_free>
  return ERR_OK;
 8016400:	2300      	movs	r3, #0
}
 8016402:	4618      	mov	r0, r3
 8016404:	3718      	adds	r7, #24
 8016406:	46bd      	mov	sp, r7
 8016408:	bd80      	pop	{r7, pc}
 801640a:	bf00      	nop
 801640c:	0801b0d8 	.word	0x0801b0d8

08016410 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016410:	b580      	push	{r7, lr}
 8016412:	b086      	sub	sp, #24
 8016414:	af00      	add	r7, sp, #0
 8016416:	60f8      	str	r0, [r7, #12]
 8016418:	60b9      	str	r1, [r7, #8]
 801641a:	607a      	str	r2, [r7, #4]
 801641c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801641e:	8c3b      	ldrh	r3, [r7, #32]
 8016420:	4618      	mov	r0, r3
 8016422:	f7f5 f96f 	bl	800b704 <lwip_htons>
 8016426:	4603      	mov	r3, r0
 8016428:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801642a:	210e      	movs	r1, #14
 801642c:	68b8      	ldr	r0, [r7, #8]
 801642e:	f7f6 fc1b 	bl	800cc68 <pbuf_add_header>
 8016432:	4603      	mov	r3, r0
 8016434:	2b00      	cmp	r3, #0
 8016436:	d125      	bne.n	8016484 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016438:	68bb      	ldr	r3, [r7, #8]
 801643a:	685b      	ldr	r3, [r3, #4]
 801643c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801643e:	693b      	ldr	r3, [r7, #16]
 8016440:	8afa      	ldrh	r2, [r7, #22]
 8016442:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016444:	693b      	ldr	r3, [r7, #16]
 8016446:	2206      	movs	r2, #6
 8016448:	6839      	ldr	r1, [r7, #0]
 801644a:	4618      	mov	r0, r3
 801644c:	f000 fb3a 	bl	8016ac4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016450:	693b      	ldr	r3, [r7, #16]
 8016452:	3306      	adds	r3, #6
 8016454:	2206      	movs	r2, #6
 8016456:	6879      	ldr	r1, [r7, #4]
 8016458:	4618      	mov	r0, r3
 801645a:	f000 fb33 	bl	8016ac4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016464:	2b06      	cmp	r3, #6
 8016466:	d006      	beq.n	8016476 <ethernet_output+0x66>
 8016468:	4b0a      	ldr	r3, [pc, #40]	; (8016494 <ethernet_output+0x84>)
 801646a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801646e:	490a      	ldr	r1, [pc, #40]	; (8016498 <ethernet_output+0x88>)
 8016470:	480a      	ldr	r0, [pc, #40]	; (801649c <ethernet_output+0x8c>)
 8016472:	f000 fbe7 	bl	8016c44 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	699b      	ldr	r3, [r3, #24]
 801647a:	68b9      	ldr	r1, [r7, #8]
 801647c:	68f8      	ldr	r0, [r7, #12]
 801647e:	4798      	blx	r3
 8016480:	4603      	mov	r3, r0
 8016482:	e002      	b.n	801648a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016484:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016486:	f06f 0301 	mvn.w	r3, #1
}
 801648a:	4618      	mov	r0, r3
 801648c:	3718      	adds	r7, #24
 801648e:	46bd      	mov	sp, r7
 8016490:	bd80      	pop	{r7, pc}
 8016492:	bf00      	nop
 8016494:	0801af14 	.word	0x0801af14
 8016498:	0801af4c 	.word	0x0801af4c
 801649c:	0801af80 	.word	0x0801af80

080164a0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b086      	sub	sp, #24
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
 80164a8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80164aa:	683b      	ldr	r3, [r7, #0]
 80164ac:	60bb      	str	r3, [r7, #8]
 80164ae:	2304      	movs	r3, #4
 80164b0:	60fb      	str	r3, [r7, #12]
 80164b2:	2300      	movs	r3, #0
 80164b4:	613b      	str	r3, [r7, #16]
 80164b6:	2300      	movs	r3, #0
 80164b8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80164ba:	f107 0308 	add.w	r3, r7, #8
 80164be:	2100      	movs	r1, #0
 80164c0:	4618      	mov	r0, r3
 80164c2:	f7f0 fac0 	bl	8006a46 <osMessageCreate>
 80164c6:	4602      	mov	r2, r0
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d102      	bne.n	80164da <sys_mbox_new+0x3a>
    return ERR_MEM;
 80164d4:	f04f 33ff 	mov.w	r3, #4294967295
 80164d8:	e000      	b.n	80164dc <sys_mbox_new+0x3c>

  return ERR_OK;
 80164da:	2300      	movs	r3, #0
}
 80164dc:	4618      	mov	r0, r3
 80164de:	3718      	adds	r7, #24
 80164e0:	46bd      	mov	sp, r7
 80164e2:	bd80      	pop	{r7, pc}

080164e4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80164e4:	b580      	push	{r7, lr}
 80164e6:	b082      	sub	sp, #8
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	4618      	mov	r0, r3
 80164f2:	f7f0 fb85 	bl	8006c00 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	4618      	mov	r0, r3
 80164fc:	f7f0 fb96 	bl	8006c2c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8016500:	bf00      	nop
 8016502:	3708      	adds	r7, #8
 8016504:	46bd      	mov	sp, r7
 8016506:	bd80      	pop	{r7, pc}

08016508 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b084      	sub	sp, #16
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
 8016510:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	6839      	ldr	r1, [r7, #0]
 8016518:	2200      	movs	r2, #0
 801651a:	4618      	mov	r0, r3
 801651c:	f7f0 fabc 	bl	8006a98 <osMessagePut>
 8016520:	4603      	mov	r3, r0
 8016522:	2b00      	cmp	r3, #0
 8016524:	d102      	bne.n	801652c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8016526:	2300      	movs	r3, #0
 8016528:	73fb      	strb	r3, [r7, #15]
 801652a:	e001      	b.n	8016530 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801652c:	23ff      	movs	r3, #255	; 0xff
 801652e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016530:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016534:	4618      	mov	r0, r3
 8016536:	3710      	adds	r7, #16
 8016538:	46bd      	mov	sp, r7
 801653a:	bd80      	pop	{r7, pc}

0801653c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801653c:	b580      	push	{r7, lr}
 801653e:	b08c      	sub	sp, #48	; 0x30
 8016540:	af00      	add	r7, sp, #0
 8016542:	61f8      	str	r0, [r7, #28]
 8016544:	61b9      	str	r1, [r7, #24]
 8016546:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8016548:	f7f0 f8a7 	bl	800669a <osKernelSysTick>
 801654c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801654e:	697b      	ldr	r3, [r7, #20]
 8016550:	2b00      	cmp	r3, #0
 8016552:	d017      	beq.n	8016584 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8016554:	69fb      	ldr	r3, [r7, #28]
 8016556:	6819      	ldr	r1, [r3, #0]
 8016558:	f107 0320 	add.w	r3, r7, #32
 801655c:	697a      	ldr	r2, [r7, #20]
 801655e:	4618      	mov	r0, r3
 8016560:	f7f0 fada 	bl	8006b18 <osMessageGet>

    if(event.status == osEventMessage)
 8016564:	6a3b      	ldr	r3, [r7, #32]
 8016566:	2b10      	cmp	r3, #16
 8016568:	d109      	bne.n	801657e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801656c:	461a      	mov	r2, r3
 801656e:	69bb      	ldr	r3, [r7, #24]
 8016570:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8016572:	f7f0 f892 	bl	800669a <osKernelSysTick>
 8016576:	4602      	mov	r2, r0
 8016578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801657a:	1ad3      	subs	r3, r2, r3
 801657c:	e019      	b.n	80165b2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801657e:	f04f 33ff 	mov.w	r3, #4294967295
 8016582:	e016      	b.n	80165b2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016584:	69fb      	ldr	r3, [r7, #28]
 8016586:	6819      	ldr	r1, [r3, #0]
 8016588:	463b      	mov	r3, r7
 801658a:	f04f 32ff 	mov.w	r2, #4294967295
 801658e:	4618      	mov	r0, r3
 8016590:	f7f0 fac2 	bl	8006b18 <osMessageGet>
 8016594:	f107 0320 	add.w	r3, r7, #32
 8016598:	463a      	mov	r2, r7
 801659a:	ca07      	ldmia	r2, {r0, r1, r2}
 801659c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80165a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165a2:	461a      	mov	r2, r3
 80165a4:	69bb      	ldr	r3, [r7, #24]
 80165a6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80165a8:	f7f0 f877 	bl	800669a <osKernelSysTick>
 80165ac:	4602      	mov	r2, r0
 80165ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165b0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80165b2:	4618      	mov	r0, r3
 80165b4:	3730      	adds	r7, #48	; 0x30
 80165b6:	46bd      	mov	sp, r7
 80165b8:	bd80      	pop	{r7, pc}

080165ba <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80165ba:	b580      	push	{r7, lr}
 80165bc:	b086      	sub	sp, #24
 80165be:	af00      	add	r7, sp, #0
 80165c0:	6078      	str	r0, [r7, #4]
 80165c2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	6819      	ldr	r1, [r3, #0]
 80165c8:	f107 030c 	add.w	r3, r7, #12
 80165cc:	2200      	movs	r2, #0
 80165ce:	4618      	mov	r0, r3
 80165d0:	f7f0 faa2 	bl	8006b18 <osMessageGet>

  if(event.status == osEventMessage)
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	2b10      	cmp	r3, #16
 80165d8:	d105      	bne.n	80165e6 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80165da:	693b      	ldr	r3, [r7, #16]
 80165dc:	461a      	mov	r2, r3
 80165de:	683b      	ldr	r3, [r7, #0]
 80165e0:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80165e2:	2300      	movs	r3, #0
 80165e4:	e001      	b.n	80165ea <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80165e6:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80165ea:	4618      	mov	r0, r3
 80165ec:	3718      	adds	r7, #24
 80165ee:	46bd      	mov	sp, r7
 80165f0:	bd80      	pop	{r7, pc}

080165f2 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80165f2:	b480      	push	{r7}
 80165f4:	b083      	sub	sp, #12
 80165f6:	af00      	add	r7, sp, #0
 80165f8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d101      	bne.n	8016606 <sys_mbox_valid+0x14>
    return 0;
 8016602:	2300      	movs	r3, #0
 8016604:	e000      	b.n	8016608 <sys_mbox_valid+0x16>
  else
    return 1;
 8016606:	2301      	movs	r3, #1
}
 8016608:	4618      	mov	r0, r3
 801660a:	370c      	adds	r7, #12
 801660c:	46bd      	mov	sp, r7
 801660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016612:	4770      	bx	lr

08016614 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8016614:	b480      	push	{r7}
 8016616:	b083      	sub	sp, #12
 8016618:	af00      	add	r7, sp, #0
 801661a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	2200      	movs	r2, #0
 8016620:	601a      	str	r2, [r3, #0]
}
 8016622:	bf00      	nop
 8016624:	370c      	adds	r7, #12
 8016626:	46bd      	mov	sp, r7
 8016628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801662c:	4770      	bx	lr

0801662e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801662e:	b580      	push	{r7, lr}
 8016630:	b084      	sub	sp, #16
 8016632:	af00      	add	r7, sp, #0
 8016634:	6078      	str	r0, [r7, #4]
 8016636:	460b      	mov	r3, r1
 8016638:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801663a:	2300      	movs	r3, #0
 801663c:	60bb      	str	r3, [r7, #8]
 801663e:	2300      	movs	r3, #0
 8016640:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8016642:	f107 0308 	add.w	r3, r7, #8
 8016646:	2101      	movs	r1, #1
 8016648:	4618      	mov	r0, r3
 801664a:	f7f0 f933 	bl	80068b4 <osSemaphoreCreate>
 801664e:	4602      	mov	r2, r0
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d102      	bne.n	8016662 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801665c:	f04f 33ff 	mov.w	r3, #4294967295
 8016660:	e009      	b.n	8016676 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8016662:	78fb      	ldrb	r3, [r7, #3]
 8016664:	2b00      	cmp	r3, #0
 8016666:	d105      	bne.n	8016674 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	2100      	movs	r1, #0
 801666e:	4618      	mov	r0, r3
 8016670:	f7f0 f952 	bl	8006918 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8016674:	2300      	movs	r3, #0
}
 8016676:	4618      	mov	r0, r3
 8016678:	3710      	adds	r7, #16
 801667a:	46bd      	mov	sp, r7
 801667c:	bd80      	pop	{r7, pc}

0801667e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801667e:	b580      	push	{r7, lr}
 8016680:	b084      	sub	sp, #16
 8016682:	af00      	add	r7, sp, #0
 8016684:	6078      	str	r0, [r7, #4]
 8016686:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8016688:	f7f0 f807 	bl	800669a <osKernelSysTick>
 801668c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801668e:	683b      	ldr	r3, [r7, #0]
 8016690:	2b00      	cmp	r3, #0
 8016692:	d011      	beq.n	80166b8 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	6839      	ldr	r1, [r7, #0]
 801669a:	4618      	mov	r0, r3
 801669c:	f7f0 f93c 	bl	8006918 <osSemaphoreWait>
 80166a0:	4603      	mov	r3, r0
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d105      	bne.n	80166b2 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80166a6:	f7ef fff8 	bl	800669a <osKernelSysTick>
 80166aa:	4602      	mov	r2, r0
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	1ad3      	subs	r3, r2, r3
 80166b0:	e012      	b.n	80166d8 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80166b2:	f04f 33ff 	mov.w	r3, #4294967295
 80166b6:	e00f      	b.n	80166d8 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80166b8:	bf00      	nop
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	f04f 31ff 	mov.w	r1, #4294967295
 80166c2:	4618      	mov	r0, r3
 80166c4:	f7f0 f928 	bl	8006918 <osSemaphoreWait>
 80166c8:	4603      	mov	r3, r0
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d1f5      	bne.n	80166ba <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80166ce:	f7ef ffe4 	bl	800669a <osKernelSysTick>
 80166d2:	4602      	mov	r2, r0
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80166d8:	4618      	mov	r0, r3
 80166da:	3710      	adds	r7, #16
 80166dc:	46bd      	mov	sp, r7
 80166de:	bd80      	pop	{r7, pc}

080166e0 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b082      	sub	sp, #8
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	4618      	mov	r0, r3
 80166ee:	f7f0 f961 	bl	80069b4 <osSemaphoreRelease>
}
 80166f2:	bf00      	nop
 80166f4:	3708      	adds	r7, #8
 80166f6:	46bd      	mov	sp, r7
 80166f8:	bd80      	pop	{r7, pc}

080166fa <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80166fa:	b580      	push	{r7, lr}
 80166fc:	b082      	sub	sp, #8
 80166fe:	af00      	add	r7, sp, #0
 8016700:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	4618      	mov	r0, r3
 8016708:	f7f0 f98a 	bl	8006a20 <osSemaphoreDelete>
}
 801670c:	bf00      	nop
 801670e:	3708      	adds	r7, #8
 8016710:	46bd      	mov	sp, r7
 8016712:	bd80      	pop	{r7, pc}

08016714 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8016714:	b480      	push	{r7}
 8016716:	b083      	sub	sp, #12
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	2b00      	cmp	r3, #0
 8016722:	d101      	bne.n	8016728 <sys_sem_valid+0x14>
    return 0;
 8016724:	2300      	movs	r3, #0
 8016726:	e000      	b.n	801672a <sys_sem_valid+0x16>
  else
    return 1;
 8016728:	2301      	movs	r3, #1
}
 801672a:	4618      	mov	r0, r3
 801672c:	370c      	adds	r7, #12
 801672e:	46bd      	mov	sp, r7
 8016730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016734:	4770      	bx	lr

08016736 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8016736:	b480      	push	{r7}
 8016738:	b083      	sub	sp, #12
 801673a:	af00      	add	r7, sp, #0
 801673c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	2200      	movs	r2, #0
 8016742:	601a      	str	r2, [r3, #0]
}
 8016744:	bf00      	nop
 8016746:	370c      	adds	r7, #12
 8016748:	46bd      	mov	sp, r7
 801674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801674e:	4770      	bx	lr

08016750 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016750:	b580      	push	{r7, lr}
 8016752:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016754:	4803      	ldr	r0, [pc, #12]	; (8016764 <sys_init+0x14>)
 8016756:	f7f0 f810 	bl	800677a <osMutexCreate>
 801675a:	4603      	mov	r3, r0
 801675c:	4a02      	ldr	r2, [pc, #8]	; (8016768 <sys_init+0x18>)
 801675e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8016760:	bf00      	nop
 8016762:	bd80      	pop	{r7, pc}
 8016764:	0801b0e8 	.word	0x0801b0e8
 8016768:	2000d3d4 	.word	0x2000d3d4

0801676c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801676c:	b580      	push	{r7, lr}
 801676e:	b084      	sub	sp, #16
 8016770:	af00      	add	r7, sp, #0
 8016772:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016774:	2300      	movs	r3, #0
 8016776:	60bb      	str	r3, [r7, #8]
 8016778:	2300      	movs	r3, #0
 801677a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801677c:	f107 0308 	add.w	r3, r7, #8
 8016780:	4618      	mov	r0, r3
 8016782:	f7ef fffa 	bl	800677a <osMutexCreate>
 8016786:	4602      	mov	r2, r0
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d102      	bne.n	801679a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016794:	f04f 33ff 	mov.w	r3, #4294967295
 8016798:	e000      	b.n	801679c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801679a:	2300      	movs	r3, #0
}
 801679c:	4618      	mov	r0, r3
 801679e:	3710      	adds	r7, #16
 80167a0:	46bd      	mov	sp, r7
 80167a2:	bd80      	pop	{r7, pc}

080167a4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80167a4:	b580      	push	{r7, lr}
 80167a6:	b082      	sub	sp, #8
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	f04f 31ff 	mov.w	r1, #4294967295
 80167b4:	4618      	mov	r0, r3
 80167b6:	f7ef fff9 	bl	80067ac <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80167ba:	bf00      	nop
 80167bc:	3708      	adds	r7, #8
 80167be:	46bd      	mov	sp, r7
 80167c0:	bd80      	pop	{r7, pc}

080167c2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80167c2:	b580      	push	{r7, lr}
 80167c4:	b082      	sub	sp, #8
 80167c6:	af00      	add	r7, sp, #0
 80167c8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	4618      	mov	r0, r3
 80167d0:	f7f0 f83a 	bl	8006848 <osMutexRelease>
}
 80167d4:	bf00      	nop
 80167d6:	3708      	adds	r7, #8
 80167d8:	46bd      	mov	sp, r7
 80167da:	bd80      	pop	{r7, pc}

080167dc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	b08c      	sub	sp, #48	; 0x30
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	60f8      	str	r0, [r7, #12]
 80167e4:	60b9      	str	r1, [r7, #8]
 80167e6:	607a      	str	r2, [r7, #4]
 80167e8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80167ea:	f107 0314 	add.w	r3, r7, #20
 80167ee:	2200      	movs	r2, #0
 80167f0:	601a      	str	r2, [r3, #0]
 80167f2:	605a      	str	r2, [r3, #4]
 80167f4:	609a      	str	r2, [r3, #8]
 80167f6:	60da      	str	r2, [r3, #12]
 80167f8:	611a      	str	r2, [r3, #16]
 80167fa:	615a      	str	r2, [r3, #20]
 80167fc:	619a      	str	r2, [r3, #24]
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	617b      	str	r3, [r7, #20]
 8016802:	68bb      	ldr	r3, [r7, #8]
 8016804:	61bb      	str	r3, [r7, #24]
 8016806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016808:	b21b      	sxth	r3, r3
 801680a:	83bb      	strh	r3, [r7, #28]
 801680c:	683b      	ldr	r3, [r7, #0]
 801680e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8016810:	f107 0314 	add.w	r3, r7, #20
 8016814:	6879      	ldr	r1, [r7, #4]
 8016816:	4618      	mov	r0, r3
 8016818:	f7ef ff4f 	bl	80066ba <osThreadCreate>
 801681c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801681e:	4618      	mov	r0, r3
 8016820:	3730      	adds	r7, #48	; 0x30
 8016822:	46bd      	mov	sp, r7
 8016824:	bd80      	pop	{r7, pc}
	...

08016828 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016828:	b580      	push	{r7, lr}
 801682a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801682c:	4b04      	ldr	r3, [pc, #16]	; (8016840 <sys_arch_protect+0x18>)
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	f04f 31ff 	mov.w	r1, #4294967295
 8016834:	4618      	mov	r0, r3
 8016836:	f7ef ffb9 	bl	80067ac <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801683a:	2301      	movs	r3, #1
}
 801683c:	4618      	mov	r0, r3
 801683e:	bd80      	pop	{r7, pc}
 8016840:	2000d3d4 	.word	0x2000d3d4

08016844 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016844:	b580      	push	{r7, lr}
 8016846:	b082      	sub	sp, #8
 8016848:	af00      	add	r7, sp, #0
 801684a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801684c:	4b04      	ldr	r3, [pc, #16]	; (8016860 <sys_arch_unprotect+0x1c>)
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	4618      	mov	r0, r3
 8016852:	f7ef fff9 	bl	8006848 <osMutexRelease>
}
 8016856:	bf00      	nop
 8016858:	3708      	adds	r7, #8
 801685a:	46bd      	mov	sp, r7
 801685c:	bd80      	pop	{r7, pc}
 801685e:	bf00      	nop
 8016860:	2000d3d4 	.word	0x2000d3d4

08016864 <std>:
 8016864:	2300      	movs	r3, #0
 8016866:	b510      	push	{r4, lr}
 8016868:	4604      	mov	r4, r0
 801686a:	e9c0 3300 	strd	r3, r3, [r0]
 801686e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016872:	6083      	str	r3, [r0, #8]
 8016874:	8181      	strh	r1, [r0, #12]
 8016876:	6643      	str	r3, [r0, #100]	; 0x64
 8016878:	81c2      	strh	r2, [r0, #14]
 801687a:	6183      	str	r3, [r0, #24]
 801687c:	4619      	mov	r1, r3
 801687e:	2208      	movs	r2, #8
 8016880:	305c      	adds	r0, #92	; 0x5c
 8016882:	f000 f92d 	bl	8016ae0 <memset>
 8016886:	4b05      	ldr	r3, [pc, #20]	; (801689c <std+0x38>)
 8016888:	6263      	str	r3, [r4, #36]	; 0x24
 801688a:	4b05      	ldr	r3, [pc, #20]	; (80168a0 <std+0x3c>)
 801688c:	62a3      	str	r3, [r4, #40]	; 0x28
 801688e:	4b05      	ldr	r3, [pc, #20]	; (80168a4 <std+0x40>)
 8016890:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016892:	4b05      	ldr	r3, [pc, #20]	; (80168a8 <std+0x44>)
 8016894:	6224      	str	r4, [r4, #32]
 8016896:	6323      	str	r3, [r4, #48]	; 0x30
 8016898:	bd10      	pop	{r4, pc}
 801689a:	bf00      	nop
 801689c:	08016de9 	.word	0x08016de9
 80168a0:	08016e0b 	.word	0x08016e0b
 80168a4:	08016e43 	.word	0x08016e43
 80168a8:	08016e67 	.word	0x08016e67

080168ac <_cleanup_r>:
 80168ac:	4901      	ldr	r1, [pc, #4]	; (80168b4 <_cleanup_r+0x8>)
 80168ae:	f000 b8af 	b.w	8016a10 <_fwalk_reent>
 80168b2:	bf00      	nop
 80168b4:	08016ffd 	.word	0x08016ffd

080168b8 <__sfmoreglue>:
 80168b8:	b570      	push	{r4, r5, r6, lr}
 80168ba:	1e4a      	subs	r2, r1, #1
 80168bc:	2568      	movs	r5, #104	; 0x68
 80168be:	4355      	muls	r5, r2
 80168c0:	460e      	mov	r6, r1
 80168c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80168c6:	f000 f963 	bl	8016b90 <_malloc_r>
 80168ca:	4604      	mov	r4, r0
 80168cc:	b140      	cbz	r0, 80168e0 <__sfmoreglue+0x28>
 80168ce:	2100      	movs	r1, #0
 80168d0:	e9c0 1600 	strd	r1, r6, [r0]
 80168d4:	300c      	adds	r0, #12
 80168d6:	60a0      	str	r0, [r4, #8]
 80168d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80168dc:	f000 f900 	bl	8016ae0 <memset>
 80168e0:	4620      	mov	r0, r4
 80168e2:	bd70      	pop	{r4, r5, r6, pc}

080168e4 <__sfp_lock_acquire>:
 80168e4:	4801      	ldr	r0, [pc, #4]	; (80168ec <__sfp_lock_acquire+0x8>)
 80168e6:	f7ea bfcb 	b.w	8001880 <__retarget_lock_acquire_recursive>
 80168ea:	bf00      	nop
 80168ec:	20000370 	.word	0x20000370

080168f0 <__sfp_lock_release>:
 80168f0:	4801      	ldr	r0, [pc, #4]	; (80168f8 <__sfp_lock_release+0x8>)
 80168f2:	f7ea bfd9 	b.w	80018a8 <__retarget_lock_release_recursive>
 80168f6:	bf00      	nop
 80168f8:	20000370 	.word	0x20000370

080168fc <__sinit_lock_acquire>:
 80168fc:	4801      	ldr	r0, [pc, #4]	; (8016904 <__sinit_lock_acquire+0x8>)
 80168fe:	f7ea bfbf 	b.w	8001880 <__retarget_lock_acquire_recursive>
 8016902:	bf00      	nop
 8016904:	20000364 	.word	0x20000364

08016908 <__sinit_lock_release>:
 8016908:	4801      	ldr	r0, [pc, #4]	; (8016910 <__sinit_lock_release+0x8>)
 801690a:	f7ea bfcd 	b.w	80018a8 <__retarget_lock_release_recursive>
 801690e:	bf00      	nop
 8016910:	20000364 	.word	0x20000364

08016914 <__sinit>:
 8016914:	b510      	push	{r4, lr}
 8016916:	4604      	mov	r4, r0
 8016918:	f7ff fff0 	bl	80168fc <__sinit_lock_acquire>
 801691c:	69a3      	ldr	r3, [r4, #24]
 801691e:	b11b      	cbz	r3, 8016928 <__sinit+0x14>
 8016920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016924:	f7ff bff0 	b.w	8016908 <__sinit_lock_release>
 8016928:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801692c:	6523      	str	r3, [r4, #80]	; 0x50
 801692e:	4b13      	ldr	r3, [pc, #76]	; (801697c <__sinit+0x68>)
 8016930:	4a13      	ldr	r2, [pc, #76]	; (8016980 <__sinit+0x6c>)
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	62a2      	str	r2, [r4, #40]	; 0x28
 8016936:	42a3      	cmp	r3, r4
 8016938:	bf04      	itt	eq
 801693a:	2301      	moveq	r3, #1
 801693c:	61a3      	streq	r3, [r4, #24]
 801693e:	4620      	mov	r0, r4
 8016940:	f000 f820 	bl	8016984 <__sfp>
 8016944:	6060      	str	r0, [r4, #4]
 8016946:	4620      	mov	r0, r4
 8016948:	f000 f81c 	bl	8016984 <__sfp>
 801694c:	60a0      	str	r0, [r4, #8]
 801694e:	4620      	mov	r0, r4
 8016950:	f000 f818 	bl	8016984 <__sfp>
 8016954:	2200      	movs	r2, #0
 8016956:	60e0      	str	r0, [r4, #12]
 8016958:	2104      	movs	r1, #4
 801695a:	6860      	ldr	r0, [r4, #4]
 801695c:	f7ff ff82 	bl	8016864 <std>
 8016960:	68a0      	ldr	r0, [r4, #8]
 8016962:	2201      	movs	r2, #1
 8016964:	2109      	movs	r1, #9
 8016966:	f7ff ff7d 	bl	8016864 <std>
 801696a:	68e0      	ldr	r0, [r4, #12]
 801696c:	2202      	movs	r2, #2
 801696e:	2112      	movs	r1, #18
 8016970:	f7ff ff78 	bl	8016864 <std>
 8016974:	2301      	movs	r3, #1
 8016976:	61a3      	str	r3, [r4, #24]
 8016978:	e7d2      	b.n	8016920 <__sinit+0xc>
 801697a:	bf00      	nop
 801697c:	0801b150 	.word	0x0801b150
 8016980:	080168ad 	.word	0x080168ad

08016984 <__sfp>:
 8016984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016986:	4607      	mov	r7, r0
 8016988:	f7ff ffac 	bl	80168e4 <__sfp_lock_acquire>
 801698c:	4b1e      	ldr	r3, [pc, #120]	; (8016a08 <__sfp+0x84>)
 801698e:	681e      	ldr	r6, [r3, #0]
 8016990:	69b3      	ldr	r3, [r6, #24]
 8016992:	b913      	cbnz	r3, 801699a <__sfp+0x16>
 8016994:	4630      	mov	r0, r6
 8016996:	f7ff ffbd 	bl	8016914 <__sinit>
 801699a:	3648      	adds	r6, #72	; 0x48
 801699c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80169a0:	3b01      	subs	r3, #1
 80169a2:	d503      	bpl.n	80169ac <__sfp+0x28>
 80169a4:	6833      	ldr	r3, [r6, #0]
 80169a6:	b30b      	cbz	r3, 80169ec <__sfp+0x68>
 80169a8:	6836      	ldr	r6, [r6, #0]
 80169aa:	e7f7      	b.n	801699c <__sfp+0x18>
 80169ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80169b0:	b9d5      	cbnz	r5, 80169e8 <__sfp+0x64>
 80169b2:	4b16      	ldr	r3, [pc, #88]	; (8016a0c <__sfp+0x88>)
 80169b4:	60e3      	str	r3, [r4, #12]
 80169b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80169ba:	6665      	str	r5, [r4, #100]	; 0x64
 80169bc:	f7ea ff3a 	bl	8001834 <__retarget_lock_init_recursive>
 80169c0:	f7ff ff96 	bl	80168f0 <__sfp_lock_release>
 80169c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80169c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80169cc:	6025      	str	r5, [r4, #0]
 80169ce:	61a5      	str	r5, [r4, #24]
 80169d0:	2208      	movs	r2, #8
 80169d2:	4629      	mov	r1, r5
 80169d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80169d8:	f000 f882 	bl	8016ae0 <memset>
 80169dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80169e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80169e4:	4620      	mov	r0, r4
 80169e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169e8:	3468      	adds	r4, #104	; 0x68
 80169ea:	e7d9      	b.n	80169a0 <__sfp+0x1c>
 80169ec:	2104      	movs	r1, #4
 80169ee:	4638      	mov	r0, r7
 80169f0:	f7ff ff62 	bl	80168b8 <__sfmoreglue>
 80169f4:	4604      	mov	r4, r0
 80169f6:	6030      	str	r0, [r6, #0]
 80169f8:	2800      	cmp	r0, #0
 80169fa:	d1d5      	bne.n	80169a8 <__sfp+0x24>
 80169fc:	f7ff ff78 	bl	80168f0 <__sfp_lock_release>
 8016a00:	230c      	movs	r3, #12
 8016a02:	603b      	str	r3, [r7, #0]
 8016a04:	e7ee      	b.n	80169e4 <__sfp+0x60>
 8016a06:	bf00      	nop
 8016a08:	0801b150 	.word	0x0801b150
 8016a0c:	ffff0001 	.word	0xffff0001

08016a10 <_fwalk_reent>:
 8016a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a14:	4606      	mov	r6, r0
 8016a16:	4688      	mov	r8, r1
 8016a18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016a1c:	2700      	movs	r7, #0
 8016a1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016a22:	f1b9 0901 	subs.w	r9, r9, #1
 8016a26:	d505      	bpl.n	8016a34 <_fwalk_reent+0x24>
 8016a28:	6824      	ldr	r4, [r4, #0]
 8016a2a:	2c00      	cmp	r4, #0
 8016a2c:	d1f7      	bne.n	8016a1e <_fwalk_reent+0xe>
 8016a2e:	4638      	mov	r0, r7
 8016a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a34:	89ab      	ldrh	r3, [r5, #12]
 8016a36:	2b01      	cmp	r3, #1
 8016a38:	d907      	bls.n	8016a4a <_fwalk_reent+0x3a>
 8016a3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016a3e:	3301      	adds	r3, #1
 8016a40:	d003      	beq.n	8016a4a <_fwalk_reent+0x3a>
 8016a42:	4629      	mov	r1, r5
 8016a44:	4630      	mov	r0, r6
 8016a46:	47c0      	blx	r8
 8016a48:	4307      	orrs	r7, r0
 8016a4a:	3568      	adds	r5, #104	; 0x68
 8016a4c:	e7e9      	b.n	8016a22 <_fwalk_reent+0x12>
	...

08016a50 <__libc_init_array>:
 8016a50:	b570      	push	{r4, r5, r6, lr}
 8016a52:	4d0d      	ldr	r5, [pc, #52]	; (8016a88 <__libc_init_array+0x38>)
 8016a54:	4c0d      	ldr	r4, [pc, #52]	; (8016a8c <__libc_init_array+0x3c>)
 8016a56:	1b64      	subs	r4, r4, r5
 8016a58:	10a4      	asrs	r4, r4, #2
 8016a5a:	2600      	movs	r6, #0
 8016a5c:	42a6      	cmp	r6, r4
 8016a5e:	d109      	bne.n	8016a74 <__libc_init_array+0x24>
 8016a60:	4d0b      	ldr	r5, [pc, #44]	; (8016a90 <__libc_init_array+0x40>)
 8016a62:	4c0c      	ldr	r4, [pc, #48]	; (8016a94 <__libc_init_array+0x44>)
 8016a64:	f000 ffc8 	bl	80179f8 <_init>
 8016a68:	1b64      	subs	r4, r4, r5
 8016a6a:	10a4      	asrs	r4, r4, #2
 8016a6c:	2600      	movs	r6, #0
 8016a6e:	42a6      	cmp	r6, r4
 8016a70:	d105      	bne.n	8016a7e <__libc_init_array+0x2e>
 8016a72:	bd70      	pop	{r4, r5, r6, pc}
 8016a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a78:	4798      	blx	r3
 8016a7a:	3601      	adds	r6, #1
 8016a7c:	e7ee      	b.n	8016a5c <__libc_init_array+0xc>
 8016a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a82:	4798      	blx	r3
 8016a84:	3601      	adds	r6, #1
 8016a86:	e7f2      	b.n	8016a6e <__libc_init_array+0x1e>
 8016a88:	0801b244 	.word	0x0801b244
 8016a8c:	0801b244 	.word	0x0801b244
 8016a90:	0801b244 	.word	0x0801b244
 8016a94:	0801b248 	.word	0x0801b248

08016a98 <malloc>:
 8016a98:	4b02      	ldr	r3, [pc, #8]	; (8016aa4 <malloc+0xc>)
 8016a9a:	4601      	mov	r1, r0
 8016a9c:	6818      	ldr	r0, [r3, #0]
 8016a9e:	f000 b877 	b.w	8016b90 <_malloc_r>
 8016aa2:	bf00      	nop
 8016aa4:	20000020 	.word	0x20000020

08016aa8 <memcmp>:
 8016aa8:	b530      	push	{r4, r5, lr}
 8016aaa:	3901      	subs	r1, #1
 8016aac:	2400      	movs	r4, #0
 8016aae:	42a2      	cmp	r2, r4
 8016ab0:	d101      	bne.n	8016ab6 <memcmp+0xe>
 8016ab2:	2000      	movs	r0, #0
 8016ab4:	e005      	b.n	8016ac2 <memcmp+0x1a>
 8016ab6:	5d03      	ldrb	r3, [r0, r4]
 8016ab8:	3401      	adds	r4, #1
 8016aba:	5d0d      	ldrb	r5, [r1, r4]
 8016abc:	42ab      	cmp	r3, r5
 8016abe:	d0f6      	beq.n	8016aae <memcmp+0x6>
 8016ac0:	1b58      	subs	r0, r3, r5
 8016ac2:	bd30      	pop	{r4, r5, pc}

08016ac4 <memcpy>:
 8016ac4:	440a      	add	r2, r1
 8016ac6:	4291      	cmp	r1, r2
 8016ac8:	f100 33ff 	add.w	r3, r0, #4294967295
 8016acc:	d100      	bne.n	8016ad0 <memcpy+0xc>
 8016ace:	4770      	bx	lr
 8016ad0:	b510      	push	{r4, lr}
 8016ad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016ada:	4291      	cmp	r1, r2
 8016adc:	d1f9      	bne.n	8016ad2 <memcpy+0xe>
 8016ade:	bd10      	pop	{r4, pc}

08016ae0 <memset>:
 8016ae0:	4402      	add	r2, r0
 8016ae2:	4603      	mov	r3, r0
 8016ae4:	4293      	cmp	r3, r2
 8016ae6:	d100      	bne.n	8016aea <memset+0xa>
 8016ae8:	4770      	bx	lr
 8016aea:	f803 1b01 	strb.w	r1, [r3], #1
 8016aee:	e7f9      	b.n	8016ae4 <memset+0x4>

08016af0 <_free_r>:
 8016af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016af2:	2900      	cmp	r1, #0
 8016af4:	d048      	beq.n	8016b88 <_free_r+0x98>
 8016af6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016afa:	9001      	str	r0, [sp, #4]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	f1a1 0404 	sub.w	r4, r1, #4
 8016b02:	bfb8      	it	lt
 8016b04:	18e4      	addlt	r4, r4, r3
 8016b06:	f000 fad9 	bl	80170bc <__malloc_lock>
 8016b0a:	4a20      	ldr	r2, [pc, #128]	; (8016b8c <_free_r+0x9c>)
 8016b0c:	9801      	ldr	r0, [sp, #4]
 8016b0e:	6813      	ldr	r3, [r2, #0]
 8016b10:	4615      	mov	r5, r2
 8016b12:	b933      	cbnz	r3, 8016b22 <_free_r+0x32>
 8016b14:	6063      	str	r3, [r4, #4]
 8016b16:	6014      	str	r4, [r2, #0]
 8016b18:	b003      	add	sp, #12
 8016b1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016b1e:	f000 bad3 	b.w	80170c8 <__malloc_unlock>
 8016b22:	42a3      	cmp	r3, r4
 8016b24:	d90b      	bls.n	8016b3e <_free_r+0x4e>
 8016b26:	6821      	ldr	r1, [r4, #0]
 8016b28:	1862      	adds	r2, r4, r1
 8016b2a:	4293      	cmp	r3, r2
 8016b2c:	bf04      	itt	eq
 8016b2e:	681a      	ldreq	r2, [r3, #0]
 8016b30:	685b      	ldreq	r3, [r3, #4]
 8016b32:	6063      	str	r3, [r4, #4]
 8016b34:	bf04      	itt	eq
 8016b36:	1852      	addeq	r2, r2, r1
 8016b38:	6022      	streq	r2, [r4, #0]
 8016b3a:	602c      	str	r4, [r5, #0]
 8016b3c:	e7ec      	b.n	8016b18 <_free_r+0x28>
 8016b3e:	461a      	mov	r2, r3
 8016b40:	685b      	ldr	r3, [r3, #4]
 8016b42:	b10b      	cbz	r3, 8016b48 <_free_r+0x58>
 8016b44:	42a3      	cmp	r3, r4
 8016b46:	d9fa      	bls.n	8016b3e <_free_r+0x4e>
 8016b48:	6811      	ldr	r1, [r2, #0]
 8016b4a:	1855      	adds	r5, r2, r1
 8016b4c:	42a5      	cmp	r5, r4
 8016b4e:	d10b      	bne.n	8016b68 <_free_r+0x78>
 8016b50:	6824      	ldr	r4, [r4, #0]
 8016b52:	4421      	add	r1, r4
 8016b54:	1854      	adds	r4, r2, r1
 8016b56:	42a3      	cmp	r3, r4
 8016b58:	6011      	str	r1, [r2, #0]
 8016b5a:	d1dd      	bne.n	8016b18 <_free_r+0x28>
 8016b5c:	681c      	ldr	r4, [r3, #0]
 8016b5e:	685b      	ldr	r3, [r3, #4]
 8016b60:	6053      	str	r3, [r2, #4]
 8016b62:	4421      	add	r1, r4
 8016b64:	6011      	str	r1, [r2, #0]
 8016b66:	e7d7      	b.n	8016b18 <_free_r+0x28>
 8016b68:	d902      	bls.n	8016b70 <_free_r+0x80>
 8016b6a:	230c      	movs	r3, #12
 8016b6c:	6003      	str	r3, [r0, #0]
 8016b6e:	e7d3      	b.n	8016b18 <_free_r+0x28>
 8016b70:	6825      	ldr	r5, [r4, #0]
 8016b72:	1961      	adds	r1, r4, r5
 8016b74:	428b      	cmp	r3, r1
 8016b76:	bf04      	itt	eq
 8016b78:	6819      	ldreq	r1, [r3, #0]
 8016b7a:	685b      	ldreq	r3, [r3, #4]
 8016b7c:	6063      	str	r3, [r4, #4]
 8016b7e:	bf04      	itt	eq
 8016b80:	1949      	addeq	r1, r1, r5
 8016b82:	6021      	streq	r1, [r4, #0]
 8016b84:	6054      	str	r4, [r2, #4]
 8016b86:	e7c7      	b.n	8016b18 <_free_r+0x28>
 8016b88:	b003      	add	sp, #12
 8016b8a:	bd30      	pop	{r4, r5, pc}
 8016b8c:	20006984 	.word	0x20006984

08016b90 <_malloc_r>:
 8016b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b92:	1ccd      	adds	r5, r1, #3
 8016b94:	f025 0503 	bic.w	r5, r5, #3
 8016b98:	3508      	adds	r5, #8
 8016b9a:	2d0c      	cmp	r5, #12
 8016b9c:	bf38      	it	cc
 8016b9e:	250c      	movcc	r5, #12
 8016ba0:	2d00      	cmp	r5, #0
 8016ba2:	4606      	mov	r6, r0
 8016ba4:	db01      	blt.n	8016baa <_malloc_r+0x1a>
 8016ba6:	42a9      	cmp	r1, r5
 8016ba8:	d903      	bls.n	8016bb2 <_malloc_r+0x22>
 8016baa:	230c      	movs	r3, #12
 8016bac:	6033      	str	r3, [r6, #0]
 8016bae:	2000      	movs	r0, #0
 8016bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bb2:	f000 fa83 	bl	80170bc <__malloc_lock>
 8016bb6:	4921      	ldr	r1, [pc, #132]	; (8016c3c <_malloc_r+0xac>)
 8016bb8:	680a      	ldr	r2, [r1, #0]
 8016bba:	4614      	mov	r4, r2
 8016bbc:	b99c      	cbnz	r4, 8016be6 <_malloc_r+0x56>
 8016bbe:	4f20      	ldr	r7, [pc, #128]	; (8016c40 <_malloc_r+0xb0>)
 8016bc0:	683b      	ldr	r3, [r7, #0]
 8016bc2:	b923      	cbnz	r3, 8016bce <_malloc_r+0x3e>
 8016bc4:	4621      	mov	r1, r4
 8016bc6:	4630      	mov	r0, r6
 8016bc8:	f000 f8fe 	bl	8016dc8 <_sbrk_r>
 8016bcc:	6038      	str	r0, [r7, #0]
 8016bce:	4629      	mov	r1, r5
 8016bd0:	4630      	mov	r0, r6
 8016bd2:	f000 f8f9 	bl	8016dc8 <_sbrk_r>
 8016bd6:	1c43      	adds	r3, r0, #1
 8016bd8:	d123      	bne.n	8016c22 <_malloc_r+0x92>
 8016bda:	230c      	movs	r3, #12
 8016bdc:	6033      	str	r3, [r6, #0]
 8016bde:	4630      	mov	r0, r6
 8016be0:	f000 fa72 	bl	80170c8 <__malloc_unlock>
 8016be4:	e7e3      	b.n	8016bae <_malloc_r+0x1e>
 8016be6:	6823      	ldr	r3, [r4, #0]
 8016be8:	1b5b      	subs	r3, r3, r5
 8016bea:	d417      	bmi.n	8016c1c <_malloc_r+0x8c>
 8016bec:	2b0b      	cmp	r3, #11
 8016bee:	d903      	bls.n	8016bf8 <_malloc_r+0x68>
 8016bf0:	6023      	str	r3, [r4, #0]
 8016bf2:	441c      	add	r4, r3
 8016bf4:	6025      	str	r5, [r4, #0]
 8016bf6:	e004      	b.n	8016c02 <_malloc_r+0x72>
 8016bf8:	6863      	ldr	r3, [r4, #4]
 8016bfa:	42a2      	cmp	r2, r4
 8016bfc:	bf0c      	ite	eq
 8016bfe:	600b      	streq	r3, [r1, #0]
 8016c00:	6053      	strne	r3, [r2, #4]
 8016c02:	4630      	mov	r0, r6
 8016c04:	f000 fa60 	bl	80170c8 <__malloc_unlock>
 8016c08:	f104 000b 	add.w	r0, r4, #11
 8016c0c:	1d23      	adds	r3, r4, #4
 8016c0e:	f020 0007 	bic.w	r0, r0, #7
 8016c12:	1ac2      	subs	r2, r0, r3
 8016c14:	d0cc      	beq.n	8016bb0 <_malloc_r+0x20>
 8016c16:	1a1b      	subs	r3, r3, r0
 8016c18:	50a3      	str	r3, [r4, r2]
 8016c1a:	e7c9      	b.n	8016bb0 <_malloc_r+0x20>
 8016c1c:	4622      	mov	r2, r4
 8016c1e:	6864      	ldr	r4, [r4, #4]
 8016c20:	e7cc      	b.n	8016bbc <_malloc_r+0x2c>
 8016c22:	1cc4      	adds	r4, r0, #3
 8016c24:	f024 0403 	bic.w	r4, r4, #3
 8016c28:	42a0      	cmp	r0, r4
 8016c2a:	d0e3      	beq.n	8016bf4 <_malloc_r+0x64>
 8016c2c:	1a21      	subs	r1, r4, r0
 8016c2e:	4630      	mov	r0, r6
 8016c30:	f000 f8ca 	bl	8016dc8 <_sbrk_r>
 8016c34:	3001      	adds	r0, #1
 8016c36:	d1dd      	bne.n	8016bf4 <_malloc_r+0x64>
 8016c38:	e7cf      	b.n	8016bda <_malloc_r+0x4a>
 8016c3a:	bf00      	nop
 8016c3c:	20006984 	.word	0x20006984
 8016c40:	20006988 	.word	0x20006988

08016c44 <iprintf>:
 8016c44:	b40f      	push	{r0, r1, r2, r3}
 8016c46:	4b0a      	ldr	r3, [pc, #40]	; (8016c70 <iprintf+0x2c>)
 8016c48:	b513      	push	{r0, r1, r4, lr}
 8016c4a:	681c      	ldr	r4, [r3, #0]
 8016c4c:	b124      	cbz	r4, 8016c58 <iprintf+0x14>
 8016c4e:	69a3      	ldr	r3, [r4, #24]
 8016c50:	b913      	cbnz	r3, 8016c58 <iprintf+0x14>
 8016c52:	4620      	mov	r0, r4
 8016c54:	f7ff fe5e 	bl	8016914 <__sinit>
 8016c58:	ab05      	add	r3, sp, #20
 8016c5a:	9a04      	ldr	r2, [sp, #16]
 8016c5c:	68a1      	ldr	r1, [r4, #8]
 8016c5e:	9301      	str	r3, [sp, #4]
 8016c60:	4620      	mov	r0, r4
 8016c62:	f000 fa61 	bl	8017128 <_vfiprintf_r>
 8016c66:	b002      	add	sp, #8
 8016c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c6c:	b004      	add	sp, #16
 8016c6e:	4770      	bx	lr
 8016c70:	20000020 	.word	0x20000020

08016c74 <rand>:
 8016c74:	4b17      	ldr	r3, [pc, #92]	; (8016cd4 <rand+0x60>)
 8016c76:	b510      	push	{r4, lr}
 8016c78:	681c      	ldr	r4, [r3, #0]
 8016c7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016c7c:	b9b3      	cbnz	r3, 8016cac <rand+0x38>
 8016c7e:	2018      	movs	r0, #24
 8016c80:	f7ff ff0a 	bl	8016a98 <malloc>
 8016c84:	63a0      	str	r0, [r4, #56]	; 0x38
 8016c86:	b928      	cbnz	r0, 8016c94 <rand+0x20>
 8016c88:	4602      	mov	r2, r0
 8016c8a:	4b13      	ldr	r3, [pc, #76]	; (8016cd8 <rand+0x64>)
 8016c8c:	4813      	ldr	r0, [pc, #76]	; (8016cdc <rand+0x68>)
 8016c8e:	214e      	movs	r1, #78	; 0x4e
 8016c90:	f000 f900 	bl	8016e94 <__assert_func>
 8016c94:	4a12      	ldr	r2, [pc, #72]	; (8016ce0 <rand+0x6c>)
 8016c96:	4b13      	ldr	r3, [pc, #76]	; (8016ce4 <rand+0x70>)
 8016c98:	e9c0 2300 	strd	r2, r3, [r0]
 8016c9c:	4b12      	ldr	r3, [pc, #72]	; (8016ce8 <rand+0x74>)
 8016c9e:	6083      	str	r3, [r0, #8]
 8016ca0:	230b      	movs	r3, #11
 8016ca2:	8183      	strh	r3, [r0, #12]
 8016ca4:	2201      	movs	r2, #1
 8016ca6:	2300      	movs	r3, #0
 8016ca8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016cac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016cae:	480f      	ldr	r0, [pc, #60]	; (8016cec <rand+0x78>)
 8016cb0:	690a      	ldr	r2, [r1, #16]
 8016cb2:	694b      	ldr	r3, [r1, #20]
 8016cb4:	4c0e      	ldr	r4, [pc, #56]	; (8016cf0 <rand+0x7c>)
 8016cb6:	4350      	muls	r0, r2
 8016cb8:	fb04 0003 	mla	r0, r4, r3, r0
 8016cbc:	fba2 3404 	umull	r3, r4, r2, r4
 8016cc0:	1c5a      	adds	r2, r3, #1
 8016cc2:	4404      	add	r4, r0
 8016cc4:	f144 0000 	adc.w	r0, r4, #0
 8016cc8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8016ccc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016cd0:	bd10      	pop	{r4, pc}
 8016cd2:	bf00      	nop
 8016cd4:	20000020 	.word	0x20000020
 8016cd8:	0801b154 	.word	0x0801b154
 8016cdc:	0801b16b 	.word	0x0801b16b
 8016ce0:	abcd330e 	.word	0xabcd330e
 8016ce4:	e66d1234 	.word	0xe66d1234
 8016ce8:	0005deec 	.word	0x0005deec
 8016cec:	5851f42d 	.word	0x5851f42d
 8016cf0:	4c957f2d 	.word	0x4c957f2d

08016cf4 <cleanup_glue>:
 8016cf4:	b538      	push	{r3, r4, r5, lr}
 8016cf6:	460c      	mov	r4, r1
 8016cf8:	6809      	ldr	r1, [r1, #0]
 8016cfa:	4605      	mov	r5, r0
 8016cfc:	b109      	cbz	r1, 8016d02 <cleanup_glue+0xe>
 8016cfe:	f7ff fff9 	bl	8016cf4 <cleanup_glue>
 8016d02:	4621      	mov	r1, r4
 8016d04:	4628      	mov	r0, r5
 8016d06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016d0a:	f7ff bef1 	b.w	8016af0 <_free_r>
	...

08016d10 <_reclaim_reent>:
 8016d10:	4b2c      	ldr	r3, [pc, #176]	; (8016dc4 <_reclaim_reent+0xb4>)
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	4283      	cmp	r3, r0
 8016d16:	b570      	push	{r4, r5, r6, lr}
 8016d18:	4604      	mov	r4, r0
 8016d1a:	d051      	beq.n	8016dc0 <_reclaim_reent+0xb0>
 8016d1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016d1e:	b143      	cbz	r3, 8016d32 <_reclaim_reent+0x22>
 8016d20:	68db      	ldr	r3, [r3, #12]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d14a      	bne.n	8016dbc <_reclaim_reent+0xac>
 8016d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d28:	6819      	ldr	r1, [r3, #0]
 8016d2a:	b111      	cbz	r1, 8016d32 <_reclaim_reent+0x22>
 8016d2c:	4620      	mov	r0, r4
 8016d2e:	f7ff fedf 	bl	8016af0 <_free_r>
 8016d32:	6961      	ldr	r1, [r4, #20]
 8016d34:	b111      	cbz	r1, 8016d3c <_reclaim_reent+0x2c>
 8016d36:	4620      	mov	r0, r4
 8016d38:	f7ff feda 	bl	8016af0 <_free_r>
 8016d3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016d3e:	b111      	cbz	r1, 8016d46 <_reclaim_reent+0x36>
 8016d40:	4620      	mov	r0, r4
 8016d42:	f7ff fed5 	bl	8016af0 <_free_r>
 8016d46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016d48:	b111      	cbz	r1, 8016d50 <_reclaim_reent+0x40>
 8016d4a:	4620      	mov	r0, r4
 8016d4c:	f7ff fed0 	bl	8016af0 <_free_r>
 8016d50:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016d52:	b111      	cbz	r1, 8016d5a <_reclaim_reent+0x4a>
 8016d54:	4620      	mov	r0, r4
 8016d56:	f7ff fecb 	bl	8016af0 <_free_r>
 8016d5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016d5c:	b111      	cbz	r1, 8016d64 <_reclaim_reent+0x54>
 8016d5e:	4620      	mov	r0, r4
 8016d60:	f7ff fec6 	bl	8016af0 <_free_r>
 8016d64:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016d66:	b111      	cbz	r1, 8016d6e <_reclaim_reent+0x5e>
 8016d68:	4620      	mov	r0, r4
 8016d6a:	f7ff fec1 	bl	8016af0 <_free_r>
 8016d6e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016d70:	b111      	cbz	r1, 8016d78 <_reclaim_reent+0x68>
 8016d72:	4620      	mov	r0, r4
 8016d74:	f7ff febc 	bl	8016af0 <_free_r>
 8016d78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016d7a:	b111      	cbz	r1, 8016d82 <_reclaim_reent+0x72>
 8016d7c:	4620      	mov	r0, r4
 8016d7e:	f7ff feb7 	bl	8016af0 <_free_r>
 8016d82:	69a3      	ldr	r3, [r4, #24]
 8016d84:	b1e3      	cbz	r3, 8016dc0 <_reclaim_reent+0xb0>
 8016d86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016d88:	4620      	mov	r0, r4
 8016d8a:	4798      	blx	r3
 8016d8c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016d8e:	b1b9      	cbz	r1, 8016dc0 <_reclaim_reent+0xb0>
 8016d90:	4620      	mov	r0, r4
 8016d92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d96:	f7ff bfad 	b.w	8016cf4 <cleanup_glue>
 8016d9a:	5949      	ldr	r1, [r1, r5]
 8016d9c:	b941      	cbnz	r1, 8016db0 <_reclaim_reent+0xa0>
 8016d9e:	3504      	adds	r5, #4
 8016da0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016da2:	2d80      	cmp	r5, #128	; 0x80
 8016da4:	68d9      	ldr	r1, [r3, #12]
 8016da6:	d1f8      	bne.n	8016d9a <_reclaim_reent+0x8a>
 8016da8:	4620      	mov	r0, r4
 8016daa:	f7ff fea1 	bl	8016af0 <_free_r>
 8016dae:	e7ba      	b.n	8016d26 <_reclaim_reent+0x16>
 8016db0:	680e      	ldr	r6, [r1, #0]
 8016db2:	4620      	mov	r0, r4
 8016db4:	f7ff fe9c 	bl	8016af0 <_free_r>
 8016db8:	4631      	mov	r1, r6
 8016dba:	e7ef      	b.n	8016d9c <_reclaim_reent+0x8c>
 8016dbc:	2500      	movs	r5, #0
 8016dbe:	e7ef      	b.n	8016da0 <_reclaim_reent+0x90>
 8016dc0:	bd70      	pop	{r4, r5, r6, pc}
 8016dc2:	bf00      	nop
 8016dc4:	20000020 	.word	0x20000020

08016dc8 <_sbrk_r>:
 8016dc8:	b538      	push	{r3, r4, r5, lr}
 8016dca:	4d06      	ldr	r5, [pc, #24]	; (8016de4 <_sbrk_r+0x1c>)
 8016dcc:	2300      	movs	r3, #0
 8016dce:	4604      	mov	r4, r0
 8016dd0:	4608      	mov	r0, r1
 8016dd2:	602b      	str	r3, [r5, #0]
 8016dd4:	f7ea fc18 	bl	8001608 <_sbrk>
 8016dd8:	1c43      	adds	r3, r0, #1
 8016dda:	d102      	bne.n	8016de2 <_sbrk_r+0x1a>
 8016ddc:	682b      	ldr	r3, [r5, #0]
 8016dde:	b103      	cbz	r3, 8016de2 <_sbrk_r+0x1a>
 8016de0:	6023      	str	r3, [r4, #0]
 8016de2:	bd38      	pop	{r3, r4, r5, pc}
 8016de4:	2000d3d0 	.word	0x2000d3d0

08016de8 <__sread>:
 8016de8:	b510      	push	{r4, lr}
 8016dea:	460c      	mov	r4, r1
 8016dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016df0:	f000 fc5e 	bl	80176b0 <_read_r>
 8016df4:	2800      	cmp	r0, #0
 8016df6:	bfab      	itete	ge
 8016df8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016dfa:	89a3      	ldrhlt	r3, [r4, #12]
 8016dfc:	181b      	addge	r3, r3, r0
 8016dfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016e02:	bfac      	ite	ge
 8016e04:	6563      	strge	r3, [r4, #84]	; 0x54
 8016e06:	81a3      	strhlt	r3, [r4, #12]
 8016e08:	bd10      	pop	{r4, pc}

08016e0a <__swrite>:
 8016e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e0e:	461f      	mov	r7, r3
 8016e10:	898b      	ldrh	r3, [r1, #12]
 8016e12:	05db      	lsls	r3, r3, #23
 8016e14:	4605      	mov	r5, r0
 8016e16:	460c      	mov	r4, r1
 8016e18:	4616      	mov	r6, r2
 8016e1a:	d505      	bpl.n	8016e28 <__swrite+0x1e>
 8016e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e20:	2302      	movs	r3, #2
 8016e22:	2200      	movs	r2, #0
 8016e24:	f000 f938 	bl	8017098 <_lseek_r>
 8016e28:	89a3      	ldrh	r3, [r4, #12]
 8016e2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016e2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016e32:	81a3      	strh	r3, [r4, #12]
 8016e34:	4632      	mov	r2, r6
 8016e36:	463b      	mov	r3, r7
 8016e38:	4628      	mov	r0, r5
 8016e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e3e:	f000 b817 	b.w	8016e70 <_write_r>

08016e42 <__sseek>:
 8016e42:	b510      	push	{r4, lr}
 8016e44:	460c      	mov	r4, r1
 8016e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e4a:	f000 f925 	bl	8017098 <_lseek_r>
 8016e4e:	1c43      	adds	r3, r0, #1
 8016e50:	89a3      	ldrh	r3, [r4, #12]
 8016e52:	bf15      	itete	ne
 8016e54:	6560      	strne	r0, [r4, #84]	; 0x54
 8016e56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016e5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016e5e:	81a3      	strheq	r3, [r4, #12]
 8016e60:	bf18      	it	ne
 8016e62:	81a3      	strhne	r3, [r4, #12]
 8016e64:	bd10      	pop	{r4, pc}

08016e66 <__sclose>:
 8016e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e6a:	f000 b831 	b.w	8016ed0 <_close_r>
	...

08016e70 <_write_r>:
 8016e70:	b538      	push	{r3, r4, r5, lr}
 8016e72:	4d07      	ldr	r5, [pc, #28]	; (8016e90 <_write_r+0x20>)
 8016e74:	4604      	mov	r4, r0
 8016e76:	4608      	mov	r0, r1
 8016e78:	4611      	mov	r1, r2
 8016e7a:	2200      	movs	r2, #0
 8016e7c:	602a      	str	r2, [r5, #0]
 8016e7e:	461a      	mov	r2, r3
 8016e80:	f7ea fb71 	bl	8001566 <_write>
 8016e84:	1c43      	adds	r3, r0, #1
 8016e86:	d102      	bne.n	8016e8e <_write_r+0x1e>
 8016e88:	682b      	ldr	r3, [r5, #0]
 8016e8a:	b103      	cbz	r3, 8016e8e <_write_r+0x1e>
 8016e8c:	6023      	str	r3, [r4, #0]
 8016e8e:	bd38      	pop	{r3, r4, r5, pc}
 8016e90:	2000d3d0 	.word	0x2000d3d0

08016e94 <__assert_func>:
 8016e94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016e96:	4614      	mov	r4, r2
 8016e98:	461a      	mov	r2, r3
 8016e9a:	4b09      	ldr	r3, [pc, #36]	; (8016ec0 <__assert_func+0x2c>)
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	4605      	mov	r5, r0
 8016ea0:	68d8      	ldr	r0, [r3, #12]
 8016ea2:	b14c      	cbz	r4, 8016eb8 <__assert_func+0x24>
 8016ea4:	4b07      	ldr	r3, [pc, #28]	; (8016ec4 <__assert_func+0x30>)
 8016ea6:	9100      	str	r1, [sp, #0]
 8016ea8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016eac:	4906      	ldr	r1, [pc, #24]	; (8016ec8 <__assert_func+0x34>)
 8016eae:	462b      	mov	r3, r5
 8016eb0:	f000 f8e0 	bl	8017074 <fiprintf>
 8016eb4:	f000 fcce 	bl	8017854 <abort>
 8016eb8:	4b04      	ldr	r3, [pc, #16]	; (8016ecc <__assert_func+0x38>)
 8016eba:	461c      	mov	r4, r3
 8016ebc:	e7f3      	b.n	8016ea6 <__assert_func+0x12>
 8016ebe:	bf00      	nop
 8016ec0:	20000020 	.word	0x20000020
 8016ec4:	0801b1ca 	.word	0x0801b1ca
 8016ec8:	0801b1d7 	.word	0x0801b1d7
 8016ecc:	0801b205 	.word	0x0801b205

08016ed0 <_close_r>:
 8016ed0:	b538      	push	{r3, r4, r5, lr}
 8016ed2:	4d06      	ldr	r5, [pc, #24]	; (8016eec <_close_r+0x1c>)
 8016ed4:	2300      	movs	r3, #0
 8016ed6:	4604      	mov	r4, r0
 8016ed8:	4608      	mov	r0, r1
 8016eda:	602b      	str	r3, [r5, #0]
 8016edc:	f7ea fb5f 	bl	800159e <_close>
 8016ee0:	1c43      	adds	r3, r0, #1
 8016ee2:	d102      	bne.n	8016eea <_close_r+0x1a>
 8016ee4:	682b      	ldr	r3, [r5, #0]
 8016ee6:	b103      	cbz	r3, 8016eea <_close_r+0x1a>
 8016ee8:	6023      	str	r3, [r4, #0]
 8016eea:	bd38      	pop	{r3, r4, r5, pc}
 8016eec:	2000d3d0 	.word	0x2000d3d0

08016ef0 <__sflush_r>:
 8016ef0:	898a      	ldrh	r2, [r1, #12]
 8016ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ef6:	4605      	mov	r5, r0
 8016ef8:	0710      	lsls	r0, r2, #28
 8016efa:	460c      	mov	r4, r1
 8016efc:	d458      	bmi.n	8016fb0 <__sflush_r+0xc0>
 8016efe:	684b      	ldr	r3, [r1, #4]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	dc05      	bgt.n	8016f10 <__sflush_r+0x20>
 8016f04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	dc02      	bgt.n	8016f10 <__sflush_r+0x20>
 8016f0a:	2000      	movs	r0, #0
 8016f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016f12:	2e00      	cmp	r6, #0
 8016f14:	d0f9      	beq.n	8016f0a <__sflush_r+0x1a>
 8016f16:	2300      	movs	r3, #0
 8016f18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016f1c:	682f      	ldr	r7, [r5, #0]
 8016f1e:	602b      	str	r3, [r5, #0]
 8016f20:	d032      	beq.n	8016f88 <__sflush_r+0x98>
 8016f22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016f24:	89a3      	ldrh	r3, [r4, #12]
 8016f26:	075a      	lsls	r2, r3, #29
 8016f28:	d505      	bpl.n	8016f36 <__sflush_r+0x46>
 8016f2a:	6863      	ldr	r3, [r4, #4]
 8016f2c:	1ac0      	subs	r0, r0, r3
 8016f2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016f30:	b10b      	cbz	r3, 8016f36 <__sflush_r+0x46>
 8016f32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016f34:	1ac0      	subs	r0, r0, r3
 8016f36:	2300      	movs	r3, #0
 8016f38:	4602      	mov	r2, r0
 8016f3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016f3c:	6a21      	ldr	r1, [r4, #32]
 8016f3e:	4628      	mov	r0, r5
 8016f40:	47b0      	blx	r6
 8016f42:	1c43      	adds	r3, r0, #1
 8016f44:	89a3      	ldrh	r3, [r4, #12]
 8016f46:	d106      	bne.n	8016f56 <__sflush_r+0x66>
 8016f48:	6829      	ldr	r1, [r5, #0]
 8016f4a:	291d      	cmp	r1, #29
 8016f4c:	d82c      	bhi.n	8016fa8 <__sflush_r+0xb8>
 8016f4e:	4a2a      	ldr	r2, [pc, #168]	; (8016ff8 <__sflush_r+0x108>)
 8016f50:	40ca      	lsrs	r2, r1
 8016f52:	07d6      	lsls	r6, r2, #31
 8016f54:	d528      	bpl.n	8016fa8 <__sflush_r+0xb8>
 8016f56:	2200      	movs	r2, #0
 8016f58:	6062      	str	r2, [r4, #4]
 8016f5a:	04d9      	lsls	r1, r3, #19
 8016f5c:	6922      	ldr	r2, [r4, #16]
 8016f5e:	6022      	str	r2, [r4, #0]
 8016f60:	d504      	bpl.n	8016f6c <__sflush_r+0x7c>
 8016f62:	1c42      	adds	r2, r0, #1
 8016f64:	d101      	bne.n	8016f6a <__sflush_r+0x7a>
 8016f66:	682b      	ldr	r3, [r5, #0]
 8016f68:	b903      	cbnz	r3, 8016f6c <__sflush_r+0x7c>
 8016f6a:	6560      	str	r0, [r4, #84]	; 0x54
 8016f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016f6e:	602f      	str	r7, [r5, #0]
 8016f70:	2900      	cmp	r1, #0
 8016f72:	d0ca      	beq.n	8016f0a <__sflush_r+0x1a>
 8016f74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f78:	4299      	cmp	r1, r3
 8016f7a:	d002      	beq.n	8016f82 <__sflush_r+0x92>
 8016f7c:	4628      	mov	r0, r5
 8016f7e:	f7ff fdb7 	bl	8016af0 <_free_r>
 8016f82:	2000      	movs	r0, #0
 8016f84:	6360      	str	r0, [r4, #52]	; 0x34
 8016f86:	e7c1      	b.n	8016f0c <__sflush_r+0x1c>
 8016f88:	6a21      	ldr	r1, [r4, #32]
 8016f8a:	2301      	movs	r3, #1
 8016f8c:	4628      	mov	r0, r5
 8016f8e:	47b0      	blx	r6
 8016f90:	1c41      	adds	r1, r0, #1
 8016f92:	d1c7      	bne.n	8016f24 <__sflush_r+0x34>
 8016f94:	682b      	ldr	r3, [r5, #0]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d0c4      	beq.n	8016f24 <__sflush_r+0x34>
 8016f9a:	2b1d      	cmp	r3, #29
 8016f9c:	d001      	beq.n	8016fa2 <__sflush_r+0xb2>
 8016f9e:	2b16      	cmp	r3, #22
 8016fa0:	d101      	bne.n	8016fa6 <__sflush_r+0xb6>
 8016fa2:	602f      	str	r7, [r5, #0]
 8016fa4:	e7b1      	b.n	8016f0a <__sflush_r+0x1a>
 8016fa6:	89a3      	ldrh	r3, [r4, #12]
 8016fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016fac:	81a3      	strh	r3, [r4, #12]
 8016fae:	e7ad      	b.n	8016f0c <__sflush_r+0x1c>
 8016fb0:	690f      	ldr	r7, [r1, #16]
 8016fb2:	2f00      	cmp	r7, #0
 8016fb4:	d0a9      	beq.n	8016f0a <__sflush_r+0x1a>
 8016fb6:	0793      	lsls	r3, r2, #30
 8016fb8:	680e      	ldr	r6, [r1, #0]
 8016fba:	bf08      	it	eq
 8016fbc:	694b      	ldreq	r3, [r1, #20]
 8016fbe:	600f      	str	r7, [r1, #0]
 8016fc0:	bf18      	it	ne
 8016fc2:	2300      	movne	r3, #0
 8016fc4:	eba6 0807 	sub.w	r8, r6, r7
 8016fc8:	608b      	str	r3, [r1, #8]
 8016fca:	f1b8 0f00 	cmp.w	r8, #0
 8016fce:	dd9c      	ble.n	8016f0a <__sflush_r+0x1a>
 8016fd0:	6a21      	ldr	r1, [r4, #32]
 8016fd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016fd4:	4643      	mov	r3, r8
 8016fd6:	463a      	mov	r2, r7
 8016fd8:	4628      	mov	r0, r5
 8016fda:	47b0      	blx	r6
 8016fdc:	2800      	cmp	r0, #0
 8016fde:	dc06      	bgt.n	8016fee <__sflush_r+0xfe>
 8016fe0:	89a3      	ldrh	r3, [r4, #12]
 8016fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016fe6:	81a3      	strh	r3, [r4, #12]
 8016fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8016fec:	e78e      	b.n	8016f0c <__sflush_r+0x1c>
 8016fee:	4407      	add	r7, r0
 8016ff0:	eba8 0800 	sub.w	r8, r8, r0
 8016ff4:	e7e9      	b.n	8016fca <__sflush_r+0xda>
 8016ff6:	bf00      	nop
 8016ff8:	20400001 	.word	0x20400001

08016ffc <_fflush_r>:
 8016ffc:	b538      	push	{r3, r4, r5, lr}
 8016ffe:	690b      	ldr	r3, [r1, #16]
 8017000:	4605      	mov	r5, r0
 8017002:	460c      	mov	r4, r1
 8017004:	b913      	cbnz	r3, 801700c <_fflush_r+0x10>
 8017006:	2500      	movs	r5, #0
 8017008:	4628      	mov	r0, r5
 801700a:	bd38      	pop	{r3, r4, r5, pc}
 801700c:	b118      	cbz	r0, 8017016 <_fflush_r+0x1a>
 801700e:	6983      	ldr	r3, [r0, #24]
 8017010:	b90b      	cbnz	r3, 8017016 <_fflush_r+0x1a>
 8017012:	f7ff fc7f 	bl	8016914 <__sinit>
 8017016:	4b14      	ldr	r3, [pc, #80]	; (8017068 <_fflush_r+0x6c>)
 8017018:	429c      	cmp	r4, r3
 801701a:	d11b      	bne.n	8017054 <_fflush_r+0x58>
 801701c:	686c      	ldr	r4, [r5, #4]
 801701e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d0ef      	beq.n	8017006 <_fflush_r+0xa>
 8017026:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017028:	07d0      	lsls	r0, r2, #31
 801702a:	d404      	bmi.n	8017036 <_fflush_r+0x3a>
 801702c:	0599      	lsls	r1, r3, #22
 801702e:	d402      	bmi.n	8017036 <_fflush_r+0x3a>
 8017030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017032:	f7ea fc25 	bl	8001880 <__retarget_lock_acquire_recursive>
 8017036:	4628      	mov	r0, r5
 8017038:	4621      	mov	r1, r4
 801703a:	f7ff ff59 	bl	8016ef0 <__sflush_r>
 801703e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017040:	07da      	lsls	r2, r3, #31
 8017042:	4605      	mov	r5, r0
 8017044:	d4e0      	bmi.n	8017008 <_fflush_r+0xc>
 8017046:	89a3      	ldrh	r3, [r4, #12]
 8017048:	059b      	lsls	r3, r3, #22
 801704a:	d4dd      	bmi.n	8017008 <_fflush_r+0xc>
 801704c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801704e:	f7ea fc2b 	bl	80018a8 <__retarget_lock_release_recursive>
 8017052:	e7d9      	b.n	8017008 <_fflush_r+0xc>
 8017054:	4b05      	ldr	r3, [pc, #20]	; (801706c <_fflush_r+0x70>)
 8017056:	429c      	cmp	r4, r3
 8017058:	d101      	bne.n	801705e <_fflush_r+0x62>
 801705a:	68ac      	ldr	r4, [r5, #8]
 801705c:	e7df      	b.n	801701e <_fflush_r+0x22>
 801705e:	4b04      	ldr	r3, [pc, #16]	; (8017070 <_fflush_r+0x74>)
 8017060:	429c      	cmp	r4, r3
 8017062:	bf08      	it	eq
 8017064:	68ec      	ldreq	r4, [r5, #12]
 8017066:	e7da      	b.n	801701e <_fflush_r+0x22>
 8017068:	0801b110 	.word	0x0801b110
 801706c:	0801b130 	.word	0x0801b130
 8017070:	0801b0f0 	.word	0x0801b0f0

08017074 <fiprintf>:
 8017074:	b40e      	push	{r1, r2, r3}
 8017076:	b503      	push	{r0, r1, lr}
 8017078:	4601      	mov	r1, r0
 801707a:	ab03      	add	r3, sp, #12
 801707c:	4805      	ldr	r0, [pc, #20]	; (8017094 <fiprintf+0x20>)
 801707e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017082:	6800      	ldr	r0, [r0, #0]
 8017084:	9301      	str	r3, [sp, #4]
 8017086:	f000 f84f 	bl	8017128 <_vfiprintf_r>
 801708a:	b002      	add	sp, #8
 801708c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017090:	b003      	add	sp, #12
 8017092:	4770      	bx	lr
 8017094:	20000020 	.word	0x20000020

08017098 <_lseek_r>:
 8017098:	b538      	push	{r3, r4, r5, lr}
 801709a:	4d07      	ldr	r5, [pc, #28]	; (80170b8 <_lseek_r+0x20>)
 801709c:	4604      	mov	r4, r0
 801709e:	4608      	mov	r0, r1
 80170a0:	4611      	mov	r1, r2
 80170a2:	2200      	movs	r2, #0
 80170a4:	602a      	str	r2, [r5, #0]
 80170a6:	461a      	mov	r2, r3
 80170a8:	f7ea faa0 	bl	80015ec <_lseek>
 80170ac:	1c43      	adds	r3, r0, #1
 80170ae:	d102      	bne.n	80170b6 <_lseek_r+0x1e>
 80170b0:	682b      	ldr	r3, [r5, #0]
 80170b2:	b103      	cbz	r3, 80170b6 <_lseek_r+0x1e>
 80170b4:	6023      	str	r3, [r4, #0]
 80170b6:	bd38      	pop	{r3, r4, r5, pc}
 80170b8:	2000d3d0 	.word	0x2000d3d0

080170bc <__malloc_lock>:
 80170bc:	4801      	ldr	r0, [pc, #4]	; (80170c4 <__malloc_lock+0x8>)
 80170be:	f7ea bbdf 	b.w	8001880 <__retarget_lock_acquire_recursive>
 80170c2:	bf00      	nop
 80170c4:	2000037c 	.word	0x2000037c

080170c8 <__malloc_unlock>:
 80170c8:	4801      	ldr	r0, [pc, #4]	; (80170d0 <__malloc_unlock+0x8>)
 80170ca:	f7ea bbed 	b.w	80018a8 <__retarget_lock_release_recursive>
 80170ce:	bf00      	nop
 80170d0:	2000037c 	.word	0x2000037c

080170d4 <__sfputc_r>:
 80170d4:	6893      	ldr	r3, [r2, #8]
 80170d6:	3b01      	subs	r3, #1
 80170d8:	2b00      	cmp	r3, #0
 80170da:	b410      	push	{r4}
 80170dc:	6093      	str	r3, [r2, #8]
 80170de:	da08      	bge.n	80170f2 <__sfputc_r+0x1e>
 80170e0:	6994      	ldr	r4, [r2, #24]
 80170e2:	42a3      	cmp	r3, r4
 80170e4:	db01      	blt.n	80170ea <__sfputc_r+0x16>
 80170e6:	290a      	cmp	r1, #10
 80170e8:	d103      	bne.n	80170f2 <__sfputc_r+0x1e>
 80170ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80170ee:	f000 baf1 	b.w	80176d4 <__swbuf_r>
 80170f2:	6813      	ldr	r3, [r2, #0]
 80170f4:	1c58      	adds	r0, r3, #1
 80170f6:	6010      	str	r0, [r2, #0]
 80170f8:	7019      	strb	r1, [r3, #0]
 80170fa:	4608      	mov	r0, r1
 80170fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017100:	4770      	bx	lr

08017102 <__sfputs_r>:
 8017102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017104:	4606      	mov	r6, r0
 8017106:	460f      	mov	r7, r1
 8017108:	4614      	mov	r4, r2
 801710a:	18d5      	adds	r5, r2, r3
 801710c:	42ac      	cmp	r4, r5
 801710e:	d101      	bne.n	8017114 <__sfputs_r+0x12>
 8017110:	2000      	movs	r0, #0
 8017112:	e007      	b.n	8017124 <__sfputs_r+0x22>
 8017114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017118:	463a      	mov	r2, r7
 801711a:	4630      	mov	r0, r6
 801711c:	f7ff ffda 	bl	80170d4 <__sfputc_r>
 8017120:	1c43      	adds	r3, r0, #1
 8017122:	d1f3      	bne.n	801710c <__sfputs_r+0xa>
 8017124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017128 <_vfiprintf_r>:
 8017128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801712c:	460d      	mov	r5, r1
 801712e:	b09d      	sub	sp, #116	; 0x74
 8017130:	4614      	mov	r4, r2
 8017132:	4698      	mov	r8, r3
 8017134:	4606      	mov	r6, r0
 8017136:	b118      	cbz	r0, 8017140 <_vfiprintf_r+0x18>
 8017138:	6983      	ldr	r3, [r0, #24]
 801713a:	b90b      	cbnz	r3, 8017140 <_vfiprintf_r+0x18>
 801713c:	f7ff fbea 	bl	8016914 <__sinit>
 8017140:	4b89      	ldr	r3, [pc, #548]	; (8017368 <_vfiprintf_r+0x240>)
 8017142:	429d      	cmp	r5, r3
 8017144:	d11b      	bne.n	801717e <_vfiprintf_r+0x56>
 8017146:	6875      	ldr	r5, [r6, #4]
 8017148:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801714a:	07d9      	lsls	r1, r3, #31
 801714c:	d405      	bmi.n	801715a <_vfiprintf_r+0x32>
 801714e:	89ab      	ldrh	r3, [r5, #12]
 8017150:	059a      	lsls	r2, r3, #22
 8017152:	d402      	bmi.n	801715a <_vfiprintf_r+0x32>
 8017154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017156:	f7ea fb93 	bl	8001880 <__retarget_lock_acquire_recursive>
 801715a:	89ab      	ldrh	r3, [r5, #12]
 801715c:	071b      	lsls	r3, r3, #28
 801715e:	d501      	bpl.n	8017164 <_vfiprintf_r+0x3c>
 8017160:	692b      	ldr	r3, [r5, #16]
 8017162:	b9eb      	cbnz	r3, 80171a0 <_vfiprintf_r+0x78>
 8017164:	4629      	mov	r1, r5
 8017166:	4630      	mov	r0, r6
 8017168:	f000 fb06 	bl	8017778 <__swsetup_r>
 801716c:	b1c0      	cbz	r0, 80171a0 <_vfiprintf_r+0x78>
 801716e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017170:	07dc      	lsls	r4, r3, #31
 8017172:	d50e      	bpl.n	8017192 <_vfiprintf_r+0x6a>
 8017174:	f04f 30ff 	mov.w	r0, #4294967295
 8017178:	b01d      	add	sp, #116	; 0x74
 801717a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801717e:	4b7b      	ldr	r3, [pc, #492]	; (801736c <_vfiprintf_r+0x244>)
 8017180:	429d      	cmp	r5, r3
 8017182:	d101      	bne.n	8017188 <_vfiprintf_r+0x60>
 8017184:	68b5      	ldr	r5, [r6, #8]
 8017186:	e7df      	b.n	8017148 <_vfiprintf_r+0x20>
 8017188:	4b79      	ldr	r3, [pc, #484]	; (8017370 <_vfiprintf_r+0x248>)
 801718a:	429d      	cmp	r5, r3
 801718c:	bf08      	it	eq
 801718e:	68f5      	ldreq	r5, [r6, #12]
 8017190:	e7da      	b.n	8017148 <_vfiprintf_r+0x20>
 8017192:	89ab      	ldrh	r3, [r5, #12]
 8017194:	0598      	lsls	r0, r3, #22
 8017196:	d4ed      	bmi.n	8017174 <_vfiprintf_r+0x4c>
 8017198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801719a:	f7ea fb85 	bl	80018a8 <__retarget_lock_release_recursive>
 801719e:	e7e9      	b.n	8017174 <_vfiprintf_r+0x4c>
 80171a0:	2300      	movs	r3, #0
 80171a2:	9309      	str	r3, [sp, #36]	; 0x24
 80171a4:	2320      	movs	r3, #32
 80171a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80171aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80171ae:	2330      	movs	r3, #48	; 0x30
 80171b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017374 <_vfiprintf_r+0x24c>
 80171b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80171b8:	f04f 0901 	mov.w	r9, #1
 80171bc:	4623      	mov	r3, r4
 80171be:	469a      	mov	sl, r3
 80171c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80171c4:	b10a      	cbz	r2, 80171ca <_vfiprintf_r+0xa2>
 80171c6:	2a25      	cmp	r2, #37	; 0x25
 80171c8:	d1f9      	bne.n	80171be <_vfiprintf_r+0x96>
 80171ca:	ebba 0b04 	subs.w	fp, sl, r4
 80171ce:	d00b      	beq.n	80171e8 <_vfiprintf_r+0xc0>
 80171d0:	465b      	mov	r3, fp
 80171d2:	4622      	mov	r2, r4
 80171d4:	4629      	mov	r1, r5
 80171d6:	4630      	mov	r0, r6
 80171d8:	f7ff ff93 	bl	8017102 <__sfputs_r>
 80171dc:	3001      	adds	r0, #1
 80171de:	f000 80aa 	beq.w	8017336 <_vfiprintf_r+0x20e>
 80171e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80171e4:	445a      	add	r2, fp
 80171e6:	9209      	str	r2, [sp, #36]	; 0x24
 80171e8:	f89a 3000 	ldrb.w	r3, [sl]
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	f000 80a2 	beq.w	8017336 <_vfiprintf_r+0x20e>
 80171f2:	2300      	movs	r3, #0
 80171f4:	f04f 32ff 	mov.w	r2, #4294967295
 80171f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80171fc:	f10a 0a01 	add.w	sl, sl, #1
 8017200:	9304      	str	r3, [sp, #16]
 8017202:	9307      	str	r3, [sp, #28]
 8017204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017208:	931a      	str	r3, [sp, #104]	; 0x68
 801720a:	4654      	mov	r4, sl
 801720c:	2205      	movs	r2, #5
 801720e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017212:	4858      	ldr	r0, [pc, #352]	; (8017374 <_vfiprintf_r+0x24c>)
 8017214:	f7e8 ffdc 	bl	80001d0 <memchr>
 8017218:	9a04      	ldr	r2, [sp, #16]
 801721a:	b9d8      	cbnz	r0, 8017254 <_vfiprintf_r+0x12c>
 801721c:	06d1      	lsls	r1, r2, #27
 801721e:	bf44      	itt	mi
 8017220:	2320      	movmi	r3, #32
 8017222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017226:	0713      	lsls	r3, r2, #28
 8017228:	bf44      	itt	mi
 801722a:	232b      	movmi	r3, #43	; 0x2b
 801722c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017230:	f89a 3000 	ldrb.w	r3, [sl]
 8017234:	2b2a      	cmp	r3, #42	; 0x2a
 8017236:	d015      	beq.n	8017264 <_vfiprintf_r+0x13c>
 8017238:	9a07      	ldr	r2, [sp, #28]
 801723a:	4654      	mov	r4, sl
 801723c:	2000      	movs	r0, #0
 801723e:	f04f 0c0a 	mov.w	ip, #10
 8017242:	4621      	mov	r1, r4
 8017244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017248:	3b30      	subs	r3, #48	; 0x30
 801724a:	2b09      	cmp	r3, #9
 801724c:	d94e      	bls.n	80172ec <_vfiprintf_r+0x1c4>
 801724e:	b1b0      	cbz	r0, 801727e <_vfiprintf_r+0x156>
 8017250:	9207      	str	r2, [sp, #28]
 8017252:	e014      	b.n	801727e <_vfiprintf_r+0x156>
 8017254:	eba0 0308 	sub.w	r3, r0, r8
 8017258:	fa09 f303 	lsl.w	r3, r9, r3
 801725c:	4313      	orrs	r3, r2
 801725e:	9304      	str	r3, [sp, #16]
 8017260:	46a2      	mov	sl, r4
 8017262:	e7d2      	b.n	801720a <_vfiprintf_r+0xe2>
 8017264:	9b03      	ldr	r3, [sp, #12]
 8017266:	1d19      	adds	r1, r3, #4
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	9103      	str	r1, [sp, #12]
 801726c:	2b00      	cmp	r3, #0
 801726e:	bfbb      	ittet	lt
 8017270:	425b      	neglt	r3, r3
 8017272:	f042 0202 	orrlt.w	r2, r2, #2
 8017276:	9307      	strge	r3, [sp, #28]
 8017278:	9307      	strlt	r3, [sp, #28]
 801727a:	bfb8      	it	lt
 801727c:	9204      	strlt	r2, [sp, #16]
 801727e:	7823      	ldrb	r3, [r4, #0]
 8017280:	2b2e      	cmp	r3, #46	; 0x2e
 8017282:	d10c      	bne.n	801729e <_vfiprintf_r+0x176>
 8017284:	7863      	ldrb	r3, [r4, #1]
 8017286:	2b2a      	cmp	r3, #42	; 0x2a
 8017288:	d135      	bne.n	80172f6 <_vfiprintf_r+0x1ce>
 801728a:	9b03      	ldr	r3, [sp, #12]
 801728c:	1d1a      	adds	r2, r3, #4
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	9203      	str	r2, [sp, #12]
 8017292:	2b00      	cmp	r3, #0
 8017294:	bfb8      	it	lt
 8017296:	f04f 33ff 	movlt.w	r3, #4294967295
 801729a:	3402      	adds	r4, #2
 801729c:	9305      	str	r3, [sp, #20]
 801729e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017384 <_vfiprintf_r+0x25c>
 80172a2:	7821      	ldrb	r1, [r4, #0]
 80172a4:	2203      	movs	r2, #3
 80172a6:	4650      	mov	r0, sl
 80172a8:	f7e8 ff92 	bl	80001d0 <memchr>
 80172ac:	b140      	cbz	r0, 80172c0 <_vfiprintf_r+0x198>
 80172ae:	2340      	movs	r3, #64	; 0x40
 80172b0:	eba0 000a 	sub.w	r0, r0, sl
 80172b4:	fa03 f000 	lsl.w	r0, r3, r0
 80172b8:	9b04      	ldr	r3, [sp, #16]
 80172ba:	4303      	orrs	r3, r0
 80172bc:	3401      	adds	r4, #1
 80172be:	9304      	str	r3, [sp, #16]
 80172c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172c4:	482c      	ldr	r0, [pc, #176]	; (8017378 <_vfiprintf_r+0x250>)
 80172c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80172ca:	2206      	movs	r2, #6
 80172cc:	f7e8 ff80 	bl	80001d0 <memchr>
 80172d0:	2800      	cmp	r0, #0
 80172d2:	d03f      	beq.n	8017354 <_vfiprintf_r+0x22c>
 80172d4:	4b29      	ldr	r3, [pc, #164]	; (801737c <_vfiprintf_r+0x254>)
 80172d6:	bb1b      	cbnz	r3, 8017320 <_vfiprintf_r+0x1f8>
 80172d8:	9b03      	ldr	r3, [sp, #12]
 80172da:	3307      	adds	r3, #7
 80172dc:	f023 0307 	bic.w	r3, r3, #7
 80172e0:	3308      	adds	r3, #8
 80172e2:	9303      	str	r3, [sp, #12]
 80172e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172e6:	443b      	add	r3, r7
 80172e8:	9309      	str	r3, [sp, #36]	; 0x24
 80172ea:	e767      	b.n	80171bc <_vfiprintf_r+0x94>
 80172ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80172f0:	460c      	mov	r4, r1
 80172f2:	2001      	movs	r0, #1
 80172f4:	e7a5      	b.n	8017242 <_vfiprintf_r+0x11a>
 80172f6:	2300      	movs	r3, #0
 80172f8:	3401      	adds	r4, #1
 80172fa:	9305      	str	r3, [sp, #20]
 80172fc:	4619      	mov	r1, r3
 80172fe:	f04f 0c0a 	mov.w	ip, #10
 8017302:	4620      	mov	r0, r4
 8017304:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017308:	3a30      	subs	r2, #48	; 0x30
 801730a:	2a09      	cmp	r2, #9
 801730c:	d903      	bls.n	8017316 <_vfiprintf_r+0x1ee>
 801730e:	2b00      	cmp	r3, #0
 8017310:	d0c5      	beq.n	801729e <_vfiprintf_r+0x176>
 8017312:	9105      	str	r1, [sp, #20]
 8017314:	e7c3      	b.n	801729e <_vfiprintf_r+0x176>
 8017316:	fb0c 2101 	mla	r1, ip, r1, r2
 801731a:	4604      	mov	r4, r0
 801731c:	2301      	movs	r3, #1
 801731e:	e7f0      	b.n	8017302 <_vfiprintf_r+0x1da>
 8017320:	ab03      	add	r3, sp, #12
 8017322:	9300      	str	r3, [sp, #0]
 8017324:	462a      	mov	r2, r5
 8017326:	4b16      	ldr	r3, [pc, #88]	; (8017380 <_vfiprintf_r+0x258>)
 8017328:	a904      	add	r1, sp, #16
 801732a:	4630      	mov	r0, r6
 801732c:	f3af 8000 	nop.w
 8017330:	4607      	mov	r7, r0
 8017332:	1c78      	adds	r0, r7, #1
 8017334:	d1d6      	bne.n	80172e4 <_vfiprintf_r+0x1bc>
 8017336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017338:	07d9      	lsls	r1, r3, #31
 801733a:	d405      	bmi.n	8017348 <_vfiprintf_r+0x220>
 801733c:	89ab      	ldrh	r3, [r5, #12]
 801733e:	059a      	lsls	r2, r3, #22
 8017340:	d402      	bmi.n	8017348 <_vfiprintf_r+0x220>
 8017342:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017344:	f7ea fab0 	bl	80018a8 <__retarget_lock_release_recursive>
 8017348:	89ab      	ldrh	r3, [r5, #12]
 801734a:	065b      	lsls	r3, r3, #25
 801734c:	f53f af12 	bmi.w	8017174 <_vfiprintf_r+0x4c>
 8017350:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017352:	e711      	b.n	8017178 <_vfiprintf_r+0x50>
 8017354:	ab03      	add	r3, sp, #12
 8017356:	9300      	str	r3, [sp, #0]
 8017358:	462a      	mov	r2, r5
 801735a:	4b09      	ldr	r3, [pc, #36]	; (8017380 <_vfiprintf_r+0x258>)
 801735c:	a904      	add	r1, sp, #16
 801735e:	4630      	mov	r0, r6
 8017360:	f000 f880 	bl	8017464 <_printf_i>
 8017364:	e7e4      	b.n	8017330 <_vfiprintf_r+0x208>
 8017366:	bf00      	nop
 8017368:	0801b110 	.word	0x0801b110
 801736c:	0801b130 	.word	0x0801b130
 8017370:	0801b0f0 	.word	0x0801b0f0
 8017374:	0801b206 	.word	0x0801b206
 8017378:	0801b210 	.word	0x0801b210
 801737c:	00000000 	.word	0x00000000
 8017380:	08017103 	.word	0x08017103
 8017384:	0801b20c 	.word	0x0801b20c

08017388 <_printf_common>:
 8017388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801738c:	4616      	mov	r6, r2
 801738e:	4699      	mov	r9, r3
 8017390:	688a      	ldr	r2, [r1, #8]
 8017392:	690b      	ldr	r3, [r1, #16]
 8017394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017398:	4293      	cmp	r3, r2
 801739a:	bfb8      	it	lt
 801739c:	4613      	movlt	r3, r2
 801739e:	6033      	str	r3, [r6, #0]
 80173a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80173a4:	4607      	mov	r7, r0
 80173a6:	460c      	mov	r4, r1
 80173a8:	b10a      	cbz	r2, 80173ae <_printf_common+0x26>
 80173aa:	3301      	adds	r3, #1
 80173ac:	6033      	str	r3, [r6, #0]
 80173ae:	6823      	ldr	r3, [r4, #0]
 80173b0:	0699      	lsls	r1, r3, #26
 80173b2:	bf42      	ittt	mi
 80173b4:	6833      	ldrmi	r3, [r6, #0]
 80173b6:	3302      	addmi	r3, #2
 80173b8:	6033      	strmi	r3, [r6, #0]
 80173ba:	6825      	ldr	r5, [r4, #0]
 80173bc:	f015 0506 	ands.w	r5, r5, #6
 80173c0:	d106      	bne.n	80173d0 <_printf_common+0x48>
 80173c2:	f104 0a19 	add.w	sl, r4, #25
 80173c6:	68e3      	ldr	r3, [r4, #12]
 80173c8:	6832      	ldr	r2, [r6, #0]
 80173ca:	1a9b      	subs	r3, r3, r2
 80173cc:	42ab      	cmp	r3, r5
 80173ce:	dc26      	bgt.n	801741e <_printf_common+0x96>
 80173d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80173d4:	1e13      	subs	r3, r2, #0
 80173d6:	6822      	ldr	r2, [r4, #0]
 80173d8:	bf18      	it	ne
 80173da:	2301      	movne	r3, #1
 80173dc:	0692      	lsls	r2, r2, #26
 80173de:	d42b      	bmi.n	8017438 <_printf_common+0xb0>
 80173e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80173e4:	4649      	mov	r1, r9
 80173e6:	4638      	mov	r0, r7
 80173e8:	47c0      	blx	r8
 80173ea:	3001      	adds	r0, #1
 80173ec:	d01e      	beq.n	801742c <_printf_common+0xa4>
 80173ee:	6823      	ldr	r3, [r4, #0]
 80173f0:	68e5      	ldr	r5, [r4, #12]
 80173f2:	6832      	ldr	r2, [r6, #0]
 80173f4:	f003 0306 	and.w	r3, r3, #6
 80173f8:	2b04      	cmp	r3, #4
 80173fa:	bf08      	it	eq
 80173fc:	1aad      	subeq	r5, r5, r2
 80173fe:	68a3      	ldr	r3, [r4, #8]
 8017400:	6922      	ldr	r2, [r4, #16]
 8017402:	bf0c      	ite	eq
 8017404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017408:	2500      	movne	r5, #0
 801740a:	4293      	cmp	r3, r2
 801740c:	bfc4      	itt	gt
 801740e:	1a9b      	subgt	r3, r3, r2
 8017410:	18ed      	addgt	r5, r5, r3
 8017412:	2600      	movs	r6, #0
 8017414:	341a      	adds	r4, #26
 8017416:	42b5      	cmp	r5, r6
 8017418:	d11a      	bne.n	8017450 <_printf_common+0xc8>
 801741a:	2000      	movs	r0, #0
 801741c:	e008      	b.n	8017430 <_printf_common+0xa8>
 801741e:	2301      	movs	r3, #1
 8017420:	4652      	mov	r2, sl
 8017422:	4649      	mov	r1, r9
 8017424:	4638      	mov	r0, r7
 8017426:	47c0      	blx	r8
 8017428:	3001      	adds	r0, #1
 801742a:	d103      	bne.n	8017434 <_printf_common+0xac>
 801742c:	f04f 30ff 	mov.w	r0, #4294967295
 8017430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017434:	3501      	adds	r5, #1
 8017436:	e7c6      	b.n	80173c6 <_printf_common+0x3e>
 8017438:	18e1      	adds	r1, r4, r3
 801743a:	1c5a      	adds	r2, r3, #1
 801743c:	2030      	movs	r0, #48	; 0x30
 801743e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017442:	4422      	add	r2, r4
 8017444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801744c:	3302      	adds	r3, #2
 801744e:	e7c7      	b.n	80173e0 <_printf_common+0x58>
 8017450:	2301      	movs	r3, #1
 8017452:	4622      	mov	r2, r4
 8017454:	4649      	mov	r1, r9
 8017456:	4638      	mov	r0, r7
 8017458:	47c0      	blx	r8
 801745a:	3001      	adds	r0, #1
 801745c:	d0e6      	beq.n	801742c <_printf_common+0xa4>
 801745e:	3601      	adds	r6, #1
 8017460:	e7d9      	b.n	8017416 <_printf_common+0x8e>
	...

08017464 <_printf_i>:
 8017464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017468:	460c      	mov	r4, r1
 801746a:	4691      	mov	r9, r2
 801746c:	7e27      	ldrb	r7, [r4, #24]
 801746e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017470:	2f78      	cmp	r7, #120	; 0x78
 8017472:	4680      	mov	r8, r0
 8017474:	469a      	mov	sl, r3
 8017476:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801747a:	d807      	bhi.n	801748c <_printf_i+0x28>
 801747c:	2f62      	cmp	r7, #98	; 0x62
 801747e:	d80a      	bhi.n	8017496 <_printf_i+0x32>
 8017480:	2f00      	cmp	r7, #0
 8017482:	f000 80d8 	beq.w	8017636 <_printf_i+0x1d2>
 8017486:	2f58      	cmp	r7, #88	; 0x58
 8017488:	f000 80a3 	beq.w	80175d2 <_printf_i+0x16e>
 801748c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017494:	e03a      	b.n	801750c <_printf_i+0xa8>
 8017496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801749a:	2b15      	cmp	r3, #21
 801749c:	d8f6      	bhi.n	801748c <_printf_i+0x28>
 801749e:	a001      	add	r0, pc, #4	; (adr r0, 80174a4 <_printf_i+0x40>)
 80174a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80174a4:	080174fd 	.word	0x080174fd
 80174a8:	08017511 	.word	0x08017511
 80174ac:	0801748d 	.word	0x0801748d
 80174b0:	0801748d 	.word	0x0801748d
 80174b4:	0801748d 	.word	0x0801748d
 80174b8:	0801748d 	.word	0x0801748d
 80174bc:	08017511 	.word	0x08017511
 80174c0:	0801748d 	.word	0x0801748d
 80174c4:	0801748d 	.word	0x0801748d
 80174c8:	0801748d 	.word	0x0801748d
 80174cc:	0801748d 	.word	0x0801748d
 80174d0:	0801761d 	.word	0x0801761d
 80174d4:	08017541 	.word	0x08017541
 80174d8:	080175ff 	.word	0x080175ff
 80174dc:	0801748d 	.word	0x0801748d
 80174e0:	0801748d 	.word	0x0801748d
 80174e4:	0801763f 	.word	0x0801763f
 80174e8:	0801748d 	.word	0x0801748d
 80174ec:	08017541 	.word	0x08017541
 80174f0:	0801748d 	.word	0x0801748d
 80174f4:	0801748d 	.word	0x0801748d
 80174f8:	08017607 	.word	0x08017607
 80174fc:	680b      	ldr	r3, [r1, #0]
 80174fe:	1d1a      	adds	r2, r3, #4
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	600a      	str	r2, [r1, #0]
 8017504:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801750c:	2301      	movs	r3, #1
 801750e:	e0a3      	b.n	8017658 <_printf_i+0x1f4>
 8017510:	6825      	ldr	r5, [r4, #0]
 8017512:	6808      	ldr	r0, [r1, #0]
 8017514:	062e      	lsls	r6, r5, #24
 8017516:	f100 0304 	add.w	r3, r0, #4
 801751a:	d50a      	bpl.n	8017532 <_printf_i+0xce>
 801751c:	6805      	ldr	r5, [r0, #0]
 801751e:	600b      	str	r3, [r1, #0]
 8017520:	2d00      	cmp	r5, #0
 8017522:	da03      	bge.n	801752c <_printf_i+0xc8>
 8017524:	232d      	movs	r3, #45	; 0x2d
 8017526:	426d      	negs	r5, r5
 8017528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801752c:	485e      	ldr	r0, [pc, #376]	; (80176a8 <_printf_i+0x244>)
 801752e:	230a      	movs	r3, #10
 8017530:	e019      	b.n	8017566 <_printf_i+0x102>
 8017532:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017536:	6805      	ldr	r5, [r0, #0]
 8017538:	600b      	str	r3, [r1, #0]
 801753a:	bf18      	it	ne
 801753c:	b22d      	sxthne	r5, r5
 801753e:	e7ef      	b.n	8017520 <_printf_i+0xbc>
 8017540:	680b      	ldr	r3, [r1, #0]
 8017542:	6825      	ldr	r5, [r4, #0]
 8017544:	1d18      	adds	r0, r3, #4
 8017546:	6008      	str	r0, [r1, #0]
 8017548:	0628      	lsls	r0, r5, #24
 801754a:	d501      	bpl.n	8017550 <_printf_i+0xec>
 801754c:	681d      	ldr	r5, [r3, #0]
 801754e:	e002      	b.n	8017556 <_printf_i+0xf2>
 8017550:	0669      	lsls	r1, r5, #25
 8017552:	d5fb      	bpl.n	801754c <_printf_i+0xe8>
 8017554:	881d      	ldrh	r5, [r3, #0]
 8017556:	4854      	ldr	r0, [pc, #336]	; (80176a8 <_printf_i+0x244>)
 8017558:	2f6f      	cmp	r7, #111	; 0x6f
 801755a:	bf0c      	ite	eq
 801755c:	2308      	moveq	r3, #8
 801755e:	230a      	movne	r3, #10
 8017560:	2100      	movs	r1, #0
 8017562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017566:	6866      	ldr	r6, [r4, #4]
 8017568:	60a6      	str	r6, [r4, #8]
 801756a:	2e00      	cmp	r6, #0
 801756c:	bfa2      	ittt	ge
 801756e:	6821      	ldrge	r1, [r4, #0]
 8017570:	f021 0104 	bicge.w	r1, r1, #4
 8017574:	6021      	strge	r1, [r4, #0]
 8017576:	b90d      	cbnz	r5, 801757c <_printf_i+0x118>
 8017578:	2e00      	cmp	r6, #0
 801757a:	d04d      	beq.n	8017618 <_printf_i+0x1b4>
 801757c:	4616      	mov	r6, r2
 801757e:	fbb5 f1f3 	udiv	r1, r5, r3
 8017582:	fb03 5711 	mls	r7, r3, r1, r5
 8017586:	5dc7      	ldrb	r7, [r0, r7]
 8017588:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801758c:	462f      	mov	r7, r5
 801758e:	42bb      	cmp	r3, r7
 8017590:	460d      	mov	r5, r1
 8017592:	d9f4      	bls.n	801757e <_printf_i+0x11a>
 8017594:	2b08      	cmp	r3, #8
 8017596:	d10b      	bne.n	80175b0 <_printf_i+0x14c>
 8017598:	6823      	ldr	r3, [r4, #0]
 801759a:	07df      	lsls	r7, r3, #31
 801759c:	d508      	bpl.n	80175b0 <_printf_i+0x14c>
 801759e:	6923      	ldr	r3, [r4, #16]
 80175a0:	6861      	ldr	r1, [r4, #4]
 80175a2:	4299      	cmp	r1, r3
 80175a4:	bfde      	ittt	le
 80175a6:	2330      	movle	r3, #48	; 0x30
 80175a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80175ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80175b0:	1b92      	subs	r2, r2, r6
 80175b2:	6122      	str	r2, [r4, #16]
 80175b4:	f8cd a000 	str.w	sl, [sp]
 80175b8:	464b      	mov	r3, r9
 80175ba:	aa03      	add	r2, sp, #12
 80175bc:	4621      	mov	r1, r4
 80175be:	4640      	mov	r0, r8
 80175c0:	f7ff fee2 	bl	8017388 <_printf_common>
 80175c4:	3001      	adds	r0, #1
 80175c6:	d14c      	bne.n	8017662 <_printf_i+0x1fe>
 80175c8:	f04f 30ff 	mov.w	r0, #4294967295
 80175cc:	b004      	add	sp, #16
 80175ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175d2:	4835      	ldr	r0, [pc, #212]	; (80176a8 <_printf_i+0x244>)
 80175d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80175d8:	6823      	ldr	r3, [r4, #0]
 80175da:	680e      	ldr	r6, [r1, #0]
 80175dc:	061f      	lsls	r7, r3, #24
 80175de:	f856 5b04 	ldr.w	r5, [r6], #4
 80175e2:	600e      	str	r6, [r1, #0]
 80175e4:	d514      	bpl.n	8017610 <_printf_i+0x1ac>
 80175e6:	07d9      	lsls	r1, r3, #31
 80175e8:	bf44      	itt	mi
 80175ea:	f043 0320 	orrmi.w	r3, r3, #32
 80175ee:	6023      	strmi	r3, [r4, #0]
 80175f0:	b91d      	cbnz	r5, 80175fa <_printf_i+0x196>
 80175f2:	6823      	ldr	r3, [r4, #0]
 80175f4:	f023 0320 	bic.w	r3, r3, #32
 80175f8:	6023      	str	r3, [r4, #0]
 80175fa:	2310      	movs	r3, #16
 80175fc:	e7b0      	b.n	8017560 <_printf_i+0xfc>
 80175fe:	6823      	ldr	r3, [r4, #0]
 8017600:	f043 0320 	orr.w	r3, r3, #32
 8017604:	6023      	str	r3, [r4, #0]
 8017606:	2378      	movs	r3, #120	; 0x78
 8017608:	4828      	ldr	r0, [pc, #160]	; (80176ac <_printf_i+0x248>)
 801760a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801760e:	e7e3      	b.n	80175d8 <_printf_i+0x174>
 8017610:	065e      	lsls	r6, r3, #25
 8017612:	bf48      	it	mi
 8017614:	b2ad      	uxthmi	r5, r5
 8017616:	e7e6      	b.n	80175e6 <_printf_i+0x182>
 8017618:	4616      	mov	r6, r2
 801761a:	e7bb      	b.n	8017594 <_printf_i+0x130>
 801761c:	680b      	ldr	r3, [r1, #0]
 801761e:	6826      	ldr	r6, [r4, #0]
 8017620:	6960      	ldr	r0, [r4, #20]
 8017622:	1d1d      	adds	r5, r3, #4
 8017624:	600d      	str	r5, [r1, #0]
 8017626:	0635      	lsls	r5, r6, #24
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	d501      	bpl.n	8017630 <_printf_i+0x1cc>
 801762c:	6018      	str	r0, [r3, #0]
 801762e:	e002      	b.n	8017636 <_printf_i+0x1d2>
 8017630:	0671      	lsls	r1, r6, #25
 8017632:	d5fb      	bpl.n	801762c <_printf_i+0x1c8>
 8017634:	8018      	strh	r0, [r3, #0]
 8017636:	2300      	movs	r3, #0
 8017638:	6123      	str	r3, [r4, #16]
 801763a:	4616      	mov	r6, r2
 801763c:	e7ba      	b.n	80175b4 <_printf_i+0x150>
 801763e:	680b      	ldr	r3, [r1, #0]
 8017640:	1d1a      	adds	r2, r3, #4
 8017642:	600a      	str	r2, [r1, #0]
 8017644:	681e      	ldr	r6, [r3, #0]
 8017646:	6862      	ldr	r2, [r4, #4]
 8017648:	2100      	movs	r1, #0
 801764a:	4630      	mov	r0, r6
 801764c:	f7e8 fdc0 	bl	80001d0 <memchr>
 8017650:	b108      	cbz	r0, 8017656 <_printf_i+0x1f2>
 8017652:	1b80      	subs	r0, r0, r6
 8017654:	6060      	str	r0, [r4, #4]
 8017656:	6863      	ldr	r3, [r4, #4]
 8017658:	6123      	str	r3, [r4, #16]
 801765a:	2300      	movs	r3, #0
 801765c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017660:	e7a8      	b.n	80175b4 <_printf_i+0x150>
 8017662:	6923      	ldr	r3, [r4, #16]
 8017664:	4632      	mov	r2, r6
 8017666:	4649      	mov	r1, r9
 8017668:	4640      	mov	r0, r8
 801766a:	47d0      	blx	sl
 801766c:	3001      	adds	r0, #1
 801766e:	d0ab      	beq.n	80175c8 <_printf_i+0x164>
 8017670:	6823      	ldr	r3, [r4, #0]
 8017672:	079b      	lsls	r3, r3, #30
 8017674:	d413      	bmi.n	801769e <_printf_i+0x23a>
 8017676:	68e0      	ldr	r0, [r4, #12]
 8017678:	9b03      	ldr	r3, [sp, #12]
 801767a:	4298      	cmp	r0, r3
 801767c:	bfb8      	it	lt
 801767e:	4618      	movlt	r0, r3
 8017680:	e7a4      	b.n	80175cc <_printf_i+0x168>
 8017682:	2301      	movs	r3, #1
 8017684:	4632      	mov	r2, r6
 8017686:	4649      	mov	r1, r9
 8017688:	4640      	mov	r0, r8
 801768a:	47d0      	blx	sl
 801768c:	3001      	adds	r0, #1
 801768e:	d09b      	beq.n	80175c8 <_printf_i+0x164>
 8017690:	3501      	adds	r5, #1
 8017692:	68e3      	ldr	r3, [r4, #12]
 8017694:	9903      	ldr	r1, [sp, #12]
 8017696:	1a5b      	subs	r3, r3, r1
 8017698:	42ab      	cmp	r3, r5
 801769a:	dcf2      	bgt.n	8017682 <_printf_i+0x21e>
 801769c:	e7eb      	b.n	8017676 <_printf_i+0x212>
 801769e:	2500      	movs	r5, #0
 80176a0:	f104 0619 	add.w	r6, r4, #25
 80176a4:	e7f5      	b.n	8017692 <_printf_i+0x22e>
 80176a6:	bf00      	nop
 80176a8:	0801b217 	.word	0x0801b217
 80176ac:	0801b228 	.word	0x0801b228

080176b0 <_read_r>:
 80176b0:	b538      	push	{r3, r4, r5, lr}
 80176b2:	4d07      	ldr	r5, [pc, #28]	; (80176d0 <_read_r+0x20>)
 80176b4:	4604      	mov	r4, r0
 80176b6:	4608      	mov	r0, r1
 80176b8:	4611      	mov	r1, r2
 80176ba:	2200      	movs	r2, #0
 80176bc:	602a      	str	r2, [r5, #0]
 80176be:	461a      	mov	r2, r3
 80176c0:	f7e9 ff34 	bl	800152c <_read>
 80176c4:	1c43      	adds	r3, r0, #1
 80176c6:	d102      	bne.n	80176ce <_read_r+0x1e>
 80176c8:	682b      	ldr	r3, [r5, #0]
 80176ca:	b103      	cbz	r3, 80176ce <_read_r+0x1e>
 80176cc:	6023      	str	r3, [r4, #0]
 80176ce:	bd38      	pop	{r3, r4, r5, pc}
 80176d0:	2000d3d0 	.word	0x2000d3d0

080176d4 <__swbuf_r>:
 80176d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176d6:	460e      	mov	r6, r1
 80176d8:	4614      	mov	r4, r2
 80176da:	4605      	mov	r5, r0
 80176dc:	b118      	cbz	r0, 80176e6 <__swbuf_r+0x12>
 80176de:	6983      	ldr	r3, [r0, #24]
 80176e0:	b90b      	cbnz	r3, 80176e6 <__swbuf_r+0x12>
 80176e2:	f7ff f917 	bl	8016914 <__sinit>
 80176e6:	4b21      	ldr	r3, [pc, #132]	; (801776c <__swbuf_r+0x98>)
 80176e8:	429c      	cmp	r4, r3
 80176ea:	d12b      	bne.n	8017744 <__swbuf_r+0x70>
 80176ec:	686c      	ldr	r4, [r5, #4]
 80176ee:	69a3      	ldr	r3, [r4, #24]
 80176f0:	60a3      	str	r3, [r4, #8]
 80176f2:	89a3      	ldrh	r3, [r4, #12]
 80176f4:	071a      	lsls	r2, r3, #28
 80176f6:	d52f      	bpl.n	8017758 <__swbuf_r+0x84>
 80176f8:	6923      	ldr	r3, [r4, #16]
 80176fa:	b36b      	cbz	r3, 8017758 <__swbuf_r+0x84>
 80176fc:	6923      	ldr	r3, [r4, #16]
 80176fe:	6820      	ldr	r0, [r4, #0]
 8017700:	1ac0      	subs	r0, r0, r3
 8017702:	6963      	ldr	r3, [r4, #20]
 8017704:	b2f6      	uxtb	r6, r6
 8017706:	4283      	cmp	r3, r0
 8017708:	4637      	mov	r7, r6
 801770a:	dc04      	bgt.n	8017716 <__swbuf_r+0x42>
 801770c:	4621      	mov	r1, r4
 801770e:	4628      	mov	r0, r5
 8017710:	f7ff fc74 	bl	8016ffc <_fflush_r>
 8017714:	bb30      	cbnz	r0, 8017764 <__swbuf_r+0x90>
 8017716:	68a3      	ldr	r3, [r4, #8]
 8017718:	3b01      	subs	r3, #1
 801771a:	60a3      	str	r3, [r4, #8]
 801771c:	6823      	ldr	r3, [r4, #0]
 801771e:	1c5a      	adds	r2, r3, #1
 8017720:	6022      	str	r2, [r4, #0]
 8017722:	701e      	strb	r6, [r3, #0]
 8017724:	6963      	ldr	r3, [r4, #20]
 8017726:	3001      	adds	r0, #1
 8017728:	4283      	cmp	r3, r0
 801772a:	d004      	beq.n	8017736 <__swbuf_r+0x62>
 801772c:	89a3      	ldrh	r3, [r4, #12]
 801772e:	07db      	lsls	r3, r3, #31
 8017730:	d506      	bpl.n	8017740 <__swbuf_r+0x6c>
 8017732:	2e0a      	cmp	r6, #10
 8017734:	d104      	bne.n	8017740 <__swbuf_r+0x6c>
 8017736:	4621      	mov	r1, r4
 8017738:	4628      	mov	r0, r5
 801773a:	f7ff fc5f 	bl	8016ffc <_fflush_r>
 801773e:	b988      	cbnz	r0, 8017764 <__swbuf_r+0x90>
 8017740:	4638      	mov	r0, r7
 8017742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017744:	4b0a      	ldr	r3, [pc, #40]	; (8017770 <__swbuf_r+0x9c>)
 8017746:	429c      	cmp	r4, r3
 8017748:	d101      	bne.n	801774e <__swbuf_r+0x7a>
 801774a:	68ac      	ldr	r4, [r5, #8]
 801774c:	e7cf      	b.n	80176ee <__swbuf_r+0x1a>
 801774e:	4b09      	ldr	r3, [pc, #36]	; (8017774 <__swbuf_r+0xa0>)
 8017750:	429c      	cmp	r4, r3
 8017752:	bf08      	it	eq
 8017754:	68ec      	ldreq	r4, [r5, #12]
 8017756:	e7ca      	b.n	80176ee <__swbuf_r+0x1a>
 8017758:	4621      	mov	r1, r4
 801775a:	4628      	mov	r0, r5
 801775c:	f000 f80c 	bl	8017778 <__swsetup_r>
 8017760:	2800      	cmp	r0, #0
 8017762:	d0cb      	beq.n	80176fc <__swbuf_r+0x28>
 8017764:	f04f 37ff 	mov.w	r7, #4294967295
 8017768:	e7ea      	b.n	8017740 <__swbuf_r+0x6c>
 801776a:	bf00      	nop
 801776c:	0801b110 	.word	0x0801b110
 8017770:	0801b130 	.word	0x0801b130
 8017774:	0801b0f0 	.word	0x0801b0f0

08017778 <__swsetup_r>:
 8017778:	4b32      	ldr	r3, [pc, #200]	; (8017844 <__swsetup_r+0xcc>)
 801777a:	b570      	push	{r4, r5, r6, lr}
 801777c:	681d      	ldr	r5, [r3, #0]
 801777e:	4606      	mov	r6, r0
 8017780:	460c      	mov	r4, r1
 8017782:	b125      	cbz	r5, 801778e <__swsetup_r+0x16>
 8017784:	69ab      	ldr	r3, [r5, #24]
 8017786:	b913      	cbnz	r3, 801778e <__swsetup_r+0x16>
 8017788:	4628      	mov	r0, r5
 801778a:	f7ff f8c3 	bl	8016914 <__sinit>
 801778e:	4b2e      	ldr	r3, [pc, #184]	; (8017848 <__swsetup_r+0xd0>)
 8017790:	429c      	cmp	r4, r3
 8017792:	d10f      	bne.n	80177b4 <__swsetup_r+0x3c>
 8017794:	686c      	ldr	r4, [r5, #4]
 8017796:	89a3      	ldrh	r3, [r4, #12]
 8017798:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801779c:	0719      	lsls	r1, r3, #28
 801779e:	d42c      	bmi.n	80177fa <__swsetup_r+0x82>
 80177a0:	06dd      	lsls	r5, r3, #27
 80177a2:	d411      	bmi.n	80177c8 <__swsetup_r+0x50>
 80177a4:	2309      	movs	r3, #9
 80177a6:	6033      	str	r3, [r6, #0]
 80177a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80177ac:	81a3      	strh	r3, [r4, #12]
 80177ae:	f04f 30ff 	mov.w	r0, #4294967295
 80177b2:	e03e      	b.n	8017832 <__swsetup_r+0xba>
 80177b4:	4b25      	ldr	r3, [pc, #148]	; (801784c <__swsetup_r+0xd4>)
 80177b6:	429c      	cmp	r4, r3
 80177b8:	d101      	bne.n	80177be <__swsetup_r+0x46>
 80177ba:	68ac      	ldr	r4, [r5, #8]
 80177bc:	e7eb      	b.n	8017796 <__swsetup_r+0x1e>
 80177be:	4b24      	ldr	r3, [pc, #144]	; (8017850 <__swsetup_r+0xd8>)
 80177c0:	429c      	cmp	r4, r3
 80177c2:	bf08      	it	eq
 80177c4:	68ec      	ldreq	r4, [r5, #12]
 80177c6:	e7e6      	b.n	8017796 <__swsetup_r+0x1e>
 80177c8:	0758      	lsls	r0, r3, #29
 80177ca:	d512      	bpl.n	80177f2 <__swsetup_r+0x7a>
 80177cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80177ce:	b141      	cbz	r1, 80177e2 <__swsetup_r+0x6a>
 80177d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80177d4:	4299      	cmp	r1, r3
 80177d6:	d002      	beq.n	80177de <__swsetup_r+0x66>
 80177d8:	4630      	mov	r0, r6
 80177da:	f7ff f989 	bl	8016af0 <_free_r>
 80177de:	2300      	movs	r3, #0
 80177e0:	6363      	str	r3, [r4, #52]	; 0x34
 80177e2:	89a3      	ldrh	r3, [r4, #12]
 80177e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80177e8:	81a3      	strh	r3, [r4, #12]
 80177ea:	2300      	movs	r3, #0
 80177ec:	6063      	str	r3, [r4, #4]
 80177ee:	6923      	ldr	r3, [r4, #16]
 80177f0:	6023      	str	r3, [r4, #0]
 80177f2:	89a3      	ldrh	r3, [r4, #12]
 80177f4:	f043 0308 	orr.w	r3, r3, #8
 80177f8:	81a3      	strh	r3, [r4, #12]
 80177fa:	6923      	ldr	r3, [r4, #16]
 80177fc:	b94b      	cbnz	r3, 8017812 <__swsetup_r+0x9a>
 80177fe:	89a3      	ldrh	r3, [r4, #12]
 8017800:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017808:	d003      	beq.n	8017812 <__swsetup_r+0x9a>
 801780a:	4621      	mov	r1, r4
 801780c:	4630      	mov	r0, r6
 801780e:	f000 f84d 	bl	80178ac <__smakebuf_r>
 8017812:	89a0      	ldrh	r0, [r4, #12]
 8017814:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017818:	f010 0301 	ands.w	r3, r0, #1
 801781c:	d00a      	beq.n	8017834 <__swsetup_r+0xbc>
 801781e:	2300      	movs	r3, #0
 8017820:	60a3      	str	r3, [r4, #8]
 8017822:	6963      	ldr	r3, [r4, #20]
 8017824:	425b      	negs	r3, r3
 8017826:	61a3      	str	r3, [r4, #24]
 8017828:	6923      	ldr	r3, [r4, #16]
 801782a:	b943      	cbnz	r3, 801783e <__swsetup_r+0xc6>
 801782c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017830:	d1ba      	bne.n	80177a8 <__swsetup_r+0x30>
 8017832:	bd70      	pop	{r4, r5, r6, pc}
 8017834:	0781      	lsls	r1, r0, #30
 8017836:	bf58      	it	pl
 8017838:	6963      	ldrpl	r3, [r4, #20]
 801783a:	60a3      	str	r3, [r4, #8]
 801783c:	e7f4      	b.n	8017828 <__swsetup_r+0xb0>
 801783e:	2000      	movs	r0, #0
 8017840:	e7f7      	b.n	8017832 <__swsetup_r+0xba>
 8017842:	bf00      	nop
 8017844:	20000020 	.word	0x20000020
 8017848:	0801b110 	.word	0x0801b110
 801784c:	0801b130 	.word	0x0801b130
 8017850:	0801b0f0 	.word	0x0801b0f0

08017854 <abort>:
 8017854:	b508      	push	{r3, lr}
 8017856:	2006      	movs	r0, #6
 8017858:	f000 f890 	bl	801797c <raise>
 801785c:	2001      	movs	r0, #1
 801785e:	f7e9 fe5b 	bl	8001518 <_exit>

08017862 <__swhatbuf_r>:
 8017862:	b570      	push	{r4, r5, r6, lr}
 8017864:	460e      	mov	r6, r1
 8017866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801786a:	2900      	cmp	r1, #0
 801786c:	b096      	sub	sp, #88	; 0x58
 801786e:	4614      	mov	r4, r2
 8017870:	461d      	mov	r5, r3
 8017872:	da07      	bge.n	8017884 <__swhatbuf_r+0x22>
 8017874:	2300      	movs	r3, #0
 8017876:	602b      	str	r3, [r5, #0]
 8017878:	89b3      	ldrh	r3, [r6, #12]
 801787a:	061a      	lsls	r2, r3, #24
 801787c:	d410      	bmi.n	80178a0 <__swhatbuf_r+0x3e>
 801787e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017882:	e00e      	b.n	80178a2 <__swhatbuf_r+0x40>
 8017884:	466a      	mov	r2, sp
 8017886:	f000 f895 	bl	80179b4 <_fstat_r>
 801788a:	2800      	cmp	r0, #0
 801788c:	dbf2      	blt.n	8017874 <__swhatbuf_r+0x12>
 801788e:	9a01      	ldr	r2, [sp, #4]
 8017890:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017894:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017898:	425a      	negs	r2, r3
 801789a:	415a      	adcs	r2, r3
 801789c:	602a      	str	r2, [r5, #0]
 801789e:	e7ee      	b.n	801787e <__swhatbuf_r+0x1c>
 80178a0:	2340      	movs	r3, #64	; 0x40
 80178a2:	2000      	movs	r0, #0
 80178a4:	6023      	str	r3, [r4, #0]
 80178a6:	b016      	add	sp, #88	; 0x58
 80178a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080178ac <__smakebuf_r>:
 80178ac:	898b      	ldrh	r3, [r1, #12]
 80178ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80178b0:	079d      	lsls	r5, r3, #30
 80178b2:	4606      	mov	r6, r0
 80178b4:	460c      	mov	r4, r1
 80178b6:	d507      	bpl.n	80178c8 <__smakebuf_r+0x1c>
 80178b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80178bc:	6023      	str	r3, [r4, #0]
 80178be:	6123      	str	r3, [r4, #16]
 80178c0:	2301      	movs	r3, #1
 80178c2:	6163      	str	r3, [r4, #20]
 80178c4:	b002      	add	sp, #8
 80178c6:	bd70      	pop	{r4, r5, r6, pc}
 80178c8:	ab01      	add	r3, sp, #4
 80178ca:	466a      	mov	r2, sp
 80178cc:	f7ff ffc9 	bl	8017862 <__swhatbuf_r>
 80178d0:	9900      	ldr	r1, [sp, #0]
 80178d2:	4605      	mov	r5, r0
 80178d4:	4630      	mov	r0, r6
 80178d6:	f7ff f95b 	bl	8016b90 <_malloc_r>
 80178da:	b948      	cbnz	r0, 80178f0 <__smakebuf_r+0x44>
 80178dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178e0:	059a      	lsls	r2, r3, #22
 80178e2:	d4ef      	bmi.n	80178c4 <__smakebuf_r+0x18>
 80178e4:	f023 0303 	bic.w	r3, r3, #3
 80178e8:	f043 0302 	orr.w	r3, r3, #2
 80178ec:	81a3      	strh	r3, [r4, #12]
 80178ee:	e7e3      	b.n	80178b8 <__smakebuf_r+0xc>
 80178f0:	4b0d      	ldr	r3, [pc, #52]	; (8017928 <__smakebuf_r+0x7c>)
 80178f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80178f4:	89a3      	ldrh	r3, [r4, #12]
 80178f6:	6020      	str	r0, [r4, #0]
 80178f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80178fc:	81a3      	strh	r3, [r4, #12]
 80178fe:	9b00      	ldr	r3, [sp, #0]
 8017900:	6163      	str	r3, [r4, #20]
 8017902:	9b01      	ldr	r3, [sp, #4]
 8017904:	6120      	str	r0, [r4, #16]
 8017906:	b15b      	cbz	r3, 8017920 <__smakebuf_r+0x74>
 8017908:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801790c:	4630      	mov	r0, r6
 801790e:	f000 f863 	bl	80179d8 <_isatty_r>
 8017912:	b128      	cbz	r0, 8017920 <__smakebuf_r+0x74>
 8017914:	89a3      	ldrh	r3, [r4, #12]
 8017916:	f023 0303 	bic.w	r3, r3, #3
 801791a:	f043 0301 	orr.w	r3, r3, #1
 801791e:	81a3      	strh	r3, [r4, #12]
 8017920:	89a0      	ldrh	r0, [r4, #12]
 8017922:	4305      	orrs	r5, r0
 8017924:	81a5      	strh	r5, [r4, #12]
 8017926:	e7cd      	b.n	80178c4 <__smakebuf_r+0x18>
 8017928:	080168ad 	.word	0x080168ad

0801792c <_raise_r>:
 801792c:	291f      	cmp	r1, #31
 801792e:	b538      	push	{r3, r4, r5, lr}
 8017930:	4604      	mov	r4, r0
 8017932:	460d      	mov	r5, r1
 8017934:	d904      	bls.n	8017940 <_raise_r+0x14>
 8017936:	2316      	movs	r3, #22
 8017938:	6003      	str	r3, [r0, #0]
 801793a:	f04f 30ff 	mov.w	r0, #4294967295
 801793e:	bd38      	pop	{r3, r4, r5, pc}
 8017940:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017942:	b112      	cbz	r2, 801794a <_raise_r+0x1e>
 8017944:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017948:	b94b      	cbnz	r3, 801795e <_raise_r+0x32>
 801794a:	4620      	mov	r0, r4
 801794c:	f000 f830 	bl	80179b0 <_getpid_r>
 8017950:	462a      	mov	r2, r5
 8017952:	4601      	mov	r1, r0
 8017954:	4620      	mov	r0, r4
 8017956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801795a:	f000 b817 	b.w	801798c <_kill_r>
 801795e:	2b01      	cmp	r3, #1
 8017960:	d00a      	beq.n	8017978 <_raise_r+0x4c>
 8017962:	1c59      	adds	r1, r3, #1
 8017964:	d103      	bne.n	801796e <_raise_r+0x42>
 8017966:	2316      	movs	r3, #22
 8017968:	6003      	str	r3, [r0, #0]
 801796a:	2001      	movs	r0, #1
 801796c:	e7e7      	b.n	801793e <_raise_r+0x12>
 801796e:	2400      	movs	r4, #0
 8017970:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017974:	4628      	mov	r0, r5
 8017976:	4798      	blx	r3
 8017978:	2000      	movs	r0, #0
 801797a:	e7e0      	b.n	801793e <_raise_r+0x12>

0801797c <raise>:
 801797c:	4b02      	ldr	r3, [pc, #8]	; (8017988 <raise+0xc>)
 801797e:	4601      	mov	r1, r0
 8017980:	6818      	ldr	r0, [r3, #0]
 8017982:	f7ff bfd3 	b.w	801792c <_raise_r>
 8017986:	bf00      	nop
 8017988:	20000020 	.word	0x20000020

0801798c <_kill_r>:
 801798c:	b538      	push	{r3, r4, r5, lr}
 801798e:	4d07      	ldr	r5, [pc, #28]	; (80179ac <_kill_r+0x20>)
 8017990:	2300      	movs	r3, #0
 8017992:	4604      	mov	r4, r0
 8017994:	4608      	mov	r0, r1
 8017996:	4611      	mov	r1, r2
 8017998:	602b      	str	r3, [r5, #0]
 801799a:	f7e9 fdab 	bl	80014f4 <_kill>
 801799e:	1c43      	adds	r3, r0, #1
 80179a0:	d102      	bne.n	80179a8 <_kill_r+0x1c>
 80179a2:	682b      	ldr	r3, [r5, #0]
 80179a4:	b103      	cbz	r3, 80179a8 <_kill_r+0x1c>
 80179a6:	6023      	str	r3, [r4, #0]
 80179a8:	bd38      	pop	{r3, r4, r5, pc}
 80179aa:	bf00      	nop
 80179ac:	2000d3d0 	.word	0x2000d3d0

080179b0 <_getpid_r>:
 80179b0:	f7e9 bd98 	b.w	80014e4 <_getpid>

080179b4 <_fstat_r>:
 80179b4:	b538      	push	{r3, r4, r5, lr}
 80179b6:	4d07      	ldr	r5, [pc, #28]	; (80179d4 <_fstat_r+0x20>)
 80179b8:	2300      	movs	r3, #0
 80179ba:	4604      	mov	r4, r0
 80179bc:	4608      	mov	r0, r1
 80179be:	4611      	mov	r1, r2
 80179c0:	602b      	str	r3, [r5, #0]
 80179c2:	f7e9 fdf8 	bl	80015b6 <_fstat>
 80179c6:	1c43      	adds	r3, r0, #1
 80179c8:	d102      	bne.n	80179d0 <_fstat_r+0x1c>
 80179ca:	682b      	ldr	r3, [r5, #0]
 80179cc:	b103      	cbz	r3, 80179d0 <_fstat_r+0x1c>
 80179ce:	6023      	str	r3, [r4, #0]
 80179d0:	bd38      	pop	{r3, r4, r5, pc}
 80179d2:	bf00      	nop
 80179d4:	2000d3d0 	.word	0x2000d3d0

080179d8 <_isatty_r>:
 80179d8:	b538      	push	{r3, r4, r5, lr}
 80179da:	4d06      	ldr	r5, [pc, #24]	; (80179f4 <_isatty_r+0x1c>)
 80179dc:	2300      	movs	r3, #0
 80179de:	4604      	mov	r4, r0
 80179e0:	4608      	mov	r0, r1
 80179e2:	602b      	str	r3, [r5, #0]
 80179e4:	f7e9 fdf7 	bl	80015d6 <_isatty>
 80179e8:	1c43      	adds	r3, r0, #1
 80179ea:	d102      	bne.n	80179f2 <_isatty_r+0x1a>
 80179ec:	682b      	ldr	r3, [r5, #0]
 80179ee:	b103      	cbz	r3, 80179f2 <_isatty_r+0x1a>
 80179f0:	6023      	str	r3, [r4, #0]
 80179f2:	bd38      	pop	{r3, r4, r5, pc}
 80179f4:	2000d3d0 	.word	0x2000d3d0

080179f8 <_init>:
 80179f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179fa:	bf00      	nop
 80179fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80179fe:	bc08      	pop	{r3}
 8017a00:	469e      	mov	lr, r3
 8017a02:	4770      	bx	lr

08017a04 <_fini>:
 8017a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a06:	bf00      	nop
 8017a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a0a:	bc08      	pop	{r3}
 8017a0c:	469e      	mov	lr, r3
 8017a0e:	4770      	bx	lr
