
PRB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000183e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000386c  08018570  08018570  00028570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bddc  0801bddc  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  0801bddc  0801bddc  0002bddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bde4  0801bde4  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bde4  0801bde4  0002bde4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bde8  0801bde8  0002bde8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0801bdec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030084  2**0
                  CONTENTS
 10 .bss          0000d630  20000084  20000084  00030084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000d6b4  2000d6b4  00030084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004d6fd  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009465  00000000  00000000  0007d7b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002400  00000000  00000000  00086c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002228  00000000  00000000  00089018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000341be  00000000  00000000  0008b240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003ae0b  00000000  00000000  000bf3fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2cd8  00000000  00000000  000fa209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001ecee1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000998c  00000000  00000000  001ecf34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018558 	.word	0x08018558

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08018558 	.word	0x08018558

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <set_bit>:
 */

#include <control_bit.h>

uint16_t set_bit(uint16_t value, uint8_t num)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	460a      	mov	r2, r1
 8000572:	80fb      	strh	r3, [r7, #6]
 8000574:	4613      	mov	r3, r2
 8000576:	717b      	strb	r3, [r7, #5]
     return value | (1 << num);
 8000578:	797b      	ldrb	r3, [r7, #5]
 800057a:	2201      	movs	r2, #1
 800057c:	fa02 f303 	lsl.w	r3, r2, r3
 8000580:	b21a      	sxth	r2, r3
 8000582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000586:	4313      	orrs	r3, r2
 8000588:	b21b      	sxth	r3, r3
 800058a:	b29b      	uxth	r3, r3
}
 800058c:	4618      	mov	r0, r3
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <Read_Inputs>:

extern Settings_Struct settings;
extern Meas_Data meas_data;

void Read_Inputs()
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	meas_data.d_inputs.in0 	= settings.input_emulation_switches.in0  ? settings.input_emulation_values.in0 :  HAL_GPIO_ReadPin(DIN_0_GPIO_Port, DIN_0_Pin);
 800059c:	4b9f      	ldr	r3, [pc, #636]	; (800081c <Read_Inputs+0x284>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d005      	beq.n	80005b6 <Read_Inputs+0x1e>
 80005aa:	4b9c      	ldr	r3, [pc, #624]	; (800081c <Read_Inputs+0x284>)
 80005ac:	791b      	ldrb	r3, [r3, #4]
 80005ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	e008      	b.n	80005c8 <Read_Inputs+0x30>
 80005b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ba:	4899      	ldr	r0, [pc, #612]	; (8000820 <Read_Inputs+0x288>)
 80005bc:	f003 ffd4 	bl	8004568 <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4996      	ldr	r1, [pc, #600]	; (8000824 <Read_Inputs+0x28c>)
 80005ca:	780b      	ldrb	r3, [r1, #0]
 80005cc:	f362 0300 	bfi	r3, r2, #0, #1
 80005d0:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in1 	= settings.input_emulation_switches.in1  ? settings.input_emulation_values.in1 :  HAL_GPIO_ReadPin(DIN_1_GPIO_Port, DIN_1_Pin);
 80005d2:	4b92      	ldr	r3, [pc, #584]	; (800081c <Read_Inputs+0x284>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d005      	beq.n	80005ec <Read_Inputs+0x54>
 80005e0:	4b8e      	ldr	r3, [pc, #568]	; (800081c <Read_Inputs+0x284>)
 80005e2:	791b      	ldrb	r3, [r3, #4]
 80005e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	e008      	b.n	80005fe <Read_Inputs+0x66>
 80005ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f0:	488b      	ldr	r0, [pc, #556]	; (8000820 <Read_Inputs+0x288>)
 80005f2:	f003 ffb9 	bl	8004568 <HAL_GPIO_ReadPin>
 80005f6:	4603      	mov	r3, r0
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4989      	ldr	r1, [pc, #548]	; (8000824 <Read_Inputs+0x28c>)
 8000600:	780b      	ldrb	r3, [r1, #0]
 8000602:	f362 0341 	bfi	r3, r2, #1, #1
 8000606:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in2 	= settings.input_emulation_switches.in2  ? settings.input_emulation_values.in2 :  HAL_GPIO_ReadPin(DIN_2_GPIO_Port, DIN_2_Pin);
 8000608:	4b84      	ldr	r3, [pc, #528]	; (800081c <Read_Inputs+0x284>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	f003 0304 	and.w	r3, r3, #4
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d005      	beq.n	8000622 <Read_Inputs+0x8a>
 8000616:	4b81      	ldr	r3, [pc, #516]	; (800081c <Read_Inputs+0x284>)
 8000618:	791b      	ldrb	r3, [r3, #4]
 800061a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800061e:	b2da      	uxtb	r2, r3
 8000620:	e007      	b.n	8000632 <Read_Inputs+0x9a>
 8000622:	2101      	movs	r1, #1
 8000624:	4880      	ldr	r0, [pc, #512]	; (8000828 <Read_Inputs+0x290>)
 8000626:	f003 ff9f 	bl	8004568 <HAL_GPIO_ReadPin>
 800062a:	4603      	mov	r3, r0
 800062c:	f003 0301 	and.w	r3, r3, #1
 8000630:	b2da      	uxtb	r2, r3
 8000632:	497c      	ldr	r1, [pc, #496]	; (8000824 <Read_Inputs+0x28c>)
 8000634:	780b      	ldrb	r3, [r1, #0]
 8000636:	f362 0382 	bfi	r3, r2, #2, #1
 800063a:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in3 	= settings.input_emulation_switches.in3  ? settings.input_emulation_values.in3 :  HAL_GPIO_ReadPin(DIN_3_GPIO_Port, DIN_3_Pin);
 800063c:	4b77      	ldr	r3, [pc, #476]	; (800081c <Read_Inputs+0x284>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	f003 0308 	and.w	r3, r3, #8
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2b00      	cmp	r3, #0
 8000648:	d005      	beq.n	8000656 <Read_Inputs+0xbe>
 800064a:	4b74      	ldr	r3, [pc, #464]	; (800081c <Read_Inputs+0x284>)
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000652:	b2da      	uxtb	r2, r3
 8000654:	e007      	b.n	8000666 <Read_Inputs+0xce>
 8000656:	2102      	movs	r1, #2
 8000658:	4873      	ldr	r0, [pc, #460]	; (8000828 <Read_Inputs+0x290>)
 800065a:	f003 ff85 	bl	8004568 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	b2da      	uxtb	r2, r3
 8000666:	496f      	ldr	r1, [pc, #444]	; (8000824 <Read_Inputs+0x28c>)
 8000668:	780b      	ldrb	r3, [r1, #0]
 800066a:	f362 03c3 	bfi	r3, r2, #3, #1
 800066e:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in4 	= settings.input_emulation_switches.in4  ? settings.input_emulation_values.in4 :  HAL_GPIO_ReadPin(DIN_4_GPIO_Port, DIN_4_Pin);
 8000670:	4b6a      	ldr	r3, [pc, #424]	; (800081c <Read_Inputs+0x284>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	f003 0310 	and.w	r3, r3, #16
 8000678:	b2db      	uxtb	r3, r3
 800067a:	2b00      	cmp	r3, #0
 800067c:	d005      	beq.n	800068a <Read_Inputs+0xf2>
 800067e:	4b67      	ldr	r3, [pc, #412]	; (800081c <Read_Inputs+0x284>)
 8000680:	791b      	ldrb	r3, [r3, #4]
 8000682:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000686:	b2da      	uxtb	r2, r3
 8000688:	e007      	b.n	800069a <Read_Inputs+0x102>
 800068a:	2104      	movs	r1, #4
 800068c:	4866      	ldr	r0, [pc, #408]	; (8000828 <Read_Inputs+0x290>)
 800068e:	f003 ff6b 	bl	8004568 <HAL_GPIO_ReadPin>
 8000692:	4603      	mov	r3, r0
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4962      	ldr	r1, [pc, #392]	; (8000824 <Read_Inputs+0x28c>)
 800069c:	780b      	ldrb	r3, [r1, #0]
 800069e:	f362 1304 	bfi	r3, r2, #4, #1
 80006a2:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in5 	= settings.input_emulation_switches.in5  ? settings.input_emulation_values.in5 :  HAL_GPIO_ReadPin(DIN_5_GPIO_Port, DIN_5_Pin);
 80006a4:	4b5d      	ldr	r3, [pc, #372]	; (800081c <Read_Inputs+0x284>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	f003 0320 	and.w	r3, r3, #32
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d005      	beq.n	80006be <Read_Inputs+0x126>
 80006b2:	4b5a      	ldr	r3, [pc, #360]	; (800081c <Read_Inputs+0x284>)
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	e007      	b.n	80006ce <Read_Inputs+0x136>
 80006be:	2108      	movs	r1, #8
 80006c0:	4859      	ldr	r0, [pc, #356]	; (8000828 <Read_Inputs+0x290>)
 80006c2:	f003 ff51 	bl	8004568 <HAL_GPIO_ReadPin>
 80006c6:	4603      	mov	r3, r0
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4955      	ldr	r1, [pc, #340]	; (8000824 <Read_Inputs+0x28c>)
 80006d0:	780b      	ldrb	r3, [r1, #0]
 80006d2:	f362 1345 	bfi	r3, r2, #5, #1
 80006d6:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in6 	= settings.input_emulation_switches.in6  ? settings.input_emulation_values.in6 :  HAL_GPIO_ReadPin(DIN_6_GPIO_Port, DIN_6_Pin);
 80006d8:	4b50      	ldr	r3, [pc, #320]	; (800081c <Read_Inputs+0x284>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d005      	beq.n	80006f2 <Read_Inputs+0x15a>
 80006e6:	4b4d      	ldr	r3, [pc, #308]	; (800081c <Read_Inputs+0x284>)
 80006e8:	791b      	ldrb	r3, [r3, #4]
 80006ea:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	e007      	b.n	8000702 <Read_Inputs+0x16a>
 80006f2:	2110      	movs	r1, #16
 80006f4:	484c      	ldr	r0, [pc, #304]	; (8000828 <Read_Inputs+0x290>)
 80006f6:	f003 ff37 	bl	8004568 <HAL_GPIO_ReadPin>
 80006fa:	4603      	mov	r3, r0
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4948      	ldr	r1, [pc, #288]	; (8000824 <Read_Inputs+0x28c>)
 8000704:	780b      	ldrb	r3, [r1, #0]
 8000706:	f362 1386 	bfi	r3, r2, #6, #1
 800070a:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in7 	= settings.input_emulation_switches.in7  ? settings.input_emulation_values.in7 :  HAL_GPIO_ReadPin(DIN_7_GPIO_Port, DIN_7_Pin);
 800070c:	4b43      	ldr	r3, [pc, #268]	; (800081c <Read_Inputs+0x284>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d005      	beq.n	8000726 <Read_Inputs+0x18e>
 800071a:	4b40      	ldr	r3, [pc, #256]	; (800081c <Read_Inputs+0x284>)
 800071c:	791b      	ldrb	r3, [r3, #4]
 800071e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000722:	b2da      	uxtb	r2, r3
 8000724:	e007      	b.n	8000736 <Read_Inputs+0x19e>
 8000726:	2120      	movs	r1, #32
 8000728:	483f      	ldr	r0, [pc, #252]	; (8000828 <Read_Inputs+0x290>)
 800072a:	f003 ff1d 	bl	8004568 <HAL_GPIO_ReadPin>
 800072e:	4603      	mov	r3, r0
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	b2da      	uxtb	r2, r3
 8000736:	493b      	ldr	r1, [pc, #236]	; (8000824 <Read_Inputs+0x28c>)
 8000738:	780b      	ldrb	r3, [r1, #0]
 800073a:	f362 13c7 	bfi	r3, r2, #7, #1
 800073e:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in8 	= settings.input_emulation_switches.in8  ? settings.input_emulation_values.in8 :  HAL_GPIO_ReadPin(DIN_8_GPIO_Port, DIN_8_Pin);
 8000740:	4b36      	ldr	r3, [pc, #216]	; (800081c <Read_Inputs+0x284>)
 8000742:	785b      	ldrb	r3, [r3, #1]
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	d005      	beq.n	800075a <Read_Inputs+0x1c2>
 800074e:	4b33      	ldr	r3, [pc, #204]	; (800081c <Read_Inputs+0x284>)
 8000750:	795b      	ldrb	r3, [r3, #5]
 8000752:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000756:	b2da      	uxtb	r2, r3
 8000758:	e007      	b.n	800076a <Read_Inputs+0x1d2>
 800075a:	2140      	movs	r1, #64	; 0x40
 800075c:	4832      	ldr	r0, [pc, #200]	; (8000828 <Read_Inputs+0x290>)
 800075e:	f003 ff03 	bl	8004568 <HAL_GPIO_ReadPin>
 8000762:	4603      	mov	r3, r0
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	b2da      	uxtb	r2, r3
 800076a:	492e      	ldr	r1, [pc, #184]	; (8000824 <Read_Inputs+0x28c>)
 800076c:	784b      	ldrb	r3, [r1, #1]
 800076e:	f362 0300 	bfi	r3, r2, #0, #1
 8000772:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in9 	= settings.input_emulation_switches.in9  ? settings.input_emulation_values.in9 :  HAL_GPIO_ReadPin(DIN_9_GPIO_Port, DIN_9_Pin);
 8000774:	4b29      	ldr	r3, [pc, #164]	; (800081c <Read_Inputs+0x284>)
 8000776:	785b      	ldrb	r3, [r3, #1]
 8000778:	f003 0302 	and.w	r3, r3, #2
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d005      	beq.n	800078e <Read_Inputs+0x1f6>
 8000782:	4b26      	ldr	r3, [pc, #152]	; (800081c <Read_Inputs+0x284>)
 8000784:	795b      	ldrb	r3, [r3, #5]
 8000786:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800078a:	b2da      	uxtb	r2, r3
 800078c:	e008      	b.n	80007a0 <Read_Inputs+0x208>
 800078e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000792:	4826      	ldr	r0, [pc, #152]	; (800082c <Read_Inputs+0x294>)
 8000794:	f003 fee8 	bl	8004568 <HAL_GPIO_ReadPin>
 8000798:	4603      	mov	r3, r0
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4920      	ldr	r1, [pc, #128]	; (8000824 <Read_Inputs+0x28c>)
 80007a2:	784b      	ldrb	r3, [r1, #1]
 80007a4:	f362 0341 	bfi	r3, r2, #1, #1
 80007a8:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in10 = settings.input_emulation_switches.in10 ? settings.input_emulation_values.in10 : HAL_GPIO_ReadPin(DIN_10_GPIO_Port, DIN_10_Pin);
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <Read_Inputs+0x284>)
 80007ac:	785b      	ldrb	r3, [r3, #1]
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d005      	beq.n	80007c4 <Read_Inputs+0x22c>
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <Read_Inputs+0x284>)
 80007ba:	795b      	ldrb	r3, [r3, #5]
 80007bc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	e008      	b.n	80007d6 <Read_Inputs+0x23e>
 80007c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c8:	4818      	ldr	r0, [pc, #96]	; (800082c <Read_Inputs+0x294>)
 80007ca:	f003 fecd 	bl	8004568 <HAL_GPIO_ReadPin>
 80007ce:	4603      	mov	r3, r0
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4913      	ldr	r1, [pc, #76]	; (8000824 <Read_Inputs+0x28c>)
 80007d8:	784b      	ldrb	r3, [r1, #1]
 80007da:	f362 0382 	bfi	r3, r2, #2, #1
 80007de:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in11 = settings.input_emulation_switches.in11 ? settings.input_emulation_values.in11 : HAL_GPIO_ReadPin(DIN_11_GPIO_Port, DIN_11_Pin);
 80007e0:	4b0e      	ldr	r3, [pc, #56]	; (800081c <Read_Inputs+0x284>)
 80007e2:	785b      	ldrb	r3, [r3, #1]
 80007e4:	f003 0308 	and.w	r3, r3, #8
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d005      	beq.n	80007fa <Read_Inputs+0x262>
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <Read_Inputs+0x284>)
 80007f0:	795b      	ldrb	r3, [r3, #5]
 80007f2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	e008      	b.n	800080c <Read_Inputs+0x274>
 80007fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007fe:	480b      	ldr	r0, [pc, #44]	; (800082c <Read_Inputs+0x294>)
 8000800:	f003 feb2 	bl	8004568 <HAL_GPIO_ReadPin>
 8000804:	4603      	mov	r3, r0
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	b2da      	uxtb	r2, r3
 800080c:	4905      	ldr	r1, [pc, #20]	; (8000824 <Read_Inputs+0x28c>)
 800080e:	784b      	ldrb	r3, [r1, #1]
 8000810:	f362 03c3 	bfi	r3, r2, #3, #1
 8000814:	704b      	strb	r3, [r1, #1]
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20006ae0 	.word	0x20006ae0
 8000820:	40020400 	.word	0x40020400
 8000824:	20006b58 	.word	0x20006b58
 8000828:	40021000 	.word	0x40021000
 800082c:	40020800 	.word	0x40020800

08000830 <Write_Outputs>:

void Write_Outputs()
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	meas_data.d_outputs.out0  = settings.output_emulation_switches.out0  ? settings.output_emulation_values.out0  :  0;
 8000834:	4bb4      	ldr	r3, [pc, #720]	; (8000b08 <Write_Outputs+0x2d8>)
 8000836:	7a1b      	ldrb	r3, [r3, #8]
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d005      	beq.n	800084e <Write_Outputs+0x1e>
 8000842:	4bb1      	ldr	r3, [pc, #708]	; (8000b08 <Write_Outputs+0x2d8>)
 8000844:	7b1b      	ldrb	r3, [r3, #12]
 8000846:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800084a:	b2d9      	uxtb	r1, r3
 800084c:	e000      	b.n	8000850 <Write_Outputs+0x20>
 800084e:	2100      	movs	r1, #0
 8000850:	4aae      	ldr	r2, [pc, #696]	; (8000b0c <Write_Outputs+0x2dc>)
 8000852:	7913      	ldrb	r3, [r2, #4]
 8000854:	f361 0300 	bfi	r3, r1, #0, #1
 8000858:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out1  = settings.output_emulation_switches.out1  ? settings.output_emulation_values.out1  :  0;
 800085a:	4bab      	ldr	r3, [pc, #684]	; (8000b08 <Write_Outputs+0x2d8>)
 800085c:	7a1b      	ldrb	r3, [r3, #8]
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d005      	beq.n	8000874 <Write_Outputs+0x44>
 8000868:	4ba7      	ldr	r3, [pc, #668]	; (8000b08 <Write_Outputs+0x2d8>)
 800086a:	7b1b      	ldrb	r3, [r3, #12]
 800086c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000870:	b2d9      	uxtb	r1, r3
 8000872:	e000      	b.n	8000876 <Write_Outputs+0x46>
 8000874:	2100      	movs	r1, #0
 8000876:	4aa5      	ldr	r2, [pc, #660]	; (8000b0c <Write_Outputs+0x2dc>)
 8000878:	7913      	ldrb	r3, [r2, #4]
 800087a:	f361 0341 	bfi	r3, r1, #1, #1
 800087e:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out2  = settings.output_emulation_switches.out2  ? settings.output_emulation_values.out2  :  0;
 8000880:	4ba1      	ldr	r3, [pc, #644]	; (8000b08 <Write_Outputs+0x2d8>)
 8000882:	7a1b      	ldrb	r3, [r3, #8]
 8000884:	f003 0304 	and.w	r3, r3, #4
 8000888:	b2db      	uxtb	r3, r3
 800088a:	2b00      	cmp	r3, #0
 800088c:	d005      	beq.n	800089a <Write_Outputs+0x6a>
 800088e:	4b9e      	ldr	r3, [pc, #632]	; (8000b08 <Write_Outputs+0x2d8>)
 8000890:	7b1b      	ldrb	r3, [r3, #12]
 8000892:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000896:	b2d9      	uxtb	r1, r3
 8000898:	e000      	b.n	800089c <Write_Outputs+0x6c>
 800089a:	2100      	movs	r1, #0
 800089c:	4a9b      	ldr	r2, [pc, #620]	; (8000b0c <Write_Outputs+0x2dc>)
 800089e:	7913      	ldrb	r3, [r2, #4]
 80008a0:	f361 0382 	bfi	r3, r1, #2, #1
 80008a4:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out3  = settings.output_emulation_switches.out3  ? settings.output_emulation_values.out3  :  0;
 80008a6:	4b98      	ldr	r3, [pc, #608]	; (8000b08 <Write_Outputs+0x2d8>)
 80008a8:	7a1b      	ldrb	r3, [r3, #8]
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d005      	beq.n	80008c0 <Write_Outputs+0x90>
 80008b4:	4b94      	ldr	r3, [pc, #592]	; (8000b08 <Write_Outputs+0x2d8>)
 80008b6:	7b1b      	ldrb	r3, [r3, #12]
 80008b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80008bc:	b2d9      	uxtb	r1, r3
 80008be:	e000      	b.n	80008c2 <Write_Outputs+0x92>
 80008c0:	2100      	movs	r1, #0
 80008c2:	4a92      	ldr	r2, [pc, #584]	; (8000b0c <Write_Outputs+0x2dc>)
 80008c4:	7913      	ldrb	r3, [r2, #4]
 80008c6:	f361 03c3 	bfi	r3, r1, #3, #1
 80008ca:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out4  = settings.output_emulation_switches.out4  ? settings.output_emulation_values.out4  :  0;
 80008cc:	4b8e      	ldr	r3, [pc, #568]	; (8000b08 <Write_Outputs+0x2d8>)
 80008ce:	7a1b      	ldrb	r3, [r3, #8]
 80008d0:	f003 0310 	and.w	r3, r3, #16
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d005      	beq.n	80008e6 <Write_Outputs+0xb6>
 80008da:	4b8b      	ldr	r3, [pc, #556]	; (8000b08 <Write_Outputs+0x2d8>)
 80008dc:	7b1b      	ldrb	r3, [r3, #12]
 80008de:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80008e2:	b2d9      	uxtb	r1, r3
 80008e4:	e000      	b.n	80008e8 <Write_Outputs+0xb8>
 80008e6:	2100      	movs	r1, #0
 80008e8:	4a88      	ldr	r2, [pc, #544]	; (8000b0c <Write_Outputs+0x2dc>)
 80008ea:	7913      	ldrb	r3, [r2, #4]
 80008ec:	f361 1304 	bfi	r3, r1, #4, #1
 80008f0:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out5  = settings.output_emulation_switches.out5  ? settings.output_emulation_values.out5  :  0;
 80008f2:	4b85      	ldr	r3, [pc, #532]	; (8000b08 <Write_Outputs+0x2d8>)
 80008f4:	7a1b      	ldrb	r3, [r3, #8]
 80008f6:	f003 0320 	and.w	r3, r3, #32
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d005      	beq.n	800090c <Write_Outputs+0xdc>
 8000900:	4b81      	ldr	r3, [pc, #516]	; (8000b08 <Write_Outputs+0x2d8>)
 8000902:	7b1b      	ldrb	r3, [r3, #12]
 8000904:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000908:	b2d9      	uxtb	r1, r3
 800090a:	e000      	b.n	800090e <Write_Outputs+0xde>
 800090c:	2100      	movs	r1, #0
 800090e:	4a7f      	ldr	r2, [pc, #508]	; (8000b0c <Write_Outputs+0x2dc>)
 8000910:	7913      	ldrb	r3, [r2, #4]
 8000912:	f361 1345 	bfi	r3, r1, #5, #1
 8000916:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out6  = settings.output_emulation_switches.out6  ? settings.output_emulation_values.out6  :  0;
 8000918:	4b7b      	ldr	r3, [pc, #492]	; (8000b08 <Write_Outputs+0x2d8>)
 800091a:	7a1b      	ldrb	r3, [r3, #8]
 800091c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b00      	cmp	r3, #0
 8000924:	d005      	beq.n	8000932 <Write_Outputs+0x102>
 8000926:	4b78      	ldr	r3, [pc, #480]	; (8000b08 <Write_Outputs+0x2d8>)
 8000928:	7b1b      	ldrb	r3, [r3, #12]
 800092a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800092e:	b2d9      	uxtb	r1, r3
 8000930:	e000      	b.n	8000934 <Write_Outputs+0x104>
 8000932:	2100      	movs	r1, #0
 8000934:	4a75      	ldr	r2, [pc, #468]	; (8000b0c <Write_Outputs+0x2dc>)
 8000936:	7913      	ldrb	r3, [r2, #4]
 8000938:	f361 1386 	bfi	r3, r1, #6, #1
 800093c:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out7  = settings.output_emulation_switches.out7  ? settings.output_emulation_values.out7  :  0;
 800093e:	4b72      	ldr	r3, [pc, #456]	; (8000b08 <Write_Outputs+0x2d8>)
 8000940:	7a1b      	ldrb	r3, [r3, #8]
 8000942:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d005      	beq.n	8000958 <Write_Outputs+0x128>
 800094c:	4b6e      	ldr	r3, [pc, #440]	; (8000b08 <Write_Outputs+0x2d8>)
 800094e:	7b1b      	ldrb	r3, [r3, #12]
 8000950:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000954:	b2d9      	uxtb	r1, r3
 8000956:	e000      	b.n	800095a <Write_Outputs+0x12a>
 8000958:	2100      	movs	r1, #0
 800095a:	4a6c      	ldr	r2, [pc, #432]	; (8000b0c <Write_Outputs+0x2dc>)
 800095c:	7913      	ldrb	r3, [r2, #4]
 800095e:	f361 13c7 	bfi	r3, r1, #7, #1
 8000962:	7113      	strb	r3, [r2, #4]
	meas_data.d_outputs.out8  = settings.output_emulation_switches.out8  ? settings.output_emulation_values.out8  :  0;
 8000964:	4b68      	ldr	r3, [pc, #416]	; (8000b08 <Write_Outputs+0x2d8>)
 8000966:	7a5b      	ldrb	r3, [r3, #9]
 8000968:	f003 0301 	and.w	r3, r3, #1
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	d005      	beq.n	800097e <Write_Outputs+0x14e>
 8000972:	4b65      	ldr	r3, [pc, #404]	; (8000b08 <Write_Outputs+0x2d8>)
 8000974:	7b5b      	ldrb	r3, [r3, #13]
 8000976:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800097a:	b2d9      	uxtb	r1, r3
 800097c:	e000      	b.n	8000980 <Write_Outputs+0x150>
 800097e:	2100      	movs	r1, #0
 8000980:	4a62      	ldr	r2, [pc, #392]	; (8000b0c <Write_Outputs+0x2dc>)
 8000982:	7953      	ldrb	r3, [r2, #5]
 8000984:	f361 0300 	bfi	r3, r1, #0, #1
 8000988:	7153      	strb	r3, [r2, #5]
	meas_data.d_outputs.out9  = settings.output_emulation_switches.out9  ? settings.output_emulation_values.out9  :  0;
 800098a:	4b5f      	ldr	r3, [pc, #380]	; (8000b08 <Write_Outputs+0x2d8>)
 800098c:	7a5b      	ldrb	r3, [r3, #9]
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	b2db      	uxtb	r3, r3
 8000994:	2b00      	cmp	r3, #0
 8000996:	d005      	beq.n	80009a4 <Write_Outputs+0x174>
 8000998:	4b5b      	ldr	r3, [pc, #364]	; (8000b08 <Write_Outputs+0x2d8>)
 800099a:	7b5b      	ldrb	r3, [r3, #13]
 800099c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80009a0:	b2d9      	uxtb	r1, r3
 80009a2:	e000      	b.n	80009a6 <Write_Outputs+0x176>
 80009a4:	2100      	movs	r1, #0
 80009a6:	4a59      	ldr	r2, [pc, #356]	; (8000b0c <Write_Outputs+0x2dc>)
 80009a8:	7953      	ldrb	r3, [r2, #5]
 80009aa:	f361 0341 	bfi	r3, r1, #1, #1
 80009ae:	7153      	strb	r3, [r2, #5]
	meas_data.d_outputs.out10 = settings.output_emulation_switches.out10 ? settings.output_emulation_values.out10 :  0;
 80009b0:	4b55      	ldr	r3, [pc, #340]	; (8000b08 <Write_Outputs+0x2d8>)
 80009b2:	7a5b      	ldrb	r3, [r3, #9]
 80009b4:	f003 0304 	and.w	r3, r3, #4
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d005      	beq.n	80009ca <Write_Outputs+0x19a>
 80009be:	4b52      	ldr	r3, [pc, #328]	; (8000b08 <Write_Outputs+0x2d8>)
 80009c0:	7b5b      	ldrb	r3, [r3, #13]
 80009c2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80009c6:	b2d9      	uxtb	r1, r3
 80009c8:	e000      	b.n	80009cc <Write_Outputs+0x19c>
 80009ca:	2100      	movs	r1, #0
 80009cc:	4a4f      	ldr	r2, [pc, #316]	; (8000b0c <Write_Outputs+0x2dc>)
 80009ce:	7953      	ldrb	r3, [r2, #5]
 80009d0:	f361 0382 	bfi	r3, r1, #2, #1
 80009d4:	7153      	strb	r3, [r2, #5]
	meas_data.d_outputs.out11 = settings.output_emulation_switches.out11 ? settings.output_emulation_values.out11 :  0;
 80009d6:	4b4c      	ldr	r3, [pc, #304]	; (8000b08 <Write_Outputs+0x2d8>)
 80009d8:	7a5b      	ldrb	r3, [r3, #9]
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d005      	beq.n	80009f0 <Write_Outputs+0x1c0>
 80009e4:	4b48      	ldr	r3, [pc, #288]	; (8000b08 <Write_Outputs+0x2d8>)
 80009e6:	7b5b      	ldrb	r3, [r3, #13]
 80009e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80009ec:	b2d9      	uxtb	r1, r3
 80009ee:	e000      	b.n	80009f2 <Write_Outputs+0x1c2>
 80009f0:	2100      	movs	r1, #0
 80009f2:	4a46      	ldr	r2, [pc, #280]	; (8000b0c <Write_Outputs+0x2dc>)
 80009f4:	7953      	ldrb	r3, [r2, #5]
 80009f6:	f361 03c3 	bfi	r3, r1, #3, #1
 80009fa:	7153      	strb	r3, [r2, #5]
	HAL_GPIO_WritePin(DOUT_0_GPIO_Port, DOUT_0_Pin, meas_data.d_outputs.out0);
 80009fc:	4b43      	ldr	r3, [pc, #268]	; (8000b0c <Write_Outputs+0x2dc>)
 80009fe:	791b      	ldrb	r3, [r3, #4]
 8000a00:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	461a      	mov	r2, r3
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	4841      	ldr	r0, [pc, #260]	; (8000b10 <Write_Outputs+0x2e0>)
 8000a0c:	f003 fdc4 	bl	8004598 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_1_GPIO_Port, DOUT_1_Pin, meas_data.d_outputs.out1);
 8000a10:	4b3e      	ldr	r3, [pc, #248]	; (8000b0c <Write_Outputs+0x2dc>)
 8000a12:	791b      	ldrb	r3, [r3, #4]
 8000a14:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a20:	483b      	ldr	r0, [pc, #236]	; (8000b10 <Write_Outputs+0x2e0>)
 8000a22:	f003 fdb9 	bl	8004598 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_2_GPIO_Port, DOUT_2_Pin, meas_data.d_outputs.out2);
 8000a26:	4b39      	ldr	r3, [pc, #228]	; (8000b0c <Write_Outputs+0x2dc>)
 8000a28:	791b      	ldrb	r3, [r3, #4]
 8000a2a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	461a      	mov	r2, r3
 8000a32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a36:	4836      	ldr	r0, [pc, #216]	; (8000b10 <Write_Outputs+0x2e0>)
 8000a38:	f003 fdae 	bl	8004598 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_3_GPIO_Port, DOUT_3_Pin, meas_data.d_outputs.out3);
 8000a3c:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <Write_Outputs+0x2dc>)
 8000a3e:	791b      	ldrb	r3, [r3, #4]
 8000a40:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	461a      	mov	r2, r3
 8000a48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a4c:	4830      	ldr	r0, [pc, #192]	; (8000b10 <Write_Outputs+0x2e0>)
 8000a4e:	f003 fda3 	bl	8004598 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_4_GPIO_Port, DOUT_4_Pin, meas_data.d_outputs.out4);
 8000a52:	4b2e      	ldr	r3, [pc, #184]	; (8000b0c <Write_Outputs+0x2dc>)
 8000a54:	791b      	ldrb	r3, [r3, #4]
 8000a56:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a62:	482b      	ldr	r0, [pc, #172]	; (8000b10 <Write_Outputs+0x2e0>)
 8000a64:	f003 fd98 	bl	8004598 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_5_GPIO_Port, DOUT_5_Pin, meas_data.d_outputs.out5);
 8000a68:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <Write_Outputs+0x2dc>)
 8000a6a:	791b      	ldrb	r3, [r3, #4]
 8000a6c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	461a      	mov	r2, r3
 8000a74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a78:	4825      	ldr	r0, [pc, #148]	; (8000b10 <Write_Outputs+0x2e0>)
 8000a7a:	f003 fd8d 	bl	8004598 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_6_GPIO_Port, DOUT_6_Pin, meas_data.d_outputs.out6);
 8000a7e:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <Write_Outputs+0x2dc>)
 8000a80:	791b      	ldrb	r3, [r3, #4]
 8000a82:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	461a      	mov	r2, r3
 8000a8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8e:	4820      	ldr	r0, [pc, #128]	; (8000b10 <Write_Outputs+0x2e0>)
 8000a90:	f003 fd82 	bl	8004598 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_7_GPIO_Port, DOUT_7_Pin, meas_data.d_outputs.out7);
 8000a94:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <Write_Outputs+0x2dc>)
 8000a96:	791b      	ldrb	r3, [r3, #4]
 8000a98:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa4:	481a      	ldr	r0, [pc, #104]	; (8000b10 <Write_Outputs+0x2e0>)
 8000aa6:	f003 fd77 	bl	8004598 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_8_GPIO_Port, DOUT_8_Pin, meas_data.d_outputs.out8);
 8000aaa:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <Write_Outputs+0x2dc>)
 8000aac:	795b      	ldrb	r3, [r3, #5]
 8000aae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aba:	4815      	ldr	r0, [pc, #84]	; (8000b10 <Write_Outputs+0x2e0>)
 8000abc:	f003 fd6c 	bl	8004598 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_9_GPIO_Port, DOUT_9_Pin, meas_data.d_outputs.out9);
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <Write_Outputs+0x2dc>)
 8000ac2:	795b      	ldrb	r3, [r3, #5]
 8000ac4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	461a      	mov	r2, r3
 8000acc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad0:	4810      	ldr	r0, [pc, #64]	; (8000b14 <Write_Outputs+0x2e4>)
 8000ad2:	f003 fd61 	bl	8004598 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_10_GPIO_Port, DOUT_10_Pin, meas_data.d_outputs.out10);
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <Write_Outputs+0x2dc>)
 8000ad8:	795b      	ldrb	r3, [r3, #5]
 8000ada:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae6:	480c      	ldr	r0, [pc, #48]	; (8000b18 <Write_Outputs+0x2e8>)
 8000ae8:	f003 fd56 	bl	8004598 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_11_GPIO_Port, DOUT_11_Pin, meas_data.d_outputs.out11);
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <Write_Outputs+0x2dc>)
 8000aee:	795b      	ldrb	r3, [r3, #5]
 8000af0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	461a      	mov	r2, r3
 8000af8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000afc:	4806      	ldr	r0, [pc, #24]	; (8000b18 <Write_Outputs+0x2e8>)
 8000afe:	f003 fd4b 	bl	8004598 <HAL_GPIO_WritePin>
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20006ae0 	.word	0x20006ae0
 8000b0c:	20006b58 	.word	0x20006b58
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40020400 	.word	0x40020400
 8000b18:	40020c00 	.word	0x40020c00

08000b1c <ethernet_thread>:

static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer);
static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf);

void ethernet_thread(void *arg)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b0cc      	sub	sp, #304	; 0x130
 8000b20:	af02      	add	r7, sp, #8
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	6018      	str	r0, [r3, #0]
	struct netconn *conn;
	struct netbuf *buf;
	ip_addr_t *client_addr;
	unsigned short local_port;
	unsigned short client_port;
	local_port = *((unsigned short*)arg);
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
	void* data;
	uint8_t answer[256];
	u16_t len;
	uint16_t answer_len;
	conn = netconn_new(NETCONN_UDP);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2100      	movs	r1, #0
 8000b34:	2020      	movs	r0, #32
 8000b36:	f009 fb53 	bl	800a1e0 <netconn_new_with_proto_and_callback>
 8000b3a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
	if (conn!= NULL)
 8000b3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d05b      	beq.n	8000bfe <ethernet_thread+0xe2>
	{
	  err = netconn_bind(conn, IP_ADDR_ANY, local_port);
 8000b46:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	492e      	ldr	r1, [pc, #184]	; (8000c08 <ethernet_thread+0xec>)
 8000b4e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000b52:	f009 fbff 	bl	800a354 <netconn_bind>
 8000b56:	4603      	mov	r3, r0
 8000b58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	  if (err == ERR_OK)
 8000b5c:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d148      	bne.n	8000bf6 <ethernet_thread+0xda>
	  {
		  for(;;)
		  {
			  recv_err = netconn_recv(conn, &buf);
 8000b64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000b6e:	f009 fda5 	bl	800a6bc <netconn_recv>
 8000b72:	4603      	mov	r3, r0
 8000b74:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
			  if (recv_err == ERR_OK)
 8000b78:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1f1      	bne.n	8000b64 <ethernet_thread+0x48>
			  {
				  client_addr = netbuf_fromaddr(buf);
 8000b80:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000b84:	3308      	adds	r3, #8
 8000b86:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
				  client_port = netbuf_fromport(buf);
 8000b8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000b8e:	899b      	ldrh	r3, [r3, #12]
 8000b90:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

				  netbuf_data(buf, &data, &len);
 8000b94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000b98:	f107 020a 	add.w	r2, r7, #10
 8000b9c:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f00b f95d 	bl	800be60 <netbuf_data>
				  answer_len = ethernet_answer(data, len, answer);
 8000ba6:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8000baa:	f107 030a 	add.w	r3, r7, #10
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	f107 020c 	add.w	r2, r7, #12
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f000 f859 	bl	8000c6c <ethernet_answer>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
				  if(answer_len)
 8000bc0:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d010      	beq.n	8000bea <ethernet_thread+0xce>
				  {
					  Send(conn, answer, answer_len, client_addr, client_port, buf);
 8000bc8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000bcc:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8000bd0:	f107 010c 	add.w	r1, r7, #12
 8000bd4:	9301      	str	r3, [sp, #4]
 8000bd6:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000be0:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000be4:	f000 f812 	bl	8000c0c <Send>
 8000be8:	e7bc      	b.n	8000b64 <ethernet_thread+0x48>
				  }
				  else netbuf_delete(buf);
 8000bea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f00b f8cc 	bl	800bd8c <netbuf_delete>
			  recv_err = netconn_recv(conn, &buf);
 8000bf4:	e7b6      	b.n	8000b64 <ethernet_thread+0x48>

		  }
	  }
	  else
	  {
	    netconn_delete(conn);
 8000bf6:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000bfa:	f009 fb8f 	bl	800a31c <netconn_delete>
	  }
	}
}
 8000bfe:	bf00      	nop
 8000c00:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	0801bc74 	.word	0x0801bc74

08000c0c <Send>:

static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	80fb      	strh	r3, [r7, #6]
	u32_t address = addr->addr;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	617b      	str	r3, [r7, #20]
	netbuf_delete(buf);
 8000c22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c24:	f00b f8b2 	bl	800bd8c <netbuf_delete>
	buf = netbuf_new();
 8000c28:	f00b f89c 	bl	800bd64 <netbuf_new>
 8000c2c:	6278      	str	r0, [r7, #36]	; 0x24
	buf->port = port;
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	8c3a      	ldrh	r2, [r7, #32]
 8000c32:	819a      	strh	r2, [r3, #12]
	addr->addr = address;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	601a      	str	r2, [r3, #0]
	err_t err;
	err  = netbuf_ref(buf, pointer, size);
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	68b9      	ldr	r1, [r7, #8]
 8000c40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c42:	f00b f8c3 	bl	800bdcc <netbuf_ref>
 8000c46:	4603      	mov	r3, r0
 8000c48:	74fb      	strb	r3, [r7, #19]
	if(err==ERR_OK)
 8000c4a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d108      	bne.n	8000c64 <Send+0x58>
	{
		netconn_sendto(conn, buf, addr, port);
 8000c52:	8c3b      	ldrh	r3, [r7, #32]
 8000c54:	683a      	ldr	r2, [r7, #0]
 8000c56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f009 fda9 	bl	800a7b0 <netconn_sendto>
		netbuf_delete(buf);
 8000c5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c60:	f00b f894 	bl	800bd8c <netbuf_delete>
	}
}
 8000c64:	bf00      	nop
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <ethernet_answer>:

//Возвращает кол-во байт для отправки клиенту
static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	460b      	mov	r3, r1
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	817b      	strh	r3, [r7, #10]
	int result = ModbusParse(data, data_length, answer, ETHERNET);
 8000c7a:	8979      	ldrh	r1, [r7, #10]
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	68f8      	ldr	r0, [r7, #12]
 8000c82:	f000 fc2d 	bl	80014e0 <ModbusParse>
 8000c86:	6178      	str	r0, [r7, #20]
	if(result)return result;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <ethernet_answer+0x26>
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	e000      	b.n	8000c94 <ethernet_answer+0x28>
	return 0;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000cac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <vApplicationGetIdleTaskMemory+0x30>)
 8000cb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2280      	movs	r2, #128	; 0x80
 8000cb8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000cba:	bf00      	nop
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	200000a0 	.word	0x200000a0
 8000ccc:	20000154 	.word	0x20000154

08000cd0 <task_init>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void task_init()
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af02      	add	r7, sp, #8
	size_t fre = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
	fre=xPortGetFreeHeapSize();
 8000cda:	f009 f99b 	bl	800a014 <xPortGetFreeHeapSize>
 8000cde:	6178      	str	r0, [r7, #20]
	sys_thread_new("eth_thread1", ethernet_thread, (void*)&port1, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce8:	4a19      	ldr	r2, [pc, #100]	; (8000d50 <task_init+0x80>)
 8000cea:	491a      	ldr	r1, [pc, #104]	; (8000d54 <task_init+0x84>)
 8000cec:	481a      	ldr	r0, [pc, #104]	; (8000d58 <task_init+0x88>)
 8000cee:	f016 fb25 	bl	801733c <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8000cf2:	f009 f98f 	bl	800a014 <xPortGetFreeHeapSize>
 8000cf6:	6178      	str	r0, [r7, #20]
	sys_thread_new("eth_thread2", ethernet_thread, (void*)&port2, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d00:	4a16      	ldr	r2, [pc, #88]	; (8000d5c <task_init+0x8c>)
 8000d02:	4914      	ldr	r1, [pc, #80]	; (8000d54 <task_init+0x84>)
 8000d04:	4816      	ldr	r0, [pc, #88]	; (8000d60 <task_init+0x90>)
 8000d06:	f016 fb19 	bl	801733c <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8000d0a:	f009 f983 	bl	800a014 <xPortGetFreeHeapSize>
 8000d0e:	6178      	str	r0, [r7, #20]
	sys_thread_new("uart_thread", uart_thread, (void*)NULL, 512, osPriorityNormal );
 8000d10:	2300      	movs	r3, #0
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d18:	2200      	movs	r2, #0
 8000d1a:	4912      	ldr	r1, [pc, #72]	; (8000d64 <task_init+0x94>)
 8000d1c:	4812      	ldr	r0, [pc, #72]	; (8000d68 <task_init+0x98>)
 8000d1e:	f016 fb0d 	bl	801733c <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8000d22:	f009 f977 	bl	800a014 <xPortGetFreeHeapSize>
 8000d26:	6178      	str	r0, [r7, #20]
	osMailQDef(uart_queue, UART_QUEUE_SIZE, Uart_Queue_Struct);
 8000d28:	2303      	movs	r3, #3
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	2310      	movs	r3, #16
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	60fb      	str	r3, [r7, #12]
	uart_queue = osMailCreate(osMailQ(uart_queue), NULL);
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f006 fcb8 	bl	80076b0 <osMailCreate>
 8000d40:	4603      	mov	r3, r0
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <task_init+0x9c>)
 8000d44:	6013      	str	r3, [r2, #0]
}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000000 	.word	0x20000000
 8000d54:	08000b1d 	.word	0x08000b1d
 8000d58:	08018570 	.word	0x08018570
 8000d5c:	20000002 	.word	0x20000002
 8000d60:	0801857c 	.word	0x0801857c
 8000d64:	08002181 	.word	0x08002181
 8000d68:	08018588 	.word	0x08018588
 8000d6c:	2000698c 	.word	0x2000698c

08000d70 <lcd_init>:


static void sendByte(uint8_t byte, int isData);

void lcd_init()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCDLED_GPIO_Port, LCDLED_Pin, SET);// Включаем подсветку
 8000d74:	2201      	movs	r2, #1
 8000d76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d7a:	481f      	ldr	r0, [pc, #124]	; (8000df8 <lcd_init+0x88>)
 8000d7c:	f003 fc0c 	bl	8004598 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCDR_GPIO_Port, LCDR_Pin, RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2110      	movs	r1, #16
 8000d84:	481c      	ldr	r0, [pc, #112]	; (8000df8 <lcd_init+0x88>)
 8000d86:	f003 fc07 	bl	8004598 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8000d8a:	200f      	movs	r0, #15
 8000d8c:	f001 fba2 	bl	80024d4 <HAL_Delay>

	sendByte(0x33, 0); // шлем в одном байте два 0011
 8000d90:	2100      	movs	r1, #0
 8000d92:	2033      	movs	r0, #51	; 0x33
 8000d94:	f000 f832 	bl	8000dfc <sendByte>
	HAL_Delay(1);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f001 fb9b 	bl	80024d4 <HAL_Delay>

	sendByte(0x32, 0); // шлем в одном байте  00110010
 8000d9e:	2100      	movs	r1, #0
 8000da0:	2032      	movs	r0, #50	; 0x32
 8000da2:	f000 f82b 	bl	8000dfc <sendByte>
	HAL_Delay(1);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f001 fb94 	bl	80024d4 <HAL_Delay>

	sendByte(DATA_BUS_4BIT_PAGE0, 0); // включаем режим 4 бит
 8000dac:	2100      	movs	r1, #0
 8000dae:	2028      	movs	r0, #40	; 0x28
 8000db0:	f000 f824 	bl	8000dfc <sendByte>
	HAL_Delay(1);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f001 fb8d 	bl	80024d4 <HAL_Delay>
	sendByte(DISPLAY_OFF, 0); // выключаем дисплей
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2008      	movs	r0, #8
 8000dbe:	f000 f81d 	bl	8000dfc <sendByte>
	HAL_Delay(1);
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f001 fb86 	bl	80024d4 <HAL_Delay>
	sendByte(CLEAR_DISPLAY, 0); // очищаем дисплей
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f000 f816 	bl	8000dfc <sendByte>
	HAL_Delay(2);
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	f001 fb7f 	bl	80024d4 <HAL_Delay>
	sendByte(ENTRY_MODE_SET, 0); //ставим режим смещение курсора экран не смещается
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2006      	movs	r0, #6
 8000dda:	f000 f80f 	bl	8000dfc <sendByte>
	HAL_Delay(1);
 8000dde:	2001      	movs	r0, #1
 8000de0:	f001 fb78 	bl	80024d4 <HAL_Delay>
	sendByte(DISPLAY_ON, 0);// включаем дисплей и убираем курсор
 8000de4:	2100      	movs	r1, #0
 8000de6:	200c      	movs	r0, #12
 8000de8:	f000 f808 	bl	8000dfc <sendByte>
	HAL_Delay(1);
 8000dec:	2001      	movs	r0, #1
 8000dee:	f001 fb71 	bl	80024d4 <HAL_Delay>



}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40020400 	.word	0x40020400

08000dfc <sendByte>:

static void sendByte(uint8_t byte, int isData)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD_PIN_MASK, RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	216f      	movs	r1, #111	; 0x6f
 8000e0c:	4841      	ldr	r0, [pc, #260]	; (8000f14 <sendByte+0x118>)
 8000e0e:	f003 fbc3 	bl	8004598 <HAL_GPIO_WritePin>

	if(isData == 1) HAL_GPIO_WritePin(LCDA_GPIO_Port, LCDA_Pin, SET); // если данные ставмим A
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d105      	bne.n	8000e24 <sendByte+0x28>
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2140      	movs	r1, #64	; 0x40
 8000e1c:	483d      	ldr	r0, [pc, #244]	; (8000f14 <sendByte+0x118>)
 8000e1e:	f003 fbbb 	bl	8004598 <HAL_GPIO_WritePin>
 8000e22:	e004      	b.n	8000e2e <sendByte+0x32>
	else HAL_GPIO_WritePin(LCDA_GPIO_Port, LCDA_Pin, RESET);		   // иначе скидываем A
 8000e24:	2200      	movs	r2, #0
 8000e26:	2140      	movs	r1, #64	; 0x40
 8000e28:	483a      	ldr	r0, [pc, #232]	; (8000f14 <sendByte+0x118>)
 8000e2a:	f003 fbb5 	bl	8004598 <HAL_GPIO_WritePin>

	// ставим старшую тетраду на порт
	if(byte & 0x80) HAL_GPIO_WritePin(LCD3_GPIO_Port, LCD3_Pin, SET);
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	da04      	bge.n	8000e40 <sendByte+0x44>
 8000e36:	2201      	movs	r2, #1
 8000e38:	2108      	movs	r1, #8
 8000e3a:	4836      	ldr	r0, [pc, #216]	; (8000f14 <sendByte+0x118>)
 8000e3c:	f003 fbac 	bl	8004598 <HAL_GPIO_WritePin>
	if(byte & 0x40) HAL_GPIO_WritePin(LCD2_GPIO_Port, LCD2_Pin, SET);
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d004      	beq.n	8000e54 <sendByte+0x58>
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	4831      	ldr	r0, [pc, #196]	; (8000f14 <sendByte+0x118>)
 8000e50:	f003 fba2 	bl	8004598 <HAL_GPIO_WritePin>
	if(byte & 0x20) HAL_GPIO_WritePin(LCD1_GPIO_Port, LCD1_Pin, SET);
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	f003 0320 	and.w	r3, r3, #32
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d004      	beq.n	8000e68 <sendByte+0x6c>
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2102      	movs	r1, #2
 8000e62:	482c      	ldr	r0, [pc, #176]	; (8000f14 <sendByte+0x118>)
 8000e64:	f003 fb98 	bl	8004598 <HAL_GPIO_WritePin>
	if(byte & 0x10) HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD0_Pin, SET);
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	f003 0310 	and.w	r3, r3, #16
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d004      	beq.n	8000e7c <sendByte+0x80>
 8000e72:	2201      	movs	r2, #1
 8000e74:	2101      	movs	r1, #1
 8000e76:	4827      	ldr	r0, [pc, #156]	; (8000f14 <sendByte+0x118>)
 8000e78:	f003 fb8e 	bl	8004598 <HAL_GPIO_WritePin>

	// поднимаем пин E
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, SET);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	2120      	movs	r1, #32
 8000e80:	4824      	ldr	r0, [pc, #144]	; (8000f14 <sendByte+0x118>)
 8000e82:	f003 fb89 	bl	8004598 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e86:	2001      	movs	r0, #1
 8000e88:	f001 fb24 	bl	80024d4 <HAL_Delay>
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, RESET); // сбрасываем пин Е
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2120      	movs	r1, #32
 8000e90:	4820      	ldr	r0, [pc, #128]	; (8000f14 <sendByte+0x118>)
 8000e92:	f003 fb81 	bl	8004598 <HAL_GPIO_WritePin>

	//обнуляем все пины дисплея кроме RS
	HAL_GPIO_WritePin(LCD0_GPIO_Port, (LCD_PIN_MASK & ~LCDA_Pin), RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	212f      	movs	r1, #47	; 0x2f
 8000e9a:	481e      	ldr	r0, [pc, #120]	; (8000f14 <sendByte+0x118>)
 8000e9c:	f003 fb7c 	bl	8004598 <HAL_GPIO_WritePin>

	// поднимаем пин E
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2120      	movs	r1, #32
 8000ea4:	481b      	ldr	r0, [pc, #108]	; (8000f14 <sendByte+0x118>)
 8000ea6:	f003 fb77 	bl	8004598 <HAL_GPIO_WritePin>
	if(byte & 0x08) HAL_GPIO_WritePin(LCD3_GPIO_Port, LCD3_Pin, SET);
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 0308 	and.w	r3, r3, #8
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d004      	beq.n	8000ebe <sendByte+0xc2>
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2108      	movs	r1, #8
 8000eb8:	4816      	ldr	r0, [pc, #88]	; (8000f14 <sendByte+0x118>)
 8000eba:	f003 fb6d 	bl	8004598 <HAL_GPIO_WritePin>
	if(byte & 0x04) HAL_GPIO_WritePin(LCD2_GPIO_Port, LCD2_Pin, SET);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d004      	beq.n	8000ed2 <sendByte+0xd6>
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2104      	movs	r1, #4
 8000ecc:	4811      	ldr	r0, [pc, #68]	; (8000f14 <sendByte+0x118>)
 8000ece:	f003 fb63 	bl	8004598 <HAL_GPIO_WritePin>
	if(byte & 0x02) HAL_GPIO_WritePin(LCD1_GPIO_Port, LCD1_Pin, SET);
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d004      	beq.n	8000ee6 <sendByte+0xea>
 8000edc:	2201      	movs	r2, #1
 8000ede:	2102      	movs	r1, #2
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <sendByte+0x118>)
 8000ee2:	f003 fb59 	bl	8004598 <HAL_GPIO_WritePin>
	if(byte & 0x01) HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD0_Pin, SET);
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d004      	beq.n	8000efa <sendByte+0xfe>
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	4807      	ldr	r0, [pc, #28]	; (8000f14 <sendByte+0x118>)
 8000ef6:	f003 fb4f 	bl	8004598 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, RESET); // сбрасываем пин Е
 8000efa:	2200      	movs	r2, #0
 8000efc:	2120      	movs	r1, #32
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <sendByte+0x118>)
 8000f00:	f003 fb4a 	bl	8004598 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f001 fae5 	bl	80024d4 <HAL_Delay>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40020400 	.word	0x40020400

08000f18 <sendStr>:


void sendStr( char *str, int row , int position )
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d817      	bhi.n	8000f5c <sendStr+0x44>
 8000f2c:	a201      	add	r2, pc, #4	; (adr r2, 8000f34 <sendStr+0x1c>)
 8000f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f32:	bf00      	nop
 8000f34:	08000f45 	.word	0x08000f45
 8000f38:	08000f4b 	.word	0x08000f4b
 8000f3c:	08000f51 	.word	0x08000f51
 8000f40:	08000f57 	.word	0x08000f57

	switch (row)
	{

		case 1:
			start_address = 0x0; // 1 строка
 8000f44:	2300      	movs	r3, #0
 8000f46:	75fb      	strb	r3, [r7, #23]
			break;
 8000f48:	e008      	b.n	8000f5c <sendStr+0x44>

		case 2:
			start_address = 0x40; // 2 строка
 8000f4a:	2340      	movs	r3, #64	; 0x40
 8000f4c:	75fb      	strb	r3, [r7, #23]
			break;
 8000f4e:	e005      	b.n	8000f5c <sendStr+0x44>

		case 3:
			start_address = 0x14; // 3 строка
 8000f50:	2314      	movs	r3, #20
 8000f52:	75fb      	strb	r3, [r7, #23]
			break;
 8000f54:	e002      	b.n	8000f5c <sendStr+0x44>

		case 4:
			start_address = 0x54; // 4 строка
 8000f56:	2354      	movs	r3, #84	; 0x54
 8000f58:	75fb      	strb	r3, [r7, #23]
			break;
 8000f5a:	bf00      	nop

	}

	start_address += position; // к началу строки прибавляем позицию в строке
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	4413      	add	r3, r2
 8000f64:	75fb      	strb	r3, [r7, #23]

	sendByte((start_address |= SET_DDRAM_ADDRESS), 0); // ставим курсор на начало нужной строки  в DDRAM
 8000f66:	7dfb      	ldrb	r3, [r7, #23]
 8000f68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f6c:	75fb      	strb	r3, [r7, #23]
 8000f6e:	7dfb      	ldrb	r3, [r7, #23]
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff42 	bl	8000dfc <sendByte>

	HAL_Delay(4);
 8000f78:	2004      	movs	r0, #4
 8000f7a:	f001 faab 	bl	80024d4 <HAL_Delay>
	while(*str != '\0'){
 8000f7e:	e008      	b.n	8000f92 <sendStr+0x7a>

		sendByte(*str, 1);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2101      	movs	r1, #1
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff38 	bl	8000dfc <sendByte>
		str++;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	60fb      	str	r3, [r7, #12]
	while(*str != '\0'){
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f2      	bne.n	8000f80 <sendStr+0x68>
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa4:	b5b0      	push	{r4, r5, r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	ModbusInit();
 8000faa:	f000 fa71 	bl	8001490 <ModbusInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fae:	f001 fa4f 	bl	8002450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb2:	f000 f84d 	bl	8001050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb6:	f000 f937 	bl	8001228 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000fba:	f000 f8b9 	bl	8001130 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000fbe:	f000 f90b 	bl	80011d8 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8000fc2:	f000 f8df 	bl	8001184 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000fc6:	f7ff fed3 	bl	8000d70 <lcd_init>
  sendStr("HELLO, KONVELS",1,0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2101      	movs	r1, #1
 8000fce:	4819      	ldr	r0, [pc, #100]	; (8001034 <main+0x90>)
 8000fd0:	f7ff ffa2 	bl	8000f18 <sendStr>
  sendStr("POWERED BY", 2,0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	4817      	ldr	r0, [pc, #92]	; (8001038 <main+0x94>)
 8000fda:	f7ff ff9d 	bl	8000f18 <sendStr>
  sendStr("STM32F407VG",3,0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2103      	movs	r1, #3
 8000fe2:	4816      	ldr	r0, [pc, #88]	; (800103c <main+0x98>)
 8000fe4:	f7ff ff98 	bl	8000f18 <sendStr>
  sendStr("I AM ROBOT", 4,0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2104      	movs	r1, #4
 8000fec:	4814      	ldr	r0, [pc, #80]	; (8001040 <main+0x9c>)
 8000fee:	f7ff ff93 	bl	8000f18 <sendStr>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of writeMemorySemaphore */
  osSemaphoreDef(writeMemorySemaphore);
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	623b      	str	r3, [r7, #32]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  writeMemorySemaphoreHandle = osSemaphoreCreate(osSemaphore(writeMemorySemaphore), 1);
 8000ffa:	f107 0320 	add.w	r3, r7, #32
 8000ffe:	2101      	movs	r1, #1
 8001000:	4618      	mov	r0, r3
 8001002:	f006 f953 	bl	80072ac <osSemaphoreCreate>
 8001006:	4603      	mov	r3, r0
 8001008:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <main+0xa0>)
 800100a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <main+0xa4>)
 800100e:	1d3c      	adds	r4, r7, #4
 8001010:	461d      	mov	r5, r3
 8001012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001016:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800101a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f006 f845 	bl	80070b2 <osThreadCreate>
 8001028:	4603      	mov	r3, r0
 800102a:	4a08      	ldr	r2, [pc, #32]	; (800104c <main+0xa8>)
 800102c:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800102e:	f006 f829 	bl	8007084 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001032:	e7fe      	b.n	8001032 <main+0x8e>
 8001034:	080185a0 	.word	0x080185a0
 8001038:	080185b0 	.word	0x080185b0
 800103c:	080185bc 	.word	0x080185bc
 8001040:	080185c8 	.word	0x080185c8
 8001044:	20006a98 	.word	0x20006a98
 8001048:	080185d4 	.word	0x080185d4
 800104c:	20006990 	.word	0x20006990

08001050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b094      	sub	sp, #80	; 0x50
 8001054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	f107 0320 	add.w	r3, r7, #32
 800105a:	2230      	movs	r2, #48	; 0x30
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f016 faee 	bl	8017640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <SystemClock_Config+0xd8>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	4a2a      	ldr	r2, [pc, #168]	; (8001128 <SystemClock_Config+0xd8>)
 800107e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001082:	6413      	str	r3, [r2, #64]	; 0x40
 8001084:	4b28      	ldr	r3, [pc, #160]	; (8001128 <SystemClock_Config+0xd8>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	4b25      	ldr	r3, [pc, #148]	; (800112c <SystemClock_Config+0xdc>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a24      	ldr	r2, [pc, #144]	; (800112c <SystemClock_Config+0xdc>)
 800109a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	4b22      	ldr	r3, [pc, #136]	; (800112c <SystemClock_Config+0xdc>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ac:	2301      	movs	r3, #1
 80010ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b6:	2302      	movs	r3, #2
 80010b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010c0:	2319      	movs	r3, #25
 80010c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010ce:	2304      	movs	r3, #4
 80010d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d2:	f107 0320 	add.w	r3, r7, #32
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 fa78 	bl	80045cc <HAL_RCC_OscConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010e2:	f000 f9c7 	bl	8001474 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e6:	230f      	movs	r3, #15
 80010e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ea:	2302      	movs	r3, #2
 80010ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	2105      	movs	r1, #5
 8001104:	4618      	mov	r0, r3
 8001106:	f003 fcd9 	bl	8004abc <HAL_RCC_ClockConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001110:	f000 f9b0 	bl	8001474 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800111a:	2000      	movs	r0, #0
 800111c:	f003 fdb4 	bl	8004c88 <HAL_RCC_MCOConfig>
}
 8001120:	bf00      	nop
 8001122:	3750      	adds	r7, #80	; 0x50
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800
 800112c:	40007000 	.word	0x40007000

08001130 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_USART1_UART_Init+0x4c>)
 8001136:	4a12      	ldr	r2, [pc, #72]	; (8001180 <MX_USART1_UART_Init+0x50>)
 8001138:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <MX_USART1_UART_Init+0x4c>)
 800113c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001140:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_USART1_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_USART1_UART_Init+0x4c>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <MX_USART1_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_USART1_UART_Init+0x4c>)
 8001156:	220c      	movs	r2, #12
 8001158:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <MX_USART1_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_USART1_UART_Init+0x4c>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_USART1_UART_Init+0x4c>)
 8001168:	f004 f9c0 	bl	80054ec <HAL_UART_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001172:	f000 f97f 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20006a54 	.word	0x20006a54
 8001180:	40011000 	.word	0x40011000

08001184 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_USART6_UART_Init+0x4c>)
 800118a:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <MX_USART6_UART_Init+0x50>)
 800118c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_USART6_UART_Init+0x4c>)
 8001190:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001194:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_USART6_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_USART6_UART_Init+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <MX_USART6_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_USART6_UART_Init+0x4c>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <MX_USART6_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_USART6_UART_Init+0x4c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_USART6_UART_Init+0x4c>)
 80011bc:	f004 f996 	bl	80054ec <HAL_UART_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80011c6:	f000 f955 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20006a9c 	.word	0x20006a9c
 80011d4:	40011400 	.word	0x40011400

080011d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <MX_DMA_Init+0x4c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a0f      	ldr	r2, [pc, #60]	; (8001224 <MX_DMA_Init+0x4c>)
 80011e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <MX_DMA_Init+0x4c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2105      	movs	r1, #5
 80011fe:	2039      	movs	r0, #57	; 0x39
 8001200:	f001 fa44 	bl	800268c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001204:	2039      	movs	r0, #57	; 0x39
 8001206:	f001 fa5d 	bl	80026c4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2105      	movs	r1, #5
 800120e:	203a      	movs	r0, #58	; 0x3a
 8001210:	f001 fa3c 	bl	800268c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001214:	203a      	movs	r0, #58	; 0x3a
 8001216:	f001 fa55 	bl	80026c4 <HAL_NVIC_EnableIRQ>

}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800

08001228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08c      	sub	sp, #48	; 0x30
 800122c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	61bb      	str	r3, [r7, #24]
 8001242:	4b76      	ldr	r3, [pc, #472]	; (800141c <MX_GPIO_Init+0x1f4>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a75      	ldr	r2, [pc, #468]	; (800141c <MX_GPIO_Init+0x1f4>)
 8001248:	f043 0310 	orr.w	r3, r3, #16
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b73      	ldr	r3, [pc, #460]	; (800141c <MX_GPIO_Init+0x1f4>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	61bb      	str	r3, [r7, #24]
 8001258:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	4b6f      	ldr	r3, [pc, #444]	; (800141c <MX_GPIO_Init+0x1f4>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a6e      	ldr	r2, [pc, #440]	; (800141c <MX_GPIO_Init+0x1f4>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b6c      	ldr	r3, [pc, #432]	; (800141c <MX_GPIO_Init+0x1f4>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b68      	ldr	r3, [pc, #416]	; (800141c <MX_GPIO_Init+0x1f4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a67      	ldr	r2, [pc, #412]	; (800141c <MX_GPIO_Init+0x1f4>)
 8001280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b65      	ldr	r3, [pc, #404]	; (800141c <MX_GPIO_Init+0x1f4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b61      	ldr	r3, [pc, #388]	; (800141c <MX_GPIO_Init+0x1f4>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a60      	ldr	r2, [pc, #384]	; (800141c <MX_GPIO_Init+0x1f4>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b5e      	ldr	r3, [pc, #376]	; (800141c <MX_GPIO_Init+0x1f4>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	4b5a      	ldr	r3, [pc, #360]	; (800141c <MX_GPIO_Init+0x1f4>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a59      	ldr	r2, [pc, #356]	; (800141c <MX_GPIO_Init+0x1f4>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b57      	ldr	r3, [pc, #348]	; (800141c <MX_GPIO_Init+0x1f4>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b53      	ldr	r3, [pc, #332]	; (800141c <MX_GPIO_Init+0x1f4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a52      	ldr	r2, [pc, #328]	; (800141c <MX_GPIO_Init+0x1f4>)
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b50      	ldr	r3, [pc, #320]	; (800141c <MX_GPIO_Init+0x1f4>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD0_Pin|LCD1_Pin|LCD2_Pin|DOUT_9_Pin
 80012e6:	2200      	movs	r2, #0
 80012e8:	f24c 417f 	movw	r1, #50303	; 0xc47f
 80012ec:	484c      	ldr	r0, [pc, #304]	; (8001420 <MX_GPIO_Init+0x1f8>)
 80012ee:	f003 f953 	bl	8004598 <HAL_GPIO_WritePin>
                          |LED_Pin|LCDLED_Pin|LCD3_Pin|LCDR_Pin
                          |LCDE_Pin|LCDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 80012f2:	2200      	movs	r2, #0
 80012f4:	f64f 7180 	movw	r1, #65408	; 0xff80
 80012f8:	484a      	ldr	r0, [pc, #296]	; (8001424 <MX_GPIO_Init+0x1fc>)
 80012fa:	f003 f94d 	bl	8004598 <HAL_GPIO_WritePin>
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DOUT_10_Pin|DOUT_11_Pin, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001304:	4848      	ldr	r0, [pc, #288]	; (8001428 <MX_GPIO_Init+0x200>)
 8001306:	f003 f947 	bl	8004598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001310:	4846      	ldr	r0, [pc, #280]	; (800142c <MX_GPIO_Init+0x204>)
 8001312:	f003 f941 	bl	8004598 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIN_4_Pin DIN_5_Pin DIN_6_Pin DIN_7_Pin
                           DIN_8_Pin DIN_2_Pin DIN_3_Pin */
  GPIO_InitStruct.Pin = DIN_4_Pin|DIN_5_Pin|DIN_6_Pin|DIN_7_Pin
 8001316:	237f      	movs	r3, #127	; 0x7f
 8001318:	61fb      	str	r3, [r7, #28]
                          |DIN_8_Pin|DIN_2_Pin|DIN_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	483e      	ldr	r0, [pc, #248]	; (8001424 <MX_GPIO_Init+0x1fc>)
 800132a:	f002 ff81 	bl	8004230 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_9_Pin DIN_10_Pin DIN_11_Pin */
  GPIO_InitStruct.Pin = DIN_9_Pin|DIN_10_Pin|DIN_11_Pin;
 800132e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001334:	2300      	movs	r3, #0
 8001336:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	483a      	ldr	r0, [pc, #232]	; (800142c <MX_GPIO_Init+0x204>)
 8001344:	f002 ff74 	bl	8004230 <HAL_GPIO_Init>

  /*Configure GPIO pin : ERESET_Pin */
  GPIO_InitStruct.Pin = ERESET_Pin;
 8001348:	2301      	movs	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134c:	2303      	movs	r3, #3
 800134e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ERESET_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	4835      	ldr	r0, [pc, #212]	; (8001430 <MX_GPIO_Init+0x208>)
 800135c:	f002 ff68 	bl	8004230 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD0_Pin LCD1_Pin LCD2_Pin DOUT_9_Pin
                           LED_Pin LCDLED_Pin LCD3_Pin LCDR_Pin
                           LCDE_Pin LCDA_Pin */
  GPIO_InitStruct.Pin = LCD0_Pin|LCD1_Pin|LCD2_Pin|DOUT_9_Pin
 8001360:	f24c 437f 	movw	r3, #50303	; 0xc47f
 8001364:	61fb      	str	r3, [r7, #28]
                          |LED_Pin|LCDLED_Pin|LCD3_Pin|LCDR_Pin
                          |LCDE_Pin|LCDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001366:	2301      	movs	r3, #1
 8001368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4619      	mov	r1, r3
 8001378:	4829      	ldr	r0, [pc, #164]	; (8001420 <MX_GPIO_Init+0x1f8>)
 800137a:	f002 ff59 	bl	8004230 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_0_Pin DOUT_1_Pin DOUT_2_Pin DOUT_3_Pin
                           DOUT_4_Pin DOUT_5_Pin DOUT_6_Pin DOUT_7_Pin
                           DOUT_8_Pin */
  GPIO_InitStruct.Pin = DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 800137e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001382:	61fb      	str	r3, [r7, #28]
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	2301      	movs	r3, #1
 8001386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	4619      	mov	r1, r3
 8001396:	4823      	ldr	r0, [pc, #140]	; (8001424 <MX_GPIO_Init+0x1fc>)
 8001398:	f002 ff4a 	bl	8004230 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_10_Pin DOUT_11_Pin */
  GPIO_InitStruct.Pin = DOUT_10_Pin|DOUT_11_Pin;
 800139c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	481c      	ldr	r0, [pc, #112]	; (8001428 <MX_GPIO_Init+0x200>)
 80013b6:	f002 ff3b 	bl	8004230 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_TX_Pin */
  GPIO_InitStruct.Pin = RS485_TX_Pin;
 80013ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	4816      	ldr	r0, [pc, #88]	; (800142c <MX_GPIO_Init+0x204>)
 80013d4:	f002 ff2c 	bl	8004230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	480e      	ldr	r0, [pc, #56]	; (8001430 <MX_GPIO_Init+0x208>)
 80013f6:	f002 ff1b 	bl	8004230 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_0_Pin DIN_1_Pin */
  GPIO_InitStruct.Pin = DIN_0_Pin|DIN_1_Pin;
 80013fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	4619      	mov	r1, r3
 800140e:	4804      	ldr	r0, [pc, #16]	; (8001420 <MX_GPIO_Init+0x1f8>)
 8001410:	f002 ff0e 	bl	8004230 <HAL_GPIO_Init>

}
 8001414:	bf00      	nop
 8001416:	3730      	adds	r7, #48	; 0x30
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800
 8001420:	40020400 	.word	0x40020400
 8001424:	40021000 	.word	0x40021000
 8001428:	40020c00 	.word	0x40020c00
 800142c:	40020800 	.word	0x40020800
 8001430:	40020000 	.word	0x40020000

08001434 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800143c:	f005 f8da 	bl	80065f4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  task_init();
 8001440:	f7ff fc46 	bl	8000cd0 <task_init>

  /* Infinite loop */
  for(;;)
  {
	main_process();
 8001444:	f000 f81b 	bl	800147e <main_process>
    osDelay(1);
 8001448:	2001      	movs	r0, #1
 800144a:	f005 fe7e 	bl	800714a <osDelay>
	main_process();
 800144e:	e7f9      	b.n	8001444 <StartDefaultTask+0x10>

08001450 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a04      	ldr	r2, [pc, #16]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d101      	bne.n	8001466 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001462:	f001 f817 	bl	8002494 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40010000 	.word	0x40010000

08001474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001478:	b672      	cpsid	i
}
 800147a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800147c:	e7fe      	b.n	800147c <Error_Handler+0x8>

0800147e <main_process>:
 */
#include <string.h>
#include <dio.h>

void main_process()
{
 800147e:	b580      	push	{r7, lr}
 8001480:	af00      	add	r7, sp, #0
	Read_Inputs();
 8001482:	f7ff f889 	bl	8000598 <Read_Inputs>
	Write_Outputs();
 8001486:	f7ff f9d3 	bl	8000830 <Write_Outputs>
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <ModbusInit>:
static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source);
static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source);
static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource));

void ModbusInit()
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
	holding_pointer = (uint16_t*)&settings;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <ModbusInit+0x38>)
 8001496:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <ModbusInit+0x3c>)
 8001498:	601a      	str	r2, [r3, #0]
	reading_pointer = (uint16_t*)&meas_data;
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <ModbusInit+0x40>)
 800149c:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <ModbusInit+0x44>)
 800149e:	601a      	str	r2, [r3, #0]
	holding_size = sizeof(settings)/2;
 80014a0:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <ModbusInit+0x48>)
 80014a2:	223c      	movs	r2, #60	; 0x3c
 80014a4:	801a      	strh	r2, [r3, #0]
	reading_size = sizeof(meas_data)/2;
 80014a6:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <ModbusInit+0x4c>)
 80014a8:	222c      	movs	r2, #44	; 0x2c
 80014aa:	801a      	strh	r2, [r3, #0]
	if(settings.mb_addr==0)settings.mb_addr = 1;
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <ModbusInit+0x3c>)
 80014ae:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d103      	bne.n	80014be <ModbusInit+0x2e>
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <ModbusInit+0x3c>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	20000354 	.word	0x20000354
 80014cc:	20006ae0 	.word	0x20006ae0
 80014d0:	20000358 	.word	0x20000358
 80014d4:	20006b58 	.word	0x20006b58
 80014d8:	2000035c 	.word	0x2000035c
 80014dc:	2000035e 	.word	0x2000035e

080014e0 <ModbusParse>:


//Ф-я парсинга входящего буфера, если это Modbus, то возвращает кол-во байт
int ModbusParse(uint8_t *request, uint16_t req_length, uint8_t *answer, ModbusSource source)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	461a      	mov	r2, r3
 80014ec:	460b      	mov	r3, r1
 80014ee:	817b      	strh	r3, [r7, #10]
 80014f0:	4613      	mov	r3, r2
 80014f2:	727b      	strb	r3, [r7, #9]
	settings.data[37]++;
 80014f4:	4b26      	ldr	r3, [pc, #152]	; (8001590 <ModbusParse+0xb0>)
 80014f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80014fa:	3301      	adds	r3, #1
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	4b24      	ldr	r3, [pc, #144]	; (8001590 <ModbusParse+0xb0>)
 8001500:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	if(answer==NULL)return 0; // Проверка, выделилась ли память под ответ
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <ModbusParse+0x2e>
 800150a:	2300      	movs	r3, #0
 800150c:	e03c      	b.n	8001588 <ModbusParse+0xa8>
	if(!CheckRequestLength(request,req_length,source))return 0; // Проверка корректности длины пакета
 800150e:	897b      	ldrh	r3, [r7, #10]
 8001510:	7a7a      	ldrb	r2, [r7, #9]
 8001512:	4619      	mov	r1, r3
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f000 f83d 	bl	8001594 <CheckRequestLength>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <ModbusParse+0x44>
 8001520:	2300      	movs	r3, #0
 8001522:	e031      	b.n	8001588 <ModbusParse+0xa8>
	if(!CheckMbAddr(request, source))return 0; // Проверка корректности адреса
 8001524:	7a7b      	ldrb	r3, [r7, #9]
 8001526:	4619      	mov	r1, r3
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 f857 	bl	80015dc <CheckMbAddr>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <ModbusParse+0x58>
 8001534:	2300      	movs	r3, #0
 8001536:	e027      	b.n	8001588 <ModbusParse+0xa8>
	if(!IsCorrectMbCommand(request, source))// Проверка корректности функционального кода
 8001538:	7a7b      	ldrb	r3, [r7, #9]
 800153a:	4619      	mov	r1, r3
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 f875 	bl	800162c <IsCorrectMbCommand>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d107      	bne.n	8001558 <ModbusParse+0x78>
	{
		return SetInvalidCommand(request, answer, 1, source);
 8001548:	7a7b      	ldrb	r3, [r7, #9]
 800154a:	2201      	movs	r2, #1
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f000 f8a0 	bl	8001694 <SetInvalidCommand>
 8001554:	4603      	mov	r3, r0
 8001556:	e017      	b.n	8001588 <ModbusParse+0xa8>
	}
	if(!CheckCrc(request, req_length, source))
 8001558:	897b      	ldrh	r3, [r7, #10]
 800155a:	7a7a      	ldrb	r2, [r7, #9]
 800155c:	4619      	mov	r1, r3
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f000 f941 	bl	80017e6 <CheckCrc>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d107      	bne.n	800157a <ModbusParse+0x9a>
	{
		return SetInvalidCommand(request, answer, 3, source);
 800156a:	7a7b      	ldrb	r3, [r7, #9]
 800156c:	2203      	movs	r2, #3
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f000 f88f 	bl	8001694 <SetInvalidCommand>
 8001576:	4603      	mov	r3, r0
 8001578:	e006      	b.n	8001588 <ModbusParse+0xa8>
	}
	return GetModbusAnswer(request, answer, source);
 800157a:	7a7b      	ldrb	r3, [r7, #9]
 800157c:	461a      	mov	r2, r3
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f000 f965 	bl	8001850 <GetModbusAnswer>
 8001586:	4603      	mov	r3, r0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20006ae0 	.word	0x20006ae0

08001594 <CheckRequestLength>:

//Проверка соответствия длины данных, передаваемых в буфере
static uint8_t CheckRequestLength(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 8001594:	b480      	push	{r7}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	4613      	mov	r3, r2
 80015a0:	71fb      	strb	r3, [r7, #7]
	if(source==RS485)return 1;
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <CheckRequestLength+0x18>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e010      	b.n	80015ce <CheckRequestLength+0x3a>
    int len_from_packet = (*(request_pointer+4))*256 + *(request_pointer+5);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3304      	adds	r3, #4
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	3205      	adds	r2, #5
 80015b8:	7812      	ldrb	r2, [r2, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	617b      	str	r3, [r7, #20]
    return len_from_packet+6 == request_length;
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3306      	adds	r3, #6
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	bf0c      	ite	eq
 80015c8:	2301      	moveq	r3, #1
 80015ca:	2300      	movne	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	371c      	adds	r7, #28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <CheckMbAddr>:

//Проверка соответсия адреса в сети Modbus сервера
static uint8_t CheckMbAddr(uint8_t *request,ModbusSource source)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	70fb      	strb	r3, [r7, #3]
	uint8_t addr = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d103      	bne.n	80015fa <CheckMbAddr+0x1e>
	{
		addr =  *(request+6);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	799b      	ldrb	r3, [r3, #6]
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	e005      	b.n	8001606 <CheckMbAddr+0x2a>
	}
	else if(source==RS485)
 80015fa:	78fb      	ldrb	r3, [r7, #3]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <CheckMbAddr+0x2a>
	{
		addr =  *(request);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	73fb      	strb	r3, [r7, #15]
	}
	return addr == settings.mb_addr;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	b29a      	uxth	r2, r3
 800160a:	4b07      	ldr	r3, [pc, #28]	; (8001628 <CheckMbAddr+0x4c>)
 800160c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8001610:	429a      	cmp	r2, r3
 8001612:	bf0c      	ite	eq
 8001614:	2301      	moveq	r3, #1
 8001616:	2300      	movne	r3, #0
 8001618:	b2db      	uxtb	r3, r3
}
 800161a:	4618      	mov	r0, r3
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20006ae0 	.word	0x20006ae0

0800162c <IsCorrectMbCommand>:

//Проверка корректности функционального кода
static uint8_t IsCorrectMbCommand(uint8_t *request,ModbusSource source)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 800163c:	78fb      	ldrb	r3, [r7, #3]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d103      	bne.n	800164a <IsCorrectMbCommand+0x1e>
	{
		cmd = *(request+7);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	79db      	ldrb	r3, [r3, #7]
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	e005      	b.n	8001656 <IsCorrectMbCommand+0x2a>
	}
	else if(source==RS485)
 800164a:	78fb      	ldrb	r3, [r7, #3]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d102      	bne.n	8001656 <IsCorrectMbCommand+0x2a>
	{
		cmd = *(request+1);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	785b      	ldrb	r3, [r3, #1]
 8001654:	73fb      	strb	r3, [r7, #15]
	}
	/*
	 * Функция возвращает 1, если номер команды корректен, 0 - если некорректен
	 * cmd - номер команды
	 * */
	switch (cmd) {
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	2b10      	cmp	r3, #16
 800165a:	bf8c      	ite	hi
 800165c:	2201      	movhi	r2, #1
 800165e:	2200      	movls	r2, #0
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	2a00      	cmp	r2, #0
 8001664:	d10c      	bne.n	8001680 <IsCorrectMbCommand+0x54>
 8001666:	2201      	movs	r2, #1
 8001668:	409a      	lsls	r2, r3
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <IsCorrectMbCommand+0x64>)
 800166c:	4013      	ands	r3, r2
 800166e:	2b00      	cmp	r3, #0
 8001670:	bf14      	ite	ne
 8001672:	2301      	movne	r3, #1
 8001674:	2300      	moveq	r3, #0
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <IsCorrectMbCommand+0x54>
		case 3:
		case 4:
		case 6:
		//case 5:
        case 16:
            return 1;
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <IsCorrectMbCommand+0x56>
		default:
			return 0;
 8001680:	2300      	movs	r3, #0
	}
}
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	00010058 	.word	0x00010058

08001694 <SetInvalidCommand>:

//Формирует телеграмму ошиобного запроса
static int SetInvalidCommand(uint8_t *request, uint8_t *answer, uint8_t code, ModbusSource source)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	4611      	mov	r1, r2
 80016a0:	461a      	mov	r2, r3
 80016a2:	460b      	mov	r3, r1
 80016a4:	71fb      	strb	r3, [r7, #7]
 80016a6:	4613      	mov	r3, r2
 80016a8:	71bb      	strb	r3, [r7, #6]
	uint8_t func_code = source ? *(request+1) : *(request+1);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	785b      	ldrb	r3, [r3, #1]
 80016ae:	75fb      	strb	r3, [r7, #23]
	func_code = set_bit(func_code, 7);
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	2107      	movs	r1, #7
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe ff56 	bl	8000568 <set_bit>
 80016bc:	4603      	mov	r3, r0
 80016be:	75fb      	strb	r3, [r7, #23]
	if(source==RS485)
 80016c0:	79bb      	ldrb	r3, [r7, #6]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d11d      	bne.n	8001702 <SetInvalidCommand+0x6e>
	{
		uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 80016c6:	2300      	movs	r3, #0
 80016c8:	82bb      	strh	r3, [r7, #20]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	781a      	ldrb	r2, [r3, #0]
		memcpy(answer,request,1);
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	701a      	strb	r2, [r3, #0]
		*(answer+1) = func_code;//Функциональный код с измененным битом
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	3301      	adds	r3, #1
 80016d6:	7dfa      	ldrb	r2, [r7, #23]
 80016d8:	701a      	strb	r2, [r3, #0]
		*(answer+2) = code;//Функциональный код с измененным битом
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	3302      	adds	r3, #2
 80016de:	79fa      	ldrb	r2, [r7, #7]
 80016e0:	701a      	strb	r2, [r3, #0]
		CRC16_CALC(answer,check_sum,3);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	2203      	movs	r2, #3
 80016e8:	4619      	mov	r1, r3
 80016ea:	68b8      	ldr	r0, [r7, #8]
 80016ec:	f000 f832 	bl	8001754 <CRC16_CALC>
		*(answer+3) = check_sum[0];
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	3303      	adds	r3, #3
 80016f4:	7d3a      	ldrb	r2, [r7, #20]
 80016f6:	701a      	strb	r2, [r3, #0]
		*(answer+4) = check_sum[1];
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	3304      	adds	r3, #4
 80016fc:	7d7a      	ldrb	r2, [r7, #21]
 80016fe:	701a      	strb	r2, [r3, #0]
 8001700:	e01c      	b.n	800173c <SetInvalidCommand+0xa8>
	}
	else if(source==ETHERNET)
 8001702:	79bb      	ldrb	r3, [r7, #6]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d119      	bne.n	800173c <SetInvalidCommand+0xa8>
	{
		memcpy(answer,request,8);
 8001708:	2208      	movs	r2, #8
 800170a:	68f9      	ldr	r1, [r7, #12]
 800170c:	68b8      	ldr	r0, [r7, #8]
 800170e:	f015 ff89 	bl	8017624 <memcpy>
		*(answer+4) = 0;
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	3304      	adds	r3, #4
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
		*(answer+5) = 3;
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	3305      	adds	r3, #5
 800171e:	2203      	movs	r2, #3
 8001720:	701a      	strb	r2, [r3, #0]
		*(answer+7) |= 128;
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	3307      	adds	r3, #7
 8001726:	781a      	ldrb	r2, [r3, #0]
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	3307      	adds	r3, #7
 800172c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	701a      	strb	r2, [r3, #0]
		*(answer+8) = code;
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	3308      	adds	r3, #8
 8001738:	79fa      	ldrb	r2, [r7, #7]
 800173a:	701a      	strb	r2, [r3, #0]
	}

	uint8_t len = source==RS485 ? 5 : 9;
 800173c:	79bb      	ldrb	r3, [r7, #6]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <SetInvalidCommand+0xb2>
 8001742:	2305      	movs	r3, #5
 8001744:	e000      	b.n	8001748 <SetInvalidCommand+0xb4>
 8001746:	2309      	movs	r3, #9
 8001748:	75bb      	strb	r3, [r7, #22]
	return len;
 800174a:	7dbb      	ldrb	r3, [r7, #22]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <CRC16_CALC>:

static void CRC16_CALC(uint8_t* arr, uint8_t* checkSum, uint8_t messageLength)
{
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	4613      	mov	r3, r2
 8001760:	71fb      	strb	r3, [r7, #7]
	/*Функция расчета контрольной суммы
		 * arr - указатель на массив байт, по которым нужно посчитать CRC
		 * checkSum - указатель на массив из 2 байт, куда нужно положить CRC
		 * messageLength - ко-во байт, по которым нужно считать CRC	 *
		 * */
		uint16_t reg = 0xFFFF;
 8001762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001766:	83fb      	strh	r3, [r7, #30]
		uint16_t polinom = 0xA001;
 8001768:	f24a 0301 	movw	r3, #40961	; 0xa001
 800176c:	827b      	strh	r3, [r7, #18]
		for(int i=0;i < messageLength;i++)
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
 8001772:	e023      	b.n	80017bc <CRC16_CALC+0x68>
		{
			reg^=*(arr+i);
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4413      	add	r3, r2
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b29a      	uxth	r2, r3
 800177e:	8bfb      	ldrh	r3, [r7, #30]
 8001780:	4053      	eors	r3, r2
 8001782:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	e012      	b.n	80017b0 <CRC16_CALC+0x5c>
			{
				if ((reg&1)==1) {
 800178a:	8bfb      	ldrh	r3, [r7, #30]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	d007      	beq.n	80017a4 <CRC16_CALC+0x50>
					reg>>=1;
 8001794:	8bfb      	ldrh	r3, [r7, #30]
 8001796:	085b      	lsrs	r3, r3, #1
 8001798:	83fb      	strh	r3, [r7, #30]
					reg^=polinom;
 800179a:	8bfa      	ldrh	r2, [r7, #30]
 800179c:	8a7b      	ldrh	r3, [r7, #18]
 800179e:	4053      	eors	r3, r2
 80017a0:	83fb      	strh	r3, [r7, #30]
 80017a2:	e002      	b.n	80017aa <CRC16_CALC+0x56>
				}
				else reg>>=1;
 80017a4:	8bfb      	ldrh	r3, [r7, #30]
 80017a6:	085b      	lsrs	r3, r3, #1
 80017a8:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3301      	adds	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	2b07      	cmp	r3, #7
 80017b4:	dde9      	ble.n	800178a <CRC16_CALC+0x36>
		for(int i=0;i < messageLength;i++)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	3301      	adds	r3, #1
 80017ba:	61bb      	str	r3, [r7, #24]
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	dbd7      	blt.n	8001774 <CRC16_CALC+0x20>
			}
		}
		*(checkSum+1)=(uint8_t)(reg>>8);
 80017c4:	8bfb      	ldrh	r3, [r7, #30]
 80017c6:	0a1b      	lsrs	r3, r3, #8
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	3301      	adds	r3, #1
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	701a      	strb	r2, [r3, #0]
		*checkSum = (uint8_t)(reg & 0x00FF);
 80017d2:	8bfb      	ldrh	r3, [r7, #30]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	701a      	strb	r2, [r3, #0]
}
 80017da:	bf00      	nop
 80017dc:	3724      	adds	r7, #36	; 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <CheckCrc>:

//Проверка контрольной суммы запроса
static uint8_t CheckCrc(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	4613      	mov	r3, r2
 80017f2:	71fb      	strb	r3, [r7, #7]
	if(source==ETHERNET)return 1;
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d101      	bne.n	80017fe <CheckCrc+0x18>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e024      	b.n	8001848 <CheckCrc+0x62>
	uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 80017fe:	2300      	movs	r3, #0
 8001800:	82bb      	strh	r3, [r7, #20]
	if(request_length<4)return 0;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2b03      	cmp	r3, #3
 8001806:	dc01      	bgt.n	800180c <CheckCrc+0x26>
 8001808:	2300      	movs	r3, #0
 800180a:	e01d      	b.n	8001848 <CheckCrc+0x62>
	CRC16_CALC(request_pointer, check_sum, request_length-2);
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	3b02      	subs	r3, #2
 8001812:	b2da      	uxtb	r2, r3
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f7ff ff9a 	bl	8001754 <CRC16_CALC>
	return request_pointer[request_length-2]==check_sum[0] && request_pointer[request_length-1]==check_sum[1];
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	3b02      	subs	r3, #2
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	781a      	ldrb	r2, [r3, #0]
 800182a:	7d3b      	ldrb	r3, [r7, #20]
 800182c:	429a      	cmp	r2, r3
 800182e:	d109      	bne.n	8001844 <CheckCrc+0x5e>
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	3b01      	subs	r3, #1
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	4413      	add	r3, r2
 8001838:	781a      	ldrb	r2, [r3, #0]
 800183a:	7d7b      	ldrb	r3, [r7, #21]
 800183c:	429a      	cmp	r2, r3
 800183e:	d101      	bne.n	8001844 <CheckCrc+0x5e>
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <CheckCrc+0x60>
 8001844:	2300      	movs	r3, #0
 8001846:	b2db      	uxtb	r3, r3
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <GetModbusAnswer>:

//Возвращает кол-во байт, котрые нужно передать обратно
static int GetModbusAnswer(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af02      	add	r7, sp, #8
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	4613      	mov	r3, r2
 800185c:	71fb      	strb	r3, [r7, #7]
	uint8_t func_code = source==RS485 ? *(request+1) : *(request+7);
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <GetModbusAnswer+0x1a>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	785b      	ldrb	r3, [r3, #1]
 8001868:	e001      	b.n	800186e <GetModbusAnswer+0x1e>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	79db      	ldrb	r3, [r3, #7]
 800186e:	75fb      	strb	r3, [r7, #23]

	switch (func_code) {
 8001870:	7dfb      	ldrb	r3, [r7, #23]
 8001872:	3b03      	subs	r3, #3
 8001874:	2b0d      	cmp	r3, #13
 8001876:	d849      	bhi.n	800190c <GetModbusAnswer+0xbc>
 8001878:	a201      	add	r2, pc, #4	; (adr r2, 8001880 <GetModbusAnswer+0x30>)
 800187a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187e:	bf00      	nop
 8001880:	080018b9 	.word	0x080018b9
 8001884:	080018d3 	.word	0x080018d3
 8001888:	0800190d 	.word	0x0800190d
 800188c:	080018ed 	.word	0x080018ed
 8001890:	0800190d 	.word	0x0800190d
 8001894:	0800190d 	.word	0x0800190d
 8001898:	0800190d 	.word	0x0800190d
 800189c:	0800190d 	.word	0x0800190d
 80018a0:	0800190d 	.word	0x0800190d
 80018a4:	0800190d 	.word	0x0800190d
 80018a8:	0800190d 	.word	0x0800190d
 80018ac:	0800190d 	.word	0x0800190d
 80018b0:	0800190d 	.word	0x0800190d
 80018b4:	080018fd 	.word	0x080018fd
		case READ_HOLDING_REGS:
			return ReadRegisters(request, answer, holding_pointer, holding_size, source);
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <GetModbusAnswer+0xc8>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b17      	ldr	r3, [pc, #92]	; (800191c <GetModbusAnswer+0xcc>)
 80018be:	8819      	ldrh	r1, [r3, #0]
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	460b      	mov	r3, r1
 80018c6:	68b9      	ldr	r1, [r7, #8]
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 f831 	bl	8001930 <ReadRegisters>
 80018ce:	4603      	mov	r3, r0
 80018d0:	e01e      	b.n	8001910 <GetModbusAnswer+0xc0>
		case READ_INPUT_REGS:
			return ReadRegisters(request, answer, reading_pointer, reading_size, source);
 80018d2:	4b13      	ldr	r3, [pc, #76]	; (8001920 <GetModbusAnswer+0xd0>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4b13      	ldr	r3, [pc, #76]	; (8001924 <GetModbusAnswer+0xd4>)
 80018d8:	8819      	ldrh	r1, [r3, #0]
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	460b      	mov	r3, r1
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 f824 	bl	8001930 <ReadRegisters>
 80018e8:	4603      	mov	r3, r0
 80018ea:	e011      	b.n	8001910 <GetModbusAnswer+0xc0>
		case WRITE_SINGLE_REG:
			return WriteToHoldings(request, answer, source, &WriteSingleRegister);
 80018ec:	79fa      	ldrb	r2, [r7, #7]
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <GetModbusAnswer+0xd8>)
 80018f0:	68b9      	ldr	r1, [r7, #8]
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 f974 	bl	8001be0 <WriteToHoldings>
 80018f8:	4603      	mov	r3, r0
 80018fa:	e009      	b.n	8001910 <GetModbusAnswer+0xc0>
		case WRITE_MULTIPLY_REGS:
			return WriteToHoldings(request, answer, source, &WrieMultiplyRegisters);
 80018fc:	79fa      	ldrb	r2, [r7, #7]
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <GetModbusAnswer+0xdc>)
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 f96c 	bl	8001be0 <WriteToHoldings>
 8001908:	4603      	mov	r3, r0
 800190a:	e001      	b.n	8001910 <GetModbusAnswer+0xc0>
		default:
			break;
 800190c:	bf00      	nop
	}
	return 0;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000354 	.word	0x20000354
 800191c:	2000035c 	.word	0x2000035c
 8001920:	20000358 	.word	0x20000358
 8001924:	2000035e 	.word	0x2000035e
 8001928:	08001aa5 	.word	0x08001aa5
 800192c:	08001b29 	.word	0x08001b29

08001930 <ReadRegisters>:

//Ф-я чтения регистров из памяти memory_pointer размером memory_size
static int ReadRegisters(uint8_t *request, uint8_t *answer, uint16_t *memory_pointer, uint16_t memory_size, ModbusSource source)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	807b      	strh	r3, [r7, #2]
	uint16_t  maxAddr = memory_size-1;
 800193e:	887b      	ldrh	r3, [r7, #2]
 8001940:	3b01      	subs	r3, #1
 8001942:	82fb      	strh	r3, [r7, #22]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 8001944:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <ReadRegisters+0x20>
 800194c:	2302      	movs	r3, #2
 800194e:	e000      	b.n	8001952 <ReadRegisters+0x22>
 8001950:	2308      	movs	r3, #8
 8001952:	4619      	mov	r1, r3
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 f84d 	bl	80019f4 <GetWordFromBytes>
 800195a:	4603      	mov	r3, r0
 800195c:	82bb      	strh	r3, [r7, #20]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 800195e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <ReadRegisters+0x3a>
 8001966:	2304      	movs	r3, #4
 8001968:	e000      	b.n	800196c <ReadRegisters+0x3c>
 800196a:	230a      	movs	r3, #10
 800196c:	4619      	mov	r1, r3
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 f840 	bl	80019f4 <GetWordFromBytes>
 8001974:	4603      	mov	r3, r0
 8001976:	827b      	strh	r3, [r7, #18]
	if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 8001978:	8aba      	ldrh	r2, [r7, #20]
 800197a:	8a7b      	ldrh	r3, [r7, #18]
 800197c:	4413      	add	r3, r2
 800197e:	1e5a      	subs	r2, r3, #1
 8001980:	8afb      	ldrh	r3, [r7, #22]
 8001982:	429a      	cmp	r2, r3
 8001984:	dd08      	ble.n	8001998 <ReadRegisters+0x68>
 8001986:	f897 3020 	ldrb.w	r3, [r7, #32]
 800198a:	2202      	movs	r2, #2
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f7ff fe80 	bl	8001694 <SetInvalidCommand>
 8001994:	4603      	mov	r3, r0
 8001996:	e029      	b.n	80019ec <ReadRegisters+0xbc>
	if(source==ETHERNET)
 8001998:	f897 3020 	ldrb.w	r3, [r7, #32]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d124      	bne.n	80019ea <ReadRegisters+0xba>
	{
		memcpy(answer,request,8);
 80019a0:	2208      	movs	r2, #8
 80019a2:	68f9      	ldr	r1, [r7, #12]
 80019a4:	68b8      	ldr	r0, [r7, #8]
 80019a6:	f015 fe3d 	bl	8017624 <memcpy>
		InsertWordToMemory(reg_count*2+3, answer+4);//Длина сообщения
 80019aa:	8a7b      	ldrh	r3, [r7, #18]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	3303      	adds	r3, #3
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	3304      	adds	r3, #4
 80019b8:	4619      	mov	r1, r3
 80019ba:	4610      	mov	r0, r2
 80019bc:	f000 f835 	bl	8001a2a <InsertWordToMemory>
		*(answer+8) = reg_count*2;//количесво байт далее
 80019c0:	8a7b      	ldrh	r3, [r7, #18]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	3308      	adds	r3, #8
 80019c8:	0052      	lsls	r2, r2, #1
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory(memory_pointer+start_reg,answer+9,reg_count);
 80019ce:	8abb      	ldrh	r3, [r7, #20]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	18d0      	adds	r0, r2, r3
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	3309      	adds	r3, #9
 80019da:	8a7a      	ldrh	r2, [r7, #18]
 80019dc:	4619      	mov	r1, r3
 80019de:	f000 f834 	bl	8001a4a <InsertWordsToMemory>
		return 9+reg_count*2;
 80019e2:	8a7b      	ldrh	r3, [r7, #18]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	3309      	adds	r3, #9
 80019e8:	e000      	b.n	80019ec <ReadRegisters+0xbc>
	}
	else
	{

	}
	return 0;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <GetWordFromBytes>:

static uint16_t GetWordFromBytes(uint8_t *arr, uint8_t pos)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	70fb      	strb	r3, [r7, #3]
	/*Получает 16 битное число из 2x байт, и возвращает его
	 * arr -  указатель на массив байт, из которого нужно получить word
	 * pos - индекс первого байта в массиве
	 *
	 * */
	return (((uint16_t)(*(arr+pos)))<<8) + (uint16_t)(*(arr + pos+1));
 8001a00:	78fb      	ldrb	r3, [r7, #3]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	021b      	lsls	r3, r3, #8
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	3301      	adds	r3, #1
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	440b      	add	r3, r1
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	b29b      	uxth	r3, r3
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <InsertWordToMemory>:

static void InsertWordToMemory(uint16_t value, uint8_t* memory)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	6039      	str	r1, [r7, #0]
 8001a34:	80fb      	strh	r3, [r7, #6]
    InsertWordsToMemory(&value,memory,1);
 8001a36:	1dbb      	adds	r3, r7, #6
 8001a38:	2201      	movs	r2, #1
 8001a3a:	6839      	ldr	r1, [r7, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 f804 	bl	8001a4a <InsertWordsToMemory>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <InsertWordsToMemory>:

static void InsertWordsToMemory(uint16_t *source, uint8_t * destination, uint16_t count)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b087      	sub	sp, #28
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	4613      	mov	r3, r2
 8001a56:	80fb      	strh	r3, [r7, #6]
    int i = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
    for(i=0;i<count*2;i+=2)
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	e014      	b.n	8001a8c <InsertWordsToMemory+0x42>
    {
        *(destination+i+1)=*((uint8_t*)source+i);
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	441a      	add	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	68b9      	ldr	r1, [r7, #8]
 8001a6e:	440b      	add	r3, r1
 8001a70:	7812      	ldrb	r2, [r2, #0]
 8001a72:	701a      	strb	r2, [r3, #0]
        *(destination+i)=*((uint8_t*)source+i+1);
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	3301      	adds	r3, #1
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	441a      	add	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	68b9      	ldr	r1, [r7, #8]
 8001a80:	440b      	add	r3, r1
 8001a82:	7812      	ldrb	r2, [r2, #0]
 8001a84:	701a      	strb	r2, [r3, #0]
    for(i=0;i<count*2;i+=2)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3302      	adds	r3, #2
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	dbe5      	blt.n	8001a62 <InsertWordsToMemory+0x18>
    }
}
 8001a96:	bf00      	nop
 8001a98:	bf00      	nop
 8001a9a:	371c      	adds	r7, #28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <WriteSingleRegister>:


static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	71fb      	strb	r3, [r7, #7]
    uint16_t  maxAddr = holding_size-1;
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <WriteSingleRegister+0x7c>)
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	82fb      	strh	r3, [r7, #22]
    uint16_t addr = GetWordFromBytes(request,source==RS485?2:8);
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <WriteSingleRegister+0x20>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e000      	b.n	8001ac6 <WriteSingleRegister+0x22>
 8001ac4:	2308      	movs	r3, #8
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f7ff ff93 	bl	80019f4 <GetWordFromBytes>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	82bb      	strh	r3, [r7, #20]
    if(addr>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 8001ad2:	8aba      	ldrh	r2, [r7, #20]
 8001ad4:	8afb      	ldrh	r3, [r7, #22]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d907      	bls.n	8001aea <WriteSingleRegister+0x46>
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	2202      	movs	r2, #2
 8001ade:	68b9      	ldr	r1, [r7, #8]
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f7ff fdd7 	bl	8001694 <SetInvalidCommand>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	e016      	b.n	8001b18 <WriteSingleRegister+0x74>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d112      	bne.n	8001b16 <WriteSingleRegister+0x72>
    {
    	InsertWordsToMemory((uint16_t*)(request+10), ((uint8_t*)holding_pointer)+addr*2,1);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f103 000a 	add.w	r0, r3, #10
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <WriteSingleRegister+0x80>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	8aba      	ldrh	r2, [r7, #20]
 8001afc:	0052      	lsls	r2, r2, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	2201      	movs	r2, #1
 8001b02:	4619      	mov	r1, r3
 8001b04:	f7ff ffa1 	bl	8001a4a <InsertWordsToMemory>
    	memcpy(answer, request,12);
 8001b08:	220c      	movs	r2, #12
 8001b0a:	68f9      	ldr	r1, [r7, #12]
 8001b0c:	68b8      	ldr	r0, [r7, #8]
 8001b0e:	f015 fd89 	bl	8017624 <memcpy>
    	return 12;
 8001b12:	230c      	movs	r3, #12
 8001b14:	e000      	b.n	8001b18 <WriteSingleRegister+0x74>
    }
    else
    {

    }
    return 0;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	2000035c 	.word	0x2000035c
 8001b24:	20000354 	.word	0x20000354

08001b28 <WrieMultiplyRegisters>:

static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	4613      	mov	r3, r2
 8001b34:	71fb      	strb	r3, [r7, #7]
	uint16_t  maxAddr = holding_size-1;
 8001b36:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <WrieMultiplyRegisters+0xb0>)
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	82fb      	strh	r3, [r7, #22]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <WrieMultiplyRegisters+0x20>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e000      	b.n	8001b4a <WrieMultiplyRegisters+0x22>
 8001b48:	2308      	movs	r3, #8
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f7ff ff51 	bl	80019f4 <GetWordFromBytes>
 8001b52:	4603      	mov	r3, r0
 8001b54:	82bb      	strh	r3, [r7, #20]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <WrieMultiplyRegisters+0x38>
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	e000      	b.n	8001b62 <WrieMultiplyRegisters+0x3a>
 8001b60:	230a      	movs	r3, #10
 8001b62:	4619      	mov	r1, r3
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f7ff ff45 	bl	80019f4 <GetWordFromBytes>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	827b      	strh	r3, [r7, #18]
    if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 8001b6e:	8aba      	ldrh	r2, [r7, #20]
 8001b70:	8a7b      	ldrh	r3, [r7, #18]
 8001b72:	4413      	add	r3, r2
 8001b74:	1e5a      	subs	r2, r3, #1
 8001b76:	8afb      	ldrh	r3, [r7, #22]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	dd07      	ble.n	8001b8c <WrieMultiplyRegisters+0x64>
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f7ff fd86 	bl	8001694 <SetInvalidCommand>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	e021      	b.n	8001bd0 <WrieMultiplyRegisters+0xa8>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d11d      	bne.n	8001bce <WrieMultiplyRegisters+0xa6>
    {
    	memcpy(answer, request,12);//сначала повторяющиеся с запросом данные
 8001b92:	220c      	movs	r2, #12
 8001b94:	68f9      	ldr	r1, [r7, #12]
 8001b96:	68b8      	ldr	r0, [r7, #8]
 8001b98:	f015 fd44 	bl	8017624 <memcpy>
    	InsertWordToMemory(reg_count*2+4, answer+4);//Длина сообщения
 8001b9c:	8a7b      	ldrh	r3, [r7, #18]
 8001b9e:	3302      	adds	r3, #2
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	4619      	mov	r1, r3
 8001bac:	4610      	mov	r0, r2
 8001bae:	f7ff ff3c 	bl	8001a2a <InsertWordToMemory>
    	InsertWordsToMemory((uint16_t*)(request+13), ((uint8_t*)holding_pointer)+start_reg*2,reg_count);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f103 000d 	add.w	r0, r3, #13
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <WrieMultiplyRegisters+0xb4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	8aba      	ldrh	r2, [r7, #20]
 8001bbe:	0052      	lsls	r2, r2, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	8a7a      	ldrh	r2, [r7, #18]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f7ff ff40 	bl	8001a4a <InsertWordsToMemory>
        return 12;
 8001bca:	230c      	movs	r3, #12
 8001bcc:	e000      	b.n	8001bd0 <WrieMultiplyRegisters+0xa8>
    }
    else
    {

    }
    return 0;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	2000035c 	.word	0x2000035c
 8001bdc:	20000354 	.word	0x20000354

08001be0 <WriteToHoldings>:

static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource))
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	4613      	mov	r3, r2
 8001bee:	71fb      	strb	r3, [r7, #7]
	int result = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
	if(writeMemorySemaphoreHandle!=NULL)
 8001bf4:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <WriteToHoldings+0x50>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d014      	beq.n	8001c26 <WriteToHoldings+0x46>
	{
		if(osSemaphoreWait(writeMemorySemaphoreHandle, 1000)==osOK)
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <WriteToHoldings+0x50>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c04:	4618      	mov	r0, r3
 8001c06:	f005 fb83 	bl	8007310 <osSemaphoreWait>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10a      	bne.n	8001c26 <WriteToHoldings+0x46>
		{
			result =  (*write)(request,answer,source);
 8001c10:	79fa      	ldrb	r2, [r7, #7]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	4798      	blx	r3
 8001c1a:	6178      	str	r0, [r7, #20]
			osSemaphoreRelease(writeMemorySemaphoreHandle);
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <WriteToHoldings+0x50>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f005 fbc3 	bl	80073ac <osSemaphoreRelease>
		}
	}
	return result;
 8001c26:	697b      	ldr	r3, [r7, #20]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20006a98 	.word	0x20006a98

08001c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_MspInit+0x54>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	4a11      	ldr	r2, [pc, #68]	; (8001c88 <HAL_MspInit+0x54>)
 8001c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c48:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <HAL_MspInit+0x54>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_MspInit+0x54>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <HAL_MspInit+0x54>)
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c64:	6413      	str	r3, [r2, #64]	; 0x40
 8001c66:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <HAL_MspInit+0x54>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	210f      	movs	r1, #15
 8001c76:	f06f 0001 	mvn.w	r0, #1
 8001c7a:	f000 fd07 	bl	800268c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800

08001c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08c      	sub	sp, #48	; 0x30
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a68      	ldr	r2, [pc, #416]	; (8001e4c <HAL_UART_MspInit+0x1c0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d163      	bne.n	8001d76 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	4b67      	ldr	r3, [pc, #412]	; (8001e50 <HAL_UART_MspInit+0x1c4>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4a66      	ldr	r2, [pc, #408]	; (8001e50 <HAL_UART_MspInit+0x1c4>)
 8001cb8:	f043 0310 	orr.w	r3, r3, #16
 8001cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cbe:	4b64      	ldr	r3, [pc, #400]	; (8001e50 <HAL_UART_MspInit+0x1c4>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	61bb      	str	r3, [r7, #24]
 8001cc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	4b60      	ldr	r3, [pc, #384]	; (8001e50 <HAL_UART_MspInit+0x1c4>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a5f      	ldr	r2, [pc, #380]	; (8001e50 <HAL_UART_MspInit+0x1c4>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b5d      	ldr	r3, [pc, #372]	; (8001e50 <HAL_UART_MspInit+0x1c4>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ce6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cf8:	2307      	movs	r3, #7
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f107 031c 	add.w	r3, r7, #28
 8001d00:	4619      	mov	r1, r3
 8001d02:	4854      	ldr	r0, [pc, #336]	; (8001e54 <HAL_UART_MspInit+0x1c8>)
 8001d04:	f002 fa94 	bl	8004230 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001d08:	4b53      	ldr	r3, [pc, #332]	; (8001e58 <HAL_UART_MspInit+0x1cc>)
 8001d0a:	4a54      	ldr	r2, [pc, #336]	; (8001e5c <HAL_UART_MspInit+0x1d0>)
 8001d0c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001d0e:	4b52      	ldr	r3, [pc, #328]	; (8001e58 <HAL_UART_MspInit+0x1cc>)
 8001d10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d14:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d16:	4b50      	ldr	r3, [pc, #320]	; (8001e58 <HAL_UART_MspInit+0x1cc>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d1c:	4b4e      	ldr	r3, [pc, #312]	; (8001e58 <HAL_UART_MspInit+0x1cc>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d22:	4b4d      	ldr	r3, [pc, #308]	; (8001e58 <HAL_UART_MspInit+0x1cc>)
 8001d24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d28:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d2a:	4b4b      	ldr	r3, [pc, #300]	; (8001e58 <HAL_UART_MspInit+0x1cc>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d30:	4b49      	ldr	r3, [pc, #292]	; (8001e58 <HAL_UART_MspInit+0x1cc>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001d36:	4b48      	ldr	r3, [pc, #288]	; (8001e58 <HAL_UART_MspInit+0x1cc>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d3c:	4b46      	ldr	r3, [pc, #280]	; (8001e58 <HAL_UART_MspInit+0x1cc>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d42:	4b45      	ldr	r3, [pc, #276]	; (8001e58 <HAL_UART_MspInit+0x1cc>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d48:	4843      	ldr	r0, [pc, #268]	; (8001e58 <HAL_UART_MspInit+0x1cc>)
 8001d4a:	f000 fcc9 	bl	80026e0 <HAL_DMA_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001d54:	f7ff fb8e 	bl	8001474 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a3f      	ldr	r2, [pc, #252]	; (8001e58 <HAL_UART_MspInit+0x1cc>)
 8001d5c:	639a      	str	r2, [r3, #56]	; 0x38
 8001d5e:	4a3e      	ldr	r2, [pc, #248]	; (8001e58 <HAL_UART_MspInit+0x1cc>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2105      	movs	r1, #5
 8001d68:	2025      	movs	r0, #37	; 0x25
 8001d6a:	f000 fc8f 	bl	800268c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d6e:	2025      	movs	r0, #37	; 0x25
 8001d70:	f000 fca8 	bl	80026c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001d74:	e066      	b.n	8001e44 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART6)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a39      	ldr	r2, [pc, #228]	; (8001e60 <HAL_UART_MspInit+0x1d4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d161      	bne.n	8001e44 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d80:	2300      	movs	r3, #0
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <HAL_UART_MspInit+0x1c4>)
 8001d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d88:	4a31      	ldr	r2, [pc, #196]	; (8001e50 <HAL_UART_MspInit+0x1c4>)
 8001d8a:	f043 0320 	orr.w	r3, r3, #32
 8001d8e:	6453      	str	r3, [r2, #68]	; 0x44
 8001d90:	4b2f      	ldr	r3, [pc, #188]	; (8001e50 <HAL_UART_MspInit+0x1c4>)
 8001d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d94:	f003 0320 	and.w	r3, r3, #32
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <HAL_UART_MspInit+0x1c4>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	4a2a      	ldr	r2, [pc, #168]	; (8001e50 <HAL_UART_MspInit+0x1c4>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6313      	str	r3, [r2, #48]	; 0x30
 8001dac:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <HAL_UART_MspInit+0x1c4>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001db8:	23c0      	movs	r3, #192	; 0xc0
 8001dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001dc8:	2308      	movs	r3, #8
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4824      	ldr	r0, [pc, #144]	; (8001e64 <HAL_UART_MspInit+0x1d8>)
 8001dd4:	f002 fa2c 	bl	8004230 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001dd8:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <HAL_UART_MspInit+0x1dc>)
 8001dda:	4a24      	ldr	r2, [pc, #144]	; (8001e6c <HAL_UART_MspInit+0x1e0>)
 8001ddc:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001dde:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <HAL_UART_MspInit+0x1dc>)
 8001de0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001de4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001de6:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <HAL_UART_MspInit+0x1dc>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <HAL_UART_MspInit+0x1dc>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001df2:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <HAL_UART_MspInit+0x1dc>)
 8001df4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001df8:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dfa:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <HAL_UART_MspInit+0x1dc>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e00:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <HAL_UART_MspInit+0x1dc>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001e06:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <HAL_UART_MspInit+0x1dc>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e0c:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <HAL_UART_MspInit+0x1dc>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <HAL_UART_MspInit+0x1dc>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001e18:	4813      	ldr	r0, [pc, #76]	; (8001e68 <HAL_UART_MspInit+0x1dc>)
 8001e1a:	f000 fc61 	bl	80026e0 <HAL_DMA_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8001e24:	f7ff fb26 	bl	8001474 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a0f      	ldr	r2, [pc, #60]	; (8001e68 <HAL_UART_MspInit+0x1dc>)
 8001e2c:	639a      	str	r2, [r3, #56]	; 0x38
 8001e2e:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <HAL_UART_MspInit+0x1dc>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2105      	movs	r1, #5
 8001e38:	2047      	movs	r0, #71	; 0x47
 8001e3a:	f000 fc27 	bl	800268c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001e3e:	2047      	movs	r0, #71	; 0x47
 8001e40:	f000 fc40 	bl	80026c4 <HAL_NVIC_EnableIRQ>
}
 8001e44:	bf00      	nop
 8001e46:	3730      	adds	r7, #48	; 0x30
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40011000 	.word	0x40011000
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40020000 	.word	0x40020000
 8001e58:	200069f4 	.word	0x200069f4
 8001e5c:	40026440 	.word	0x40026440
 8001e60:	40011400 	.word	0x40011400
 8001e64:	40020800 	.word	0x40020800
 8001e68:	20006994 	.word	0x20006994
 8001e6c:	40026428 	.word	0x40026428

08001e70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08c      	sub	sp, #48	; 0x30
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001e80:	2200      	movs	r2, #0
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	2019      	movs	r0, #25
 8001e86:	f000 fc01 	bl	800268c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e8a:	2019      	movs	r0, #25
 8001e8c:	f000 fc1a 	bl	80026c4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <HAL_InitTick+0xa4>)
 8001e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e98:	4a1e      	ldr	r2, [pc, #120]	; (8001f14 <HAL_InitTick+0xa4>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea0:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <HAL_InitTick+0xa4>)
 8001ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001eac:	f107 0210 	add.w	r2, r7, #16
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f003 f838 	bl	8004f2c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001ebc:	f003 f822 	bl	8004f04 <HAL_RCC_GetPCLK2Freq>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec8:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <HAL_InitTick+0xa8>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	0c9b      	lsrs	r3, r3, #18
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <HAL_InitTick+0xac>)
 8001ed6:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <HAL_InitTick+0xb0>)
 8001ed8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <HAL_InitTick+0xac>)
 8001edc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ee0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ee2:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <HAL_InitTick+0xac>)
 8001ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <HAL_InitTick+0xac>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_InitTick+0xac>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001ef4:	4809      	ldr	r0, [pc, #36]	; (8001f1c <HAL_InitTick+0xac>)
 8001ef6:	f003 f84b 	bl	8004f90 <HAL_TIM_Base_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d104      	bne.n	8001f0a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001f00:	4806      	ldr	r0, [pc, #24]	; (8001f1c <HAL_InitTick+0xac>)
 8001f02:	f003 f89f 	bl	8005044 <HAL_TIM_Base_Start_IT>
 8001f06:	4603      	mov	r3, r0
 8001f08:	e000      	b.n	8001f0c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3730      	adds	r7, #48	; 0x30
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40023800 	.word	0x40023800
 8001f18:	431bde83 	.word	0x431bde83
 8001f1c:	20006bb0 	.word	0x20006bb0
 8001f20:	40010000 	.word	0x40010000

08001f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <NMI_Handler+0x4>

08001f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2e:	e7fe      	b.n	8001f2e <HardFault_Handler+0x4>

08001f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <MemManage_Handler+0x4>

08001f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f3a:	e7fe      	b.n	8001f3a <BusFault_Handler+0x4>

08001f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <UsageFault_Handler+0x4>

08001f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f56:	f003 f8e5 	bl	8005124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20006bb0 	.word	0x20006bb0

08001f64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <USART1_IRQHandler+0x10>)
 8001f6a:	f003 fb71 	bl	8005650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20006a54 	.word	0x20006a54

08001f78 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <DMA2_Stream1_IRQHandler+0x10>)
 8001f7e:	f000 fd47 	bl	8002a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20006994 	.word	0x20006994

08001f8c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <DMA2_Stream2_IRQHandler+0x10>)
 8001f92:	f000 fd3d 	bl	8002a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200069f4 	.word	0x200069f4

08001fa0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001fa4:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <ETH_IRQHandler+0x10>)
 8001fa6:	f001 fb81 	bl	80036ac <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20008720 	.word	0x20008720

08001fb4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <USART6_IRQHandler+0x10>)
 8001fba:	f003 fb49 	bl	8005650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20006a9c 	.word	0x20006a9c

08001fc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
	return 1;
 8001fcc:	2301      	movs	r3, #1
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <_kill>:

int _kill(int pid, int sig)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <_kill+0x20>)
 8001fe4:	2216      	movs	r2, #22
 8001fe6:	601a      	str	r2, [r3, #0]
	return -1;
 8001fe8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	2000d6ac 	.word	0x2000d6ac

08001ffc <_exit>:

void _exit (int status)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ffe5 	bl	8001fd8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800200e:	e7fe      	b.n	800200e <_exit+0x12>

08002010 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	e00a      	b.n	8002038 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002022:	f3af 8000 	nop.w
 8002026:	4601      	mov	r1, r0
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	60ba      	str	r2, [r7, #8]
 800202e:	b2ca      	uxtb	r2, r1
 8002030:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	3301      	adds	r3, #1
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	429a      	cmp	r2, r3
 800203e:	dbf0      	blt.n	8002022 <_read+0x12>
	}

return len;
 8002040:	687b      	ldr	r3, [r7, #4]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	e009      	b.n	8002070 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	60ba      	str	r2, [r7, #8]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	3301      	adds	r3, #1
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	429a      	cmp	r2, r3
 8002076:	dbf1      	blt.n	800205c <_write+0x12>
	}
	return len;
 8002078:	687b      	ldr	r3, [r7, #4]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <_close>:

int _close(int file)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
	return -1;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020aa:	605a      	str	r2, [r3, #4]
	return 0;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <_isatty>:

int _isatty(int file)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
	return 1;
 80020c2:	2301      	movs	r3, #1
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
	return 0;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f4:	4a14      	ldr	r2, [pc, #80]	; (8002148 <_sbrk+0x5c>)
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <_sbrk+0x60>)
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <_sbrk+0x64>)
 800210a:	4a12      	ldr	r2, [pc, #72]	; (8002154 <_sbrk+0x68>)
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <_sbrk+0x64>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	429a      	cmp	r2, r3
 800211a:	d205      	bcs.n	8002128 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800211c:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <_sbrk+0x6c>)
 800211e:	220c      	movs	r2, #12
 8002120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002122:	f04f 33ff 	mov.w	r3, #4294967295
 8002126:	e009      	b.n	800213c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <_sbrk+0x64>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <_sbrk+0x64>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	4a06      	ldr	r2, [pc, #24]	; (8002150 <_sbrk+0x64>)
 8002138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800213a:	68fb      	ldr	r3, [r7, #12]
}
 800213c:	4618      	mov	r0, r3
 800213e:	371c      	adds	r7, #28
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	20020000 	.word	0x20020000
 800214c:	00000400 	.word	0x00000400
 8002150:	20000360 	.word	0x20000360
 8002154:	2000d6b8 	.word	0x2000d6b8
 8002158:	2000d6ac 	.word	0x2000d6ac

0800215c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <SystemInit+0x20>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002166:	4a05      	ldr	r2, [pc, #20]	; (800217c <SystemInit+0x20>)
 8002168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800216c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <uart_thread>:
static void StartReceive(int index);
static void StartReciveUartAll();


void uart_thread(void *argument)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
	StartReciveUartAll();
 8002188:	f000 f801 	bl	800218e <StartReciveUartAll>
	while(1)
 800218c:	e7fe      	b.n	800218c <uart_thread+0xc>

0800218e <StartReciveUartAll>:
	}
}


static void StartReciveUartAll()
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; ++i) {
 8002194:	2300      	movs	r3, #0
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	e005      	b.n	80021a6 <StartReciveUartAll+0x18>
		StartReceive(i);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f80c 	bl	80021b8 <StartReceive>
	for (int i = 0; i < 2; ++i) {
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3301      	adds	r3, #1
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	ddf6      	ble.n	800219a <StartReciveUartAll+0xc>
	}
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <StartReceive>:


static void StartReceive(int index)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	switch (index) {
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <StartReceive+0x16>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d00f      	beq.n	80021ec <StartReceive+0x34>
		case 1:
			HAL_UARTEx_ReceiveToIdle_DMA(&huart6, uart_input_buffer[1], UART_INPUT_BUFFER_SZ);
			__HAL_DMA_DISABLE_IT(&hdma_usart6_rx,DMA_IT_HT);
			break;
		default:
			break;
 80021cc:	e01d      	b.n	800220a <StartReceive+0x52>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_input_buffer[0], UART_INPUT_BUFFER_SZ);
 80021ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021d2:	4910      	ldr	r1, [pc, #64]	; (8002214 <StartReceive+0x5c>)
 80021d4:	4810      	ldr	r0, [pc, #64]	; (8002218 <StartReceive+0x60>)
 80021d6:	f003 f9d6 	bl	8005586 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <StartReceive+0x64>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b0e      	ldr	r3, [pc, #56]	; (800221c <StartReceive+0x64>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0208 	bic.w	r2, r2, #8
 80021e8:	601a      	str	r2, [r3, #0]
			break;
 80021ea:	e00e      	b.n	800220a <StartReceive+0x52>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart6, uart_input_buffer[1], UART_INPUT_BUFFER_SZ);
 80021ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021f0:	490b      	ldr	r1, [pc, #44]	; (8002220 <StartReceive+0x68>)
 80021f2:	480c      	ldr	r0, [pc, #48]	; (8002224 <StartReceive+0x6c>)
 80021f4:	f003 f9c7 	bl	8005586 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart6_rx,DMA_IT_HT);
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <StartReceive+0x70>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <StartReceive+0x70>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0208 	bic.w	r2, r2, #8
 8002206:	601a      	str	r2, [r3, #0]
			break;
 8002208:	bf00      	nop
	}
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20006bf8 	.word	0x20006bf8
 8002218:	20006a54 	.word	0x20006a54
 800221c:	200069f4 	.word	0x200069f4
 8002220:	20006cf8 	.word	0x20006cf8
 8002224:	20006a9c 	.word	0x20006a9c
 8002228:	20006994 	.word	0x20006994

0800222c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	807b      	strh	r3, [r7, #2]
	if (huart->Instance==USART1) {
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a09      	ldr	r2, [pc, #36]	; (8002264 <HAL_UARTEx_RxEventCallback+0x38>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d103      	bne.n	800224a <HAL_UARTEx_RxEventCallback+0x1e>
		StartReceive(0);
 8002242:	2000      	movs	r0, #0
 8002244:	f7ff ffb8 	bl	80021b8 <StartReceive>
 8002248:	e009      	b.n	800225e <HAL_UARTEx_RxEventCallback+0x32>
	}
	else if(huart->Instance==USART6){
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a06      	ldr	r2, [pc, #24]	; (8002268 <HAL_UARTEx_RxEventCallback+0x3c>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d103      	bne.n	800225c <HAL_UARTEx_RxEventCallback+0x30>
		StartReceive(1);
 8002254:	2001      	movs	r0, #1
 8002256:	f7ff ffaf 	bl	80021b8 <StartReceive>
 800225a:	e000      	b.n	800225e <HAL_UARTEx_RxEventCallback+0x32>
	}
	else return;
 800225c:	bf00      	nop

}
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40011000 	.word	0x40011000
 8002268:	40011400 	.word	0x40011400

0800226c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800226c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002270:	480d      	ldr	r0, [pc, #52]	; (80022a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002272:	490e      	ldr	r1, [pc, #56]	; (80022ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002274:	4a0e      	ldr	r2, [pc, #56]	; (80022b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002278:	e002      	b.n	8002280 <LoopCopyDataInit>

0800227a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800227a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800227c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800227e:	3304      	adds	r3, #4

08002280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002284:	d3f9      	bcc.n	800227a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002286:	4a0b      	ldr	r2, [pc, #44]	; (80022b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002288:	4c0b      	ldr	r4, [pc, #44]	; (80022b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800228c:	e001      	b.n	8002292 <LoopFillZerobss>

0800228e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800228e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002290:	3204      	adds	r2, #4

08002292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002294:	d3fb      	bcc.n	800228e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002296:	f7ff ff61 	bl	800215c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800229a:	f015 f989 	bl	80175b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800229e:	f7fe fe81 	bl	8000fa4 <main>
  bx  lr    
 80022a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022ac:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80022b0:	0801bdec 	.word	0x0801bdec
  ldr r2, =_sbss
 80022b4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80022b8:	2000d6b4 	.word	0x2000d6b4

080022bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022bc:	e7fe      	b.n	80022bc <ADC_IRQHandler>

080022be <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d104      	bne.n	80022d6 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80022cc:	b672      	cpsid	i
}
 80022ce:	bf00      	nop
 80022d0:	f7ff f8d0 	bl	8001474 <Error_Handler>
 80022d4:	e7fe      	b.n	80022d4 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	e007      	b.n	80022ec <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	2100      	movs	r1, #0
 80022e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	3301      	adds	r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d9f4      	bls.n	80022dc <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	721a      	strb	r2, [r3, #8]
}
 80022f8:	bf00      	nop
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d104      	bne.n	8002318 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800230e:	b672      	cpsid	i
}
 8002310:	bf00      	nop
 8002312:	f7ff f8af 	bl	8001474 <Error_Handler>
 8002316:	e7fe      	b.n	8002316 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	7a1b      	ldrb	r3, [r3, #8]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d904      	bls.n	800232a <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002320:	b672      	cpsid	i
}
 8002322:	bf00      	nop
 8002324:	f7ff f8a6 	bl	8001474 <Error_Handler>
 8002328:	e7fe      	b.n	8002328 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	7a1b      	ldrb	r3, [r3, #8]
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	b2d1      	uxtb	r1, r2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	7211      	strb	r1, [r2, #8]
 8002336:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002338:	f3ef 8211 	mrs	r2, BASEPRI
 800233c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002340:	f383 8811 	msr	BASEPRI, r3
 8002344:	f3bf 8f6f 	isb	sy
 8002348:	f3bf 8f4f 	dsb	sy
 800234c:	60fa      	str	r2, [r7, #12]
 800234e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d104      	bne.n	8002378 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800236e:	b672      	cpsid	i
}
 8002370:	bf00      	nop
 8002372:	f7ff f87f 	bl	8001474 <Error_Handler>
 8002376:	e7fe      	b.n	8002376 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	7a1b      	ldrb	r3, [r3, #8]
 800237c:	3b01      	subs	r3, #1
 800237e:	b2da      	uxtb	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	7a1b      	ldrb	r3, [r3, #8]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d904      	bls.n	8002396 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 800238c:	b672      	cpsid	i
}
 800238e:	bf00      	nop
 8002390:	f7ff f870 	bl	8001474 <Error_Handler>
 8002394:	e7fe      	b.n	8002394 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	7a1b      	ldrb	r3, [r3, #8]
 800239a:	461a      	mov	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80023aa:	bf00      	nop
}
 80023ac:	bf00      	nop
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d103      	bne.n	80023ca <__retarget_lock_init_recursive+0x16>
  {
    errno = EINVAL;
 80023c2:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <__retarget_lock_init_recursive+0x48>)
 80023c4:	2216      	movs	r2, #22
 80023c6:	601a      	str	r2, [r3, #0]
    return;
 80023c8:	e015      	b.n	80023f6 <__retarget_lock_init_recursive+0x42>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80023ca:	200c      	movs	r0, #12
 80023cc:	f015 f914 	bl	80175f8 <malloc>
 80023d0:	4603      	mov	r3, r0
 80023d2:	461a      	mov	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <__retarget_lock_init_recursive+0x38>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff6a 	bl	80022be <stm32_lock_init>
    return;
 80023ea:	e004      	b.n	80023f6 <__retarget_lock_init_recursive+0x42>
  __ASM volatile ("cpsid i" : : : "memory");
 80023ec:	b672      	cpsid	i
}
 80023ee:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 80023f0:	f7ff f840 	bl	8001474 <Error_Handler>
 80023f4:	e7fe      	b.n	80023f4 <__retarget_lock_init_recursive+0x40>
}
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	2000d6ac 	.word	0x2000d6ac

08002400 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d104      	bne.n	8002418 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800240e:	b672      	cpsid	i
}
 8002410:	bf00      	nop
 8002412:	f7ff f82f 	bl	8001474 <Error_Handler>
 8002416:	e7fe      	b.n	8002416 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff ff70 	bl	8002300 <stm32_lock_acquire>
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d104      	bne.n	8002440 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002436:	b672      	cpsid	i
}
 8002438:	bf00      	nop
 800243a:	f7ff f81b 	bl	8001474 <Error_Handler>
 800243e:	e7fe      	b.n	800243e <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff8c 	bl	8002360 <stm32_lock_release>
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002454:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <HAL_Init+0x40>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0d      	ldr	r2, [pc, #52]	; (8002490 <HAL_Init+0x40>)
 800245a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800245e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_Init+0x40>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <HAL_Init+0x40>)
 8002466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800246a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800246c:	4b08      	ldr	r3, [pc, #32]	; (8002490 <HAL_Init+0x40>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a07      	ldr	r2, [pc, #28]	; (8002490 <HAL_Init+0x40>)
 8002472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002476:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002478:	2003      	movs	r0, #3
 800247a:	f000 f8fc 	bl	8002676 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800247e:	200f      	movs	r0, #15
 8002480:	f7ff fcf6 	bl	8001e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002484:	f7ff fbd6 	bl	8001c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40023c00 	.word	0x40023c00

08002494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_IncTick+0x20>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_IncTick+0x24>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4413      	add	r3, r2
 80024a4:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <HAL_IncTick+0x24>)
 80024a6:	6013      	str	r3, [r2, #0]
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	2000000c 	.word	0x2000000c
 80024b8:	20006df8 	.word	0x20006df8

080024bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return uwTick;
 80024c0:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <HAL_GetTick+0x14>)
 80024c2:	681b      	ldr	r3, [r3, #0]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20006df8 	.word	0x20006df8

080024d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024dc:	f7ff ffee 	bl	80024bc <HAL_GetTick>
 80024e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ec:	d005      	beq.n	80024fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ee:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <HAL_Delay+0x44>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	461a      	mov	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4413      	add	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024fa:	bf00      	nop
 80024fc:	f7ff ffde 	bl	80024bc <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	429a      	cmp	r2, r3
 800250a:	d8f7      	bhi.n	80024fc <HAL_Delay+0x28>
  {
  }
}
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	2000000c 	.word	0x2000000c

0800251c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <__NVIC_SetPriorityGrouping+0x44>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002538:	4013      	ands	r3, r2
 800253a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800254c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800254e:	4a04      	ldr	r2, [pc, #16]	; (8002560 <__NVIC_SetPriorityGrouping+0x44>)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	60d3      	str	r3, [r2, #12]
}
 8002554:	bf00      	nop
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002568:	4b04      	ldr	r3, [pc, #16]	; (800257c <__NVIC_GetPriorityGrouping+0x18>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	0a1b      	lsrs	r3, r3, #8
 800256e:	f003 0307 	and.w	r3, r3, #7
}
 8002572:	4618      	mov	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	2b00      	cmp	r3, #0
 8002590:	db0b      	blt.n	80025aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	f003 021f 	and.w	r2, r3, #31
 8002598:	4907      	ldr	r1, [pc, #28]	; (80025b8 <__NVIC_EnableIRQ+0x38>)
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	2001      	movs	r0, #1
 80025a2:	fa00 f202 	lsl.w	r2, r0, r2
 80025a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	e000e100 	.word	0xe000e100

080025bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	6039      	str	r1, [r7, #0]
 80025c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	db0a      	blt.n	80025e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	490c      	ldr	r1, [pc, #48]	; (8002608 <__NVIC_SetPriority+0x4c>)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	0112      	lsls	r2, r2, #4
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	440b      	add	r3, r1
 80025e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e4:	e00a      	b.n	80025fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	4908      	ldr	r1, [pc, #32]	; (800260c <__NVIC_SetPriority+0x50>)
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	3b04      	subs	r3, #4
 80025f4:	0112      	lsls	r2, r2, #4
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	440b      	add	r3, r1
 80025fa:	761a      	strb	r2, [r3, #24]
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000e100 	.word	0xe000e100
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	; 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f1c3 0307 	rsb	r3, r3, #7
 800262a:	2b04      	cmp	r3, #4
 800262c:	bf28      	it	cs
 800262e:	2304      	movcs	r3, #4
 8002630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3304      	adds	r3, #4
 8002636:	2b06      	cmp	r3, #6
 8002638:	d902      	bls.n	8002640 <NVIC_EncodePriority+0x30>
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3b03      	subs	r3, #3
 800263e:	e000      	b.n	8002642 <NVIC_EncodePriority+0x32>
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002644:	f04f 32ff 	mov.w	r2, #4294967295
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43da      	mvns	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	401a      	ands	r2, r3
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002658:	f04f 31ff 	mov.w	r1, #4294967295
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	fa01 f303 	lsl.w	r3, r1, r3
 8002662:	43d9      	mvns	r1, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002668:	4313      	orrs	r3, r2
         );
}
 800266a:	4618      	mov	r0, r3
 800266c:	3724      	adds	r7, #36	; 0x24
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ff4c 	bl	800251c <__NVIC_SetPriorityGrouping>
}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800269e:	f7ff ff61 	bl	8002564 <__NVIC_GetPriorityGrouping>
 80026a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	68b9      	ldr	r1, [r7, #8]
 80026a8:	6978      	ldr	r0, [r7, #20]
 80026aa:	f7ff ffb1 	bl	8002610 <NVIC_EncodePriority>
 80026ae:	4602      	mov	r2, r0
 80026b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff ff80 	bl	80025bc <__NVIC_SetPriority>
}
 80026bc:	bf00      	nop
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ff54 	bl	8002580 <__NVIC_EnableIRQ>
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff fee6 	bl	80024bc <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e099      	b.n	8002830 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800271c:	e00f      	b.n	800273e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800271e:	f7ff fecd 	bl	80024bc <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b05      	cmp	r3, #5
 800272a:	d908      	bls.n	800273e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2203      	movs	r2, #3
 8002736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e078      	b.n	8002830 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1e8      	bne.n	800271e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	4b38      	ldr	r3, [pc, #224]	; (8002838 <HAL_DMA_Init+0x158>)
 8002758:	4013      	ands	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800276a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002776:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002782:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4313      	orrs	r3, r2
 800278e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	2b04      	cmp	r3, #4
 8002796:	d107      	bne.n	80027a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	4313      	orrs	r3, r2
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f023 0307 	bic.w	r3, r3, #7
 80027be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d117      	bne.n	8002802 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00e      	beq.n	8002802 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 fb01 	bl	8002dec <DMA_CheckFifoParam>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2240      	movs	r2, #64	; 0x40
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027fe:	2301      	movs	r3, #1
 8002800:	e016      	b.n	8002830 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 fab8 	bl	8002d80 <DMA_CalcBaseAndBitshift>
 8002810:	4603      	mov	r3, r0
 8002812:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002818:	223f      	movs	r2, #63	; 0x3f
 800281a:	409a      	lsls	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	f010803f 	.word	0xf010803f

0800283c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002852:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800285a:	2b01      	cmp	r3, #1
 800285c:	d101      	bne.n	8002862 <HAL_DMA_Start_IT+0x26>
 800285e:	2302      	movs	r3, #2
 8002860:	e040      	b.n	80028e4 <HAL_DMA_Start_IT+0xa8>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b01      	cmp	r3, #1
 8002874:	d12f      	bne.n	80028d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2202      	movs	r2, #2
 800287a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	68b9      	ldr	r1, [r7, #8]
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 fa4a 	bl	8002d24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002894:	223f      	movs	r2, #63	; 0x3f
 8002896:	409a      	lsls	r2, r3
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0216 	orr.w	r2, r2, #22
 80028aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0208 	orr.w	r2, r2, #8
 80028c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0201 	orr.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	e005      	b.n	80028e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028de:	2302      	movs	r3, #2
 80028e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028fa:	f7ff fddf 	bl	80024bc <HAL_GetTick>
 80028fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d008      	beq.n	800291e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2280      	movs	r2, #128	; 0x80
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e052      	b.n	80029c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0216 	bic.w	r2, r2, #22
 800292c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800293c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d103      	bne.n	800294e <HAL_DMA_Abort+0x62>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294a:	2b00      	cmp	r3, #0
 800294c:	d007      	beq.n	800295e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0208 	bic.w	r2, r2, #8
 800295c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800296e:	e013      	b.n	8002998 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002970:	f7ff fda4 	bl	80024bc <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b05      	cmp	r3, #5
 800297c:	d90c      	bls.n	8002998 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2220      	movs	r2, #32
 8002982:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2203      	movs	r2, #3
 8002988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e015      	b.n	80029c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1e4      	bne.n	8002970 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029aa:	223f      	movs	r2, #63	; 0x3f
 80029ac:	409a      	lsls	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d004      	beq.n	80029ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2280      	movs	r2, #128	; 0x80
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e00c      	b.n	8002a04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2205      	movs	r2, #5
 80029ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0201 	bic.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a1c:	4b92      	ldr	r3, [pc, #584]	; (8002c68 <HAL_DMA_IRQHandler+0x258>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a92      	ldr	r2, [pc, #584]	; (8002c6c <HAL_DMA_IRQHandler+0x25c>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	0a9b      	lsrs	r3, r3, #10
 8002a28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3a:	2208      	movs	r2, #8
 8002a3c:	409a      	lsls	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d01a      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d013      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0204 	bic.w	r2, r2, #4
 8002a62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a68:	2208      	movs	r2, #8
 8002a6a:	409a      	lsls	r2, r3
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a74:	f043 0201 	orr.w	r2, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a80:	2201      	movs	r2, #1
 8002a82:	409a      	lsls	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d012      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00b      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	f043 0202 	orr.w	r2, r3, #2
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d012      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00b      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae0:	f043 0204 	orr.w	r2, r3, #4
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aec:	2210      	movs	r2, #16
 8002aee:	409a      	lsls	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d043      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d03c      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0a:	2210      	movs	r2, #16
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d018      	beq.n	8002b52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d108      	bne.n	8002b40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d024      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
 8002b3e:	e01f      	b.n	8002b80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01b      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	4798      	blx	r3
 8002b50:	e016      	b.n	8002b80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d107      	bne.n	8002b70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0208 	bic.w	r2, r2, #8
 8002b6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b84:	2220      	movs	r2, #32
 8002b86:	409a      	lsls	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 808e 	beq.w	8002cae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 8086 	beq.w	8002cae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	409a      	lsls	r2, r3
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b05      	cmp	r3, #5
 8002bb8:	d136      	bne.n	8002c28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0216 	bic.w	r2, r2, #22
 8002bc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d103      	bne.n	8002bea <HAL_DMA_IRQHandler+0x1da>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d007      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0208 	bic.w	r2, r2, #8
 8002bf8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfe:	223f      	movs	r2, #63	; 0x3f
 8002c00:	409a      	lsls	r2, r3
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d07d      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	4798      	blx	r3
        }
        return;
 8002c26:	e078      	b.n	8002d1a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d01c      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d108      	bne.n	8002c56 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d030      	beq.n	8002cae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	4798      	blx	r3
 8002c54:	e02b      	b.n	8002cae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d027      	beq.n	8002cae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	4798      	blx	r3
 8002c66:	e022      	b.n	8002cae <HAL_DMA_IRQHandler+0x29e>
 8002c68:	20000004 	.word	0x20000004
 8002c6c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10f      	bne.n	8002c9e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0210 	bic.w	r2, r2, #16
 8002c8c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d032      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d022      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2205      	movs	r2, #5
 8002cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0201 	bic.w	r2, r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d307      	bcc.n	8002cf6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f2      	bne.n	8002cda <HAL_DMA_IRQHandler+0x2ca>
 8002cf4:	e000      	b.n	8002cf8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002cf6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	4798      	blx	r3
 8002d18:	e000      	b.n	8002d1c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d1a:	bf00      	nop
    }
  }
}
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop

08002d24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b40      	cmp	r3, #64	; 0x40
 8002d50:	d108      	bne.n	8002d64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d62:	e007      	b.n	8002d74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	60da      	str	r2, [r3, #12]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	3b10      	subs	r3, #16
 8002d90:	4a14      	ldr	r2, [pc, #80]	; (8002de4 <DMA_CalcBaseAndBitshift+0x64>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	091b      	lsrs	r3, r3, #4
 8002d98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d9a:	4a13      	ldr	r2, [pc, #76]	; (8002de8 <DMA_CalcBaseAndBitshift+0x68>)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4413      	add	r3, r2
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d909      	bls.n	8002dc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002db6:	f023 0303 	bic.w	r3, r3, #3
 8002dba:	1d1a      	adds	r2, r3, #4
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	659a      	str	r2, [r3, #88]	; 0x58
 8002dc0:	e007      	b.n	8002dd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dca:	f023 0303 	bic.w	r3, r3, #3
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	aaaaaaab 	.word	0xaaaaaaab
 8002de8:	0801bb58 	.word	0x0801bb58

08002dec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d11f      	bne.n	8002e46 <DMA_CheckFifoParam+0x5a>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d856      	bhi.n	8002eba <DMA_CheckFifoParam+0xce>
 8002e0c:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <DMA_CheckFifoParam+0x28>)
 8002e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e12:	bf00      	nop
 8002e14:	08002e25 	.word	0x08002e25
 8002e18:	08002e37 	.word	0x08002e37
 8002e1c:	08002e25 	.word	0x08002e25
 8002e20:	08002ebb 	.word	0x08002ebb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d046      	beq.n	8002ebe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e34:	e043      	b.n	8002ebe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e3e:	d140      	bne.n	8002ec2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e44:	e03d      	b.n	8002ec2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e4e:	d121      	bne.n	8002e94 <DMA_CheckFifoParam+0xa8>
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d837      	bhi.n	8002ec6 <DMA_CheckFifoParam+0xda>
 8002e56:	a201      	add	r2, pc, #4	; (adr r2, 8002e5c <DMA_CheckFifoParam+0x70>)
 8002e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5c:	08002e6d 	.word	0x08002e6d
 8002e60:	08002e73 	.word	0x08002e73
 8002e64:	08002e6d 	.word	0x08002e6d
 8002e68:	08002e85 	.word	0x08002e85
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e70:	e030      	b.n	8002ed4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d025      	beq.n	8002eca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e82:	e022      	b.n	8002eca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e8c:	d11f      	bne.n	8002ece <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e92:	e01c      	b.n	8002ece <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d903      	bls.n	8002ea2 <DMA_CheckFifoParam+0xb6>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d003      	beq.n	8002ea8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ea0:	e018      	b.n	8002ed4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea6:	e015      	b.n	8002ed4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00e      	beq.n	8002ed2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb8:	e00b      	b.n	8002ed2 <DMA_CheckFifoParam+0xe6>
      break;
 8002eba:	bf00      	nop
 8002ebc:	e00a      	b.n	8002ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ebe:	bf00      	nop
 8002ec0:	e008      	b.n	8002ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ec2:	bf00      	nop
 8002ec4:	e006      	b.n	8002ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e004      	b.n	8002ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e002      	b.n	8002ed4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ece:	bf00      	nop
 8002ed0:	e000      	b.n	8002ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed2:	bf00      	nop
    }
  } 
  
  return status; 
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop

08002ee4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61fb      	str	r3, [r7, #28]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002ef4:	4baa      	ldr	r3, [pc, #680]	; (80031a0 <HAL_ETH_Init+0x2bc>)
 8002ef6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002efc:	2300      	movs	r3, #0
 8002efe:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e183      	b.n	8003212 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d106      	bne.n	8002f24 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f003 fcb4 	bl	800688c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f24:	2300      	movs	r3, #0
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	4b9e      	ldr	r3, [pc, #632]	; (80031a4 <HAL_ETH_Init+0x2c0>)
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2c:	4a9d      	ldr	r2, [pc, #628]	; (80031a4 <HAL_ETH_Init+0x2c0>)
 8002f2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f32:	6453      	str	r3, [r2, #68]	; 0x44
 8002f34:	4b9b      	ldr	r3, [pc, #620]	; (80031a4 <HAL_ETH_Init+0x2c0>)
 8002f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002f40:	4b99      	ldr	r3, [pc, #612]	; (80031a8 <HAL_ETH_Init+0x2c4>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4a98      	ldr	r2, [pc, #608]	; (80031a8 <HAL_ETH_Init+0x2c4>)
 8002f46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f4a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002f4c:	4b96      	ldr	r3, [pc, #600]	; (80031a8 <HAL_ETH_Init+0x2c4>)
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	4994      	ldr	r1, [pc, #592]	; (80031a8 <HAL_ETH_Init+0x2c4>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0201 	orr.w	r2, r2, #1
 8002f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f70:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002f72:	f7ff faa3 	bl	80024bc <HAL_GetTick>
 8002f76:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002f78:	e011      	b.n	8002f9e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002f7a:	f7ff fa9f 	bl	80024bc <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f88:	d909      	bls.n	8002f9e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e139      	b.n	8003212 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1e4      	bne.n	8002f7a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f023 031c 	bic.w	r3, r3, #28
 8002fbe:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002fc0:	f001 ff80 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8002fc4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	4a78      	ldr	r2, [pc, #480]	; (80031ac <HAL_ETH_Init+0x2c8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d908      	bls.n	8002fe0 <HAL_ETH_Init+0xfc>
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	4a77      	ldr	r2, [pc, #476]	; (80031b0 <HAL_ETH_Init+0x2cc>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d804      	bhi.n	8002fe0 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	f043 0308 	orr.w	r3, r3, #8
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	e027      	b.n	8003030 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	4a73      	ldr	r2, [pc, #460]	; (80031b0 <HAL_ETH_Init+0x2cc>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d908      	bls.n	8002ffa <HAL_ETH_Init+0x116>
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	4a6d      	ldr	r2, [pc, #436]	; (80031a0 <HAL_ETH_Init+0x2bc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d204      	bcs.n	8002ffa <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f043 030c 	orr.w	r3, r3, #12
 8002ff6:	61fb      	str	r3, [r7, #28]
 8002ff8:	e01a      	b.n	8003030 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	4a68      	ldr	r2, [pc, #416]	; (80031a0 <HAL_ETH_Init+0x2bc>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d303      	bcc.n	800300a <HAL_ETH_Init+0x126>
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	4a6b      	ldr	r2, [pc, #428]	; (80031b4 <HAL_ETH_Init+0x2d0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d911      	bls.n	800302e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	4a69      	ldr	r2, [pc, #420]	; (80031b4 <HAL_ETH_Init+0x2d0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d908      	bls.n	8003024 <HAL_ETH_Init+0x140>
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	4a68      	ldr	r2, [pc, #416]	; (80031b8 <HAL_ETH_Init+0x2d4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d804      	bhi.n	8003024 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f043 0304 	orr.w	r3, r3, #4
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	e005      	b.n	8003030 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f043 0310 	orr.w	r3, r3, #16
 800302a:	61fb      	str	r3, [r7, #28]
 800302c:	e000      	b.n	8003030 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800302e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	69fa      	ldr	r2, [r7, #28]
 8003036:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003038:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800303c:	2100      	movs	r1, #0
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fc17 	bl	8003872 <HAL_ETH_WritePHYRegister>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800304e:	6939      	ldr	r1, [r7, #16]
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 fdcd 	bl	8003bf0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e0d7      	b.n	8003212 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003062:	20ff      	movs	r0, #255	; 0xff
 8003064:	f7ff fa36 	bl	80024d4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 80a5 	beq.w	80031bc <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003072:	f7ff fa23 	bl	80024bc <HAL_GetTick>
 8003076:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003078:	f107 030c 	add.w	r3, r7, #12
 800307c:	461a      	mov	r2, r3
 800307e:	2101      	movs	r1, #1
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 fb8e 	bl	80037a2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003086:	f7ff fa19 	bl	80024bc <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	f241 3288 	movw	r2, #5000	; 0x1388
 8003094:	4293      	cmp	r3, r2
 8003096:	d90f      	bls.n	80030b8 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800309c:	6939      	ldr	r1, [r7, #16]
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fda6 	bl	8003bf0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e0ac      	b.n	8003212 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0da      	beq.n	8003078 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80030c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030c6:	2100      	movs	r1, #0
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fbd2 	bl	8003872 <HAL_ETH_WritePHYRegister>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00b      	beq.n	80030ec <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80030d8:	6939      	ldr	r1, [r7, #16]
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fd88 	bl	8003bf0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80030e8:	2301      	movs	r3, #1
 80030ea:	e092      	b.n	8003212 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80030ec:	f7ff f9e6 	bl	80024bc <HAL_GetTick>
 80030f0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80030f2:	f107 030c 	add.w	r3, r7, #12
 80030f6:	461a      	mov	r2, r3
 80030f8:	2101      	movs	r1, #1
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fb51 	bl	80037a2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003100:	f7ff f9dc 	bl	80024bc <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	f241 3288 	movw	r2, #5000	; 0x1388
 800310e:	4293      	cmp	r3, r2
 8003110:	d90f      	bls.n	8003132 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003116:	6939      	ldr	r1, [r7, #16]
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 fd69 	bl	8003bf0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e06f      	b.n	8003212 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f003 0320 	and.w	r3, r3, #32
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0da      	beq.n	80030f2 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800313c:	f107 030c 	add.w	r3, r7, #12
 8003140:	461a      	mov	r2, r3
 8003142:	2110      	movs	r1, #16
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fb2c 	bl	80037a2 <HAL_ETH_ReadPHYRegister>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00b      	beq.n	8003168 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003154:	6939      	ldr	r1, [r7, #16]
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fd4a 	bl	8003bf0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003164:	2301      	movs	r3, #1
 8003166:	e054      	b.n	8003212 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b00      	cmp	r3, #0
 8003170:	d004      	beq.n	800317c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	e002      	b.n	8003182 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	609a      	str	r2, [r3, #8]
 8003192:	e035      	b.n	8003200 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	e030      	b.n	8003200 <HAL_ETH_Init+0x31c>
 800319e:	bf00      	nop
 80031a0:	03938700 	.word	0x03938700
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40013800 	.word	0x40013800
 80031ac:	01312cff 	.word	0x01312cff
 80031b0:	02160ebf 	.word	0x02160ebf
 80031b4:	05f5e0ff 	.word	0x05f5e0ff
 80031b8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	08db      	lsrs	r3, r3, #3
 80031c2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	085b      	lsrs	r3, r3, #1
 80031ca:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80031cc:	4313      	orrs	r3, r2
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	461a      	mov	r2, r3
 80031d2:	2100      	movs	r1, #0
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 fb4c 	bl	8003872 <HAL_ETH_WritePHYRegister>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00b      	beq.n	80031f8 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80031e4:	6939      	ldr	r1, [r7, #16]
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fd02 	bl	8003bf0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e00c      	b.n	8003212 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80031f8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80031fc:	f7ff f96a 	bl	80024d4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003200:	6939      	ldr	r1, [r7, #16]
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fcf4 	bl	8003bf0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3720      	adds	r7, #32
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop

0800321c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_ETH_DMATxDescListInit+0x20>
 8003238:	2302      	movs	r3, #2
 800323a:	e052      	b.n	80032e2 <HAL_ETH_DMATxDescListInit+0xc6>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	e030      	b.n	80032ba <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	015b      	lsls	r3, r3, #5
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	4413      	add	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003268:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003270:	fb02 f303 	mul.w	r3, r2, r3
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	4413      	add	r3, r2
 8003278:	461a      	mov	r2, r3
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d105      	bne.n	8003292 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	3b01      	subs	r3, #1
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	429a      	cmp	r2, r3
 800329a:	d208      	bcs.n	80032ae <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	3301      	adds	r3, #1
 80032a0:	015b      	lsls	r3, r3, #5
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	4413      	add	r3, r2
 80032a6:	461a      	mov	r2, r3
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	60da      	str	r2, [r3, #12]
 80032ac:	e002      	b.n	80032b4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	3301      	adds	r3, #1
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d3ca      	bcc.n	8003258 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032cc:	3310      	adds	r3, #16
 80032ce:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b087      	sub	sp, #28
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_ETH_DMARxDescListInit+0x20>
 800330a:	2302      	movs	r3, #2
 800330c:	e056      	b.n	80033bc <HAL_ETH_DMARxDescListInit+0xce>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2202      	movs	r2, #2
 800331a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	e034      	b.n	8003394 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	015b      	lsls	r3, r3, #5
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	4413      	add	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800333a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003342:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800334a:	fb02 f303 	mul.w	r3, r2, r3
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	461a      	mov	r2, r3
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d105      	bne.n	800336c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	3b01      	subs	r3, #1
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	429a      	cmp	r2, r3
 8003374:	d208      	bcs.n	8003388 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	3301      	adds	r3, #1
 800337a:	015b      	lsls	r3, r3, #5
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	4413      	add	r3, r2
 8003380:	461a      	mov	r2, r3
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	60da      	str	r2, [r3, #12]
 8003386:	e002      	b.n	800338e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	3301      	adds	r3, #1
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d3c6      	bcc.n	800332a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033a6:	330c      	adds	r3, #12
 80033a8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	371c      	adds	r7, #28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_ETH_TransmitFrame+0x24>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e0cd      	b.n	8003588 <HAL_ETH_TransmitFrame+0x1c0>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d109      	bne.n	8003416 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8003412:	2301      	movs	r3, #1
 8003414:	e0b8      	b.n	8003588 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	da09      	bge.n	8003434 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2212      	movs	r2, #18
 8003424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0a9      	b.n	8003588 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800343a:	4293      	cmp	r3, r2
 800343c:	d915      	bls.n	800346a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	4a54      	ldr	r2, [pc, #336]	; (8003594 <HAL_ETH_TransmitFrame+0x1cc>)
 8003442:	fba2 2303 	umull	r2, r3, r2, r3
 8003446:	0a9b      	lsrs	r3, r3, #10
 8003448:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	4b51      	ldr	r3, [pc, #324]	; (8003594 <HAL_ETH_TransmitFrame+0x1cc>)
 800344e:	fba3 1302 	umull	r1, r3, r3, r2
 8003452:	0a9b      	lsrs	r3, r3, #10
 8003454:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003458:	fb01 f303 	mul.w	r3, r1, r3
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d005      	beq.n	800346e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	3301      	adds	r3, #1
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	e001      	b.n	800346e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800346a:	2301      	movs	r3, #1
 800346c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d11c      	bne.n	80034ae <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003482:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800348e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800349e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	461a      	mov	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80034ac:	e04b      	b.n	8003546 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	e044      	b.n	800353e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034c2:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d107      	bne.n	80034da <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034d8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034de:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80034e2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d116      	bne.n	800351c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80034fc:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	4a25      	ldr	r2, [pc, #148]	; (8003598 <HAL_ETH_TransmitFrame+0x1d0>)
 8003502:	fb02 f203 	mul.w	r2, r2, r3
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	4413      	add	r3, r2
 800350a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800350e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800351a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800352a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	461a      	mov	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	3301      	adds	r3, #1
 800353c:	613b      	str	r3, [r7, #16]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	429a      	cmp	r2, r3
 8003544:	d3b6      	bcc.n	80034b4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800354e:	3314      	adds	r3, #20
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00d      	beq.n	8003576 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003562:	3314      	adds	r3, #20
 8003564:	2204      	movs	r2, #4
 8003566:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003570:	3304      	adds	r3, #4
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	371c      	adds	r7, #28
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	ac02b00b 	.word	0xac02b00b
 8003598:	fffffa0c 	.word	0xfffffa0c

0800359c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e074      	b.n	80036a0 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2202      	movs	r2, #2
 80035c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80035c6:	e05a      	b.n	800367e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	3301      	adds	r3, #1
 80035cc:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035dc:	d10d      	bne.n	80035fa <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	461a      	mov	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	629a      	str	r2, [r3, #40]	; 0x28
 80035f8:	e041      	b.n	800367e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10b      	bne.n	8003620 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	461a      	mov	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	629a      	str	r2, [r3, #40]	; 0x28
 800361e:	e02e      	b.n	800367e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	2b01      	cmp	r3, #1
 8003638:	d103      	bne.n	8003642 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	0c1b      	lsrs	r3, r3, #16
 800364a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800364e:	1f1a      	subs	r2, r3, #4
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	461a      	mov	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	e010      	b.n	80036a0 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	db02      	blt.n	800368e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b03      	cmp	r3, #3
 800368c:	d99c      	bls.n	80035c8 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036bc:	3314      	adds	r3, #20
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c4:	2b40      	cmp	r3, #64	; 0x40
 80036c6:	d112      	bne.n	80036ee <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f003 f98d 	bl	80069e8 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d6:	3314      	adds	r3, #20
 80036d8:	2240      	movs	r2, #64	; 0x40
 80036da:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036ec:	e01b      	b.n	8003726 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036f6:	3314      	adds	r3, #20
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d111      	bne.n	8003726 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f839 	bl	800377a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003710:	3314      	adds	r3, #20
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800372e:	3314      	adds	r3, #20
 8003730:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003734:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800373e:	3314      	adds	r3, #20
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800374a:	d112      	bne.n	8003772 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f81e 	bl	800378e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800375a:	3314      	adds	r3, #20
 800375c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003760:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b086      	sub	sp, #24
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	460b      	mov	r3, r1
 80037ac:	607a      	str	r2, [r7, #4]
 80037ae:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b82      	cmp	r3, #130	; 0x82
 80037c2:	d101      	bne.n	80037c8 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80037c4:	2302      	movs	r3, #2
 80037c6:	e050      	b.n	800386a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2282      	movs	r2, #130	; 0x82
 80037cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f003 031c 	and.w	r3, r3, #28
 80037de:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8a1b      	ldrh	r3, [r3, #16]
 80037e4:	02db      	lsls	r3, r3, #11
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80037ee:	897b      	ldrh	r3, [r7, #10]
 80037f0:	019b      	lsls	r3, r3, #6
 80037f2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f023 0302 	bic.w	r3, r3, #2
 8003802:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003814:	f7fe fe52 	bl	80024bc <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800381a:	e015      	b.n	8003848 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800381c:	f7fe fe4e 	bl	80024bc <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382a:	d309      	bcc.n	8003840 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e014      	b.n	800386a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1e4      	bne.n	800381c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	b29b      	uxth	r3, r3
 800385a:	461a      	mov	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b086      	sub	sp, #24
 8003876:	af00      	add	r7, sp, #0
 8003878:	60f8      	str	r0, [r7, #12]
 800387a:	460b      	mov	r3, r1
 800387c:	607a      	str	r2, [r7, #4]
 800387e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b42      	cmp	r3, #66	; 0x42
 8003892:	d101      	bne.n	8003898 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003894:	2302      	movs	r3, #2
 8003896:	e04e      	b.n	8003936 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2242      	movs	r2, #66	; 0x42
 800389c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f003 031c 	and.w	r3, r3, #28
 80038ae:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8a1b      	ldrh	r3, [r3, #16]
 80038b4:	02db      	lsls	r3, r3, #11
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80038be:	897b      	ldrh	r3, [r7, #10]
 80038c0:	019b      	lsls	r3, r3, #6
 80038c2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f043 0302 	orr.w	r3, r3, #2
 80038d2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80038ee:	f7fe fde5 	bl	80024bc <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80038f4:	e015      	b.n	8003922 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80038f6:	f7fe fde1 	bl	80024bc <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003904:	d309      	bcc.n	800391a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e00d      	b.n	8003936 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1e4      	bne.n	80038f6 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_ETH_Start+0x16>
 8003950:	2302      	movs	r3, #2
 8003952:	e01f      	b.n	8003994 <HAL_ETH_Start+0x56>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fb45 	bl	8003ff4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 fb7c 	bl	8004068 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fc13 	bl	800419c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fbb0 	bl	80040dc <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 fbdd 	bl	800413c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_ETH_Stop+0x16>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e01f      	b.n	80039f2 <HAL_ETH_Stop+0x56>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fba2 	bl	800410c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fbcf 	bl	800416c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fb67 	bl	80040a2 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 fbe1 	bl	800419c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fb27 	bl	800402e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_ETH_ConfigMAC+0x1c>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e0e4      	b.n	8003be2 <HAL_ETH_ConfigMAC+0x1e6>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 80b1 	beq.w	8003b92 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4b6c      	ldr	r3, [pc, #432]	; (8003bec <HAL_ETH_ConfigMAC+0x1f0>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003a48:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8003a4e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8003a54:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8003a5a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8003a60:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8003a66:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8003a6c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8003a72:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8003a78:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8003a7e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8003a84:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8003a8a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003aa2:	2001      	movs	r0, #1
 8003aa4:	f7fe fd16 	bl	80024d4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003ab8:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8003abe:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8003ac4:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8003aca:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8003ad0:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8003ad6:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8003ae2:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003ae4:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003aee:	2001      	movs	r0, #1
 8003af0:	f7fe fcf0 	bl	80024d4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b04:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b0e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003b1e:	4013      	ands	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b26:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003b2c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8003b32:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8003b38:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8003b3e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8003b44:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	f7fe fcb9 	bl	80024d4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b82:	2001      	movs	r0, #1
 8003b84:	f7fe fca6 	bl	80024d4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	61da      	str	r2, [r3, #28]
 8003b90:	e01e      	b.n	8003bd0 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003ba0:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689a      	ldr	r2, [r3, #8]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003bc2:	2001      	movs	r0, #1
 8003bc4:	f7fe fc86 	bl	80024d4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	ff20810f 	.word	0xff20810f

08003bf0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b0b0      	sub	sp, #192	; 0xc0
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d007      	beq.n	8003c16 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c0c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c14:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003c16:	2300      	movs	r3, #0
 8003c18:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003c22:	2300      	movs	r3, #0
 8003c24:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003c26:	2300      	movs	r3, #0
 8003c28:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d103      	bne.n	8003c3e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c3a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c3c:	e001      	b.n	8003c42 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003c42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c46:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003c50:	2300      	movs	r3, #0
 8003c52:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003c54:	2300      	movs	r3, #0
 8003c56:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003c5c:	2340      	movs	r3, #64	; 0x40
 8003c5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003c60:	2300      	movs	r3, #0
 8003c62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003c72:	2300      	movs	r3, #0
 8003c74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003c90:	2380      	movs	r3, #128	; 0x80
 8003c92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003c96:	2300      	movs	r3, #0
 8003c98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003cc4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003cc8:	4bac      	ldr	r3, [pc, #688]	; (8003f7c <ETH_MACDMAConfig+0x38c>)
 8003cca:	4013      	ands	r3, r2
 8003ccc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003cd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003cd4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003cd8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003cdc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003ce2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003ce4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003ce6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003ce8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003cea:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003cf0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003cf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003cf4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003cf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003cf8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003cfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003cfc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003d00:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003d04:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003d06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d18:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d24:	2001      	movs	r0, #1
 8003d26:	f7fe fbd5 	bl	80024d4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d32:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003d34:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003d36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003d38:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003d3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003d3c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003d3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003d42:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003d44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003d48:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003d4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003d4e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003d50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003d54:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003d58:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003d60:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003d62:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d6e:	2001      	movs	r0, #1
 8003d70:	f7fe fbb0 	bl	80024d4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d7c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d86:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003d90:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003d9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003da0:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003da4:	4013      	ands	r3, r2
 8003da6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003daa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dae:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003db0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003db4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003db6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003dba:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003dbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003dc0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003dc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003dc6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003dc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003dcc:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003dce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003de0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dec:	2001      	movs	r0, #1
 8003dee:	f7fe fb71 	bl	80024d4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003dfa:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003dfc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003e00:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e16:	2001      	movs	r0, #1
 8003e18:	f7fe fb5c 	bl	80024d4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e24:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003e26:	2300      	movs	r3, #0
 8003e28:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003e2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e2e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003e30:	2300      	movs	r3, #0
 8003e32:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003e34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e38:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003e42:	2300      	movs	r3, #0
 8003e44:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003e46:	2300      	movs	r3, #0
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003e4a:	2304      	movs	r3, #4
 8003e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003e4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003e54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e58:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003e5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e5e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003e60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e64:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003e66:	2380      	movs	r3, #128	; 0x80
 8003e68:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e7a:	3318      	adds	r3, #24
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003e82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e86:	4b3e      	ldr	r3, [pc, #248]	; (8003f80 <ETH_MACDMAConfig+0x390>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003e8e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003e90:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003e92:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003e94:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003e96:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003e98:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003e9a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003e9c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003e9e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003ea0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003ea2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003ea6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003eaa:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003eae:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003eb0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec2:	3318      	adds	r3, #24
 8003ec4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ec8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed2:	3318      	adds	r3, #24
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003eda:	2001      	movs	r0, #1
 8003edc:	f7fe fafa 	bl	80024d4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ee8:	3318      	adds	r3, #24
 8003eea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003eee:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003ef4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003ef8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003efc:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003f00:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f04:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003f06:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003f0a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f18:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f28:	2001      	movs	r0, #1
 8003f2a:	f7fe fad3 	bl	80024d4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f3a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d10f      	bne.n	8003f64 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f4c:	331c      	adds	r3, #28
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f60:	331c      	adds	r3, #28
 8003f62:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f809 	bl	8003f84 <ETH_MACAddressConfig>
}
 8003f72:	bf00      	nop
 8003f74:	37c0      	adds	r7, #192	; 0xc0
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	ff20810f 	.word	0xff20810f
 8003f80:	f8de3f23 	.word	0xf8de3f23

08003f84 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3305      	adds	r3, #5
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	3204      	adds	r2, #4
 8003f9c:	7812      	ldrb	r2, [r2, #0]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	4b11      	ldr	r3, [pc, #68]	; (8003fec <ETH_MACAddressConfig+0x68>)
 8003fa6:	4413      	add	r3, r2
 8003fa8:	461a      	mov	r2, r3
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3303      	adds	r3, #3
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	061a      	lsls	r2, r3, #24
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3302      	adds	r3, #2
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	041b      	lsls	r3, r3, #16
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	021b      	lsls	r3, r3, #8
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	7812      	ldrb	r2, [r2, #0]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <ETH_MACAddressConfig+0x6c>)
 8003fd6:	4413      	add	r3, r2
 8003fd8:	461a      	mov	r2, r3
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	6013      	str	r3, [r2, #0]
}
 8003fde:	bf00      	nop
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40028040 	.word	0x40028040
 8003ff0:	40028044 	.word	0x40028044

08003ff4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0208 	orr.w	r2, r2, #8
 800400e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004018:	2001      	movs	r0, #1
 800401a:	f000 f8e9 	bl	80041f0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	601a      	str	r2, [r3, #0]
}
 8004026:	bf00      	nop
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0208 	bic.w	r2, r2, #8
 8004048:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004052:	2001      	movs	r0, #1
 8004054:	f000 f8cc 	bl	80041f0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	601a      	str	r2, [r3, #0]
}
 8004060:	bf00      	nop
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0204 	orr.w	r2, r2, #4
 8004082:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800408c:	2001      	movs	r0, #1
 800408e:	f000 f8af 	bl	80041f0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	601a      	str	r2, [r3, #0]
}
 800409a:	bf00      	nop
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0204 	bic.w	r2, r2, #4
 80040bc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80040c6:	2001      	movs	r0, #1
 80040c8:	f000 f892 	bl	80041f0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	601a      	str	r2, [r3, #0]
}
 80040d4:	bf00      	nop
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ec:	3318      	adds	r3, #24
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040fc:	3318      	adds	r3, #24
 80040fe:	601a      	str	r2, [r3, #0]
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800411c:	3318      	adds	r3, #24
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800412c:	3318      	adds	r3, #24
 800412e:	601a      	str	r2, [r3, #0]
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800414c:	3318      	adds	r3, #24
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f042 0202 	orr.w	r2, r2, #2
 8004158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800415c:	3318      	adds	r3, #24
 800415e:	601a      	str	r2, [r3, #0]
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800417c:	3318      	adds	r3, #24
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0202 	bic.w	r2, r2, #2
 8004188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800418c:	3318      	adds	r3, #24
 800418e:	601a      	str	r2, [r3, #0]
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b0:	3318      	adds	r3, #24
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80041bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041c0:	3318      	adds	r3, #24
 80041c2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041cc:	3318      	adds	r3, #24
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80041d2:	2001      	movs	r0, #1
 80041d4:	f000 f80c 	bl	80041f0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e2:	3318      	adds	r3, #24
 80041e4:	601a      	str	r2, [r3, #0]
}
 80041e6:	bf00      	nop
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <ETH_Delay+0x38>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a0b      	ldr	r2, [pc, #44]	; (800422c <ETH_Delay+0x3c>)
 80041fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004202:	0a5b      	lsrs	r3, r3, #9
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	fb02 f303 	mul.w	r3, r2, r3
 800420a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800420c:	bf00      	nop
  } 
  while (Delay --);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	1e5a      	subs	r2, r3, #1
 8004212:	60fa      	str	r2, [r7, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1f9      	bne.n	800420c <ETH_Delay+0x1c>
}
 8004218:	bf00      	nop
 800421a:	bf00      	nop
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20000004 	.word	0x20000004
 800422c:	10624dd3 	.word	0x10624dd3

08004230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004230:	b480      	push	{r7}
 8004232:	b089      	sub	sp, #36	; 0x24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800423a:	2300      	movs	r3, #0
 800423c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800423e:	2300      	movs	r3, #0
 8004240:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004242:	2300      	movs	r3, #0
 8004244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004246:	2300      	movs	r3, #0
 8004248:	61fb      	str	r3, [r7, #28]
 800424a:	e16b      	b.n	8004524 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800424c:	2201      	movs	r2, #1
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	4013      	ands	r3, r2
 800425e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	429a      	cmp	r2, r3
 8004266:	f040 815a 	bne.w	800451e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	2b01      	cmp	r3, #1
 8004274:	d005      	beq.n	8004282 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800427e:	2b02      	cmp	r3, #2
 8004280:	d130      	bne.n	80042e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	2203      	movs	r2, #3
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	43db      	mvns	r3, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4013      	ands	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042b8:	2201      	movs	r2, #1
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	43db      	mvns	r3, r3
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	4013      	ands	r3, r2
 80042c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	091b      	lsrs	r3, r3, #4
 80042ce:	f003 0201 	and.w	r2, r3, #1
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	4313      	orrs	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f003 0303 	and.w	r3, r3, #3
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d017      	beq.n	8004320 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	2203      	movs	r2, #3
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	43db      	mvns	r3, r3
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	4013      	ands	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4313      	orrs	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f003 0303 	and.w	r3, r3, #3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d123      	bne.n	8004374 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	08da      	lsrs	r2, r3, #3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3208      	adds	r2, #8
 8004334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004338:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	220f      	movs	r2, #15
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	43db      	mvns	r3, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4013      	ands	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4313      	orrs	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	08da      	lsrs	r2, r3, #3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3208      	adds	r2, #8
 800436e:	69b9      	ldr	r1, [r7, #24]
 8004370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	2203      	movs	r2, #3
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	43db      	mvns	r3, r3
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	4013      	ands	r3, r2
 800438a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f003 0203 	and.w	r2, r3, #3
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4313      	orrs	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 80b4 	beq.w	800451e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	4b60      	ldr	r3, [pc, #384]	; (800453c <HAL_GPIO_Init+0x30c>)
 80043bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043be:	4a5f      	ldr	r2, [pc, #380]	; (800453c <HAL_GPIO_Init+0x30c>)
 80043c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043c4:	6453      	str	r3, [r2, #68]	; 0x44
 80043c6:	4b5d      	ldr	r3, [pc, #372]	; (800453c <HAL_GPIO_Init+0x30c>)
 80043c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043d2:	4a5b      	ldr	r2, [pc, #364]	; (8004540 <HAL_GPIO_Init+0x310>)
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	089b      	lsrs	r3, r3, #2
 80043d8:	3302      	adds	r3, #2
 80043da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	220f      	movs	r2, #15
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	43db      	mvns	r3, r3
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4013      	ands	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a52      	ldr	r2, [pc, #328]	; (8004544 <HAL_GPIO_Init+0x314>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d02b      	beq.n	8004456 <HAL_GPIO_Init+0x226>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a51      	ldr	r2, [pc, #324]	; (8004548 <HAL_GPIO_Init+0x318>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d025      	beq.n	8004452 <HAL_GPIO_Init+0x222>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a50      	ldr	r2, [pc, #320]	; (800454c <HAL_GPIO_Init+0x31c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d01f      	beq.n	800444e <HAL_GPIO_Init+0x21e>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a4f      	ldr	r2, [pc, #316]	; (8004550 <HAL_GPIO_Init+0x320>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d019      	beq.n	800444a <HAL_GPIO_Init+0x21a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a4e      	ldr	r2, [pc, #312]	; (8004554 <HAL_GPIO_Init+0x324>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d013      	beq.n	8004446 <HAL_GPIO_Init+0x216>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a4d      	ldr	r2, [pc, #308]	; (8004558 <HAL_GPIO_Init+0x328>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00d      	beq.n	8004442 <HAL_GPIO_Init+0x212>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a4c      	ldr	r2, [pc, #304]	; (800455c <HAL_GPIO_Init+0x32c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d007      	beq.n	800443e <HAL_GPIO_Init+0x20e>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a4b      	ldr	r2, [pc, #300]	; (8004560 <HAL_GPIO_Init+0x330>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d101      	bne.n	800443a <HAL_GPIO_Init+0x20a>
 8004436:	2307      	movs	r3, #7
 8004438:	e00e      	b.n	8004458 <HAL_GPIO_Init+0x228>
 800443a:	2308      	movs	r3, #8
 800443c:	e00c      	b.n	8004458 <HAL_GPIO_Init+0x228>
 800443e:	2306      	movs	r3, #6
 8004440:	e00a      	b.n	8004458 <HAL_GPIO_Init+0x228>
 8004442:	2305      	movs	r3, #5
 8004444:	e008      	b.n	8004458 <HAL_GPIO_Init+0x228>
 8004446:	2304      	movs	r3, #4
 8004448:	e006      	b.n	8004458 <HAL_GPIO_Init+0x228>
 800444a:	2303      	movs	r3, #3
 800444c:	e004      	b.n	8004458 <HAL_GPIO_Init+0x228>
 800444e:	2302      	movs	r3, #2
 8004450:	e002      	b.n	8004458 <HAL_GPIO_Init+0x228>
 8004452:	2301      	movs	r3, #1
 8004454:	e000      	b.n	8004458 <HAL_GPIO_Init+0x228>
 8004456:	2300      	movs	r3, #0
 8004458:	69fa      	ldr	r2, [r7, #28]
 800445a:	f002 0203 	and.w	r2, r2, #3
 800445e:	0092      	lsls	r2, r2, #2
 8004460:	4093      	lsls	r3, r2
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	4313      	orrs	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004468:	4935      	ldr	r1, [pc, #212]	; (8004540 <HAL_GPIO_Init+0x310>)
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	089b      	lsrs	r3, r3, #2
 800446e:	3302      	adds	r3, #2
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004476:	4b3b      	ldr	r3, [pc, #236]	; (8004564 <HAL_GPIO_Init+0x334>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	43db      	mvns	r3, r3
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	4013      	ands	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4313      	orrs	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800449a:	4a32      	ldr	r2, [pc, #200]	; (8004564 <HAL_GPIO_Init+0x334>)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80044a0:	4b30      	ldr	r3, [pc, #192]	; (8004564 <HAL_GPIO_Init+0x334>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	43db      	mvns	r3, r3
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	4013      	ands	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044c4:	4a27      	ldr	r2, [pc, #156]	; (8004564 <HAL_GPIO_Init+0x334>)
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044ca:	4b26      	ldr	r3, [pc, #152]	; (8004564 <HAL_GPIO_Init+0x334>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	43db      	mvns	r3, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4013      	ands	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044ee:	4a1d      	ldr	r2, [pc, #116]	; (8004564 <HAL_GPIO_Init+0x334>)
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044f4:	4b1b      	ldr	r3, [pc, #108]	; (8004564 <HAL_GPIO_Init+0x334>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	43db      	mvns	r3, r3
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4013      	ands	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004518:	4a12      	ldr	r2, [pc, #72]	; (8004564 <HAL_GPIO_Init+0x334>)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	3301      	adds	r3, #1
 8004522:	61fb      	str	r3, [r7, #28]
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b0f      	cmp	r3, #15
 8004528:	f67f ae90 	bls.w	800424c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800452c:	bf00      	nop
 800452e:	bf00      	nop
 8004530:	3724      	adds	r7, #36	; 0x24
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40023800 	.word	0x40023800
 8004540:	40013800 	.word	0x40013800
 8004544:	40020000 	.word	0x40020000
 8004548:	40020400 	.word	0x40020400
 800454c:	40020800 	.word	0x40020800
 8004550:	40020c00 	.word	0x40020c00
 8004554:	40021000 	.word	0x40021000
 8004558:	40021400 	.word	0x40021400
 800455c:	40021800 	.word	0x40021800
 8004560:	40021c00 	.word	0x40021c00
 8004564:	40013c00 	.word	0x40013c00

08004568 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	460b      	mov	r3, r1
 8004572:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	887b      	ldrh	r3, [r7, #2]
 800457a:	4013      	ands	r3, r2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004580:	2301      	movs	r3, #1
 8004582:	73fb      	strb	r3, [r7, #15]
 8004584:	e001      	b.n	800458a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004586:	2300      	movs	r3, #0
 8004588:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800458a:	7bfb      	ldrb	r3, [r7, #15]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	807b      	strh	r3, [r7, #2]
 80045a4:	4613      	mov	r3, r2
 80045a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045a8:	787b      	ldrb	r3, [r7, #1]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045ae:	887a      	ldrh	r2, [r7, #2]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045b4:	e003      	b.n	80045be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045b6:	887b      	ldrh	r3, [r7, #2]
 80045b8:	041a      	lsls	r2, r3, #16
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	619a      	str	r2, [r3, #24]
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
	...

080045cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e264      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d075      	beq.n	80046d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045ea:	4ba3      	ldr	r3, [pc, #652]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d00c      	beq.n	8004610 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045f6:	4ba0      	ldr	r3, [pc, #640]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d112      	bne.n	8004628 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004602:	4b9d      	ldr	r3, [pc, #628]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800460a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800460e:	d10b      	bne.n	8004628 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004610:	4b99      	ldr	r3, [pc, #612]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d05b      	beq.n	80046d4 <HAL_RCC_OscConfig+0x108>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d157      	bne.n	80046d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e23f      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004630:	d106      	bne.n	8004640 <HAL_RCC_OscConfig+0x74>
 8004632:	4b91      	ldr	r3, [pc, #580]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a90      	ldr	r2, [pc, #576]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	e01d      	b.n	800467c <HAL_RCC_OscConfig+0xb0>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004648:	d10c      	bne.n	8004664 <HAL_RCC_OscConfig+0x98>
 800464a:	4b8b      	ldr	r3, [pc, #556]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a8a      	ldr	r2, [pc, #552]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	4b88      	ldr	r3, [pc, #544]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a87      	ldr	r2, [pc, #540]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 800465c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	e00b      	b.n	800467c <HAL_RCC_OscConfig+0xb0>
 8004664:	4b84      	ldr	r3, [pc, #528]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a83      	ldr	r2, [pc, #524]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 800466a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	4b81      	ldr	r3, [pc, #516]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a80      	ldr	r2, [pc, #512]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800467a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d013      	beq.n	80046ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004684:	f7fd ff1a 	bl	80024bc <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800468c:	f7fd ff16 	bl	80024bc <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b64      	cmp	r3, #100	; 0x64
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e204      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800469e:	4b76      	ldr	r3, [pc, #472]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCC_OscConfig+0xc0>
 80046aa:	e014      	b.n	80046d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ac:	f7fd ff06 	bl	80024bc <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046b4:	f7fd ff02 	bl	80024bc <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b64      	cmp	r3, #100	; 0x64
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e1f0      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046c6:	4b6c      	ldr	r3, [pc, #432]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1f0      	bne.n	80046b4 <HAL_RCC_OscConfig+0xe8>
 80046d2:	e000      	b.n	80046d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d063      	beq.n	80047aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046e2:	4b65      	ldr	r3, [pc, #404]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00b      	beq.n	8004706 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ee:	4b62      	ldr	r3, [pc, #392]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	d11c      	bne.n	8004734 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046fa:	4b5f      	ldr	r3, [pc, #380]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d116      	bne.n	8004734 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004706:	4b5c      	ldr	r3, [pc, #368]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d005      	beq.n	800471e <HAL_RCC_OscConfig+0x152>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d001      	beq.n	800471e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e1c4      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471e:	4b56      	ldr	r3, [pc, #344]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	4952      	ldr	r1, [pc, #328]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 800472e:	4313      	orrs	r3, r2
 8004730:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004732:	e03a      	b.n	80047aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d020      	beq.n	800477e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800473c:	4b4f      	ldr	r3, [pc, #316]	; (800487c <HAL_RCC_OscConfig+0x2b0>)
 800473e:	2201      	movs	r2, #1
 8004740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004742:	f7fd febb 	bl	80024bc <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004748:	e008      	b.n	800475c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800474a:	f7fd feb7 	bl	80024bc <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e1a5      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800475c:	4b46      	ldr	r3, [pc, #280]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0f0      	beq.n	800474a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004768:	4b43      	ldr	r3, [pc, #268]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	4940      	ldr	r1, [pc, #256]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004778:	4313      	orrs	r3, r2
 800477a:	600b      	str	r3, [r1, #0]
 800477c:	e015      	b.n	80047aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800477e:	4b3f      	ldr	r3, [pc, #252]	; (800487c <HAL_RCC_OscConfig+0x2b0>)
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fd fe9a 	bl	80024bc <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800478c:	f7fd fe96 	bl	80024bc <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e184      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800479e:	4b36      	ldr	r3, [pc, #216]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d030      	beq.n	8004818 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d016      	beq.n	80047ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047be:	4b30      	ldr	r3, [pc, #192]	; (8004880 <HAL_RCC_OscConfig+0x2b4>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c4:	f7fd fe7a 	bl	80024bc <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047cc:	f7fd fe76 	bl	80024bc <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e164      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047de:	4b26      	ldr	r3, [pc, #152]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 80047e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0f0      	beq.n	80047cc <HAL_RCC_OscConfig+0x200>
 80047ea:	e015      	b.n	8004818 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047ec:	4b24      	ldr	r3, [pc, #144]	; (8004880 <HAL_RCC_OscConfig+0x2b4>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f2:	f7fd fe63 	bl	80024bc <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047fa:	f7fd fe5f 	bl	80024bc <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e14d      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800480c:	4b1a      	ldr	r3, [pc, #104]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 800480e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1f0      	bne.n	80047fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 80a0 	beq.w	8004966 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004826:	2300      	movs	r3, #0
 8004828:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800482a:	4b13      	ldr	r3, [pc, #76]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10f      	bne.n	8004856 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004836:	2300      	movs	r3, #0
 8004838:	60bb      	str	r3, [r7, #8]
 800483a:	4b0f      	ldr	r3, [pc, #60]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	4a0e      	ldr	r2, [pc, #56]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004844:	6413      	str	r3, [r2, #64]	; 0x40
 8004846:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <HAL_RCC_OscConfig+0x2ac>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484e:	60bb      	str	r3, [r7, #8]
 8004850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004852:	2301      	movs	r3, #1
 8004854:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004856:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <HAL_RCC_OscConfig+0x2b8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485e:	2b00      	cmp	r3, #0
 8004860:	d121      	bne.n	80048a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004862:	4b08      	ldr	r3, [pc, #32]	; (8004884 <HAL_RCC_OscConfig+0x2b8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a07      	ldr	r2, [pc, #28]	; (8004884 <HAL_RCC_OscConfig+0x2b8>)
 8004868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800486c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800486e:	f7fd fe25 	bl	80024bc <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004874:	e011      	b.n	800489a <HAL_RCC_OscConfig+0x2ce>
 8004876:	bf00      	nop
 8004878:	40023800 	.word	0x40023800
 800487c:	42470000 	.word	0x42470000
 8004880:	42470e80 	.word	0x42470e80
 8004884:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004888:	f7fd fe18 	bl	80024bc <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e106      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489a:	4b85      	ldr	r3, [pc, #532]	; (8004ab0 <HAL_RCC_OscConfig+0x4e4>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0f0      	beq.n	8004888 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d106      	bne.n	80048bc <HAL_RCC_OscConfig+0x2f0>
 80048ae:	4b81      	ldr	r3, [pc, #516]	; (8004ab4 <HAL_RCC_OscConfig+0x4e8>)
 80048b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b2:	4a80      	ldr	r2, [pc, #512]	; (8004ab4 <HAL_RCC_OscConfig+0x4e8>)
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	6713      	str	r3, [r2, #112]	; 0x70
 80048ba:	e01c      	b.n	80048f6 <HAL_RCC_OscConfig+0x32a>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	2b05      	cmp	r3, #5
 80048c2:	d10c      	bne.n	80048de <HAL_RCC_OscConfig+0x312>
 80048c4:	4b7b      	ldr	r3, [pc, #492]	; (8004ab4 <HAL_RCC_OscConfig+0x4e8>)
 80048c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c8:	4a7a      	ldr	r2, [pc, #488]	; (8004ab4 <HAL_RCC_OscConfig+0x4e8>)
 80048ca:	f043 0304 	orr.w	r3, r3, #4
 80048ce:	6713      	str	r3, [r2, #112]	; 0x70
 80048d0:	4b78      	ldr	r3, [pc, #480]	; (8004ab4 <HAL_RCC_OscConfig+0x4e8>)
 80048d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d4:	4a77      	ldr	r2, [pc, #476]	; (8004ab4 <HAL_RCC_OscConfig+0x4e8>)
 80048d6:	f043 0301 	orr.w	r3, r3, #1
 80048da:	6713      	str	r3, [r2, #112]	; 0x70
 80048dc:	e00b      	b.n	80048f6 <HAL_RCC_OscConfig+0x32a>
 80048de:	4b75      	ldr	r3, [pc, #468]	; (8004ab4 <HAL_RCC_OscConfig+0x4e8>)
 80048e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e2:	4a74      	ldr	r2, [pc, #464]	; (8004ab4 <HAL_RCC_OscConfig+0x4e8>)
 80048e4:	f023 0301 	bic.w	r3, r3, #1
 80048e8:	6713      	str	r3, [r2, #112]	; 0x70
 80048ea:	4b72      	ldr	r3, [pc, #456]	; (8004ab4 <HAL_RCC_OscConfig+0x4e8>)
 80048ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ee:	4a71      	ldr	r2, [pc, #452]	; (8004ab4 <HAL_RCC_OscConfig+0x4e8>)
 80048f0:	f023 0304 	bic.w	r3, r3, #4
 80048f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d015      	beq.n	800492a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fe:	f7fd fddd 	bl	80024bc <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004904:	e00a      	b.n	800491c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004906:	f7fd fdd9 	bl	80024bc <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	f241 3288 	movw	r2, #5000	; 0x1388
 8004914:	4293      	cmp	r3, r2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e0c5      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800491c:	4b65      	ldr	r3, [pc, #404]	; (8004ab4 <HAL_RCC_OscConfig+0x4e8>)
 800491e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0ee      	beq.n	8004906 <HAL_RCC_OscConfig+0x33a>
 8004928:	e014      	b.n	8004954 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800492a:	f7fd fdc7 	bl	80024bc <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004930:	e00a      	b.n	8004948 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004932:	f7fd fdc3 	bl	80024bc <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004940:	4293      	cmp	r3, r2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e0af      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004948:	4b5a      	ldr	r3, [pc, #360]	; (8004ab4 <HAL_RCC_OscConfig+0x4e8>)
 800494a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1ee      	bne.n	8004932 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004954:	7dfb      	ldrb	r3, [r7, #23]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d105      	bne.n	8004966 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800495a:	4b56      	ldr	r3, [pc, #344]	; (8004ab4 <HAL_RCC_OscConfig+0x4e8>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	4a55      	ldr	r2, [pc, #340]	; (8004ab4 <HAL_RCC_OscConfig+0x4e8>)
 8004960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004964:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 809b 	beq.w	8004aa6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004970:	4b50      	ldr	r3, [pc, #320]	; (8004ab4 <HAL_RCC_OscConfig+0x4e8>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 030c 	and.w	r3, r3, #12
 8004978:	2b08      	cmp	r3, #8
 800497a:	d05c      	beq.n	8004a36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	2b02      	cmp	r3, #2
 8004982:	d141      	bne.n	8004a08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004984:	4b4c      	ldr	r3, [pc, #304]	; (8004ab8 <HAL_RCC_OscConfig+0x4ec>)
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498a:	f7fd fd97 	bl	80024bc <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004992:	f7fd fd93 	bl	80024bc <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e081      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a4:	4b43      	ldr	r3, [pc, #268]	; (8004ab4 <HAL_RCC_OscConfig+0x4e8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1f0      	bne.n	8004992 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	69da      	ldr	r2, [r3, #28]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	019b      	lsls	r3, r3, #6
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c6:	085b      	lsrs	r3, r3, #1
 80049c8:	3b01      	subs	r3, #1
 80049ca:	041b      	lsls	r3, r3, #16
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d2:	061b      	lsls	r3, r3, #24
 80049d4:	4937      	ldr	r1, [pc, #220]	; (8004ab4 <HAL_RCC_OscConfig+0x4e8>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049da:	4b37      	ldr	r3, [pc, #220]	; (8004ab8 <HAL_RCC_OscConfig+0x4ec>)
 80049dc:	2201      	movs	r2, #1
 80049de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e0:	f7fd fd6c 	bl	80024bc <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049e8:	f7fd fd68 	bl	80024bc <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e056      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049fa:	4b2e      	ldr	r3, [pc, #184]	; (8004ab4 <HAL_RCC_OscConfig+0x4e8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f0      	beq.n	80049e8 <HAL_RCC_OscConfig+0x41c>
 8004a06:	e04e      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a08:	4b2b      	ldr	r3, [pc, #172]	; (8004ab8 <HAL_RCC_OscConfig+0x4ec>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0e:	f7fd fd55 	bl	80024bc <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a16:	f7fd fd51 	bl	80024bc <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e03f      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a28:	4b22      	ldr	r3, [pc, #136]	; (8004ab4 <HAL_RCC_OscConfig+0x4e8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f0      	bne.n	8004a16 <HAL_RCC_OscConfig+0x44a>
 8004a34:	e037      	b.n	8004aa6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e032      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a42:	4b1c      	ldr	r3, [pc, #112]	; (8004ab4 <HAL_RCC_OscConfig+0x4e8>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d028      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d121      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d11a      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a72:	4013      	ands	r3, r2
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a78:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d111      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a88:	085b      	lsrs	r3, r3, #1
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d107      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d001      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40007000 	.word	0x40007000
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	42470060 	.word	0x42470060

08004abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e0cc      	b.n	8004c6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ad0:	4b68      	ldr	r3, [pc, #416]	; (8004c74 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d90c      	bls.n	8004af8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ade:	4b65      	ldr	r3, [pc, #404]	; (8004c74 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae6:	4b63      	ldr	r3, [pc, #396]	; (8004c74 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d001      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e0b8      	b.n	8004c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d020      	beq.n	8004b46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d005      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b10:	4b59      	ldr	r3, [pc, #356]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	4a58      	ldr	r2, [pc, #352]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0308 	and.w	r3, r3, #8
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b28:	4b53      	ldr	r3, [pc, #332]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	4a52      	ldr	r2, [pc, #328]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b34:	4b50      	ldr	r3, [pc, #320]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	494d      	ldr	r1, [pc, #308]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d044      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d107      	bne.n	8004b6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5a:	4b47      	ldr	r3, [pc, #284]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d119      	bne.n	8004b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e07f      	b.n	8004c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d003      	beq.n	8004b7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d107      	bne.n	8004b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b7a:	4b3f      	ldr	r3, [pc, #252]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d109      	bne.n	8004b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e06f      	b.n	8004c6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b8a:	4b3b      	ldr	r3, [pc, #236]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e067      	b.n	8004c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b9a:	4b37      	ldr	r3, [pc, #220]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f023 0203 	bic.w	r2, r3, #3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	4934      	ldr	r1, [pc, #208]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bac:	f7fd fc86 	bl	80024bc <HAL_GetTick>
 8004bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb2:	e00a      	b.n	8004bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb4:	f7fd fc82 	bl	80024bc <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e04f      	b.n	8004c6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bca:	4b2b      	ldr	r3, [pc, #172]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 020c 	and.w	r2, r3, #12
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d1eb      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bdc:	4b25      	ldr	r3, [pc, #148]	; (8004c74 <HAL_RCC_ClockConfig+0x1b8>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d20c      	bcs.n	8004c04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bea:	4b22      	ldr	r3, [pc, #136]	; (8004c74 <HAL_RCC_ClockConfig+0x1b8>)
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf2:	4b20      	ldr	r3, [pc, #128]	; (8004c74 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d001      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e032      	b.n	8004c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c10:	4b19      	ldr	r3, [pc, #100]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	4916      	ldr	r1, [pc, #88]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d009      	beq.n	8004c42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c2e:	4b12      	ldr	r3, [pc, #72]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	490e      	ldr	r1, [pc, #56]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c42:	f000 f889 	bl	8004d58 <HAL_RCC_GetSysClockFreq>
 8004c46:	4602      	mov	r2, r0
 8004c48:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	091b      	lsrs	r3, r3, #4
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	490a      	ldr	r1, [pc, #40]	; (8004c7c <HAL_RCC_ClockConfig+0x1c0>)
 8004c54:	5ccb      	ldrb	r3, [r1, r3]
 8004c56:	fa22 f303 	lsr.w	r3, r2, r3
 8004c5a:	4a09      	ldr	r2, [pc, #36]	; (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c5e:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <HAL_RCC_ClockConfig+0x1c8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fd f904 	bl	8001e70 <HAL_InitTick>

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40023c00 	.word	0x40023c00
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	0801bb40 	.word	0x0801bb40
 8004c80:	20000004 	.word	0x20000004
 8004c84:	20000008 	.word	0x20000008

08004c88 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08c      	sub	sp, #48	; 0x30
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d129      	bne.n	8004cee <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61bb      	str	r3, [r7, #24]
 8004c9e:	4b2b      	ldr	r3, [pc, #172]	; (8004d4c <HAL_RCC_MCOConfig+0xc4>)
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca2:	4a2a      	ldr	r2, [pc, #168]	; (8004d4c <HAL_RCC_MCOConfig+0xc4>)
 8004ca4:	f043 0301 	orr.w	r3, r3, #1
 8004ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8004caa:	4b28      	ldr	r3, [pc, #160]	; (8004d4c <HAL_RCC_MCOConfig+0xc4>)
 8004cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	61bb      	str	r3, [r7, #24]
 8004cb4:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004cb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004ccc:	f107 031c 	add.w	r3, r7, #28
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	481f      	ldr	r0, [pc, #124]	; (8004d50 <HAL_RCC_MCOConfig+0xc8>)
 8004cd4:	f7ff faac 	bl	8004230 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004cd8:	4b1c      	ldr	r3, [pc, #112]	; (8004d4c <HAL_RCC_MCOConfig+0xc4>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	430b      	orrs	r3, r1
 8004ce6:	4919      	ldr	r1, [pc, #100]	; (8004d4c <HAL_RCC_MCOConfig+0xc4>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8004cec:	e029      	b.n	8004d42 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8004cee:	2300      	movs	r3, #0
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	4b16      	ldr	r3, [pc, #88]	; (8004d4c <HAL_RCC_MCOConfig+0xc4>)
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf6:	4a15      	ldr	r2, [pc, #84]	; (8004d4c <HAL_RCC_MCOConfig+0xc4>)
 8004cf8:	f043 0304 	orr.w	r3, r3, #4
 8004cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8004cfe:	4b13      	ldr	r3, [pc, #76]	; (8004d4c <HAL_RCC_MCOConfig+0xc4>)
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	617b      	str	r3, [r7, #20]
 8004d08:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d10:	2302      	movs	r3, #2
 8004d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d14:	2303      	movs	r3, #3
 8004d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004d20:	f107 031c 	add.w	r3, r7, #28
 8004d24:	4619      	mov	r1, r3
 8004d26:	480b      	ldr	r0, [pc, #44]	; (8004d54 <HAL_RCC_MCOConfig+0xcc>)
 8004d28:	f7ff fa82 	bl	8004230 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8004d2c:	4b07      	ldr	r3, [pc, #28]	; (8004d4c <HAL_RCC_MCOConfig+0xc4>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	00d9      	lsls	r1, r3, #3
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	430b      	orrs	r3, r1
 8004d3c:	4903      	ldr	r1, [pc, #12]	; (8004d4c <HAL_RCC_MCOConfig+0xc4>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	608b      	str	r3, [r1, #8]
}
 8004d42:	bf00      	nop
 8004d44:	3730      	adds	r7, #48	; 0x30
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40023800 	.word	0x40023800
 8004d50:	40020000 	.word	0x40020000
 8004d54:	40020800 	.word	0x40020800

08004d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d58:	b5b0      	push	{r4, r5, r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d5e:	2100      	movs	r1, #0
 8004d60:	6079      	str	r1, [r7, #4]
 8004d62:	2100      	movs	r1, #0
 8004d64:	60f9      	str	r1, [r7, #12]
 8004d66:	2100      	movs	r1, #0
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d6e:	4952      	ldr	r1, [pc, #328]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d70:	6889      	ldr	r1, [r1, #8]
 8004d72:	f001 010c 	and.w	r1, r1, #12
 8004d76:	2908      	cmp	r1, #8
 8004d78:	d00d      	beq.n	8004d96 <HAL_RCC_GetSysClockFreq+0x3e>
 8004d7a:	2908      	cmp	r1, #8
 8004d7c:	f200 8094 	bhi.w	8004ea8 <HAL_RCC_GetSysClockFreq+0x150>
 8004d80:	2900      	cmp	r1, #0
 8004d82:	d002      	beq.n	8004d8a <HAL_RCC_GetSysClockFreq+0x32>
 8004d84:	2904      	cmp	r1, #4
 8004d86:	d003      	beq.n	8004d90 <HAL_RCC_GetSysClockFreq+0x38>
 8004d88:	e08e      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d8a:	4b4c      	ldr	r3, [pc, #304]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x164>)
 8004d8c:	60bb      	str	r3, [r7, #8]
       break;
 8004d8e:	e08e      	b.n	8004eae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d90:	4b4b      	ldr	r3, [pc, #300]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d92:	60bb      	str	r3, [r7, #8]
      break;
 8004d94:	e08b      	b.n	8004eae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d96:	4948      	ldr	r1, [pc, #288]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d98:	6849      	ldr	r1, [r1, #4]
 8004d9a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004d9e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004da0:	4945      	ldr	r1, [pc, #276]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004da2:	6849      	ldr	r1, [r1, #4]
 8004da4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004da8:	2900      	cmp	r1, #0
 8004daa:	d024      	beq.n	8004df6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dac:	4942      	ldr	r1, [pc, #264]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004dae:	6849      	ldr	r1, [r1, #4]
 8004db0:	0989      	lsrs	r1, r1, #6
 8004db2:	4608      	mov	r0, r1
 8004db4:	f04f 0100 	mov.w	r1, #0
 8004db8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004dbc:	f04f 0500 	mov.w	r5, #0
 8004dc0:	ea00 0204 	and.w	r2, r0, r4
 8004dc4:	ea01 0305 	and.w	r3, r1, r5
 8004dc8:	493d      	ldr	r1, [pc, #244]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x168>)
 8004dca:	fb01 f003 	mul.w	r0, r1, r3
 8004dce:	2100      	movs	r1, #0
 8004dd0:	fb01 f102 	mul.w	r1, r1, r2
 8004dd4:	1844      	adds	r4, r0, r1
 8004dd6:	493a      	ldr	r1, [pc, #232]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x168>)
 8004dd8:	fba2 0101 	umull	r0, r1, r2, r1
 8004ddc:	1863      	adds	r3, r4, r1
 8004dde:	4619      	mov	r1, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	461a      	mov	r2, r3
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	f7fb fa42 	bl	8000270 <__aeabi_uldivmod>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4613      	mov	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	e04a      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004df6:	4b30      	ldr	r3, [pc, #192]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	099b      	lsrs	r3, r3, #6
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e06:	f04f 0100 	mov.w	r1, #0
 8004e0a:	ea02 0400 	and.w	r4, r2, r0
 8004e0e:	ea03 0501 	and.w	r5, r3, r1
 8004e12:	4620      	mov	r0, r4
 8004e14:	4629      	mov	r1, r5
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	014b      	lsls	r3, r1, #5
 8004e20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e24:	0142      	lsls	r2, r0, #5
 8004e26:	4610      	mov	r0, r2
 8004e28:	4619      	mov	r1, r3
 8004e2a:	1b00      	subs	r0, r0, r4
 8004e2c:	eb61 0105 	sbc.w	r1, r1, r5
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	018b      	lsls	r3, r1, #6
 8004e3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e3e:	0182      	lsls	r2, r0, #6
 8004e40:	1a12      	subs	r2, r2, r0
 8004e42:	eb63 0301 	sbc.w	r3, r3, r1
 8004e46:	f04f 0000 	mov.w	r0, #0
 8004e4a:	f04f 0100 	mov.w	r1, #0
 8004e4e:	00d9      	lsls	r1, r3, #3
 8004e50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e54:	00d0      	lsls	r0, r2, #3
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	1912      	adds	r2, r2, r4
 8004e5c:	eb45 0303 	adc.w	r3, r5, r3
 8004e60:	f04f 0000 	mov.w	r0, #0
 8004e64:	f04f 0100 	mov.w	r1, #0
 8004e68:	0299      	lsls	r1, r3, #10
 8004e6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e6e:	0290      	lsls	r0, r2, #10
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4610      	mov	r0, r2
 8004e76:	4619      	mov	r1, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	f7fb f9f6 	bl	8000270 <__aeabi_uldivmod>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4613      	mov	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	0c1b      	lsrs	r3, r3, #16
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	3301      	adds	r3, #1
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea4:	60bb      	str	r3, [r7, #8]
      break;
 8004ea6:	e002      	b.n	8004eae <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ea8:	4b04      	ldr	r3, [pc, #16]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x164>)
 8004eaa:	60bb      	str	r3, [r7, #8]
      break;
 8004eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eae:	68bb      	ldr	r3, [r7, #8]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	00f42400 	.word	0x00f42400
 8004ec0:	017d7840 	.word	0x017d7840

08004ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec8:	4b03      	ldr	r3, [pc, #12]	; (8004ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eca:	681b      	ldr	r3, [r3, #0]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	20000004 	.word	0x20000004

08004edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ee0:	f7ff fff0 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	4b05      	ldr	r3, [pc, #20]	; (8004efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	0a9b      	lsrs	r3, r3, #10
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	4903      	ldr	r1, [pc, #12]	; (8004f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ef2:	5ccb      	ldrb	r3, [r1, r3]
 8004ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40023800 	.word	0x40023800
 8004f00:	0801bb50 	.word	0x0801bb50

08004f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f08:	f7ff ffdc 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	0b5b      	lsrs	r3, r3, #13
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	4903      	ldr	r1, [pc, #12]	; (8004f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f1a:	5ccb      	ldrb	r3, [r1, r3]
 8004f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40023800 	.word	0x40023800
 8004f28:	0801bb50 	.word	0x0801bb50

08004f2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	220f      	movs	r2, #15
 8004f3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f3c:	4b12      	ldr	r3, [pc, #72]	; (8004f88 <HAL_RCC_GetClockConfig+0x5c>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f003 0203 	and.w	r2, r3, #3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f48:	4b0f      	ldr	r3, [pc, #60]	; (8004f88 <HAL_RCC_GetClockConfig+0x5c>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f54:	4b0c      	ldr	r3, [pc, #48]	; (8004f88 <HAL_RCC_GetClockConfig+0x5c>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f60:	4b09      	ldr	r3, [pc, #36]	; (8004f88 <HAL_RCC_GetClockConfig+0x5c>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	08db      	lsrs	r3, r3, #3
 8004f66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f6e:	4b07      	ldr	r3, [pc, #28]	; (8004f8c <HAL_RCC_GetClockConfig+0x60>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0207 	and.w	r2, r3, #7
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	601a      	str	r2, [r3, #0]
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	40023c00 	.word	0x40023c00

08004f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e041      	b.n	8005026 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f839 	bl	800502e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	f000 f9d8 	bl	8005384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
	...

08005044 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b01      	cmp	r3, #1
 8005056:	d001      	beq.n	800505c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e04e      	b.n	80050fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0201 	orr.w	r2, r2, #1
 8005072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a23      	ldr	r2, [pc, #140]	; (8005108 <HAL_TIM_Base_Start_IT+0xc4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d022      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0x80>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005086:	d01d      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0x80>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1f      	ldr	r2, [pc, #124]	; (800510c <HAL_TIM_Base_Start_IT+0xc8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d018      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0x80>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a1e      	ldr	r2, [pc, #120]	; (8005110 <HAL_TIM_Base_Start_IT+0xcc>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d013      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0x80>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a1c      	ldr	r2, [pc, #112]	; (8005114 <HAL_TIM_Base_Start_IT+0xd0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00e      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0x80>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a1b      	ldr	r2, [pc, #108]	; (8005118 <HAL_TIM_Base_Start_IT+0xd4>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d009      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0x80>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a19      	ldr	r2, [pc, #100]	; (800511c <HAL_TIM_Base_Start_IT+0xd8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d004      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0x80>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a18      	ldr	r2, [pc, #96]	; (8005120 <HAL_TIM_Base_Start_IT+0xdc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d111      	bne.n	80050e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 0307 	and.w	r3, r3, #7
 80050ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b06      	cmp	r3, #6
 80050d4:	d010      	beq.n	80050f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0201 	orr.w	r2, r2, #1
 80050e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e6:	e007      	b.n	80050f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40010000 	.word	0x40010000
 800510c:	40000400 	.word	0x40000400
 8005110:	40000800 	.word	0x40000800
 8005114:	40000c00 	.word	0x40000c00
 8005118:	40010400 	.word	0x40010400
 800511c:	40014000 	.word	0x40014000
 8005120:	40001800 	.word	0x40001800

08005124 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b02      	cmp	r3, #2
 8005138:	d122      	bne.n	8005180 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b02      	cmp	r3, #2
 8005146:	d11b      	bne.n	8005180 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0202 	mvn.w	r2, #2
 8005150:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f8ee 	bl	8005348 <HAL_TIM_IC_CaptureCallback>
 800516c:	e005      	b.n	800517a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f8e0 	bl	8005334 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f8f1 	bl	800535c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f003 0304 	and.w	r3, r3, #4
 800518a:	2b04      	cmp	r3, #4
 800518c:	d122      	bne.n	80051d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b04      	cmp	r3, #4
 800519a:	d11b      	bne.n	80051d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f06f 0204 	mvn.w	r2, #4
 80051a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2202      	movs	r2, #2
 80051aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f8c4 	bl	8005348 <HAL_TIM_IC_CaptureCallback>
 80051c0:	e005      	b.n	80051ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f8b6 	bl	8005334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f8c7 	bl	800535c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	f003 0308 	and.w	r3, r3, #8
 80051de:	2b08      	cmp	r3, #8
 80051e0:	d122      	bne.n	8005228 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f003 0308 	and.w	r3, r3, #8
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d11b      	bne.n	8005228 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f06f 0208 	mvn.w	r2, #8
 80051f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2204      	movs	r2, #4
 80051fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	f003 0303 	and.w	r3, r3, #3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f89a 	bl	8005348 <HAL_TIM_IC_CaptureCallback>
 8005214:	e005      	b.n	8005222 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f88c 	bl	8005334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f89d 	bl	800535c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0310 	and.w	r3, r3, #16
 8005232:	2b10      	cmp	r3, #16
 8005234:	d122      	bne.n	800527c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0310 	and.w	r3, r3, #16
 8005240:	2b10      	cmp	r3, #16
 8005242:	d11b      	bne.n	800527c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0210 	mvn.w	r2, #16
 800524c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2208      	movs	r2, #8
 8005252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f870 	bl	8005348 <HAL_TIM_IC_CaptureCallback>
 8005268:	e005      	b.n	8005276 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f862 	bl	8005334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f873 	bl	800535c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b01      	cmp	r3, #1
 8005288:	d10e      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b01      	cmp	r3, #1
 8005296:	d107      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0201 	mvn.w	r2, #1
 80052a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fc f8d4 	bl	8001450 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b2:	2b80      	cmp	r3, #128	; 0x80
 80052b4:	d10e      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c0:	2b80      	cmp	r3, #128	; 0x80
 80052c2:	d107      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f902 	bl	80054d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052de:	2b40      	cmp	r3, #64	; 0x40
 80052e0:	d10e      	bne.n	8005300 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ec:	2b40      	cmp	r3, #64	; 0x40
 80052ee:	d107      	bne.n	8005300 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f838 	bl	8005370 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0320 	and.w	r3, r3, #32
 800530a:	2b20      	cmp	r3, #32
 800530c:	d10e      	bne.n	800532c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b20      	cmp	r3, #32
 800531a:	d107      	bne.n	800532c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0220 	mvn.w	r2, #32
 8005324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f8cc 	bl	80054c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800532c:	bf00      	nop
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a40      	ldr	r2, [pc, #256]	; (8005498 <TIM_Base_SetConfig+0x114>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d013      	beq.n	80053c4 <TIM_Base_SetConfig+0x40>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a2:	d00f      	beq.n	80053c4 <TIM_Base_SetConfig+0x40>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a3d      	ldr	r2, [pc, #244]	; (800549c <TIM_Base_SetConfig+0x118>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d00b      	beq.n	80053c4 <TIM_Base_SetConfig+0x40>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a3c      	ldr	r2, [pc, #240]	; (80054a0 <TIM_Base_SetConfig+0x11c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d007      	beq.n	80053c4 <TIM_Base_SetConfig+0x40>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a3b      	ldr	r2, [pc, #236]	; (80054a4 <TIM_Base_SetConfig+0x120>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d003      	beq.n	80053c4 <TIM_Base_SetConfig+0x40>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a3a      	ldr	r2, [pc, #232]	; (80054a8 <TIM_Base_SetConfig+0x124>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d108      	bne.n	80053d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a2f      	ldr	r2, [pc, #188]	; (8005498 <TIM_Base_SetConfig+0x114>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d02b      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e4:	d027      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a2c      	ldr	r2, [pc, #176]	; (800549c <TIM_Base_SetConfig+0x118>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d023      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a2b      	ldr	r2, [pc, #172]	; (80054a0 <TIM_Base_SetConfig+0x11c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d01f      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a2a      	ldr	r2, [pc, #168]	; (80054a4 <TIM_Base_SetConfig+0x120>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d01b      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a29      	ldr	r2, [pc, #164]	; (80054a8 <TIM_Base_SetConfig+0x124>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d017      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a28      	ldr	r2, [pc, #160]	; (80054ac <TIM_Base_SetConfig+0x128>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d013      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a27      	ldr	r2, [pc, #156]	; (80054b0 <TIM_Base_SetConfig+0x12c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00f      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a26      	ldr	r2, [pc, #152]	; (80054b4 <TIM_Base_SetConfig+0x130>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00b      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a25      	ldr	r2, [pc, #148]	; (80054b8 <TIM_Base_SetConfig+0x134>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d007      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a24      	ldr	r2, [pc, #144]	; (80054bc <TIM_Base_SetConfig+0x138>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d003      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a23      	ldr	r2, [pc, #140]	; (80054c0 <TIM_Base_SetConfig+0x13c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d108      	bne.n	8005448 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800543c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a0a      	ldr	r2, [pc, #40]	; (8005498 <TIM_Base_SetConfig+0x114>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d003      	beq.n	800547c <TIM_Base_SetConfig+0xf8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a0c      	ldr	r2, [pc, #48]	; (80054a8 <TIM_Base_SetConfig+0x124>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d103      	bne.n	8005484 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	691a      	ldr	r2, [r3, #16]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	615a      	str	r2, [r3, #20]
}
 800548a:	bf00      	nop
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	40010000 	.word	0x40010000
 800549c:	40000400 	.word	0x40000400
 80054a0:	40000800 	.word	0x40000800
 80054a4:	40000c00 	.word	0x40000c00
 80054a8:	40010400 	.word	0x40010400
 80054ac:	40014000 	.word	0x40014000
 80054b0:	40014400 	.word	0x40014400
 80054b4:	40014800 	.word	0x40014800
 80054b8:	40001800 	.word	0x40001800
 80054bc:	40001c00 	.word	0x40001c00
 80054c0:	40002000 	.word	0x40002000

080054c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e03f      	b.n	800557e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d106      	bne.n	8005518 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7fc fbba 	bl	8001c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2224      	movs	r2, #36	; 0x24
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800552e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 fe97 	bl	8006264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	691a      	ldr	r2, [r3, #16]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005544:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	695a      	ldr	r2, [r3, #20]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005554:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005564:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b08c      	sub	sp, #48	; 0x30
 800558a:	af00      	add	r7, sp, #0
 800558c:	60f8      	str	r0, [r7, #12]
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	4613      	mov	r3, r2
 8005592:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b20      	cmp	r3, #32
 800559e:	d152      	bne.n	8005646 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80055a6:	88fb      	ldrh	r3, [r7, #6]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e04b      	b.n	8005648 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80055ba:	2302      	movs	r3, #2
 80055bc:	e044      	b.n	8005648 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2201      	movs	r2, #1
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80055cc:	88fb      	ldrh	r3, [r7, #6]
 80055ce:	461a      	mov	r2, r3
 80055d0:	68b9      	ldr	r1, [r7, #8]
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 fbea 	bl	8005dac <UART_Start_Receive_DMA>
 80055d8:	4603      	mov	r3, r0
 80055da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80055de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d12c      	bne.n	8005640 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d125      	bne.n	800563a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055ee:	2300      	movs	r3, #0
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	613b      	str	r3, [r7, #16]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	330c      	adds	r3, #12
 800560a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	e853 3f00 	ldrex	r3, [r3]
 8005612:	617b      	str	r3, [r7, #20]
   return(result);
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f043 0310 	orr.w	r3, r3, #16
 800561a:	62bb      	str	r3, [r7, #40]	; 0x28
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	330c      	adds	r3, #12
 8005622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005624:	627a      	str	r2, [r7, #36]	; 0x24
 8005626:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005628:	6a39      	ldr	r1, [r7, #32]
 800562a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562c:	e841 2300 	strex	r3, r2, [r1]
 8005630:	61fb      	str	r3, [r7, #28]
   return(result);
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1e5      	bne.n	8005604 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8005638:	e002      	b.n	8005640 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005640:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005644:	e000      	b.n	8005648 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8005646:	2302      	movs	r3, #2
  }
}
 8005648:	4618      	mov	r0, r3
 800564a:	3730      	adds	r7, #48	; 0x30
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b0ba      	sub	sp, #232	; 0xe8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005676:	2300      	movs	r3, #0
 8005678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800567c:	2300      	movs	r3, #0
 800567e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800568e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10f      	bne.n	80056b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800569a:	f003 0320 	and.w	r3, r3, #32
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d009      	beq.n	80056b6 <HAL_UART_IRQHandler+0x66>
 80056a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056a6:	f003 0320 	and.w	r3, r3, #32
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 fd1d 	bl	80060ee <UART_Receive_IT>
      return;
 80056b4:	e256      	b.n	8005b64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80056b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 80de 	beq.w	800587c <HAL_UART_IRQHandler+0x22c>
 80056c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d106      	bne.n	80056da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 80d1 	beq.w	800587c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00b      	beq.n	80056fe <HAL_UART_IRQHandler+0xae>
 80056e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d005      	beq.n	80056fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	f043 0201 	orr.w	r2, r3, #1
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005702:	f003 0304 	and.w	r3, r3, #4
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00b      	beq.n	8005722 <HAL_UART_IRQHandler+0xd2>
 800570a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	f043 0202 	orr.w	r2, r3, #2
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00b      	beq.n	8005746 <HAL_UART_IRQHandler+0xf6>
 800572e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d005      	beq.n	8005746 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	f043 0204 	orr.w	r2, r3, #4
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d011      	beq.n	8005776 <HAL_UART_IRQHandler+0x126>
 8005752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	2b00      	cmp	r3, #0
 800575c:	d105      	bne.n	800576a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800575e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d005      	beq.n	8005776 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	f043 0208 	orr.w	r2, r3, #8
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 81ed 	beq.w	8005b5a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005784:	f003 0320 	and.w	r3, r3, #32
 8005788:	2b00      	cmp	r3, #0
 800578a:	d008      	beq.n	800579e <HAL_UART_IRQHandler+0x14e>
 800578c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005790:	f003 0320 	and.w	r3, r3, #32
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fca8 	bl	80060ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a8:	2b40      	cmp	r3, #64	; 0x40
 80057aa:	bf0c      	ite	eq
 80057ac:	2301      	moveq	r3, #1
 80057ae:	2300      	movne	r3, #0
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d103      	bne.n	80057ca <HAL_UART_IRQHandler+0x17a>
 80057c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d04f      	beq.n	800586a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fbb0 	bl	8005f30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057da:	2b40      	cmp	r3, #64	; 0x40
 80057dc:	d141      	bne.n	8005862 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3314      	adds	r3, #20
 80057e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3314      	adds	r3, #20
 8005806:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800580a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800580e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005816:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800581a:	e841 2300 	strex	r3, r2, [r1]
 800581e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1d9      	bne.n	80057de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582e:	2b00      	cmp	r3, #0
 8005830:	d013      	beq.n	800585a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005836:	4a7d      	ldr	r2, [pc, #500]	; (8005a2c <HAL_UART_IRQHandler+0x3dc>)
 8005838:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583e:	4618      	mov	r0, r3
 8005840:	f7fd f8c4 	bl	80029cc <HAL_DMA_Abort_IT>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d016      	beq.n	8005878 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005854:	4610      	mov	r0, r2
 8005856:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005858:	e00e      	b.n	8005878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f9a4 	bl	8005ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005860:	e00a      	b.n	8005878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f9a0 	bl	8005ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005868:	e006      	b.n	8005878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f99c 	bl	8005ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005876:	e170      	b.n	8005b5a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005878:	bf00      	nop
    return;
 800587a:	e16e      	b.n	8005b5a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005880:	2b01      	cmp	r3, #1
 8005882:	f040 814a 	bne.w	8005b1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800588a:	f003 0310 	and.w	r3, r3, #16
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 8143 	beq.w	8005b1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005898:	f003 0310 	and.w	r3, r3, #16
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 813c 	beq.w	8005b1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058a2:	2300      	movs	r3, #0
 80058a4:	60bb      	str	r3, [r7, #8]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	60bb      	str	r3, [r7, #8]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c2:	2b40      	cmp	r3, #64	; 0x40
 80058c4:	f040 80b4 	bne.w	8005a30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 8140 	beq.w	8005b5e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058e6:	429a      	cmp	r2, r3
 80058e8:	f080 8139 	bcs.w	8005b5e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058fe:	f000 8088 	beq.w	8005a12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	330c      	adds	r3, #12
 8005908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005918:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800591c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	330c      	adds	r3, #12
 800592a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800592e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800593a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800593e:	e841 2300 	strex	r3, r2, [r1]
 8005942:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1d9      	bne.n	8005902 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3314      	adds	r3, #20
 8005954:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800595e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005960:	f023 0301 	bic.w	r3, r3, #1
 8005964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3314      	adds	r3, #20
 800596e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005972:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005976:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800597a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800597e:	e841 2300 	strex	r3, r2, [r1]
 8005982:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1e1      	bne.n	800594e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3314      	adds	r3, #20
 8005990:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005992:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005994:	e853 3f00 	ldrex	r3, [r3]
 8005998:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800599a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800599c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3314      	adds	r3, #20
 80059aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059b6:	e841 2300 	strex	r3, r2, [r1]
 80059ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80059bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1e3      	bne.n	800598a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2220      	movs	r2, #32
 80059c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	330c      	adds	r3, #12
 80059d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059da:	e853 3f00 	ldrex	r3, [r3]
 80059de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059e2:	f023 0310 	bic.w	r3, r3, #16
 80059e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	330c      	adds	r3, #12
 80059f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80059f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80059f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059fc:	e841 2300 	strex	r3, r2, [r1]
 8005a00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e3      	bne.n	80059d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7fc ff6d 	bl	80028ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	4619      	mov	r1, r3
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7fc fc02 	bl	800222c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a28:	e099      	b.n	8005b5e <HAL_UART_IRQHandler+0x50e>
 8005a2a:	bf00      	nop
 8005a2c:	08005ff7 	.word	0x08005ff7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 808b 	beq.w	8005b62 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005a4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 8086 	beq.w	8005b62 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	330c      	adds	r3, #12
 8005a5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a60:	e853 3f00 	ldrex	r3, [r3]
 8005a64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	330c      	adds	r3, #12
 8005a76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a7a:	647a      	str	r2, [r7, #68]	; 0x44
 8005a7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a82:	e841 2300 	strex	r3, r2, [r1]
 8005a86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1e3      	bne.n	8005a56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3314      	adds	r3, #20
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	e853 3f00 	ldrex	r3, [r3]
 8005a9c:	623b      	str	r3, [r7, #32]
   return(result);
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	f023 0301 	bic.w	r3, r3, #1
 8005aa4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3314      	adds	r3, #20
 8005aae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ab2:	633a      	str	r2, [r7, #48]	; 0x30
 8005ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e3      	bne.n	8005a8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	330c      	adds	r3, #12
 8005ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	e853 3f00 	ldrex	r3, [r3]
 8005ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0310 	bic.w	r3, r3, #16
 8005aea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	330c      	adds	r3, #12
 8005af4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005af8:	61fa      	str	r2, [r7, #28]
 8005afa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afc:	69b9      	ldr	r1, [r7, #24]
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	e841 2300 	strex	r3, r2, [r1]
 8005b04:	617b      	str	r3, [r7, #20]
   return(result);
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1e3      	bne.n	8005ad4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b10:	4619      	mov	r1, r3
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fc fb8a 	bl	800222c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b18:	e023      	b.n	8005b62 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d009      	beq.n	8005b3a <HAL_UART_IRQHandler+0x4ea>
 8005b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fa73 	bl	800601e <UART_Transmit_IT>
    return;
 8005b38:	e014      	b.n	8005b64 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00e      	beq.n	8005b64 <HAL_UART_IRQHandler+0x514>
 8005b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d008      	beq.n	8005b64 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fab3 	bl	80060be <UART_EndTransmit_IT>
    return;
 8005b58:	e004      	b.n	8005b64 <HAL_UART_IRQHandler+0x514>
    return;
 8005b5a:	bf00      	nop
 8005b5c:	e002      	b.n	8005b64 <HAL_UART_IRQHandler+0x514>
      return;
 8005b5e:	bf00      	nop
 8005b60:	e000      	b.n	8005b64 <HAL_UART_IRQHandler+0x514>
      return;
 8005b62:	bf00      	nop
  }
}
 8005b64:	37e8      	adds	r7, #232	; 0xe8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop

08005b6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b09c      	sub	sp, #112	; 0x70
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d172      	bne.n	8005cbe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bda:	2200      	movs	r2, #0
 8005bdc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	330c      	adds	r3, #12
 8005be4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bf4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	330c      	adds	r3, #12
 8005bfc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005bfe:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c00:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e5      	bne.n	8005bde <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3314      	adds	r3, #20
 8005c18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1c:	e853 3f00 	ldrex	r3, [r3]
 8005c20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c24:	f023 0301 	bic.w	r3, r3, #1
 8005c28:	667b      	str	r3, [r7, #100]	; 0x64
 8005c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3314      	adds	r3, #20
 8005c30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005c32:	647a      	str	r2, [r7, #68]	; 0x44
 8005c34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c3a:	e841 2300 	strex	r3, r2, [r1]
 8005c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1e5      	bne.n	8005c12 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3314      	adds	r3, #20
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	e853 3f00 	ldrex	r3, [r3]
 8005c54:	623b      	str	r3, [r7, #32]
   return(result);
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c5c:	663b      	str	r3, [r7, #96]	; 0x60
 8005c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3314      	adds	r3, #20
 8005c64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c66:	633a      	str	r2, [r7, #48]	; 0x30
 8005c68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c6e:	e841 2300 	strex	r3, r2, [r1]
 8005c72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1e5      	bne.n	8005c46 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d119      	bne.n	8005cbe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	330c      	adds	r3, #12
 8005c90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f023 0310 	bic.w	r3, r3, #16
 8005ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	330c      	adds	r3, #12
 8005ca8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005caa:	61fa      	str	r2, [r7, #28]
 8005cac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	69b9      	ldr	r1, [r7, #24]
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	617b      	str	r3, [r7, #20]
   return(result);
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e5      	bne.n	8005c8a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d106      	bne.n	8005cd4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cca:	4619      	mov	r1, r3
 8005ccc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005cce:	f7fc faad 	bl	800222c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cd2:	e002      	b.n	8005cda <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005cd4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005cd6:	f7ff ff53 	bl	8005b80 <HAL_UART_RxCpltCallback>
}
 8005cda:	bf00      	nop
 8005cdc:	3770      	adds	r7, #112	; 0x70
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b084      	sub	sp, #16
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d108      	bne.n	8005d0a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cfc:	085b      	lsrs	r3, r3, #1
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	4619      	mov	r1, r3
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f7fc fa92 	bl	800222c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d08:	e002      	b.n	8005d10 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f7ff ff42 	bl	8005b94 <HAL_UART_RxHalfCpltCallback>
}
 8005d10:	bf00      	nop
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d34:	2b80      	cmp	r3, #128	; 0x80
 8005d36:	bf0c      	ite	eq
 8005d38:	2301      	moveq	r3, #1
 8005d3a:	2300      	movne	r3, #0
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b21      	cmp	r3, #33	; 0x21
 8005d4a:	d108      	bne.n	8005d5e <UART_DMAError+0x46>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d005      	beq.n	8005d5e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2200      	movs	r2, #0
 8005d56:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005d58:	68b8      	ldr	r0, [r7, #8]
 8005d5a:	f000 f8c1 	bl	8005ee0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d68:	2b40      	cmp	r3, #64	; 0x40
 8005d6a:	bf0c      	ite	eq
 8005d6c:	2301      	moveq	r3, #1
 8005d6e:	2300      	movne	r3, #0
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b22      	cmp	r3, #34	; 0x22
 8005d7e:	d108      	bne.n	8005d92 <UART_DMAError+0x7a>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005d8c:	68b8      	ldr	r0, [r7, #8]
 8005d8e:	f000 f8cf 	bl	8005f30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d96:	f043 0210 	orr.w	r2, r3, #16
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d9e:	68b8      	ldr	r0, [r7, #8]
 8005da0:	f7ff ff02 	bl	8005ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005da4:	bf00      	nop
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b098      	sub	sp, #96	; 0x60
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	4613      	mov	r3, r2
 8005db8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	88fa      	ldrh	r2, [r7, #6]
 8005dc4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2222      	movs	r2, #34	; 0x22
 8005dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd8:	4a3e      	ldr	r2, [pc, #248]	; (8005ed4 <UART_Start_Receive_DMA+0x128>)
 8005dda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de0:	4a3d      	ldr	r2, [pc, #244]	; (8005ed8 <UART_Start_Receive_DMA+0x12c>)
 8005de2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de8:	4a3c      	ldr	r2, [pc, #240]	; (8005edc <UART_Start_Receive_DMA+0x130>)
 8005dea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df0:	2200      	movs	r2, #0
 8005df2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005df4:	f107 0308 	add.w	r3, r7, #8
 8005df8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3304      	adds	r3, #4
 8005e04:	4619      	mov	r1, r3
 8005e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	88fb      	ldrh	r3, [r7, #6]
 8005e0c:	f7fc fd16 	bl	800283c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005e10:	2300      	movs	r3, #0
 8005e12:	613b      	str	r3, [r7, #16]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	613b      	str	r3, [r7, #16]
 8005e24:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	330c      	adds	r3, #12
 8005e34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e44:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	330c      	adds	r3, #12
 8005e4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e4e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005e50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005e54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e5      	bne.n	8005e2e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3314      	adds	r3, #20
 8005e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e74:	f043 0301 	orr.w	r3, r3, #1
 8005e78:	657b      	str	r3, [r7, #84]	; 0x54
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3314      	adds	r3, #20
 8005e80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e82:	63ba      	str	r2, [r7, #56]	; 0x38
 8005e84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005e88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e8a:	e841 2300 	strex	r3, r2, [r1]
 8005e8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e5      	bne.n	8005e62 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3314      	adds	r3, #20
 8005e9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	e853 3f00 	ldrex	r3, [r3]
 8005ea4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eac:	653b      	str	r3, [r7, #80]	; 0x50
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3314      	adds	r3, #20
 8005eb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005eb6:	627a      	str	r2, [r7, #36]	; 0x24
 8005eb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	6a39      	ldr	r1, [r7, #32]
 8005ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e5      	bne.n	8005e96 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3760      	adds	r7, #96	; 0x60
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	08005bbd 	.word	0x08005bbd
 8005ed8:	08005ce3 	.word	0x08005ce3
 8005edc:	08005d19 	.word	0x08005d19

08005ee0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b089      	sub	sp, #36	; 0x24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	330c      	adds	r3, #12
 8005eee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	e853 3f00 	ldrex	r3, [r3]
 8005ef6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005efe:	61fb      	str	r3, [r7, #28]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	330c      	adds	r3, #12
 8005f06:	69fa      	ldr	r2, [r7, #28]
 8005f08:	61ba      	str	r2, [r7, #24]
 8005f0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0c:	6979      	ldr	r1, [r7, #20]
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	e841 2300 	strex	r3, r2, [r1]
 8005f14:	613b      	str	r3, [r7, #16]
   return(result);
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1e5      	bne.n	8005ee8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005f24:	bf00      	nop
 8005f26:	3724      	adds	r7, #36	; 0x24
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b095      	sub	sp, #84	; 0x54
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	330c      	adds	r3, #12
 8005f3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f42:	e853 3f00 	ldrex	r3, [r3]
 8005f46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	330c      	adds	r3, #12
 8005f56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f58:	643a      	str	r2, [r7, #64]	; 0x40
 8005f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f60:	e841 2300 	strex	r3, r2, [r1]
 8005f64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1e5      	bne.n	8005f38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3314      	adds	r3, #20
 8005f72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	e853 3f00 	ldrex	r3, [r3]
 8005f7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	f023 0301 	bic.w	r3, r3, #1
 8005f82:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3314      	adds	r3, #20
 8005f8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f94:	e841 2300 	strex	r3, r2, [r1]
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1e5      	bne.n	8005f6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d119      	bne.n	8005fdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	330c      	adds	r3, #12
 8005fae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	e853 3f00 	ldrex	r3, [r3]
 8005fb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f023 0310 	bic.w	r3, r3, #16
 8005fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	330c      	adds	r3, #12
 8005fc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fc8:	61ba      	str	r2, [r7, #24]
 8005fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fcc:	6979      	ldr	r1, [r7, #20]
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	e841 2300 	strex	r3, r2, [r1]
 8005fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1e5      	bne.n	8005fa8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005fea:	bf00      	nop
 8005fec:	3754      	adds	r7, #84	; 0x54
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006002:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f7ff fdc9 	bl	8005ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006016:	bf00      	nop
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800601e:	b480      	push	{r7}
 8006020:	b085      	sub	sp, #20
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b21      	cmp	r3, #33	; 0x21
 8006030:	d13e      	bne.n	80060b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800603a:	d114      	bne.n	8006066 <UART_Transmit_IT+0x48>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d110      	bne.n	8006066 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006058:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	1c9a      	adds	r2, r3, #2
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	621a      	str	r2, [r3, #32]
 8006064:	e008      	b.n	8006078 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	1c59      	adds	r1, r3, #1
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	6211      	str	r1, [r2, #32]
 8006070:	781a      	ldrb	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800607c:	b29b      	uxth	r3, r3
 800607e:	3b01      	subs	r3, #1
 8006080:	b29b      	uxth	r3, r3
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	4619      	mov	r1, r3
 8006086:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10f      	bne.n	80060ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68da      	ldr	r2, [r3, #12]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800609a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060ac:	2300      	movs	r3, #0
 80060ae:	e000      	b.n	80060b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060b0:	2302      	movs	r3, #2
  }
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b082      	sub	sp, #8
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68da      	ldr	r2, [r3, #12]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2220      	movs	r2, #32
 80060da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7ff fd44 	bl	8005b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b08c      	sub	sp, #48	; 0x30
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b22      	cmp	r3, #34	; 0x22
 8006100:	f040 80ab 	bne.w	800625a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800610c:	d117      	bne.n	800613e <UART_Receive_IT+0x50>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d113      	bne.n	800613e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006116:	2300      	movs	r3, #0
 8006118:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	b29b      	uxth	r3, r3
 8006128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800612c:	b29a      	uxth	r2, r3
 800612e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006130:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006136:	1c9a      	adds	r2, r3, #2
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	629a      	str	r2, [r3, #40]	; 0x28
 800613c:	e026      	b.n	800618c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006142:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006144:	2300      	movs	r3, #0
 8006146:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006150:	d007      	beq.n	8006162 <UART_Receive_IT+0x74>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10a      	bne.n	8006170 <UART_Receive_IT+0x82>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	b2da      	uxtb	r2, r3
 800616a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616c:	701a      	strb	r2, [r3, #0]
 800616e:	e008      	b.n	8006182 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	b2db      	uxtb	r3, r3
 8006178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800617c:	b2da      	uxtb	r2, r3
 800617e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006180:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006190:	b29b      	uxth	r3, r3
 8006192:	3b01      	subs	r3, #1
 8006194:	b29b      	uxth	r3, r3
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	4619      	mov	r1, r3
 800619a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800619c:	2b00      	cmp	r3, #0
 800619e:	d15a      	bne.n	8006256 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0220 	bic.w	r2, r2, #32
 80061ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68da      	ldr	r2, [r3, #12]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	695a      	ldr	r2, [r3, #20]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0201 	bic.w	r2, r2, #1
 80061ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2220      	movs	r2, #32
 80061d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d135      	bne.n	800624c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	330c      	adds	r3, #12
 80061ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	e853 3f00 	ldrex	r3, [r3]
 80061f4:	613b      	str	r3, [r7, #16]
   return(result);
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	f023 0310 	bic.w	r3, r3, #16
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	330c      	adds	r3, #12
 8006204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006206:	623a      	str	r2, [r7, #32]
 8006208:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620a:	69f9      	ldr	r1, [r7, #28]
 800620c:	6a3a      	ldr	r2, [r7, #32]
 800620e:	e841 2300 	strex	r3, r2, [r1]
 8006212:	61bb      	str	r3, [r7, #24]
   return(result);
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1e5      	bne.n	80061e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0310 	and.w	r3, r3, #16
 8006224:	2b10      	cmp	r3, #16
 8006226:	d10a      	bne.n	800623e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006228:	2300      	movs	r3, #0
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7fb fff1 	bl	800222c <HAL_UARTEx_RxEventCallback>
 800624a:	e002      	b.n	8006252 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff fc97 	bl	8005b80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	e002      	b.n	800625c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	e000      	b.n	800625c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800625a:	2302      	movs	r3, #2
  }
}
 800625c:	4618      	mov	r0, r3
 800625e:	3730      	adds	r7, #48	; 0x30
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006268:	b09f      	sub	sp, #124	; 0x7c
 800626a:	af00      	add	r7, sp, #0
 800626c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800626e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800627a:	68d9      	ldr	r1, [r3, #12]
 800627c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	ea40 0301 	orr.w	r3, r0, r1
 8006284:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006288:	689a      	ldr	r2, [r3, #8]
 800628a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	431a      	orrs	r2, r3
 8006290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	431a      	orrs	r2, r3
 8006296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	4313      	orrs	r3, r2
 800629c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800629e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062a8:	f021 010c 	bic.w	r1, r1, #12
 80062ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062b2:	430b      	orrs	r3, r1
 80062b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c2:	6999      	ldr	r1, [r3, #24]
 80062c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	ea40 0301 	orr.w	r3, r0, r1
 80062cc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	4bc5      	ldr	r3, [pc, #788]	; (80065e8 <UART_SetConfig+0x384>)
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d004      	beq.n	80062e2 <UART_SetConfig+0x7e>
 80062d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	4bc3      	ldr	r3, [pc, #780]	; (80065ec <UART_SetConfig+0x388>)
 80062de:	429a      	cmp	r2, r3
 80062e0:	d103      	bne.n	80062ea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062e2:	f7fe fe0f 	bl	8004f04 <HAL_RCC_GetPCLK2Freq>
 80062e6:	6778      	str	r0, [r7, #116]	; 0x74
 80062e8:	e002      	b.n	80062f0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062ea:	f7fe fdf7 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 80062ee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062f8:	f040 80b6 	bne.w	8006468 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062fe:	461c      	mov	r4, r3
 8006300:	f04f 0500 	mov.w	r5, #0
 8006304:	4622      	mov	r2, r4
 8006306:	462b      	mov	r3, r5
 8006308:	1891      	adds	r1, r2, r2
 800630a:	6439      	str	r1, [r7, #64]	; 0x40
 800630c:	415b      	adcs	r3, r3
 800630e:	647b      	str	r3, [r7, #68]	; 0x44
 8006310:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006314:	1912      	adds	r2, r2, r4
 8006316:	eb45 0303 	adc.w	r3, r5, r3
 800631a:	f04f 0000 	mov.w	r0, #0
 800631e:	f04f 0100 	mov.w	r1, #0
 8006322:	00d9      	lsls	r1, r3, #3
 8006324:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006328:	00d0      	lsls	r0, r2, #3
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	1911      	adds	r1, r2, r4
 8006330:	6639      	str	r1, [r7, #96]	; 0x60
 8006332:	416b      	adcs	r3, r5
 8006334:	667b      	str	r3, [r7, #100]	; 0x64
 8006336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	461a      	mov	r2, r3
 800633c:	f04f 0300 	mov.w	r3, #0
 8006340:	1891      	adds	r1, r2, r2
 8006342:	63b9      	str	r1, [r7, #56]	; 0x38
 8006344:	415b      	adcs	r3, r3
 8006346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006348:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800634c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006350:	f7f9 ff8e 	bl	8000270 <__aeabi_uldivmod>
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	4ba5      	ldr	r3, [pc, #660]	; (80065f0 <UART_SetConfig+0x38c>)
 800635a:	fba3 2302 	umull	r2, r3, r3, r2
 800635e:	095b      	lsrs	r3, r3, #5
 8006360:	011e      	lsls	r6, r3, #4
 8006362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006364:	461c      	mov	r4, r3
 8006366:	f04f 0500 	mov.w	r5, #0
 800636a:	4622      	mov	r2, r4
 800636c:	462b      	mov	r3, r5
 800636e:	1891      	adds	r1, r2, r2
 8006370:	6339      	str	r1, [r7, #48]	; 0x30
 8006372:	415b      	adcs	r3, r3
 8006374:	637b      	str	r3, [r7, #52]	; 0x34
 8006376:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800637a:	1912      	adds	r2, r2, r4
 800637c:	eb45 0303 	adc.w	r3, r5, r3
 8006380:	f04f 0000 	mov.w	r0, #0
 8006384:	f04f 0100 	mov.w	r1, #0
 8006388:	00d9      	lsls	r1, r3, #3
 800638a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800638e:	00d0      	lsls	r0, r2, #3
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	1911      	adds	r1, r2, r4
 8006396:	65b9      	str	r1, [r7, #88]	; 0x58
 8006398:	416b      	adcs	r3, r5
 800639a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800639c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	461a      	mov	r2, r3
 80063a2:	f04f 0300 	mov.w	r3, #0
 80063a6:	1891      	adds	r1, r2, r2
 80063a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80063aa:	415b      	adcs	r3, r3
 80063ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063b2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80063b6:	f7f9 ff5b 	bl	8000270 <__aeabi_uldivmod>
 80063ba:	4602      	mov	r2, r0
 80063bc:	460b      	mov	r3, r1
 80063be:	4b8c      	ldr	r3, [pc, #560]	; (80065f0 <UART_SetConfig+0x38c>)
 80063c0:	fba3 1302 	umull	r1, r3, r3, r2
 80063c4:	095b      	lsrs	r3, r3, #5
 80063c6:	2164      	movs	r1, #100	; 0x64
 80063c8:	fb01 f303 	mul.w	r3, r1, r3
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	3332      	adds	r3, #50	; 0x32
 80063d2:	4a87      	ldr	r2, [pc, #540]	; (80065f0 <UART_SetConfig+0x38c>)
 80063d4:	fba2 2303 	umull	r2, r3, r2, r3
 80063d8:	095b      	lsrs	r3, r3, #5
 80063da:	005b      	lsls	r3, r3, #1
 80063dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063e0:	441e      	add	r6, r3
 80063e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063e4:	4618      	mov	r0, r3
 80063e6:	f04f 0100 	mov.w	r1, #0
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	1894      	adds	r4, r2, r2
 80063f0:	623c      	str	r4, [r7, #32]
 80063f2:	415b      	adcs	r3, r3
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24
 80063f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063fa:	1812      	adds	r2, r2, r0
 80063fc:	eb41 0303 	adc.w	r3, r1, r3
 8006400:	f04f 0400 	mov.w	r4, #0
 8006404:	f04f 0500 	mov.w	r5, #0
 8006408:	00dd      	lsls	r5, r3, #3
 800640a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800640e:	00d4      	lsls	r4, r2, #3
 8006410:	4622      	mov	r2, r4
 8006412:	462b      	mov	r3, r5
 8006414:	1814      	adds	r4, r2, r0
 8006416:	653c      	str	r4, [r7, #80]	; 0x50
 8006418:	414b      	adcs	r3, r1
 800641a:	657b      	str	r3, [r7, #84]	; 0x54
 800641c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	461a      	mov	r2, r3
 8006422:	f04f 0300 	mov.w	r3, #0
 8006426:	1891      	adds	r1, r2, r2
 8006428:	61b9      	str	r1, [r7, #24]
 800642a:	415b      	adcs	r3, r3
 800642c:	61fb      	str	r3, [r7, #28]
 800642e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006432:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006436:	f7f9 ff1b 	bl	8000270 <__aeabi_uldivmod>
 800643a:	4602      	mov	r2, r0
 800643c:	460b      	mov	r3, r1
 800643e:	4b6c      	ldr	r3, [pc, #432]	; (80065f0 <UART_SetConfig+0x38c>)
 8006440:	fba3 1302 	umull	r1, r3, r3, r2
 8006444:	095b      	lsrs	r3, r3, #5
 8006446:	2164      	movs	r1, #100	; 0x64
 8006448:	fb01 f303 	mul.w	r3, r1, r3
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	3332      	adds	r3, #50	; 0x32
 8006452:	4a67      	ldr	r2, [pc, #412]	; (80065f0 <UART_SetConfig+0x38c>)
 8006454:	fba2 2303 	umull	r2, r3, r2, r3
 8006458:	095b      	lsrs	r3, r3, #5
 800645a:	f003 0207 	and.w	r2, r3, #7
 800645e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4432      	add	r2, r6
 8006464:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006466:	e0b9      	b.n	80065dc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800646a:	461c      	mov	r4, r3
 800646c:	f04f 0500 	mov.w	r5, #0
 8006470:	4622      	mov	r2, r4
 8006472:	462b      	mov	r3, r5
 8006474:	1891      	adds	r1, r2, r2
 8006476:	6139      	str	r1, [r7, #16]
 8006478:	415b      	adcs	r3, r3
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006480:	1912      	adds	r2, r2, r4
 8006482:	eb45 0303 	adc.w	r3, r5, r3
 8006486:	f04f 0000 	mov.w	r0, #0
 800648a:	f04f 0100 	mov.w	r1, #0
 800648e:	00d9      	lsls	r1, r3, #3
 8006490:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006494:	00d0      	lsls	r0, r2, #3
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	eb12 0804 	adds.w	r8, r2, r4
 800649e:	eb43 0905 	adc.w	r9, r3, r5
 80064a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f04f 0100 	mov.w	r1, #0
 80064ac:	f04f 0200 	mov.w	r2, #0
 80064b0:	f04f 0300 	mov.w	r3, #0
 80064b4:	008b      	lsls	r3, r1, #2
 80064b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80064ba:	0082      	lsls	r2, r0, #2
 80064bc:	4640      	mov	r0, r8
 80064be:	4649      	mov	r1, r9
 80064c0:	f7f9 fed6 	bl	8000270 <__aeabi_uldivmod>
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	4b49      	ldr	r3, [pc, #292]	; (80065f0 <UART_SetConfig+0x38c>)
 80064ca:	fba3 2302 	umull	r2, r3, r3, r2
 80064ce:	095b      	lsrs	r3, r3, #5
 80064d0:	011e      	lsls	r6, r3, #4
 80064d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064d4:	4618      	mov	r0, r3
 80064d6:	f04f 0100 	mov.w	r1, #0
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	1894      	adds	r4, r2, r2
 80064e0:	60bc      	str	r4, [r7, #8]
 80064e2:	415b      	adcs	r3, r3
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064ea:	1812      	adds	r2, r2, r0
 80064ec:	eb41 0303 	adc.w	r3, r1, r3
 80064f0:	f04f 0400 	mov.w	r4, #0
 80064f4:	f04f 0500 	mov.w	r5, #0
 80064f8:	00dd      	lsls	r5, r3, #3
 80064fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80064fe:	00d4      	lsls	r4, r2, #3
 8006500:	4622      	mov	r2, r4
 8006502:	462b      	mov	r3, r5
 8006504:	1814      	adds	r4, r2, r0
 8006506:	64bc      	str	r4, [r7, #72]	; 0x48
 8006508:	414b      	adcs	r3, r1
 800650a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800650c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	4618      	mov	r0, r3
 8006512:	f04f 0100 	mov.w	r1, #0
 8006516:	f04f 0200 	mov.w	r2, #0
 800651a:	f04f 0300 	mov.w	r3, #0
 800651e:	008b      	lsls	r3, r1, #2
 8006520:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006524:	0082      	lsls	r2, r0, #2
 8006526:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800652a:	f7f9 fea1 	bl	8000270 <__aeabi_uldivmod>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	4b2f      	ldr	r3, [pc, #188]	; (80065f0 <UART_SetConfig+0x38c>)
 8006534:	fba3 1302 	umull	r1, r3, r3, r2
 8006538:	095b      	lsrs	r3, r3, #5
 800653a:	2164      	movs	r1, #100	; 0x64
 800653c:	fb01 f303 	mul.w	r3, r1, r3
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	3332      	adds	r3, #50	; 0x32
 8006546:	4a2a      	ldr	r2, [pc, #168]	; (80065f0 <UART_SetConfig+0x38c>)
 8006548:	fba2 2303 	umull	r2, r3, r2, r3
 800654c:	095b      	lsrs	r3, r3, #5
 800654e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006552:	441e      	add	r6, r3
 8006554:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006556:	4618      	mov	r0, r3
 8006558:	f04f 0100 	mov.w	r1, #0
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	1894      	adds	r4, r2, r2
 8006562:	603c      	str	r4, [r7, #0]
 8006564:	415b      	adcs	r3, r3
 8006566:	607b      	str	r3, [r7, #4]
 8006568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800656c:	1812      	adds	r2, r2, r0
 800656e:	eb41 0303 	adc.w	r3, r1, r3
 8006572:	f04f 0400 	mov.w	r4, #0
 8006576:	f04f 0500 	mov.w	r5, #0
 800657a:	00dd      	lsls	r5, r3, #3
 800657c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006580:	00d4      	lsls	r4, r2, #3
 8006582:	4622      	mov	r2, r4
 8006584:	462b      	mov	r3, r5
 8006586:	eb12 0a00 	adds.w	sl, r2, r0
 800658a:	eb43 0b01 	adc.w	fp, r3, r1
 800658e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	4618      	mov	r0, r3
 8006594:	f04f 0100 	mov.w	r1, #0
 8006598:	f04f 0200 	mov.w	r2, #0
 800659c:	f04f 0300 	mov.w	r3, #0
 80065a0:	008b      	lsls	r3, r1, #2
 80065a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80065a6:	0082      	lsls	r2, r0, #2
 80065a8:	4650      	mov	r0, sl
 80065aa:	4659      	mov	r1, fp
 80065ac:	f7f9 fe60 	bl	8000270 <__aeabi_uldivmod>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	4b0e      	ldr	r3, [pc, #56]	; (80065f0 <UART_SetConfig+0x38c>)
 80065b6:	fba3 1302 	umull	r1, r3, r3, r2
 80065ba:	095b      	lsrs	r3, r3, #5
 80065bc:	2164      	movs	r1, #100	; 0x64
 80065be:	fb01 f303 	mul.w	r3, r1, r3
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	011b      	lsls	r3, r3, #4
 80065c6:	3332      	adds	r3, #50	; 0x32
 80065c8:	4a09      	ldr	r2, [pc, #36]	; (80065f0 <UART_SetConfig+0x38c>)
 80065ca:	fba2 2303 	umull	r2, r3, r2, r3
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	f003 020f 	and.w	r2, r3, #15
 80065d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4432      	add	r2, r6
 80065da:	609a      	str	r2, [r3, #8]
}
 80065dc:	bf00      	nop
 80065de:	377c      	adds	r7, #124	; 0x7c
 80065e0:	46bd      	mov	sp, r7
 80065e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e6:	bf00      	nop
 80065e8:	40011000 	.word	0x40011000
 80065ec:	40011400 	.word	0x40011400
 80065f0:	51eb851f 	.word	0x51eb851f

080065f4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80065fa:	4b98      	ldr	r3, [pc, #608]	; (800685c <MX_LWIP_Init+0x268>)
 80065fc:	22c0      	movs	r2, #192	; 0xc0
 80065fe:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006600:	4b96      	ldr	r3, [pc, #600]	; (800685c <MX_LWIP_Init+0x268>)
 8006602:	22a8      	movs	r2, #168	; 0xa8
 8006604:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8006606:	4b95      	ldr	r3, [pc, #596]	; (800685c <MX_LWIP_Init+0x268>)
 8006608:	2200      	movs	r2, #0
 800660a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 177;
 800660c:	4b93      	ldr	r3, [pc, #588]	; (800685c <MX_LWIP_Init+0x268>)
 800660e:	22b1      	movs	r2, #177	; 0xb1
 8006610:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006612:	4b93      	ldr	r3, [pc, #588]	; (8006860 <MX_LWIP_Init+0x26c>)
 8006614:	22ff      	movs	r2, #255	; 0xff
 8006616:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006618:	4b91      	ldr	r3, [pc, #580]	; (8006860 <MX_LWIP_Init+0x26c>)
 800661a:	22ff      	movs	r2, #255	; 0xff
 800661c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800661e:	4b90      	ldr	r3, [pc, #576]	; (8006860 <MX_LWIP_Init+0x26c>)
 8006620:	22ff      	movs	r2, #255	; 0xff
 8006622:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006624:	4b8e      	ldr	r3, [pc, #568]	; (8006860 <MX_LWIP_Init+0x26c>)
 8006626:	2200      	movs	r2, #0
 8006628:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800662a:	4b8e      	ldr	r3, [pc, #568]	; (8006864 <MX_LWIP_Init+0x270>)
 800662c:	22c0      	movs	r2, #192	; 0xc0
 800662e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8006630:	4b8c      	ldr	r3, [pc, #560]	; (8006864 <MX_LWIP_Init+0x270>)
 8006632:	22a8      	movs	r2, #168	; 0xa8
 8006634:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8006636:	4b8b      	ldr	r3, [pc, #556]	; (8006864 <MX_LWIP_Init+0x270>)
 8006638:	2200      	movs	r2, #0
 800663a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800663c:	4b89      	ldr	r3, [pc, #548]	; (8006864 <MX_LWIP_Init+0x270>)
 800663e:	2201      	movs	r2, #1
 8006640:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006642:	2100      	movs	r1, #0
 8006644:	2000      	movs	r0, #0
 8006646:	f005 fdc3 	bl	800c1d0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800664a:	4b84      	ldr	r3, [pc, #528]	; (800685c <MX_LWIP_Init+0x268>)
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	061a      	lsls	r2, r3, #24
 8006650:	4b82      	ldr	r3, [pc, #520]	; (800685c <MX_LWIP_Init+0x268>)
 8006652:	785b      	ldrb	r3, [r3, #1]
 8006654:	041b      	lsls	r3, r3, #16
 8006656:	431a      	orrs	r2, r3
 8006658:	4b80      	ldr	r3, [pc, #512]	; (800685c <MX_LWIP_Init+0x268>)
 800665a:	789b      	ldrb	r3, [r3, #2]
 800665c:	021b      	lsls	r3, r3, #8
 800665e:	4313      	orrs	r3, r2
 8006660:	4a7e      	ldr	r2, [pc, #504]	; (800685c <MX_LWIP_Init+0x268>)
 8006662:	78d2      	ldrb	r2, [r2, #3]
 8006664:	4313      	orrs	r3, r2
 8006666:	061a      	lsls	r2, r3, #24
 8006668:	4b7c      	ldr	r3, [pc, #496]	; (800685c <MX_LWIP_Init+0x268>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	0619      	lsls	r1, r3, #24
 800666e:	4b7b      	ldr	r3, [pc, #492]	; (800685c <MX_LWIP_Init+0x268>)
 8006670:	785b      	ldrb	r3, [r3, #1]
 8006672:	041b      	lsls	r3, r3, #16
 8006674:	4319      	orrs	r1, r3
 8006676:	4b79      	ldr	r3, [pc, #484]	; (800685c <MX_LWIP_Init+0x268>)
 8006678:	789b      	ldrb	r3, [r3, #2]
 800667a:	021b      	lsls	r3, r3, #8
 800667c:	430b      	orrs	r3, r1
 800667e:	4977      	ldr	r1, [pc, #476]	; (800685c <MX_LWIP_Init+0x268>)
 8006680:	78c9      	ldrb	r1, [r1, #3]
 8006682:	430b      	orrs	r3, r1
 8006684:	021b      	lsls	r3, r3, #8
 8006686:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800668a:	431a      	orrs	r2, r3
 800668c:	4b73      	ldr	r3, [pc, #460]	; (800685c <MX_LWIP_Init+0x268>)
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	0619      	lsls	r1, r3, #24
 8006692:	4b72      	ldr	r3, [pc, #456]	; (800685c <MX_LWIP_Init+0x268>)
 8006694:	785b      	ldrb	r3, [r3, #1]
 8006696:	041b      	lsls	r3, r3, #16
 8006698:	4319      	orrs	r1, r3
 800669a:	4b70      	ldr	r3, [pc, #448]	; (800685c <MX_LWIP_Init+0x268>)
 800669c:	789b      	ldrb	r3, [r3, #2]
 800669e:	021b      	lsls	r3, r3, #8
 80066a0:	430b      	orrs	r3, r1
 80066a2:	496e      	ldr	r1, [pc, #440]	; (800685c <MX_LWIP_Init+0x268>)
 80066a4:	78c9      	ldrb	r1, [r1, #3]
 80066a6:	430b      	orrs	r3, r1
 80066a8:	0a1b      	lsrs	r3, r3, #8
 80066aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80066ae:	431a      	orrs	r2, r3
 80066b0:	4b6a      	ldr	r3, [pc, #424]	; (800685c <MX_LWIP_Init+0x268>)
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	0619      	lsls	r1, r3, #24
 80066b6:	4b69      	ldr	r3, [pc, #420]	; (800685c <MX_LWIP_Init+0x268>)
 80066b8:	785b      	ldrb	r3, [r3, #1]
 80066ba:	041b      	lsls	r3, r3, #16
 80066bc:	4319      	orrs	r1, r3
 80066be:	4b67      	ldr	r3, [pc, #412]	; (800685c <MX_LWIP_Init+0x268>)
 80066c0:	789b      	ldrb	r3, [r3, #2]
 80066c2:	021b      	lsls	r3, r3, #8
 80066c4:	430b      	orrs	r3, r1
 80066c6:	4965      	ldr	r1, [pc, #404]	; (800685c <MX_LWIP_Init+0x268>)
 80066c8:	78c9      	ldrb	r1, [r1, #3]
 80066ca:	430b      	orrs	r3, r1
 80066cc:	0e1b      	lsrs	r3, r3, #24
 80066ce:	4313      	orrs	r3, r2
 80066d0:	4a65      	ldr	r2, [pc, #404]	; (8006868 <MX_LWIP_Init+0x274>)
 80066d2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80066d4:	4b62      	ldr	r3, [pc, #392]	; (8006860 <MX_LWIP_Init+0x26c>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	061a      	lsls	r2, r3, #24
 80066da:	4b61      	ldr	r3, [pc, #388]	; (8006860 <MX_LWIP_Init+0x26c>)
 80066dc:	785b      	ldrb	r3, [r3, #1]
 80066de:	041b      	lsls	r3, r3, #16
 80066e0:	431a      	orrs	r2, r3
 80066e2:	4b5f      	ldr	r3, [pc, #380]	; (8006860 <MX_LWIP_Init+0x26c>)
 80066e4:	789b      	ldrb	r3, [r3, #2]
 80066e6:	021b      	lsls	r3, r3, #8
 80066e8:	4313      	orrs	r3, r2
 80066ea:	4a5d      	ldr	r2, [pc, #372]	; (8006860 <MX_LWIP_Init+0x26c>)
 80066ec:	78d2      	ldrb	r2, [r2, #3]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	061a      	lsls	r2, r3, #24
 80066f2:	4b5b      	ldr	r3, [pc, #364]	; (8006860 <MX_LWIP_Init+0x26c>)
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	0619      	lsls	r1, r3, #24
 80066f8:	4b59      	ldr	r3, [pc, #356]	; (8006860 <MX_LWIP_Init+0x26c>)
 80066fa:	785b      	ldrb	r3, [r3, #1]
 80066fc:	041b      	lsls	r3, r3, #16
 80066fe:	4319      	orrs	r1, r3
 8006700:	4b57      	ldr	r3, [pc, #348]	; (8006860 <MX_LWIP_Init+0x26c>)
 8006702:	789b      	ldrb	r3, [r3, #2]
 8006704:	021b      	lsls	r3, r3, #8
 8006706:	430b      	orrs	r3, r1
 8006708:	4955      	ldr	r1, [pc, #340]	; (8006860 <MX_LWIP_Init+0x26c>)
 800670a:	78c9      	ldrb	r1, [r1, #3]
 800670c:	430b      	orrs	r3, r1
 800670e:	021b      	lsls	r3, r3, #8
 8006710:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006714:	431a      	orrs	r2, r3
 8006716:	4b52      	ldr	r3, [pc, #328]	; (8006860 <MX_LWIP_Init+0x26c>)
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	0619      	lsls	r1, r3, #24
 800671c:	4b50      	ldr	r3, [pc, #320]	; (8006860 <MX_LWIP_Init+0x26c>)
 800671e:	785b      	ldrb	r3, [r3, #1]
 8006720:	041b      	lsls	r3, r3, #16
 8006722:	4319      	orrs	r1, r3
 8006724:	4b4e      	ldr	r3, [pc, #312]	; (8006860 <MX_LWIP_Init+0x26c>)
 8006726:	789b      	ldrb	r3, [r3, #2]
 8006728:	021b      	lsls	r3, r3, #8
 800672a:	430b      	orrs	r3, r1
 800672c:	494c      	ldr	r1, [pc, #304]	; (8006860 <MX_LWIP_Init+0x26c>)
 800672e:	78c9      	ldrb	r1, [r1, #3]
 8006730:	430b      	orrs	r3, r1
 8006732:	0a1b      	lsrs	r3, r3, #8
 8006734:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006738:	431a      	orrs	r2, r3
 800673a:	4b49      	ldr	r3, [pc, #292]	; (8006860 <MX_LWIP_Init+0x26c>)
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	0619      	lsls	r1, r3, #24
 8006740:	4b47      	ldr	r3, [pc, #284]	; (8006860 <MX_LWIP_Init+0x26c>)
 8006742:	785b      	ldrb	r3, [r3, #1]
 8006744:	041b      	lsls	r3, r3, #16
 8006746:	4319      	orrs	r1, r3
 8006748:	4b45      	ldr	r3, [pc, #276]	; (8006860 <MX_LWIP_Init+0x26c>)
 800674a:	789b      	ldrb	r3, [r3, #2]
 800674c:	021b      	lsls	r3, r3, #8
 800674e:	430b      	orrs	r3, r1
 8006750:	4943      	ldr	r1, [pc, #268]	; (8006860 <MX_LWIP_Init+0x26c>)
 8006752:	78c9      	ldrb	r1, [r1, #3]
 8006754:	430b      	orrs	r3, r1
 8006756:	0e1b      	lsrs	r3, r3, #24
 8006758:	4313      	orrs	r3, r2
 800675a:	4a44      	ldr	r2, [pc, #272]	; (800686c <MX_LWIP_Init+0x278>)
 800675c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800675e:	4b41      	ldr	r3, [pc, #260]	; (8006864 <MX_LWIP_Init+0x270>)
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	061a      	lsls	r2, r3, #24
 8006764:	4b3f      	ldr	r3, [pc, #252]	; (8006864 <MX_LWIP_Init+0x270>)
 8006766:	785b      	ldrb	r3, [r3, #1]
 8006768:	041b      	lsls	r3, r3, #16
 800676a:	431a      	orrs	r2, r3
 800676c:	4b3d      	ldr	r3, [pc, #244]	; (8006864 <MX_LWIP_Init+0x270>)
 800676e:	789b      	ldrb	r3, [r3, #2]
 8006770:	021b      	lsls	r3, r3, #8
 8006772:	4313      	orrs	r3, r2
 8006774:	4a3b      	ldr	r2, [pc, #236]	; (8006864 <MX_LWIP_Init+0x270>)
 8006776:	78d2      	ldrb	r2, [r2, #3]
 8006778:	4313      	orrs	r3, r2
 800677a:	061a      	lsls	r2, r3, #24
 800677c:	4b39      	ldr	r3, [pc, #228]	; (8006864 <MX_LWIP_Init+0x270>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	0619      	lsls	r1, r3, #24
 8006782:	4b38      	ldr	r3, [pc, #224]	; (8006864 <MX_LWIP_Init+0x270>)
 8006784:	785b      	ldrb	r3, [r3, #1]
 8006786:	041b      	lsls	r3, r3, #16
 8006788:	4319      	orrs	r1, r3
 800678a:	4b36      	ldr	r3, [pc, #216]	; (8006864 <MX_LWIP_Init+0x270>)
 800678c:	789b      	ldrb	r3, [r3, #2]
 800678e:	021b      	lsls	r3, r3, #8
 8006790:	430b      	orrs	r3, r1
 8006792:	4934      	ldr	r1, [pc, #208]	; (8006864 <MX_LWIP_Init+0x270>)
 8006794:	78c9      	ldrb	r1, [r1, #3]
 8006796:	430b      	orrs	r3, r1
 8006798:	021b      	lsls	r3, r3, #8
 800679a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800679e:	431a      	orrs	r2, r3
 80067a0:	4b30      	ldr	r3, [pc, #192]	; (8006864 <MX_LWIP_Init+0x270>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	0619      	lsls	r1, r3, #24
 80067a6:	4b2f      	ldr	r3, [pc, #188]	; (8006864 <MX_LWIP_Init+0x270>)
 80067a8:	785b      	ldrb	r3, [r3, #1]
 80067aa:	041b      	lsls	r3, r3, #16
 80067ac:	4319      	orrs	r1, r3
 80067ae:	4b2d      	ldr	r3, [pc, #180]	; (8006864 <MX_LWIP_Init+0x270>)
 80067b0:	789b      	ldrb	r3, [r3, #2]
 80067b2:	021b      	lsls	r3, r3, #8
 80067b4:	430b      	orrs	r3, r1
 80067b6:	492b      	ldr	r1, [pc, #172]	; (8006864 <MX_LWIP_Init+0x270>)
 80067b8:	78c9      	ldrb	r1, [r1, #3]
 80067ba:	430b      	orrs	r3, r1
 80067bc:	0a1b      	lsrs	r3, r3, #8
 80067be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80067c2:	431a      	orrs	r2, r3
 80067c4:	4b27      	ldr	r3, [pc, #156]	; (8006864 <MX_LWIP_Init+0x270>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	0619      	lsls	r1, r3, #24
 80067ca:	4b26      	ldr	r3, [pc, #152]	; (8006864 <MX_LWIP_Init+0x270>)
 80067cc:	785b      	ldrb	r3, [r3, #1]
 80067ce:	041b      	lsls	r3, r3, #16
 80067d0:	4319      	orrs	r1, r3
 80067d2:	4b24      	ldr	r3, [pc, #144]	; (8006864 <MX_LWIP_Init+0x270>)
 80067d4:	789b      	ldrb	r3, [r3, #2]
 80067d6:	021b      	lsls	r3, r3, #8
 80067d8:	430b      	orrs	r3, r1
 80067da:	4922      	ldr	r1, [pc, #136]	; (8006864 <MX_LWIP_Init+0x270>)
 80067dc:	78c9      	ldrb	r1, [r1, #3]
 80067de:	430b      	orrs	r3, r1
 80067e0:	0e1b      	lsrs	r3, r3, #24
 80067e2:	4313      	orrs	r3, r2
 80067e4:	4a22      	ldr	r2, [pc, #136]	; (8006870 <MX_LWIP_Init+0x27c>)
 80067e6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80067e8:	4b22      	ldr	r3, [pc, #136]	; (8006874 <MX_LWIP_Init+0x280>)
 80067ea:	9302      	str	r3, [sp, #8]
 80067ec:	4b22      	ldr	r3, [pc, #136]	; (8006878 <MX_LWIP_Init+0x284>)
 80067ee:	9301      	str	r3, [sp, #4]
 80067f0:	2300      	movs	r3, #0
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	4b1e      	ldr	r3, [pc, #120]	; (8006870 <MX_LWIP_Init+0x27c>)
 80067f6:	4a1d      	ldr	r2, [pc, #116]	; (800686c <MX_LWIP_Init+0x278>)
 80067f8:	491b      	ldr	r1, [pc, #108]	; (8006868 <MX_LWIP_Init+0x274>)
 80067fa:	4820      	ldr	r0, [pc, #128]	; (800687c <MX_LWIP_Init+0x288>)
 80067fc:	f006 fa6c 	bl	800ccd8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006800:	481e      	ldr	r0, [pc, #120]	; (800687c <MX_LWIP_Init+0x288>)
 8006802:	f006 fc1b 	bl	800d03c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006806:	4b1d      	ldr	r3, [pc, #116]	; (800687c <MX_LWIP_Init+0x288>)
 8006808:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800680c:	089b      	lsrs	r3, r3, #2
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b00      	cmp	r3, #0
 8006816:	d003      	beq.n	8006820 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006818:	4818      	ldr	r0, [pc, #96]	; (800687c <MX_LWIP_Init+0x288>)
 800681a:	f006 fc1f 	bl	800d05c <netif_set_up>
 800681e:	e002      	b.n	8006826 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006820:	4816      	ldr	r0, [pc, #88]	; (800687c <MX_LWIP_Init+0x288>)
 8006822:	f006 fc87 	bl	800d134 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8006826:	4916      	ldr	r1, [pc, #88]	; (8006880 <MX_LWIP_Init+0x28c>)
 8006828:	4814      	ldr	r0, [pc, #80]	; (800687c <MX_LWIP_Init+0x288>)
 800682a:	f006 fcb5 	bl	800d198 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800682e:	2300      	movs	r3, #0
 8006830:	603b      	str	r3, [r7, #0]
 8006832:	2300      	movs	r3, #0
 8006834:	607b      	str	r3, [r7, #4]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8006836:	463b      	mov	r3, r7
 8006838:	2101      	movs	r1, #1
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fd36 	bl	80072ac <osSemaphoreCreate>
 8006840:	4603      	mov	r3, r0
 8006842:	4a10      	ldr	r2, [pc, #64]	; (8006884 <MX_LWIP_Init+0x290>)
 8006844:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8006846:	4b10      	ldr	r3, [pc, #64]	; (8006888 <MX_LWIP_Init+0x294>)
 8006848:	4a0c      	ldr	r2, [pc, #48]	; (800687c <MX_LWIP_Init+0x288>)
 800684a:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800684c:	4b0d      	ldr	r3, [pc, #52]	; (8006884 <MX_LWIP_Init+0x290>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a0d      	ldr	r2, [pc, #52]	; (8006888 <MX_LWIP_Init+0x294>)
 8006852:	6053      	str	r3, [r2, #4]
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006854:	bf00      	nop
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	20006e44 	.word	0x20006e44
 8006860:	20006e40 	.word	0x20006e40
 8006864:	20006e04 	.word	0x20006e04
 8006868:	20006e3c 	.word	0x20006e3c
 800686c:	20006e48 	.word	0x20006e48
 8006870:	20006e4c 	.word	0x20006e4c
 8006874:	0800c0e1 	.word	0x0800c0e1
 8006878:	08006eb9 	.word	0x08006eb9
 800687c:	20006e08 	.word	0x20006e08
 8006880:	08006f25 	.word	0x08006f25
 8006884:	20000388 	.word	0x20000388
 8006888:	20006dfc 	.word	0x20006dfc

0800688c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b08e      	sub	sp, #56	; 0x38
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006898:	2200      	movs	r2, #0
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	605a      	str	r2, [r3, #4]
 800689e:	609a      	str	r2, [r3, #8]
 80068a0:	60da      	str	r2, [r3, #12]
 80068a2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a4a      	ldr	r2, [pc, #296]	; (80069d4 <HAL_ETH_MspInit+0x148>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	f040 808d 	bne.w	80069ca <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80068b0:	2300      	movs	r3, #0
 80068b2:	623b      	str	r3, [r7, #32]
 80068b4:	4b48      	ldr	r3, [pc, #288]	; (80069d8 <HAL_ETH_MspInit+0x14c>)
 80068b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b8:	4a47      	ldr	r2, [pc, #284]	; (80069d8 <HAL_ETH_MspInit+0x14c>)
 80068ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80068be:	6313      	str	r3, [r2, #48]	; 0x30
 80068c0:	4b45      	ldr	r3, [pc, #276]	; (80069d8 <HAL_ETH_MspInit+0x14c>)
 80068c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068c8:	623b      	str	r3, [r7, #32]
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	2300      	movs	r3, #0
 80068ce:	61fb      	str	r3, [r7, #28]
 80068d0:	4b41      	ldr	r3, [pc, #260]	; (80069d8 <HAL_ETH_MspInit+0x14c>)
 80068d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d4:	4a40      	ldr	r2, [pc, #256]	; (80069d8 <HAL_ETH_MspInit+0x14c>)
 80068d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068da:	6313      	str	r3, [r2, #48]	; 0x30
 80068dc:	4b3e      	ldr	r3, [pc, #248]	; (80069d8 <HAL_ETH_MspInit+0x14c>)
 80068de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068e4:	61fb      	str	r3, [r7, #28]
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	2300      	movs	r3, #0
 80068ea:	61bb      	str	r3, [r7, #24]
 80068ec:	4b3a      	ldr	r3, [pc, #232]	; (80069d8 <HAL_ETH_MspInit+0x14c>)
 80068ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f0:	4a39      	ldr	r2, [pc, #228]	; (80069d8 <HAL_ETH_MspInit+0x14c>)
 80068f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068f6:	6313      	str	r3, [r2, #48]	; 0x30
 80068f8:	4b37      	ldr	r3, [pc, #220]	; (80069d8 <HAL_ETH_MspInit+0x14c>)
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006900:	61bb      	str	r3, [r7, #24]
 8006902:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006904:	2300      	movs	r3, #0
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	4b33      	ldr	r3, [pc, #204]	; (80069d8 <HAL_ETH_MspInit+0x14c>)
 800690a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690c:	4a32      	ldr	r2, [pc, #200]	; (80069d8 <HAL_ETH_MspInit+0x14c>)
 800690e:	f043 0304 	orr.w	r3, r3, #4
 8006912:	6313      	str	r3, [r2, #48]	; 0x30
 8006914:	4b30      	ldr	r3, [pc, #192]	; (80069d8 <HAL_ETH_MspInit+0x14c>)
 8006916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006918:	f003 0304 	and.w	r3, r3, #4
 800691c:	617b      	str	r3, [r7, #20]
 800691e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006920:	2300      	movs	r3, #0
 8006922:	613b      	str	r3, [r7, #16]
 8006924:	4b2c      	ldr	r3, [pc, #176]	; (80069d8 <HAL_ETH_MspInit+0x14c>)
 8006926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006928:	4a2b      	ldr	r2, [pc, #172]	; (80069d8 <HAL_ETH_MspInit+0x14c>)
 800692a:	f043 0301 	orr.w	r3, r3, #1
 800692e:	6313      	str	r3, [r2, #48]	; 0x30
 8006930:	4b29      	ldr	r3, [pc, #164]	; (80069d8 <HAL_ETH_MspInit+0x14c>)
 8006932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	613b      	str	r3, [r7, #16]
 800693a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800693c:	2300      	movs	r3, #0
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	4b25      	ldr	r3, [pc, #148]	; (80069d8 <HAL_ETH_MspInit+0x14c>)
 8006942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006944:	4a24      	ldr	r2, [pc, #144]	; (80069d8 <HAL_ETH_MspInit+0x14c>)
 8006946:	f043 0302 	orr.w	r3, r3, #2
 800694a:	6313      	str	r3, [r2, #48]	; 0x30
 800694c:	4b22      	ldr	r3, [pc, #136]	; (80069d8 <HAL_ETH_MspInit+0x14c>)
 800694e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	60fb      	str	r3, [r7, #12]
 8006956:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8006958:	2332      	movs	r3, #50	; 0x32
 800695a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800695c:	2302      	movs	r3, #2
 800695e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006960:	2300      	movs	r3, #0
 8006962:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006964:	2303      	movs	r3, #3
 8006966:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006968:	230b      	movs	r3, #11
 800696a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800696c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006970:	4619      	mov	r1, r3
 8006972:	481a      	ldr	r0, [pc, #104]	; (80069dc <HAL_ETH_MspInit+0x150>)
 8006974:	f7fd fc5c 	bl	8004230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006978:	2386      	movs	r3, #134	; 0x86
 800697a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800697c:	2302      	movs	r3, #2
 800697e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006980:	2300      	movs	r3, #0
 8006982:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006984:	2303      	movs	r3, #3
 8006986:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006988:	230b      	movs	r3, #11
 800698a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800698c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006990:	4619      	mov	r1, r3
 8006992:	4813      	ldr	r0, [pc, #76]	; (80069e0 <HAL_ETH_MspInit+0x154>)
 8006994:	f7fd fc4c 	bl	8004230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8006998:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800699c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800699e:	2302      	movs	r3, #2
 80069a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069a6:	2303      	movs	r3, #3
 80069a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80069aa:	230b      	movs	r3, #11
 80069ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069b2:	4619      	mov	r1, r3
 80069b4:	480b      	ldr	r0, [pc, #44]	; (80069e4 <HAL_ETH_MspInit+0x158>)
 80069b6:	f7fd fc3b 	bl	8004230 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80069ba:	2200      	movs	r2, #0
 80069bc:	2105      	movs	r1, #5
 80069be:	203d      	movs	r0, #61	; 0x3d
 80069c0:	f7fb fe64 	bl	800268c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80069c4:	203d      	movs	r0, #61	; 0x3d
 80069c6:	f7fb fe7d 	bl	80026c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80069ca:	bf00      	nop
 80069cc:	3738      	adds	r7, #56	; 0x38
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	40028000 	.word	0x40028000
 80069d8:	40023800 	.word	0x40023800
 80069dc:	40020800 	.word	0x40020800
 80069e0:	40020000 	.word	0x40020000
 80069e4:	40020400 	.word	0x40020400

080069e8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80069f0:	4b04      	ldr	r3, [pc, #16]	; (8006a04 <HAL_ETH_RxCpltCallback+0x1c>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 fcd9 	bl	80073ac <osSemaphoreRelease>
}
 80069fa:	bf00      	nop
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	2000038c 	.word	0x2000038c

08006a08 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006a08:	b5b0      	push	{r4, r5, r7, lr}
 8006a0a:	b090      	sub	sp, #64	; 0x40
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006a10:	2300      	movs	r3, #0
 8006a12:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006a14:	4b5f      	ldr	r3, [pc, #380]	; (8006b94 <low_level_init+0x18c>)
 8006a16:	4a60      	ldr	r2, [pc, #384]	; (8006b98 <low_level_init+0x190>)
 8006a18:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_DISABLE;
 8006a1a:	4b5e      	ldr	r3, [pc, #376]	; (8006b94 <low_level_init+0x18c>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8006a20:	4b5c      	ldr	r3, [pc, #368]	; (8006b94 <low_level_init+0x18c>)
 8006a22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006a26:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006a28:	4b5a      	ldr	r3, [pc, #360]	; (8006b94 <low_level_init+0x18c>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006a2e:	4b59      	ldr	r3, [pc, #356]	; (8006b94 <low_level_init+0x18c>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8006a34:	2300      	movs	r3, #0
 8006a36:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8006a3a:	2380      	movs	r3, #128	; 0x80
 8006a3c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8006a40:	23e1      	movs	r3, #225	; 0xe1
 8006a42:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8006a46:	2300      	movs	r3, #0
 8006a48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8006a52:	2300      	movs	r3, #0
 8006a54:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8006a58:	4a4e      	ldr	r2, [pc, #312]	; (8006b94 <low_level_init+0x18c>)
 8006a5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a5e:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8006a60:	4b4c      	ldr	r3, [pc, #304]	; (8006b94 <low_level_init+0x18c>)
 8006a62:	2201      	movs	r2, #1
 8006a64:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006a66:	4b4b      	ldr	r3, [pc, #300]	; (8006b94 <low_level_init+0x18c>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006a6c:	4b49      	ldr	r3, [pc, #292]	; (8006b94 <low_level_init+0x18c>)
 8006a6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006a72:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006a74:	4847      	ldr	r0, [pc, #284]	; (8006b94 <low_level_init+0x18c>)
 8006a76:	f7fc fa35 	bl	8002ee4 <HAL_ETH_Init>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8006a80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d108      	bne.n	8006a9a <low_level_init+0x92>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006a8e:	f043 0304 	orr.w	r3, r3, #4
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8006a9a:	2304      	movs	r3, #4
 8006a9c:	4a3f      	ldr	r2, [pc, #252]	; (8006b9c <low_level_init+0x194>)
 8006a9e:	4940      	ldr	r1, [pc, #256]	; (8006ba0 <low_level_init+0x198>)
 8006aa0:	483c      	ldr	r0, [pc, #240]	; (8006b94 <low_level_init+0x18c>)
 8006aa2:	f7fc fbbb 	bl	800321c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006aa6:	2304      	movs	r3, #4
 8006aa8:	4a3e      	ldr	r2, [pc, #248]	; (8006ba4 <low_level_init+0x19c>)
 8006aaa:	493f      	ldr	r1, [pc, #252]	; (8006ba8 <low_level_init+0x1a0>)
 8006aac:	4839      	ldr	r0, [pc, #228]	; (8006b94 <low_level_init+0x18c>)
 8006aae:	f7fc fc1e 	bl	80032ee <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2206      	movs	r2, #6
 8006ab6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006aba:	4b36      	ldr	r3, [pc, #216]	; (8006b94 <low_level_init+0x18c>)
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	781a      	ldrb	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006ac6:	4b33      	ldr	r3, [pc, #204]	; (8006b94 <low_level_init+0x18c>)
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	785a      	ldrb	r2, [r3, #1]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006ad2:	4b30      	ldr	r3, [pc, #192]	; (8006b94 <low_level_init+0x18c>)
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	789a      	ldrb	r2, [r3, #2]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006ade:	4b2d      	ldr	r3, [pc, #180]	; (8006b94 <low_level_init+0x18c>)
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	78da      	ldrb	r2, [r3, #3]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006aea:	4b2a      	ldr	r3, [pc, #168]	; (8006b94 <low_level_init+0x18c>)
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	791a      	ldrb	r2, [r3, #4]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006af6:	4b27      	ldr	r3, [pc, #156]	; (8006b94 <low_level_init+0x18c>)
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	795a      	ldrb	r2, [r3, #5]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006b08:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006b10:	f043 030a 	orr.w	r3, r3, #10
 8006b14:	b2da      	uxtb	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b20:	2300      	movs	r3, #0
 8006b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8006b24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b28:	2101      	movs	r1, #1
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 fbbe 	bl	80072ac <osSemaphoreCreate>
 8006b30:	4603      	mov	r3, r0
 8006b32:	4a1e      	ldr	r2, [pc, #120]	; (8006bac <low_level_init+0x1a4>)
 8006b34:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006b36:	4b1e      	ldr	r3, [pc, #120]	; (8006bb0 <low_level_init+0x1a8>)
 8006b38:	f107 040c 	add.w	r4, r7, #12
 8006b3c:	461d      	mov	r5, r3
 8006b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006b46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8006b4a:	f107 030c 	add.w	r3, r7, #12
 8006b4e:	6879      	ldr	r1, [r7, #4]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 faae 	bl	80070b2 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8006b56:	480f      	ldr	r0, [pc, #60]	; (8006b94 <low_level_init+0x18c>)
 8006b58:	f7fc fef1 	bl	800393e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8006b5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b60:	461a      	mov	r2, r3
 8006b62:	211d      	movs	r1, #29
 8006b64:	480b      	ldr	r0, [pc, #44]	; (8006b94 <low_level_init+0x18c>)
 8006b66:	f7fc fe1c 	bl	80037a2 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6c:	f043 030b 	orr.w	r3, r3, #11
 8006b70:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	461a      	mov	r2, r3
 8006b76:	211d      	movs	r1, #29
 8006b78:	4806      	ldr	r0, [pc, #24]	; (8006b94 <low_level_init+0x18c>)
 8006b7a:	f7fc fe7a 	bl	8003872 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006b7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b82:	461a      	mov	r2, r3
 8006b84:	211d      	movs	r1, #29
 8006b86:	4803      	ldr	r0, [pc, #12]	; (8006b94 <low_level_init+0x18c>)
 8006b88:	f7fc fe0b 	bl	80037a2 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006b8c:	bf00      	nop
 8006b8e:	3740      	adds	r7, #64	; 0x40
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bdb0      	pop	{r4, r5, r7, pc}
 8006b94:	20008720 	.word	0x20008720
 8006b98:	40028000 	.word	0x40028000
 8006b9c:	20008768 	.word	0x20008768
 8006ba0:	20006e50 	.word	0x20006e50
 8006ba4:	20006ed0 	.word	0x20006ed0
 8006ba8:	200086a0 	.word	0x200086a0
 8006bac:	2000038c 	.word	0x2000038c
 8006bb0:	080185f8 	.word	0x080185f8

08006bb4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08a      	sub	sp, #40	; 0x28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8006bbe:	4b4b      	ldr	r3, [pc, #300]	; (8006cec <low_level_output+0x138>)
 8006bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006bd6:	4b45      	ldr	r3, [pc, #276]	; (8006cec <low_level_output+0x138>)
 8006bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bda:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	623b      	str	r3, [r7, #32]
 8006be4:	e05a      	b.n	8006c9c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	da03      	bge.n	8006bf6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8006bee:	23f8      	movs	r3, #248	; 0xf8
 8006bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8006bf4:	e05c      	b.n	8006cb0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	895b      	ldrh	r3, [r3, #10]
 8006bfa:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006c00:	e02f      	b.n	8006c62 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8006c02:	69fa      	ldr	r2, [r7, #28]
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	18d0      	adds	r0, r2, r3
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	18d1      	adds	r1, r2, r3
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8006c16:	3304      	adds	r3, #4
 8006c18:	461a      	mov	r2, r3
 8006c1a:	f010 fd03 	bl	8017624 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	da03      	bge.n	8006c34 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8006c2c:	23f8      	movs	r3, #248	; 0xf8
 8006c2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8006c32:	e03d      	b.n	8006cb0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006c44:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006c50:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006c5c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	4413      	add	r3, r2
 8006c68:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d8c8      	bhi.n	8006c02 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006c70:	69fa      	ldr	r2, [r7, #28]
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	18d0      	adds	r0, r2, r3
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	685a      	ldr	r2, [r3, #4]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	4619      	mov	r1, r3
 8006c82:	f010 fccf 	bl	8017624 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4413      	add	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	623b      	str	r3, [r7, #32]
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1a1      	bne.n	8006be6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8006ca2:	6979      	ldr	r1, [r7, #20]
 8006ca4:	4811      	ldr	r0, [pc, #68]	; (8006cec <low_level_output+0x138>)
 8006ca6:	f7fc fb8f 	bl	80033c8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006cb0:	4b0e      	ldr	r3, [pc, #56]	; (8006cec <low_level_output+0x138>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cb8:	3314      	adds	r3, #20
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0320 	and.w	r3, r3, #32
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00d      	beq.n	8006ce0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006cc4:	4b09      	ldr	r3, [pc, #36]	; (8006cec <low_level_output+0x138>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ccc:	3314      	adds	r3, #20
 8006cce:	2220      	movs	r2, #32
 8006cd0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8006cd2:	4b06      	ldr	r3, [pc, #24]	; (8006cec <low_level_output+0x138>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cda:	3304      	adds	r3, #4
 8006cdc:	2200      	movs	r2, #0
 8006cde:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8006ce0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3728      	adds	r7, #40	; 0x28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	20008720 	.word	0x20008720

08006cf0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08c      	sub	sp, #48	; 0x30
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8006d00:	2300      	movs	r3, #0
 8006d02:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8006d04:	2300      	movs	r3, #0
 8006d06:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8006d10:	2300      	movs	r3, #0
 8006d12:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8006d14:	484f      	ldr	r0, [pc, #316]	; (8006e54 <low_level_input+0x164>)
 8006d16:	f7fc fc41 	bl	800359c <HAL_ETH_GetReceivedFrame_IT>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d001      	beq.n	8006d24 <low_level_input+0x34>

    return NULL;
 8006d20:	2300      	movs	r3, #0
 8006d22:	e092      	b.n	8006e4a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8006d24:	4b4b      	ldr	r3, [pc, #300]	; (8006e54 <low_level_input+0x164>)
 8006d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d28:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8006d2a:	4b4a      	ldr	r3, [pc, #296]	; (8006e54 <low_level_input+0x164>)
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8006d30:	89fb      	ldrh	r3, [r7, #14]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d007      	beq.n	8006d46 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8006d36:	89fb      	ldrh	r3, [r7, #14]
 8006d38:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	2000      	movs	r0, #0
 8006d40:	f006 faf4 	bl	800d32c <pbuf_alloc>
 8006d44:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8006d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d04b      	beq.n	8006de4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006d4c:	4b41      	ldr	r3, [pc, #260]	; (8006e54 <low_level_input+0x164>)
 8006d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d50:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8006d52:	2300      	movs	r3, #0
 8006d54:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d5a:	e040      	b.n	8006dde <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8006d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5e:	895b      	ldrh	r3, [r3, #10]
 8006d60:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8006d62:	2300      	movs	r3, #0
 8006d64:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006d66:	e021      	b.n	8006dac <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	18d0      	adds	r0, r2, r3
 8006d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	18d1      	adds	r1, r2, r3
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	461a      	mov	r2, r3
 8006d80:	f010 fc50 	bl	8017624 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006d90:	69fa      	ldr	r2, [r7, #28]
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	4413      	add	r3, r2
 8006d96:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006d9a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006da6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006da8:	2300      	movs	r3, #0
 8006daa:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	4413      	add	r3, r2
 8006db2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d8d6      	bhi.n	8006d68 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8006dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	18d0      	adds	r0, r2, r3
 8006dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	f010 fc2a 	bl	8017624 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006dd0:	69fa      	ldr	r2, [r7, #28]
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1bb      	bne.n	8006d5c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006de4:	4b1b      	ldr	r3, [pc, #108]	; (8006e54 <low_level_input+0x164>)
 8006de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006dea:	2300      	movs	r3, #0
 8006dec:	613b      	str	r3, [r7, #16]
 8006dee:	e00b      	b.n	8006e08 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	3301      	adds	r3, #1
 8006e06:	613b      	str	r3, [r7, #16]
 8006e08:	4b12      	ldr	r3, [pc, #72]	; (8006e54 <low_level_input+0x164>)
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d3ee      	bcc.n	8006df0 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8006e12:	4b10      	ldr	r3, [pc, #64]	; (8006e54 <low_level_input+0x164>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8006e18:	4b0e      	ldr	r3, [pc, #56]	; (8006e54 <low_level_input+0x164>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e20:	3314      	adds	r3, #20
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00d      	beq.n	8006e48 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8006e2c:	4b09      	ldr	r3, [pc, #36]	; (8006e54 <low_level_input+0x164>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e34:	3314      	adds	r3, #20
 8006e36:	2280      	movs	r2, #128	; 0x80
 8006e38:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8006e3a:	4b06      	ldr	r3, [pc, #24]	; (8006e54 <low_level_input+0x164>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e42:	3308      	adds	r3, #8
 8006e44:	2200      	movs	r2, #0
 8006e46:	601a      	str	r2, [r3, #0]
  }
  return p;
 8006e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3730      	adds	r7, #48	; 0x30
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	20008720 	.word	0x20008720

08006e58 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006e64:	4b12      	ldr	r3, [pc, #72]	; (8006eb0 <ethernetif_input+0x58>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f04f 31ff 	mov.w	r1, #4294967295
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 fa4f 	bl	8007310 <osSemaphoreWait>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1f5      	bne.n	8006e64 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8006e78:	480e      	ldr	r0, [pc, #56]	; (8006eb4 <ethernetif_input+0x5c>)
 8006e7a:	f010 fa43 	bl	8017304 <sys_mutex_lock>
        p = low_level_input( netif );
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f7ff ff36 	bl	8006cf0 <low_level_input>
 8006e84:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	68f9      	ldr	r1, [r7, #12]
 8006e92:	68b8      	ldr	r0, [r7, #8]
 8006e94:	4798      	blx	r3
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8006e9c:	68b8      	ldr	r0, [r7, #8]
 8006e9e:	f006 fd29 	bl	800d8f4 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8006ea2:	4804      	ldr	r0, [pc, #16]	; (8006eb4 <ethernetif_input+0x5c>)
 8006ea4:	f010 fa3d 	bl	8017322 <sys_mutex_unlock>
      } while(p!=NULL);
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1e4      	bne.n	8006e78 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006eae:	e7d9      	b.n	8006e64 <ethernetif_input+0xc>
 8006eb0:	2000038c 	.word	0x2000038c
 8006eb4:	20009f78 	.word	0x20009f78

08006eb8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d106      	bne.n	8006ed4 <ethernetif_init+0x1c>
 8006ec6:	4b0e      	ldr	r3, [pc, #56]	; (8006f00 <ethernetif_init+0x48>)
 8006ec8:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8006ecc:	490d      	ldr	r1, [pc, #52]	; (8006f04 <ethernetif_init+0x4c>)
 8006ece:	480e      	ldr	r0, [pc, #56]	; (8006f08 <ethernetif_init+0x50>)
 8006ed0:	f010 fc68 	bl	80177a4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2273      	movs	r2, #115	; 0x73
 8006ed8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2274      	movs	r2, #116	; 0x74
 8006ee0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a09      	ldr	r2, [pc, #36]	; (8006f0c <ethernetif_init+0x54>)
 8006ee8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a08      	ldr	r2, [pc, #32]	; (8006f10 <ethernetif_init+0x58>)
 8006eee:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f7ff fd89 	bl	8006a08 <low_level_init>

  return ERR_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	08018614 	.word	0x08018614
 8006f04:	08018630 	.word	0x08018630
 8006f08:	08018640 	.word	0x08018640
 8006f0c:	08015319 	.word	0x08015319
 8006f10:	08006bb5 	.word	0x08006bb5

08006f14 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006f18:	f7fb fad0 	bl	80024bc <HAL_GetTick>
 8006f1c:	4603      	mov	r3, r0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	bd80      	pop	{r7, pc}
	...

08006f24 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006f3a:	089b      	lsrs	r3, r3, #2
 8006f3c:	f003 0301 	and.w	r3, r3, #1
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d05d      	beq.n	8007002 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8006f46:	4b34      	ldr	r3, [pc, #208]	; (8007018 <ethernetif_update_config+0xf4>)
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d03f      	beq.n	8006fce <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8006f4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f52:	2100      	movs	r1, #0
 8006f54:	4830      	ldr	r0, [pc, #192]	; (8007018 <ethernetif_update_config+0xf4>)
 8006f56:	f7fc fc8c 	bl	8003872 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8006f5a:	f7fb faaf 	bl	80024bc <HAL_GetTick>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006f62:	f107 0308 	add.w	r3, r7, #8
 8006f66:	461a      	mov	r2, r3
 8006f68:	2101      	movs	r1, #1
 8006f6a:	482b      	ldr	r0, [pc, #172]	; (8007018 <ethernetif_update_config+0xf4>)
 8006f6c:	f7fc fc19 	bl	80037a2 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8006f70:	f7fb faa4 	bl	80024bc <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f7e:	d828      	bhi.n	8006fd2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	f003 0320 	and.w	r3, r3, #32
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d0eb      	beq.n	8006f62 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8006f8a:	f107 0308 	add.w	r3, r7, #8
 8006f8e:	461a      	mov	r2, r3
 8006f90:	2110      	movs	r1, #16
 8006f92:	4821      	ldr	r0, [pc, #132]	; (8007018 <ethernetif_update_config+0xf4>)
 8006f94:	f7fc fc05 	bl	80037a2 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f003 0304 	and.w	r3, r3, #4
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d004      	beq.n	8006fac <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006fa2:	4b1d      	ldr	r3, [pc, #116]	; (8007018 <ethernetif_update_config+0xf4>)
 8006fa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fa8:	60da      	str	r2, [r3, #12]
 8006faa:	e002      	b.n	8006fb2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006fac:	4b1a      	ldr	r3, [pc, #104]	; (8007018 <ethernetif_update_config+0xf4>)
 8006fae:	2200      	movs	r2, #0
 8006fb0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	f003 0302 	and.w	r3, r3, #2
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006fbc:	4b16      	ldr	r3, [pc, #88]	; (8007018 <ethernetif_update_config+0xf4>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	609a      	str	r2, [r3, #8]
 8006fc2:	e016      	b.n	8006ff2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8006fc4:	4b14      	ldr	r3, [pc, #80]	; (8007018 <ethernetif_update_config+0xf4>)
 8006fc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006fca:	609a      	str	r2, [r3, #8]
 8006fcc:	e011      	b.n	8006ff2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8006fce:	bf00      	nop
 8006fd0:	e000      	b.n	8006fd4 <ethernetif_update_config+0xb0>
          goto error;
 8006fd2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006fd4:	4b10      	ldr	r3, [pc, #64]	; (8007018 <ethernetif_update_config+0xf4>)
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	08db      	lsrs	r3, r3, #3
 8006fda:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006fdc:	4b0e      	ldr	r3, [pc, #56]	; (8007018 <ethernetif_update_config+0xf4>)
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	085b      	lsrs	r3, r3, #1
 8006fe2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	461a      	mov	r2, r3
 8006fea:	2100      	movs	r1, #0
 8006fec:	480a      	ldr	r0, [pc, #40]	; (8007018 <ethernetif_update_config+0xf4>)
 8006fee:	f7fc fc40 	bl	8003872 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	4808      	ldr	r0, [pc, #32]	; (8007018 <ethernetif_update_config+0xf4>)
 8006ff6:	f7fc fd01 	bl	80039fc <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8006ffa:	4807      	ldr	r0, [pc, #28]	; (8007018 <ethernetif_update_config+0xf4>)
 8006ffc:	f7fc fc9f 	bl	800393e <HAL_ETH_Start>
 8007000:	e002      	b.n	8007008 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8007002:	4805      	ldr	r0, [pc, #20]	; (8007018 <ethernetif_update_config+0xf4>)
 8007004:	f7fc fcca 	bl	800399c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f807 	bl	800701c <ethernetif_notify_conn_changed>
}
 800700e:	bf00      	nop
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	20008720 	.word	0x20008720

0800701c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	4603      	mov	r3, r0
 8007038:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800703a:	2300      	movs	r3, #0
 800703c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800703e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007042:	2b84      	cmp	r3, #132	; 0x84
 8007044:	d005      	beq.n	8007052 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007046:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	4413      	add	r3, r2
 800704e:	3303      	adds	r3, #3
 8007050:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007052:	68fb      	ldr	r3, [r7, #12]
}
 8007054:	4618      	mov	r0, r3
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007066:	f3ef 8305 	mrs	r3, IPSR
 800706a:	607b      	str	r3, [r7, #4]
  return(result);
 800706c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800706e:	2b00      	cmp	r3, #0
 8007070:	bf14      	ite	ne
 8007072:	2301      	movne	r3, #1
 8007074:	2300      	moveq	r3, #0
 8007076:	b2db      	uxtb	r3, r3
}
 8007078:	4618      	mov	r0, r3
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007088:	f001 fdf0 	bl	8008c6c <vTaskStartScheduler>
  
  return osOK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	bd80      	pop	{r7, pc}

08007092 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007096:	f7ff ffe3 	bl	8007060 <inHandlerMode>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d003      	beq.n	80070a8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80070a0:	f001 ff08 	bl	8008eb4 <xTaskGetTickCountFromISR>
 80070a4:	4603      	mov	r3, r0
 80070a6:	e002      	b.n	80070ae <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80070a8:	f001 fef4 	bl	8008e94 <xTaskGetTickCount>
 80070ac:	4603      	mov	r3, r0
  }
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80070b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070b4:	b089      	sub	sp, #36	; 0x24
 80070b6:	af04      	add	r7, sp, #16
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	695b      	ldr	r3, [r3, #20]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d020      	beq.n	8007106 <osThreadCreate+0x54>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d01c      	beq.n	8007106 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685c      	ldr	r4, [r3, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681d      	ldr	r5, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	691e      	ldr	r6, [r3, #16]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80070de:	4618      	mov	r0, r3
 80070e0:	f7ff ffa6 	bl	8007030 <makeFreeRtosPriority>
 80070e4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070ee:	9202      	str	r2, [sp, #8]
 80070f0:	9301      	str	r3, [sp, #4]
 80070f2:	9100      	str	r1, [sp, #0]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	4632      	mov	r2, r6
 80070f8:	4629      	mov	r1, r5
 80070fa:	4620      	mov	r0, r4
 80070fc:	f001 fbd8 	bl	80088b0 <xTaskCreateStatic>
 8007100:	4603      	mov	r3, r0
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	e01c      	b.n	8007140 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685c      	ldr	r4, [r3, #4]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007112:	b29e      	uxth	r6, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800711a:	4618      	mov	r0, r3
 800711c:	f7ff ff88 	bl	8007030 <makeFreeRtosPriority>
 8007120:	4602      	mov	r2, r0
 8007122:	f107 030c 	add.w	r3, r7, #12
 8007126:	9301      	str	r3, [sp, #4]
 8007128:	9200      	str	r2, [sp, #0]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	4632      	mov	r2, r6
 800712e:	4629      	mov	r1, r5
 8007130:	4620      	mov	r0, r4
 8007132:	f001 fc1a 	bl	800896a <xTaskCreate>
 8007136:	4603      	mov	r3, r0
 8007138:	2b01      	cmp	r3, #1
 800713a:	d001      	beq.n	8007140 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800713c:	2300      	movs	r3, #0
 800713e:	e000      	b.n	8007142 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007140:	68fb      	ldr	r3, [r7, #12]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800714a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b084      	sub	sp, #16
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <osDelay+0x16>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	e000      	b.n	8007162 <osDelay+0x18>
 8007160:	2301      	movs	r3, #1
 8007162:	4618      	mov	r0, r3
 8007164:	f001 fd4e 	bl	8008c04 <vTaskDelay>
  
  return osOK;
 8007168:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b082      	sub	sp, #8
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d007      	beq.n	8007192 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	4619      	mov	r1, r3
 8007188:	2001      	movs	r0, #1
 800718a:	f000 fd32 	bl	8007bf2 <xQueueCreateMutexStatic>
 800718e:	4603      	mov	r3, r0
 8007190:	e003      	b.n	800719a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8007192:	2001      	movs	r0, #1
 8007194:	f000 fd15 	bl	8007bc2 <xQueueCreateMutex>
 8007198:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
	...

080071a4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80071ae:	2300      	movs	r3, #0
 80071b0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <osMutexWait+0x18>
    return osErrorParameter;
 80071b8:	2380      	movs	r3, #128	; 0x80
 80071ba:	e03a      	b.n	8007232 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80071bc:	2300      	movs	r3, #0
 80071be:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c6:	d103      	bne.n	80071d0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80071c8:	f04f 33ff 	mov.w	r3, #4294967295
 80071cc:	60fb      	str	r3, [r7, #12]
 80071ce:	e009      	b.n	80071e4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d006      	beq.n	80071e4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d101      	bne.n	80071e4 <osMutexWait+0x40>
      ticks = 1;
 80071e0:	2301      	movs	r3, #1
 80071e2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80071e4:	f7ff ff3c 	bl	8007060 <inHandlerMode>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d017      	beq.n	800721e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80071ee:	f107 0308 	add.w	r3, r7, #8
 80071f2:	461a      	mov	r2, r3
 80071f4:	2100      	movs	r1, #0
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f001 f928 	bl	800844c <xQueueReceiveFromISR>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d001      	beq.n	8007206 <osMutexWait+0x62>
      return osErrorOS;
 8007202:	23ff      	movs	r3, #255	; 0xff
 8007204:	e015      	b.n	8007232 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d011      	beq.n	8007230 <osMutexWait+0x8c>
 800720c:	4b0b      	ldr	r3, [pc, #44]	; (800723c <osMutexWait+0x98>)
 800720e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	e008      	b.n	8007230 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800721e:	68f9      	ldr	r1, [r7, #12]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f001 f807 	bl	8008234 <xQueueSemaphoreTake>
 8007226:	4603      	mov	r3, r0
 8007228:	2b01      	cmp	r3, #1
 800722a:	d001      	beq.n	8007230 <osMutexWait+0x8c>
    return osErrorOS;
 800722c:	23ff      	movs	r3, #255	; 0xff
 800722e:	e000      	b.n	8007232 <osMutexWait+0x8e>
  }
  
  return osOK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	e000ed04 	.word	0xe000ed04

08007240 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007248:	2300      	movs	r3, #0
 800724a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800724c:	2300      	movs	r3, #0
 800724e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007250:	f7ff ff06 	bl	8007060 <inHandlerMode>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d016      	beq.n	8007288 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800725a:	f107 0308 	add.w	r3, r7, #8
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fe7a 	bl	8007f5a <xQueueGiveFromISR>
 8007266:	4603      	mov	r3, r0
 8007268:	2b01      	cmp	r3, #1
 800726a:	d001      	beq.n	8007270 <osMutexRelease+0x30>
      return osErrorOS;
 800726c:	23ff      	movs	r3, #255	; 0xff
 800726e:	e017      	b.n	80072a0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d013      	beq.n	800729e <osMutexRelease+0x5e>
 8007276:	4b0c      	ldr	r3, [pc, #48]	; (80072a8 <osMutexRelease+0x68>)
 8007278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	e00a      	b.n	800729e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007288:	2300      	movs	r3, #0
 800728a:	2200      	movs	r2, #0
 800728c:	2100      	movs	r1, #0
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fcca 	bl	8007c28 <xQueueGenericSend>
 8007294:	4603      	mov	r3, r0
 8007296:	2b01      	cmp	r3, #1
 8007298:	d001      	beq.n	800729e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800729a:	23ff      	movs	r3, #255	; 0xff
 800729c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800729e:	68fb      	ldr	r3, [r7, #12]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	e000ed04 	.word	0xe000ed04

080072ac <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af02      	add	r7, sp, #8
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00f      	beq.n	80072de <osSemaphoreCreate+0x32>
    if (count == 1) {
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d10a      	bne.n	80072da <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	2203      	movs	r2, #3
 80072ca:	9200      	str	r2, [sp, #0]
 80072cc:	2200      	movs	r2, #0
 80072ce:	2100      	movs	r1, #0
 80072d0:	2001      	movs	r0, #1
 80072d2:	f000 fb8b 	bl	80079ec <xQueueGenericCreateStatic>
 80072d6:	4603      	mov	r3, r0
 80072d8:	e016      	b.n	8007308 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80072da:	2300      	movs	r3, #0
 80072dc:	e014      	b.n	8007308 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d110      	bne.n	8007306 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80072e4:	2203      	movs	r2, #3
 80072e6:	2100      	movs	r1, #0
 80072e8:	2001      	movs	r0, #1
 80072ea:	f000 fbf7 	bl	8007adc <xQueueGenericCreate>
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d005      	beq.n	8007302 <osSemaphoreCreate+0x56>
 80072f6:	2300      	movs	r3, #0
 80072f8:	2200      	movs	r2, #0
 80072fa:	2100      	movs	r1, #0
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 fc93 	bl	8007c28 <xQueueGenericSend>
      return sema;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	e000      	b.n	8007308 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007306:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800731a:	2300      	movs	r3, #0
 800731c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007324:	2380      	movs	r3, #128	; 0x80
 8007326:	e03a      	b.n	800739e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007328:	2300      	movs	r3, #0
 800732a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007332:	d103      	bne.n	800733c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007334:	f04f 33ff 	mov.w	r3, #4294967295
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	e009      	b.n	8007350 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d006      	beq.n	8007350 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d101      	bne.n	8007350 <osSemaphoreWait+0x40>
      ticks = 1;
 800734c:	2301      	movs	r3, #1
 800734e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007350:	f7ff fe86 	bl	8007060 <inHandlerMode>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d017      	beq.n	800738a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800735a:	f107 0308 	add.w	r3, r7, #8
 800735e:	461a      	mov	r2, r3
 8007360:	2100      	movs	r1, #0
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f001 f872 	bl	800844c <xQueueReceiveFromISR>
 8007368:	4603      	mov	r3, r0
 800736a:	2b01      	cmp	r3, #1
 800736c:	d001      	beq.n	8007372 <osSemaphoreWait+0x62>
      return osErrorOS;
 800736e:	23ff      	movs	r3, #255	; 0xff
 8007370:	e015      	b.n	800739e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d011      	beq.n	800739c <osSemaphoreWait+0x8c>
 8007378:	4b0b      	ldr	r3, [pc, #44]	; (80073a8 <osSemaphoreWait+0x98>)
 800737a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800737e:	601a      	str	r2, [r3, #0]
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	e008      	b.n	800739c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800738a:	68f9      	ldr	r1, [r7, #12]
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 ff51 	bl	8008234 <xQueueSemaphoreTake>
 8007392:	4603      	mov	r3, r0
 8007394:	2b01      	cmp	r3, #1
 8007396:	d001      	beq.n	800739c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007398:	23ff      	movs	r3, #255	; 0xff
 800739a:	e000      	b.n	800739e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	e000ed04 	.word	0xe000ed04

080073ac <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80073b4:	2300      	movs	r3, #0
 80073b6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80073b8:	2300      	movs	r3, #0
 80073ba:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80073bc:	f7ff fe50 	bl	8007060 <inHandlerMode>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d016      	beq.n	80073f4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80073c6:	f107 0308 	add.w	r3, r7, #8
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fdc4 	bl	8007f5a <xQueueGiveFromISR>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d001      	beq.n	80073dc <osSemaphoreRelease+0x30>
      return osErrorOS;
 80073d8:	23ff      	movs	r3, #255	; 0xff
 80073da:	e017      	b.n	800740c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d013      	beq.n	800740a <osSemaphoreRelease+0x5e>
 80073e2:	4b0c      	ldr	r3, [pc, #48]	; (8007414 <osSemaphoreRelease+0x68>)
 80073e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	e00a      	b.n	800740a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80073f4:	2300      	movs	r3, #0
 80073f6:	2200      	movs	r2, #0
 80073f8:	2100      	movs	r1, #0
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fc14 	bl	8007c28 <xQueueGenericSend>
 8007400:	4603      	mov	r3, r0
 8007402:	2b01      	cmp	r3, #1
 8007404:	d001      	beq.n	800740a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007406:	23ff      	movs	r3, #255	; 0xff
 8007408:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800740a:	68fb      	ldr	r3, [r7, #12]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	e000ed04 	.word	0xe000ed04

08007418 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007420:	f7ff fe1e 	bl	8007060 <inHandlerMode>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800742a:	2382      	movs	r3, #130	; 0x82
 800742c:	e003      	b.n	8007436 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f001 f8c8 	bl	80085c4 <vQueueDelete>

  return osOK; 
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b086      	sub	sp, #24
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	3303      	adds	r3, #3
 800744c:	f023 0303 	bic.w	r3, r3, #3
 8007450:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8007452:	2014      	movs	r0, #20
 8007454:	f002 fcb0 	bl	8009db8 <pvPortMalloc>
 8007458:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d046      	beq.n	80074ee <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2200      	movs	r2, #0
 8007472:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4618      	mov	r0, r3
 800747a:	f002 fc9d 	bl	8009db8 <pvPortMalloc>
 800747e:	4602      	mov	r2, r0
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d02b      	beq.n	80074e4 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	fb02 f303 	mul.w	r3, r2, r3
 8007496:	4618      	mov	r0, r3
 8007498:	f002 fc8e 	bl	8009db8 <pvPortMalloc>
 800749c:	4602      	mov	r2, r0
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d011      	beq.n	80074ce <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80074aa:	2300      	movs	r3, #0
 80074ac:	613b      	str	r3, [r7, #16]
 80074ae:	e008      	b.n	80074c2 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	4413      	add	r3, r2
 80074b8:	2200      	movs	r2, #0
 80074ba:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	3301      	adds	r3, #1
 80074c0:	613b      	str	r3, [r7, #16]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	693a      	ldr	r2, [r7, #16]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d3f1      	bcc.n	80074b0 <osPoolCreate+0x72>
 80074cc:	e00f      	b.n	80074ee <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f002 fd3c 	bl	8009f50 <vPortFree>
        vPortFree(thePool);
 80074d8:	6978      	ldr	r0, [r7, #20]
 80074da:	f002 fd39 	bl	8009f50 <vPortFree>
        thePool = NULL;
 80074de:	2300      	movs	r3, #0
 80074e0:	617b      	str	r3, [r7, #20]
 80074e2:	e004      	b.n	80074ee <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80074e4:	6978      	ldr	r0, [r7, #20]
 80074e6:	f002 fd33 	bl	8009f50 <vPortFree>
      thePool = NULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80074ee:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3718      	adds	r7, #24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80074f8:	b590      	push	{r4, r7, lr}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af02      	add	r7, sp, #8
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d011      	beq.n	800752e <osMessageCreate+0x36>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00d      	beq.n	800752e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6818      	ldr	r0, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6859      	ldr	r1, [r3, #4]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689a      	ldr	r2, [r3, #8]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	2400      	movs	r4, #0
 8007524:	9400      	str	r4, [sp, #0]
 8007526:	f000 fa61 	bl	80079ec <xQueueGenericCreateStatic>
 800752a:	4603      	mov	r3, r0
 800752c:	e008      	b.n	8007540 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6818      	ldr	r0, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	4619      	mov	r1, r3
 800753a:	f000 facf 	bl	8007adc <xQueueGenericCreate>
 800753e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007540:	4618      	mov	r0, r3
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	bd90      	pop	{r4, r7, pc}

08007548 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007554:	2300      	movs	r3, #0
 8007556:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <osMessagePut+0x1e>
    ticks = 1;
 8007562:	2301      	movs	r3, #1
 8007564:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007566:	f7ff fd7b 	bl	8007060 <inHandlerMode>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d018      	beq.n	80075a2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007570:	f107 0210 	add.w	r2, r7, #16
 8007574:	f107 0108 	add.w	r1, r7, #8
 8007578:	2300      	movs	r3, #0
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f000 fc52 	bl	8007e24 <xQueueGenericSendFromISR>
 8007580:	4603      	mov	r3, r0
 8007582:	2b01      	cmp	r3, #1
 8007584:	d001      	beq.n	800758a <osMessagePut+0x42>
      return osErrorOS;
 8007586:	23ff      	movs	r3, #255	; 0xff
 8007588:	e018      	b.n	80075bc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d014      	beq.n	80075ba <osMessagePut+0x72>
 8007590:	4b0c      	ldr	r3, [pc, #48]	; (80075c4 <osMessagePut+0x7c>)
 8007592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	e00b      	b.n	80075ba <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80075a2:	f107 0108 	add.w	r1, r7, #8
 80075a6:	2300      	movs	r3, #0
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f000 fb3c 	bl	8007c28 <xQueueGenericSend>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d001      	beq.n	80075ba <osMessagePut+0x72>
      return osErrorOS;
 80075b6:	23ff      	movs	r3, #255	; 0xff
 80075b8:	e000      	b.n	80075bc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3718      	adds	r7, #24
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	e000ed04 	.word	0xe000ed04

080075c8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80075c8:	b590      	push	{r4, r7, lr}
 80075ca:	b08b      	sub	sp, #44	; 0x2c
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80075d8:	2300      	movs	r3, #0
 80075da:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10a      	bne.n	80075f8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80075e2:	2380      	movs	r3, #128	; 0x80
 80075e4:	617b      	str	r3, [r7, #20]
    return event;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	461c      	mov	r4, r3
 80075ea:	f107 0314 	add.w	r3, r7, #20
 80075ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80075f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80075f6:	e054      	b.n	80076a2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80075f8:	2300      	movs	r3, #0
 80075fa:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80075fc:	2300      	movs	r3, #0
 80075fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007606:	d103      	bne.n	8007610 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007608:	f04f 33ff 	mov.w	r3, #4294967295
 800760c:	627b      	str	r3, [r7, #36]	; 0x24
 800760e:	e009      	b.n	8007624 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d006      	beq.n	8007624 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <osMessageGet+0x5c>
      ticks = 1;
 8007620:	2301      	movs	r3, #1
 8007622:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007624:	f7ff fd1c 	bl	8007060 <inHandlerMode>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d01c      	beq.n	8007668 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800762e:	f107 0220 	add.w	r2, r7, #32
 8007632:	f107 0314 	add.w	r3, r7, #20
 8007636:	3304      	adds	r3, #4
 8007638:	4619      	mov	r1, r3
 800763a:	68b8      	ldr	r0, [r7, #8]
 800763c:	f000 ff06 	bl	800844c <xQueueReceiveFromISR>
 8007640:	4603      	mov	r3, r0
 8007642:	2b01      	cmp	r3, #1
 8007644:	d102      	bne.n	800764c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007646:	2310      	movs	r3, #16
 8007648:	617b      	str	r3, [r7, #20]
 800764a:	e001      	b.n	8007650 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800764c:	2300      	movs	r3, #0
 800764e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007650:	6a3b      	ldr	r3, [r7, #32]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d01d      	beq.n	8007692 <osMessageGet+0xca>
 8007656:	4b15      	ldr	r3, [pc, #84]	; (80076ac <osMessageGet+0xe4>)
 8007658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	e014      	b.n	8007692 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007668:	f107 0314 	add.w	r3, r7, #20
 800766c:	3304      	adds	r3, #4
 800766e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007670:	4619      	mov	r1, r3
 8007672:	68b8      	ldr	r0, [r7, #8]
 8007674:	f000 fcfe 	bl	8008074 <xQueueReceive>
 8007678:	4603      	mov	r3, r0
 800767a:	2b01      	cmp	r3, #1
 800767c:	d102      	bne.n	8007684 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800767e:	2310      	movs	r3, #16
 8007680:	617b      	str	r3, [r7, #20]
 8007682:	e006      	b.n	8007692 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <osMessageGet+0xc6>
 800768a:	2300      	movs	r3, #0
 800768c:	e000      	b.n	8007690 <osMessageGet+0xc8>
 800768e:	2340      	movs	r3, #64	; 0x40
 8007690:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	461c      	mov	r4, r3
 8007696:	f107 0314 	add.w	r3, r7, #20
 800769a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800769e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	372c      	adds	r7, #44	; 0x2c
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd90      	pop	{r4, r7, pc}
 80076aa:	bf00      	nop
 80076ac:	e000ed04 	.word	0xe000ed04

080076b0 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 80076b0:	b590      	push	{r4, r7, lr}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	613b      	str	r3, [r7, #16]
 80076c6:	2300      	movs	r3, #0
 80076c8:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	689c      	ldr	r4, [r3, #8]
 80076ce:	200c      	movs	r0, #12
 80076d0:	f002 fb72 	bl	8009db8 <pvPortMalloc>
 80076d4:	4603      	mov	r3, r0
 80076d6:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <osMailCreate+0x36>
    return NULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	e038      	b.n	8007758 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6818      	ldr	r0, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	681c      	ldr	r4, [r3, #0]
 80076fa:	2200      	movs	r2, #0
 80076fc:	2104      	movs	r1, #4
 80076fe:	f000 f9ed 	bl	8007adc <xQueueGenericCreate>
 8007702:	4603      	mov	r3, r0
 8007704:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d107      	bne.n	8007722 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4618      	mov	r0, r3
 800771a:	f002 fc19 	bl	8009f50 <vPortFree>
    return NULL;
 800771e:	2300      	movs	r3, #0
 8007720:	e01a      	b.n	8007758 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	681c      	ldr	r4, [r3, #0]
 8007728:	f107 030c 	add.w	r3, r7, #12
 800772c:	4618      	mov	r0, r3
 800772e:	f7ff fe86 	bl	800743e <osPoolCreate>
 8007732:	4603      	mov	r3, r0
 8007734:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d107      	bne.n	8007752 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4618      	mov	r0, r3
 800774a:	f002 fc01 	bl	8009f50 <vPortFree>
    return NULL;
 800774e:	2300      	movs	r3, #0
 8007750:	e002      	b.n	8007758 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8007758:	4618      	mov	r0, r3
 800775a:	371c      	adds	r7, #28
 800775c:	46bd      	mov	sp, r7
 800775e:	bd90      	pop	{r4, r7, pc}

08007760 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007768:	f7ff fc7a 	bl	8007060 <inHandlerMode>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d004      	beq.n	800777c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 ff08 	bl	8008588 <uxQueueMessagesWaitingFromISR>
 8007778:	4603      	mov	r3, r0
 800777a:	e003      	b.n	8007784 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fee5 	bl	800854c <uxQueueMessagesWaiting>
 8007782:	4603      	mov	r3, r0
  }
}
 8007784:	4618      	mov	r0, r3
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007794:	f7ff fc64 	bl	8007060 <inHandlerMode>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <osMessageDelete+0x16>
    return osErrorISR;
 800779e:	2382      	movs	r3, #130	; 0x82
 80077a0:	e003      	b.n	80077aa <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 ff0e 	bl	80085c4 <vQueueDelete>

  return osOK; 
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077b2:	b480      	push	{r7}
 80077b4:	b083      	sub	sp, #12
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f103 0208 	add.w	r2, r3, #8
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f04f 32ff 	mov.w	r2, #4294967295
 80077ca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f103 0208 	add.w	r2, r3, #8
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f103 0208 	add.w	r2, r3, #8
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077e6:	bf00      	nop
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077f2:	b480      	push	{r7}
 80077f4:	b083      	sub	sp, #12
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	689a      	ldr	r2, [r3, #8]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	601a      	str	r2, [r3, #0]
}
 8007848:	bf00      	nop
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786a:	d103      	bne.n	8007874 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	60fb      	str	r3, [r7, #12]
 8007872:	e00c      	b.n	800788e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3308      	adds	r3, #8
 8007878:	60fb      	str	r3, [r7, #12]
 800787a:	e002      	b.n	8007882 <vListInsert+0x2e>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	429a      	cmp	r2, r3
 800788c:	d2f6      	bcs.n	800787c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	685a      	ldr	r2, [r3, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	1c5a      	adds	r2, r3, #1
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	601a      	str	r2, [r3, #0]
}
 80078ba:	bf00      	nop
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078c6:	b480      	push	{r7}
 80078c8:	b085      	sub	sp, #20
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	6892      	ldr	r2, [r2, #8]
 80078dc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	6852      	ldr	r2, [r2, #4]
 80078e6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d103      	bne.n	80078fa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	689a      	ldr	r2, [r3, #8]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	1e5a      	subs	r2, r3, #1
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
	...

0800791c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10a      	bne.n	8007946 <xQueueGenericReset+0x2a>
	__asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	60bb      	str	r3, [r7, #8]
}
 8007942:	bf00      	nop
 8007944:	e7fe      	b.n	8007944 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007946:	f002 f915 	bl	8009b74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007952:	68f9      	ldr	r1, [r7, #12]
 8007954:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007956:	fb01 f303 	mul.w	r3, r1, r3
 800795a:	441a      	add	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007976:	3b01      	subs	r3, #1
 8007978:	68f9      	ldr	r1, [r7, #12]
 800797a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800797c:	fb01 f303 	mul.w	r3, r1, r3
 8007980:	441a      	add	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	22ff      	movs	r2, #255	; 0xff
 800798a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	22ff      	movs	r2, #255	; 0xff
 8007992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d114      	bne.n	80079c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d01a      	beq.n	80079da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	3310      	adds	r3, #16
 80079a8:	4618      	mov	r0, r3
 80079aa:	f001 fbd3 	bl	8009154 <xTaskRemoveFromEventList>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d012      	beq.n	80079da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079b4:	4b0c      	ldr	r3, [pc, #48]	; (80079e8 <xQueueGenericReset+0xcc>)
 80079b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	e009      	b.n	80079da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	3310      	adds	r3, #16
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7ff fef1 	bl	80077b2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	3324      	adds	r3, #36	; 0x24
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7ff feec 	bl	80077b2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80079da:	f002 f8fb 	bl	8009bd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80079de:	2301      	movs	r3, #1
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	e000ed04 	.word	0xe000ed04

080079ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08e      	sub	sp, #56	; 0x38
 80079f0:	af02      	add	r7, sp, #8
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10a      	bne.n	8007a16 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a12:	bf00      	nop
 8007a14:	e7fe      	b.n	8007a14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10a      	bne.n	8007a32 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a2e:	bf00      	nop
 8007a30:	e7fe      	b.n	8007a30 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d002      	beq.n	8007a3e <xQueueGenericCreateStatic+0x52>
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d001      	beq.n	8007a42 <xQueueGenericCreateStatic+0x56>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e000      	b.n	8007a44 <xQueueGenericCreateStatic+0x58>
 8007a42:	2300      	movs	r3, #0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10a      	bne.n	8007a5e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	623b      	str	r3, [r7, #32]
}
 8007a5a:	bf00      	nop
 8007a5c:	e7fe      	b.n	8007a5c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d102      	bne.n	8007a6a <xQueueGenericCreateStatic+0x7e>
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <xQueueGenericCreateStatic+0x82>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e000      	b.n	8007a70 <xQueueGenericCreateStatic+0x84>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10a      	bne.n	8007a8a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a78:	f383 8811 	msr	BASEPRI, r3
 8007a7c:	f3bf 8f6f 	isb	sy
 8007a80:	f3bf 8f4f 	dsb	sy
 8007a84:	61fb      	str	r3, [r7, #28]
}
 8007a86:	bf00      	nop
 8007a88:	e7fe      	b.n	8007a88 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a8a:	2348      	movs	r3, #72	; 0x48
 8007a8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2b48      	cmp	r3, #72	; 0x48
 8007a92:	d00a      	beq.n	8007aaa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	61bb      	str	r3, [r7, #24]
}
 8007aa6:	bf00      	nop
 8007aa8:	e7fe      	b.n	8007aa8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007aaa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00d      	beq.n	8007ad2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007abe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	68b9      	ldr	r1, [r7, #8]
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 f83f 	bl	8007b50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3730      	adds	r7, #48	; 0x30
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b08a      	sub	sp, #40	; 0x28
 8007ae0:	af02      	add	r7, sp, #8
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10a      	bne.n	8007b06 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	613b      	str	r3, [r7, #16]
}
 8007b02:	bf00      	nop
 8007b04:	e7fe      	b.n	8007b04 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	fb02 f303 	mul.w	r3, r2, r3
 8007b0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	3348      	adds	r3, #72	; 0x48
 8007b14:	4618      	mov	r0, r3
 8007b16:	f002 f94f 	bl	8009db8 <pvPortMalloc>
 8007b1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d011      	beq.n	8007b46 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	3348      	adds	r3, #72	; 0x48
 8007b2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b34:	79fa      	ldrb	r2, [r7, #7]
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	68b9      	ldr	r1, [r7, #8]
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 f805 	bl	8007b50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b46:	69bb      	ldr	r3, [r7, #24]
	}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3720      	adds	r7, #32
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
 8007b5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d103      	bne.n	8007b6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	69ba      	ldr	r2, [r7, #24]
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	e002      	b.n	8007b72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b7e:	2101      	movs	r1, #1
 8007b80:	69b8      	ldr	r0, [r7, #24]
 8007b82:	f7ff fecb 	bl	800791c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b86:	bf00      	nop
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00e      	beq.n	8007bba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007bae:	2300      	movs	r3, #0
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f837 	bl	8007c28 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007bba:	bf00      	nop
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b086      	sub	sp, #24
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	4603      	mov	r3, r0
 8007bca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	617b      	str	r3, [r7, #20]
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007bd4:	79fb      	ldrb	r3, [r7, #7]
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	6939      	ldr	r1, [r7, #16]
 8007bda:	6978      	ldr	r0, [r7, #20]
 8007bdc:	f7ff ff7e 	bl	8007adc <xQueueGenericCreate>
 8007be0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f7ff ffd3 	bl	8007b8e <prvInitialiseMutex>

		return xNewQueue;
 8007be8:	68fb      	ldr	r3, [r7, #12]
	}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3718      	adds	r7, #24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b088      	sub	sp, #32
 8007bf6:	af02      	add	r7, sp, #8
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	6039      	str	r1, [r7, #0]
 8007bfc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	617b      	str	r3, [r7, #20]
 8007c02:	2300      	movs	r3, #0
 8007c04:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007c06:	79fb      	ldrb	r3, [r7, #7]
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	6939      	ldr	r1, [r7, #16]
 8007c10:	6978      	ldr	r0, [r7, #20]
 8007c12:	f7ff feeb 	bl	80079ec <xQueueGenericCreateStatic>
 8007c16:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f7ff ffb8 	bl	8007b8e <prvInitialiseMutex>

		return xNewQueue;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
	}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3718      	adds	r7, #24
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b08e      	sub	sp, #56	; 0x38
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
 8007c34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c36:	2300      	movs	r3, #0
 8007c38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10a      	bne.n	8007c5a <xQueueGenericSend+0x32>
	__asm volatile
 8007c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c56:	bf00      	nop
 8007c58:	e7fe      	b.n	8007c58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d103      	bne.n	8007c68 <xQueueGenericSend+0x40>
 8007c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <xQueueGenericSend+0x44>
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e000      	b.n	8007c6e <xQueueGenericSend+0x46>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10a      	bne.n	8007c88 <xQueueGenericSend+0x60>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c84:	bf00      	nop
 8007c86:	e7fe      	b.n	8007c86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d103      	bne.n	8007c96 <xQueueGenericSend+0x6e>
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d101      	bne.n	8007c9a <xQueueGenericSend+0x72>
 8007c96:	2301      	movs	r3, #1
 8007c98:	e000      	b.n	8007c9c <xQueueGenericSend+0x74>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10a      	bne.n	8007cb6 <xQueueGenericSend+0x8e>
	__asm volatile
 8007ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	623b      	str	r3, [r7, #32]
}
 8007cb2:	bf00      	nop
 8007cb4:	e7fe      	b.n	8007cb4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cb6:	f001 fc0d 	bl	80094d4 <xTaskGetSchedulerState>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d102      	bne.n	8007cc6 <xQueueGenericSend+0x9e>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d101      	bne.n	8007cca <xQueueGenericSend+0xa2>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e000      	b.n	8007ccc <xQueueGenericSend+0xa4>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10a      	bne.n	8007ce6 <xQueueGenericSend+0xbe>
	__asm volatile
 8007cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	61fb      	str	r3, [r7, #28]
}
 8007ce2:	bf00      	nop
 8007ce4:	e7fe      	b.n	8007ce4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ce6:	f001 ff45 	bl	8009b74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d302      	bcc.n	8007cfc <xQueueGenericSend+0xd4>
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d129      	bne.n	8007d50 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	68b9      	ldr	r1, [r7, #8]
 8007d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d02:	f000 fc9a 	bl	800863a <prvCopyDataToQueue>
 8007d06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d010      	beq.n	8007d32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d12:	3324      	adds	r3, #36	; 0x24
 8007d14:	4618      	mov	r0, r3
 8007d16:	f001 fa1d 	bl	8009154 <xTaskRemoveFromEventList>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d013      	beq.n	8007d48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d20:	4b3f      	ldr	r3, [pc, #252]	; (8007e20 <xQueueGenericSend+0x1f8>)
 8007d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d26:	601a      	str	r2, [r3, #0]
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	e00a      	b.n	8007d48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d007      	beq.n	8007d48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d38:	4b39      	ldr	r3, [pc, #228]	; (8007e20 <xQueueGenericSend+0x1f8>)
 8007d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d3e:	601a      	str	r2, [r3, #0]
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d48:	f001 ff44 	bl	8009bd4 <vPortExitCritical>
				return pdPASS;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e063      	b.n	8007e18 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d103      	bne.n	8007d5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d56:	f001 ff3d 	bl	8009bd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	e05c      	b.n	8007e18 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d106      	bne.n	8007d72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d64:	f107 0314 	add.w	r3, r7, #20
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f001 fa55 	bl	8009218 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d72:	f001 ff2f 	bl	8009bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d76:	f000 ffe3 	bl	8008d40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d7a:	f001 fefb 	bl	8009b74 <vPortEnterCritical>
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d84:	b25b      	sxtb	r3, r3
 8007d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8a:	d103      	bne.n	8007d94 <xQueueGenericSend+0x16c>
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d9a:	b25b      	sxtb	r3, r3
 8007d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da0:	d103      	bne.n	8007daa <xQueueGenericSend+0x182>
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007daa:	f001 ff13 	bl	8009bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dae:	1d3a      	adds	r2, r7, #4
 8007db0:	f107 0314 	add.w	r3, r7, #20
 8007db4:	4611      	mov	r1, r2
 8007db6:	4618      	mov	r0, r3
 8007db8:	f001 fa44 	bl	8009244 <xTaskCheckForTimeOut>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d124      	bne.n	8007e0c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007dc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dc4:	f000 fd31 	bl	800882a <prvIsQueueFull>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d018      	beq.n	8007e00 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd0:	3310      	adds	r3, #16
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	4611      	mov	r1, r2
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f001 f998 	bl	800910c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007ddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dde:	f000 fcbc 	bl	800875a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007de2:	f000 ffbb 	bl	8008d5c <xTaskResumeAll>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f47f af7c 	bne.w	8007ce6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007dee:	4b0c      	ldr	r3, [pc, #48]	; (8007e20 <xQueueGenericSend+0x1f8>)
 8007df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	e772      	b.n	8007ce6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e02:	f000 fcaa 	bl	800875a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e06:	f000 ffa9 	bl	8008d5c <xTaskResumeAll>
 8007e0a:	e76c      	b.n	8007ce6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e0e:	f000 fca4 	bl	800875a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e12:	f000 ffa3 	bl	8008d5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3738      	adds	r7, #56	; 0x38
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	e000ed04 	.word	0xe000ed04

08007e24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b090      	sub	sp, #64	; 0x40
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
 8007e30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10a      	bne.n	8007e52 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e4e:	bf00      	nop
 8007e50:	e7fe      	b.n	8007e50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d103      	bne.n	8007e60 <xQueueGenericSendFromISR+0x3c>
 8007e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d101      	bne.n	8007e64 <xQueueGenericSendFromISR+0x40>
 8007e60:	2301      	movs	r3, #1
 8007e62:	e000      	b.n	8007e66 <xQueueGenericSendFromISR+0x42>
 8007e64:	2300      	movs	r3, #0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10a      	bne.n	8007e80 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6e:	f383 8811 	msr	BASEPRI, r3
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	f3bf 8f4f 	dsb	sy
 8007e7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e7c:	bf00      	nop
 8007e7e:	e7fe      	b.n	8007e7e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d103      	bne.n	8007e8e <xQueueGenericSendFromISR+0x6a>
 8007e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d101      	bne.n	8007e92 <xQueueGenericSendFromISR+0x6e>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e000      	b.n	8007e94 <xQueueGenericSendFromISR+0x70>
 8007e92:	2300      	movs	r3, #0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10a      	bne.n	8007eae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	623b      	str	r3, [r7, #32]
}
 8007eaa:	bf00      	nop
 8007eac:	e7fe      	b.n	8007eac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007eae:	f001 ff43 	bl	8009d38 <vPortValidateInterruptPriority>
	__asm volatile
 8007eb2:	f3ef 8211 	mrs	r2, BASEPRI
 8007eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	61fa      	str	r2, [r7, #28]
 8007ec8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007eca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ecc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d302      	bcc.n	8007ee0 <xQueueGenericSendFromISR+0xbc>
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d12f      	bne.n	8007f40 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	68b9      	ldr	r1, [r7, #8]
 8007ef4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ef6:	f000 fba0 	bl	800863a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007efa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f02:	d112      	bne.n	8007f2a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d016      	beq.n	8007f3a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0e:	3324      	adds	r3, #36	; 0x24
 8007f10:	4618      	mov	r0, r3
 8007f12:	f001 f91f 	bl	8009154 <xTaskRemoveFromEventList>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00e      	beq.n	8007f3a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00b      	beq.n	8007f3a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	601a      	str	r2, [r3, #0]
 8007f28:	e007      	b.n	8007f3a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f2e:	3301      	adds	r3, #1
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	b25a      	sxtb	r2, r3
 8007f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007f3e:	e001      	b.n	8007f44 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f40:	2300      	movs	r3, #0
 8007f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f46:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f383 8811 	msr	BASEPRI, r3
}
 8007f4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3740      	adds	r7, #64	; 0x40
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b08e      	sub	sp, #56	; 0x38
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10a      	bne.n	8007f84 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	623b      	str	r3, [r7, #32]
}
 8007f80:	bf00      	nop
 8007f82:	e7fe      	b.n	8007f82 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00a      	beq.n	8007fa2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8007f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f90:	f383 8811 	msr	BASEPRI, r3
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	61fb      	str	r3, [r7, #28]
}
 8007f9e:	bf00      	nop
 8007fa0:	e7fe      	b.n	8007fa0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d103      	bne.n	8007fb2 <xQueueGiveFromISR+0x58>
 8007faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <xQueueGiveFromISR+0x5c>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e000      	b.n	8007fb8 <xQueueGiveFromISR+0x5e>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10a      	bne.n	8007fd2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8007fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc0:	f383 8811 	msr	BASEPRI, r3
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	61bb      	str	r3, [r7, #24]
}
 8007fce:	bf00      	nop
 8007fd0:	e7fe      	b.n	8007fd0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fd2:	f001 feb1 	bl	8009d38 <vPortValidateInterruptPriority>
	__asm volatile
 8007fd6:	f3ef 8211 	mrs	r2, BASEPRI
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	617a      	str	r2, [r7, #20]
 8007fec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007fee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d22b      	bcs.n	800805a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800800c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800e:	1c5a      	adds	r2, r3, #1
 8008010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008012:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008014:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800801c:	d112      	bne.n	8008044 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800801e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008022:	2b00      	cmp	r3, #0
 8008024:	d016      	beq.n	8008054 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008028:	3324      	adds	r3, #36	; 0x24
 800802a:	4618      	mov	r0, r3
 800802c:	f001 f892 	bl	8009154 <xTaskRemoveFromEventList>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00e      	beq.n	8008054 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00b      	beq.n	8008054 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	2201      	movs	r2, #1
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	e007      	b.n	8008054 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008048:	3301      	adds	r3, #1
 800804a:	b2db      	uxtb	r3, r3
 800804c:	b25a      	sxtb	r2, r3
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008054:	2301      	movs	r3, #1
 8008056:	637b      	str	r3, [r7, #52]	; 0x34
 8008058:	e001      	b.n	800805e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800805a:	2300      	movs	r3, #0
 800805c:	637b      	str	r3, [r7, #52]	; 0x34
 800805e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008060:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f383 8811 	msr	BASEPRI, r3
}
 8008068:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800806a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800806c:	4618      	mov	r0, r3
 800806e:	3738      	adds	r7, #56	; 0x38
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b08c      	sub	sp, #48	; 0x30
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008080:	2300      	movs	r3, #0
 8008082:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10a      	bne.n	80080a4 <xQueueReceive+0x30>
	__asm volatile
 800808e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	623b      	str	r3, [r7, #32]
}
 80080a0:	bf00      	nop
 80080a2:	e7fe      	b.n	80080a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d103      	bne.n	80080b2 <xQueueReceive+0x3e>
 80080aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <xQueueReceive+0x42>
 80080b2:	2301      	movs	r3, #1
 80080b4:	e000      	b.n	80080b8 <xQueueReceive+0x44>
 80080b6:	2300      	movs	r3, #0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d10a      	bne.n	80080d2 <xQueueReceive+0x5e>
	__asm volatile
 80080bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c0:	f383 8811 	msr	BASEPRI, r3
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	61fb      	str	r3, [r7, #28]
}
 80080ce:	bf00      	nop
 80080d0:	e7fe      	b.n	80080d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080d2:	f001 f9ff 	bl	80094d4 <xTaskGetSchedulerState>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d102      	bne.n	80080e2 <xQueueReceive+0x6e>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <xQueueReceive+0x72>
 80080e2:	2301      	movs	r3, #1
 80080e4:	e000      	b.n	80080e8 <xQueueReceive+0x74>
 80080e6:	2300      	movs	r3, #0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10a      	bne.n	8008102 <xQueueReceive+0x8e>
	__asm volatile
 80080ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	61bb      	str	r3, [r7, #24]
}
 80080fe:	bf00      	nop
 8008100:	e7fe      	b.n	8008100 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008102:	f001 fd37 	bl	8009b74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	2b00      	cmp	r3, #0
 8008110:	d01f      	beq.n	8008152 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008112:	68b9      	ldr	r1, [r7, #8]
 8008114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008116:	f000 fafa 	bl	800870e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811c:	1e5a      	subs	r2, r3, #1
 800811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008120:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00f      	beq.n	800814a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800812a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812c:	3310      	adds	r3, #16
 800812e:	4618      	mov	r0, r3
 8008130:	f001 f810 	bl	8009154 <xTaskRemoveFromEventList>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d007      	beq.n	800814a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800813a:	4b3d      	ldr	r3, [pc, #244]	; (8008230 <xQueueReceive+0x1bc>)
 800813c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800814a:	f001 fd43 	bl	8009bd4 <vPortExitCritical>
				return pdPASS;
 800814e:	2301      	movs	r3, #1
 8008150:	e069      	b.n	8008226 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d103      	bne.n	8008160 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008158:	f001 fd3c 	bl	8009bd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800815c:	2300      	movs	r3, #0
 800815e:	e062      	b.n	8008226 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008162:	2b00      	cmp	r3, #0
 8008164:	d106      	bne.n	8008174 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008166:	f107 0310 	add.w	r3, r7, #16
 800816a:	4618      	mov	r0, r3
 800816c:	f001 f854 	bl	8009218 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008170:	2301      	movs	r3, #1
 8008172:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008174:	f001 fd2e 	bl	8009bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008178:	f000 fde2 	bl	8008d40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800817c:	f001 fcfa 	bl	8009b74 <vPortEnterCritical>
 8008180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008182:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008186:	b25b      	sxtb	r3, r3
 8008188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800818c:	d103      	bne.n	8008196 <xQueueReceive+0x122>
 800818e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008190:	2200      	movs	r2, #0
 8008192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008198:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800819c:	b25b      	sxtb	r3, r3
 800819e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a2:	d103      	bne.n	80081ac <xQueueReceive+0x138>
 80081a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081ac:	f001 fd12 	bl	8009bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081b0:	1d3a      	adds	r2, r7, #4
 80081b2:	f107 0310 	add.w	r3, r7, #16
 80081b6:	4611      	mov	r1, r2
 80081b8:	4618      	mov	r0, r3
 80081ba:	f001 f843 	bl	8009244 <xTaskCheckForTimeOut>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d123      	bne.n	800820c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081c6:	f000 fb1a 	bl	80087fe <prvIsQueueEmpty>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d017      	beq.n	8008200 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d2:	3324      	adds	r3, #36	; 0x24
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	4611      	mov	r1, r2
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 ff97 	bl	800910c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081e0:	f000 fabb 	bl	800875a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081e4:	f000 fdba 	bl	8008d5c <xTaskResumeAll>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d189      	bne.n	8008102 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80081ee:	4b10      	ldr	r3, [pc, #64]	; (8008230 <xQueueReceive+0x1bc>)
 80081f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081f4:	601a      	str	r2, [r3, #0]
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	f3bf 8f6f 	isb	sy
 80081fe:	e780      	b.n	8008102 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008202:	f000 faaa 	bl	800875a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008206:	f000 fda9 	bl	8008d5c <xTaskResumeAll>
 800820a:	e77a      	b.n	8008102 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800820c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800820e:	f000 faa4 	bl	800875a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008212:	f000 fda3 	bl	8008d5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008218:	f000 faf1 	bl	80087fe <prvIsQueueEmpty>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	f43f af6f 	beq.w	8008102 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008224:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008226:	4618      	mov	r0, r3
 8008228:	3730      	adds	r7, #48	; 0x30
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	e000ed04 	.word	0xe000ed04

08008234 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b08e      	sub	sp, #56	; 0x38
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800823e:	2300      	movs	r3, #0
 8008240:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008246:	2300      	movs	r3, #0
 8008248:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800824a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10a      	bne.n	8008266 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	623b      	str	r3, [r7, #32]
}
 8008262:	bf00      	nop
 8008264:	e7fe      	b.n	8008264 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00a      	beq.n	8008284 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	61fb      	str	r3, [r7, #28]
}
 8008280:	bf00      	nop
 8008282:	e7fe      	b.n	8008282 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008284:	f001 f926 	bl	80094d4 <xTaskGetSchedulerState>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d102      	bne.n	8008294 <xQueueSemaphoreTake+0x60>
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <xQueueSemaphoreTake+0x64>
 8008294:	2301      	movs	r3, #1
 8008296:	e000      	b.n	800829a <xQueueSemaphoreTake+0x66>
 8008298:	2300      	movs	r3, #0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d10a      	bne.n	80082b4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	61bb      	str	r3, [r7, #24]
}
 80082b0:	bf00      	nop
 80082b2:	e7fe      	b.n	80082b2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082b4:	f001 fc5e 	bl	8009b74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80082b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082bc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80082be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d024      	beq.n	800830e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80082c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c6:	1e5a      	subs	r2, r3, #1
 80082c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d104      	bne.n	80082de <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80082d4:	f001 faa6 	bl	8009824 <pvTaskIncrementMutexHeldCount>
 80082d8:	4602      	mov	r2, r0
 80082da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082dc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00f      	beq.n	8008306 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e8:	3310      	adds	r3, #16
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 ff32 	bl	8009154 <xTaskRemoveFromEventList>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d007      	beq.n	8008306 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082f6:	4b54      	ldr	r3, [pc, #336]	; (8008448 <xQueueSemaphoreTake+0x214>)
 80082f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082fc:	601a      	str	r2, [r3, #0]
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008306:	f001 fc65 	bl	8009bd4 <vPortExitCritical>
				return pdPASS;
 800830a:	2301      	movs	r3, #1
 800830c:	e097      	b.n	800843e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d111      	bne.n	8008338 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800831a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	617b      	str	r3, [r7, #20]
}
 800832c:	bf00      	nop
 800832e:	e7fe      	b.n	800832e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008330:	f001 fc50 	bl	8009bd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008334:	2300      	movs	r3, #0
 8008336:	e082      	b.n	800843e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800833a:	2b00      	cmp	r3, #0
 800833c:	d106      	bne.n	800834c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800833e:	f107 030c 	add.w	r3, r7, #12
 8008342:	4618      	mov	r0, r3
 8008344:	f000 ff68 	bl	8009218 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008348:	2301      	movs	r3, #1
 800834a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800834c:	f001 fc42 	bl	8009bd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008350:	f000 fcf6 	bl	8008d40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008354:	f001 fc0e 	bl	8009b74 <vPortEnterCritical>
 8008358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800835e:	b25b      	sxtb	r3, r3
 8008360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008364:	d103      	bne.n	800836e <xQueueSemaphoreTake+0x13a>
 8008366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008368:	2200      	movs	r2, #0
 800836a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800836e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008374:	b25b      	sxtb	r3, r3
 8008376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800837a:	d103      	bne.n	8008384 <xQueueSemaphoreTake+0x150>
 800837c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837e:	2200      	movs	r2, #0
 8008380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008384:	f001 fc26 	bl	8009bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008388:	463a      	mov	r2, r7
 800838a:	f107 030c 	add.w	r3, r7, #12
 800838e:	4611      	mov	r1, r2
 8008390:	4618      	mov	r0, r3
 8008392:	f000 ff57 	bl	8009244 <xTaskCheckForTimeOut>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d132      	bne.n	8008402 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800839c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800839e:	f000 fa2e 	bl	80087fe <prvIsQueueEmpty>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d026      	beq.n	80083f6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d109      	bne.n	80083c4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80083b0:	f001 fbe0 	bl	8009b74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	4618      	mov	r0, r3
 80083ba:	f001 f8a9 	bl	8009510 <xTaskPriorityInherit>
 80083be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80083c0:	f001 fc08 	bl	8009bd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c6:	3324      	adds	r3, #36	; 0x24
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	4611      	mov	r1, r2
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 fe9d 	bl	800910c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083d4:	f000 f9c1 	bl	800875a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083d8:	f000 fcc0 	bl	8008d5c <xTaskResumeAll>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f47f af68 	bne.w	80082b4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80083e4:	4b18      	ldr	r3, [pc, #96]	; (8008448 <xQueueSemaphoreTake+0x214>)
 80083e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	f3bf 8f4f 	dsb	sy
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	e75e      	b.n	80082b4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80083f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083f8:	f000 f9af 	bl	800875a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083fc:	f000 fcae 	bl	8008d5c <xTaskResumeAll>
 8008400:	e758      	b.n	80082b4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008402:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008404:	f000 f9a9 	bl	800875a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008408:	f000 fca8 	bl	8008d5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800840c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800840e:	f000 f9f6 	bl	80087fe <prvIsQueueEmpty>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	f43f af4d 	beq.w	80082b4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800841a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00d      	beq.n	800843c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008420:	f001 fba8 	bl	8009b74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008424:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008426:	f000 f8f0 	bl	800860a <prvGetDisinheritPriorityAfterTimeout>
 800842a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800842c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008432:	4618      	mov	r0, r3
 8008434:	f001 f968 	bl	8009708 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008438:	f001 fbcc 	bl	8009bd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800843c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800843e:	4618      	mov	r0, r3
 8008440:	3738      	adds	r7, #56	; 0x38
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	e000ed04 	.word	0xe000ed04

0800844c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b08e      	sub	sp, #56	; 0x38
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800845c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10a      	bne.n	8008478 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	623b      	str	r3, [r7, #32]
}
 8008474:	bf00      	nop
 8008476:	e7fe      	b.n	8008476 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d103      	bne.n	8008486 <xQueueReceiveFromISR+0x3a>
 800847e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008482:	2b00      	cmp	r3, #0
 8008484:	d101      	bne.n	800848a <xQueueReceiveFromISR+0x3e>
 8008486:	2301      	movs	r3, #1
 8008488:	e000      	b.n	800848c <xQueueReceiveFromISR+0x40>
 800848a:	2300      	movs	r3, #0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10a      	bne.n	80084a6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	61fb      	str	r3, [r7, #28]
}
 80084a2:	bf00      	nop
 80084a4:	e7fe      	b.n	80084a4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084a6:	f001 fc47 	bl	8009d38 <vPortValidateInterruptPriority>
	__asm volatile
 80084aa:	f3ef 8211 	mrs	r2, BASEPRI
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	61ba      	str	r2, [r7, #24]
 80084c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80084c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80084c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d02f      	beq.n	8008532 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80084d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084dc:	68b9      	ldr	r1, [r7, #8]
 80084de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084e0:	f000 f915 	bl	800870e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e6:	1e5a      	subs	r2, r3, #1
 80084e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80084ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80084f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f4:	d112      	bne.n	800851c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d016      	beq.n	800852c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	3310      	adds	r3, #16
 8008502:	4618      	mov	r0, r3
 8008504:	f000 fe26 	bl	8009154 <xTaskRemoveFromEventList>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00e      	beq.n	800852c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00b      	beq.n	800852c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	601a      	str	r2, [r3, #0]
 800851a:	e007      	b.n	800852c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800851c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008520:	3301      	adds	r3, #1
 8008522:	b2db      	uxtb	r3, r3
 8008524:	b25a      	sxtb	r2, r3
 8008526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800852c:	2301      	movs	r3, #1
 800852e:	637b      	str	r3, [r7, #52]	; 0x34
 8008530:	e001      	b.n	8008536 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008532:	2300      	movs	r3, #0
 8008534:	637b      	str	r3, [r7, #52]	; 0x34
 8008536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008538:	613b      	str	r3, [r7, #16]
	__asm volatile
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	f383 8811 	msr	BASEPRI, r3
}
 8008540:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008544:	4618      	mov	r0, r3
 8008546:	3738      	adds	r7, #56	; 0x38
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10a      	bne.n	8008570 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800855a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	60bb      	str	r3, [r7, #8]
}
 800856c:	bf00      	nop
 800856e:	e7fe      	b.n	800856e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008570:	f001 fb00 	bl	8009b74 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008578:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800857a:	f001 fb2b 	bl	8009bd4 <vPortExitCritical>

	return uxReturn;
 800857e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008588:	b480      	push	{r7}
 800858a:	b087      	sub	sp, #28
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10a      	bne.n	80085b0 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800859a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	60fb      	str	r3, [r7, #12]
}
 80085ac:	bf00      	nop
 80085ae:	e7fe      	b.n	80085ae <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80085b6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80085b8:	4618      	mov	r0, r3
 80085ba:	371c      	adds	r7, #28
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10a      	bne.n	80085ec <vQueueDelete+0x28>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	60bb      	str	r3, [r7, #8]
}
 80085e8:	bf00      	nop
 80085ea:	e7fe      	b.n	80085ea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f000 f935 	bl	800885c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d102      	bne.n	8008602 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f001 fca7 	bl	8009f50 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008602:	bf00      	nop
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800860a:	b480      	push	{r7}
 800860c:	b085      	sub	sp, #20
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008616:	2b00      	cmp	r3, #0
 8008618:	d006      	beq.n	8008628 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f1c3 0307 	rsb	r3, r3, #7
 8008624:	60fb      	str	r3, [r7, #12]
 8008626:	e001      	b.n	800862c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008628:	2300      	movs	r3, #0
 800862a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800862c:	68fb      	ldr	r3, [r7, #12]
	}
 800862e:	4618      	mov	r0, r3
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b086      	sub	sp, #24
 800863e:	af00      	add	r7, sp, #0
 8008640:	60f8      	str	r0, [r7, #12]
 8008642:	60b9      	str	r1, [r7, #8]
 8008644:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008646:	2300      	movs	r3, #0
 8008648:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10d      	bne.n	8008674 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d14d      	bne.n	80086fc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	4618      	mov	r0, r3
 8008666:	f000 ffc9 	bl	80095fc <xTaskPriorityDisinherit>
 800866a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	609a      	str	r2, [r3, #8]
 8008672:	e043      	b.n	80086fc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d119      	bne.n	80086ae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6858      	ldr	r0, [r3, #4]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008682:	461a      	mov	r2, r3
 8008684:	68b9      	ldr	r1, [r7, #8]
 8008686:	f00e ffcd 	bl	8017624 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	685a      	ldr	r2, [r3, #4]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008692:	441a      	add	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	685a      	ldr	r2, [r3, #4]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d32b      	bcc.n	80086fc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	605a      	str	r2, [r3, #4]
 80086ac:	e026      	b.n	80086fc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	68d8      	ldr	r0, [r3, #12]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b6:	461a      	mov	r2, r3
 80086b8:	68b9      	ldr	r1, [r7, #8]
 80086ba:	f00e ffb3 	bl	8017624 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	68da      	ldr	r2, [r3, #12]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c6:	425b      	negs	r3, r3
 80086c8:	441a      	add	r2, r3
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	68da      	ldr	r2, [r3, #12]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d207      	bcs.n	80086ea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	689a      	ldr	r2, [r3, #8]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e2:	425b      	negs	r3, r3
 80086e4:	441a      	add	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d105      	bne.n	80086fc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d002      	beq.n	80086fc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	3b01      	subs	r3, #1
 80086fa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	1c5a      	adds	r2, r3, #1
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008704:	697b      	ldr	r3, [r7, #20]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3718      	adds	r7, #24
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b082      	sub	sp, #8
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871c:	2b00      	cmp	r3, #0
 800871e:	d018      	beq.n	8008752 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	68da      	ldr	r2, [r3, #12]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008728:	441a      	add	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68da      	ldr	r2, [r3, #12]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	429a      	cmp	r2, r3
 8008738:	d303      	bcc.n	8008742 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68d9      	ldr	r1, [r3, #12]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874a:	461a      	mov	r2, r3
 800874c:	6838      	ldr	r0, [r7, #0]
 800874e:	f00e ff69 	bl	8017624 <memcpy>
	}
}
 8008752:	bf00      	nop
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b084      	sub	sp, #16
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008762:	f001 fa07 	bl	8009b74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800876c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800876e:	e011      	b.n	8008794 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008774:	2b00      	cmp	r3, #0
 8008776:	d012      	beq.n	800879e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3324      	adds	r3, #36	; 0x24
 800877c:	4618      	mov	r0, r3
 800877e:	f000 fce9 	bl	8009154 <xTaskRemoveFromEventList>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d001      	beq.n	800878c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008788:	f000 fdbe 	bl	8009308 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800878c:	7bfb      	ldrb	r3, [r7, #15]
 800878e:	3b01      	subs	r3, #1
 8008790:	b2db      	uxtb	r3, r3
 8008792:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008798:	2b00      	cmp	r3, #0
 800879a:	dce9      	bgt.n	8008770 <prvUnlockQueue+0x16>
 800879c:	e000      	b.n	80087a0 <prvUnlockQueue+0x46>
					break;
 800879e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	22ff      	movs	r2, #255	; 0xff
 80087a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80087a8:	f001 fa14 	bl	8009bd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80087ac:	f001 f9e2 	bl	8009b74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087b6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087b8:	e011      	b.n	80087de <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d012      	beq.n	80087e8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	3310      	adds	r3, #16
 80087c6:	4618      	mov	r0, r3
 80087c8:	f000 fcc4 	bl	8009154 <xTaskRemoveFromEventList>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d001      	beq.n	80087d6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80087d2:	f000 fd99 	bl	8009308 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
 80087d8:	3b01      	subs	r3, #1
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	dce9      	bgt.n	80087ba <prvUnlockQueue+0x60>
 80087e6:	e000      	b.n	80087ea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087e8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	22ff      	movs	r2, #255	; 0xff
 80087ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80087f2:	f001 f9ef 	bl	8009bd4 <vPortExitCritical>
}
 80087f6:	bf00      	nop
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b084      	sub	sp, #16
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008806:	f001 f9b5 	bl	8009b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880e:	2b00      	cmp	r3, #0
 8008810:	d102      	bne.n	8008818 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008812:	2301      	movs	r3, #1
 8008814:	60fb      	str	r3, [r7, #12]
 8008816:	e001      	b.n	800881c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008818:	2300      	movs	r3, #0
 800881a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800881c:	f001 f9da 	bl	8009bd4 <vPortExitCritical>

	return xReturn;
 8008820:	68fb      	ldr	r3, [r7, #12]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008832:	f001 f99f 	bl	8009b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800883e:	429a      	cmp	r2, r3
 8008840:	d102      	bne.n	8008848 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008842:	2301      	movs	r3, #1
 8008844:	60fb      	str	r3, [r7, #12]
 8008846:	e001      	b.n	800884c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008848:	2300      	movs	r3, #0
 800884a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800884c:	f001 f9c2 	bl	8009bd4 <vPortExitCritical>

	return xReturn;
 8008850:	68fb      	ldr	r3, [r7, #12]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
	...

0800885c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008864:	2300      	movs	r3, #0
 8008866:	60fb      	str	r3, [r7, #12]
 8008868:	e016      	b.n	8008898 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800886a:	4a10      	ldr	r2, [pc, #64]	; (80088ac <vQueueUnregisterQueue+0x50>)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	00db      	lsls	r3, r3, #3
 8008870:	4413      	add	r3, r2
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	429a      	cmp	r2, r3
 8008878:	d10b      	bne.n	8008892 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800887a:	4a0c      	ldr	r2, [pc, #48]	; (80088ac <vQueueUnregisterQueue+0x50>)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2100      	movs	r1, #0
 8008880:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008884:	4a09      	ldr	r2, [pc, #36]	; (80088ac <vQueueUnregisterQueue+0x50>)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	00db      	lsls	r3, r3, #3
 800888a:	4413      	add	r3, r2
 800888c:	2200      	movs	r2, #0
 800888e:	605a      	str	r2, [r3, #4]
				break;
 8008890:	e006      	b.n	80088a0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	3301      	adds	r3, #1
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2b07      	cmp	r3, #7
 800889c:	d9e5      	bls.n	800886a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800889e:	bf00      	nop
 80088a0:	bf00      	nop
 80088a2:	3714      	adds	r7, #20
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr
 80088ac:	20009f38 	.word	0x20009f38

080088b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b08e      	sub	sp, #56	; 0x38
 80088b4:	af04      	add	r7, sp, #16
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
 80088bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80088be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10a      	bne.n	80088da <xTaskCreateStatic+0x2a>
	__asm volatile
 80088c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	623b      	str	r3, [r7, #32]
}
 80088d6:	bf00      	nop
 80088d8:	e7fe      	b.n	80088d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80088da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10a      	bne.n	80088f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80088e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	61fb      	str	r3, [r7, #28]
}
 80088f2:	bf00      	nop
 80088f4:	e7fe      	b.n	80088f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80088f6:	23b4      	movs	r3, #180	; 0xb4
 80088f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	2bb4      	cmp	r3, #180	; 0xb4
 80088fe:	d00a      	beq.n	8008916 <xTaskCreateStatic+0x66>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	61bb      	str	r3, [r7, #24]
}
 8008912:	bf00      	nop
 8008914:	e7fe      	b.n	8008914 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008916:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891a:	2b00      	cmp	r3, #0
 800891c:	d01e      	beq.n	800895c <xTaskCreateStatic+0xac>
 800891e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008920:	2b00      	cmp	r3, #0
 8008922:	d01b      	beq.n	800895c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008926:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800892c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800892e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008930:	2202      	movs	r2, #2
 8008932:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008936:	2300      	movs	r3, #0
 8008938:	9303      	str	r3, [sp, #12]
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	9302      	str	r3, [sp, #8]
 800893e:	f107 0314 	add.w	r3, r7, #20
 8008942:	9301      	str	r3, [sp, #4]
 8008944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	68b9      	ldr	r1, [r7, #8]
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f000 f850 	bl	80089f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008954:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008956:	f000 f8eb 	bl	8008b30 <prvAddNewTaskToReadyList>
 800895a:	e001      	b.n	8008960 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800895c:	2300      	movs	r3, #0
 800895e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008960:	697b      	ldr	r3, [r7, #20]
	}
 8008962:	4618      	mov	r0, r3
 8008964:	3728      	adds	r7, #40	; 0x28
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800896a:	b580      	push	{r7, lr}
 800896c:	b08c      	sub	sp, #48	; 0x30
 800896e:	af04      	add	r7, sp, #16
 8008970:	60f8      	str	r0, [r7, #12]
 8008972:	60b9      	str	r1, [r7, #8]
 8008974:	603b      	str	r3, [r7, #0]
 8008976:	4613      	mov	r3, r2
 8008978:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800897a:	88fb      	ldrh	r3, [r7, #6]
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4618      	mov	r0, r3
 8008980:	f001 fa1a 	bl	8009db8 <pvPortMalloc>
 8008984:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00e      	beq.n	80089aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800898c:	20b4      	movs	r0, #180	; 0xb4
 800898e:	f001 fa13 	bl	8009db8 <pvPortMalloc>
 8008992:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d003      	beq.n	80089a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	631a      	str	r2, [r3, #48]	; 0x30
 80089a0:	e005      	b.n	80089ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089a2:	6978      	ldr	r0, [r7, #20]
 80089a4:	f001 fad4 	bl	8009f50 <vPortFree>
 80089a8:	e001      	b.n	80089ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80089aa:	2300      	movs	r3, #0
 80089ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d017      	beq.n	80089e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80089bc:	88fa      	ldrh	r2, [r7, #6]
 80089be:	2300      	movs	r3, #0
 80089c0:	9303      	str	r3, [sp, #12]
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	9302      	str	r3, [sp, #8]
 80089c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c8:	9301      	str	r3, [sp, #4]
 80089ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	68b9      	ldr	r1, [r7, #8]
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f000 f80e 	bl	80089f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089d8:	69f8      	ldr	r0, [r7, #28]
 80089da:	f000 f8a9 	bl	8008b30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80089de:	2301      	movs	r3, #1
 80089e0:	61bb      	str	r3, [r7, #24]
 80089e2:	e002      	b.n	80089ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80089e4:	f04f 33ff 	mov.w	r3, #4294967295
 80089e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80089ea:	69bb      	ldr	r3, [r7, #24]
	}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3720      	adds	r7, #32
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b088      	sub	sp, #32
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
 8008a00:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4413      	add	r3, r2
 8008a12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	f023 0307 	bic.w	r3, r3, #7
 8008a1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	f003 0307 	and.w	r3, r3, #7
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00a      	beq.n	8008a3c <prvInitialiseNewTask+0x48>
	__asm volatile
 8008a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2a:	f383 8811 	msr	BASEPRI, r3
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	617b      	str	r3, [r7, #20]
}
 8008a38:	bf00      	nop
 8008a3a:	e7fe      	b.n	8008a3a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d01f      	beq.n	8008a82 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a42:	2300      	movs	r3, #0
 8008a44:	61fb      	str	r3, [r7, #28]
 8008a46:	e012      	b.n	8008a6e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	7819      	ldrb	r1, [r3, #0]
 8008a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	4413      	add	r3, r2
 8008a56:	3334      	adds	r3, #52	; 0x34
 8008a58:	460a      	mov	r2, r1
 8008a5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	4413      	add	r3, r2
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d006      	beq.n	8008a76 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	61fb      	str	r3, [r7, #28]
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	2b0f      	cmp	r3, #15
 8008a72:	d9e9      	bls.n	8008a48 <prvInitialiseNewTask+0x54>
 8008a74:	e000      	b.n	8008a78 <prvInitialiseNewTask+0x84>
			{
				break;
 8008a76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a80:	e003      	b.n	8008a8a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8c:	2b06      	cmp	r3, #6
 8008a8e:	d901      	bls.n	8008a94 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008a90:	2306      	movs	r3, #6
 8008a92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a9e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7fe fea1 	bl	80077f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab2:	3318      	adds	r3, #24
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7fe fe9c 	bl	80077f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008abe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac2:	f1c3 0207 	rsb	r2, r3, #7
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ace:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae2:	334c      	adds	r3, #76	; 0x4c
 8008ae4:	2260      	movs	r2, #96	; 0x60
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f00e fda9 	bl	8017640 <memset>
 8008aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af0:	4a0c      	ldr	r2, [pc, #48]	; (8008b24 <prvInitialiseNewTask+0x130>)
 8008af2:	651a      	str	r2, [r3, #80]	; 0x50
 8008af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af6:	4a0c      	ldr	r2, [pc, #48]	; (8008b28 <prvInitialiseNewTask+0x134>)
 8008af8:	655a      	str	r2, [r3, #84]	; 0x54
 8008afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afc:	4a0b      	ldr	r2, [pc, #44]	; (8008b2c <prvInitialiseNewTask+0x138>)
 8008afe:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b00:	683a      	ldr	r2, [r7, #0]
 8008b02:	68f9      	ldr	r1, [r7, #12]
 8008b04:	69b8      	ldr	r0, [r7, #24]
 8008b06:	f000 ff07 	bl	8009918 <pxPortInitialiseStack>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d002      	beq.n	8008b1c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b1c:	bf00      	nop
 8008b1e:	3720      	adds	r7, #32
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	0801bcb0 	.word	0x0801bcb0
 8008b28:	0801bcd0 	.word	0x0801bcd0
 8008b2c:	0801bc90 	.word	0x0801bc90

08008b30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b38:	f001 f81c 	bl	8009b74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b3c:	4b2a      	ldr	r3, [pc, #168]	; (8008be8 <prvAddNewTaskToReadyList+0xb8>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	3301      	adds	r3, #1
 8008b42:	4a29      	ldr	r2, [pc, #164]	; (8008be8 <prvAddNewTaskToReadyList+0xb8>)
 8008b44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b46:	4b29      	ldr	r3, [pc, #164]	; (8008bec <prvAddNewTaskToReadyList+0xbc>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d109      	bne.n	8008b62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b4e:	4a27      	ldr	r2, [pc, #156]	; (8008bec <prvAddNewTaskToReadyList+0xbc>)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b54:	4b24      	ldr	r3, [pc, #144]	; (8008be8 <prvAddNewTaskToReadyList+0xb8>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d110      	bne.n	8008b7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b5c:	f000 fbf8 	bl	8009350 <prvInitialiseTaskLists>
 8008b60:	e00d      	b.n	8008b7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b62:	4b23      	ldr	r3, [pc, #140]	; (8008bf0 <prvAddNewTaskToReadyList+0xc0>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d109      	bne.n	8008b7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b6a:	4b20      	ldr	r3, [pc, #128]	; (8008bec <prvAddNewTaskToReadyList+0xbc>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d802      	bhi.n	8008b7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b78:	4a1c      	ldr	r2, [pc, #112]	; (8008bec <prvAddNewTaskToReadyList+0xbc>)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b7e:	4b1d      	ldr	r3, [pc, #116]	; (8008bf4 <prvAddNewTaskToReadyList+0xc4>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3301      	adds	r3, #1
 8008b84:	4a1b      	ldr	r2, [pc, #108]	; (8008bf4 <prvAddNewTaskToReadyList+0xc4>)
 8008b86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	409a      	lsls	r2, r3
 8008b90:	4b19      	ldr	r3, [pc, #100]	; (8008bf8 <prvAddNewTaskToReadyList+0xc8>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	4a18      	ldr	r2, [pc, #96]	; (8008bf8 <prvAddNewTaskToReadyList+0xc8>)
 8008b98:	6013      	str	r3, [r2, #0]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	4413      	add	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4a15      	ldr	r2, [pc, #84]	; (8008bfc <prvAddNewTaskToReadyList+0xcc>)
 8008ba8:	441a      	add	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	3304      	adds	r3, #4
 8008bae:	4619      	mov	r1, r3
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	f7fe fe2b 	bl	800780c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008bb6:	f001 f80d 	bl	8009bd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008bba:	4b0d      	ldr	r3, [pc, #52]	; (8008bf0 <prvAddNewTaskToReadyList+0xc0>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00e      	beq.n	8008be0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008bc2:	4b0a      	ldr	r3, [pc, #40]	; (8008bec <prvAddNewTaskToReadyList+0xbc>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d207      	bcs.n	8008be0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008bd0:	4b0b      	ldr	r3, [pc, #44]	; (8008c00 <prvAddNewTaskToReadyList+0xd0>)
 8008bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008be0:	bf00      	nop
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	20000490 	.word	0x20000490
 8008bec:	20000390 	.word	0x20000390
 8008bf0:	2000049c 	.word	0x2000049c
 8008bf4:	200004ac 	.word	0x200004ac
 8008bf8:	20000498 	.word	0x20000498
 8008bfc:	20000394 	.word	0x20000394
 8008c00:	e000ed04 	.word	0xe000ed04

08008c04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d017      	beq.n	8008c46 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c16:	4b13      	ldr	r3, [pc, #76]	; (8008c64 <vTaskDelay+0x60>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00a      	beq.n	8008c34 <vTaskDelay+0x30>
	__asm volatile
 8008c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	60bb      	str	r3, [r7, #8]
}
 8008c30:	bf00      	nop
 8008c32:	e7fe      	b.n	8008c32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008c34:	f000 f884 	bl	8008d40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c38:	2100      	movs	r1, #0
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fe06 	bl	800984c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c40:	f000 f88c 	bl	8008d5c <xTaskResumeAll>
 8008c44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d107      	bne.n	8008c5c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008c4c:	4b06      	ldr	r3, [pc, #24]	; (8008c68 <vTaskDelay+0x64>)
 8008c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c52:	601a      	str	r2, [r3, #0]
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c5c:	bf00      	nop
 8008c5e:	3710      	adds	r7, #16
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	200004b8 	.word	0x200004b8
 8008c68:	e000ed04 	.word	0xe000ed04

08008c6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b08a      	sub	sp, #40	; 0x28
 8008c70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c72:	2300      	movs	r3, #0
 8008c74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c76:	2300      	movs	r3, #0
 8008c78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c7a:	463a      	mov	r2, r7
 8008c7c:	1d39      	adds	r1, r7, #4
 8008c7e:	f107 0308 	add.w	r3, r7, #8
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7f8 f80a 	bl	8000c9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c88:	6839      	ldr	r1, [r7, #0]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	9202      	str	r2, [sp, #8]
 8008c90:	9301      	str	r3, [sp, #4]
 8008c92:	2300      	movs	r3, #0
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	2300      	movs	r3, #0
 8008c98:	460a      	mov	r2, r1
 8008c9a:	4921      	ldr	r1, [pc, #132]	; (8008d20 <vTaskStartScheduler+0xb4>)
 8008c9c:	4821      	ldr	r0, [pc, #132]	; (8008d24 <vTaskStartScheduler+0xb8>)
 8008c9e:	f7ff fe07 	bl	80088b0 <xTaskCreateStatic>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	4a20      	ldr	r2, [pc, #128]	; (8008d28 <vTaskStartScheduler+0xbc>)
 8008ca6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ca8:	4b1f      	ldr	r3, [pc, #124]	; (8008d28 <vTaskStartScheduler+0xbc>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d002      	beq.n	8008cb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	617b      	str	r3, [r7, #20]
 8008cb4:	e001      	b.n	8008cba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d11b      	bne.n	8008cf8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	613b      	str	r3, [r7, #16]
}
 8008cd2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008cd4:	4b15      	ldr	r3, [pc, #84]	; (8008d2c <vTaskStartScheduler+0xc0>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	334c      	adds	r3, #76	; 0x4c
 8008cda:	4a15      	ldr	r2, [pc, #84]	; (8008d30 <vTaskStartScheduler+0xc4>)
 8008cdc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008cde:	4b15      	ldr	r3, [pc, #84]	; (8008d34 <vTaskStartScheduler+0xc8>)
 8008ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ce4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ce6:	4b14      	ldr	r3, [pc, #80]	; (8008d38 <vTaskStartScheduler+0xcc>)
 8008ce8:	2201      	movs	r2, #1
 8008cea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008cec:	4b13      	ldr	r3, [pc, #76]	; (8008d3c <vTaskStartScheduler+0xd0>)
 8008cee:	2200      	movs	r2, #0
 8008cf0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008cf2:	f000 fe9d 	bl	8009a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008cf6:	e00e      	b.n	8008d16 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cfe:	d10a      	bne.n	8008d16 <vTaskStartScheduler+0xaa>
	__asm volatile
 8008d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d04:	f383 8811 	msr	BASEPRI, r3
 8008d08:	f3bf 8f6f 	isb	sy
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	60fb      	str	r3, [r7, #12]
}
 8008d12:	bf00      	nop
 8008d14:	e7fe      	b.n	8008d14 <vTaskStartScheduler+0xa8>
}
 8008d16:	bf00      	nop
 8008d18:	3718      	adds	r7, #24
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	08018668 	.word	0x08018668
 8008d24:	08009321 	.word	0x08009321
 8008d28:	200004b4 	.word	0x200004b4
 8008d2c:	20000390 	.word	0x20000390
 8008d30:	20000020 	.word	0x20000020
 8008d34:	200004b0 	.word	0x200004b0
 8008d38:	2000049c 	.word	0x2000049c
 8008d3c:	20000494 	.word	0x20000494

08008d40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d40:	b480      	push	{r7}
 8008d42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008d44:	4b04      	ldr	r3, [pc, #16]	; (8008d58 <vTaskSuspendAll+0x18>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	4a03      	ldr	r2, [pc, #12]	; (8008d58 <vTaskSuspendAll+0x18>)
 8008d4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008d4e:	bf00      	nop
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr
 8008d58:	200004b8 	.word	0x200004b8

08008d5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d62:	2300      	movs	r3, #0
 8008d64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d66:	2300      	movs	r3, #0
 8008d68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d6a:	4b41      	ldr	r3, [pc, #260]	; (8008e70 <xTaskResumeAll+0x114>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d10a      	bne.n	8008d88 <xTaskResumeAll+0x2c>
	__asm volatile
 8008d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d76:	f383 8811 	msr	BASEPRI, r3
 8008d7a:	f3bf 8f6f 	isb	sy
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	603b      	str	r3, [r7, #0]
}
 8008d84:	bf00      	nop
 8008d86:	e7fe      	b.n	8008d86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d88:	f000 fef4 	bl	8009b74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d8c:	4b38      	ldr	r3, [pc, #224]	; (8008e70 <xTaskResumeAll+0x114>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	3b01      	subs	r3, #1
 8008d92:	4a37      	ldr	r2, [pc, #220]	; (8008e70 <xTaskResumeAll+0x114>)
 8008d94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d96:	4b36      	ldr	r3, [pc, #216]	; (8008e70 <xTaskResumeAll+0x114>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d161      	bne.n	8008e62 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d9e:	4b35      	ldr	r3, [pc, #212]	; (8008e74 <xTaskResumeAll+0x118>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d05d      	beq.n	8008e62 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008da6:	e02e      	b.n	8008e06 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008da8:	4b33      	ldr	r3, [pc, #204]	; (8008e78 <xTaskResumeAll+0x11c>)
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	3318      	adds	r3, #24
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fe fd86 	bl	80078c6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fe fd81 	bl	80078c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc8:	2201      	movs	r2, #1
 8008dca:	409a      	lsls	r2, r3
 8008dcc:	4b2b      	ldr	r3, [pc, #172]	; (8008e7c <xTaskResumeAll+0x120>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	4a2a      	ldr	r2, [pc, #168]	; (8008e7c <xTaskResumeAll+0x120>)
 8008dd4:	6013      	str	r3, [r2, #0]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dda:	4613      	mov	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4a27      	ldr	r2, [pc, #156]	; (8008e80 <xTaskResumeAll+0x124>)
 8008de4:	441a      	add	r2, r3
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	3304      	adds	r3, #4
 8008dea:	4619      	mov	r1, r3
 8008dec:	4610      	mov	r0, r2
 8008dee:	f7fe fd0d 	bl	800780c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df6:	4b23      	ldr	r3, [pc, #140]	; (8008e84 <xTaskResumeAll+0x128>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d302      	bcc.n	8008e06 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008e00:	4b21      	ldr	r3, [pc, #132]	; (8008e88 <xTaskResumeAll+0x12c>)
 8008e02:	2201      	movs	r2, #1
 8008e04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e06:	4b1c      	ldr	r3, [pc, #112]	; (8008e78 <xTaskResumeAll+0x11c>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1cc      	bne.n	8008da8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d001      	beq.n	8008e18 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e14:	f000 fb3e 	bl	8009494 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e18:	4b1c      	ldr	r3, [pc, #112]	; (8008e8c <xTaskResumeAll+0x130>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d010      	beq.n	8008e46 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e24:	f000 f858 	bl	8008ed8 <xTaskIncrementTick>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d002      	beq.n	8008e34 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008e2e:	4b16      	ldr	r3, [pc, #88]	; (8008e88 <xTaskResumeAll+0x12c>)
 8008e30:	2201      	movs	r2, #1
 8008e32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	3b01      	subs	r3, #1
 8008e38:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1f1      	bne.n	8008e24 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008e40:	4b12      	ldr	r3, [pc, #72]	; (8008e8c <xTaskResumeAll+0x130>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e46:	4b10      	ldr	r3, [pc, #64]	; (8008e88 <xTaskResumeAll+0x12c>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d009      	beq.n	8008e62 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e52:	4b0f      	ldr	r3, [pc, #60]	; (8008e90 <xTaskResumeAll+0x134>)
 8008e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e58:	601a      	str	r2, [r3, #0]
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e62:	f000 feb7 	bl	8009bd4 <vPortExitCritical>

	return xAlreadyYielded;
 8008e66:	68bb      	ldr	r3, [r7, #8]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	200004b8 	.word	0x200004b8
 8008e74:	20000490 	.word	0x20000490
 8008e78:	20000450 	.word	0x20000450
 8008e7c:	20000498 	.word	0x20000498
 8008e80:	20000394 	.word	0x20000394
 8008e84:	20000390 	.word	0x20000390
 8008e88:	200004a4 	.word	0x200004a4
 8008e8c:	200004a0 	.word	0x200004a0
 8008e90:	e000ed04 	.word	0xe000ed04

08008e94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008e9a:	4b05      	ldr	r3, [pc, #20]	; (8008eb0 <xTaskGetTickCount+0x1c>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ea0:	687b      	ldr	r3, [r7, #4]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	20000494 	.word	0x20000494

08008eb4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008eba:	f000 ff3d 	bl	8009d38 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008ec2:	4b04      	ldr	r3, [pc, #16]	; (8008ed4 <xTaskGetTickCountFromISR+0x20>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ec8:	683b      	ldr	r3, [r7, #0]
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	20000494 	.word	0x20000494

08008ed8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ee2:	4b4e      	ldr	r3, [pc, #312]	; (800901c <xTaskIncrementTick+0x144>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f040 808e 	bne.w	8009008 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008eec:	4b4c      	ldr	r3, [pc, #304]	; (8009020 <xTaskIncrementTick+0x148>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ef4:	4a4a      	ldr	r2, [pc, #296]	; (8009020 <xTaskIncrementTick+0x148>)
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d120      	bne.n	8008f42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f00:	4b48      	ldr	r3, [pc, #288]	; (8009024 <xTaskIncrementTick+0x14c>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00a      	beq.n	8008f20 <xTaskIncrementTick+0x48>
	__asm volatile
 8008f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0e:	f383 8811 	msr	BASEPRI, r3
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	603b      	str	r3, [r7, #0]
}
 8008f1c:	bf00      	nop
 8008f1e:	e7fe      	b.n	8008f1e <xTaskIncrementTick+0x46>
 8008f20:	4b40      	ldr	r3, [pc, #256]	; (8009024 <xTaskIncrementTick+0x14c>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	60fb      	str	r3, [r7, #12]
 8008f26:	4b40      	ldr	r3, [pc, #256]	; (8009028 <xTaskIncrementTick+0x150>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a3e      	ldr	r2, [pc, #248]	; (8009024 <xTaskIncrementTick+0x14c>)
 8008f2c:	6013      	str	r3, [r2, #0]
 8008f2e:	4a3e      	ldr	r2, [pc, #248]	; (8009028 <xTaskIncrementTick+0x150>)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6013      	str	r3, [r2, #0]
 8008f34:	4b3d      	ldr	r3, [pc, #244]	; (800902c <xTaskIncrementTick+0x154>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	4a3c      	ldr	r2, [pc, #240]	; (800902c <xTaskIncrementTick+0x154>)
 8008f3c:	6013      	str	r3, [r2, #0]
 8008f3e:	f000 faa9 	bl	8009494 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f42:	4b3b      	ldr	r3, [pc, #236]	; (8009030 <xTaskIncrementTick+0x158>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d348      	bcc.n	8008fde <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f4c:	4b35      	ldr	r3, [pc, #212]	; (8009024 <xTaskIncrementTick+0x14c>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d104      	bne.n	8008f60 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f56:	4b36      	ldr	r3, [pc, #216]	; (8009030 <xTaskIncrementTick+0x158>)
 8008f58:	f04f 32ff 	mov.w	r2, #4294967295
 8008f5c:	601a      	str	r2, [r3, #0]
					break;
 8008f5e:	e03e      	b.n	8008fde <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f60:	4b30      	ldr	r3, [pc, #192]	; (8009024 <xTaskIncrementTick+0x14c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f70:	693a      	ldr	r2, [r7, #16]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d203      	bcs.n	8008f80 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f78:	4a2d      	ldr	r2, [pc, #180]	; (8009030 <xTaskIncrementTick+0x158>)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f7e:	e02e      	b.n	8008fde <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	3304      	adds	r3, #4
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7fe fc9e 	bl	80078c6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d004      	beq.n	8008f9c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	3318      	adds	r3, #24
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fe fc95 	bl	80078c6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	409a      	lsls	r2, r3
 8008fa4:	4b23      	ldr	r3, [pc, #140]	; (8009034 <xTaskIncrementTick+0x15c>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	4a22      	ldr	r2, [pc, #136]	; (8009034 <xTaskIncrementTick+0x15c>)
 8008fac:	6013      	str	r3, [r2, #0]
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4a1f      	ldr	r2, [pc, #124]	; (8009038 <xTaskIncrementTick+0x160>)
 8008fbc:	441a      	add	r2, r3
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	3304      	adds	r3, #4
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	4610      	mov	r0, r2
 8008fc6:	f7fe fc21 	bl	800780c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fce:	4b1b      	ldr	r3, [pc, #108]	; (800903c <xTaskIncrementTick+0x164>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d3b9      	bcc.n	8008f4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fdc:	e7b6      	b.n	8008f4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008fde:	4b17      	ldr	r3, [pc, #92]	; (800903c <xTaskIncrementTick+0x164>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe4:	4914      	ldr	r1, [pc, #80]	; (8009038 <xTaskIncrementTick+0x160>)
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4413      	add	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	440b      	add	r3, r1
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d901      	bls.n	8008ffa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ffa:	4b11      	ldr	r3, [pc, #68]	; (8009040 <xTaskIncrementTick+0x168>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d007      	beq.n	8009012 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009002:	2301      	movs	r3, #1
 8009004:	617b      	str	r3, [r7, #20]
 8009006:	e004      	b.n	8009012 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009008:	4b0e      	ldr	r3, [pc, #56]	; (8009044 <xTaskIncrementTick+0x16c>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	3301      	adds	r3, #1
 800900e:	4a0d      	ldr	r2, [pc, #52]	; (8009044 <xTaskIncrementTick+0x16c>)
 8009010:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009012:	697b      	ldr	r3, [r7, #20]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3718      	adds	r7, #24
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	200004b8 	.word	0x200004b8
 8009020:	20000494 	.word	0x20000494
 8009024:	20000448 	.word	0x20000448
 8009028:	2000044c 	.word	0x2000044c
 800902c:	200004a8 	.word	0x200004a8
 8009030:	200004b0 	.word	0x200004b0
 8009034:	20000498 	.word	0x20000498
 8009038:	20000394 	.word	0x20000394
 800903c:	20000390 	.word	0x20000390
 8009040:	200004a4 	.word	0x200004a4
 8009044:	200004a0 	.word	0x200004a0

08009048 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009048:	b480      	push	{r7}
 800904a:	b087      	sub	sp, #28
 800904c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800904e:	4b29      	ldr	r3, [pc, #164]	; (80090f4 <vTaskSwitchContext+0xac>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d003      	beq.n	800905e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009056:	4b28      	ldr	r3, [pc, #160]	; (80090f8 <vTaskSwitchContext+0xb0>)
 8009058:	2201      	movs	r2, #1
 800905a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800905c:	e044      	b.n	80090e8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800905e:	4b26      	ldr	r3, [pc, #152]	; (80090f8 <vTaskSwitchContext+0xb0>)
 8009060:	2200      	movs	r2, #0
 8009062:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009064:	4b25      	ldr	r3, [pc, #148]	; (80090fc <vTaskSwitchContext+0xb4>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	fab3 f383 	clz	r3, r3
 8009070:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009072:	7afb      	ldrb	r3, [r7, #11]
 8009074:	f1c3 031f 	rsb	r3, r3, #31
 8009078:	617b      	str	r3, [r7, #20]
 800907a:	4921      	ldr	r1, [pc, #132]	; (8009100 <vTaskSwitchContext+0xb8>)
 800907c:	697a      	ldr	r2, [r7, #20]
 800907e:	4613      	mov	r3, r2
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	4413      	add	r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	440b      	add	r3, r1
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d10a      	bne.n	80090a4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800908e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009092:	f383 8811 	msr	BASEPRI, r3
 8009096:	f3bf 8f6f 	isb	sy
 800909a:	f3bf 8f4f 	dsb	sy
 800909e:	607b      	str	r3, [r7, #4]
}
 80090a0:	bf00      	nop
 80090a2:	e7fe      	b.n	80090a2 <vTaskSwitchContext+0x5a>
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	4613      	mov	r3, r2
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	4413      	add	r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4a14      	ldr	r2, [pc, #80]	; (8009100 <vTaskSwitchContext+0xb8>)
 80090b0:	4413      	add	r3, r2
 80090b2:	613b      	str	r3, [r7, #16]
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	685a      	ldr	r2, [r3, #4]
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	605a      	str	r2, [r3, #4]
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	685a      	ldr	r2, [r3, #4]
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	3308      	adds	r3, #8
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d104      	bne.n	80090d4 <vTaskSwitchContext+0x8c>
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	685a      	ldr	r2, [r3, #4]
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	605a      	str	r2, [r3, #4]
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	4a0a      	ldr	r2, [pc, #40]	; (8009104 <vTaskSwitchContext+0xbc>)
 80090dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80090de:	4b09      	ldr	r3, [pc, #36]	; (8009104 <vTaskSwitchContext+0xbc>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	334c      	adds	r3, #76	; 0x4c
 80090e4:	4a08      	ldr	r2, [pc, #32]	; (8009108 <vTaskSwitchContext+0xc0>)
 80090e6:	6013      	str	r3, [r2, #0]
}
 80090e8:	bf00      	nop
 80090ea:	371c      	adds	r7, #28
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr
 80090f4:	200004b8 	.word	0x200004b8
 80090f8:	200004a4 	.word	0x200004a4
 80090fc:	20000498 	.word	0x20000498
 8009100:	20000394 	.word	0x20000394
 8009104:	20000390 	.word	0x20000390
 8009108:	20000020 	.word	0x20000020

0800910c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10a      	bne.n	8009132 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800911c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	60fb      	str	r3, [r7, #12]
}
 800912e:	bf00      	nop
 8009130:	e7fe      	b.n	8009130 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009132:	4b07      	ldr	r3, [pc, #28]	; (8009150 <vTaskPlaceOnEventList+0x44>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	3318      	adds	r3, #24
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7fe fb8a 	bl	8007854 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009140:	2101      	movs	r1, #1
 8009142:	6838      	ldr	r0, [r7, #0]
 8009144:	f000 fb82 	bl	800984c <prvAddCurrentTaskToDelayedList>
}
 8009148:	bf00      	nop
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	20000390 	.word	0x20000390

08009154 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b086      	sub	sp, #24
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d10a      	bne.n	8009180 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800916a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916e:	f383 8811 	msr	BASEPRI, r3
 8009172:	f3bf 8f6f 	isb	sy
 8009176:	f3bf 8f4f 	dsb	sy
 800917a:	60fb      	str	r3, [r7, #12]
}
 800917c:	bf00      	nop
 800917e:	e7fe      	b.n	800917e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	3318      	adds	r3, #24
 8009184:	4618      	mov	r0, r3
 8009186:	f7fe fb9e 	bl	80078c6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800918a:	4b1d      	ldr	r3, [pc, #116]	; (8009200 <xTaskRemoveFromEventList+0xac>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d11c      	bne.n	80091cc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	3304      	adds	r3, #4
 8009196:	4618      	mov	r0, r3
 8009198:	f7fe fb95 	bl	80078c6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a0:	2201      	movs	r2, #1
 80091a2:	409a      	lsls	r2, r3
 80091a4:	4b17      	ldr	r3, [pc, #92]	; (8009204 <xTaskRemoveFromEventList+0xb0>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	4a16      	ldr	r2, [pc, #88]	; (8009204 <xTaskRemoveFromEventList+0xb0>)
 80091ac:	6013      	str	r3, [r2, #0]
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091b2:	4613      	mov	r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	4413      	add	r3, r2
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4a13      	ldr	r2, [pc, #76]	; (8009208 <xTaskRemoveFromEventList+0xb4>)
 80091bc:	441a      	add	r2, r3
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	3304      	adds	r3, #4
 80091c2:	4619      	mov	r1, r3
 80091c4:	4610      	mov	r0, r2
 80091c6:	f7fe fb21 	bl	800780c <vListInsertEnd>
 80091ca:	e005      	b.n	80091d8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	3318      	adds	r3, #24
 80091d0:	4619      	mov	r1, r3
 80091d2:	480e      	ldr	r0, [pc, #56]	; (800920c <xTaskRemoveFromEventList+0xb8>)
 80091d4:	f7fe fb1a 	bl	800780c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091dc:	4b0c      	ldr	r3, [pc, #48]	; (8009210 <xTaskRemoveFromEventList+0xbc>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d905      	bls.n	80091f2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80091e6:	2301      	movs	r3, #1
 80091e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80091ea:	4b0a      	ldr	r3, [pc, #40]	; (8009214 <xTaskRemoveFromEventList+0xc0>)
 80091ec:	2201      	movs	r2, #1
 80091ee:	601a      	str	r2, [r3, #0]
 80091f0:	e001      	b.n	80091f6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80091f2:	2300      	movs	r3, #0
 80091f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80091f6:	697b      	ldr	r3, [r7, #20]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3718      	adds	r7, #24
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	200004b8 	.word	0x200004b8
 8009204:	20000498 	.word	0x20000498
 8009208:	20000394 	.word	0x20000394
 800920c:	20000450 	.word	0x20000450
 8009210:	20000390 	.word	0x20000390
 8009214:	200004a4 	.word	0x200004a4

08009218 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009220:	4b06      	ldr	r3, [pc, #24]	; (800923c <vTaskInternalSetTimeOutState+0x24>)
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009228:	4b05      	ldr	r3, [pc, #20]	; (8009240 <vTaskInternalSetTimeOutState+0x28>)
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	605a      	str	r2, [r3, #4]
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	200004a8 	.word	0x200004a8
 8009240:	20000494 	.word	0x20000494

08009244 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b088      	sub	sp, #32
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10a      	bne.n	800926a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	613b      	str	r3, [r7, #16]
}
 8009266:	bf00      	nop
 8009268:	e7fe      	b.n	8009268 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d10a      	bne.n	8009286 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	60fb      	str	r3, [r7, #12]
}
 8009282:	bf00      	nop
 8009284:	e7fe      	b.n	8009284 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009286:	f000 fc75 	bl	8009b74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800928a:	4b1d      	ldr	r3, [pc, #116]	; (8009300 <xTaskCheckForTimeOut+0xbc>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	69ba      	ldr	r2, [r7, #24]
 8009296:	1ad3      	subs	r3, r2, r3
 8009298:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a2:	d102      	bne.n	80092aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80092a4:	2300      	movs	r3, #0
 80092a6:	61fb      	str	r3, [r7, #28]
 80092a8:	e023      	b.n	80092f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	4b15      	ldr	r3, [pc, #84]	; (8009304 <xTaskCheckForTimeOut+0xc0>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d007      	beq.n	80092c6 <xTaskCheckForTimeOut+0x82>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	69ba      	ldr	r2, [r7, #24]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d302      	bcc.n	80092c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80092c0:	2301      	movs	r3, #1
 80092c2:	61fb      	str	r3, [r7, #28]
 80092c4:	e015      	b.n	80092f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d20b      	bcs.n	80092e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	1ad2      	subs	r2, r2, r3
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7ff ff9b 	bl	8009218 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80092e2:	2300      	movs	r3, #0
 80092e4:	61fb      	str	r3, [r7, #28]
 80092e6:	e004      	b.n	80092f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	2200      	movs	r2, #0
 80092ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80092ee:	2301      	movs	r3, #1
 80092f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80092f2:	f000 fc6f 	bl	8009bd4 <vPortExitCritical>

	return xReturn;
 80092f6:	69fb      	ldr	r3, [r7, #28]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3720      	adds	r7, #32
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	20000494 	.word	0x20000494
 8009304:	200004a8 	.word	0x200004a8

08009308 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009308:	b480      	push	{r7}
 800930a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800930c:	4b03      	ldr	r3, [pc, #12]	; (800931c <vTaskMissedYield+0x14>)
 800930e:	2201      	movs	r2, #1
 8009310:	601a      	str	r2, [r3, #0]
}
 8009312:	bf00      	nop
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr
 800931c:	200004a4 	.word	0x200004a4

08009320 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009328:	f000 f852 	bl	80093d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800932c:	4b06      	ldr	r3, [pc, #24]	; (8009348 <prvIdleTask+0x28>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2b01      	cmp	r3, #1
 8009332:	d9f9      	bls.n	8009328 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009334:	4b05      	ldr	r3, [pc, #20]	; (800934c <prvIdleTask+0x2c>)
 8009336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800933a:	601a      	str	r2, [r3, #0]
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009344:	e7f0      	b.n	8009328 <prvIdleTask+0x8>
 8009346:	bf00      	nop
 8009348:	20000394 	.word	0x20000394
 800934c:	e000ed04 	.word	0xe000ed04

08009350 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009356:	2300      	movs	r3, #0
 8009358:	607b      	str	r3, [r7, #4]
 800935a:	e00c      	b.n	8009376 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	4613      	mov	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	4a12      	ldr	r2, [pc, #72]	; (80093b0 <prvInitialiseTaskLists+0x60>)
 8009368:	4413      	add	r3, r2
 800936a:	4618      	mov	r0, r3
 800936c:	f7fe fa21 	bl	80077b2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	3301      	adds	r3, #1
 8009374:	607b      	str	r3, [r7, #4]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2b06      	cmp	r3, #6
 800937a:	d9ef      	bls.n	800935c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800937c:	480d      	ldr	r0, [pc, #52]	; (80093b4 <prvInitialiseTaskLists+0x64>)
 800937e:	f7fe fa18 	bl	80077b2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009382:	480d      	ldr	r0, [pc, #52]	; (80093b8 <prvInitialiseTaskLists+0x68>)
 8009384:	f7fe fa15 	bl	80077b2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009388:	480c      	ldr	r0, [pc, #48]	; (80093bc <prvInitialiseTaskLists+0x6c>)
 800938a:	f7fe fa12 	bl	80077b2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800938e:	480c      	ldr	r0, [pc, #48]	; (80093c0 <prvInitialiseTaskLists+0x70>)
 8009390:	f7fe fa0f 	bl	80077b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009394:	480b      	ldr	r0, [pc, #44]	; (80093c4 <prvInitialiseTaskLists+0x74>)
 8009396:	f7fe fa0c 	bl	80077b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800939a:	4b0b      	ldr	r3, [pc, #44]	; (80093c8 <prvInitialiseTaskLists+0x78>)
 800939c:	4a05      	ldr	r2, [pc, #20]	; (80093b4 <prvInitialiseTaskLists+0x64>)
 800939e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80093a0:	4b0a      	ldr	r3, [pc, #40]	; (80093cc <prvInitialiseTaskLists+0x7c>)
 80093a2:	4a05      	ldr	r2, [pc, #20]	; (80093b8 <prvInitialiseTaskLists+0x68>)
 80093a4:	601a      	str	r2, [r3, #0]
}
 80093a6:	bf00      	nop
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	20000394 	.word	0x20000394
 80093b4:	20000420 	.word	0x20000420
 80093b8:	20000434 	.word	0x20000434
 80093bc:	20000450 	.word	0x20000450
 80093c0:	20000464 	.word	0x20000464
 80093c4:	2000047c 	.word	0x2000047c
 80093c8:	20000448 	.word	0x20000448
 80093cc:	2000044c 	.word	0x2000044c

080093d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093d6:	e019      	b.n	800940c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80093d8:	f000 fbcc 	bl	8009b74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093dc:	4b10      	ldr	r3, [pc, #64]	; (8009420 <prvCheckTasksWaitingTermination+0x50>)
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	3304      	adds	r3, #4
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7fe fa6c 	bl	80078c6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80093ee:	4b0d      	ldr	r3, [pc, #52]	; (8009424 <prvCheckTasksWaitingTermination+0x54>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	3b01      	subs	r3, #1
 80093f4:	4a0b      	ldr	r2, [pc, #44]	; (8009424 <prvCheckTasksWaitingTermination+0x54>)
 80093f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80093f8:	4b0b      	ldr	r3, [pc, #44]	; (8009428 <prvCheckTasksWaitingTermination+0x58>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	3b01      	subs	r3, #1
 80093fe:	4a0a      	ldr	r2, [pc, #40]	; (8009428 <prvCheckTasksWaitingTermination+0x58>)
 8009400:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009402:	f000 fbe7 	bl	8009bd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f810 	bl	800942c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800940c:	4b06      	ldr	r3, [pc, #24]	; (8009428 <prvCheckTasksWaitingTermination+0x58>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1e1      	bne.n	80093d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009414:	bf00      	nop
 8009416:	bf00      	nop
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	20000464 	.word	0x20000464
 8009424:	20000490 	.word	0x20000490
 8009428:	20000478 	.word	0x20000478

0800942c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	334c      	adds	r3, #76	; 0x4c
 8009438:	4618      	mov	r0, r3
 800943a:	f00e fa19 	bl	8017870 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009444:	2b00      	cmp	r3, #0
 8009446:	d108      	bne.n	800945a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944c:	4618      	mov	r0, r3
 800944e:	f000 fd7f 	bl	8009f50 <vPortFree>
				vPortFree( pxTCB );
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 fd7c 	bl	8009f50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009458:	e018      	b.n	800948c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009460:	2b01      	cmp	r3, #1
 8009462:	d103      	bne.n	800946c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fd73 	bl	8009f50 <vPortFree>
	}
 800946a:	e00f      	b.n	800948c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009472:	2b02      	cmp	r3, #2
 8009474:	d00a      	beq.n	800948c <prvDeleteTCB+0x60>
	__asm volatile
 8009476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947a:	f383 8811 	msr	BASEPRI, r3
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	60fb      	str	r3, [r7, #12]
}
 8009488:	bf00      	nop
 800948a:	e7fe      	b.n	800948a <prvDeleteTCB+0x5e>
	}
 800948c:	bf00      	nop
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800949a:	4b0c      	ldr	r3, [pc, #48]	; (80094cc <prvResetNextTaskUnblockTime+0x38>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d104      	bne.n	80094ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80094a4:	4b0a      	ldr	r3, [pc, #40]	; (80094d0 <prvResetNextTaskUnblockTime+0x3c>)
 80094a6:	f04f 32ff 	mov.w	r2, #4294967295
 80094aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80094ac:	e008      	b.n	80094c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094ae:	4b07      	ldr	r3, [pc, #28]	; (80094cc <prvResetNextTaskUnblockTime+0x38>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	4a04      	ldr	r2, [pc, #16]	; (80094d0 <prvResetNextTaskUnblockTime+0x3c>)
 80094be:	6013      	str	r3, [r2, #0]
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	20000448 	.word	0x20000448
 80094d0:	200004b0 	.word	0x200004b0

080094d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80094da:	4b0b      	ldr	r3, [pc, #44]	; (8009508 <xTaskGetSchedulerState+0x34>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d102      	bne.n	80094e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80094e2:	2301      	movs	r3, #1
 80094e4:	607b      	str	r3, [r7, #4]
 80094e6:	e008      	b.n	80094fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094e8:	4b08      	ldr	r3, [pc, #32]	; (800950c <xTaskGetSchedulerState+0x38>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d102      	bne.n	80094f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80094f0:	2302      	movs	r3, #2
 80094f2:	607b      	str	r3, [r7, #4]
 80094f4:	e001      	b.n	80094fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80094f6:	2300      	movs	r3, #0
 80094f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80094fa:	687b      	ldr	r3, [r7, #4]
	}
 80094fc:	4618      	mov	r0, r3
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr
 8009508:	2000049c 	.word	0x2000049c
 800950c:	200004b8 	.word	0x200004b8

08009510 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800951c:	2300      	movs	r3, #0
 800951e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d05e      	beq.n	80095e4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952a:	4b31      	ldr	r3, [pc, #196]	; (80095f0 <xTaskPriorityInherit+0xe0>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009530:	429a      	cmp	r2, r3
 8009532:	d24e      	bcs.n	80095d2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	2b00      	cmp	r3, #0
 800953a:	db06      	blt.n	800954a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800953c:	4b2c      	ldr	r3, [pc, #176]	; (80095f0 <xTaskPriorityInherit+0xe0>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009542:	f1c3 0207 	rsb	r2, r3, #7
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	6959      	ldr	r1, [r3, #20]
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009552:	4613      	mov	r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	4413      	add	r3, r2
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4a26      	ldr	r2, [pc, #152]	; (80095f4 <xTaskPriorityInherit+0xe4>)
 800955c:	4413      	add	r3, r2
 800955e:	4299      	cmp	r1, r3
 8009560:	d12f      	bne.n	80095c2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	3304      	adds	r3, #4
 8009566:	4618      	mov	r0, r3
 8009568:	f7fe f9ad 	bl	80078c6 <uxListRemove>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10a      	bne.n	8009588 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009576:	2201      	movs	r2, #1
 8009578:	fa02 f303 	lsl.w	r3, r2, r3
 800957c:	43da      	mvns	r2, r3
 800957e:	4b1e      	ldr	r3, [pc, #120]	; (80095f8 <xTaskPriorityInherit+0xe8>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4013      	ands	r3, r2
 8009584:	4a1c      	ldr	r2, [pc, #112]	; (80095f8 <xTaskPriorityInherit+0xe8>)
 8009586:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009588:	4b19      	ldr	r3, [pc, #100]	; (80095f0 <xTaskPriorityInherit+0xe0>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009596:	2201      	movs	r2, #1
 8009598:	409a      	lsls	r2, r3
 800959a:	4b17      	ldr	r3, [pc, #92]	; (80095f8 <xTaskPriorityInherit+0xe8>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4313      	orrs	r3, r2
 80095a0:	4a15      	ldr	r2, [pc, #84]	; (80095f8 <xTaskPriorityInherit+0xe8>)
 80095a2:	6013      	str	r3, [r2, #0]
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095a8:	4613      	mov	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	4413      	add	r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	4a10      	ldr	r2, [pc, #64]	; (80095f4 <xTaskPriorityInherit+0xe4>)
 80095b2:	441a      	add	r2, r3
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	3304      	adds	r3, #4
 80095b8:	4619      	mov	r1, r3
 80095ba:	4610      	mov	r0, r2
 80095bc:	f7fe f926 	bl	800780c <vListInsertEnd>
 80095c0:	e004      	b.n	80095cc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80095c2:	4b0b      	ldr	r3, [pc, #44]	; (80095f0 <xTaskPriorityInherit+0xe0>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80095cc:	2301      	movs	r3, #1
 80095ce:	60fb      	str	r3, [r7, #12]
 80095d0:	e008      	b.n	80095e4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095d6:	4b06      	ldr	r3, [pc, #24]	; (80095f0 <xTaskPriorityInherit+0xe0>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095dc:	429a      	cmp	r2, r3
 80095de:	d201      	bcs.n	80095e4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80095e0:	2301      	movs	r3, #1
 80095e2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80095e4:	68fb      	ldr	r3, [r7, #12]
	}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	20000390 	.word	0x20000390
 80095f4:	20000394 	.word	0x20000394
 80095f8:	20000498 	.word	0x20000498

080095fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009608:	2300      	movs	r3, #0
 800960a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d06e      	beq.n	80096f0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009612:	4b3a      	ldr	r3, [pc, #232]	; (80096fc <xTaskPriorityDisinherit+0x100>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	693a      	ldr	r2, [r7, #16]
 8009618:	429a      	cmp	r2, r3
 800961a:	d00a      	beq.n	8009632 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800961c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	60fb      	str	r3, [r7, #12]
}
 800962e:	bf00      	nop
 8009630:	e7fe      	b.n	8009630 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009636:	2b00      	cmp	r3, #0
 8009638:	d10a      	bne.n	8009650 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	60bb      	str	r3, [r7, #8]
}
 800964c:	bf00      	nop
 800964e:	e7fe      	b.n	800964e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009654:	1e5a      	subs	r2, r3, #1
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009662:	429a      	cmp	r2, r3
 8009664:	d044      	beq.n	80096f0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800966a:	2b00      	cmp	r3, #0
 800966c:	d140      	bne.n	80096f0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	3304      	adds	r3, #4
 8009672:	4618      	mov	r0, r3
 8009674:	f7fe f927 	bl	80078c6 <uxListRemove>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d115      	bne.n	80096aa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009682:	491f      	ldr	r1, [pc, #124]	; (8009700 <xTaskPriorityDisinherit+0x104>)
 8009684:	4613      	mov	r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	4413      	add	r3, r2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	440b      	add	r3, r1
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10a      	bne.n	80096aa <xTaskPriorityDisinherit+0xae>
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009698:	2201      	movs	r2, #1
 800969a:	fa02 f303 	lsl.w	r3, r2, r3
 800969e:	43da      	mvns	r2, r3
 80096a0:	4b18      	ldr	r3, [pc, #96]	; (8009704 <xTaskPriorityDisinherit+0x108>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4013      	ands	r3, r2
 80096a6:	4a17      	ldr	r2, [pc, #92]	; (8009704 <xTaskPriorityDisinherit+0x108>)
 80096a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b6:	f1c3 0207 	rsb	r2, r3, #7
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c2:	2201      	movs	r2, #1
 80096c4:	409a      	lsls	r2, r3
 80096c6:	4b0f      	ldr	r3, [pc, #60]	; (8009704 <xTaskPriorityDisinherit+0x108>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	4a0d      	ldr	r2, [pc, #52]	; (8009704 <xTaskPriorityDisinherit+0x108>)
 80096ce:	6013      	str	r3, [r2, #0]
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d4:	4613      	mov	r3, r2
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	4413      	add	r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	4a08      	ldr	r2, [pc, #32]	; (8009700 <xTaskPriorityDisinherit+0x104>)
 80096de:	441a      	add	r2, r3
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	3304      	adds	r3, #4
 80096e4:	4619      	mov	r1, r3
 80096e6:	4610      	mov	r0, r2
 80096e8:	f7fe f890 	bl	800780c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80096ec:	2301      	movs	r3, #1
 80096ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80096f0:	697b      	ldr	r3, [r7, #20]
	}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	20000390 	.word	0x20000390
 8009700:	20000394 	.word	0x20000394
 8009704:	20000498 	.word	0x20000498

08009708 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009708:	b580      	push	{r7, lr}
 800970a:	b088      	sub	sp, #32
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009716:	2301      	movs	r3, #1
 8009718:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d077      	beq.n	8009810 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009724:	2b00      	cmp	r3, #0
 8009726:	d10a      	bne.n	800973e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972c:	f383 8811 	msr	BASEPRI, r3
 8009730:	f3bf 8f6f 	isb	sy
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	60fb      	str	r3, [r7, #12]
}
 800973a:	bf00      	nop
 800973c:	e7fe      	b.n	800973c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009742:	683a      	ldr	r2, [r7, #0]
 8009744:	429a      	cmp	r2, r3
 8009746:	d902      	bls.n	800974e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	61fb      	str	r3, [r7, #28]
 800974c:	e002      	b.n	8009754 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009752:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009758:	69fa      	ldr	r2, [r7, #28]
 800975a:	429a      	cmp	r2, r3
 800975c:	d058      	beq.n	8009810 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009762:	697a      	ldr	r2, [r7, #20]
 8009764:	429a      	cmp	r2, r3
 8009766:	d153      	bne.n	8009810 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009768:	4b2b      	ldr	r3, [pc, #172]	; (8009818 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	69ba      	ldr	r2, [r7, #24]
 800976e:	429a      	cmp	r2, r3
 8009770:	d10a      	bne.n	8009788 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009776:	f383 8811 	msr	BASEPRI, r3
 800977a:	f3bf 8f6f 	isb	sy
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	60bb      	str	r3, [r7, #8]
}
 8009784:	bf00      	nop
 8009786:	e7fe      	b.n	8009786 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	69fa      	ldr	r2, [r7, #28]
 8009792:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	2b00      	cmp	r3, #0
 800979a:	db04      	blt.n	80097a6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	f1c3 0207 	rsb	r2, r3, #7
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	6959      	ldr	r1, [r3, #20]
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	4613      	mov	r3, r2
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	4413      	add	r3, r2
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	4a19      	ldr	r2, [pc, #100]	; (800981c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80097b6:	4413      	add	r3, r2
 80097b8:	4299      	cmp	r1, r3
 80097ba:	d129      	bne.n	8009810 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097bc:	69bb      	ldr	r3, [r7, #24]
 80097be:	3304      	adds	r3, #4
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fe f880 	bl	80078c6 <uxListRemove>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10a      	bne.n	80097e2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d0:	2201      	movs	r2, #1
 80097d2:	fa02 f303 	lsl.w	r3, r2, r3
 80097d6:	43da      	mvns	r2, r3
 80097d8:	4b11      	ldr	r3, [pc, #68]	; (8009820 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4013      	ands	r3, r2
 80097de:	4a10      	ldr	r2, [pc, #64]	; (8009820 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80097e0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e6:	2201      	movs	r2, #1
 80097e8:	409a      	lsls	r2, r3
 80097ea:	4b0d      	ldr	r3, [pc, #52]	; (8009820 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4313      	orrs	r3, r2
 80097f0:	4a0b      	ldr	r2, [pc, #44]	; (8009820 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80097f2:	6013      	str	r3, [r2, #0]
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f8:	4613      	mov	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4a06      	ldr	r2, [pc, #24]	; (800981c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009802:	441a      	add	r2, r3
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	3304      	adds	r3, #4
 8009808:	4619      	mov	r1, r3
 800980a:	4610      	mov	r0, r2
 800980c:	f7fd fffe 	bl	800780c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009810:	bf00      	nop
 8009812:	3720      	adds	r7, #32
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	20000390 	.word	0x20000390
 800981c:	20000394 	.word	0x20000394
 8009820:	20000498 	.word	0x20000498

08009824 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009824:	b480      	push	{r7}
 8009826:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009828:	4b07      	ldr	r3, [pc, #28]	; (8009848 <pvTaskIncrementMutexHeldCount+0x24>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d004      	beq.n	800983a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009830:	4b05      	ldr	r3, [pc, #20]	; (8009848 <pvTaskIncrementMutexHeldCount+0x24>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009836:	3201      	adds	r2, #1
 8009838:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800983a:	4b03      	ldr	r3, [pc, #12]	; (8009848 <pvTaskIncrementMutexHeldCount+0x24>)
 800983c:	681b      	ldr	r3, [r3, #0]
	}
 800983e:	4618      	mov	r0, r3
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr
 8009848:	20000390 	.word	0x20000390

0800984c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009856:	4b29      	ldr	r3, [pc, #164]	; (80098fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800985c:	4b28      	ldr	r3, [pc, #160]	; (8009900 <prvAddCurrentTaskToDelayedList+0xb4>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	3304      	adds	r3, #4
 8009862:	4618      	mov	r0, r3
 8009864:	f7fe f82f 	bl	80078c6 <uxListRemove>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10b      	bne.n	8009886 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800986e:	4b24      	ldr	r3, [pc, #144]	; (8009900 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009874:	2201      	movs	r2, #1
 8009876:	fa02 f303 	lsl.w	r3, r2, r3
 800987a:	43da      	mvns	r2, r3
 800987c:	4b21      	ldr	r3, [pc, #132]	; (8009904 <prvAddCurrentTaskToDelayedList+0xb8>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4013      	ands	r3, r2
 8009882:	4a20      	ldr	r2, [pc, #128]	; (8009904 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009884:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800988c:	d10a      	bne.n	80098a4 <prvAddCurrentTaskToDelayedList+0x58>
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d007      	beq.n	80098a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009894:	4b1a      	ldr	r3, [pc, #104]	; (8009900 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	3304      	adds	r3, #4
 800989a:	4619      	mov	r1, r3
 800989c:	481a      	ldr	r0, [pc, #104]	; (8009908 <prvAddCurrentTaskToDelayedList+0xbc>)
 800989e:	f7fd ffb5 	bl	800780c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80098a2:	e026      	b.n	80098f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4413      	add	r3, r2
 80098aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80098ac:	4b14      	ldr	r3, [pc, #80]	; (8009900 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68ba      	ldr	r2, [r7, #8]
 80098b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d209      	bcs.n	80098d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098bc:	4b13      	ldr	r3, [pc, #76]	; (800990c <prvAddCurrentTaskToDelayedList+0xc0>)
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	4b0f      	ldr	r3, [pc, #60]	; (8009900 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	3304      	adds	r3, #4
 80098c6:	4619      	mov	r1, r3
 80098c8:	4610      	mov	r0, r2
 80098ca:	f7fd ffc3 	bl	8007854 <vListInsert>
}
 80098ce:	e010      	b.n	80098f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098d0:	4b0f      	ldr	r3, [pc, #60]	; (8009910 <prvAddCurrentTaskToDelayedList+0xc4>)
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	4b0a      	ldr	r3, [pc, #40]	; (8009900 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3304      	adds	r3, #4
 80098da:	4619      	mov	r1, r3
 80098dc:	4610      	mov	r0, r2
 80098de:	f7fd ffb9 	bl	8007854 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80098e2:	4b0c      	ldr	r3, [pc, #48]	; (8009914 <prvAddCurrentTaskToDelayedList+0xc8>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	68ba      	ldr	r2, [r7, #8]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d202      	bcs.n	80098f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80098ec:	4a09      	ldr	r2, [pc, #36]	; (8009914 <prvAddCurrentTaskToDelayedList+0xc8>)
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	6013      	str	r3, [r2, #0]
}
 80098f2:	bf00      	nop
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	20000494 	.word	0x20000494
 8009900:	20000390 	.word	0x20000390
 8009904:	20000498 	.word	0x20000498
 8009908:	2000047c 	.word	0x2000047c
 800990c:	2000044c 	.word	0x2000044c
 8009910:	20000448 	.word	0x20000448
 8009914:	200004b0 	.word	0x200004b0

08009918 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	3b04      	subs	r3, #4
 8009928:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009930:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	3b04      	subs	r3, #4
 8009936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	f023 0201 	bic.w	r2, r3, #1
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3b04      	subs	r3, #4
 8009946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009948:	4a0c      	ldr	r2, [pc, #48]	; (800997c <pxPortInitialiseStack+0x64>)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	3b14      	subs	r3, #20
 8009952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	3b04      	subs	r3, #4
 800995e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f06f 0202 	mvn.w	r2, #2
 8009966:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	3b20      	subs	r3, #32
 800996c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800996e:	68fb      	ldr	r3, [r7, #12]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3714      	adds	r7, #20
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr
 800997c:	08009981 	.word	0x08009981

08009980 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009986:	2300      	movs	r3, #0
 8009988:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800998a:	4b12      	ldr	r3, [pc, #72]	; (80099d4 <prvTaskExitError+0x54>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009992:	d00a      	beq.n	80099aa <prvTaskExitError+0x2a>
	__asm volatile
 8009994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009998:	f383 8811 	msr	BASEPRI, r3
 800999c:	f3bf 8f6f 	isb	sy
 80099a0:	f3bf 8f4f 	dsb	sy
 80099a4:	60fb      	str	r3, [r7, #12]
}
 80099a6:	bf00      	nop
 80099a8:	e7fe      	b.n	80099a8 <prvTaskExitError+0x28>
	__asm volatile
 80099aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ae:	f383 8811 	msr	BASEPRI, r3
 80099b2:	f3bf 8f6f 	isb	sy
 80099b6:	f3bf 8f4f 	dsb	sy
 80099ba:	60bb      	str	r3, [r7, #8]
}
 80099bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80099be:	bf00      	nop
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d0fc      	beq.n	80099c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80099c6:	bf00      	nop
 80099c8:	bf00      	nop
 80099ca:	3714      	adds	r7, #20
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr
 80099d4:	20000010 	.word	0x20000010
	...

080099e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80099e0:	4b07      	ldr	r3, [pc, #28]	; (8009a00 <pxCurrentTCBConst2>)
 80099e2:	6819      	ldr	r1, [r3, #0]
 80099e4:	6808      	ldr	r0, [r1, #0]
 80099e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ea:	f380 8809 	msr	PSP, r0
 80099ee:	f3bf 8f6f 	isb	sy
 80099f2:	f04f 0000 	mov.w	r0, #0
 80099f6:	f380 8811 	msr	BASEPRI, r0
 80099fa:	4770      	bx	lr
 80099fc:	f3af 8000 	nop.w

08009a00 <pxCurrentTCBConst2>:
 8009a00:	20000390 	.word	0x20000390
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a04:	bf00      	nop
 8009a06:	bf00      	nop

08009a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a08:	4808      	ldr	r0, [pc, #32]	; (8009a2c <prvPortStartFirstTask+0x24>)
 8009a0a:	6800      	ldr	r0, [r0, #0]
 8009a0c:	6800      	ldr	r0, [r0, #0]
 8009a0e:	f380 8808 	msr	MSP, r0
 8009a12:	f04f 0000 	mov.w	r0, #0
 8009a16:	f380 8814 	msr	CONTROL, r0
 8009a1a:	b662      	cpsie	i
 8009a1c:	b661      	cpsie	f
 8009a1e:	f3bf 8f4f 	dsb	sy
 8009a22:	f3bf 8f6f 	isb	sy
 8009a26:	df00      	svc	0
 8009a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a2a:	bf00      	nop
 8009a2c:	e000ed08 	.word	0xe000ed08

08009a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b086      	sub	sp, #24
 8009a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a36:	4b46      	ldr	r3, [pc, #280]	; (8009b50 <xPortStartScheduler+0x120>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a46      	ldr	r2, [pc, #280]	; (8009b54 <xPortStartScheduler+0x124>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d10a      	bne.n	8009a56 <xPortStartScheduler+0x26>
	__asm volatile
 8009a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	613b      	str	r3, [r7, #16]
}
 8009a52:	bf00      	nop
 8009a54:	e7fe      	b.n	8009a54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a56:	4b3e      	ldr	r3, [pc, #248]	; (8009b50 <xPortStartScheduler+0x120>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a3f      	ldr	r2, [pc, #252]	; (8009b58 <xPortStartScheduler+0x128>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d10a      	bne.n	8009a76 <xPortStartScheduler+0x46>
	__asm volatile
 8009a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a64:	f383 8811 	msr	BASEPRI, r3
 8009a68:	f3bf 8f6f 	isb	sy
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	60fb      	str	r3, [r7, #12]
}
 8009a72:	bf00      	nop
 8009a74:	e7fe      	b.n	8009a74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a76:	4b39      	ldr	r3, [pc, #228]	; (8009b5c <xPortStartScheduler+0x12c>)
 8009a78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	22ff      	movs	r2, #255	; 0xff
 8009a86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a90:	78fb      	ldrb	r3, [r7, #3]
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	4b31      	ldr	r3, [pc, #196]	; (8009b60 <xPortStartScheduler+0x130>)
 8009a9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a9e:	4b31      	ldr	r3, [pc, #196]	; (8009b64 <xPortStartScheduler+0x134>)
 8009aa0:	2207      	movs	r2, #7
 8009aa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009aa4:	e009      	b.n	8009aba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009aa6:	4b2f      	ldr	r3, [pc, #188]	; (8009b64 <xPortStartScheduler+0x134>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	4a2d      	ldr	r2, [pc, #180]	; (8009b64 <xPortStartScheduler+0x134>)
 8009aae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ab0:	78fb      	ldrb	r3, [r7, #3]
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	005b      	lsls	r3, r3, #1
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009aba:	78fb      	ldrb	r3, [r7, #3]
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ac2:	2b80      	cmp	r3, #128	; 0x80
 8009ac4:	d0ef      	beq.n	8009aa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ac6:	4b27      	ldr	r3, [pc, #156]	; (8009b64 <xPortStartScheduler+0x134>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f1c3 0307 	rsb	r3, r3, #7
 8009ace:	2b04      	cmp	r3, #4
 8009ad0:	d00a      	beq.n	8009ae8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad6:	f383 8811 	msr	BASEPRI, r3
 8009ada:	f3bf 8f6f 	isb	sy
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	60bb      	str	r3, [r7, #8]
}
 8009ae4:	bf00      	nop
 8009ae6:	e7fe      	b.n	8009ae6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ae8:	4b1e      	ldr	r3, [pc, #120]	; (8009b64 <xPortStartScheduler+0x134>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	021b      	lsls	r3, r3, #8
 8009aee:	4a1d      	ldr	r2, [pc, #116]	; (8009b64 <xPortStartScheduler+0x134>)
 8009af0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009af2:	4b1c      	ldr	r3, [pc, #112]	; (8009b64 <xPortStartScheduler+0x134>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009afa:	4a1a      	ldr	r2, [pc, #104]	; (8009b64 <xPortStartScheduler+0x134>)
 8009afc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	b2da      	uxtb	r2, r3
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b06:	4b18      	ldr	r3, [pc, #96]	; (8009b68 <xPortStartScheduler+0x138>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a17      	ldr	r2, [pc, #92]	; (8009b68 <xPortStartScheduler+0x138>)
 8009b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b12:	4b15      	ldr	r3, [pc, #84]	; (8009b68 <xPortStartScheduler+0x138>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a14      	ldr	r2, [pc, #80]	; (8009b68 <xPortStartScheduler+0x138>)
 8009b18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009b1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b1e:	f000 f8dd 	bl	8009cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b22:	4b12      	ldr	r3, [pc, #72]	; (8009b6c <xPortStartScheduler+0x13c>)
 8009b24:	2200      	movs	r2, #0
 8009b26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b28:	f000 f8fc 	bl	8009d24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b2c:	4b10      	ldr	r3, [pc, #64]	; (8009b70 <xPortStartScheduler+0x140>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a0f      	ldr	r2, [pc, #60]	; (8009b70 <xPortStartScheduler+0x140>)
 8009b32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009b36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b38:	f7ff ff66 	bl	8009a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b3c:	f7ff fa84 	bl	8009048 <vTaskSwitchContext>
	prvTaskExitError();
 8009b40:	f7ff ff1e 	bl	8009980 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3718      	adds	r7, #24
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	e000ed00 	.word	0xe000ed00
 8009b54:	410fc271 	.word	0x410fc271
 8009b58:	410fc270 	.word	0x410fc270
 8009b5c:	e000e400 	.word	0xe000e400
 8009b60:	200004bc 	.word	0x200004bc
 8009b64:	200004c0 	.word	0x200004c0
 8009b68:	e000ed20 	.word	0xe000ed20
 8009b6c:	20000010 	.word	0x20000010
 8009b70:	e000ef34 	.word	0xe000ef34

08009b74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
	__asm volatile
 8009b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7e:	f383 8811 	msr	BASEPRI, r3
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	607b      	str	r3, [r7, #4]
}
 8009b8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b8e:	4b0f      	ldr	r3, [pc, #60]	; (8009bcc <vPortEnterCritical+0x58>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	3301      	adds	r3, #1
 8009b94:	4a0d      	ldr	r2, [pc, #52]	; (8009bcc <vPortEnterCritical+0x58>)
 8009b96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b98:	4b0c      	ldr	r3, [pc, #48]	; (8009bcc <vPortEnterCritical+0x58>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d10f      	bne.n	8009bc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ba0:	4b0b      	ldr	r3, [pc, #44]	; (8009bd0 <vPortEnterCritical+0x5c>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00a      	beq.n	8009bc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bae:	f383 8811 	msr	BASEPRI, r3
 8009bb2:	f3bf 8f6f 	isb	sy
 8009bb6:	f3bf 8f4f 	dsb	sy
 8009bba:	603b      	str	r3, [r7, #0]
}
 8009bbc:	bf00      	nop
 8009bbe:	e7fe      	b.n	8009bbe <vPortEnterCritical+0x4a>
	}
}
 8009bc0:	bf00      	nop
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr
 8009bcc:	20000010 	.word	0x20000010
 8009bd0:	e000ed04 	.word	0xe000ed04

08009bd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009bda:	4b12      	ldr	r3, [pc, #72]	; (8009c24 <vPortExitCritical+0x50>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d10a      	bne.n	8009bf8 <vPortExitCritical+0x24>
	__asm volatile
 8009be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	607b      	str	r3, [r7, #4]
}
 8009bf4:	bf00      	nop
 8009bf6:	e7fe      	b.n	8009bf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009bf8:	4b0a      	ldr	r3, [pc, #40]	; (8009c24 <vPortExitCritical+0x50>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	4a09      	ldr	r2, [pc, #36]	; (8009c24 <vPortExitCritical+0x50>)
 8009c00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c02:	4b08      	ldr	r3, [pc, #32]	; (8009c24 <vPortExitCritical+0x50>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d105      	bne.n	8009c16 <vPortExitCritical+0x42>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	f383 8811 	msr	BASEPRI, r3
}
 8009c14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c16:	bf00      	nop
 8009c18:	370c      	adds	r7, #12
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	20000010 	.word	0x20000010
	...

08009c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c30:	f3ef 8009 	mrs	r0, PSP
 8009c34:	f3bf 8f6f 	isb	sy
 8009c38:	4b15      	ldr	r3, [pc, #84]	; (8009c90 <pxCurrentTCBConst>)
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	f01e 0f10 	tst.w	lr, #16
 8009c40:	bf08      	it	eq
 8009c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c4a:	6010      	str	r0, [r2, #0]
 8009c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c54:	f380 8811 	msr	BASEPRI, r0
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	f3bf 8f6f 	isb	sy
 8009c60:	f7ff f9f2 	bl	8009048 <vTaskSwitchContext>
 8009c64:	f04f 0000 	mov.w	r0, #0
 8009c68:	f380 8811 	msr	BASEPRI, r0
 8009c6c:	bc09      	pop	{r0, r3}
 8009c6e:	6819      	ldr	r1, [r3, #0]
 8009c70:	6808      	ldr	r0, [r1, #0]
 8009c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c76:	f01e 0f10 	tst.w	lr, #16
 8009c7a:	bf08      	it	eq
 8009c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c80:	f380 8809 	msr	PSP, r0
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	f3af 8000 	nop.w

08009c90 <pxCurrentTCBConst>:
 8009c90:	20000390 	.word	0x20000390
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c94:	bf00      	nop
 8009c96:	bf00      	nop

08009c98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	607b      	str	r3, [r7, #4]
}
 8009cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009cb2:	f7ff f911 	bl	8008ed8 <xTaskIncrementTick>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d003      	beq.n	8009cc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009cbc:	4b06      	ldr	r3, [pc, #24]	; (8009cd8 <SysTick_Handler+0x40>)
 8009cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	f383 8811 	msr	BASEPRI, r3
}
 8009cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009cd0:	bf00      	nop
 8009cd2:	3708      	adds	r7, #8
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	e000ed04 	.word	0xe000ed04

08009cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009cdc:	b480      	push	{r7}
 8009cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ce0:	4b0b      	ldr	r3, [pc, #44]	; (8009d10 <vPortSetupTimerInterrupt+0x34>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ce6:	4b0b      	ldr	r3, [pc, #44]	; (8009d14 <vPortSetupTimerInterrupt+0x38>)
 8009ce8:	2200      	movs	r2, #0
 8009cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009cec:	4b0a      	ldr	r3, [pc, #40]	; (8009d18 <vPortSetupTimerInterrupt+0x3c>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a0a      	ldr	r2, [pc, #40]	; (8009d1c <vPortSetupTimerInterrupt+0x40>)
 8009cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cf6:	099b      	lsrs	r3, r3, #6
 8009cf8:	4a09      	ldr	r2, [pc, #36]	; (8009d20 <vPortSetupTimerInterrupt+0x44>)
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009cfe:	4b04      	ldr	r3, [pc, #16]	; (8009d10 <vPortSetupTimerInterrupt+0x34>)
 8009d00:	2207      	movs	r2, #7
 8009d02:	601a      	str	r2, [r3, #0]
}
 8009d04:	bf00      	nop
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	e000e010 	.word	0xe000e010
 8009d14:	e000e018 	.word	0xe000e018
 8009d18:	20000004 	.word	0x20000004
 8009d1c:	10624dd3 	.word	0x10624dd3
 8009d20:	e000e014 	.word	0xe000e014

08009d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009d34 <vPortEnableVFP+0x10>
 8009d28:	6801      	ldr	r1, [r0, #0]
 8009d2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009d2e:	6001      	str	r1, [r0, #0]
 8009d30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d32:	bf00      	nop
 8009d34:	e000ed88 	.word	0xe000ed88

08009d38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d38:	b480      	push	{r7}
 8009d3a:	b085      	sub	sp, #20
 8009d3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d3e:	f3ef 8305 	mrs	r3, IPSR
 8009d42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2b0f      	cmp	r3, #15
 8009d48:	d914      	bls.n	8009d74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d4a:	4a17      	ldr	r2, [pc, #92]	; (8009da8 <vPortValidateInterruptPriority+0x70>)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	4413      	add	r3, r2
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d54:	4b15      	ldr	r3, [pc, #84]	; (8009dac <vPortValidateInterruptPriority+0x74>)
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	7afa      	ldrb	r2, [r7, #11]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d20a      	bcs.n	8009d74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d62:	f383 8811 	msr	BASEPRI, r3
 8009d66:	f3bf 8f6f 	isb	sy
 8009d6a:	f3bf 8f4f 	dsb	sy
 8009d6e:	607b      	str	r3, [r7, #4]
}
 8009d70:	bf00      	nop
 8009d72:	e7fe      	b.n	8009d72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d74:	4b0e      	ldr	r3, [pc, #56]	; (8009db0 <vPortValidateInterruptPriority+0x78>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d7c:	4b0d      	ldr	r3, [pc, #52]	; (8009db4 <vPortValidateInterruptPriority+0x7c>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d90a      	bls.n	8009d9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	603b      	str	r3, [r7, #0]
}
 8009d96:	bf00      	nop
 8009d98:	e7fe      	b.n	8009d98 <vPortValidateInterruptPriority+0x60>
	}
 8009d9a:	bf00      	nop
 8009d9c:	3714      	adds	r7, #20
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop
 8009da8:	e000e3f0 	.word	0xe000e3f0
 8009dac:	200004bc 	.word	0x200004bc
 8009db0:	e000ed0c 	.word	0xe000ed0c
 8009db4:	200004c0 	.word	0x200004c0

08009db8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b08a      	sub	sp, #40	; 0x28
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009dc4:	f7fe ffbc 	bl	8008d40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009dc8:	4b5b      	ldr	r3, [pc, #364]	; (8009f38 <pvPortMalloc+0x180>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d101      	bne.n	8009dd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009dd0:	f000 f92c 	bl	800a02c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009dd4:	4b59      	ldr	r3, [pc, #356]	; (8009f3c <pvPortMalloc+0x184>)
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4013      	ands	r3, r2
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	f040 8093 	bne.w	8009f08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d01d      	beq.n	8009e24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009de8:	2208      	movs	r2, #8
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4413      	add	r3, r2
 8009dee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f003 0307 	and.w	r3, r3, #7
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d014      	beq.n	8009e24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f023 0307 	bic.w	r3, r3, #7
 8009e00:	3308      	adds	r3, #8
 8009e02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f003 0307 	and.w	r3, r3, #7
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00a      	beq.n	8009e24 <pvPortMalloc+0x6c>
	__asm volatile
 8009e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e12:	f383 8811 	msr	BASEPRI, r3
 8009e16:	f3bf 8f6f 	isb	sy
 8009e1a:	f3bf 8f4f 	dsb	sy
 8009e1e:	617b      	str	r3, [r7, #20]
}
 8009e20:	bf00      	nop
 8009e22:	e7fe      	b.n	8009e22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d06e      	beq.n	8009f08 <pvPortMalloc+0x150>
 8009e2a:	4b45      	ldr	r3, [pc, #276]	; (8009f40 <pvPortMalloc+0x188>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d869      	bhi.n	8009f08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e34:	4b43      	ldr	r3, [pc, #268]	; (8009f44 <pvPortMalloc+0x18c>)
 8009e36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e38:	4b42      	ldr	r3, [pc, #264]	; (8009f44 <pvPortMalloc+0x18c>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e3e:	e004      	b.n	8009e4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d903      	bls.n	8009e5c <pvPortMalloc+0xa4>
 8009e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d1f1      	bne.n	8009e40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e5c:	4b36      	ldr	r3, [pc, #216]	; (8009f38 <pvPortMalloc+0x180>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d050      	beq.n	8009f08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e66:	6a3b      	ldr	r3, [r7, #32]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2208      	movs	r2, #8
 8009e6c:	4413      	add	r3, r2
 8009e6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	6a3b      	ldr	r3, [r7, #32]
 8009e76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	1ad2      	subs	r2, r2, r3
 8009e80:	2308      	movs	r3, #8
 8009e82:	005b      	lsls	r3, r3, #1
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d91f      	bls.n	8009ec8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	f003 0307 	and.w	r3, r3, #7
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00a      	beq.n	8009eb0 <pvPortMalloc+0xf8>
	__asm volatile
 8009e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9e:	f383 8811 	msr	BASEPRI, r3
 8009ea2:	f3bf 8f6f 	isb	sy
 8009ea6:	f3bf 8f4f 	dsb	sy
 8009eaa:	613b      	str	r3, [r7, #16]
}
 8009eac:	bf00      	nop
 8009eae:	e7fe      	b.n	8009eae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb2:	685a      	ldr	r2, [r3, #4]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	1ad2      	subs	r2, r2, r3
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ec2:	69b8      	ldr	r0, [r7, #24]
 8009ec4:	f000 f914 	bl	800a0f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ec8:	4b1d      	ldr	r3, [pc, #116]	; (8009f40 <pvPortMalloc+0x188>)
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	4a1b      	ldr	r2, [pc, #108]	; (8009f40 <pvPortMalloc+0x188>)
 8009ed4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ed6:	4b1a      	ldr	r3, [pc, #104]	; (8009f40 <pvPortMalloc+0x188>)
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	4b1b      	ldr	r3, [pc, #108]	; (8009f48 <pvPortMalloc+0x190>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d203      	bcs.n	8009eea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ee2:	4b17      	ldr	r3, [pc, #92]	; (8009f40 <pvPortMalloc+0x188>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a18      	ldr	r2, [pc, #96]	; (8009f48 <pvPortMalloc+0x190>)
 8009ee8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eec:	685a      	ldr	r2, [r3, #4]
 8009eee:	4b13      	ldr	r3, [pc, #76]	; (8009f3c <pvPortMalloc+0x184>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	431a      	orrs	r2, r3
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efa:	2200      	movs	r2, #0
 8009efc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009efe:	4b13      	ldr	r3, [pc, #76]	; (8009f4c <pvPortMalloc+0x194>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	3301      	adds	r3, #1
 8009f04:	4a11      	ldr	r2, [pc, #68]	; (8009f4c <pvPortMalloc+0x194>)
 8009f06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009f08:	f7fe ff28 	bl	8008d5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	f003 0307 	and.w	r3, r3, #7
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d00a      	beq.n	8009f2c <pvPortMalloc+0x174>
	__asm volatile
 8009f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1a:	f383 8811 	msr	BASEPRI, r3
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f3bf 8f4f 	dsb	sy
 8009f26:	60fb      	str	r3, [r7, #12]
}
 8009f28:	bf00      	nop
 8009f2a:	e7fe      	b.n	8009f2a <pvPortMalloc+0x172>
	return pvReturn;
 8009f2c:	69fb      	ldr	r3, [r7, #28]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3728      	adds	r7, #40	; 0x28
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	200067dc 	.word	0x200067dc
 8009f3c:	200067f0 	.word	0x200067f0
 8009f40:	200067e0 	.word	0x200067e0
 8009f44:	200067d4 	.word	0x200067d4
 8009f48:	200067e4 	.word	0x200067e4
 8009f4c:	200067e8 	.word	0x200067e8

08009f50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b086      	sub	sp, #24
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d04d      	beq.n	8009ffe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f62:	2308      	movs	r3, #8
 8009f64:	425b      	negs	r3, r3
 8009f66:	697a      	ldr	r2, [r7, #20]
 8009f68:	4413      	add	r3, r2
 8009f6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	685a      	ldr	r2, [r3, #4]
 8009f74:	4b24      	ldr	r3, [pc, #144]	; (800a008 <vPortFree+0xb8>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4013      	ands	r3, r2
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d10a      	bne.n	8009f94 <vPortFree+0x44>
	__asm volatile
 8009f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	60fb      	str	r3, [r7, #12]
}
 8009f90:	bf00      	nop
 8009f92:	e7fe      	b.n	8009f92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00a      	beq.n	8009fb2 <vPortFree+0x62>
	__asm volatile
 8009f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	60bb      	str	r3, [r7, #8]
}
 8009fae:	bf00      	nop
 8009fb0:	e7fe      	b.n	8009fb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	685a      	ldr	r2, [r3, #4]
 8009fb6:	4b14      	ldr	r3, [pc, #80]	; (800a008 <vPortFree+0xb8>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4013      	ands	r3, r2
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d01e      	beq.n	8009ffe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d11a      	bne.n	8009ffe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	685a      	ldr	r2, [r3, #4]
 8009fcc:	4b0e      	ldr	r3, [pc, #56]	; (800a008 <vPortFree+0xb8>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	43db      	mvns	r3, r3
 8009fd2:	401a      	ands	r2, r3
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009fd8:	f7fe feb2 	bl	8008d40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	685a      	ldr	r2, [r3, #4]
 8009fe0:	4b0a      	ldr	r3, [pc, #40]	; (800a00c <vPortFree+0xbc>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	4a09      	ldr	r2, [pc, #36]	; (800a00c <vPortFree+0xbc>)
 8009fe8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009fea:	6938      	ldr	r0, [r7, #16]
 8009fec:	f000 f880 	bl	800a0f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009ff0:	4b07      	ldr	r3, [pc, #28]	; (800a010 <vPortFree+0xc0>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	4a06      	ldr	r2, [pc, #24]	; (800a010 <vPortFree+0xc0>)
 8009ff8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009ffa:	f7fe feaf 	bl	8008d5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009ffe:	bf00      	nop
 800a000:	3718      	adds	r7, #24
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	200067f0 	.word	0x200067f0
 800a00c:	200067e0 	.word	0x200067e0
 800a010:	200067ec 	.word	0x200067ec

0800a014 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800a014:	b480      	push	{r7}
 800a016:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800a018:	4b03      	ldr	r3, [pc, #12]	; (800a028 <xPortGetFreeHeapSize+0x14>)
 800a01a:	681b      	ldr	r3, [r3, #0]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr
 800a026:	bf00      	nop
 800a028:	200067e0 	.word	0x200067e0

0800a02c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a032:	f246 3310 	movw	r3, #25360	; 0x6310
 800a036:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a038:	4b27      	ldr	r3, [pc, #156]	; (800a0d8 <prvHeapInit+0xac>)
 800a03a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f003 0307 	and.w	r3, r3, #7
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00c      	beq.n	800a060 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	3307      	adds	r3, #7
 800a04a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f023 0307 	bic.w	r3, r3, #7
 800a052:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a054:	68ba      	ldr	r2, [r7, #8]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	1ad3      	subs	r3, r2, r3
 800a05a:	4a1f      	ldr	r2, [pc, #124]	; (800a0d8 <prvHeapInit+0xac>)
 800a05c:	4413      	add	r3, r2
 800a05e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a064:	4a1d      	ldr	r2, [pc, #116]	; (800a0dc <prvHeapInit+0xb0>)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a06a:	4b1c      	ldr	r3, [pc, #112]	; (800a0dc <prvHeapInit+0xb0>)
 800a06c:	2200      	movs	r2, #0
 800a06e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	68ba      	ldr	r2, [r7, #8]
 800a074:	4413      	add	r3, r2
 800a076:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a078:	2208      	movs	r2, #8
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	1a9b      	subs	r3, r3, r2
 800a07e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f023 0307 	bic.w	r3, r3, #7
 800a086:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	4a15      	ldr	r2, [pc, #84]	; (800a0e0 <prvHeapInit+0xb4>)
 800a08c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a08e:	4b14      	ldr	r3, [pc, #80]	; (800a0e0 <prvHeapInit+0xb4>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2200      	movs	r2, #0
 800a094:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a096:	4b12      	ldr	r3, [pc, #72]	; (800a0e0 <prvHeapInit+0xb4>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2200      	movs	r2, #0
 800a09c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	1ad2      	subs	r2, r2, r3
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a0ac:	4b0c      	ldr	r3, [pc, #48]	; (800a0e0 <prvHeapInit+0xb4>)
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	4a0a      	ldr	r2, [pc, #40]	; (800a0e4 <prvHeapInit+0xb8>)
 800a0ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	4a09      	ldr	r2, [pc, #36]	; (800a0e8 <prvHeapInit+0xbc>)
 800a0c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a0c4:	4b09      	ldr	r3, [pc, #36]	; (800a0ec <prvHeapInit+0xc0>)
 800a0c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a0ca:	601a      	str	r2, [r3, #0]
}
 800a0cc:	bf00      	nop
 800a0ce:	3714      	adds	r7, #20
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr
 800a0d8:	200004c4 	.word	0x200004c4
 800a0dc:	200067d4 	.word	0x200067d4
 800a0e0:	200067dc 	.word	0x200067dc
 800a0e4:	200067e4 	.word	0x200067e4
 800a0e8:	200067e0 	.word	0x200067e0
 800a0ec:	200067f0 	.word	0x200067f0

0800a0f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a0f8:	4b28      	ldr	r3, [pc, #160]	; (800a19c <prvInsertBlockIntoFreeList+0xac>)
 800a0fa:	60fb      	str	r3, [r7, #12]
 800a0fc:	e002      	b.n	800a104 <prvInsertBlockIntoFreeList+0x14>
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	60fb      	str	r3, [r7, #12]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d8f7      	bhi.n	800a0fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	4413      	add	r3, r2
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d108      	bne.n	800a132 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	685a      	ldr	r2, [r3, #4]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	441a      	add	r2, r3
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	441a      	add	r2, r3
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	429a      	cmp	r2, r3
 800a144:	d118      	bne.n	800a178 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	4b15      	ldr	r3, [pc, #84]	; (800a1a0 <prvInsertBlockIntoFreeList+0xb0>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d00d      	beq.n	800a16e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	685a      	ldr	r2, [r3, #4]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	441a      	add	r2, r3
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	601a      	str	r2, [r3, #0]
 800a16c:	e008      	b.n	800a180 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a16e:	4b0c      	ldr	r3, [pc, #48]	; (800a1a0 <prvInsertBlockIntoFreeList+0xb0>)
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	e003      	b.n	800a180 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	429a      	cmp	r2, r3
 800a186:	d002      	beq.n	800a18e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a18e:	bf00      	nop
 800a190:	3714      	adds	r7, #20
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	200067d4 	.word	0x200067d4
 800a1a0:	200067dc 	.word	0x200067dc

0800a1a4 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	330c      	adds	r3, #12
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	6839      	ldr	r1, [r7, #0]
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f001 fff3 	bl	800c1a4 <tcpip_send_msg_wait_sem>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a1c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d103      	bne.n	800a1d2 <netconn_apimsg+0x2e>
    return apimsg->err;
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a1d0:	e001      	b.n	800a1d6 <netconn_apimsg+0x32>
  }
  return err;
 800a1d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
	...

0800a1e0 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b08c      	sub	sp, #48	; 0x30
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	603a      	str	r2, [r7, #0]
 800a1ea:	71fb      	strb	r3, [r7, #7]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800a1f0:	79fb      	ldrb	r3, [r7, #7]
 800a1f2:	6839      	ldr	r1, [r7, #0]
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f000 ff21 	bl	800b03c <netconn_alloc>
 800a1fa:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800a1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d054      	beq.n	800a2ac <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800a202:	79bb      	ldrb	r3, [r7, #6]
 800a204:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800a206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a208:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800a20a:	f107 0308 	add.w	r3, r7, #8
 800a20e:	4619      	mov	r1, r3
 800a210:	4829      	ldr	r0, [pc, #164]	; (800a2b8 <netconn_new_with_proto_and_callback+0xd8>)
 800a212:	f7ff ffc7 	bl	800a1a4 <netconn_apimsg>
 800a216:	4603      	mov	r3, r0
 800a218:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800a21c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a220:	2b00      	cmp	r3, #0
 800a222:	d043      	beq.n	800a2ac <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800a224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d005      	beq.n	800a238 <netconn_new_with_proto_and_callback+0x58>
 800a22c:	4b23      	ldr	r3, [pc, #140]	; (800a2bc <netconn_new_with_proto_and_callback+0xdc>)
 800a22e:	22a3      	movs	r2, #163	; 0xa3
 800a230:	4923      	ldr	r1, [pc, #140]	; (800a2c0 <netconn_new_with_proto_and_callback+0xe0>)
 800a232:	4824      	ldr	r0, [pc, #144]	; (800a2c4 <netconn_new_with_proto_and_callback+0xe4>)
 800a234:	f00d fab6 	bl	80177a4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800a238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23a:	3310      	adds	r3, #16
 800a23c:	4618      	mov	r0, r3
 800a23e:	f00c ff88 	bl	8017152 <sys_mbox_valid>
 800a242:	4603      	mov	r3, r0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d105      	bne.n	800a254 <netconn_new_with_proto_and_callback+0x74>
 800a248:	4b1c      	ldr	r3, [pc, #112]	; (800a2bc <netconn_new_with_proto_and_callback+0xdc>)
 800a24a:	22a4      	movs	r2, #164	; 0xa4
 800a24c:	491e      	ldr	r1, [pc, #120]	; (800a2c8 <netconn_new_with_proto_and_callback+0xe8>)
 800a24e:	481d      	ldr	r0, [pc, #116]	; (800a2c4 <netconn_new_with_proto_and_callback+0xe4>)
 800a250:	f00d faa8 	bl	80177a4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800a254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a256:	3314      	adds	r3, #20
 800a258:	4618      	mov	r0, r3
 800a25a:	f00c ff7a 	bl	8017152 <sys_mbox_valid>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d005      	beq.n	800a270 <netconn_new_with_proto_and_callback+0x90>
 800a264:	4b15      	ldr	r3, [pc, #84]	; (800a2bc <netconn_new_with_proto_and_callback+0xdc>)
 800a266:	22a6      	movs	r2, #166	; 0xa6
 800a268:	4918      	ldr	r1, [pc, #96]	; (800a2cc <netconn_new_with_proto_and_callback+0xec>)
 800a26a:	4816      	ldr	r0, [pc, #88]	; (800a2c4 <netconn_new_with_proto_and_callback+0xe4>)
 800a26c:	f00d fa9a 	bl	80177a4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800a270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a272:	330c      	adds	r3, #12
 800a274:	4618      	mov	r0, r3
 800a276:	f00c fffd 	bl	8017274 <sys_sem_valid>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d105      	bne.n	800a28c <netconn_new_with_proto_and_callback+0xac>
 800a280:	4b0e      	ldr	r3, [pc, #56]	; (800a2bc <netconn_new_with_proto_and_callback+0xdc>)
 800a282:	22a9      	movs	r2, #169	; 0xa9
 800a284:	4912      	ldr	r1, [pc, #72]	; (800a2d0 <netconn_new_with_proto_and_callback+0xf0>)
 800a286:	480f      	ldr	r0, [pc, #60]	; (800a2c4 <netconn_new_with_proto_and_callback+0xe4>)
 800a288:	f00d fa8c 	bl	80177a4 <iprintf>
      sys_sem_free(&conn->op_completed);
 800a28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28e:	330c      	adds	r3, #12
 800a290:	4618      	mov	r0, r3
 800a292:	f00c ffe2 	bl	801725a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800a296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a298:	3310      	adds	r3, #16
 800a29a:	4618      	mov	r0, r3
 800a29c:	f00c fed2 	bl	8017044 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800a2a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2a2:	2007      	movs	r0, #7
 800a2a4:	f002 fce6 	bl	800cc74 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	e000      	b.n	800a2ae <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800a2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3730      	adds	r7, #48	; 0x30
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	0800b011 	.word	0x0800b011
 800a2bc:	08018670 	.word	0x08018670
 800a2c0:	080186a4 	.word	0x080186a4
 800a2c4:	080186c8 	.word	0x080186c8
 800a2c8:	080186f0 	.word	0x080186f0
 800a2cc:	08018708 	.word	0x08018708
 800a2d0:	0801872c 	.word	0x0801872c

0800a2d4 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b08c      	sub	sp, #48	; 0x30
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d101      	bne.n	800a2e6 <netconn_prepare_delete+0x12>
    return ERR_OK;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	e014      	b.n	800a310 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a2ea:	2329      	movs	r3, #41	; 0x29
 800a2ec:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800a2ee:	f107 030c 	add.w	r3, r7, #12
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	4808      	ldr	r0, [pc, #32]	; (800a318 <netconn_prepare_delete+0x44>)
 800a2f6:	f7ff ff55 	bl	800a1a4 <netconn_apimsg>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800a300:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a304:	2b00      	cmp	r3, #0
 800a306:	d002      	beq.n	800a30e <netconn_prepare_delete+0x3a>
    return err;
 800a308:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a30c:	e000      	b.n	800a310 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3730      	adds	r7, #48	; 0x30
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	0800b575 	.word	0x0800b575

0800a31c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d101      	bne.n	800a32e <netconn_delete+0x12>
    return ERR_OK;
 800a32a:	2300      	movs	r3, #0
 800a32c:	e00d      	b.n	800a34a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f7ff ffd0 	bl	800a2d4 <netconn_prepare_delete>
 800a334:	4603      	mov	r3, r0
 800a336:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800a338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d102      	bne.n	800a346 <netconn_delete+0x2a>
    netconn_free(conn);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 fee9 	bl	800b118 <netconn_free>
  }
  return err;
 800a346:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
	...

0800a354 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b08e      	sub	sp, #56	; 0x38
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	4613      	mov	r3, r2
 800a360:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d109      	bne.n	800a37c <netconn_bind+0x28>
 800a368:	4b11      	ldr	r3, [pc, #68]	; (800a3b0 <netconn_bind+0x5c>)
 800a36a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800a36e:	4911      	ldr	r1, [pc, #68]	; (800a3b4 <netconn_bind+0x60>)
 800a370:	4811      	ldr	r0, [pc, #68]	; (800a3b8 <netconn_bind+0x64>)
 800a372:	f00d fa17 	bl	80177a4 <iprintf>
 800a376:	f06f 030f 	mvn.w	r3, #15
 800a37a:	e015      	b.n	800a3a8 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d101      	bne.n	800a386 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800a382:	4b0e      	ldr	r3, [pc, #56]	; (800a3bc <netconn_bind+0x68>)
 800a384:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800a38e:	88fb      	ldrh	r3, [r7, #6]
 800a390:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800a392:	f107 0314 	add.w	r3, r7, #20
 800a396:	4619      	mov	r1, r3
 800a398:	4809      	ldr	r0, [pc, #36]	; (800a3c0 <netconn_bind+0x6c>)
 800a39a:	f7ff ff03 	bl	800a1a4 <netconn_apimsg>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800a3a4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3738      	adds	r7, #56	; 0x38
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}
 800a3b0:	08018670 	.word	0x08018670
 800a3b4:	080187a8 	.word	0x080187a8
 800a3b8:	080186c8 	.word	0x080186c8
 800a3bc:	0801bc74 	.word	0x0801bc74
 800a3c0:	0800b73d 	.word	0x0800b73d

0800a3c4 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b088      	sub	sp, #32
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d109      	bne.n	800a3f0 <netconn_recv_data+0x2c>
 800a3dc:	4b58      	ldr	r3, [pc, #352]	; (800a540 <netconn_recv_data+0x17c>)
 800a3de:	f44f 7212 	mov.w	r2, #584	; 0x248
 800a3e2:	4958      	ldr	r1, [pc, #352]	; (800a544 <netconn_recv_data+0x180>)
 800a3e4:	4858      	ldr	r0, [pc, #352]	; (800a548 <netconn_recv_data+0x184>)
 800a3e6:	f00d f9dd 	bl	80177a4 <iprintf>
 800a3ea:	f06f 030f 	mvn.w	r3, #15
 800a3ee:	e0a2      	b.n	800a536 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d109      	bne.n	800a410 <netconn_recv_data+0x4c>
 800a3fc:	4b50      	ldr	r3, [pc, #320]	; (800a540 <netconn_recv_data+0x17c>)
 800a3fe:	f240 224a 	movw	r2, #586	; 0x24a
 800a402:	4952      	ldr	r1, [pc, #328]	; (800a54c <netconn_recv_data+0x188>)
 800a404:	4850      	ldr	r0, [pc, #320]	; (800a548 <netconn_recv_data+0x184>)
 800a406:	f00d f9cd 	bl	80177a4 <iprintf>
 800a40a:	f06f 030f 	mvn.w	r3, #15
 800a40e:	e092      	b.n	800a536 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	3310      	adds	r3, #16
 800a414:	4618      	mov	r0, r3
 800a416:	f00c fe9c 	bl	8017152 <sys_mbox_valid>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d10e      	bne.n	800a43e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f000 fa45 	bl	800a8b0 <netconn_err>
 800a426:	4603      	mov	r3, r0
 800a428:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800a42a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d002      	beq.n	800a438 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800a432:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a436:	e07e      	b.n	800a536 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800a438:	f06f 030a 	mvn.w	r3, #10
 800a43c:	e07b      	b.n	800a536 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	7f1b      	ldrb	r3, [r3, #28]
 800a442:	f003 0302 	and.w	r3, r3, #2
 800a446:	2b00      	cmp	r3, #0
 800a448:	d10f      	bne.n	800a46a <netconn_recv_data+0xa6>
 800a44a:	79fb      	ldrb	r3, [r7, #7]
 800a44c:	f003 0304 	and.w	r3, r3, #4
 800a450:	2b00      	cmp	r3, #0
 800a452:	d10a      	bne.n	800a46a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	7f1b      	ldrb	r3, [r3, #28]
 800a458:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d104      	bne.n	800a46a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d023      	beq.n	800a4b2 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	3310      	adds	r3, #16
 800a46e:	f107 0218 	add.w	r2, r7, #24
 800a472:	4611      	mov	r1, r2
 800a474:	4618      	mov	r0, r3
 800a476:	f00c fe50 	bl	801711a <sys_arch_mbox_tryfetch>
 800a47a:	4603      	mov	r3, r0
 800a47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a480:	d11f      	bne.n	800a4c2 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f000 fa14 	bl	800a8b0 <netconn_err>
 800a488:	4603      	mov	r3, r0
 800a48a:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800a48c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d002      	beq.n	800a49a <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800a494:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a498:	e04d      	b.n	800a536 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	7f1b      	ldrb	r3, [r3, #28]
 800a49e:	f003 0301 	and.w	r3, r3, #1
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d002      	beq.n	800a4ac <netconn_recv_data+0xe8>
        return ERR_CONN;
 800a4a6:	f06f 030a 	mvn.w	r3, #10
 800a4aa:	e044      	b.n	800a536 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800a4ac:	f06f 0306 	mvn.w	r3, #6
 800a4b0:	e041      	b.n	800a536 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3310      	adds	r3, #16
 800a4b6:	f107 0118 	add.w	r1, r7, #24
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f00c fded 	bl	801709c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4ca:	2b10      	cmp	r3, #16
 800a4cc:	d117      	bne.n	800a4fe <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	f107 0217 	add.w	r2, r7, #23
 800a4d4:	4611      	mov	r1, r2
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f000 fa3c 	bl	800a954 <lwip_netconn_is_err_msg>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d009      	beq.n	800a4f6 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800a4e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4e6:	f113 0f0f 	cmn.w	r3, #15
 800a4ea:	d101      	bne.n	800a4f0 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	e022      	b.n	800a536 <netconn_recv_data+0x172>
      }
      return err;
 800a4f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4f4:	e01f      	b.n	800a536 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	891b      	ldrh	r3, [r3, #8]
 800a4fa:	83fb      	strh	r3, [r7, #30]
 800a4fc:	e00d      	b.n	800a51a <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d106      	bne.n	800a512 <netconn_recv_data+0x14e>
 800a504:	4b0e      	ldr	r3, [pc, #56]	; (800a540 <netconn_recv_data+0x17c>)
 800a506:	f240 2291 	movw	r2, #657	; 0x291
 800a50a:	4911      	ldr	r1, [pc, #68]	; (800a550 <netconn_recv_data+0x18c>)
 800a50c:	480e      	ldr	r0, [pc, #56]	; (800a548 <netconn_recv_data+0x184>)
 800a50e:	f00d f949 	bl	80177a4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	891b      	ldrh	r3, [r3, #8]
 800a518:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d005      	beq.n	800a52e <netconn_recv_data+0x16a>
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a526:	8bfa      	ldrh	r2, [r7, #30]
 800a528:	2101      	movs	r1, #1
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800a52e:	69ba      	ldr	r2, [r7, #24]
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3720      	adds	r7, #32
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	08018670 	.word	0x08018670
 800a544:	08018888 	.word	0x08018888
 800a548:	080186c8 	.word	0x080186c8
 800a54c:	080188a8 	.word	0x080188a8
 800a550:	080188c4 	.word	0x080188c4

0800a554 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d005      	beq.n	800a572 <netconn_tcp_recvd_msg+0x1e>
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a56e:	2b10      	cmp	r3, #16
 800a570:	d009      	beq.n	800a586 <netconn_tcp_recvd_msg+0x32>
 800a572:	4b0c      	ldr	r3, [pc, #48]	; (800a5a4 <netconn_tcp_recvd_msg+0x50>)
 800a574:	f240 22a7 	movw	r2, #679	; 0x2a7
 800a578:	490b      	ldr	r1, [pc, #44]	; (800a5a8 <netconn_tcp_recvd_msg+0x54>)
 800a57a:	480c      	ldr	r0, [pc, #48]	; (800a5ac <netconn_tcp_recvd_msg+0x58>)
 800a57c:	f00d f912 	bl	80177a4 <iprintf>
 800a580:	f06f 030f 	mvn.w	r3, #15
 800a584:	e00a      	b.n	800a59c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	68ba      	ldr	r2, [r7, #8]
 800a590:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800a592:	6879      	ldr	r1, [r7, #4]
 800a594:	4806      	ldr	r0, [pc, #24]	; (800a5b0 <netconn_tcp_recvd_msg+0x5c>)
 800a596:	f7ff fe05 	bl	800a1a4 <netconn_apimsg>
 800a59a:	4603      	mov	r3, r0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	08018670 	.word	0x08018670
 800a5a8:	080188d0 	.word	0x080188d0
 800a5ac:	080186c8 	.word	0x080186c8
 800a5b0:	0800b84b 	.word	0x0800b84b

0800a5b4 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b090      	sub	sp, #64	; 0x40
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	4613      	mov	r3, r2
 800a5c0:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	3310      	adds	r3, #16
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f00c fdc3 	bl	8017152 <sys_mbox_valid>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d102      	bne.n	800a5d8 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800a5d2:	f06f 030a 	mvn.w	r3, #10
 800a5d6:	e06d      	b.n	800a6b4 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	7f1b      	ldrb	r3, [r3, #28]
 800a5dc:	b25b      	sxtb	r3, r3
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	da07      	bge.n	800a5f2 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	7f1b      	ldrb	r3, [r3, #28]
 800a5e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800a5f0:	e039      	b.n	800a666 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a5f2:	79fb      	ldrb	r3, [r7, #7]
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	68b9      	ldr	r1, [r7, #8]
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f7ff fee3 	bl	800a3c4 <netconn_recv_data>
 800a5fe:	4603      	mov	r3, r0
 800a600:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800a604:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d002      	beq.n	800a612 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800a60c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a610:	e050      	b.n	800a6b4 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800a618:	79fb      	ldrb	r3, [r7, #7]
 800a61a:	f003 0308 	and.w	r3, r3, #8
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d10e      	bne.n	800a640 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800a622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a624:	2b00      	cmp	r3, #0
 800a626:	d002      	beq.n	800a62e <netconn_recv_data_tcp+0x7a>
 800a628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62a:	891b      	ldrh	r3, [r3, #8]
 800a62c:	e000      	b.n	800a630 <netconn_recv_data_tcp+0x7c>
 800a62e:	2301      	movs	r3, #1
 800a630:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800a632:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a634:	f107 0214 	add.w	r2, r7, #20
 800a638:	4619      	mov	r1, r3
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f7ff ff8a 	bl	800a554 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800a640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a642:	2b00      	cmp	r3, #0
 800a644:	d134      	bne.n	800a6b0 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800a646:	79fb      	ldrb	r3, [r7, #7]
 800a648:	f003 0310 	and.w	r3, r3, #16
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d009      	beq.n	800a664 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	7f1b      	ldrb	r3, [r3, #28]
 800a654:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a658:	b2da      	uxtb	r2, r3
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800a65e:	f06f 0306 	mvn.w	r3, #6
 800a662:	e027      	b.n	800a6b4 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800a664:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d005      	beq.n	800a67a <netconn_recv_data_tcp+0xc6>
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a672:	2200      	movs	r2, #0
 800a674:	2101      	movs	r1, #1
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d10f      	bne.n	800a6a2 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f000 f914 	bl	800a8b0 <netconn_err>
 800a688:	4603      	mov	r3, r0
 800a68a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800a68e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a692:	2b00      	cmp	r3, #0
 800a694:	d002      	beq.n	800a69c <netconn_recv_data_tcp+0xe8>
          return err;
 800a696:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a69a:	e00b      	b.n	800a6b4 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800a69c:	f06f 030d 	mvn.w	r3, #13
 800a6a0:	e008      	b.n	800a6b4 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800a6a2:	2101      	movs	r1, #1
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f000 f8d3 	bl	800a850 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800a6aa:	f06f 030e 	mvn.w	r3, #14
 800a6ae:	e001      	b.n	800a6b4 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800a6b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3740      	adds	r7, #64	; 0x40
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b086      	sub	sp, #24
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d109      	bne.n	800a6e4 <netconn_recv+0x28>
 800a6d0:	4b32      	ldr	r3, [pc, #200]	; (800a79c <netconn_recv+0xe0>)
 800a6d2:	f240 3263 	movw	r2, #867	; 0x363
 800a6d6:	4932      	ldr	r1, [pc, #200]	; (800a7a0 <netconn_recv+0xe4>)
 800a6d8:	4832      	ldr	r0, [pc, #200]	; (800a7a4 <netconn_recv+0xe8>)
 800a6da:	f00d f863 	bl	80177a4 <iprintf>
 800a6de:	f06f 030f 	mvn.w	r3, #15
 800a6e2:	e056      	b.n	800a792 <netconn_recv+0xd6>
  *new_buf = NULL;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d109      	bne.n	800a704 <netconn_recv+0x48>
 800a6f0:	4b2a      	ldr	r3, [pc, #168]	; (800a79c <netconn_recv+0xe0>)
 800a6f2:	f240 3265 	movw	r2, #869	; 0x365
 800a6f6:	492c      	ldr	r1, [pc, #176]	; (800a7a8 <netconn_recv+0xec>)
 800a6f8:	482a      	ldr	r0, [pc, #168]	; (800a7a4 <netconn_recv+0xe8>)
 800a6fa:	f00d f853 	bl	80177a4 <iprintf>
 800a6fe:	f06f 030f 	mvn.w	r3, #15
 800a702:	e046      	b.n	800a792 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a70c:	2b10      	cmp	r3, #16
 800a70e:	d13a      	bne.n	800a786 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800a710:	2300      	movs	r3, #0
 800a712:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a714:	2006      	movs	r0, #6
 800a716:	f002 fa5b 	bl	800cbd0 <memp_malloc>
 800a71a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d102      	bne.n	800a728 <netconn_recv+0x6c>
      return ERR_MEM;
 800a722:	f04f 33ff 	mov.w	r3, #4294967295
 800a726:	e034      	b.n	800a792 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800a728:	f107 030c 	add.w	r3, r7, #12
 800a72c:	2200      	movs	r2, #0
 800a72e:	4619      	mov	r1, r3
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f7ff ff3f 	bl	800a5b4 <netconn_recv_data_tcp>
 800a736:	4603      	mov	r3, r0
 800a738:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800a73a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d006      	beq.n	800a750 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800a742:	6979      	ldr	r1, [r7, #20]
 800a744:	2006      	movs	r0, #6
 800a746:	f002 fa95 	bl	800cc74 <memp_free>
      return err;
 800a74a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a74e:	e020      	b.n	800a792 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d106      	bne.n	800a764 <netconn_recv+0xa8>
 800a756:	4b11      	ldr	r3, [pc, #68]	; (800a79c <netconn_recv+0xe0>)
 800a758:	f240 3279 	movw	r2, #889	; 0x379
 800a75c:	4913      	ldr	r1, [pc, #76]	; (800a7ac <netconn_recv+0xf0>)
 800a75e:	4811      	ldr	r0, [pc, #68]	; (800a7a4 <netconn_recv+0xe8>)
 800a760:	f00d f820 	bl	80177a4 <iprintf>

    buf->p = p;
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	2200      	movs	r2, #0
 800a774:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	2200      	movs	r2, #0
 800a77a:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800a782:	2300      	movs	r3, #0
 800a784:	e005      	b.n	800a792 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800a786:	2200      	movs	r2, #0
 800a788:	6839      	ldr	r1, [r7, #0]
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f7ff fe1a 	bl	800a3c4 <netconn_recv_data>
 800a790:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800a792:	4618      	mov	r0, r3
 800a794:	3718      	adds	r7, #24
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	08018670 	.word	0x08018670
 800a7a0:	08018888 	.word	0x08018888
 800a7a4:	080186c8 	.word	0x080186c8
 800a7a8:	080188a8 	.word	0x080188a8
 800a7ac:	08018920 	.word	0x08018920

0800a7b0 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	607a      	str	r2, [r7, #4]
 800a7bc:	807b      	strh	r3, [r7, #2]
  if (buf != NULL) {
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d011      	beq.n	800a7e8 <netconn_sendto+0x38>
    ip_addr_set(&buf->addr, addr);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d002      	beq.n	800a7d0 <netconn_sendto+0x20>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	e000      	b.n	800a7d2 <netconn_sendto+0x22>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	887a      	ldrh	r2, [r7, #2]
 800a7da:	819a      	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
 800a7dc:	68b9      	ldr	r1, [r7, #8]
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f000 f808 	bl	800a7f4 <netconn_send>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	e001      	b.n	800a7ec <netconn_sendto+0x3c>
  }
  return ERR_VAL;
 800a7e8:	f06f 0305 	mvn.w	r3, #5
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3710      	adds	r7, #16
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b08c      	sub	sp, #48	; 0x30
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d109      	bne.n	800a818 <netconn_send+0x24>
 800a804:	4b0e      	ldr	r3, [pc, #56]	; (800a840 <netconn_send+0x4c>)
 800a806:	f240 32b2 	movw	r2, #946	; 0x3b2
 800a80a:	490e      	ldr	r1, [pc, #56]	; (800a844 <netconn_send+0x50>)
 800a80c:	480e      	ldr	r0, [pc, #56]	; (800a848 <netconn_send+0x54>)
 800a80e:	f00c ffc9 	bl	80177a4 <iprintf>
 800a812:	f06f 030f 	mvn.w	r3, #15
 800a816:	e00e      	b.n	800a836 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800a820:	f107 030c 	add.w	r3, r7, #12
 800a824:	4619      	mov	r1, r3
 800a826:	4809      	ldr	r0, [pc, #36]	; (800a84c <netconn_send+0x58>)
 800a828:	f7ff fcbc 	bl	800a1a4 <netconn_apimsg>
 800a82c:	4603      	mov	r3, r0
 800a82e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a832:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a836:	4618      	mov	r0, r3
 800a838:	3730      	adds	r7, #48	; 0x30
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	08018670 	.word	0x08018670
 800a844:	0801892c 	.word	0x0801892c
 800a848:	080186c8 	.word	0x080186c8
 800a84c:	0800b7b1 	.word	0x0800b7b1

0800a850 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b08c      	sub	sp, #48	; 0x30
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	460b      	mov	r3, r1
 800a85a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d109      	bne.n	800a876 <netconn_close_shutdown+0x26>
 800a862:	4b0f      	ldr	r3, [pc, #60]	; (800a8a0 <netconn_close_shutdown+0x50>)
 800a864:	f240 4247 	movw	r2, #1095	; 0x447
 800a868:	490e      	ldr	r1, [pc, #56]	; (800a8a4 <netconn_close_shutdown+0x54>)
 800a86a:	480f      	ldr	r0, [pc, #60]	; (800a8a8 <netconn_close_shutdown+0x58>)
 800a86c:	f00c ff9a 	bl	80177a4 <iprintf>
 800a870:	f06f 030f 	mvn.w	r3, #15
 800a874:	e010      	b.n	800a898 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800a87a:	78fb      	ldrb	r3, [r7, #3]
 800a87c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a87e:	2329      	movs	r3, #41	; 0x29
 800a880:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800a882:	f107 030c 	add.w	r3, r7, #12
 800a886:	4619      	mov	r1, r3
 800a888:	4808      	ldr	r0, [pc, #32]	; (800a8ac <netconn_close_shutdown+0x5c>)
 800a88a:	f7ff fc8b 	bl	800a1a4 <netconn_apimsg>
 800a88e:	4603      	mov	r3, r0
 800a890:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a894:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3730      	adds	r7, #48	; 0x30
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	08018670 	.word	0x08018670
 800a8a4:	080189ac 	.word	0x080189ac
 800a8a8:	080186c8 	.word	0x080186c8
 800a8ac:	0800bc4d 	.word	0x0800bc4d

0800a8b0 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d101      	bne.n	800a8c2 <netconn_err+0x12>
    return ERR_OK;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	e00d      	b.n	800a8de <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800a8c2:	f00c fd61 	bl	8017388 <sys_arch_protect>
 800a8c6:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	7a1b      	ldrb	r3, [r3, #8]
 800a8cc:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f00c fd65 	bl	80173a4 <sys_arch_unprotect>
  return err;
 800a8da:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
	...

0800a8e8 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800a8f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8f6:	f113 0f0d 	cmn.w	r3, #13
 800a8fa:	d009      	beq.n	800a910 <lwip_netconn_err_to_msg+0x28>
 800a8fc:	f113 0f0d 	cmn.w	r3, #13
 800a900:	dc0c      	bgt.n	800a91c <lwip_netconn_err_to_msg+0x34>
 800a902:	f113 0f0f 	cmn.w	r3, #15
 800a906:	d007      	beq.n	800a918 <lwip_netconn_err_to_msg+0x30>
 800a908:	f113 0f0e 	cmn.w	r3, #14
 800a90c:	d002      	beq.n	800a914 <lwip_netconn_err_to_msg+0x2c>
 800a90e:	e005      	b.n	800a91c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800a910:	4b0a      	ldr	r3, [pc, #40]	; (800a93c <lwip_netconn_err_to_msg+0x54>)
 800a912:	e00e      	b.n	800a932 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800a914:	4b0a      	ldr	r3, [pc, #40]	; (800a940 <lwip_netconn_err_to_msg+0x58>)
 800a916:	e00c      	b.n	800a932 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800a918:	4b0a      	ldr	r3, [pc, #40]	; (800a944 <lwip_netconn_err_to_msg+0x5c>)
 800a91a:	e00a      	b.n	800a932 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800a91c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d005      	beq.n	800a930 <lwip_netconn_err_to_msg+0x48>
 800a924:	4b08      	ldr	r3, [pc, #32]	; (800a948 <lwip_netconn_err_to_msg+0x60>)
 800a926:	227d      	movs	r2, #125	; 0x7d
 800a928:	4908      	ldr	r1, [pc, #32]	; (800a94c <lwip_netconn_err_to_msg+0x64>)
 800a92a:	4809      	ldr	r0, [pc, #36]	; (800a950 <lwip_netconn_err_to_msg+0x68>)
 800a92c:	f00c ff3a 	bl	80177a4 <iprintf>
      return NULL;
 800a930:	2300      	movs	r3, #0
  }
}
 800a932:	4618      	mov	r0, r3
 800a934:	3708      	adds	r7, #8
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	0801bb60 	.word	0x0801bb60
 800a940:	0801bb61 	.word	0x0801bb61
 800a944:	0801bb62 	.word	0x0801bb62
 800a948:	080189c8 	.word	0x080189c8
 800a94c:	080189fc 	.word	0x080189fc
 800a950:	08018a0c 	.word	0x08018a0c

0800a954 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d105      	bne.n	800a970 <lwip_netconn_is_err_msg+0x1c>
 800a964:	4b12      	ldr	r3, [pc, #72]	; (800a9b0 <lwip_netconn_is_err_msg+0x5c>)
 800a966:	2285      	movs	r2, #133	; 0x85
 800a968:	4912      	ldr	r1, [pc, #72]	; (800a9b4 <lwip_netconn_is_err_msg+0x60>)
 800a96a:	4813      	ldr	r0, [pc, #76]	; (800a9b8 <lwip_netconn_is_err_msg+0x64>)
 800a96c:	f00c ff1a 	bl	80177a4 <iprintf>

  if (msg == &netconn_aborted) {
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	4a12      	ldr	r2, [pc, #72]	; (800a9bc <lwip_netconn_is_err_msg+0x68>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d104      	bne.n	800a982 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	22f3      	movs	r2, #243	; 0xf3
 800a97c:	701a      	strb	r2, [r3, #0]
    return 1;
 800a97e:	2301      	movs	r3, #1
 800a980:	e012      	b.n	800a9a8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a0e      	ldr	r2, [pc, #56]	; (800a9c0 <lwip_netconn_is_err_msg+0x6c>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d104      	bne.n	800a994 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	22f2      	movs	r2, #242	; 0xf2
 800a98e:	701a      	strb	r2, [r3, #0]
    return 1;
 800a990:	2301      	movs	r3, #1
 800a992:	e009      	b.n	800a9a8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a0b      	ldr	r2, [pc, #44]	; (800a9c4 <lwip_netconn_is_err_msg+0x70>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d104      	bne.n	800a9a6 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	22f1      	movs	r2, #241	; 0xf1
 800a9a0:	701a      	strb	r2, [r3, #0]
    return 1;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e000      	b.n	800a9a8 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3708      	adds	r7, #8
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	080189c8 	.word	0x080189c8
 800a9b4:	08018a34 	.word	0x08018a34
 800a9b8:	08018a0c 	.word	0x08018a0c
 800a9bc:	0801bb60 	.word	0x0801bb60
 800a9c0:	0801bb61 	.word	0x0801bb61
 800a9c4:	0801bb62 	.word	0x0801bb62

0800a9c8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b088      	sub	sp, #32
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
 800a9d4:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d105      	bne.n	800a9e8 <recv_udp+0x20>
 800a9dc:	4b34      	ldr	r3, [pc, #208]	; (800aab0 <recv_udp+0xe8>)
 800a9de:	22e5      	movs	r2, #229	; 0xe5
 800a9e0:	4934      	ldr	r1, [pc, #208]	; (800aab4 <recv_udp+0xec>)
 800a9e2:	4835      	ldr	r0, [pc, #212]	; (800aab8 <recv_udp+0xf0>)
 800a9e4:	f00c fede 	bl	80177a4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d105      	bne.n	800a9fa <recv_udp+0x32>
 800a9ee:	4b30      	ldr	r3, [pc, #192]	; (800aab0 <recv_udp+0xe8>)
 800a9f0:	22e6      	movs	r2, #230	; 0xe6
 800a9f2:	4932      	ldr	r1, [pc, #200]	; (800aabc <recv_udp+0xf4>)
 800a9f4:	4830      	ldr	r0, [pc, #192]	; (800aab8 <recv_udp+0xf0>)
 800a9f6:	f00c fed5 	bl	80177a4 <iprintf>
  conn = (struct netconn *)arg;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d103      	bne.n	800aa0c <recv_udp+0x44>
    pbuf_free(p);
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f002 ff75 	bl	800d8f4 <pbuf_free>
    return;
 800aa0a:	e04d      	b.n	800aaa8 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	68ba      	ldr	r2, [r7, #8]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d005      	beq.n	800aa22 <recv_udp+0x5a>
 800aa16:	4b26      	ldr	r3, [pc, #152]	; (800aab0 <recv_udp+0xe8>)
 800aa18:	22ee      	movs	r2, #238	; 0xee
 800aa1a:	4929      	ldr	r1, [pc, #164]	; (800aac0 <recv_udp+0xf8>)
 800aa1c:	4826      	ldr	r0, [pc, #152]	; (800aab8 <recv_udp+0xf0>)
 800aa1e:	f00c fec1 	bl	80177a4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800aa22:	69fb      	ldr	r3, [r7, #28]
 800aa24:	3310      	adds	r3, #16
 800aa26:	4618      	mov	r0, r3
 800aa28:	f00c fb93 	bl	8017152 <sys_mbox_valid>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d103      	bne.n	800aa3a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f002 ff5e 	bl	800d8f4 <pbuf_free>
    return;
 800aa38:	e036      	b.n	800aaa8 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800aa3a:	2006      	movs	r0, #6
 800aa3c:	f002 f8c8 	bl	800cbd0 <memp_malloc>
 800aa40:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d103      	bne.n	800aa50 <recv_udp+0x88>
    pbuf_free(p);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f002 ff53 	bl	800d8f4 <pbuf_free>
    return;
 800aa4e:	e02b      	b.n	800aaa8 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800aa50:	69bb      	ldr	r3, [r7, #24]
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d002      	beq.n	800aa68 <recv_udp+0xa0>
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	e000      	b.n	800aa6a <recv_udp+0xa2>
 800aa68:	2300      	movs	r3, #0
 800aa6a:	69ba      	ldr	r2, [r7, #24]
 800aa6c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800aa72:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	891b      	ldrh	r3, [r3, #8]
 800aa78:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	3310      	adds	r3, #16
 800aa7e:	69b9      	ldr	r1, [r7, #24]
 800aa80:	4618      	mov	r0, r3
 800aa82:	f00c faf1 	bl	8017068 <sys_mbox_trypost>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d003      	beq.n	800aa94 <recv_udp+0xcc>
    netbuf_delete(buf);
 800aa8c:	69b8      	ldr	r0, [r7, #24]
 800aa8e:	f001 f97d 	bl	800bd8c <netbuf_delete>
    return;
 800aa92:	e009      	b.n	800aaa8 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d005      	beq.n	800aaa8 <recv_udp+0xe0>
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa0:	8afa      	ldrh	r2, [r7, #22]
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	69f8      	ldr	r0, [r7, #28]
 800aaa6:	4798      	blx	r3
  }
}
 800aaa8:	3720      	adds	r7, #32
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	080189c8 	.word	0x080189c8
 800aab4:	08018a40 	.word	0x08018a40
 800aab8:	08018a0c 	.word	0x08018a0c
 800aabc:	08018a64 	.word	0x08018a64
 800aac0:	08018a84 	.word	0x08018a84

0800aac4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b088      	sub	sp, #32
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	607a      	str	r2, [r7, #4]
 800aad0:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d106      	bne.n	800aae6 <recv_tcp+0x22>
 800aad8:	4b36      	ldr	r3, [pc, #216]	; (800abb4 <recv_tcp+0xf0>)
 800aada:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aade:	4936      	ldr	r1, [pc, #216]	; (800abb8 <recv_tcp+0xf4>)
 800aae0:	4836      	ldr	r0, [pc, #216]	; (800abbc <recv_tcp+0xf8>)
 800aae2:	f00c fe5f 	bl	80177a4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d106      	bne.n	800aafa <recv_tcp+0x36>
 800aaec:	4b31      	ldr	r3, [pc, #196]	; (800abb4 <recv_tcp+0xf0>)
 800aaee:	f240 122d 	movw	r2, #301	; 0x12d
 800aaf2:	4933      	ldr	r1, [pc, #204]	; (800abc0 <recv_tcp+0xfc>)
 800aaf4:	4831      	ldr	r0, [pc, #196]	; (800abbc <recv_tcp+0xf8>)
 800aaf6:	f00c fe55 	bl	80177a4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800aafa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d006      	beq.n	800ab10 <recv_tcp+0x4c>
 800ab02:	4b2c      	ldr	r3, [pc, #176]	; (800abb4 <recv_tcp+0xf0>)
 800ab04:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800ab08:	492e      	ldr	r1, [pc, #184]	; (800abc4 <recv_tcp+0x100>)
 800ab0a:	482c      	ldr	r0, [pc, #176]	; (800abbc <recv_tcp+0xf8>)
 800ab0c:	f00c fe4a 	bl	80177a4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d102      	bne.n	800ab20 <recv_tcp+0x5c>
    return ERR_VAL;
 800ab1a:	f06f 0305 	mvn.w	r3, #5
 800ab1e:	e045      	b.n	800abac <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	68ba      	ldr	r2, [r7, #8]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d006      	beq.n	800ab38 <recv_tcp+0x74>
 800ab2a:	4b22      	ldr	r3, [pc, #136]	; (800abb4 <recv_tcp+0xf0>)
 800ab2c:	f240 1235 	movw	r2, #309	; 0x135
 800ab30:	4925      	ldr	r1, [pc, #148]	; (800abc8 <recv_tcp+0x104>)
 800ab32:	4822      	ldr	r0, [pc, #136]	; (800abbc <recv_tcp+0xf8>)
 800ab34:	f00c fe36 	bl	80177a4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	3310      	adds	r3, #16
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f00c fb08 	bl	8017152 <sys_mbox_valid>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10d      	bne.n	800ab64 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d008      	beq.n	800ab60 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	891b      	ldrh	r3, [r3, #8]
 800ab52:	4619      	mov	r1, r3
 800ab54:	68b8      	ldr	r0, [r7, #8]
 800ab56:	f003 fdcb 	bl	800e6f0 <tcp_recved>
      pbuf_free(p);
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f002 feca 	bl	800d8f4 <pbuf_free>
    }
    return ERR_OK;
 800ab60:	2300      	movs	r3, #0
 800ab62:	e023      	b.n	800abac <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d005      	beq.n	800ab76 <recv_tcp+0xb2>
    msg = p;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	891b      	ldrh	r3, [r3, #8]
 800ab72:	83fb      	strh	r3, [r7, #30]
 800ab74:	e003      	b.n	800ab7e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800ab76:	4b15      	ldr	r3, [pc, #84]	; (800abcc <recv_tcp+0x108>)
 800ab78:	61bb      	str	r3, [r7, #24]
    len = 0;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	3310      	adds	r3, #16
 800ab82:	69b9      	ldr	r1, [r7, #24]
 800ab84:	4618      	mov	r0, r3
 800ab86:	f00c fa6f 	bl	8017068 <sys_mbox_trypost>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d002      	beq.n	800ab96 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800ab90:	f04f 33ff 	mov.w	r3, #4294967295
 800ab94:	e00a      	b.n	800abac <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d005      	beq.n	800abaa <recv_tcp+0xe6>
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba2:	8bfa      	ldrh	r2, [r7, #30]
 800aba4:	2100      	movs	r1, #0
 800aba6:	6978      	ldr	r0, [r7, #20]
 800aba8:	4798      	blx	r3
  }

  return ERR_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3720      	adds	r7, #32
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	080189c8 	.word	0x080189c8
 800abb8:	08018aa4 	.word	0x08018aa4
 800abbc:	08018a0c 	.word	0x08018a0c
 800abc0:	08018ac8 	.word	0x08018ac8
 800abc4:	08018ae8 	.word	0x08018ae8
 800abc8:	08018b00 	.word	0x08018b00
 800abcc:	0801bb62 	.word	0x0801bb62

0800abd0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d106      	bne.n	800abf2 <poll_tcp+0x22>
 800abe4:	4b29      	ldr	r3, [pc, #164]	; (800ac8c <poll_tcp+0xbc>)
 800abe6:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800abea:	4929      	ldr	r1, [pc, #164]	; (800ac90 <poll_tcp+0xc0>)
 800abec:	4829      	ldr	r0, [pc, #164]	; (800ac94 <poll_tcp+0xc4>)
 800abee:	f00c fdd9 	bl	80177a4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	785b      	ldrb	r3, [r3, #1]
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d104      	bne.n	800ac04 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800abfa:	2101      	movs	r1, #1
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	f000 fe59 	bl	800b8b4 <lwip_netconn_do_writemore>
 800ac02:	e016      	b.n	800ac32 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	785b      	ldrb	r3, [r3, #1]
 800ac08:	2b04      	cmp	r3, #4
 800ac0a:	d112      	bne.n	800ac32 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6a1b      	ldr	r3, [r3, #32]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d00a      	beq.n	800ac2a <poll_tcp+0x5a>
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	6a1b      	ldr	r3, [r3, #32]
 800ac18:	7a5b      	ldrb	r3, [r3, #9]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d005      	beq.n	800ac2a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	6a1b      	ldr	r3, [r3, #32]
 800ac22:	7a5a      	ldrb	r2, [r3, #9]
 800ac24:	3a01      	subs	r2, #1
 800ac26:	b2d2      	uxtb	r2, r2
 800ac28:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ac2a:	2101      	movs	r1, #1
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f000 fb3b 	bl	800b2a8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	7f1b      	ldrb	r3, [r3, #28]
 800ac36:	f003 0310 	and.w	r3, r3, #16
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d021      	beq.n	800ac82 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d01d      	beq.n	800ac82 <poll_tcp+0xb2>
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ac4e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ac52:	d316      	bcc.n	800ac82 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ac5c:	2b04      	cmp	r3, #4
 800ac5e:	d810      	bhi.n	800ac82 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	7f1b      	ldrb	r3, [r3, #28]
 800ac64:	f023 0310 	bic.w	r3, r3, #16
 800ac68:	b2da      	uxtb	r2, r3
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d005      	beq.n	800ac82 <poll_tcp+0xb2>
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	2102      	movs	r1, #2
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	080189c8 	.word	0x080189c8
 800ac90:	08018b20 	.word	0x08018b20
 800ac94:	08018a0c 	.word	0x08018a0c

0800ac98 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b086      	sub	sp, #24
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	4613      	mov	r3, r2
 800aca4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d106      	bne.n	800acbe <sent_tcp+0x26>
 800acb0:	4b20      	ldr	r3, [pc, #128]	; (800ad34 <sent_tcp+0x9c>)
 800acb2:	f240 1293 	movw	r2, #403	; 0x193
 800acb6:	4920      	ldr	r1, [pc, #128]	; (800ad38 <sent_tcp+0xa0>)
 800acb8:	4820      	ldr	r0, [pc, #128]	; (800ad3c <sent_tcp+0xa4>)
 800acba:	f00c fd73 	bl	80177a4 <iprintf>

  if (conn) {
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d032      	beq.n	800ad2a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	785b      	ldrb	r3, [r3, #1]
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d104      	bne.n	800acd6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800accc:	2101      	movs	r1, #1
 800acce:	6978      	ldr	r0, [r7, #20]
 800acd0:	f000 fdf0 	bl	800b8b4 <lwip_netconn_do_writemore>
 800acd4:	e007      	b.n	800ace6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	785b      	ldrb	r3, [r3, #1]
 800acda:	2b04      	cmp	r3, #4
 800acdc:	d103      	bne.n	800ace6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800acde:	2101      	movs	r1, #1
 800ace0:	6978      	ldr	r0, [r7, #20]
 800ace2:	f000 fae1 	bl	800b2a8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d01d      	beq.n	800ad2a <sent_tcp+0x92>
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800acf6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800acfa:	d316      	bcc.n	800ad2a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ad04:	2b04      	cmp	r3, #4
 800ad06:	d810      	bhi.n	800ad2a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	7f1b      	ldrb	r3, [r3, #28]
 800ad0c:	f023 0310 	bic.w	r3, r3, #16
 800ad10:	b2da      	uxtb	r2, r3
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d005      	beq.n	800ad2a <sent_tcp+0x92>
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad22:	88fa      	ldrh	r2, [r7, #6]
 800ad24:	2102      	movs	r1, #2
 800ad26:	6978      	ldr	r0, [r7, #20]
 800ad28:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3718      	adds	r7, #24
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	080189c8 	.word	0x080189c8
 800ad38:	08018b20 	.word	0x08018b20
 800ad3c:	08018a0c 	.word	0x08018a0c

0800ad40 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b088      	sub	sp, #32
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	460b      	mov	r3, r1
 800ad4a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d106      	bne.n	800ad64 <err_tcp+0x24>
 800ad56:	4b5f      	ldr	r3, [pc, #380]	; (800aed4 <err_tcp+0x194>)
 800ad58:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800ad5c:	495e      	ldr	r1, [pc, #376]	; (800aed8 <err_tcp+0x198>)
 800ad5e:	485f      	ldr	r0, [pc, #380]	; (800aedc <err_tcp+0x19c>)
 800ad60:	f00c fd20 	bl	80177a4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800ad64:	f00c fb10 	bl	8017388 <sys_arch_protect>
 800ad68:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800ad6a:	69fb      	ldr	r3, [r7, #28]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	78fa      	ldrb	r2, [r7, #3]
 800ad74:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	7f1b      	ldrb	r3, [r3, #28]
 800ad7a:	f043 0301 	orr.w	r3, r3, #1
 800ad7e:	b2da      	uxtb	r2, r3
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	785b      	ldrb	r3, [r3, #1]
 800ad88:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800ad8a:	69fb      	ldr	r3, [r7, #28]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800ad90:	69b8      	ldr	r0, [r7, #24]
 800ad92:	f00c fb07 	bl	80173a4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d005      	beq.n	800adaa <err_tcp+0x6a>
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada2:	2200      	movs	r2, #0
 800ada4:	2104      	movs	r1, #4
 800ada6:	69f8      	ldr	r0, [r7, #28]
 800ada8:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d005      	beq.n	800adbe <err_tcp+0x7e>
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb6:	2200      	movs	r2, #0
 800adb8:	2100      	movs	r1, #0
 800adba:	69f8      	ldr	r0, [r7, #28]
 800adbc:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800adbe:	69fb      	ldr	r3, [r7, #28]
 800adc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d005      	beq.n	800add2 <err_tcp+0x92>
 800adc6:	69fb      	ldr	r3, [r7, #28]
 800adc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adca:	2200      	movs	r2, #0
 800adcc:	2102      	movs	r1, #2
 800adce:	69f8      	ldr	r0, [r7, #28]
 800add0:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800add2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800add6:	4618      	mov	r0, r3
 800add8:	f7ff fd86 	bl	800a8e8 <lwip_netconn_err_to_msg>
 800addc:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800adde:	69fb      	ldr	r3, [r7, #28]
 800ade0:	3310      	adds	r3, #16
 800ade2:	4618      	mov	r0, r3
 800ade4:	f00c f9b5 	bl	8017152 <sys_mbox_valid>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d005      	beq.n	800adfa <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800adee:	69fb      	ldr	r3, [r7, #28]
 800adf0:	3310      	adds	r3, #16
 800adf2:	6939      	ldr	r1, [r7, #16]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f00c f937 	bl	8017068 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800adfa:	69fb      	ldr	r3, [r7, #28]
 800adfc:	3314      	adds	r3, #20
 800adfe:	4618      	mov	r0, r3
 800ae00:	f00c f9a7 	bl	8017152 <sys_mbox_valid>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d005      	beq.n	800ae16 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	3314      	adds	r3, #20
 800ae0e:	6939      	ldr	r1, [r7, #16]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f00c f929 	bl	8017068 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800ae16:	7dfb      	ldrb	r3, [r7, #23]
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d005      	beq.n	800ae28 <err_tcp+0xe8>
 800ae1c:	7dfb      	ldrb	r3, [r7, #23]
 800ae1e:	2b04      	cmp	r3, #4
 800ae20:	d002      	beq.n	800ae28 <err_tcp+0xe8>
 800ae22:	7dfb      	ldrb	r3, [r7, #23]
 800ae24:	2b03      	cmp	r3, #3
 800ae26:	d143      	bne.n	800aeb0 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	7f1b      	ldrb	r3, [r3, #28]
 800ae2c:	f003 0304 	and.w	r3, r3, #4
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	bf14      	ite	ne
 800ae34:	2301      	movne	r3, #1
 800ae36:	2300      	moveq	r3, #0
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	7f1b      	ldrb	r3, [r3, #28]
 800ae40:	f023 0304 	bic.w	r3, r3, #4
 800ae44:	b2da      	uxtb	r2, r3
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d13b      	bne.n	800aec8 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	6a1b      	ldr	r3, [r3, #32]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d106      	bne.n	800ae66 <err_tcp+0x126>
 800ae58:	4b1e      	ldr	r3, [pc, #120]	; (800aed4 <err_tcp+0x194>)
 800ae5a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ae5e:	4920      	ldr	r1, [pc, #128]	; (800aee0 <err_tcp+0x1a0>)
 800ae60:	481e      	ldr	r0, [pc, #120]	; (800aedc <err_tcp+0x19c>)
 800ae62:	f00c fc9f 	bl	80177a4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800ae66:	7dfb      	ldrb	r3, [r7, #23]
 800ae68:	2b04      	cmp	r3, #4
 800ae6a:	d104      	bne.n	800ae76 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	6a1b      	ldr	r3, [r3, #32]
 800ae70:	2200      	movs	r2, #0
 800ae72:	711a      	strb	r2, [r3, #4]
 800ae74:	e003      	b.n	800ae7e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	6a1b      	ldr	r3, [r3, #32]
 800ae7a:	78fa      	ldrb	r2, [r7, #3]
 800ae7c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	6a1b      	ldr	r3, [r3, #32]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	330c      	adds	r3, #12
 800ae86:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800ae88:	68b8      	ldr	r0, [r7, #8]
 800ae8a:	f00c f9f3 	bl	8017274 <sys_sem_valid>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d106      	bne.n	800aea2 <err_tcp+0x162>
 800ae94:	4b0f      	ldr	r3, [pc, #60]	; (800aed4 <err_tcp+0x194>)
 800ae96:	f240 12ef 	movw	r2, #495	; 0x1ef
 800ae9a:	4912      	ldr	r1, [pc, #72]	; (800aee4 <err_tcp+0x1a4>)
 800ae9c:	480f      	ldr	r0, [pc, #60]	; (800aedc <err_tcp+0x19c>)
 800ae9e:	f00c fc81 	bl	80177a4 <iprintf>
      conn->current_msg = NULL;
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	2200      	movs	r2, #0
 800aea6:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800aea8:	68b8      	ldr	r0, [r7, #8]
 800aeaa:	f00c f9c9 	bl	8017240 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800aeae:	e00b      	b.n	800aec8 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	6a1b      	ldr	r3, [r3, #32]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d008      	beq.n	800aeca <err_tcp+0x18a>
 800aeb8:	4b06      	ldr	r3, [pc, #24]	; (800aed4 <err_tcp+0x194>)
 800aeba:	f240 12f7 	movw	r2, #503	; 0x1f7
 800aebe:	490a      	ldr	r1, [pc, #40]	; (800aee8 <err_tcp+0x1a8>)
 800aec0:	4806      	ldr	r0, [pc, #24]	; (800aedc <err_tcp+0x19c>)
 800aec2:	f00c fc6f 	bl	80177a4 <iprintf>
  }
}
 800aec6:	e000      	b.n	800aeca <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800aec8:	bf00      	nop
}
 800aeca:	bf00      	nop
 800aecc:	3720      	adds	r7, #32
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	080189c8 	.word	0x080189c8
 800aed8:	08018b20 	.word	0x08018b20
 800aedc:	08018a0c 	.word	0x08018a0c
 800aee0:	08018b30 	.word	0x08018b30
 800aee4:	08018b4c 	.word	0x08018b4c
 800aee8:	08018b68 	.word	0x08018b68

0800aeec <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800aefa:	6879      	ldr	r1, [r7, #4]
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	f004 fabd 	bl	800f47c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800af02:	490a      	ldr	r1, [pc, #40]	; (800af2c <setup_tcp+0x40>)
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f004 facb 	bl	800f4a0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800af0a:	4909      	ldr	r1, [pc, #36]	; (800af30 <setup_tcp+0x44>)
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f004 fae9 	bl	800f4e4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800af12:	2202      	movs	r2, #2
 800af14:	4907      	ldr	r1, [pc, #28]	; (800af34 <setup_tcp+0x48>)
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	f004 fb40 	bl	800f59c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800af1c:	4906      	ldr	r1, [pc, #24]	; (800af38 <setup_tcp+0x4c>)
 800af1e:	68f8      	ldr	r0, [r7, #12]
 800af20:	f004 fb02 	bl	800f528 <tcp_err>
}
 800af24:	bf00      	nop
 800af26:	3710      	adds	r7, #16
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	0800aac5 	.word	0x0800aac5
 800af30:	0800ac99 	.word	0x0800ac99
 800af34:	0800abd1 	.word	0x0800abd1
 800af38:	0800ad41 	.word	0x0800ad41

0800af3c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800af3c:	b590      	push	{r4, r7, lr}
 800af3e:	b085      	sub	sp, #20
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800af44:	2300      	movs	r3, #0
 800af46:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d006      	beq.n	800af60 <pcb_new+0x24>
 800af52:	4b2b      	ldr	r3, [pc, #172]	; (800b000 <pcb_new+0xc4>)
 800af54:	f240 2265 	movw	r2, #613	; 0x265
 800af58:	492a      	ldr	r1, [pc, #168]	; (800b004 <pcb_new+0xc8>)
 800af5a:	482b      	ldr	r0, [pc, #172]	; (800b008 <pcb_new+0xcc>)
 800af5c:	f00c fc22 	bl	80177a4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af6a:	2b10      	cmp	r3, #16
 800af6c:	d022      	beq.n	800afb4 <pcb_new+0x78>
 800af6e:	2b20      	cmp	r3, #32
 800af70:	d133      	bne.n	800afda <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681c      	ldr	r4, [r3, #0]
 800af76:	7bfb      	ldrb	r3, [r7, #15]
 800af78:	4618      	mov	r0, r3
 800af7a:	f009 fd44 	bl	8014a06 <udp_new_ip_type>
 800af7e:	4603      	mov	r3, r0
 800af80:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d02a      	beq.n	800afe2 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	2b22      	cmp	r3, #34	; 0x22
 800af94:	d104      	bne.n	800afa0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	2201      	movs	r2, #1
 800af9e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	6858      	ldr	r0, [r3, #4]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	461a      	mov	r2, r3
 800afac:	4917      	ldr	r1, [pc, #92]	; (800b00c <pcb_new+0xd0>)
 800afae:	f009 fcb1 	bl	8014914 <udp_recv>
      }
      break;
 800afb2:	e016      	b.n	800afe2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681c      	ldr	r4, [r3, #0]
 800afb8:	7bfb      	ldrb	r3, [r7, #15]
 800afba:	4618      	mov	r0, r3
 800afbc:	f004 fa50 	bl	800f460 <tcp_new_ip_type>
 800afc0:	4603      	mov	r3, r0
 800afc2:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00b      	beq.n	800afe6 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7ff ff8a 	bl	800aeec <setup_tcp>
      }
      break;
 800afd8:	e005      	b.n	800afe6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	22fa      	movs	r2, #250	; 0xfa
 800afde:	711a      	strb	r2, [r3, #4]
      return;
 800afe0:	e00a      	b.n	800aff8 <pcb_new+0xbc>
      break;
 800afe2:	bf00      	nop
 800afe4:	e000      	b.n	800afe8 <pcb_new+0xac>
      break;
 800afe6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d102      	bne.n	800aff8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	22ff      	movs	r2, #255	; 0xff
 800aff6:	711a      	strb	r2, [r3, #4]
  }
}
 800aff8:	3714      	adds	r7, #20
 800affa:	46bd      	mov	sp, r7
 800affc:	bd90      	pop	{r4, r7, pc}
 800affe:	bf00      	nop
 800b000:	080189c8 	.word	0x080189c8
 800b004:	08018bac 	.word	0x08018bac
 800b008:	08018a0c 	.word	0x08018a0c
 800b00c:	0800a9c9 	.word	0x0800a9c9

0800b010 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2200      	movs	r2, #0
 800b020:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d102      	bne.n	800b032 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f7ff ff85 	bl	800af3c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800b032:	bf00      	nop
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
	...

0800b03c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b086      	sub	sp, #24
 800b040:	af00      	add	r7, sp, #0
 800b042:	4603      	mov	r3, r0
 800b044:	6039      	str	r1, [r7, #0]
 800b046:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800b048:	2300      	movs	r3, #0
 800b04a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800b04c:	2007      	movs	r0, #7
 800b04e:	f001 fdbf 	bl	800cbd0 <memp_malloc>
 800b052:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d101      	bne.n	800b05e <netconn_alloc+0x22>
    return NULL;
 800b05a:	2300      	movs	r3, #0
 800b05c:	e052      	b.n	800b104 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2200      	movs	r2, #0
 800b062:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	79fa      	ldrb	r2, [r7, #7]
 800b068:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2200      	movs	r2, #0
 800b06e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800b070:	79fb      	ldrb	r3, [r7, #7]
 800b072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b076:	2b10      	cmp	r3, #16
 800b078:	d004      	beq.n	800b084 <netconn_alloc+0x48>
 800b07a:	2b20      	cmp	r3, #32
 800b07c:	d105      	bne.n	800b08a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800b07e:	2306      	movs	r3, #6
 800b080:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800b082:	e00a      	b.n	800b09a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800b084:	2306      	movs	r3, #6
 800b086:	617b      	str	r3, [r7, #20]
      break;
 800b088:	e007      	b.n	800b09a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800b08a:	4b20      	ldr	r3, [pc, #128]	; (800b10c <netconn_alloc+0xd0>)
 800b08c:	f240 22e5 	movw	r2, #741	; 0x2e5
 800b090:	491f      	ldr	r1, [pc, #124]	; (800b110 <netconn_alloc+0xd4>)
 800b092:	4820      	ldr	r0, [pc, #128]	; (800b114 <netconn_alloc+0xd8>)
 800b094:	f00c fb86 	bl	80177a4 <iprintf>
      goto free_and_return;
 800b098:	e02f      	b.n	800b0fa <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	3310      	adds	r3, #16
 800b09e:	6979      	ldr	r1, [r7, #20]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f00b ffad 	bl	8017000 <sys_mbox_new>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d125      	bne.n	800b0f8 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	330c      	adds	r3, #12
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f00c f86b 	bl	801718e <sys_sem_new>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d005      	beq.n	800b0ca <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	3310      	adds	r3, #16
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f00b ffbe 	bl	8017044 <sys_mbox_free>
    goto free_and_return;
 800b0c8:	e017      	b.n	800b0fa <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	3314      	adds	r3, #20
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f00c f850 	bl	8017174 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b0e0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	683a      	ldr	r2, [r7, #0]
 800b0e6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	7cfa      	ldrb	r2, [r7, #19]
 800b0f2:	771a      	strb	r2, [r3, #28]
  return conn;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	e005      	b.n	800b104 <netconn_alloc+0xc8>
    goto free_and_return;
 800b0f8:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800b0fa:	68f9      	ldr	r1, [r7, #12]
 800b0fc:	2007      	movs	r0, #7
 800b0fe:	f001 fdb9 	bl	800cc74 <memp_free>
  return NULL;
 800b102:	2300      	movs	r3, #0
}
 800b104:	4618      	mov	r0, r3
 800b106:	3718      	adds	r7, #24
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	080189c8 	.word	0x080189c8
 800b110:	08018bcc 	.word	0x08018bcc
 800b114:	08018a0c 	.word	0x08018a0c

0800b118 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b082      	sub	sp, #8
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d006      	beq.n	800b136 <netconn_free+0x1e>
 800b128:	4b1b      	ldr	r3, [pc, #108]	; (800b198 <netconn_free+0x80>)
 800b12a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b12e:	491b      	ldr	r1, [pc, #108]	; (800b19c <netconn_free+0x84>)
 800b130:	481b      	ldr	r0, [pc, #108]	; (800b1a0 <netconn_free+0x88>)
 800b132:	f00c fb37 	bl	80177a4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	3310      	adds	r3, #16
 800b13a:	4618      	mov	r0, r3
 800b13c:	f00c f809 	bl	8017152 <sys_mbox_valid>
 800b140:	4603      	mov	r3, r0
 800b142:	2b00      	cmp	r3, #0
 800b144:	d006      	beq.n	800b154 <netconn_free+0x3c>
 800b146:	4b14      	ldr	r3, [pc, #80]	; (800b198 <netconn_free+0x80>)
 800b148:	f240 3223 	movw	r2, #803	; 0x323
 800b14c:	4915      	ldr	r1, [pc, #84]	; (800b1a4 <netconn_free+0x8c>)
 800b14e:	4814      	ldr	r0, [pc, #80]	; (800b1a0 <netconn_free+0x88>)
 800b150:	f00c fb28 	bl	80177a4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	3314      	adds	r3, #20
 800b158:	4618      	mov	r0, r3
 800b15a:	f00b fffa 	bl	8017152 <sys_mbox_valid>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b00      	cmp	r3, #0
 800b162:	d006      	beq.n	800b172 <netconn_free+0x5a>
 800b164:	4b0c      	ldr	r3, [pc, #48]	; (800b198 <netconn_free+0x80>)
 800b166:	f240 3226 	movw	r2, #806	; 0x326
 800b16a:	490f      	ldr	r1, [pc, #60]	; (800b1a8 <netconn_free+0x90>)
 800b16c:	480c      	ldr	r0, [pc, #48]	; (800b1a0 <netconn_free+0x88>)
 800b16e:	f00c fb19 	bl	80177a4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	330c      	adds	r3, #12
 800b176:	4618      	mov	r0, r3
 800b178:	f00c f86f 	bl	801725a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	330c      	adds	r3, #12
 800b180:	4618      	mov	r0, r3
 800b182:	f00c f888 	bl	8017296 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800b186:	6879      	ldr	r1, [r7, #4]
 800b188:	2007      	movs	r0, #7
 800b18a:	f001 fd73 	bl	800cc74 <memp_free>
}
 800b18e:	bf00      	nop
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	080189c8 	.word	0x080189c8
 800b19c:	08018bf4 	.word	0x08018bf4
 800b1a0:	08018a0c 	.word	0x08018a0c
 800b1a4:	08018c24 	.word	0x08018c24
 800b1a8:	08018c60 	.word	0x08018c60

0800b1ac <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b086      	sub	sp, #24
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	3310      	adds	r3, #16
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f00b ffca 	bl	8017152 <sys_mbox_valid>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d02f      	beq.n	800b224 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b1c4:	e018      	b.n	800b1f8 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b1ce:	2b10      	cmp	r3, #16
 800b1d0:	d10e      	bne.n	800b1f0 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	f107 020f 	add.w	r2, r7, #15
 800b1d8:	4611      	mov	r1, r2
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7ff fbba 	bl	800a954 <lwip_netconn_is_err_msg>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d108      	bne.n	800b1f8 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f002 fb83 	bl	800d8f4 <pbuf_free>
 800b1ee:	e003      	b.n	800b1f8 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f000 fdca 	bl	800bd8c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	3310      	adds	r3, #16
 800b1fc:	f107 0210 	add.w	r2, r7, #16
 800b200:	4611      	mov	r1, r2
 800b202:	4618      	mov	r0, r3
 800b204:	f00b ff89 	bl	801711a <sys_arch_mbox_tryfetch>
 800b208:	4603      	mov	r3, r0
 800b20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b20e:	d1da      	bne.n	800b1c6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	3310      	adds	r3, #16
 800b214:	4618      	mov	r0, r3
 800b216:	f00b ff15 	bl	8017044 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	3310      	adds	r3, #16
 800b21e:	4618      	mov	r0, r3
 800b220:	f00b ffa8 	bl	8017174 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	3314      	adds	r3, #20
 800b228:	4618      	mov	r0, r3
 800b22a:	f00b ff92 	bl	8017152 <sys_mbox_valid>
 800b22e:	4603      	mov	r3, r0
 800b230:	2b00      	cmp	r3, #0
 800b232:	d034      	beq.n	800b29e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b234:	e01d      	b.n	800b272 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	f107 020e 	add.w	r2, r7, #14
 800b23c:	4611      	mov	r1, r2
 800b23e:	4618      	mov	r0, r3
 800b240:	f7ff fb88 	bl	800a954 <lwip_netconn_is_err_msg>
 800b244:	4603      	mov	r3, r0
 800b246:	2b00      	cmp	r3, #0
 800b248:	d113      	bne.n	800b272 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800b24e:	6978      	ldr	r0, [r7, #20]
 800b250:	f7ff ffac 	bl	800b1ac <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d007      	beq.n	800b26c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	4618      	mov	r0, r3
 800b262:	f003 f947 	bl	800e4f4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	2200      	movs	r2, #0
 800b26a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800b26c:	6978      	ldr	r0, [r7, #20]
 800b26e:	f7ff ff53 	bl	800b118 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	3314      	adds	r3, #20
 800b276:	f107 0210 	add.w	r2, r7, #16
 800b27a:	4611      	mov	r1, r2
 800b27c:	4618      	mov	r0, r3
 800b27e:	f00b ff4c 	bl	801711a <sys_arch_mbox_tryfetch>
 800b282:	4603      	mov	r3, r0
 800b284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b288:	d1d5      	bne.n	800b236 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	3314      	adds	r3, #20
 800b28e:	4618      	mov	r0, r3
 800b290:	f00b fed8 	bl	8017044 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	3314      	adds	r3, #20
 800b298:	4618      	mov	r0, r3
 800b29a:	f00b ff6b 	bl	8017174 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800b29e:	bf00      	nop
 800b2a0:	3718      	adds	r7, #24
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
	...

0800b2a8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b086      	sub	sp, #24
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d106      	bne.n	800b2cc <lwip_netconn_do_close_internal+0x24>
 800b2be:	4ba1      	ldr	r3, [pc, #644]	; (800b544 <lwip_netconn_do_close_internal+0x29c>)
 800b2c0:	f240 32a2 	movw	r2, #930	; 0x3a2
 800b2c4:	49a0      	ldr	r1, [pc, #640]	; (800b548 <lwip_netconn_do_close_internal+0x2a0>)
 800b2c6:	48a1      	ldr	r0, [pc, #644]	; (800b54c <lwip_netconn_do_close_internal+0x2a4>)
 800b2c8:	f00c fa6c 	bl	80177a4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b2d4:	2b10      	cmp	r3, #16
 800b2d6:	d006      	beq.n	800b2e6 <lwip_netconn_do_close_internal+0x3e>
 800b2d8:	4b9a      	ldr	r3, [pc, #616]	; (800b544 <lwip_netconn_do_close_internal+0x29c>)
 800b2da:	f240 32a3 	movw	r2, #931	; 0x3a3
 800b2de:	499c      	ldr	r1, [pc, #624]	; (800b550 <lwip_netconn_do_close_internal+0x2a8>)
 800b2e0:	489a      	ldr	r0, [pc, #616]	; (800b54c <lwip_netconn_do_close_internal+0x2a4>)
 800b2e2:	f00c fa5f 	bl	80177a4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	785b      	ldrb	r3, [r3, #1]
 800b2ea:	2b04      	cmp	r3, #4
 800b2ec:	d006      	beq.n	800b2fc <lwip_netconn_do_close_internal+0x54>
 800b2ee:	4b95      	ldr	r3, [pc, #596]	; (800b544 <lwip_netconn_do_close_internal+0x29c>)
 800b2f0:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800b2f4:	4997      	ldr	r1, [pc, #604]	; (800b554 <lwip_netconn_do_close_internal+0x2ac>)
 800b2f6:	4895      	ldr	r0, [pc, #596]	; (800b54c <lwip_netconn_do_close_internal+0x2a4>)
 800b2f8:	f00c fa54 	bl	80177a4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d106      	bne.n	800b312 <lwip_netconn_do_close_internal+0x6a>
 800b304:	4b8f      	ldr	r3, [pc, #572]	; (800b544 <lwip_netconn_do_close_internal+0x29c>)
 800b306:	f240 32a5 	movw	r2, #933	; 0x3a5
 800b30a:	4993      	ldr	r1, [pc, #588]	; (800b558 <lwip_netconn_do_close_internal+0x2b0>)
 800b30c:	488f      	ldr	r0, [pc, #572]	; (800b54c <lwip_netconn_do_close_internal+0x2a4>)
 800b30e:	f00c fa49 	bl	80177a4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a1b      	ldr	r3, [r3, #32]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d106      	bne.n	800b328 <lwip_netconn_do_close_internal+0x80>
 800b31a:	4b8a      	ldr	r3, [pc, #552]	; (800b544 <lwip_netconn_do_close_internal+0x29c>)
 800b31c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b320:	498e      	ldr	r1, [pc, #568]	; (800b55c <lwip_netconn_do_close_internal+0x2b4>)
 800b322:	488a      	ldr	r0, [pc, #552]	; (800b54c <lwip_netconn_do_close_internal+0x2a4>)
 800b324:	f00c fa3e 	bl	80177a4 <iprintf>

  tpcb = conn->pcb.tcp;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a1b      	ldr	r3, [r3, #32]
 800b332:	7a1b      	ldrb	r3, [r3, #8]
 800b334:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800b336:	7bfb      	ldrb	r3, [r7, #15]
 800b338:	f003 0301 	and.w	r3, r3, #1
 800b33c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800b33e:	7bfb      	ldrb	r3, [r7, #15]
 800b340:	f003 0302 	and.w	r3, r3, #2
 800b344:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800b346:	7bfb      	ldrb	r3, [r7, #15]
 800b348:	2b03      	cmp	r3, #3
 800b34a:	d102      	bne.n	800b352 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800b34c:	2301      	movs	r3, #1
 800b34e:	75bb      	strb	r3, [r7, #22]
 800b350:	e01f      	b.n	800b392 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800b352:	7bbb      	ldrb	r3, [r7, #14]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00e      	beq.n	800b376 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800b35c:	2b05      	cmp	r3, #5
 800b35e:	d007      	beq.n	800b370 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800b364:	2b06      	cmp	r3, #6
 800b366:	d003      	beq.n	800b370 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800b36c:	2b08      	cmp	r3, #8
 800b36e:	d102      	bne.n	800b376 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800b370:	2301      	movs	r3, #1
 800b372:	75bb      	strb	r3, [r7, #22]
 800b374:	e00d      	b.n	800b392 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800b376:	7b7b      	ldrb	r3, [r7, #13]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d008      	beq.n	800b38e <lwip_netconn_do_close_internal+0xe6>
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	8b5b      	ldrh	r3, [r3, #26]
 800b380:	f003 0310 	and.w	r3, r3, #16
 800b384:	2b00      	cmp	r3, #0
 800b386:	d002      	beq.n	800b38e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800b388:	2301      	movs	r3, #1
 800b38a:	75bb      	strb	r3, [r7, #22]
 800b38c:	e001      	b.n	800b392 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800b38e:	2300      	movs	r3, #0
 800b390:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800b392:	7dbb      	ldrb	r3, [r7, #22]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d003      	beq.n	800b3a0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800b398:	2100      	movs	r1, #0
 800b39a:	6938      	ldr	r0, [r7, #16]
 800b39c:	f004 f86e 	bl	800f47c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	7d1b      	ldrb	r3, [r3, #20]
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d104      	bne.n	800b3b2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	6938      	ldr	r0, [r7, #16]
 800b3ac:	f004 f8de 	bl	800f56c <tcp_accept>
 800b3b0:	e01d      	b.n	800b3ee <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800b3b2:	7bbb      	ldrb	r3, [r7, #14]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d007      	beq.n	800b3c8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	6938      	ldr	r0, [r7, #16]
 800b3bc:	f004 f870 	bl	800f4a0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	6938      	ldr	r0, [r7, #16]
 800b3c4:	f004 f8d2 	bl	800f56c <tcp_accept>
    }
    if (shut_tx) {
 800b3c8:	7b7b      	ldrb	r3, [r7, #13]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d003      	beq.n	800b3d6 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800b3ce:	2100      	movs	r1, #0
 800b3d0:	6938      	ldr	r0, [r7, #16]
 800b3d2:	f004 f887 	bl	800f4e4 <tcp_sent>
    }
    if (shut_close) {
 800b3d6:	7dbb      	ldrb	r3, [r7, #22]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d008      	beq.n	800b3ee <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800b3dc:	2200      	movs	r2, #0
 800b3de:	2100      	movs	r1, #0
 800b3e0:	6938      	ldr	r0, [r7, #16]
 800b3e2:	f004 f8db 	bl	800f59c <tcp_poll>
      tcp_err(tpcb, NULL);
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	6938      	ldr	r0, [r7, #16]
 800b3ea:	f004 f89d 	bl	800f528 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800b3ee:	7dbb      	ldrb	r3, [r7, #22]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d005      	beq.n	800b400 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800b3f4:	6938      	ldr	r0, [r7, #16]
 800b3f6:	f002 ff37 	bl	800e268 <tcp_close>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	75fb      	strb	r3, [r7, #23]
 800b3fe:	e007      	b.n	800b410 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800b400:	7bbb      	ldrb	r3, [r7, #14]
 800b402:	7b7a      	ldrb	r2, [r7, #13]
 800b404:	4619      	mov	r1, r3
 800b406:	6938      	ldr	r0, [r7, #16]
 800b408:	f002 ff5a 	bl	800e2c0 <tcp_shutdown>
 800b40c:	4603      	mov	r3, r0
 800b40e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800b410:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d102      	bne.n	800b41e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800b418:	2301      	movs	r3, #1
 800b41a:	757b      	strb	r3, [r7, #21]
 800b41c:	e016      	b.n	800b44c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800b41e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b422:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b426:	d10f      	bne.n	800b448 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6a1b      	ldr	r3, [r3, #32]
 800b42c:	7a5b      	ldrb	r3, [r3, #9]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d10c      	bne.n	800b44c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800b432:	2301      	movs	r3, #1
 800b434:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800b436:	7dbb      	ldrb	r3, [r7, #22]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d007      	beq.n	800b44c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800b43c:	6938      	ldr	r0, [r7, #16]
 800b43e:	f003 f859 	bl	800e4f4 <tcp_abort>
          err = ERR_OK;
 800b442:	2300      	movs	r3, #0
 800b444:	75fb      	strb	r3, [r7, #23]
 800b446:	e001      	b.n	800b44c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800b448:	2301      	movs	r3, #1
 800b44a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800b44c:	7d7b      	ldrb	r3, [r7, #21]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d044      	beq.n	800b4dc <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a1b      	ldr	r3, [r3, #32]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	330c      	adds	r3, #12
 800b45a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6a1b      	ldr	r3, [r3, #32]
 800b460:	7dfa      	ldrb	r2, [r7, #23]
 800b462:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800b470:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d129      	bne.n	800b4cc <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800b478:	7dbb      	ldrb	r3, [r7, #22]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00c      	beq.n	800b498 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d005      	beq.n	800b498 <lwip_netconn_do_close_internal+0x1f0>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b490:	2200      	movs	r2, #0
 800b492:	2104      	movs	r1, #4
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	4798      	blx	r3
      }
      if (shut_rx) {
 800b498:	7bbb      	ldrb	r3, [r7, #14]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d009      	beq.n	800b4b2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d005      	beq.n	800b4b2 <lwip_netconn_do_close_internal+0x20a>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	2100      	movs	r1, #0
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	4798      	blx	r3
      }
      if (shut_tx) {
 800b4b2:	7b7b      	ldrb	r3, [r7, #13]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d009      	beq.n	800b4cc <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d005      	beq.n	800b4cc <lwip_netconn_do_close_internal+0x224>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	2102      	movs	r1, #2
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b4cc:	78fb      	ldrb	r3, [r7, #3]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d002      	beq.n	800b4d8 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800b4d2:	68b8      	ldr	r0, [r7, #8]
 800b4d4:	f00b feb4 	bl	8017240 <sys_sem_signal>
    }
    return ERR_OK;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	e02e      	b.n	800b53a <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800b4dc:	7d7b      	ldrb	r3, [r7, #21]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d11e      	bne.n	800b520 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	7d1b      	ldrb	r3, [r3, #20]
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d106      	bne.n	800b4f8 <lwip_netconn_do_close_internal+0x250>
 800b4ea:	4b16      	ldr	r3, [pc, #88]	; (800b544 <lwip_netconn_do_close_internal+0x29c>)
 800b4ec:	f240 4241 	movw	r2, #1089	; 0x441
 800b4f0:	491b      	ldr	r1, [pc, #108]	; (800b560 <lwip_netconn_do_close_internal+0x2b8>)
 800b4f2:	4816      	ldr	r0, [pc, #88]	; (800b54c <lwip_netconn_do_close_internal+0x2a4>)
 800b4f4:	f00c f956 	bl	80177a4 <iprintf>
    if (shut_tx) {
 800b4f8:	7b7b      	ldrb	r3, [r7, #13]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d003      	beq.n	800b506 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800b4fe:	4919      	ldr	r1, [pc, #100]	; (800b564 <lwip_netconn_do_close_internal+0x2bc>)
 800b500:	6938      	ldr	r0, [r7, #16]
 800b502:	f003 ffef 	bl	800f4e4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800b506:	2201      	movs	r2, #1
 800b508:	4917      	ldr	r1, [pc, #92]	; (800b568 <lwip_netconn_do_close_internal+0x2c0>)
 800b50a:	6938      	ldr	r0, [r7, #16]
 800b50c:	f004 f846 	bl	800f59c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800b510:	4916      	ldr	r1, [pc, #88]	; (800b56c <lwip_netconn_do_close_internal+0x2c4>)
 800b512:	6938      	ldr	r0, [r7, #16]
 800b514:	f004 f808 	bl	800f528 <tcp_err>
    tcp_arg(tpcb, conn);
 800b518:	6879      	ldr	r1, [r7, #4]
 800b51a:	6938      	ldr	r0, [r7, #16]
 800b51c:	f003 ffae 	bl	800f47c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800b520:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d106      	bne.n	800b536 <lwip_netconn_do_close_internal+0x28e>
 800b528:	4b06      	ldr	r3, [pc, #24]	; (800b544 <lwip_netconn_do_close_internal+0x29c>)
 800b52a:	f240 424d 	movw	r2, #1101	; 0x44d
 800b52e:	4910      	ldr	r1, [pc, #64]	; (800b570 <lwip_netconn_do_close_internal+0x2c8>)
 800b530:	4806      	ldr	r0, [pc, #24]	; (800b54c <lwip_netconn_do_close_internal+0x2a4>)
 800b532:	f00c f937 	bl	80177a4 <iprintf>
  return err;
 800b536:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3718      	adds	r7, #24
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	080189c8 	.word	0x080189c8
 800b548:	08018c9c 	.word	0x08018c9c
 800b54c:	08018a0c 	.word	0x08018a0c
 800b550:	08018cac 	.word	0x08018cac
 800b554:	08018ccc 	.word	0x08018ccc
 800b558:	08018cf0 	.word	0x08018cf0
 800b55c:	08018b30 	.word	0x08018b30
 800b560:	08018d04 	.word	0x08018d04
 800b564:	0800ac99 	.word	0x0800ac99
 800b568:	0800abd1 	.word	0x0800abd1
 800b56c:	0800ad41 	.word	0x0800ad41
 800b570:	08018d28 	.word	0x08018d28

0800b574 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	785b      	ldrb	r3, [r3, #1]
 800b586:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800b588:	7afb      	ldrb	r3, [r7, #11]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00d      	beq.n	800b5aa <lwip_netconn_do_delconn+0x36>
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b598:	2b10      	cmp	r3, #16
 800b59a:	d006      	beq.n	800b5aa <lwip_netconn_do_delconn+0x36>
 800b59c:	4b60      	ldr	r3, [pc, #384]	; (800b720 <lwip_netconn_do_delconn+0x1ac>)
 800b59e:	f240 425e 	movw	r2, #1118	; 0x45e
 800b5a2:	4960      	ldr	r1, [pc, #384]	; (800b724 <lwip_netconn_do_delconn+0x1b0>)
 800b5a4:	4860      	ldr	r0, [pc, #384]	; (800b728 <lwip_netconn_do_delconn+0x1b4>)
 800b5a6:	f00c f8fd 	bl	80177a4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800b5aa:	7afb      	ldrb	r3, [r7, #11]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d005      	beq.n	800b5bc <lwip_netconn_do_delconn+0x48>
 800b5b0:	7afb      	ldrb	r3, [r7, #11]
 800b5b2:	2b02      	cmp	r3, #2
 800b5b4:	d002      	beq.n	800b5bc <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800b5b6:	7afb      	ldrb	r3, [r7, #11]
 800b5b8:	2b03      	cmp	r3, #3
 800b5ba:	d109      	bne.n	800b5d0 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800b5bc:	7afb      	ldrb	r3, [r7, #11]
 800b5be:	2b03      	cmp	r3, #3
 800b5c0:	d10a      	bne.n	800b5d8 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	7f1b      	ldrb	r3, [r3, #28]
 800b5c8:	f003 0304 	and.w	r3, r3, #4
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d103      	bne.n	800b5d8 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	22fb      	movs	r2, #251	; 0xfb
 800b5d4:	711a      	strb	r2, [r3, #4]
 800b5d6:	e097      	b.n	800b708 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800b5d8:	7afb      	ldrb	r3, [r7, #11]
 800b5da:	2b03      	cmp	r3, #3
 800b5dc:	d10d      	bne.n	800b5fa <lwip_netconn_do_delconn+0x86>
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	7f1b      	ldrb	r3, [r3, #28]
 800b5e4:	f003 0304 	and.w	r3, r3, #4
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d106      	bne.n	800b5fa <lwip_netconn_do_delconn+0x86>
 800b5ec:	4b4c      	ldr	r3, [pc, #304]	; (800b720 <lwip_netconn_do_delconn+0x1ac>)
 800b5ee:	f240 427a 	movw	r2, #1146	; 0x47a
 800b5f2:	494e      	ldr	r1, [pc, #312]	; (800b72c <lwip_netconn_do_delconn+0x1b8>)
 800b5f4:	484c      	ldr	r0, [pc, #304]	; (800b728 <lwip_netconn_do_delconn+0x1b4>)
 800b5f6:	f00c f8d5 	bl	80177a4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4618      	mov	r0, r3
 800b606:	f7ff fdd1 	bl	800b1ac <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d05f      	beq.n	800b6d4 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b61e:	2b10      	cmp	r3, #16
 800b620:	d00d      	beq.n	800b63e <lwip_netconn_do_delconn+0xca>
 800b622:	2b20      	cmp	r3, #32
 800b624:	d151      	bne.n	800b6ca <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	2200      	movs	r2, #0
 800b62e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	4618      	mov	r0, r3
 800b638:	f009 f98c 	bl	8014954 <udp_remove>
          break;
 800b63c:	e046      	b.n	800b6cc <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	6a1b      	ldr	r3, [r3, #32]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d006      	beq.n	800b656 <lwip_netconn_do_delconn+0xe2>
 800b648:	4b35      	ldr	r3, [pc, #212]	; (800b720 <lwip_netconn_do_delconn+0x1ac>)
 800b64a:	f240 4294 	movw	r2, #1172	; 0x494
 800b64e:	4938      	ldr	r1, [pc, #224]	; (800b730 <lwip_netconn_do_delconn+0x1bc>)
 800b650:	4835      	ldr	r0, [pc, #212]	; (800b728 <lwip_netconn_do_delconn+0x1b4>)
 800b652:	f00c f8a7 	bl	80177a4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	2204      	movs	r2, #4
 800b65c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2203      	movs	r2, #3
 800b662:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2100      	movs	r1, #0
 800b672:	4618      	mov	r0, r3
 800b674:	f7ff fe18 	bl	800b2a8 <lwip_netconn_do_close_internal>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d04b      	beq.n	800b716 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	785b      	ldrb	r3, [r3, #1]
 800b684:	2b04      	cmp	r3, #4
 800b686:	d006      	beq.n	800b696 <lwip_netconn_do_delconn+0x122>
 800b688:	4b25      	ldr	r3, [pc, #148]	; (800b720 <lwip_netconn_do_delconn+0x1ac>)
 800b68a:	f240 429a 	movw	r2, #1178	; 0x49a
 800b68e:	4929      	ldr	r1, [pc, #164]	; (800b734 <lwip_netconn_do_delconn+0x1c0>)
 800b690:	4825      	ldr	r0, [pc, #148]	; (800b728 <lwip_netconn_do_delconn+0x1b4>)
 800b692:	f00c f887 	bl	80177a4 <iprintf>
            UNLOCK_TCPIP_CORE();
 800b696:	4828      	ldr	r0, [pc, #160]	; (800b738 <lwip_netconn_do_delconn+0x1c4>)
 800b698:	f00b fe43 	bl	8017322 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	330c      	adds	r3, #12
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f00b fd9a 	bl	80171de <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800b6aa:	4823      	ldr	r0, [pc, #140]	; (800b738 <lwip_netconn_do_delconn+0x1c4>)
 800b6ac:	f00b fe2a 	bl	8017304 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	785b      	ldrb	r3, [r3, #1]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d02d      	beq.n	800b716 <lwip_netconn_do_delconn+0x1a2>
 800b6ba:	4b19      	ldr	r3, [pc, #100]	; (800b720 <lwip_netconn_do_delconn+0x1ac>)
 800b6bc:	f240 429e 	movw	r2, #1182	; 0x49e
 800b6c0:	491c      	ldr	r1, [pc, #112]	; (800b734 <lwip_netconn_do_delconn+0x1c0>)
 800b6c2:	4819      	ldr	r0, [pc, #100]	; (800b728 <lwip_netconn_do_delconn+0x1b4>)
 800b6c4:	f00c f86e 	bl	80177a4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800b6c8:	e025      	b.n	800b716 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800b6ca:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d007      	beq.n	800b6ee <lwip_netconn_do_delconn+0x17a>
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	6810      	ldr	r0, [r2, #0]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	2100      	movs	r1, #0
 800b6ec:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d007      	beq.n	800b708 <lwip_netconn_do_delconn+0x194>
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	6810      	ldr	r0, [r2, #0]
 800b702:	2200      	movs	r2, #0
 800b704:	2102      	movs	r1, #2
 800b706:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	330c      	adds	r3, #12
 800b70e:	4618      	mov	r0, r3
 800b710:	f00b fdb0 	bl	8017274 <sys_sem_valid>
 800b714:	e000      	b.n	800b718 <lwip_netconn_do_delconn+0x1a4>
          return;
 800b716:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	080189c8 	.word	0x080189c8
 800b724:	08018d38 	.word	0x08018d38
 800b728:	08018a0c 	.word	0x08018a0c
 800b72c:	08018d4c 	.word	0x08018d4c
 800b730:	08018d6c 	.word	0x08018d6c
 800b734:	08018d88 	.word	0x08018d88
 800b738:	20009f78 	.word	0x20009f78

0800b73c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d025      	beq.n	800b79e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b75c:	2b10      	cmp	r3, #16
 800b75e:	d00e      	beq.n	800b77e <lwip_netconn_do_bind+0x42>
 800b760:	2b20      	cmp	r3, #32
 800b762:	d119      	bne.n	800b798 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	6858      	ldr	r0, [r3, #4]
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	6899      	ldr	r1, [r3, #8]
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	899b      	ldrh	r3, [r3, #12]
 800b772:	461a      	mov	r2, r3
 800b774:	f009 f846 	bl	8014804 <udp_bind>
 800b778:	4603      	mov	r3, r0
 800b77a:	73fb      	strb	r3, [r7, #15]
        break;
 800b77c:	e011      	b.n	800b7a2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	6858      	ldr	r0, [r3, #4]
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	6899      	ldr	r1, [r3, #8]
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	899b      	ldrh	r3, [r3, #12]
 800b78c:	461a      	mov	r2, r3
 800b78e:	f002 febd 	bl	800e50c <tcp_bind>
 800b792:	4603      	mov	r3, r0
 800b794:	73fb      	strb	r3, [r7, #15]
        break;
 800b796:	e004      	b.n	800b7a2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800b798:	23fa      	movs	r3, #250	; 0xfa
 800b79a:	73fb      	strb	r3, [r7, #15]
        break;
 800b79c:	e001      	b.n	800b7a2 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800b79e:	23fa      	movs	r3, #250	; 0xfa
 800b7a0:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	7bfa      	ldrb	r2, [r7, #15]
 800b7a6:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b7a8:	bf00      	nop
 800b7aa:	3710      	adds	r7, #16
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7ff f875 	bl	800a8b0 <netconn_err>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b7ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d134      	bne.n	800b83c <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d02d      	beq.n	800b838 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7e6:	2b20      	cmp	r3, #32
 800b7e8:	d123      	bne.n	800b832 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	689b      	ldr	r3, [r3, #8]
 800b7ee:	689b      	ldr	r3, [r3, #8]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d10c      	bne.n	800b80e <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	685a      	ldr	r2, [r3, #4]
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4619      	mov	r1, r3
 800b802:	4610      	mov	r0, r2
 800b804:	f008 fe14 	bl	8014430 <udp_send>
 800b808:	4603      	mov	r3, r0
 800b80a:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800b80c:	e016      	b.n	800b83c <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	6858      	ldr	r0, [r3, #4]
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	6819      	ldr	r1, [r3, #0]
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	f103 0208 	add.w	r2, r3, #8
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	899b      	ldrh	r3, [r3, #12]
 800b828:	f008 fe36 	bl	8014498 <udp_sendto>
 800b82c:	4603      	mov	r3, r0
 800b82e:	73fb      	strb	r3, [r7, #15]
          break;
 800b830:	e004      	b.n	800b83c <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800b832:	23f5      	movs	r3, #245	; 0xf5
 800b834:	73fb      	strb	r3, [r7, #15]
          break;
 800b836:	e001      	b.n	800b83c <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800b838:	23f5      	movs	r3, #245	; 0xf5
 800b83a:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	7bfa      	ldrb	r2, [r7, #15]
 800b840:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b842:	bf00      	nop
 800b844:	3710      	adds	r7, #16
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}

0800b84a <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800b84a:	b580      	push	{r7, lr}
 800b84c:	b086      	sub	sp, #24
 800b84e:	af00      	add	r7, sp, #0
 800b850:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	2200      	movs	r2, #0
 800b85a:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d022      	beq.n	800b8ac <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b870:	2b10      	cmp	r3, #16
 800b872:	d11b      	bne.n	800b8ac <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b880:	d202      	bcs.n	800b888 <lwip_netconn_do_recv+0x3e>
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	b29b      	uxth	r3, r3
 800b886:	e001      	b.n	800b88c <lwip_netconn_do_recv+0x42>
 800b888:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b88c:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	89fa      	ldrh	r2, [r7, #14]
 800b896:	4611      	mov	r1, r2
 800b898:	4618      	mov	r0, r3
 800b89a:	f002 ff29 	bl	800e6f0 <tcp_recved>
        remaining -= recved;
 800b89e:	89fb      	ldrh	r3, [r7, #14]
 800b8a0:	697a      	ldr	r2, [r7, #20]
 800b8a2:	1ad3      	subs	r3, r2, r3
 800b8a4:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d1e6      	bne.n	800b87a <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b8ac:	bf00      	nop
 800b8ae:	3718      	adds	r7, #24
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b088      	sub	sp, #32
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	460b      	mov	r3, r1
 800b8be:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d106      	bne.n	800b8d8 <lwip_netconn_do_writemore+0x24>
 800b8ca:	4b96      	ldr	r3, [pc, #600]	; (800bb24 <lwip_netconn_do_writemore+0x270>)
 800b8cc:	f240 6273 	movw	r2, #1651	; 0x673
 800b8d0:	4995      	ldr	r1, [pc, #596]	; (800bb28 <lwip_netconn_do_writemore+0x274>)
 800b8d2:	4896      	ldr	r0, [pc, #600]	; (800bb2c <lwip_netconn_do_writemore+0x278>)
 800b8d4:	f00b ff66 	bl	80177a4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	785b      	ldrb	r3, [r3, #1]
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d006      	beq.n	800b8ee <lwip_netconn_do_writemore+0x3a>
 800b8e0:	4b90      	ldr	r3, [pc, #576]	; (800bb24 <lwip_netconn_do_writemore+0x270>)
 800b8e2:	f240 6274 	movw	r2, #1652	; 0x674
 800b8e6:	4992      	ldr	r1, [pc, #584]	; (800bb30 <lwip_netconn_do_writemore+0x27c>)
 800b8e8:	4890      	ldr	r0, [pc, #576]	; (800bb2c <lwip_netconn_do_writemore+0x278>)
 800b8ea:	f00b ff5b 	bl	80177a4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a1b      	ldr	r3, [r3, #32]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d106      	bne.n	800b904 <lwip_netconn_do_writemore+0x50>
 800b8f6:	4b8b      	ldr	r3, [pc, #556]	; (800bb24 <lwip_netconn_do_writemore+0x270>)
 800b8f8:	f240 6275 	movw	r2, #1653	; 0x675
 800b8fc:	498d      	ldr	r1, [pc, #564]	; (800bb34 <lwip_netconn_do_writemore+0x280>)
 800b8fe:	488b      	ldr	r0, [pc, #556]	; (800bb2c <lwip_netconn_do_writemore+0x278>)
 800b900:	f00b ff50 	bl	80177a4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d106      	bne.n	800b91a <lwip_netconn_do_writemore+0x66>
 800b90c:	4b85      	ldr	r3, [pc, #532]	; (800bb24 <lwip_netconn_do_writemore+0x270>)
 800b90e:	f240 6276 	movw	r2, #1654	; 0x676
 800b912:	4989      	ldr	r1, [pc, #548]	; (800bb38 <lwip_netconn_do_writemore+0x284>)
 800b914:	4885      	ldr	r0, [pc, #532]	; (800bb2c <lwip_netconn_do_writemore+0x278>)
 800b916:	f00b ff45 	bl	80177a4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6a1b      	ldr	r3, [r3, #32]
 800b91e:	699a      	ldr	r2, [r3, #24]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6a1b      	ldr	r3, [r3, #32]
 800b924:	695b      	ldr	r3, [r3, #20]
 800b926:	429a      	cmp	r2, r3
 800b928:	d306      	bcc.n	800b938 <lwip_netconn_do_writemore+0x84>
 800b92a:	4b7e      	ldr	r3, [pc, #504]	; (800bb24 <lwip_netconn_do_writemore+0x270>)
 800b92c:	f240 6277 	movw	r2, #1655	; 0x677
 800b930:	4982      	ldr	r1, [pc, #520]	; (800bb3c <lwip_netconn_do_writemore+0x288>)
 800b932:	487e      	ldr	r0, [pc, #504]	; (800bb2c <lwip_netconn_do_writemore+0x278>)
 800b934:	f00b ff36 	bl	80177a4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6a1b      	ldr	r3, [r3, #32]
 800b93c:	899b      	ldrh	r3, [r3, #12]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d106      	bne.n	800b950 <lwip_netconn_do_writemore+0x9c>
 800b942:	4b78      	ldr	r3, [pc, #480]	; (800bb24 <lwip_netconn_do_writemore+0x270>)
 800b944:	f240 6279 	movw	r2, #1657	; 0x679
 800b948:	497d      	ldr	r1, [pc, #500]	; (800bb40 <lwip_netconn_do_writemore+0x28c>)
 800b94a:	4878      	ldr	r0, [pc, #480]	; (800bb2c <lwip_netconn_do_writemore+0x278>)
 800b94c:	f00b ff2a 	bl	80177a4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6a1b      	ldr	r3, [r3, #32]
 800b954:	7f1b      	ldrb	r3, [r3, #28]
 800b956:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	7f1b      	ldrb	r3, [r3, #28]
 800b95c:	f003 0302 	and.w	r3, r3, #2
 800b960:	2b00      	cmp	r3, #0
 800b962:	d104      	bne.n	800b96e <lwip_netconn_do_writemore+0xba>
 800b964:	7ebb      	ldrb	r3, [r7, #26]
 800b966:	f003 0304 	and.w	r3, r3, #4
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d001      	beq.n	800b972 <lwip_netconn_do_writemore+0xbe>
 800b96e:	2301      	movs	r3, #1
 800b970:	e000      	b.n	800b974 <lwip_netconn_do_writemore+0xc0>
 800b972:	2300      	movs	r3, #0
 800b974:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a1b      	ldr	r3, [r3, #32]
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	681a      	ldr	r2, [r3, #0]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6a1b      	ldr	r3, [r3, #32]
 800b982:	691b      	ldr	r3, [r3, #16]
 800b984:	4413      	add	r3, r2
 800b986:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6a1b      	ldr	r3, [r3, #32]
 800b98c:	689b      	ldr	r3, [r3, #8]
 800b98e:	685a      	ldr	r2, [r3, #4]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6a1b      	ldr	r3, [r3, #32]
 800b994:	691b      	ldr	r3, [r3, #16]
 800b996:	1ad3      	subs	r3, r2, r3
 800b998:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9a0:	d307      	bcc.n	800b9b2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800b9a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9a6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b9a8:	7ebb      	ldrb	r3, [r7, #26]
 800b9aa:	f043 0302 	orr.w	r3, r3, #2
 800b9ae:	76bb      	strb	r3, [r7, #26]
 800b9b0:	e001      	b.n	800b9b6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b9be:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800b9c0:	89fa      	ldrh	r2, [r7, #14]
 800b9c2:	8bbb      	ldrh	r3, [r7, #28]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d216      	bcs.n	800b9f6 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800b9c8:	89fb      	ldrh	r3, [r7, #14]
 800b9ca:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800b9cc:	7e3b      	ldrb	r3, [r7, #24]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d00d      	beq.n	800b9ee <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800b9d2:	8bbb      	ldrh	r3, [r7, #28]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d10e      	bne.n	800b9f6 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6a1b      	ldr	r3, [r3, #32]
 800b9dc:	699b      	ldr	r3, [r3, #24]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d102      	bne.n	800b9e8 <lwip_netconn_do_writemore+0x134>
 800b9e2:	f06f 0306 	mvn.w	r3, #6
 800b9e6:	e000      	b.n	800b9ea <lwip_netconn_do_writemore+0x136>
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800b9ec:	e07d      	b.n	800baea <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800b9ee:	7ebb      	ldrb	r3, [r7, #26]
 800b9f0:	f043 0302 	orr.w	r3, r3, #2
 800b9f4:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6a1b      	ldr	r3, [r3, #32]
 800b9fa:	691a      	ldr	r2, [r3, #16]
 800b9fc:	8bbb      	ldrh	r3, [r7, #28]
 800b9fe:	441a      	add	r2, r3
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6a1b      	ldr	r3, [r3, #32]
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d906      	bls.n	800ba1a <lwip_netconn_do_writemore+0x166>
 800ba0c:	4b45      	ldr	r3, [pc, #276]	; (800bb24 <lwip_netconn_do_writemore+0x270>)
 800ba0e:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800ba12:	494c      	ldr	r1, [pc, #304]	; (800bb44 <lwip_netconn_do_writemore+0x290>)
 800ba14:	4845      	ldr	r0, [pc, #276]	; (800bb2c <lwip_netconn_do_writemore+0x278>)
 800ba16:	f00b fec5 	bl	80177a4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ba1a:	8bbb      	ldrh	r3, [r7, #28]
 800ba1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d103      	bne.n	800ba2c <lwip_netconn_do_writemore+0x178>
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba2a:	d209      	bcs.n	800ba40 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ba30:	8bba      	ldrh	r2, [r7, #28]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d10b      	bne.n	800ba4e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6a1b      	ldr	r3, [r3, #32]
 800ba3a:	899b      	ldrh	r3, [r3, #12]
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d906      	bls.n	800ba4e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800ba40:	2301      	movs	r3, #1
 800ba42:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ba44:	7ebb      	ldrb	r3, [r7, #26]
 800ba46:	f043 0302 	orr.w	r3, r3, #2
 800ba4a:	76bb      	strb	r3, [r7, #26]
 800ba4c:	e001      	b.n	800ba52 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6858      	ldr	r0, [r3, #4]
 800ba56:	7ebb      	ldrb	r3, [r7, #26]
 800ba58:	8bba      	ldrh	r2, [r7, #28]
 800ba5a:	6979      	ldr	r1, [r7, #20]
 800ba5c:	f006 fc4c 	bl	80122f8 <tcp_write>
 800ba60:	4603      	mov	r3, r0
 800ba62:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800ba64:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d12c      	bne.n	800bac6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6a1b      	ldr	r3, [r3, #32]
 800ba70:	6999      	ldr	r1, [r3, #24]
 800ba72:	8bba      	ldrh	r2, [r7, #28]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6a1b      	ldr	r3, [r3, #32]
 800ba78:	440a      	add	r2, r1
 800ba7a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6a1b      	ldr	r3, [r3, #32]
 800ba80:	6919      	ldr	r1, [r3, #16]
 800ba82:	8bba      	ldrh	r2, [r7, #28]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6a1b      	ldr	r3, [r3, #32]
 800ba88:	440a      	add	r2, r1
 800ba8a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6a1b      	ldr	r3, [r3, #32]
 800ba90:	691a      	ldr	r2, [r3, #16]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6a1b      	ldr	r3, [r3, #32]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d113      	bne.n	800bac6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6a1b      	ldr	r3, [r3, #32]
 800baa2:	899a      	ldrh	r2, [r3, #12]
 800baa4:	3a01      	subs	r2, #1
 800baa6:	b292      	uxth	r2, r2
 800baa8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6a1b      	ldr	r3, [r3, #32]
 800baae:	899b      	ldrh	r3, [r3, #12]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d008      	beq.n	800bac6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a1b      	ldr	r3, [r3, #32]
 800bab8:	689a      	ldr	r2, [r3, #8]
 800baba:	3208      	adds	r2, #8
 800babc:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6a1b      	ldr	r3, [r3, #32]
 800bac2:	2200      	movs	r2, #0
 800bac4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800bac6:	7e7b      	ldrb	r3, [r7, #25]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d004      	beq.n	800bad6 <lwip_netconn_do_writemore+0x222>
 800bacc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	f43f af50 	beq.w	800b976 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800bad6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d004      	beq.n	800bae8 <lwip_netconn_do_writemore+0x234>
 800bade:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bae6:	d146      	bne.n	800bb76 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800bae8:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800baea:	7e3b      	ldrb	r3, [r7, #24]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d02b      	beq.n	800bb48 <lwip_netconn_do_writemore+0x294>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6a1b      	ldr	r3, [r3, #32]
 800baf4:	699a      	ldr	r2, [r3, #24]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a1b      	ldr	r3, [r3, #32]
 800bafa:	695b      	ldr	r3, [r3, #20]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d223      	bcs.n	800bb48 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d005      	beq.n	800bb14 <lwip_netconn_do_writemore+0x260>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	2103      	movs	r1, #3
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	7f1b      	ldrb	r3, [r3, #28]
 800bb18:	f043 0310 	orr.w	r3, r3, #16
 800bb1c:	b2da      	uxtb	r2, r3
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	771a      	strb	r2, [r3, #28]
 800bb22:	e028      	b.n	800bb76 <lwip_netconn_do_writemore+0x2c2>
 800bb24:	080189c8 	.word	0x080189c8
 800bb28:	08018b20 	.word	0x08018b20
 800bb2c:	08018a0c 	.word	0x08018a0c
 800bb30:	08018e28 	.word	0x08018e28
 800bb34:	08018b30 	.word	0x08018b30
 800bb38:	08018e48 	.word	0x08018e48
 800bb3c:	08018e60 	.word	0x08018e60
 800bb40:	08018ea0 	.word	0x08018ea0
 800bb44:	08018ec8 	.word	0x08018ec8
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bb50:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800bb54:	d305      	bcc.n	800bb62 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800bb5e:	2b04      	cmp	r3, #4
 800bb60:	d909      	bls.n	800bb76 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d005      	beq.n	800bb76 <lwip_netconn_do_writemore+0x2c2>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb6e:	2200      	movs	r2, #0
 800bb70:	2103      	movs	r1, #3
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800bb76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d11d      	bne.n	800bbba <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6a1b      	ldr	r3, [r3, #32]
 800bb82:	699a      	ldr	r2, [r3, #24]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6a1b      	ldr	r3, [r3, #32]
 800bb88:	695b      	ldr	r3, [r3, #20]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d002      	beq.n	800bb94 <lwip_netconn_do_writemore+0x2e0>
 800bb8e:	7e3b      	ldrb	r3, [r7, #24]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d001      	beq.n	800bb98 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800bb94:	2301      	movs	r3, #1
 800bb96:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f007 f995 	bl	8012ecc <tcp_output>
 800bba2:	4603      	mov	r3, r0
 800bba4:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800bba6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800bbaa:	f113 0f04 	cmn.w	r3, #4
 800bbae:	d12c      	bne.n	800bc0a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800bbb0:	7b3b      	ldrb	r3, [r7, #12]
 800bbb2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	76fb      	strb	r3, [r7, #27]
 800bbb8:	e027      	b.n	800bc0a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800bbba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bbbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbc2:	d120      	bne.n	800bc06 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f007 f97f 	bl	8012ecc <tcp_output>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800bbd2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800bbd6:	f113 0f04 	cmn.w	r3, #4
 800bbda:	d104      	bne.n	800bbe6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800bbdc:	7b7b      	ldrb	r3, [r7, #13]
 800bbde:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	76fb      	strb	r3, [r7, #27]
 800bbe4:	e011      	b.n	800bc0a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800bbe6:	7e3b      	ldrb	r3, [r7, #24]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d00e      	beq.n	800bc0a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6a1b      	ldr	r3, [r3, #32]
 800bbf0:	699b      	ldr	r3, [r3, #24]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d102      	bne.n	800bbfc <lwip_netconn_do_writemore+0x348>
 800bbf6:	f06f 0306 	mvn.w	r3, #6
 800bbfa:	e000      	b.n	800bbfe <lwip_netconn_do_writemore+0x34a>
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bc00:	2301      	movs	r3, #1
 800bc02:	76fb      	strb	r3, [r7, #27]
 800bc04:	e001      	b.n	800bc0a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800bc06:	2301      	movs	r3, #1
 800bc08:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800bc0a:	7efb      	ldrb	r3, [r7, #27]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d015      	beq.n	800bc3c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6a1b      	ldr	r3, [r3, #32]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	330c      	adds	r3, #12
 800bc18:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6a1b      	ldr	r3, [r3, #32]
 800bc1e:	7ffa      	ldrb	r2, [r7, #31]
 800bc20:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2200      	movs	r2, #0
 800bc26:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800bc2e:	78fb      	ldrb	r3, [r7, #3]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d006      	beq.n	800bc42 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800bc34:	68b8      	ldr	r0, [r7, #8]
 800bc36:	f00b fb03 	bl	8017240 <sys_sem_signal>
 800bc3a:	e002      	b.n	800bc42 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800bc3c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc40:	e000      	b.n	800bc44 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800bc42:	2300      	movs	r3, #0
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3720      	adds	r7, #32
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	785b      	ldrb	r3, [r3, #1]
 800bc5e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d069      	beq.n	800bd3e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800bc74:	2b10      	cmp	r3, #16
 800bc76:	d162      	bne.n	800bd3e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800bc7c:	2b03      	cmp	r3, #3
 800bc7e:	d002      	beq.n	800bc86 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800bc80:	7afb      	ldrb	r3, [r7, #11]
 800bc82:	2b02      	cmp	r3, #2
 800bc84:	d05b      	beq.n	800bd3e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800bc86:	7afb      	ldrb	r3, [r7, #11]
 800bc88:	2b03      	cmp	r3, #3
 800bc8a:	d103      	bne.n	800bc94 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	22f5      	movs	r2, #245	; 0xf5
 800bc90:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800bc92:	e059      	b.n	800bd48 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800bc94:	7afb      	ldrb	r3, [r7, #11]
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d103      	bne.n	800bca2 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	22fb      	movs	r2, #251	; 0xfb
 800bc9e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800bca0:	e052      	b.n	800bd48 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	7a1b      	ldrb	r3, [r3, #8]
 800bca6:	f003 0301 	and.w	r3, r3, #1
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d004      	beq.n	800bcb8 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7ff fa7a 	bl	800b1ac <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	6a1b      	ldr	r3, [r3, #32]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d006      	beq.n	800bcd0 <lwip_netconn_do_close+0x84>
 800bcc2:	4b23      	ldr	r3, [pc, #140]	; (800bd50 <lwip_netconn_do_close+0x104>)
 800bcc4:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800bcc8:	4922      	ldr	r1, [pc, #136]	; (800bd54 <lwip_netconn_do_close+0x108>)
 800bcca:	4823      	ldr	r0, [pc, #140]	; (800bd58 <lwip_netconn_do_close+0x10c>)
 800bccc:	f00b fd6a 	bl	80177a4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2204      	movs	r2, #4
 800bcd6:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	68fa      	ldr	r2, [r7, #12]
 800bcde:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2100      	movs	r1, #0
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7ff fade 	bl	800b2a8 <lwip_netconn_do_close_internal>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d029      	beq.n	800bd46 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	785b      	ldrb	r3, [r3, #1]
 800bcf8:	2b04      	cmp	r3, #4
 800bcfa:	d006      	beq.n	800bd0a <lwip_netconn_do_close+0xbe>
 800bcfc:	4b14      	ldr	r3, [pc, #80]	; (800bd50 <lwip_netconn_do_close+0x104>)
 800bcfe:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800bd02:	4916      	ldr	r1, [pc, #88]	; (800bd5c <lwip_netconn_do_close+0x110>)
 800bd04:	4814      	ldr	r0, [pc, #80]	; (800bd58 <lwip_netconn_do_close+0x10c>)
 800bd06:	f00b fd4d 	bl	80177a4 <iprintf>
        UNLOCK_TCPIP_CORE();
 800bd0a:	4815      	ldr	r0, [pc, #84]	; (800bd60 <lwip_netconn_do_close+0x114>)
 800bd0c:	f00b fb09 	bl	8017322 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	330c      	adds	r3, #12
 800bd16:	2100      	movs	r1, #0
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f00b fa60 	bl	80171de <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800bd1e:	4810      	ldr	r0, [pc, #64]	; (800bd60 <lwip_netconn_do_close+0x114>)
 800bd20:	f00b faf0 	bl	8017304 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	785b      	ldrb	r3, [r3, #1]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d00b      	beq.n	800bd46 <lwip_netconn_do_close+0xfa>
 800bd2e:	4b08      	ldr	r3, [pc, #32]	; (800bd50 <lwip_netconn_do_close+0x104>)
 800bd30:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800bd34:	4909      	ldr	r1, [pc, #36]	; (800bd5c <lwip_netconn_do_close+0x110>)
 800bd36:	4808      	ldr	r0, [pc, #32]	; (800bd58 <lwip_netconn_do_close+0x10c>)
 800bd38:	f00b fd34 	bl	80177a4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800bd3c:	e003      	b.n	800bd46 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	22f5      	movs	r2, #245	; 0xf5
 800bd42:	711a      	strb	r2, [r3, #4]
 800bd44:	e000      	b.n	800bd48 <lwip_netconn_do_close+0xfc>
      return;
 800bd46:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800bd48:	3710      	adds	r7, #16
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	080189c8 	.word	0x080189c8
 800bd54:	08018d6c 	.word	0x08018d6c
 800bd58:	08018a0c 	.word	0x08018a0c
 800bd5c:	08018d88 	.word	0x08018d88
 800bd60:	20009f78 	.word	0x20009f78

0800bd64 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800bd6a:	2006      	movs	r0, #6
 800bd6c:	f000 ff30 	bl	800cbd0 <memp_malloc>
 800bd70:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d004      	beq.n	800bd82 <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 800bd78:	2210      	movs	r2, #16
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f00b fc5f 	bl	8017640 <memset>
  }
  return buf;
 800bd82:	687b      	ldr	r3, [r7, #4]
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d013      	beq.n	800bdc2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00b      	beq.n	800bdba <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4618      	mov	r0, r3
 800bda8:	f001 fda4 	bl	800d8f4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	605a      	str	r2, [r3, #4]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	685a      	ldr	r2, [r3, #4]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800bdba:	6879      	ldr	r1, [r7, #4]
 800bdbc:	2006      	movs	r0, #6
 800bdbe:	f000 ff59 	bl	800cc74 <memp_free>
  }
}
 800bdc2:	bf00      	nop
 800bdc4:	3708      	adds	r7, #8
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
	...

0800bdcc <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b084      	sub	sp, #16
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d108      	bne.n	800bdf2 <netbuf_ref+0x26>
 800bde0:	4b1c      	ldr	r3, [pc, #112]	; (800be54 <netbuf_ref+0x88>)
 800bde2:	2299      	movs	r2, #153	; 0x99
 800bde4:	491c      	ldr	r1, [pc, #112]	; (800be58 <netbuf_ref+0x8c>)
 800bde6:	481d      	ldr	r0, [pc, #116]	; (800be5c <netbuf_ref+0x90>)
 800bde8:	f00b fcdc 	bl	80177a4 <iprintf>
 800bdec:	f06f 030f 	mvn.w	r3, #15
 800bdf0:	e02b      	b.n	800be4a <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d004      	beq.n	800be04 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4618      	mov	r0, r3
 800be00:	f001 fd78 	bl	800d8f4 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800be04:	2241      	movs	r2, #65	; 0x41
 800be06:	2100      	movs	r1, #0
 800be08:	2036      	movs	r0, #54	; 0x36
 800be0a:	f001 fa8f 	bl	800d32c <pbuf_alloc>
 800be0e:	4602      	mov	r2, r0
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d105      	bne.n	800be28 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2200      	movs	r2, #0
 800be20:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800be22:	f04f 33ff 	mov.w	r3, #4294967295
 800be26:	e010      	b.n	800be4a <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	68ba      	ldr	r2, [r7, #8]
 800be2e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	88fa      	ldrh	r2, [r7, #6]
 800be36:	811a      	strh	r2, [r3, #8]
 800be38:	68fa      	ldr	r2, [r7, #12]
 800be3a:	6812      	ldr	r2, [r2, #0]
 800be3c:	891b      	ldrh	r3, [r3, #8]
 800be3e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800be48:	2300      	movs	r3, #0
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3710      	adds	r7, #16
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	08018f20 	.word	0x08018f20
 800be58:	08018fd8 	.word	0x08018fd8
 800be5c:	08018f70 	.word	0x08018f70

0800be60 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d108      	bne.n	800be84 <netbuf_data+0x24>
 800be72:	4b1b      	ldr	r3, [pc, #108]	; (800bee0 <netbuf_data+0x80>)
 800be74:	22c6      	movs	r2, #198	; 0xc6
 800be76:	491b      	ldr	r1, [pc, #108]	; (800bee4 <netbuf_data+0x84>)
 800be78:	481b      	ldr	r0, [pc, #108]	; (800bee8 <netbuf_data+0x88>)
 800be7a:	f00b fc93 	bl	80177a4 <iprintf>
 800be7e:	f06f 030f 	mvn.w	r3, #15
 800be82:	e029      	b.n	800bed8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d108      	bne.n	800be9c <netbuf_data+0x3c>
 800be8a:	4b15      	ldr	r3, [pc, #84]	; (800bee0 <netbuf_data+0x80>)
 800be8c:	22c7      	movs	r2, #199	; 0xc7
 800be8e:	4917      	ldr	r1, [pc, #92]	; (800beec <netbuf_data+0x8c>)
 800be90:	4815      	ldr	r0, [pc, #84]	; (800bee8 <netbuf_data+0x88>)
 800be92:	f00b fc87 	bl	80177a4 <iprintf>
 800be96:	f06f 030f 	mvn.w	r3, #15
 800be9a:	e01d      	b.n	800bed8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d108      	bne.n	800beb4 <netbuf_data+0x54>
 800bea2:	4b0f      	ldr	r3, [pc, #60]	; (800bee0 <netbuf_data+0x80>)
 800bea4:	22c8      	movs	r2, #200	; 0xc8
 800bea6:	4912      	ldr	r1, [pc, #72]	; (800bef0 <netbuf_data+0x90>)
 800bea8:	480f      	ldr	r0, [pc, #60]	; (800bee8 <netbuf_data+0x88>)
 800beaa:	f00b fc7b 	bl	80177a4 <iprintf>
 800beae:	f06f 030f 	mvn.w	r3, #15
 800beb2:	e011      	b.n	800bed8 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d102      	bne.n	800bec2 <netbuf_data+0x62>
    return ERR_BUF;
 800bebc:	f06f 0301 	mvn.w	r3, #1
 800bec0:	e00a      	b.n	800bed8 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	685a      	ldr	r2, [r3, #4]
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	895a      	ldrh	r2, [r3, #10]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800bed6:	2300      	movs	r3, #0
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3710      	adds	r7, #16
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	08018f20 	.word	0x08018f20
 800bee4:	08019028 	.word	0x08019028
 800bee8:	08018f70 	.word	0x08018f70
 800beec:	08019044 	.word	0x08019044
 800bef0:	08019064 	.word	0x08019064

0800bef4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800befe:	f008 f89d 	bl	801403c <sys_timeouts_sleeptime>
 800bf02:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf0a:	d10b      	bne.n	800bf24 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800bf0c:	4813      	ldr	r0, [pc, #76]	; (800bf5c <tcpip_timeouts_mbox_fetch+0x68>)
 800bf0e:	f00b fa08 	bl	8017322 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800bf12:	2200      	movs	r2, #0
 800bf14:	6839      	ldr	r1, [r7, #0]
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f00b f8c0 	bl	801709c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800bf1c:	480f      	ldr	r0, [pc, #60]	; (800bf5c <tcpip_timeouts_mbox_fetch+0x68>)
 800bf1e:	f00b f9f1 	bl	8017304 <sys_mutex_lock>
    return;
 800bf22:	e018      	b.n	800bf56 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d102      	bne.n	800bf30 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800bf2a:	f008 f84d 	bl	8013fc8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800bf2e:	e7e6      	b.n	800befe <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800bf30:	480a      	ldr	r0, [pc, #40]	; (800bf5c <tcpip_timeouts_mbox_fetch+0x68>)
 800bf32:	f00b f9f6 	bl	8017322 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800bf36:	68fa      	ldr	r2, [r7, #12]
 800bf38:	6839      	ldr	r1, [r7, #0]
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f00b f8ae 	bl	801709c <sys_arch_mbox_fetch>
 800bf40:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800bf42:	4806      	ldr	r0, [pc, #24]	; (800bf5c <tcpip_timeouts_mbox_fetch+0x68>)
 800bf44:	f00b f9de 	bl	8017304 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf4e:	d102      	bne.n	800bf56 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800bf50:	f008 f83a 	bl	8013fc8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800bf54:	e7d3      	b.n	800befe <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800bf56:	3710      	adds	r7, #16
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	20009f78 	.word	0x20009f78

0800bf60 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800bf68:	4810      	ldr	r0, [pc, #64]	; (800bfac <tcpip_thread+0x4c>)
 800bf6a:	f00b f9cb 	bl	8017304 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800bf6e:	4b10      	ldr	r3, [pc, #64]	; (800bfb0 <tcpip_thread+0x50>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d005      	beq.n	800bf82 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800bf76:	4b0e      	ldr	r3, [pc, #56]	; (800bfb0 <tcpip_thread+0x50>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4a0e      	ldr	r2, [pc, #56]	; (800bfb4 <tcpip_thread+0x54>)
 800bf7c:	6812      	ldr	r2, [r2, #0]
 800bf7e:	4610      	mov	r0, r2
 800bf80:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800bf82:	f107 030c 	add.w	r3, r7, #12
 800bf86:	4619      	mov	r1, r3
 800bf88:	480b      	ldr	r0, [pc, #44]	; (800bfb8 <tcpip_thread+0x58>)
 800bf8a:	f7ff ffb3 	bl	800bef4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d106      	bne.n	800bfa2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bf94:	4b09      	ldr	r3, [pc, #36]	; (800bfbc <tcpip_thread+0x5c>)
 800bf96:	2291      	movs	r2, #145	; 0x91
 800bf98:	4909      	ldr	r1, [pc, #36]	; (800bfc0 <tcpip_thread+0x60>)
 800bf9a:	480a      	ldr	r0, [pc, #40]	; (800bfc4 <tcpip_thread+0x64>)
 800bf9c:	f00b fc02 	bl	80177a4 <iprintf>
      continue;
 800bfa0:	e003      	b.n	800bfaa <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f000 f80f 	bl	800bfc8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800bfaa:	e7ea      	b.n	800bf82 <tcpip_thread+0x22>
 800bfac:	20009f78 	.word	0x20009f78
 800bfb0:	200067f4 	.word	0x200067f4
 800bfb4:	200067f8 	.word	0x200067f8
 800bfb8:	200067fc 	.word	0x200067fc
 800bfbc:	080190b8 	.word	0x080190b8
 800bfc0:	080190e8 	.word	0x080190e8
 800bfc4:	08019108 	.word	0x08019108

0800bfc8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	d026      	beq.n	800c026 <tcpip_thread_handle_msg+0x5e>
 800bfd8:	2b02      	cmp	r3, #2
 800bfda:	dc2b      	bgt.n	800c034 <tcpip_thread_handle_msg+0x6c>
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d002      	beq.n	800bfe6 <tcpip_thread_handle_msg+0x1e>
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d015      	beq.n	800c010 <tcpip_thread_handle_msg+0x48>
 800bfe4:	e026      	b.n	800c034 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	6850      	ldr	r0, [r2, #4]
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	6892      	ldr	r2, [r2, #8]
 800bff2:	4611      	mov	r1, r2
 800bff4:	4798      	blx	r3
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d004      	beq.n	800c006 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	4618      	mov	r0, r3
 800c002:	f001 fc77 	bl	800d8f4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c006:	6879      	ldr	r1, [r7, #4]
 800c008:	2009      	movs	r0, #9
 800c00a:	f000 fe33 	bl	800cc74 <memp_free>
      break;
 800c00e:	e018      	b.n	800c042 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	6892      	ldr	r2, [r2, #8]
 800c018:	4610      	mov	r0, r2
 800c01a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c01c:	6879      	ldr	r1, [r7, #4]
 800c01e:	2008      	movs	r0, #8
 800c020:	f000 fe28 	bl	800cc74 <memp_free>
      break;
 800c024:	e00d      	b.n	800c042 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	685b      	ldr	r3, [r3, #4]
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	6892      	ldr	r2, [r2, #8]
 800c02e:	4610      	mov	r0, r2
 800c030:	4798      	blx	r3
      break;
 800c032:	e006      	b.n	800c042 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c034:	4b05      	ldr	r3, [pc, #20]	; (800c04c <tcpip_thread_handle_msg+0x84>)
 800c036:	22cf      	movs	r2, #207	; 0xcf
 800c038:	4905      	ldr	r1, [pc, #20]	; (800c050 <tcpip_thread_handle_msg+0x88>)
 800c03a:	4806      	ldr	r0, [pc, #24]	; (800c054 <tcpip_thread_handle_msg+0x8c>)
 800c03c:	f00b fbb2 	bl	80177a4 <iprintf>
      break;
 800c040:	bf00      	nop
  }
}
 800c042:	bf00      	nop
 800c044:	3708      	adds	r7, #8
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	080190b8 	.word	0x080190b8
 800c050:	080190e8 	.word	0x080190e8
 800c054:	08019108 	.word	0x08019108

0800c058 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b086      	sub	sp, #24
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c064:	481a      	ldr	r0, [pc, #104]	; (800c0d0 <tcpip_inpkt+0x78>)
 800c066:	f00b f874 	bl	8017152 <sys_mbox_valid>
 800c06a:	4603      	mov	r3, r0
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d105      	bne.n	800c07c <tcpip_inpkt+0x24>
 800c070:	4b18      	ldr	r3, [pc, #96]	; (800c0d4 <tcpip_inpkt+0x7c>)
 800c072:	22fc      	movs	r2, #252	; 0xfc
 800c074:	4918      	ldr	r1, [pc, #96]	; (800c0d8 <tcpip_inpkt+0x80>)
 800c076:	4819      	ldr	r0, [pc, #100]	; (800c0dc <tcpip_inpkt+0x84>)
 800c078:	f00b fb94 	bl	80177a4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c07c:	2009      	movs	r0, #9
 800c07e:	f000 fda7 	bl	800cbd0 <memp_malloc>
 800c082:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d102      	bne.n	800c090 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c08a:	f04f 33ff 	mov.w	r3, #4294967295
 800c08e:	e01a      	b.n	800c0c6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	2200      	movs	r2, #0
 800c094:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	68fa      	ldr	r2, [r7, #12]
 800c09a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	68ba      	ldr	r2, [r7, #8]
 800c0a0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	687a      	ldr	r2, [r7, #4]
 800c0a6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c0a8:	6979      	ldr	r1, [r7, #20]
 800c0aa:	4809      	ldr	r0, [pc, #36]	; (800c0d0 <tcpip_inpkt+0x78>)
 800c0ac:	f00a ffdc 	bl	8017068 <sys_mbox_trypost>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d006      	beq.n	800c0c4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c0b6:	6979      	ldr	r1, [r7, #20]
 800c0b8:	2009      	movs	r0, #9
 800c0ba:	f000 fddb 	bl	800cc74 <memp_free>
    return ERR_MEM;
 800c0be:	f04f 33ff 	mov.w	r3, #4294967295
 800c0c2:	e000      	b.n	800c0c6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c0c4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3718      	adds	r7, #24
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	200067fc 	.word	0x200067fc
 800c0d4:	080190b8 	.word	0x080190b8
 800c0d8:	08019130 	.word	0x08019130
 800c0dc:	08019108 	.word	0x08019108

0800c0e0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b082      	sub	sp, #8
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c0f0:	f003 0318 	and.w	r3, r3, #24
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d006      	beq.n	800c106 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c0f8:	4a08      	ldr	r2, [pc, #32]	; (800c11c <tcpip_input+0x3c>)
 800c0fa:	6839      	ldr	r1, [r7, #0]
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f7ff ffab 	bl	800c058 <tcpip_inpkt>
 800c102:	4603      	mov	r3, r0
 800c104:	e005      	b.n	800c112 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c106:	4a06      	ldr	r2, [pc, #24]	; (800c120 <tcpip_input+0x40>)
 800c108:	6839      	ldr	r1, [r7, #0]
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f7ff ffa4 	bl	800c058 <tcpip_inpkt>
 800c110:	4603      	mov	r3, r0
}
 800c112:	4618      	mov	r0, r3
 800c114:	3708      	adds	r7, #8
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	bf00      	nop
 800c11c:	08016e55 	.word	0x08016e55
 800c120:	08015d69 	.word	0x08015d69

0800c124 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c12e:	4819      	ldr	r0, [pc, #100]	; (800c194 <tcpip_try_callback+0x70>)
 800c130:	f00b f80f 	bl	8017152 <sys_mbox_valid>
 800c134:	4603      	mov	r3, r0
 800c136:	2b00      	cmp	r3, #0
 800c138:	d106      	bne.n	800c148 <tcpip_try_callback+0x24>
 800c13a:	4b17      	ldr	r3, [pc, #92]	; (800c198 <tcpip_try_callback+0x74>)
 800c13c:	f240 125d 	movw	r2, #349	; 0x15d
 800c140:	4916      	ldr	r1, [pc, #88]	; (800c19c <tcpip_try_callback+0x78>)
 800c142:	4817      	ldr	r0, [pc, #92]	; (800c1a0 <tcpip_try_callback+0x7c>)
 800c144:	f00b fb2e 	bl	80177a4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c148:	2008      	movs	r0, #8
 800c14a:	f000 fd41 	bl	800cbd0 <memp_malloc>
 800c14e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d102      	bne.n	800c15c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c156:	f04f 33ff 	mov.w	r3, #4294967295
 800c15a:	e017      	b.n	800c18c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2201      	movs	r2, #1
 800c160:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	683a      	ldr	r2, [r7, #0]
 800c16c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c16e:	68f9      	ldr	r1, [r7, #12]
 800c170:	4808      	ldr	r0, [pc, #32]	; (800c194 <tcpip_try_callback+0x70>)
 800c172:	f00a ff79 	bl	8017068 <sys_mbox_trypost>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d006      	beq.n	800c18a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c17c:	68f9      	ldr	r1, [r7, #12]
 800c17e:	2008      	movs	r0, #8
 800c180:	f000 fd78 	bl	800cc74 <memp_free>
    return ERR_MEM;
 800c184:	f04f 33ff 	mov.w	r3, #4294967295
 800c188:	e000      	b.n	800c18c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3710      	adds	r7, #16
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	200067fc 	.word	0x200067fc
 800c198:	080190b8 	.word	0x080190b8
 800c19c:	08019130 	.word	0x08019130
 800c1a0:	08019108 	.word	0x08019108

0800c1a4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	60b9      	str	r1, [r7, #8]
 800c1ae:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800c1b0:	4806      	ldr	r0, [pc, #24]	; (800c1cc <tcpip_send_msg_wait_sem+0x28>)
 800c1b2:	f00b f8a7 	bl	8017304 <sys_mutex_lock>
  fn(apimsg);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	68b8      	ldr	r0, [r7, #8]
 800c1ba:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800c1bc:	4803      	ldr	r0, [pc, #12]	; (800c1cc <tcpip_send_msg_wait_sem+0x28>)
 800c1be:	f00b f8b0 	bl	8017322 <sys_mutex_unlock>
  return ERR_OK;
 800c1c2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3710      	adds	r7, #16
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	20009f78 	.word	0x20009f78

0800c1d0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af02      	add	r7, sp, #8
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c1da:	f000 f871 	bl	800c2c0 <lwip_init>

  tcpip_init_done = initfunc;
 800c1de:	4a17      	ldr	r2, [pc, #92]	; (800c23c <tcpip_init+0x6c>)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c1e4:	4a16      	ldr	r2, [pc, #88]	; (800c240 <tcpip_init+0x70>)
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c1ea:	2106      	movs	r1, #6
 800c1ec:	4815      	ldr	r0, [pc, #84]	; (800c244 <tcpip_init+0x74>)
 800c1ee:	f00a ff07 	bl	8017000 <sys_mbox_new>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d006      	beq.n	800c206 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c1f8:	4b13      	ldr	r3, [pc, #76]	; (800c248 <tcpip_init+0x78>)
 800c1fa:	f240 2261 	movw	r2, #609	; 0x261
 800c1fe:	4913      	ldr	r1, [pc, #76]	; (800c24c <tcpip_init+0x7c>)
 800c200:	4813      	ldr	r0, [pc, #76]	; (800c250 <tcpip_init+0x80>)
 800c202:	f00b facf 	bl	80177a4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c206:	4813      	ldr	r0, [pc, #76]	; (800c254 <tcpip_init+0x84>)
 800c208:	f00b f860 	bl	80172cc <sys_mutex_new>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d006      	beq.n	800c220 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c212:	4b0d      	ldr	r3, [pc, #52]	; (800c248 <tcpip_init+0x78>)
 800c214:	f240 2265 	movw	r2, #613	; 0x265
 800c218:	490f      	ldr	r1, [pc, #60]	; (800c258 <tcpip_init+0x88>)
 800c21a:	480d      	ldr	r0, [pc, #52]	; (800c250 <tcpip_init+0x80>)
 800c21c:	f00b fac2 	bl	80177a4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c220:	2300      	movs	r3, #0
 800c222:	9300      	str	r3, [sp, #0]
 800c224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c228:	2200      	movs	r2, #0
 800c22a:	490c      	ldr	r1, [pc, #48]	; (800c25c <tcpip_init+0x8c>)
 800c22c:	480c      	ldr	r0, [pc, #48]	; (800c260 <tcpip_init+0x90>)
 800c22e:	f00b f885 	bl	801733c <sys_thread_new>
}
 800c232:	bf00      	nop
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	200067f4 	.word	0x200067f4
 800c240:	200067f8 	.word	0x200067f8
 800c244:	200067fc 	.word	0x200067fc
 800c248:	080190b8 	.word	0x080190b8
 800c24c:	08019140 	.word	0x08019140
 800c250:	08019108 	.word	0x08019108
 800c254:	20009f78 	.word	0x20009f78
 800c258:	08019164 	.word	0x08019164
 800c25c:	0800bf61 	.word	0x0800bf61
 800c260:	08019188 	.word	0x08019188

0800c264 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	4603      	mov	r3, r0
 800c26c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c26e:	88fb      	ldrh	r3, [r7, #6]
 800c270:	021b      	lsls	r3, r3, #8
 800c272:	b21a      	sxth	r2, r3
 800c274:	88fb      	ldrh	r3, [r7, #6]
 800c276:	0a1b      	lsrs	r3, r3, #8
 800c278:	b29b      	uxth	r3, r3
 800c27a:	b21b      	sxth	r3, r3
 800c27c:	4313      	orrs	r3, r2
 800c27e:	b21b      	sxth	r3, r3
 800c280:	b29b      	uxth	r3, r3
}
 800c282:	4618      	mov	r0, r3
 800c284:	370c      	adds	r7, #12
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr

0800c28e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c28e:	b480      	push	{r7}
 800c290:	b083      	sub	sp, #12
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	061a      	lsls	r2, r3, #24
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	021b      	lsls	r3, r3, #8
 800c29e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c2a2:	431a      	orrs	r2, r3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	0a1b      	lsrs	r3, r3, #8
 800c2a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c2ac:	431a      	orrs	r2, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	0e1b      	lsrs	r3, r3, #24
 800c2b2:	4313      	orrs	r3, r2
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	370c      	adds	r7, #12
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr

0800c2c0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c2ca:	f00a fff1 	bl	80172b0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c2ce:	f000 f8d5 	bl	800c47c <mem_init>
  memp_init();
 800c2d2:	f000 fc31 	bl	800cb38 <memp_init>
  pbuf_init();
  netif_init();
 800c2d6:	f000 fcf7 	bl	800ccc8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c2da:	f007 fee7 	bl	80140ac <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c2de:	f001 fdb3 	bl	800de48 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c2e2:	f007 fe29 	bl	8013f38 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c2e6:	bf00      	nop
 800c2e8:	3708      	adds	r7, #8
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
	...

0800c2f0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b083      	sub	sp, #12
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c2fa:	4b05      	ldr	r3, [pc, #20]	; (800c310 <ptr_to_mem+0x20>)
 800c2fc:	681a      	ldr	r2, [r3, #0]
 800c2fe:	88fb      	ldrh	r3, [r7, #6]
 800c300:	4413      	add	r3, r2
}
 800c302:	4618      	mov	r0, r3
 800c304:	370c      	adds	r7, #12
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr
 800c30e:	bf00      	nop
 800c310:	20006800 	.word	0x20006800

0800c314 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c31c:	4b05      	ldr	r3, [pc, #20]	; (800c334 <mem_to_ptr+0x20>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	687a      	ldr	r2, [r7, #4]
 800c322:	1ad3      	subs	r3, r2, r3
 800c324:	b29b      	uxth	r3, r3
}
 800c326:	4618      	mov	r0, r3
 800c328:	370c      	adds	r7, #12
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr
 800c332:	bf00      	nop
 800c334:	20006800 	.word	0x20006800

0800c338 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c338:	b590      	push	{r4, r7, lr}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c340:	4b45      	ldr	r3, [pc, #276]	; (800c458 <plug_holes+0x120>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	429a      	cmp	r2, r3
 800c348:	d206      	bcs.n	800c358 <plug_holes+0x20>
 800c34a:	4b44      	ldr	r3, [pc, #272]	; (800c45c <plug_holes+0x124>)
 800c34c:	f240 12df 	movw	r2, #479	; 0x1df
 800c350:	4943      	ldr	r1, [pc, #268]	; (800c460 <plug_holes+0x128>)
 800c352:	4844      	ldr	r0, [pc, #272]	; (800c464 <plug_holes+0x12c>)
 800c354:	f00b fa26 	bl	80177a4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c358:	4b43      	ldr	r3, [pc, #268]	; (800c468 <plug_holes+0x130>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d306      	bcc.n	800c370 <plug_holes+0x38>
 800c362:	4b3e      	ldr	r3, [pc, #248]	; (800c45c <plug_holes+0x124>)
 800c364:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c368:	4940      	ldr	r1, [pc, #256]	; (800c46c <plug_holes+0x134>)
 800c36a:	483e      	ldr	r0, [pc, #248]	; (800c464 <plug_holes+0x12c>)
 800c36c:	f00b fa1a 	bl	80177a4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	791b      	ldrb	r3, [r3, #4]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d006      	beq.n	800c386 <plug_holes+0x4e>
 800c378:	4b38      	ldr	r3, [pc, #224]	; (800c45c <plug_holes+0x124>)
 800c37a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c37e:	493c      	ldr	r1, [pc, #240]	; (800c470 <plug_holes+0x138>)
 800c380:	4838      	ldr	r0, [pc, #224]	; (800c464 <plug_holes+0x12c>)
 800c382:	f00b fa0f 	bl	80177a4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	881b      	ldrh	r3, [r3, #0]
 800c38a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c38e:	d906      	bls.n	800c39e <plug_holes+0x66>
 800c390:	4b32      	ldr	r3, [pc, #200]	; (800c45c <plug_holes+0x124>)
 800c392:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c396:	4937      	ldr	r1, [pc, #220]	; (800c474 <plug_holes+0x13c>)
 800c398:	4832      	ldr	r0, [pc, #200]	; (800c464 <plug_holes+0x12c>)
 800c39a:	f00b fa03 	bl	80177a4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	881b      	ldrh	r3, [r3, #0]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7ff ffa4 	bl	800c2f0 <ptr_to_mem>
 800c3a8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d024      	beq.n	800c3fc <plug_holes+0xc4>
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	791b      	ldrb	r3, [r3, #4]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d120      	bne.n	800c3fc <plug_holes+0xc4>
 800c3ba:	4b2b      	ldr	r3, [pc, #172]	; (800c468 <plug_holes+0x130>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	68fa      	ldr	r2, [r7, #12]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d01b      	beq.n	800c3fc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c3c4:	4b2c      	ldr	r3, [pc, #176]	; (800c478 <plug_holes+0x140>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	68fa      	ldr	r2, [r7, #12]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d102      	bne.n	800c3d4 <plug_holes+0x9c>
      lfree = mem;
 800c3ce:	4a2a      	ldr	r2, [pc, #168]	; (800c478 <plug_holes+0x140>)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	881a      	ldrh	r2, [r3, #0]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	881b      	ldrh	r3, [r3, #0]
 800c3e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c3e4:	d00a      	beq.n	800c3fc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	881b      	ldrh	r3, [r3, #0]
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7ff ff80 	bl	800c2f0 <ptr_to_mem>
 800c3f0:	4604      	mov	r4, r0
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f7ff ff8e 	bl	800c314 <mem_to_ptr>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	885b      	ldrh	r3, [r3, #2]
 800c400:	4618      	mov	r0, r3
 800c402:	f7ff ff75 	bl	800c2f0 <ptr_to_mem>
 800c406:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c408:	68ba      	ldr	r2, [r7, #8]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d01f      	beq.n	800c450 <plug_holes+0x118>
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	791b      	ldrb	r3, [r3, #4]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d11b      	bne.n	800c450 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c418:	4b17      	ldr	r3, [pc, #92]	; (800c478 <plug_holes+0x140>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d102      	bne.n	800c428 <plug_holes+0xf0>
      lfree = pmem;
 800c422:	4a15      	ldr	r2, [pc, #84]	; (800c478 <plug_holes+0x140>)
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	881a      	ldrh	r2, [r3, #0]
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	881b      	ldrh	r3, [r3, #0]
 800c434:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c438:	d00a      	beq.n	800c450 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	881b      	ldrh	r3, [r3, #0]
 800c43e:	4618      	mov	r0, r3
 800c440:	f7ff ff56 	bl	800c2f0 <ptr_to_mem>
 800c444:	4604      	mov	r4, r0
 800c446:	68b8      	ldr	r0, [r7, #8]
 800c448:	f7ff ff64 	bl	800c314 <mem_to_ptr>
 800c44c:	4603      	mov	r3, r0
 800c44e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c450:	bf00      	nop
 800c452:	3714      	adds	r7, #20
 800c454:	46bd      	mov	sp, r7
 800c456:	bd90      	pop	{r4, r7, pc}
 800c458:	20006800 	.word	0x20006800
 800c45c:	08019198 	.word	0x08019198
 800c460:	080191c8 	.word	0x080191c8
 800c464:	080191e0 	.word	0x080191e0
 800c468:	20006804 	.word	0x20006804
 800c46c:	08019208 	.word	0x08019208
 800c470:	08019224 	.word	0x08019224
 800c474:	08019240 	.word	0x08019240
 800c478:	2000680c 	.word	0x2000680c

0800c47c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c482:	4b1f      	ldr	r3, [pc, #124]	; (800c500 <mem_init+0x84>)
 800c484:	3303      	adds	r3, #3
 800c486:	f023 0303 	bic.w	r3, r3, #3
 800c48a:	461a      	mov	r2, r3
 800c48c:	4b1d      	ldr	r3, [pc, #116]	; (800c504 <mem_init+0x88>)
 800c48e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c490:	4b1c      	ldr	r3, [pc, #112]	; (800c504 <mem_init+0x88>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c49c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c4aa:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c4ae:	f7ff ff1f 	bl	800c2f0 <ptr_to_mem>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	4a14      	ldr	r2, [pc, #80]	; (800c508 <mem_init+0x8c>)
 800c4b6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c4b8:	4b13      	ldr	r3, [pc, #76]	; (800c508 <mem_init+0x8c>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2201      	movs	r2, #1
 800c4be:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c4c0:	4b11      	ldr	r3, [pc, #68]	; (800c508 <mem_init+0x8c>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c4c8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c4ca:	4b0f      	ldr	r3, [pc, #60]	; (800c508 <mem_init+0x8c>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c4d2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c4d4:	4b0b      	ldr	r3, [pc, #44]	; (800c504 <mem_init+0x88>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4a0c      	ldr	r2, [pc, #48]	; (800c50c <mem_init+0x90>)
 800c4da:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c4dc:	480c      	ldr	r0, [pc, #48]	; (800c510 <mem_init+0x94>)
 800c4de:	f00a fef5 	bl	80172cc <sys_mutex_new>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d006      	beq.n	800c4f6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c4e8:	4b0a      	ldr	r3, [pc, #40]	; (800c514 <mem_init+0x98>)
 800c4ea:	f240 221f 	movw	r2, #543	; 0x21f
 800c4ee:	490a      	ldr	r1, [pc, #40]	; (800c518 <mem_init+0x9c>)
 800c4f0:	480a      	ldr	r0, [pc, #40]	; (800c51c <mem_init+0xa0>)
 800c4f2:	f00b f957 	bl	80177a4 <iprintf>
  }
}
 800c4f6:	bf00      	nop
 800c4f8:	3708      	adds	r7, #8
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop
 800c500:	20009f94 	.word	0x20009f94
 800c504:	20006800 	.word	0x20006800
 800c508:	20006804 	.word	0x20006804
 800c50c:	2000680c 	.word	0x2000680c
 800c510:	20006808 	.word	0x20006808
 800c514:	08019198 	.word	0x08019198
 800c518:	0801926c 	.word	0x0801926c
 800c51c:	080191e0 	.word	0x080191e0

0800c520 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b086      	sub	sp, #24
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f7ff fef3 	bl	800c314 <mem_to_ptr>
 800c52e:	4603      	mov	r3, r0
 800c530:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	881b      	ldrh	r3, [r3, #0]
 800c536:	4618      	mov	r0, r3
 800c538:	f7ff feda 	bl	800c2f0 <ptr_to_mem>
 800c53c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	885b      	ldrh	r3, [r3, #2]
 800c542:	4618      	mov	r0, r3
 800c544:	f7ff fed4 	bl	800c2f0 <ptr_to_mem>
 800c548:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	881b      	ldrh	r3, [r3, #0]
 800c54e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c552:	d818      	bhi.n	800c586 <mem_link_valid+0x66>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	885b      	ldrh	r3, [r3, #2]
 800c558:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c55c:	d813      	bhi.n	800c586 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c562:	8afa      	ldrh	r2, [r7, #22]
 800c564:	429a      	cmp	r2, r3
 800c566:	d004      	beq.n	800c572 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	881b      	ldrh	r3, [r3, #0]
 800c56c:	8afa      	ldrh	r2, [r7, #22]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d109      	bne.n	800c586 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c572:	4b08      	ldr	r3, [pc, #32]	; (800c594 <mem_link_valid+0x74>)
 800c574:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c576:	693a      	ldr	r2, [r7, #16]
 800c578:	429a      	cmp	r2, r3
 800c57a:	d006      	beq.n	800c58a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	885b      	ldrh	r3, [r3, #2]
 800c580:	8afa      	ldrh	r2, [r7, #22]
 800c582:	429a      	cmp	r2, r3
 800c584:	d001      	beq.n	800c58a <mem_link_valid+0x6a>
    return 0;
 800c586:	2300      	movs	r3, #0
 800c588:	e000      	b.n	800c58c <mem_link_valid+0x6c>
  }
  return 1;
 800c58a:	2301      	movs	r3, #1
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3718      	adds	r7, #24
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	20006804 	.word	0x20006804

0800c598 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b088      	sub	sp, #32
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d070      	beq.n	800c688 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f003 0303 	and.w	r3, r3, #3
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d00d      	beq.n	800c5cc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c5b0:	4b37      	ldr	r3, [pc, #220]	; (800c690 <mem_free+0xf8>)
 800c5b2:	f240 2273 	movw	r2, #627	; 0x273
 800c5b6:	4937      	ldr	r1, [pc, #220]	; (800c694 <mem_free+0xfc>)
 800c5b8:	4837      	ldr	r0, [pc, #220]	; (800c698 <mem_free+0x100>)
 800c5ba:	f00b f8f3 	bl	80177a4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c5be:	f00a fee3 	bl	8017388 <sys_arch_protect>
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	68f8      	ldr	r0, [r7, #12]
 800c5c6:	f00a feed 	bl	80173a4 <sys_arch_unprotect>
    return;
 800c5ca:	e05e      	b.n	800c68a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	3b08      	subs	r3, #8
 800c5d0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c5d2:	4b32      	ldr	r3, [pc, #200]	; (800c69c <mem_free+0x104>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	69fa      	ldr	r2, [r7, #28]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d306      	bcc.n	800c5ea <mem_free+0x52>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f103 020c 	add.w	r2, r3, #12
 800c5e2:	4b2f      	ldr	r3, [pc, #188]	; (800c6a0 <mem_free+0x108>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d90d      	bls.n	800c606 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c5ea:	4b29      	ldr	r3, [pc, #164]	; (800c690 <mem_free+0xf8>)
 800c5ec:	f240 227f 	movw	r2, #639	; 0x27f
 800c5f0:	492c      	ldr	r1, [pc, #176]	; (800c6a4 <mem_free+0x10c>)
 800c5f2:	4829      	ldr	r0, [pc, #164]	; (800c698 <mem_free+0x100>)
 800c5f4:	f00b f8d6 	bl	80177a4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c5f8:	f00a fec6 	bl	8017388 <sys_arch_protect>
 800c5fc:	6138      	str	r0, [r7, #16]
 800c5fe:	6938      	ldr	r0, [r7, #16]
 800c600:	f00a fed0 	bl	80173a4 <sys_arch_unprotect>
    return;
 800c604:	e041      	b.n	800c68a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c606:	4828      	ldr	r0, [pc, #160]	; (800c6a8 <mem_free+0x110>)
 800c608:	f00a fe7c 	bl	8017304 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c60c:	69fb      	ldr	r3, [r7, #28]
 800c60e:	791b      	ldrb	r3, [r3, #4]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d110      	bne.n	800c636 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c614:	4b1e      	ldr	r3, [pc, #120]	; (800c690 <mem_free+0xf8>)
 800c616:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c61a:	4924      	ldr	r1, [pc, #144]	; (800c6ac <mem_free+0x114>)
 800c61c:	481e      	ldr	r0, [pc, #120]	; (800c698 <mem_free+0x100>)
 800c61e:	f00b f8c1 	bl	80177a4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c622:	4821      	ldr	r0, [pc, #132]	; (800c6a8 <mem_free+0x110>)
 800c624:	f00a fe7d 	bl	8017322 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c628:	f00a feae 	bl	8017388 <sys_arch_protect>
 800c62c:	6178      	str	r0, [r7, #20]
 800c62e:	6978      	ldr	r0, [r7, #20]
 800c630:	f00a feb8 	bl	80173a4 <sys_arch_unprotect>
    return;
 800c634:	e029      	b.n	800c68a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800c636:	69f8      	ldr	r0, [r7, #28]
 800c638:	f7ff ff72 	bl	800c520 <mem_link_valid>
 800c63c:	4603      	mov	r3, r0
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d110      	bne.n	800c664 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c642:	4b13      	ldr	r3, [pc, #76]	; (800c690 <mem_free+0xf8>)
 800c644:	f240 2295 	movw	r2, #661	; 0x295
 800c648:	4919      	ldr	r1, [pc, #100]	; (800c6b0 <mem_free+0x118>)
 800c64a:	4813      	ldr	r0, [pc, #76]	; (800c698 <mem_free+0x100>)
 800c64c:	f00b f8aa 	bl	80177a4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c650:	4815      	ldr	r0, [pc, #84]	; (800c6a8 <mem_free+0x110>)
 800c652:	f00a fe66 	bl	8017322 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c656:	f00a fe97 	bl	8017388 <sys_arch_protect>
 800c65a:	61b8      	str	r0, [r7, #24]
 800c65c:	69b8      	ldr	r0, [r7, #24]
 800c65e:	f00a fea1 	bl	80173a4 <sys_arch_unprotect>
    return;
 800c662:	e012      	b.n	800c68a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c664:	69fb      	ldr	r3, [r7, #28]
 800c666:	2200      	movs	r2, #0
 800c668:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c66a:	4b12      	ldr	r3, [pc, #72]	; (800c6b4 <mem_free+0x11c>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	69fa      	ldr	r2, [r7, #28]
 800c670:	429a      	cmp	r2, r3
 800c672:	d202      	bcs.n	800c67a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c674:	4a0f      	ldr	r2, [pc, #60]	; (800c6b4 <mem_free+0x11c>)
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c67a:	69f8      	ldr	r0, [r7, #28]
 800c67c:	f7ff fe5c 	bl	800c338 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c680:	4809      	ldr	r0, [pc, #36]	; (800c6a8 <mem_free+0x110>)
 800c682:	f00a fe4e 	bl	8017322 <sys_mutex_unlock>
 800c686:	e000      	b.n	800c68a <mem_free+0xf2>
    return;
 800c688:	bf00      	nop
}
 800c68a:	3720      	adds	r7, #32
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	08019198 	.word	0x08019198
 800c694:	08019288 	.word	0x08019288
 800c698:	080191e0 	.word	0x080191e0
 800c69c:	20006800 	.word	0x20006800
 800c6a0:	20006804 	.word	0x20006804
 800c6a4:	080192ac 	.word	0x080192ac
 800c6a8:	20006808 	.word	0x20006808
 800c6ac:	080192c8 	.word	0x080192c8
 800c6b0:	080192f0 	.word	0x080192f0
 800c6b4:	2000680c 	.word	0x2000680c

0800c6b8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b088      	sub	sp, #32
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c6c4:	887b      	ldrh	r3, [r7, #2]
 800c6c6:	3303      	adds	r3, #3
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	f023 0303 	bic.w	r3, r3, #3
 800c6ce:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c6d0:	8bfb      	ldrh	r3, [r7, #30]
 800c6d2:	2b0b      	cmp	r3, #11
 800c6d4:	d801      	bhi.n	800c6da <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c6d6:	230c      	movs	r3, #12
 800c6d8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c6da:	8bfb      	ldrh	r3, [r7, #30]
 800c6dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c6e0:	d803      	bhi.n	800c6ea <mem_trim+0x32>
 800c6e2:	8bfa      	ldrh	r2, [r7, #30]
 800c6e4:	887b      	ldrh	r3, [r7, #2]
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d201      	bcs.n	800c6ee <mem_trim+0x36>
    return NULL;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	e0d8      	b.n	800c8a0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c6ee:	4b6e      	ldr	r3, [pc, #440]	; (800c8a8 <mem_trim+0x1f0>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d304      	bcc.n	800c702 <mem_trim+0x4a>
 800c6f8:	4b6c      	ldr	r3, [pc, #432]	; (800c8ac <mem_trim+0x1f4>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d306      	bcc.n	800c710 <mem_trim+0x58>
 800c702:	4b6b      	ldr	r3, [pc, #428]	; (800c8b0 <mem_trim+0x1f8>)
 800c704:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c708:	496a      	ldr	r1, [pc, #424]	; (800c8b4 <mem_trim+0x1fc>)
 800c70a:	486b      	ldr	r0, [pc, #428]	; (800c8b8 <mem_trim+0x200>)
 800c70c:	f00b f84a 	bl	80177a4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c710:	4b65      	ldr	r3, [pc, #404]	; (800c8a8 <mem_trim+0x1f0>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	429a      	cmp	r2, r3
 800c718:	d304      	bcc.n	800c724 <mem_trim+0x6c>
 800c71a:	4b64      	ldr	r3, [pc, #400]	; (800c8ac <mem_trim+0x1f4>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	429a      	cmp	r2, r3
 800c722:	d307      	bcc.n	800c734 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c724:	f00a fe30 	bl	8017388 <sys_arch_protect>
 800c728:	60b8      	str	r0, [r7, #8]
 800c72a:	68b8      	ldr	r0, [r7, #8]
 800c72c:	f00a fe3a 	bl	80173a4 <sys_arch_unprotect>
    return rmem;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	e0b5      	b.n	800c8a0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	3b08      	subs	r3, #8
 800c738:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c73a:	69b8      	ldr	r0, [r7, #24]
 800c73c:	f7ff fdea 	bl	800c314 <mem_to_ptr>
 800c740:	4603      	mov	r3, r0
 800c742:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c744:	69bb      	ldr	r3, [r7, #24]
 800c746:	881a      	ldrh	r2, [r3, #0]
 800c748:	8afb      	ldrh	r3, [r7, #22]
 800c74a:	1ad3      	subs	r3, r2, r3
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	3b08      	subs	r3, #8
 800c750:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c752:	8bfa      	ldrh	r2, [r7, #30]
 800c754:	8abb      	ldrh	r3, [r7, #20]
 800c756:	429a      	cmp	r2, r3
 800c758:	d906      	bls.n	800c768 <mem_trim+0xb0>
 800c75a:	4b55      	ldr	r3, [pc, #340]	; (800c8b0 <mem_trim+0x1f8>)
 800c75c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c760:	4956      	ldr	r1, [pc, #344]	; (800c8bc <mem_trim+0x204>)
 800c762:	4855      	ldr	r0, [pc, #340]	; (800c8b8 <mem_trim+0x200>)
 800c764:	f00b f81e 	bl	80177a4 <iprintf>
  if (newsize > size) {
 800c768:	8bfa      	ldrh	r2, [r7, #30]
 800c76a:	8abb      	ldrh	r3, [r7, #20]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d901      	bls.n	800c774 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800c770:	2300      	movs	r3, #0
 800c772:	e095      	b.n	800c8a0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800c774:	8bfa      	ldrh	r2, [r7, #30]
 800c776:	8abb      	ldrh	r3, [r7, #20]
 800c778:	429a      	cmp	r2, r3
 800c77a:	d101      	bne.n	800c780 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	e08f      	b.n	800c8a0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c780:	484f      	ldr	r0, [pc, #316]	; (800c8c0 <mem_trim+0x208>)
 800c782:	f00a fdbf 	bl	8017304 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c786:	69bb      	ldr	r3, [r7, #24]
 800c788:	881b      	ldrh	r3, [r3, #0]
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7ff fdb0 	bl	800c2f0 <ptr_to_mem>
 800c790:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	791b      	ldrb	r3, [r3, #4]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d13f      	bne.n	800c81a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c79a:	69bb      	ldr	r3, [r7, #24]
 800c79c:	881b      	ldrh	r3, [r3, #0]
 800c79e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c7a2:	d106      	bne.n	800c7b2 <mem_trim+0xfa>
 800c7a4:	4b42      	ldr	r3, [pc, #264]	; (800c8b0 <mem_trim+0x1f8>)
 800c7a6:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c7aa:	4946      	ldr	r1, [pc, #280]	; (800c8c4 <mem_trim+0x20c>)
 800c7ac:	4842      	ldr	r0, [pc, #264]	; (800c8b8 <mem_trim+0x200>)
 800c7ae:	f00a fff9 	bl	80177a4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	881b      	ldrh	r3, [r3, #0]
 800c7b6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c7b8:	8afa      	ldrh	r2, [r7, #22]
 800c7ba:	8bfb      	ldrh	r3, [r7, #30]
 800c7bc:	4413      	add	r3, r2
 800c7be:	b29b      	uxth	r3, r3
 800c7c0:	3308      	adds	r3, #8
 800c7c2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c7c4:	4b40      	ldr	r3, [pc, #256]	; (800c8c8 <mem_trim+0x210>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	693a      	ldr	r2, [r7, #16]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d106      	bne.n	800c7dc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c7ce:	89fb      	ldrh	r3, [r7, #14]
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f7ff fd8d 	bl	800c2f0 <ptr_to_mem>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	4a3b      	ldr	r2, [pc, #236]	; (800c8c8 <mem_trim+0x210>)
 800c7da:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c7dc:	89fb      	ldrh	r3, [r7, #14]
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7ff fd86 	bl	800c2f0 <ptr_to_mem>
 800c7e4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	89ba      	ldrh	r2, [r7, #12]
 800c7f0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	8afa      	ldrh	r2, [r7, #22]
 800c7f6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c7f8:	69bb      	ldr	r3, [r7, #24]
 800c7fa:	89fa      	ldrh	r2, [r7, #14]
 800c7fc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	881b      	ldrh	r3, [r3, #0]
 800c802:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c806:	d047      	beq.n	800c898 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	881b      	ldrh	r3, [r3, #0]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7ff fd6f 	bl	800c2f0 <ptr_to_mem>
 800c812:	4602      	mov	r2, r0
 800c814:	89fb      	ldrh	r3, [r7, #14]
 800c816:	8053      	strh	r3, [r2, #2]
 800c818:	e03e      	b.n	800c898 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c81a:	8bfb      	ldrh	r3, [r7, #30]
 800c81c:	f103 0214 	add.w	r2, r3, #20
 800c820:	8abb      	ldrh	r3, [r7, #20]
 800c822:	429a      	cmp	r2, r3
 800c824:	d838      	bhi.n	800c898 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c826:	8afa      	ldrh	r2, [r7, #22]
 800c828:	8bfb      	ldrh	r3, [r7, #30]
 800c82a:	4413      	add	r3, r2
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	3308      	adds	r3, #8
 800c830:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c832:	69bb      	ldr	r3, [r7, #24]
 800c834:	881b      	ldrh	r3, [r3, #0]
 800c836:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c83a:	d106      	bne.n	800c84a <mem_trim+0x192>
 800c83c:	4b1c      	ldr	r3, [pc, #112]	; (800c8b0 <mem_trim+0x1f8>)
 800c83e:	f240 3216 	movw	r2, #790	; 0x316
 800c842:	4920      	ldr	r1, [pc, #128]	; (800c8c4 <mem_trim+0x20c>)
 800c844:	481c      	ldr	r0, [pc, #112]	; (800c8b8 <mem_trim+0x200>)
 800c846:	f00a ffad 	bl	80177a4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c84a:	89fb      	ldrh	r3, [r7, #14]
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7ff fd4f 	bl	800c2f0 <ptr_to_mem>
 800c852:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c854:	4b1c      	ldr	r3, [pc, #112]	; (800c8c8 <mem_trim+0x210>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	693a      	ldr	r2, [r7, #16]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d202      	bcs.n	800c864 <mem_trim+0x1ac>
      lfree = mem2;
 800c85e:	4a1a      	ldr	r2, [pc, #104]	; (800c8c8 <mem_trim+0x210>)
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	2200      	movs	r2, #0
 800c868:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c86a:	69bb      	ldr	r3, [r7, #24]
 800c86c:	881a      	ldrh	r2, [r3, #0]
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	8afa      	ldrh	r2, [r7, #22]
 800c876:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c878:	69bb      	ldr	r3, [r7, #24]
 800c87a:	89fa      	ldrh	r2, [r7, #14]
 800c87c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	881b      	ldrh	r3, [r3, #0]
 800c882:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c886:	d007      	beq.n	800c898 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	881b      	ldrh	r3, [r3, #0]
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7ff fd2f 	bl	800c2f0 <ptr_to_mem>
 800c892:	4602      	mov	r2, r0
 800c894:	89fb      	ldrh	r3, [r7, #14]
 800c896:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c898:	4809      	ldr	r0, [pc, #36]	; (800c8c0 <mem_trim+0x208>)
 800c89a:	f00a fd42 	bl	8017322 <sys_mutex_unlock>
  return rmem;
 800c89e:	687b      	ldr	r3, [r7, #4]
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3720      	adds	r7, #32
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	20006800 	.word	0x20006800
 800c8ac:	20006804 	.word	0x20006804
 800c8b0:	08019198 	.word	0x08019198
 800c8b4:	08019324 	.word	0x08019324
 800c8b8:	080191e0 	.word	0x080191e0
 800c8bc:	0801933c 	.word	0x0801933c
 800c8c0:	20006808 	.word	0x20006808
 800c8c4:	0801935c 	.word	0x0801935c
 800c8c8:	2000680c 	.word	0x2000680c

0800c8cc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b088      	sub	sp, #32
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c8d6:	88fb      	ldrh	r3, [r7, #6]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d101      	bne.n	800c8e0 <mem_malloc+0x14>
    return NULL;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	e0e2      	b.n	800caa6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c8e0:	88fb      	ldrh	r3, [r7, #6]
 800c8e2:	3303      	adds	r3, #3
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	f023 0303 	bic.w	r3, r3, #3
 800c8ea:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c8ec:	8bbb      	ldrh	r3, [r7, #28]
 800c8ee:	2b0b      	cmp	r3, #11
 800c8f0:	d801      	bhi.n	800c8f6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c8f2:	230c      	movs	r3, #12
 800c8f4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c8f6:	8bbb      	ldrh	r3, [r7, #28]
 800c8f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c8fc:	d803      	bhi.n	800c906 <mem_malloc+0x3a>
 800c8fe:	8bba      	ldrh	r2, [r7, #28]
 800c900:	88fb      	ldrh	r3, [r7, #6]
 800c902:	429a      	cmp	r2, r3
 800c904:	d201      	bcs.n	800c90a <mem_malloc+0x3e>
    return NULL;
 800c906:	2300      	movs	r3, #0
 800c908:	e0cd      	b.n	800caa6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c90a:	4869      	ldr	r0, [pc, #420]	; (800cab0 <mem_malloc+0x1e4>)
 800c90c:	f00a fcfa 	bl	8017304 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c910:	4b68      	ldr	r3, [pc, #416]	; (800cab4 <mem_malloc+0x1e8>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4618      	mov	r0, r3
 800c916:	f7ff fcfd 	bl	800c314 <mem_to_ptr>
 800c91a:	4603      	mov	r3, r0
 800c91c:	83fb      	strh	r3, [r7, #30]
 800c91e:	e0b7      	b.n	800ca90 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c920:	8bfb      	ldrh	r3, [r7, #30]
 800c922:	4618      	mov	r0, r3
 800c924:	f7ff fce4 	bl	800c2f0 <ptr_to_mem>
 800c928:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	791b      	ldrb	r3, [r3, #4]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	f040 80a7 	bne.w	800ca82 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	881b      	ldrh	r3, [r3, #0]
 800c938:	461a      	mov	r2, r3
 800c93a:	8bfb      	ldrh	r3, [r7, #30]
 800c93c:	1ad3      	subs	r3, r2, r3
 800c93e:	f1a3 0208 	sub.w	r2, r3, #8
 800c942:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c944:	429a      	cmp	r2, r3
 800c946:	f0c0 809c 	bcc.w	800ca82 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	881b      	ldrh	r3, [r3, #0]
 800c94e:	461a      	mov	r2, r3
 800c950:	8bfb      	ldrh	r3, [r7, #30]
 800c952:	1ad3      	subs	r3, r2, r3
 800c954:	f1a3 0208 	sub.w	r2, r3, #8
 800c958:	8bbb      	ldrh	r3, [r7, #28]
 800c95a:	3314      	adds	r3, #20
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d333      	bcc.n	800c9c8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c960:	8bfa      	ldrh	r2, [r7, #30]
 800c962:	8bbb      	ldrh	r3, [r7, #28]
 800c964:	4413      	add	r3, r2
 800c966:	b29b      	uxth	r3, r3
 800c968:	3308      	adds	r3, #8
 800c96a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c96c:	8a7b      	ldrh	r3, [r7, #18]
 800c96e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c972:	d106      	bne.n	800c982 <mem_malloc+0xb6>
 800c974:	4b50      	ldr	r3, [pc, #320]	; (800cab8 <mem_malloc+0x1ec>)
 800c976:	f240 3287 	movw	r2, #903	; 0x387
 800c97a:	4950      	ldr	r1, [pc, #320]	; (800cabc <mem_malloc+0x1f0>)
 800c97c:	4850      	ldr	r0, [pc, #320]	; (800cac0 <mem_malloc+0x1f4>)
 800c97e:	f00a ff11 	bl	80177a4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c982:	8a7b      	ldrh	r3, [r7, #18]
 800c984:	4618      	mov	r0, r3
 800c986:	f7ff fcb3 	bl	800c2f0 <ptr_to_mem>
 800c98a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	2200      	movs	r2, #0
 800c990:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	881a      	ldrh	r2, [r3, #0]
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	8bfa      	ldrh	r2, [r7, #30]
 800c99e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	8a7a      	ldrh	r2, [r7, #18]
 800c9a4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	881b      	ldrh	r3, [r3, #0]
 800c9b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c9b4:	d00b      	beq.n	800c9ce <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	881b      	ldrh	r3, [r3, #0]
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7ff fc98 	bl	800c2f0 <ptr_to_mem>
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	8a7b      	ldrh	r3, [r7, #18]
 800c9c4:	8053      	strh	r3, [r2, #2]
 800c9c6:	e002      	b.n	800c9ce <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c9ce:	4b39      	ldr	r3, [pc, #228]	; (800cab4 <mem_malloc+0x1e8>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	697a      	ldr	r2, [r7, #20]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d127      	bne.n	800ca28 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c9d8:	4b36      	ldr	r3, [pc, #216]	; (800cab4 <mem_malloc+0x1e8>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c9de:	e005      	b.n	800c9ec <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c9e0:	69bb      	ldr	r3, [r7, #24]
 800c9e2:	881b      	ldrh	r3, [r3, #0]
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7ff fc83 	bl	800c2f0 <ptr_to_mem>
 800c9ea:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c9ec:	69bb      	ldr	r3, [r7, #24]
 800c9ee:	791b      	ldrb	r3, [r3, #4]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d004      	beq.n	800c9fe <mem_malloc+0x132>
 800c9f4:	4b33      	ldr	r3, [pc, #204]	; (800cac4 <mem_malloc+0x1f8>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	69ba      	ldr	r2, [r7, #24]
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d1f0      	bne.n	800c9e0 <mem_malloc+0x114>
          }
          lfree = cur;
 800c9fe:	4a2d      	ldr	r2, [pc, #180]	; (800cab4 <mem_malloc+0x1e8>)
 800ca00:	69bb      	ldr	r3, [r7, #24]
 800ca02:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ca04:	4b2b      	ldr	r3, [pc, #172]	; (800cab4 <mem_malloc+0x1e8>)
 800ca06:	681a      	ldr	r2, [r3, #0]
 800ca08:	4b2e      	ldr	r3, [pc, #184]	; (800cac4 <mem_malloc+0x1f8>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d00b      	beq.n	800ca28 <mem_malloc+0x15c>
 800ca10:	4b28      	ldr	r3, [pc, #160]	; (800cab4 <mem_malloc+0x1e8>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	791b      	ldrb	r3, [r3, #4]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d006      	beq.n	800ca28 <mem_malloc+0x15c>
 800ca1a:	4b27      	ldr	r3, [pc, #156]	; (800cab8 <mem_malloc+0x1ec>)
 800ca1c:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ca20:	4929      	ldr	r1, [pc, #164]	; (800cac8 <mem_malloc+0x1fc>)
 800ca22:	4827      	ldr	r0, [pc, #156]	; (800cac0 <mem_malloc+0x1f4>)
 800ca24:	f00a febe 	bl	80177a4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ca28:	4821      	ldr	r0, [pc, #132]	; (800cab0 <mem_malloc+0x1e4>)
 800ca2a:	f00a fc7a 	bl	8017322 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ca2e:	8bba      	ldrh	r2, [r7, #28]
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	4413      	add	r3, r2
 800ca34:	3308      	adds	r3, #8
 800ca36:	4a23      	ldr	r2, [pc, #140]	; (800cac4 <mem_malloc+0x1f8>)
 800ca38:	6812      	ldr	r2, [r2, #0]
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d906      	bls.n	800ca4c <mem_malloc+0x180>
 800ca3e:	4b1e      	ldr	r3, [pc, #120]	; (800cab8 <mem_malloc+0x1ec>)
 800ca40:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ca44:	4921      	ldr	r1, [pc, #132]	; (800cacc <mem_malloc+0x200>)
 800ca46:	481e      	ldr	r0, [pc, #120]	; (800cac0 <mem_malloc+0x1f4>)
 800ca48:	f00a feac 	bl	80177a4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	f003 0303 	and.w	r3, r3, #3
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d006      	beq.n	800ca64 <mem_malloc+0x198>
 800ca56:	4b18      	ldr	r3, [pc, #96]	; (800cab8 <mem_malloc+0x1ec>)
 800ca58:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ca5c:	491c      	ldr	r1, [pc, #112]	; (800cad0 <mem_malloc+0x204>)
 800ca5e:	4818      	ldr	r0, [pc, #96]	; (800cac0 <mem_malloc+0x1f4>)
 800ca60:	f00a fea0 	bl	80177a4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	f003 0303 	and.w	r3, r3, #3
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d006      	beq.n	800ca7c <mem_malloc+0x1b0>
 800ca6e:	4b12      	ldr	r3, [pc, #72]	; (800cab8 <mem_malloc+0x1ec>)
 800ca70:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ca74:	4917      	ldr	r1, [pc, #92]	; (800cad4 <mem_malloc+0x208>)
 800ca76:	4812      	ldr	r0, [pc, #72]	; (800cac0 <mem_malloc+0x1f4>)
 800ca78:	f00a fe94 	bl	80177a4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	3308      	adds	r3, #8
 800ca80:	e011      	b.n	800caa6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ca82:	8bfb      	ldrh	r3, [r7, #30]
 800ca84:	4618      	mov	r0, r3
 800ca86:	f7ff fc33 	bl	800c2f0 <ptr_to_mem>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	881b      	ldrh	r3, [r3, #0]
 800ca8e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ca90:	8bfa      	ldrh	r2, [r7, #30]
 800ca92:	8bbb      	ldrh	r3, [r7, #28]
 800ca94:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	f4ff af41 	bcc.w	800c920 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ca9e:	4804      	ldr	r0, [pc, #16]	; (800cab0 <mem_malloc+0x1e4>)
 800caa0:	f00a fc3f 	bl	8017322 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3720      	adds	r7, #32
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	20006808 	.word	0x20006808
 800cab4:	2000680c 	.word	0x2000680c
 800cab8:	08019198 	.word	0x08019198
 800cabc:	0801935c 	.word	0x0801935c
 800cac0:	080191e0 	.word	0x080191e0
 800cac4:	20006804 	.word	0x20006804
 800cac8:	08019370 	.word	0x08019370
 800cacc:	0801938c 	.word	0x0801938c
 800cad0:	080193bc 	.word	0x080193bc
 800cad4:	080193ec 	.word	0x080193ec

0800cad8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cad8:	b480      	push	{r7}
 800cada:	b085      	sub	sp, #20
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	689b      	ldr	r3, [r3, #8]
 800cae4:	2200      	movs	r2, #0
 800cae6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	3303      	adds	r3, #3
 800caee:	f023 0303 	bic.w	r3, r3, #3
 800caf2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800caf4:	2300      	movs	r3, #0
 800caf6:	60fb      	str	r3, [r7, #12]
 800caf8:	e011      	b.n	800cb1e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	689b      	ldr	r3, [r3, #8]
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	689b      	ldr	r3, [r3, #8]
 800cb08:	68ba      	ldr	r2, [r7, #8]
 800cb0a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	881b      	ldrh	r3, [r3, #0]
 800cb10:	461a      	mov	r2, r3
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	4413      	add	r3, r2
 800cb16:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	60fb      	str	r3, [r7, #12]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	885b      	ldrh	r3, [r3, #2]
 800cb22:	461a      	mov	r2, r3
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	4293      	cmp	r3, r2
 800cb28:	dbe7      	blt.n	800cafa <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cb2a:	bf00      	nop
 800cb2c:	bf00      	nop
 800cb2e:	3714      	adds	r7, #20
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr

0800cb38 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cb3e:	2300      	movs	r3, #0
 800cb40:	80fb      	strh	r3, [r7, #6]
 800cb42:	e009      	b.n	800cb58 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cb44:	88fb      	ldrh	r3, [r7, #6]
 800cb46:	4a08      	ldr	r2, [pc, #32]	; (800cb68 <memp_init+0x30>)
 800cb48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f7ff ffc3 	bl	800cad8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cb52:	88fb      	ldrh	r3, [r7, #6]
 800cb54:	3301      	adds	r3, #1
 800cb56:	80fb      	strh	r3, [r7, #6]
 800cb58:	88fb      	ldrh	r3, [r7, #6]
 800cb5a:	2b0c      	cmp	r3, #12
 800cb5c:	d9f2      	bls.n	800cb44 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cb5e:	bf00      	nop
 800cb60:	bf00      	nop
 800cb62:	3708      	adds	r7, #8
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}
 800cb68:	0801bc00 	.word	0x0801bc00

0800cb6c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b084      	sub	sp, #16
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800cb74:	f00a fc08 	bl	8017388 <sys_arch_protect>
 800cb78:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	689b      	ldr	r3, [r3, #8]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d015      	beq.n	800cbb4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	68ba      	ldr	r2, [r7, #8]
 800cb8e:	6812      	ldr	r2, [r2, #0]
 800cb90:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	f003 0303 	and.w	r3, r3, #3
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d006      	beq.n	800cbaa <do_memp_malloc_pool+0x3e>
 800cb9c:	4b09      	ldr	r3, [pc, #36]	; (800cbc4 <do_memp_malloc_pool+0x58>)
 800cb9e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800cba2:	4909      	ldr	r1, [pc, #36]	; (800cbc8 <do_memp_malloc_pool+0x5c>)
 800cba4:	4809      	ldr	r0, [pc, #36]	; (800cbcc <do_memp_malloc_pool+0x60>)
 800cba6:	f00a fdfd 	bl	80177a4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cbaa:	68f8      	ldr	r0, [r7, #12]
 800cbac:	f00a fbfa 	bl	80173a4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	e003      	b.n	800cbbc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cbb4:	68f8      	ldr	r0, [r7, #12]
 800cbb6:	f00a fbf5 	bl	80173a4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cbba:	2300      	movs	r3, #0
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3710      	adds	r7, #16
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	08019410 	.word	0x08019410
 800cbc8:	08019440 	.word	0x08019440
 800cbcc:	08019464 	.word	0x08019464

0800cbd0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b084      	sub	sp, #16
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800cbda:	79fb      	ldrb	r3, [r7, #7]
 800cbdc:	2b0c      	cmp	r3, #12
 800cbde:	d908      	bls.n	800cbf2 <memp_malloc+0x22>
 800cbe0:	4b0a      	ldr	r3, [pc, #40]	; (800cc0c <memp_malloc+0x3c>)
 800cbe2:	f240 1257 	movw	r2, #343	; 0x157
 800cbe6:	490a      	ldr	r1, [pc, #40]	; (800cc10 <memp_malloc+0x40>)
 800cbe8:	480a      	ldr	r0, [pc, #40]	; (800cc14 <memp_malloc+0x44>)
 800cbea:	f00a fddb 	bl	80177a4 <iprintf>
 800cbee:	2300      	movs	r3, #0
 800cbf0:	e008      	b.n	800cc04 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cbf2:	79fb      	ldrb	r3, [r7, #7]
 800cbf4:	4a08      	ldr	r2, [pc, #32]	; (800cc18 <memp_malloc+0x48>)
 800cbf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7ff ffb6 	bl	800cb6c <do_memp_malloc_pool>
 800cc00:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800cc02:	68fb      	ldr	r3, [r7, #12]
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3710      	adds	r7, #16
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	08019410 	.word	0x08019410
 800cc10:	080194a0 	.word	0x080194a0
 800cc14:	08019464 	.word	0x08019464
 800cc18:	0801bc00 	.word	0x0801bc00

0800cc1c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	f003 0303 	and.w	r3, r3, #3
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d006      	beq.n	800cc3e <do_memp_free_pool+0x22>
 800cc30:	4b0d      	ldr	r3, [pc, #52]	; (800cc68 <do_memp_free_pool+0x4c>)
 800cc32:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800cc36:	490d      	ldr	r1, [pc, #52]	; (800cc6c <do_memp_free_pool+0x50>)
 800cc38:	480d      	ldr	r0, [pc, #52]	; (800cc70 <do_memp_free_pool+0x54>)
 800cc3a:	f00a fdb3 	bl	80177a4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800cc42:	f00a fba1 	bl	8017388 <sys_arch_protect>
 800cc46:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	689b      	ldr	r3, [r3, #8]
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	689b      	ldr	r3, [r3, #8]
 800cc56:	68fa      	ldr	r2, [r7, #12]
 800cc58:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800cc5a:	68b8      	ldr	r0, [r7, #8]
 800cc5c:	f00a fba2 	bl	80173a4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800cc60:	bf00      	nop
 800cc62:	3710      	adds	r7, #16
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	08019410 	.word	0x08019410
 800cc6c:	080194c0 	.word	0x080194c0
 800cc70:	08019464 	.word	0x08019464

0800cc74 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	6039      	str	r1, [r7, #0]
 800cc7e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800cc80:	79fb      	ldrb	r3, [r7, #7]
 800cc82:	2b0c      	cmp	r3, #12
 800cc84:	d907      	bls.n	800cc96 <memp_free+0x22>
 800cc86:	4b0c      	ldr	r3, [pc, #48]	; (800ccb8 <memp_free+0x44>)
 800cc88:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800cc8c:	490b      	ldr	r1, [pc, #44]	; (800ccbc <memp_free+0x48>)
 800cc8e:	480c      	ldr	r0, [pc, #48]	; (800ccc0 <memp_free+0x4c>)
 800cc90:	f00a fd88 	bl	80177a4 <iprintf>
 800cc94:	e00c      	b.n	800ccb0 <memp_free+0x3c>

  if (mem == NULL) {
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d008      	beq.n	800ccae <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800cc9c:	79fb      	ldrb	r3, [r7, #7]
 800cc9e:	4a09      	ldr	r2, [pc, #36]	; (800ccc4 <memp_free+0x50>)
 800cca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cca4:	6839      	ldr	r1, [r7, #0]
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7ff ffb8 	bl	800cc1c <do_memp_free_pool>
 800ccac:	e000      	b.n	800ccb0 <memp_free+0x3c>
    return;
 800ccae:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ccb0:	3708      	adds	r7, #8
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	08019410 	.word	0x08019410
 800ccbc:	080194e0 	.word	0x080194e0
 800ccc0:	08019464 	.word	0x08019464
 800ccc4:	0801bc00 	.word	0x0801bc00

0800ccc8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800cccc:	bf00      	nop
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr
	...

0800ccd8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b086      	sub	sp, #24
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	60f8      	str	r0, [r7, #12]
 800cce0:	60b9      	str	r1, [r7, #8]
 800cce2:	607a      	str	r2, [r7, #4]
 800cce4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d108      	bne.n	800ccfe <netif_add+0x26>
 800ccec:	4b57      	ldr	r3, [pc, #348]	; (800ce4c <netif_add+0x174>)
 800ccee:	f240 1227 	movw	r2, #295	; 0x127
 800ccf2:	4957      	ldr	r1, [pc, #348]	; (800ce50 <netif_add+0x178>)
 800ccf4:	4857      	ldr	r0, [pc, #348]	; (800ce54 <netif_add+0x17c>)
 800ccf6:	f00a fd55 	bl	80177a4 <iprintf>
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	e0a2      	b.n	800ce44 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ccfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d108      	bne.n	800cd16 <netif_add+0x3e>
 800cd04:	4b51      	ldr	r3, [pc, #324]	; (800ce4c <netif_add+0x174>)
 800cd06:	f44f 7294 	mov.w	r2, #296	; 0x128
 800cd0a:	4953      	ldr	r1, [pc, #332]	; (800ce58 <netif_add+0x180>)
 800cd0c:	4851      	ldr	r0, [pc, #324]	; (800ce54 <netif_add+0x17c>)
 800cd0e:	f00a fd49 	bl	80177a4 <iprintf>
 800cd12:	2300      	movs	r3, #0
 800cd14:	e096      	b.n	800ce44 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d101      	bne.n	800cd20 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800cd1c:	4b4f      	ldr	r3, [pc, #316]	; (800ce5c <netif_add+0x184>)
 800cd1e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d101      	bne.n	800cd2a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800cd26:	4b4d      	ldr	r3, [pc, #308]	; (800ce5c <netif_add+0x184>)
 800cd28:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d101      	bne.n	800cd34 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800cd30:	4b4a      	ldr	r3, [pc, #296]	; (800ce5c <netif_add+0x184>)
 800cd32:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2200      	movs	r2, #0
 800cd38:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2200      	movs	r2, #0
 800cd44:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	4a45      	ldr	r2, [pc, #276]	; (800ce60 <netif_add+0x188>)
 800cd4a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	2200      	movs	r2, #0
 800cd56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	6a3a      	ldr	r2, [r7, #32]
 800cd64:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800cd66:	4b3f      	ldr	r3, [pc, #252]	; (800ce64 <netif_add+0x18c>)
 800cd68:	781a      	ldrb	r2, [r3, #0]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd74:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	687a      	ldr	r2, [r7, #4]
 800cd7a:	68b9      	ldr	r1, [r7, #8]
 800cd7c:	68f8      	ldr	r0, [r7, #12]
 800cd7e:	f000 f913 	bl	800cfa8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd84:	68f8      	ldr	r0, [r7, #12]
 800cd86:	4798      	blx	r3
 800cd88:	4603      	mov	r3, r0
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d001      	beq.n	800cd92 <netif_add+0xba>
    return NULL;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	e058      	b.n	800ce44 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd98:	2bff      	cmp	r3, #255	; 0xff
 800cd9a:	d103      	bne.n	800cda4 <netif_add+0xcc>
        netif->num = 0;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800cda4:	2300      	movs	r3, #0
 800cda6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cda8:	4b2f      	ldr	r3, [pc, #188]	; (800ce68 <netif_add+0x190>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	617b      	str	r3, [r7, #20]
 800cdae:	e02b      	b.n	800ce08 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cdb0:	697a      	ldr	r2, [r7, #20]
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d106      	bne.n	800cdc6 <netif_add+0xee>
 800cdb8:	4b24      	ldr	r3, [pc, #144]	; (800ce4c <netif_add+0x174>)
 800cdba:	f240 128b 	movw	r2, #395	; 0x18b
 800cdbe:	492b      	ldr	r1, [pc, #172]	; (800ce6c <netif_add+0x194>)
 800cdc0:	4824      	ldr	r0, [pc, #144]	; (800ce54 <netif_add+0x17c>)
 800cdc2:	f00a fcef 	bl	80177a4 <iprintf>
        num_netifs++;
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	3301      	adds	r3, #1
 800cdca:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	2bff      	cmp	r3, #255	; 0xff
 800cdd0:	dd06      	ble.n	800cde0 <netif_add+0x108>
 800cdd2:	4b1e      	ldr	r3, [pc, #120]	; (800ce4c <netif_add+0x174>)
 800cdd4:	f240 128d 	movw	r2, #397	; 0x18d
 800cdd8:	4925      	ldr	r1, [pc, #148]	; (800ce70 <netif_add+0x198>)
 800cdda:	481e      	ldr	r0, [pc, #120]	; (800ce54 <netif_add+0x17c>)
 800cddc:	f00a fce2 	bl	80177a4 <iprintf>
        if (netif2->num == netif->num) {
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d108      	bne.n	800ce02 <netif_add+0x12a>
          netif->num++;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	b2da      	uxtb	r2, r3
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800ce00:	e005      	b.n	800ce0e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	617b      	str	r3, [r7, #20]
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d1d0      	bne.n	800cdb0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d1be      	bne.n	800cd92 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ce1a:	2bfe      	cmp	r3, #254	; 0xfe
 800ce1c:	d103      	bne.n	800ce26 <netif_add+0x14e>
    netif_num = 0;
 800ce1e:	4b11      	ldr	r3, [pc, #68]	; (800ce64 <netif_add+0x18c>)
 800ce20:	2200      	movs	r2, #0
 800ce22:	701a      	strb	r2, [r3, #0]
 800ce24:	e006      	b.n	800ce34 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	b2da      	uxtb	r2, r3
 800ce30:	4b0c      	ldr	r3, [pc, #48]	; (800ce64 <netif_add+0x18c>)
 800ce32:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ce34:	4b0c      	ldr	r3, [pc, #48]	; (800ce68 <netif_add+0x190>)
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ce3c:	4a0a      	ldr	r2, [pc, #40]	; (800ce68 <netif_add+0x190>)
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ce42:	68fb      	ldr	r3, [r7, #12]
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3718      	adds	r7, #24
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	080194fc 	.word	0x080194fc
 800ce50:	08019590 	.word	0x08019590
 800ce54:	0801954c 	.word	0x0801954c
 800ce58:	080195ac 	.word	0x080195ac
 800ce5c:	0801bc74 	.word	0x0801bc74
 800ce60:	0800d1bb 	.word	0x0800d1bb
 800ce64:	20006844 	.word	0x20006844
 800ce68:	2000d680 	.word	0x2000d680
 800ce6c:	080195d0 	.word	0x080195d0
 800ce70:	080195e4 	.word	0x080195e4

0800ce74 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b082      	sub	sp, #8
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ce7e:	6839      	ldr	r1, [r7, #0]
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f002 fd31 	bl	800f8e8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ce86:	6839      	ldr	r1, [r7, #0]
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f007 fdc9 	bl	8014a20 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ce8e:	bf00      	nop
 800ce90:	3708      	adds	r7, #8
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
	...

0800ce98 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b086      	sub	sp, #24
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	60b9      	str	r1, [r7, #8]
 800cea2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d106      	bne.n	800ceb8 <netif_do_set_ipaddr+0x20>
 800ceaa:	4b1d      	ldr	r3, [pc, #116]	; (800cf20 <netif_do_set_ipaddr+0x88>)
 800ceac:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ceb0:	491c      	ldr	r1, [pc, #112]	; (800cf24 <netif_do_set_ipaddr+0x8c>)
 800ceb2:	481d      	ldr	r0, [pc, #116]	; (800cf28 <netif_do_set_ipaddr+0x90>)
 800ceb4:	f00a fc76 	bl	80177a4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d106      	bne.n	800cecc <netif_do_set_ipaddr+0x34>
 800cebe:	4b18      	ldr	r3, [pc, #96]	; (800cf20 <netif_do_set_ipaddr+0x88>)
 800cec0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800cec4:	4917      	ldr	r1, [pc, #92]	; (800cf24 <netif_do_set_ipaddr+0x8c>)
 800cec6:	4818      	ldr	r0, [pc, #96]	; (800cf28 <netif_do_set_ipaddr+0x90>)
 800cec8:	f00a fc6c 	bl	80177a4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	681a      	ldr	r2, [r3, #0]
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	3304      	adds	r3, #4
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d01c      	beq.n	800cf14 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	3304      	adds	r3, #4
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ceea:	f107 0314 	add.w	r3, r7, #20
 800ceee:	4619      	mov	r1, r3
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f7ff ffbf 	bl	800ce74 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d002      	beq.n	800cf02 <netif_do_set_ipaddr+0x6a>
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	e000      	b.n	800cf04 <netif_do_set_ipaddr+0x6c>
 800cf02:	2300      	movs	r3, #0
 800cf04:	68fa      	ldr	r2, [r7, #12]
 800cf06:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800cf08:	2101      	movs	r1, #1
 800cf0a:	68f8      	ldr	r0, [r7, #12]
 800cf0c:	f000 f8d2 	bl	800d0b4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800cf10:	2301      	movs	r3, #1
 800cf12:	e000      	b.n	800cf16 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800cf14:	2300      	movs	r3, #0
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3718      	adds	r7, #24
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	080194fc 	.word	0x080194fc
 800cf24:	08019614 	.word	0x08019614
 800cf28:	0801954c 	.word	0x0801954c

0800cf2c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b085      	sub	sp, #20
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	3308      	adds	r3, #8
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d00a      	beq.n	800cf5c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d002      	beq.n	800cf52 <netif_do_set_netmask+0x26>
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	e000      	b.n	800cf54 <netif_do_set_netmask+0x28>
 800cf52:	2300      	movs	r3, #0
 800cf54:	68fa      	ldr	r2, [r7, #12]
 800cf56:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800cf58:	2301      	movs	r3, #1
 800cf5a:	e000      	b.n	800cf5e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800cf5c:	2300      	movs	r3, #0
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3714      	adds	r7, #20
 800cf62:	46bd      	mov	sp, r7
 800cf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf68:	4770      	bx	lr

0800cf6a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800cf6a:	b480      	push	{r7}
 800cf6c:	b085      	sub	sp, #20
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	60f8      	str	r0, [r7, #12]
 800cf72:	60b9      	str	r1, [r7, #8]
 800cf74:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	681a      	ldr	r2, [r3, #0]
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	330c      	adds	r3, #12
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d00a      	beq.n	800cf9a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d002      	beq.n	800cf90 <netif_do_set_gw+0x26>
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	e000      	b.n	800cf92 <netif_do_set_gw+0x28>
 800cf90:	2300      	movs	r3, #0
 800cf92:	68fa      	ldr	r2, [r7, #12]
 800cf94:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800cf96:	2301      	movs	r3, #1
 800cf98:	e000      	b.n	800cf9c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800cf9a:	2300      	movs	r3, #0
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3714      	adds	r7, #20
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b088      	sub	sp, #32
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
 800cfb4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d101      	bne.n	800cfc8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800cfc4:	4b1c      	ldr	r3, [pc, #112]	; (800d038 <netif_set_addr+0x90>)
 800cfc6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d101      	bne.n	800cfd2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800cfce:	4b1a      	ldr	r3, [pc, #104]	; (800d038 <netif_set_addr+0x90>)
 800cfd0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d101      	bne.n	800cfdc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800cfd8:	4b17      	ldr	r3, [pc, #92]	; (800d038 <netif_set_addr+0x90>)
 800cfda:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d003      	beq.n	800cfea <netif_set_addr+0x42>
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d101      	bne.n	800cfee <netif_set_addr+0x46>
 800cfea:	2301      	movs	r3, #1
 800cfec:	e000      	b.n	800cff0 <netif_set_addr+0x48>
 800cfee:	2300      	movs	r3, #0
 800cff0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d006      	beq.n	800d006 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cff8:	f107 0310 	add.w	r3, r7, #16
 800cffc:	461a      	mov	r2, r3
 800cffe:	68b9      	ldr	r1, [r7, #8]
 800d000:	68f8      	ldr	r0, [r7, #12]
 800d002:	f7ff ff49 	bl	800ce98 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d006:	69fa      	ldr	r2, [r7, #28]
 800d008:	6879      	ldr	r1, [r7, #4]
 800d00a:	68f8      	ldr	r0, [r7, #12]
 800d00c:	f7ff ff8e 	bl	800cf2c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d010:	69ba      	ldr	r2, [r7, #24]
 800d012:	6839      	ldr	r1, [r7, #0]
 800d014:	68f8      	ldr	r0, [r7, #12]
 800d016:	f7ff ffa8 	bl	800cf6a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d106      	bne.n	800d02e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d020:	f107 0310 	add.w	r3, r7, #16
 800d024:	461a      	mov	r2, r3
 800d026:	68b9      	ldr	r1, [r7, #8]
 800d028:	68f8      	ldr	r0, [r7, #12]
 800d02a:	f7ff ff35 	bl	800ce98 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d02e:	bf00      	nop
 800d030:	3720      	adds	r7, #32
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	0801bc74 	.word	0x0801bc74

0800d03c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d044:	4a04      	ldr	r2, [pc, #16]	; (800d058 <netif_set_default+0x1c>)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d04a:	bf00      	nop
 800d04c:	370c      	adds	r7, #12
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop
 800d058:	2000d684 	.word	0x2000d684

0800d05c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b082      	sub	sp, #8
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d107      	bne.n	800d07a <netif_set_up+0x1e>
 800d06a:	4b0f      	ldr	r3, [pc, #60]	; (800d0a8 <netif_set_up+0x4c>)
 800d06c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d070:	490e      	ldr	r1, [pc, #56]	; (800d0ac <netif_set_up+0x50>)
 800d072:	480f      	ldr	r0, [pc, #60]	; (800d0b0 <netif_set_up+0x54>)
 800d074:	f00a fb96 	bl	80177a4 <iprintf>
 800d078:	e013      	b.n	800d0a2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d080:	f003 0301 	and.w	r3, r3, #1
 800d084:	2b00      	cmp	r3, #0
 800d086:	d10c      	bne.n	800d0a2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d08e:	f043 0301 	orr.w	r3, r3, #1
 800d092:	b2da      	uxtb	r2, r3
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d09a:	2103      	movs	r1, #3
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f000 f809 	bl	800d0b4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d0a2:	3708      	adds	r7, #8
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	080194fc 	.word	0x080194fc
 800d0ac:	08019684 	.word	0x08019684
 800d0b0:	0801954c 	.word	0x0801954c

0800d0b4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	460b      	mov	r3, r1
 800d0be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d106      	bne.n	800d0d4 <netif_issue_reports+0x20>
 800d0c6:	4b18      	ldr	r3, [pc, #96]	; (800d128 <netif_issue_reports+0x74>)
 800d0c8:	f240 326d 	movw	r2, #877	; 0x36d
 800d0cc:	4917      	ldr	r1, [pc, #92]	; (800d12c <netif_issue_reports+0x78>)
 800d0ce:	4818      	ldr	r0, [pc, #96]	; (800d130 <netif_issue_reports+0x7c>)
 800d0d0:	f00a fb68 	bl	80177a4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d0da:	f003 0304 	and.w	r3, r3, #4
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d01e      	beq.n	800d120 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d0e8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d017      	beq.n	800d120 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d0f0:	78fb      	ldrb	r3, [r7, #3]
 800d0f2:	f003 0301 	and.w	r3, r3, #1
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d013      	beq.n	800d122 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	3304      	adds	r3, #4
 800d0fe:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d100:	2b00      	cmp	r3, #0
 800d102:	d00e      	beq.n	800d122 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d10a:	f003 0308 	and.w	r3, r3, #8
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d007      	beq.n	800d122 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	3304      	adds	r3, #4
 800d116:	4619      	mov	r1, r3
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f008 fbeb 	bl	80158f4 <etharp_request>
 800d11e:	e000      	b.n	800d122 <netif_issue_reports+0x6e>
    return;
 800d120:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d122:	3708      	adds	r7, #8
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	080194fc 	.word	0x080194fc
 800d12c:	080196a0 	.word	0x080196a0
 800d130:	0801954c 	.word	0x0801954c

0800d134 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d107      	bne.n	800d152 <netif_set_down+0x1e>
 800d142:	4b12      	ldr	r3, [pc, #72]	; (800d18c <netif_set_down+0x58>)
 800d144:	f240 329b 	movw	r2, #923	; 0x39b
 800d148:	4911      	ldr	r1, [pc, #68]	; (800d190 <netif_set_down+0x5c>)
 800d14a:	4812      	ldr	r0, [pc, #72]	; (800d194 <netif_set_down+0x60>)
 800d14c:	f00a fb2a 	bl	80177a4 <iprintf>
 800d150:	e019      	b.n	800d186 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d158:	f003 0301 	and.w	r3, r3, #1
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d012      	beq.n	800d186 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d166:	f023 0301 	bic.w	r3, r3, #1
 800d16a:	b2da      	uxtb	r2, r3
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d178:	f003 0308 	and.w	r3, r3, #8
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d002      	beq.n	800d186 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f007 ff75 	bl	8015070 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d186:	3708      	adds	r7, #8
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}
 800d18c:	080194fc 	.word	0x080194fc
 800d190:	080196c4 	.word	0x080196c4
 800d194:	0801954c 	.word	0x0801954c

0800d198 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d002      	beq.n	800d1ae <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	683a      	ldr	r2, [r7, #0]
 800d1ac:	61da      	str	r2, [r3, #28]
  }
}
 800d1ae:	bf00      	nop
 800d1b0:	370c      	adds	r7, #12
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b8:	4770      	bx	lr

0800d1ba <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d1ba:	b480      	push	{r7}
 800d1bc:	b085      	sub	sp, #20
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	60f8      	str	r0, [r7, #12]
 800d1c2:	60b9      	str	r1, [r7, #8]
 800d1c4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d1c6:	f06f 030b 	mvn.w	r3, #11
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3714      	adds	r7, #20
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr
	...

0800d1d8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b085      	sub	sp, #20
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	4603      	mov	r3, r0
 800d1e0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d1e2:	79fb      	ldrb	r3, [r7, #7]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d013      	beq.n	800d210 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d1e8:	4b0d      	ldr	r3, [pc, #52]	; (800d220 <netif_get_by_index+0x48>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	60fb      	str	r3, [r7, #12]
 800d1ee:	e00c      	b.n	800d20a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	b2db      	uxtb	r3, r3
 800d1fa:	79fa      	ldrb	r2, [r7, #7]
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d101      	bne.n	800d204 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	e006      	b.n	800d212 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	60fb      	str	r3, [r7, #12]
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d1ef      	bne.n	800d1f0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d210:	2300      	movs	r3, #0
}
 800d212:	4618      	mov	r0, r3
 800d214:	3714      	adds	r7, #20
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr
 800d21e:	bf00      	nop
 800d220:	2000d680 	.word	0x2000d680

0800d224 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d22a:	f00a f8ad 	bl	8017388 <sys_arch_protect>
 800d22e:	6038      	str	r0, [r7, #0]
 800d230:	4b0d      	ldr	r3, [pc, #52]	; (800d268 <pbuf_free_ooseq+0x44>)
 800d232:	2200      	movs	r2, #0
 800d234:	701a      	strb	r2, [r3, #0]
 800d236:	6838      	ldr	r0, [r7, #0]
 800d238:	f00a f8b4 	bl	80173a4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d23c:	4b0b      	ldr	r3, [pc, #44]	; (800d26c <pbuf_free_ooseq+0x48>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	607b      	str	r3, [r7, #4]
 800d242:	e00a      	b.n	800d25a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d003      	beq.n	800d254 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f002 fb89 	bl	800f964 <tcp_free_ooseq>
      return;
 800d252:	e005      	b.n	800d260 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	68db      	ldr	r3, [r3, #12]
 800d258:	607b      	str	r3, [r7, #4]
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d1f1      	bne.n	800d244 <pbuf_free_ooseq+0x20>
    }
  }
}
 800d260:	3708      	adds	r7, #8
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	2000d688 	.word	0x2000d688
 800d26c:	2000d690 	.word	0x2000d690

0800d270 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b082      	sub	sp, #8
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d278:	f7ff ffd4 	bl	800d224 <pbuf_free_ooseq>
}
 800d27c:	bf00      	nop
 800d27e:	3708      	adds	r7, #8
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}

0800d284 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b082      	sub	sp, #8
 800d288:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d28a:	f00a f87d 	bl	8017388 <sys_arch_protect>
 800d28e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d290:	4b0f      	ldr	r3, [pc, #60]	; (800d2d0 <pbuf_pool_is_empty+0x4c>)
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d296:	4b0e      	ldr	r3, [pc, #56]	; (800d2d0 <pbuf_pool_is_empty+0x4c>)
 800d298:	2201      	movs	r2, #1
 800d29a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f00a f881 	bl	80173a4 <sys_arch_unprotect>

  if (!queued) {
 800d2a2:	78fb      	ldrb	r3, [r7, #3]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d10f      	bne.n	800d2c8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d2a8:	2100      	movs	r1, #0
 800d2aa:	480a      	ldr	r0, [pc, #40]	; (800d2d4 <pbuf_pool_is_empty+0x50>)
 800d2ac:	f7fe ff3a 	bl	800c124 <tcpip_try_callback>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d008      	beq.n	800d2c8 <pbuf_pool_is_empty+0x44>
 800d2b6:	f00a f867 	bl	8017388 <sys_arch_protect>
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	4b04      	ldr	r3, [pc, #16]	; (800d2d0 <pbuf_pool_is_empty+0x4c>)
 800d2be:	2200      	movs	r2, #0
 800d2c0:	701a      	strb	r2, [r3, #0]
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f00a f86e 	bl	80173a4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d2c8:	bf00      	nop
 800d2ca:	3708      	adds	r7, #8
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}
 800d2d0:	2000d688 	.word	0x2000d688
 800d2d4:	0800d271 	.word	0x0800d271

0800d2d8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b085      	sub	sp, #20
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	60f8      	str	r0, [r7, #12]
 800d2e0:	60b9      	str	r1, [r7, #8]
 800d2e2:	4611      	mov	r1, r2
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	460b      	mov	r3, r1
 800d2e8:	80fb      	strh	r3, [r7, #6]
 800d2ea:	4613      	mov	r3, r2
 800d2ec:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	68ba      	ldr	r2, [r7, #8]
 800d2f8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	88fa      	ldrh	r2, [r7, #6]
 800d2fe:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	88ba      	ldrh	r2, [r7, #4]
 800d304:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d306:	8b3b      	ldrh	r3, [r7, #24]
 800d308:	b2da      	uxtb	r2, r3
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	7f3a      	ldrb	r2, [r7, #28]
 800d312:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	2201      	movs	r2, #1
 800d318:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2200      	movs	r2, #0
 800d31e:	73da      	strb	r2, [r3, #15]
}
 800d320:	bf00      	nop
 800d322:	3714      	adds	r7, #20
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr

0800d32c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b08c      	sub	sp, #48	; 0x30
 800d330:	af02      	add	r7, sp, #8
 800d332:	4603      	mov	r3, r0
 800d334:	71fb      	strb	r3, [r7, #7]
 800d336:	460b      	mov	r3, r1
 800d338:	80bb      	strh	r3, [r7, #4]
 800d33a:	4613      	mov	r3, r2
 800d33c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d33e:	79fb      	ldrb	r3, [r7, #7]
 800d340:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d342:	887b      	ldrh	r3, [r7, #2]
 800d344:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d348:	d07f      	beq.n	800d44a <pbuf_alloc+0x11e>
 800d34a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d34e:	f300 80c8 	bgt.w	800d4e2 <pbuf_alloc+0x1b6>
 800d352:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d356:	d010      	beq.n	800d37a <pbuf_alloc+0x4e>
 800d358:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d35c:	f300 80c1 	bgt.w	800d4e2 <pbuf_alloc+0x1b6>
 800d360:	2b01      	cmp	r3, #1
 800d362:	d002      	beq.n	800d36a <pbuf_alloc+0x3e>
 800d364:	2b41      	cmp	r3, #65	; 0x41
 800d366:	f040 80bc 	bne.w	800d4e2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d36a:	887a      	ldrh	r2, [r7, #2]
 800d36c:	88bb      	ldrh	r3, [r7, #4]
 800d36e:	4619      	mov	r1, r3
 800d370:	2000      	movs	r0, #0
 800d372:	f000 f8d1 	bl	800d518 <pbuf_alloc_reference>
 800d376:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d378:	e0bd      	b.n	800d4f6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d37a:	2300      	movs	r3, #0
 800d37c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d37e:	2300      	movs	r3, #0
 800d380:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d382:	88bb      	ldrh	r3, [r7, #4]
 800d384:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d386:	200c      	movs	r0, #12
 800d388:	f7ff fc22 	bl	800cbd0 <memp_malloc>
 800d38c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d109      	bne.n	800d3a8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d394:	f7ff ff76 	bl	800d284 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d002      	beq.n	800d3a4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d39e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3a0:	f000 faa8 	bl	800d8f4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	e0a7      	b.n	800d4f8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d3a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3aa:	3303      	adds	r3, #3
 800d3ac:	b29b      	uxth	r3, r3
 800d3ae:	f023 0303 	bic.w	r3, r3, #3
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	8b7a      	ldrh	r2, [r7, #26]
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	bf28      	it	cs
 800d3c0:	4613      	movcs	r3, r2
 800d3c2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d3c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3c6:	3310      	adds	r3, #16
 800d3c8:	693a      	ldr	r2, [r7, #16]
 800d3ca:	4413      	add	r3, r2
 800d3cc:	3303      	adds	r3, #3
 800d3ce:	f023 0303 	bic.w	r3, r3, #3
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	89f9      	ldrh	r1, [r7, #14]
 800d3d6:	8b7a      	ldrh	r2, [r7, #26]
 800d3d8:	2300      	movs	r3, #0
 800d3da:	9301      	str	r3, [sp, #4]
 800d3dc:	887b      	ldrh	r3, [r7, #2]
 800d3de:	9300      	str	r3, [sp, #0]
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	4601      	mov	r1, r0
 800d3e4:	6938      	ldr	r0, [r7, #16]
 800d3e6:	f7ff ff77 	bl	800d2d8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	f003 0303 	and.w	r3, r3, #3
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d006      	beq.n	800d404 <pbuf_alloc+0xd8>
 800d3f6:	4b42      	ldr	r3, [pc, #264]	; (800d500 <pbuf_alloc+0x1d4>)
 800d3f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d3fc:	4941      	ldr	r1, [pc, #260]	; (800d504 <pbuf_alloc+0x1d8>)
 800d3fe:	4842      	ldr	r0, [pc, #264]	; (800d508 <pbuf_alloc+0x1dc>)
 800d400:	f00a f9d0 	bl	80177a4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d404:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d406:	3303      	adds	r3, #3
 800d408:	f023 0303 	bic.w	r3, r3, #3
 800d40c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d410:	d106      	bne.n	800d420 <pbuf_alloc+0xf4>
 800d412:	4b3b      	ldr	r3, [pc, #236]	; (800d500 <pbuf_alloc+0x1d4>)
 800d414:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d418:	493c      	ldr	r1, [pc, #240]	; (800d50c <pbuf_alloc+0x1e0>)
 800d41a:	483b      	ldr	r0, [pc, #236]	; (800d508 <pbuf_alloc+0x1dc>)
 800d41c:	f00a f9c2 	bl	80177a4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d422:	2b00      	cmp	r3, #0
 800d424:	d102      	bne.n	800d42c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	627b      	str	r3, [r7, #36]	; 0x24
 800d42a:	e002      	b.n	800d432 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	693a      	ldr	r2, [r7, #16]
 800d430:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d436:	8b7a      	ldrh	r2, [r7, #26]
 800d438:	89fb      	ldrh	r3, [r7, #14]
 800d43a:	1ad3      	subs	r3, r2, r3
 800d43c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d43e:	2300      	movs	r3, #0
 800d440:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d442:	8b7b      	ldrh	r3, [r7, #26]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d19e      	bne.n	800d386 <pbuf_alloc+0x5a>
      break;
 800d448:	e055      	b.n	800d4f6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d44a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d44c:	3303      	adds	r3, #3
 800d44e:	b29b      	uxth	r3, r3
 800d450:	f023 0303 	bic.w	r3, r3, #3
 800d454:	b29a      	uxth	r2, r3
 800d456:	88bb      	ldrh	r3, [r7, #4]
 800d458:	3303      	adds	r3, #3
 800d45a:	b29b      	uxth	r3, r3
 800d45c:	f023 0303 	bic.w	r3, r3, #3
 800d460:	b29b      	uxth	r3, r3
 800d462:	4413      	add	r3, r2
 800d464:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d466:	8b3b      	ldrh	r3, [r7, #24]
 800d468:	3310      	adds	r3, #16
 800d46a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d46c:	8b3a      	ldrh	r2, [r7, #24]
 800d46e:	88bb      	ldrh	r3, [r7, #4]
 800d470:	3303      	adds	r3, #3
 800d472:	f023 0303 	bic.w	r3, r3, #3
 800d476:	429a      	cmp	r2, r3
 800d478:	d306      	bcc.n	800d488 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d47a:	8afa      	ldrh	r2, [r7, #22]
 800d47c:	88bb      	ldrh	r3, [r7, #4]
 800d47e:	3303      	adds	r3, #3
 800d480:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d484:	429a      	cmp	r2, r3
 800d486:	d201      	bcs.n	800d48c <pbuf_alloc+0x160>
        return NULL;
 800d488:	2300      	movs	r3, #0
 800d48a:	e035      	b.n	800d4f8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d48c:	8afb      	ldrh	r3, [r7, #22]
 800d48e:	4618      	mov	r0, r3
 800d490:	f7ff fa1c 	bl	800c8cc <mem_malloc>
 800d494:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d101      	bne.n	800d4a0 <pbuf_alloc+0x174>
        return NULL;
 800d49c:	2300      	movs	r3, #0
 800d49e:	e02b      	b.n	800d4f8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d4a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d4a2:	3310      	adds	r3, #16
 800d4a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4a6:	4413      	add	r3, r2
 800d4a8:	3303      	adds	r3, #3
 800d4aa:	f023 0303 	bic.w	r3, r3, #3
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	88b9      	ldrh	r1, [r7, #4]
 800d4b2:	88ba      	ldrh	r2, [r7, #4]
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	9301      	str	r3, [sp, #4]
 800d4b8:	887b      	ldrh	r3, [r7, #2]
 800d4ba:	9300      	str	r3, [sp, #0]
 800d4bc:	460b      	mov	r3, r1
 800d4be:	4601      	mov	r1, r0
 800d4c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4c2:	f7ff ff09 	bl	800d2d8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	f003 0303 	and.w	r3, r3, #3
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d010      	beq.n	800d4f4 <pbuf_alloc+0x1c8>
 800d4d2:	4b0b      	ldr	r3, [pc, #44]	; (800d500 <pbuf_alloc+0x1d4>)
 800d4d4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d4d8:	490d      	ldr	r1, [pc, #52]	; (800d510 <pbuf_alloc+0x1e4>)
 800d4da:	480b      	ldr	r0, [pc, #44]	; (800d508 <pbuf_alloc+0x1dc>)
 800d4dc:	f00a f962 	bl	80177a4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d4e0:	e008      	b.n	800d4f4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d4e2:	4b07      	ldr	r3, [pc, #28]	; (800d500 <pbuf_alloc+0x1d4>)
 800d4e4:	f240 1227 	movw	r2, #295	; 0x127
 800d4e8:	490a      	ldr	r1, [pc, #40]	; (800d514 <pbuf_alloc+0x1e8>)
 800d4ea:	4807      	ldr	r0, [pc, #28]	; (800d508 <pbuf_alloc+0x1dc>)
 800d4ec:	f00a f95a 	bl	80177a4 <iprintf>
      return NULL;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	e001      	b.n	800d4f8 <pbuf_alloc+0x1cc>
      break;
 800d4f4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3728      	adds	r7, #40	; 0x28
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	0801972c 	.word	0x0801972c
 800d504:	0801975c 	.word	0x0801975c
 800d508:	0801978c 	.word	0x0801978c
 800d50c:	080197b4 	.word	0x080197b4
 800d510:	080197e8 	.word	0x080197e8
 800d514:	08019814 	.word	0x08019814

0800d518 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b086      	sub	sp, #24
 800d51c:	af02      	add	r7, sp, #8
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	460b      	mov	r3, r1
 800d522:	807b      	strh	r3, [r7, #2]
 800d524:	4613      	mov	r3, r2
 800d526:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d528:	883b      	ldrh	r3, [r7, #0]
 800d52a:	2b41      	cmp	r3, #65	; 0x41
 800d52c:	d009      	beq.n	800d542 <pbuf_alloc_reference+0x2a>
 800d52e:	883b      	ldrh	r3, [r7, #0]
 800d530:	2b01      	cmp	r3, #1
 800d532:	d006      	beq.n	800d542 <pbuf_alloc_reference+0x2a>
 800d534:	4b0f      	ldr	r3, [pc, #60]	; (800d574 <pbuf_alloc_reference+0x5c>)
 800d536:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d53a:	490f      	ldr	r1, [pc, #60]	; (800d578 <pbuf_alloc_reference+0x60>)
 800d53c:	480f      	ldr	r0, [pc, #60]	; (800d57c <pbuf_alloc_reference+0x64>)
 800d53e:	f00a f931 	bl	80177a4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d542:	200b      	movs	r0, #11
 800d544:	f7ff fb44 	bl	800cbd0 <memp_malloc>
 800d548:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d101      	bne.n	800d554 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d550:	2300      	movs	r3, #0
 800d552:	e00b      	b.n	800d56c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d554:	8879      	ldrh	r1, [r7, #2]
 800d556:	887a      	ldrh	r2, [r7, #2]
 800d558:	2300      	movs	r3, #0
 800d55a:	9301      	str	r3, [sp, #4]
 800d55c:	883b      	ldrh	r3, [r7, #0]
 800d55e:	9300      	str	r3, [sp, #0]
 800d560:	460b      	mov	r3, r1
 800d562:	6879      	ldr	r1, [r7, #4]
 800d564:	68f8      	ldr	r0, [r7, #12]
 800d566:	f7ff feb7 	bl	800d2d8 <pbuf_init_alloced_pbuf>
  return p;
 800d56a:	68fb      	ldr	r3, [r7, #12]
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3710      	adds	r7, #16
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}
 800d574:	0801972c 	.word	0x0801972c
 800d578:	08019830 	.word	0x08019830
 800d57c:	0801978c 	.word	0x0801978c

0800d580 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b088      	sub	sp, #32
 800d584:	af02      	add	r7, sp, #8
 800d586:	607b      	str	r3, [r7, #4]
 800d588:	4603      	mov	r3, r0
 800d58a:	73fb      	strb	r3, [r7, #15]
 800d58c:	460b      	mov	r3, r1
 800d58e:	81bb      	strh	r3, [r7, #12]
 800d590:	4613      	mov	r3, r2
 800d592:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d594:	7bfb      	ldrb	r3, [r7, #15]
 800d596:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d598:	8a7b      	ldrh	r3, [r7, #18]
 800d59a:	3303      	adds	r3, #3
 800d59c:	f023 0203 	bic.w	r2, r3, #3
 800d5a0:	89bb      	ldrh	r3, [r7, #12]
 800d5a2:	441a      	add	r2, r3
 800d5a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d901      	bls.n	800d5ae <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	e018      	b.n	800d5e0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d5ae:	6a3b      	ldr	r3, [r7, #32]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d007      	beq.n	800d5c4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d5b4:	8a7b      	ldrh	r3, [r7, #18]
 800d5b6:	3303      	adds	r3, #3
 800d5b8:	f023 0303 	bic.w	r3, r3, #3
 800d5bc:	6a3a      	ldr	r2, [r7, #32]
 800d5be:	4413      	add	r3, r2
 800d5c0:	617b      	str	r3, [r7, #20]
 800d5c2:	e001      	b.n	800d5c8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	89b9      	ldrh	r1, [r7, #12]
 800d5cc:	89ba      	ldrh	r2, [r7, #12]
 800d5ce:	2302      	movs	r3, #2
 800d5d0:	9301      	str	r3, [sp, #4]
 800d5d2:	897b      	ldrh	r3, [r7, #10]
 800d5d4:	9300      	str	r3, [sp, #0]
 800d5d6:	460b      	mov	r3, r1
 800d5d8:	6979      	ldr	r1, [r7, #20]
 800d5da:	f7ff fe7d 	bl	800d2d8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d5de:	687b      	ldr	r3, [r7, #4]
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3718      	adds	r7, #24
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	460b      	mov	r3, r1
 800d5f2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d106      	bne.n	800d608 <pbuf_realloc+0x20>
 800d5fa:	4b3a      	ldr	r3, [pc, #232]	; (800d6e4 <pbuf_realloc+0xfc>)
 800d5fc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d600:	4939      	ldr	r1, [pc, #228]	; (800d6e8 <pbuf_realloc+0x100>)
 800d602:	483a      	ldr	r0, [pc, #232]	; (800d6ec <pbuf_realloc+0x104>)
 800d604:	f00a f8ce 	bl	80177a4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	891b      	ldrh	r3, [r3, #8]
 800d60c:	887a      	ldrh	r2, [r7, #2]
 800d60e:	429a      	cmp	r2, r3
 800d610:	d263      	bcs.n	800d6da <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	891a      	ldrh	r2, [r3, #8]
 800d616:	887b      	ldrh	r3, [r7, #2]
 800d618:	1ad3      	subs	r3, r2, r3
 800d61a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d61c:	887b      	ldrh	r3, [r7, #2]
 800d61e:	817b      	strh	r3, [r7, #10]
  q = p;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d624:	e018      	b.n	800d658 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	895b      	ldrh	r3, [r3, #10]
 800d62a:	897a      	ldrh	r2, [r7, #10]
 800d62c:	1ad3      	subs	r3, r2, r3
 800d62e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	891a      	ldrh	r2, [r3, #8]
 800d634:	893b      	ldrh	r3, [r7, #8]
 800d636:	1ad3      	subs	r3, r2, r3
 800d638:	b29a      	uxth	r2, r3
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d106      	bne.n	800d658 <pbuf_realloc+0x70>
 800d64a:	4b26      	ldr	r3, [pc, #152]	; (800d6e4 <pbuf_realloc+0xfc>)
 800d64c:	f240 12af 	movw	r2, #431	; 0x1af
 800d650:	4927      	ldr	r1, [pc, #156]	; (800d6f0 <pbuf_realloc+0x108>)
 800d652:	4826      	ldr	r0, [pc, #152]	; (800d6ec <pbuf_realloc+0x104>)
 800d654:	f00a f8a6 	bl	80177a4 <iprintf>
  while (rem_len > q->len) {
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	895b      	ldrh	r3, [r3, #10]
 800d65c:	897a      	ldrh	r2, [r7, #10]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d8e1      	bhi.n	800d626 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	7b1b      	ldrb	r3, [r3, #12]
 800d666:	f003 030f 	and.w	r3, r3, #15
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d121      	bne.n	800d6b2 <pbuf_realloc+0xca>
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	895b      	ldrh	r3, [r3, #10]
 800d672:	897a      	ldrh	r2, [r7, #10]
 800d674:	429a      	cmp	r2, r3
 800d676:	d01c      	beq.n	800d6b2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	7b5b      	ldrb	r3, [r3, #13]
 800d67c:	f003 0302 	and.w	r3, r3, #2
 800d680:	2b00      	cmp	r3, #0
 800d682:	d116      	bne.n	800d6b2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	685a      	ldr	r2, [r3, #4]
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	1ad3      	subs	r3, r2, r3
 800d68c:	b29a      	uxth	r2, r3
 800d68e:	897b      	ldrh	r3, [r7, #10]
 800d690:	4413      	add	r3, r2
 800d692:	b29b      	uxth	r3, r3
 800d694:	4619      	mov	r1, r3
 800d696:	68f8      	ldr	r0, [r7, #12]
 800d698:	f7ff f80e 	bl	800c6b8 <mem_trim>
 800d69c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d106      	bne.n	800d6b2 <pbuf_realloc+0xca>
 800d6a4:	4b0f      	ldr	r3, [pc, #60]	; (800d6e4 <pbuf_realloc+0xfc>)
 800d6a6:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d6aa:	4912      	ldr	r1, [pc, #72]	; (800d6f4 <pbuf_realloc+0x10c>)
 800d6ac:	480f      	ldr	r0, [pc, #60]	; (800d6ec <pbuf_realloc+0x104>)
 800d6ae:	f00a f879 	bl	80177a4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	897a      	ldrh	r2, [r7, #10]
 800d6b6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	895a      	ldrh	r2, [r3, #10]
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d004      	beq.n	800d6d2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f000 f911 	bl	800d8f4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	601a      	str	r2, [r3, #0]
 800d6d8:	e000      	b.n	800d6dc <pbuf_realloc+0xf4>
    return;
 800d6da:	bf00      	nop

}
 800d6dc:	3710      	adds	r7, #16
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}
 800d6e2:	bf00      	nop
 800d6e4:	0801972c 	.word	0x0801972c
 800d6e8:	08019844 	.word	0x08019844
 800d6ec:	0801978c 	.word	0x0801978c
 800d6f0:	0801985c 	.word	0x0801985c
 800d6f4:	08019874 	.word	0x08019874

0800d6f8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b086      	sub	sp, #24
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	60f8      	str	r0, [r7, #12]
 800d700:	60b9      	str	r1, [r7, #8]
 800d702:	4613      	mov	r3, r2
 800d704:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d106      	bne.n	800d71a <pbuf_add_header_impl+0x22>
 800d70c:	4b2b      	ldr	r3, [pc, #172]	; (800d7bc <pbuf_add_header_impl+0xc4>)
 800d70e:	f240 12df 	movw	r2, #479	; 0x1df
 800d712:	492b      	ldr	r1, [pc, #172]	; (800d7c0 <pbuf_add_header_impl+0xc8>)
 800d714:	482b      	ldr	r0, [pc, #172]	; (800d7c4 <pbuf_add_header_impl+0xcc>)
 800d716:	f00a f845 	bl	80177a4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d003      	beq.n	800d728 <pbuf_add_header_impl+0x30>
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d726:	d301      	bcc.n	800d72c <pbuf_add_header_impl+0x34>
    return 1;
 800d728:	2301      	movs	r3, #1
 800d72a:	e043      	b.n	800d7b4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d101      	bne.n	800d736 <pbuf_add_header_impl+0x3e>
    return 0;
 800d732:	2300      	movs	r3, #0
 800d734:	e03e      	b.n	800d7b4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	891a      	ldrh	r2, [r3, #8]
 800d73e:	8a7b      	ldrh	r3, [r7, #18]
 800d740:	4413      	add	r3, r2
 800d742:	b29b      	uxth	r3, r3
 800d744:	8a7a      	ldrh	r2, [r7, #18]
 800d746:	429a      	cmp	r2, r3
 800d748:	d901      	bls.n	800d74e <pbuf_add_header_impl+0x56>
    return 1;
 800d74a:	2301      	movs	r3, #1
 800d74c:	e032      	b.n	800d7b4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	7b1b      	ldrb	r3, [r3, #12]
 800d752:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d754:	8a3b      	ldrh	r3, [r7, #16]
 800d756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d00c      	beq.n	800d778 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	685a      	ldr	r2, [r3, #4]
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	425b      	negs	r3, r3
 800d766:	4413      	add	r3, r2
 800d768:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	3310      	adds	r3, #16
 800d76e:	697a      	ldr	r2, [r7, #20]
 800d770:	429a      	cmp	r2, r3
 800d772:	d20d      	bcs.n	800d790 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d774:	2301      	movs	r3, #1
 800d776:	e01d      	b.n	800d7b4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d778:	79fb      	ldrb	r3, [r7, #7]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d006      	beq.n	800d78c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	685a      	ldr	r2, [r3, #4]
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	425b      	negs	r3, r3
 800d786:	4413      	add	r3, r2
 800d788:	617b      	str	r3, [r7, #20]
 800d78a:	e001      	b.n	800d790 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d78c:	2301      	movs	r3, #1
 800d78e:	e011      	b.n	800d7b4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	697a      	ldr	r2, [r7, #20]
 800d794:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	895a      	ldrh	r2, [r3, #10]
 800d79a:	8a7b      	ldrh	r3, [r7, #18]
 800d79c:	4413      	add	r3, r2
 800d79e:	b29a      	uxth	r2, r3
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	891a      	ldrh	r2, [r3, #8]
 800d7a8:	8a7b      	ldrh	r3, [r7, #18]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	b29a      	uxth	r2, r3
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	811a      	strh	r2, [r3, #8]


  return 0;
 800d7b2:	2300      	movs	r3, #0
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3718      	adds	r7, #24
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	0801972c 	.word	0x0801972c
 800d7c0:	08019890 	.word	0x08019890
 800d7c4:	0801978c 	.word	0x0801978c

0800d7c8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	6839      	ldr	r1, [r7, #0]
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f7ff ff8e 	bl	800d6f8 <pbuf_add_header_impl>
 800d7dc:	4603      	mov	r3, r0
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3708      	adds	r7, #8
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}
	...

0800d7e8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d106      	bne.n	800d806 <pbuf_remove_header+0x1e>
 800d7f8:	4b20      	ldr	r3, [pc, #128]	; (800d87c <pbuf_remove_header+0x94>)
 800d7fa:	f240 224b 	movw	r2, #587	; 0x24b
 800d7fe:	4920      	ldr	r1, [pc, #128]	; (800d880 <pbuf_remove_header+0x98>)
 800d800:	4820      	ldr	r0, [pc, #128]	; (800d884 <pbuf_remove_header+0x9c>)
 800d802:	f009 ffcf 	bl	80177a4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d003      	beq.n	800d814 <pbuf_remove_header+0x2c>
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d812:	d301      	bcc.n	800d818 <pbuf_remove_header+0x30>
    return 1;
 800d814:	2301      	movs	r3, #1
 800d816:	e02c      	b.n	800d872 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d101      	bne.n	800d822 <pbuf_remove_header+0x3a>
    return 0;
 800d81e:	2300      	movs	r3, #0
 800d820:	e027      	b.n	800d872 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	895b      	ldrh	r3, [r3, #10]
 800d82a:	89fa      	ldrh	r2, [r7, #14]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d908      	bls.n	800d842 <pbuf_remove_header+0x5a>
 800d830:	4b12      	ldr	r3, [pc, #72]	; (800d87c <pbuf_remove_header+0x94>)
 800d832:	f240 2255 	movw	r2, #597	; 0x255
 800d836:	4914      	ldr	r1, [pc, #80]	; (800d888 <pbuf_remove_header+0xa0>)
 800d838:	4812      	ldr	r0, [pc, #72]	; (800d884 <pbuf_remove_header+0x9c>)
 800d83a:	f009 ffb3 	bl	80177a4 <iprintf>
 800d83e:	2301      	movs	r3, #1
 800d840:	e017      	b.n	800d872 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	685a      	ldr	r2, [r3, #4]
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	441a      	add	r2, r3
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	895a      	ldrh	r2, [r3, #10]
 800d858:	89fb      	ldrh	r3, [r7, #14]
 800d85a:	1ad3      	subs	r3, r2, r3
 800d85c:	b29a      	uxth	r2, r3
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	891a      	ldrh	r2, [r3, #8]
 800d866:	89fb      	ldrh	r3, [r7, #14]
 800d868:	1ad3      	subs	r3, r2, r3
 800d86a:	b29a      	uxth	r2, r3
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d870:	2300      	movs	r3, #0
}
 800d872:	4618      	mov	r0, r3
 800d874:	3710      	adds	r7, #16
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	0801972c 	.word	0x0801972c
 800d880:	08019890 	.word	0x08019890
 800d884:	0801978c 	.word	0x0801978c
 800d888:	0801989c 	.word	0x0801989c

0800d88c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	460b      	mov	r3, r1
 800d896:	807b      	strh	r3, [r7, #2]
 800d898:	4613      	mov	r3, r2
 800d89a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d89c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	da08      	bge.n	800d8b6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d8a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d8a8:	425b      	negs	r3, r3
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f7ff ff9b 	bl	800d7e8 <pbuf_remove_header>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	e007      	b.n	800d8c6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d8b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d8ba:	787a      	ldrb	r2, [r7, #1]
 800d8bc:	4619      	mov	r1, r3
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f7ff ff1a 	bl	800d6f8 <pbuf_add_header_impl>
 800d8c4:	4603      	mov	r3, r0
  }
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3708      	adds	r7, #8
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}

0800d8ce <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d8ce:	b580      	push	{r7, lr}
 800d8d0:	b082      	sub	sp, #8
 800d8d2:	af00      	add	r7, sp, #0
 800d8d4:	6078      	str	r0, [r7, #4]
 800d8d6:	460b      	mov	r3, r1
 800d8d8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d8da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f7ff ffd2 	bl	800d88c <pbuf_header_impl>
 800d8e8:	4603      	mov	r3, r0
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3708      	adds	r7, #8
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}
	...

0800d8f4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b088      	sub	sp, #32
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d10b      	bne.n	800d91a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d106      	bne.n	800d916 <pbuf_free+0x22>
 800d908:	4b3b      	ldr	r3, [pc, #236]	; (800d9f8 <pbuf_free+0x104>)
 800d90a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d90e:	493b      	ldr	r1, [pc, #236]	; (800d9fc <pbuf_free+0x108>)
 800d910:	483b      	ldr	r0, [pc, #236]	; (800da00 <pbuf_free+0x10c>)
 800d912:	f009 ff47 	bl	80177a4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d916:	2300      	movs	r3, #0
 800d918:	e069      	b.n	800d9ee <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d91a:	2300      	movs	r3, #0
 800d91c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d91e:	e062      	b.n	800d9e6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d920:	f009 fd32 	bl	8017388 <sys_arch_protect>
 800d924:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	7b9b      	ldrb	r3, [r3, #14]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d106      	bne.n	800d93c <pbuf_free+0x48>
 800d92e:	4b32      	ldr	r3, [pc, #200]	; (800d9f8 <pbuf_free+0x104>)
 800d930:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d934:	4933      	ldr	r1, [pc, #204]	; (800da04 <pbuf_free+0x110>)
 800d936:	4832      	ldr	r0, [pc, #200]	; (800da00 <pbuf_free+0x10c>)
 800d938:	f009 ff34 	bl	80177a4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	7b9b      	ldrb	r3, [r3, #14]
 800d940:	3b01      	subs	r3, #1
 800d942:	b2da      	uxtb	r2, r3
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	739a      	strb	r2, [r3, #14]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	7b9b      	ldrb	r3, [r3, #14]
 800d94c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d94e:	69b8      	ldr	r0, [r7, #24]
 800d950:	f009 fd28 	bl	80173a4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d954:	7dfb      	ldrb	r3, [r7, #23]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d143      	bne.n	800d9e2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	7b1b      	ldrb	r3, [r3, #12]
 800d964:	f003 030f 	and.w	r3, r3, #15
 800d968:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	7b5b      	ldrb	r3, [r3, #13]
 800d96e:	f003 0302 	and.w	r3, r3, #2
 800d972:	2b00      	cmp	r3, #0
 800d974:	d011      	beq.n	800d99a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	691b      	ldr	r3, [r3, #16]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d106      	bne.n	800d990 <pbuf_free+0x9c>
 800d982:	4b1d      	ldr	r3, [pc, #116]	; (800d9f8 <pbuf_free+0x104>)
 800d984:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d988:	491f      	ldr	r1, [pc, #124]	; (800da08 <pbuf_free+0x114>)
 800d98a:	481d      	ldr	r0, [pc, #116]	; (800da00 <pbuf_free+0x10c>)
 800d98c:	f009 ff0a 	bl	80177a4 <iprintf>
        pc->custom_free_function(p);
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	691b      	ldr	r3, [r3, #16]
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	4798      	blx	r3
 800d998:	e01d      	b.n	800d9d6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d99a:	7bfb      	ldrb	r3, [r7, #15]
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	d104      	bne.n	800d9aa <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d9a0:	6879      	ldr	r1, [r7, #4]
 800d9a2:	200c      	movs	r0, #12
 800d9a4:	f7ff f966 	bl	800cc74 <memp_free>
 800d9a8:	e015      	b.n	800d9d6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d9aa:	7bfb      	ldrb	r3, [r7, #15]
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d104      	bne.n	800d9ba <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d9b0:	6879      	ldr	r1, [r7, #4]
 800d9b2:	200b      	movs	r0, #11
 800d9b4:	f7ff f95e 	bl	800cc74 <memp_free>
 800d9b8:	e00d      	b.n	800d9d6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d9ba:	7bfb      	ldrb	r3, [r7, #15]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d103      	bne.n	800d9c8 <pbuf_free+0xd4>
          mem_free(p);
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f7fe fde9 	bl	800c598 <mem_free>
 800d9c6:	e006      	b.n	800d9d6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d9c8:	4b0b      	ldr	r3, [pc, #44]	; (800d9f8 <pbuf_free+0x104>)
 800d9ca:	f240 320f 	movw	r2, #783	; 0x30f
 800d9ce:	490f      	ldr	r1, [pc, #60]	; (800da0c <pbuf_free+0x118>)
 800d9d0:	480b      	ldr	r0, [pc, #44]	; (800da00 <pbuf_free+0x10c>)
 800d9d2:	f009 fee7 	bl	80177a4 <iprintf>
        }
      }
      count++;
 800d9d6:	7ffb      	ldrb	r3, [r7, #31]
 800d9d8:	3301      	adds	r3, #1
 800d9da:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	607b      	str	r3, [r7, #4]
 800d9e0:	e001      	b.n	800d9e6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d199      	bne.n	800d920 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d9ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3720      	adds	r7, #32
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	0801972c 	.word	0x0801972c
 800d9fc:	08019890 	.word	0x08019890
 800da00:	0801978c 	.word	0x0801978c
 800da04:	080198bc 	.word	0x080198bc
 800da08:	080198d4 	.word	0x080198d4
 800da0c:	080198f8 	.word	0x080198f8

0800da10 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800da10:	b480      	push	{r7}
 800da12:	b085      	sub	sp, #20
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800da18:	2300      	movs	r3, #0
 800da1a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800da1c:	e005      	b.n	800da2a <pbuf_clen+0x1a>
    ++len;
 800da1e:	89fb      	ldrh	r3, [r7, #14]
 800da20:	3301      	adds	r3, #1
 800da22:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d1f6      	bne.n	800da1e <pbuf_clen+0xe>
  }
  return len;
 800da30:	89fb      	ldrh	r3, [r7, #14]
}
 800da32:	4618      	mov	r0, r3
 800da34:	3714      	adds	r7, #20
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr
	...

0800da40 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d016      	beq.n	800da7c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800da4e:	f009 fc9b 	bl	8017388 <sys_arch_protect>
 800da52:	60f8      	str	r0, [r7, #12]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	7b9b      	ldrb	r3, [r3, #14]
 800da58:	3301      	adds	r3, #1
 800da5a:	b2da      	uxtb	r2, r3
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	739a      	strb	r2, [r3, #14]
 800da60:	68f8      	ldr	r0, [r7, #12]
 800da62:	f009 fc9f 	bl	80173a4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	7b9b      	ldrb	r3, [r3, #14]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d106      	bne.n	800da7c <pbuf_ref+0x3c>
 800da6e:	4b05      	ldr	r3, [pc, #20]	; (800da84 <pbuf_ref+0x44>)
 800da70:	f240 3242 	movw	r2, #834	; 0x342
 800da74:	4904      	ldr	r1, [pc, #16]	; (800da88 <pbuf_ref+0x48>)
 800da76:	4805      	ldr	r0, [pc, #20]	; (800da8c <pbuf_ref+0x4c>)
 800da78:	f009 fe94 	bl	80177a4 <iprintf>
  }
}
 800da7c:	bf00      	nop
 800da7e:	3710      	adds	r7, #16
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}
 800da84:	0801972c 	.word	0x0801972c
 800da88:	0801990c 	.word	0x0801990c
 800da8c:	0801978c 	.word	0x0801978c

0800da90 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b084      	sub	sp, #16
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d002      	beq.n	800daa6 <pbuf_cat+0x16>
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d107      	bne.n	800dab6 <pbuf_cat+0x26>
 800daa6:	4b20      	ldr	r3, [pc, #128]	; (800db28 <pbuf_cat+0x98>)
 800daa8:	f240 3259 	movw	r2, #857	; 0x359
 800daac:	491f      	ldr	r1, [pc, #124]	; (800db2c <pbuf_cat+0x9c>)
 800daae:	4820      	ldr	r0, [pc, #128]	; (800db30 <pbuf_cat+0xa0>)
 800dab0:	f009 fe78 	bl	80177a4 <iprintf>
 800dab4:	e034      	b.n	800db20 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	60fb      	str	r3, [r7, #12]
 800daba:	e00a      	b.n	800dad2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	891a      	ldrh	r2, [r3, #8]
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	891b      	ldrh	r3, [r3, #8]
 800dac4:	4413      	add	r3, r2
 800dac6:	b29a      	uxth	r2, r3
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	60fb      	str	r3, [r7, #12]
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d1f0      	bne.n	800dabc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	891a      	ldrh	r2, [r3, #8]
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	895b      	ldrh	r3, [r3, #10]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d006      	beq.n	800daf4 <pbuf_cat+0x64>
 800dae6:	4b10      	ldr	r3, [pc, #64]	; (800db28 <pbuf_cat+0x98>)
 800dae8:	f240 3262 	movw	r2, #866	; 0x362
 800daec:	4911      	ldr	r1, [pc, #68]	; (800db34 <pbuf_cat+0xa4>)
 800daee:	4810      	ldr	r0, [pc, #64]	; (800db30 <pbuf_cat+0xa0>)
 800daf0:	f009 fe58 	bl	80177a4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d006      	beq.n	800db0a <pbuf_cat+0x7a>
 800dafc:	4b0a      	ldr	r3, [pc, #40]	; (800db28 <pbuf_cat+0x98>)
 800dafe:	f240 3263 	movw	r2, #867	; 0x363
 800db02:	490d      	ldr	r1, [pc, #52]	; (800db38 <pbuf_cat+0xa8>)
 800db04:	480a      	ldr	r0, [pc, #40]	; (800db30 <pbuf_cat+0xa0>)
 800db06:	f009 fe4d 	bl	80177a4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	891a      	ldrh	r2, [r3, #8]
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	891b      	ldrh	r3, [r3, #8]
 800db12:	4413      	add	r3, r2
 800db14:	b29a      	uxth	r2, r3
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	683a      	ldr	r2, [r7, #0]
 800db1e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800db20:	3710      	adds	r7, #16
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	0801972c 	.word	0x0801972c
 800db2c:	08019920 	.word	0x08019920
 800db30:	0801978c 	.word	0x0801978c
 800db34:	08019958 	.word	0x08019958
 800db38:	08019988 	.word	0x08019988

0800db3c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b082      	sub	sp, #8
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800db46:	6839      	ldr	r1, [r7, #0]
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f7ff ffa1 	bl	800da90 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800db4e:	6838      	ldr	r0, [r7, #0]
 800db50:	f7ff ff76 	bl	800da40 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800db54:	bf00      	nop
 800db56:	3708      	adds	r7, #8
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b086      	sub	sp, #24
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
 800db64:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800db66:	2300      	movs	r3, #0
 800db68:	617b      	str	r3, [r7, #20]
 800db6a:	2300      	movs	r3, #0
 800db6c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d008      	beq.n	800db86 <pbuf_copy+0x2a>
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d005      	beq.n	800db86 <pbuf_copy+0x2a>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	891a      	ldrh	r2, [r3, #8]
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	891b      	ldrh	r3, [r3, #8]
 800db82:	429a      	cmp	r2, r3
 800db84:	d209      	bcs.n	800db9a <pbuf_copy+0x3e>
 800db86:	4b57      	ldr	r3, [pc, #348]	; (800dce4 <pbuf_copy+0x188>)
 800db88:	f240 32c9 	movw	r2, #969	; 0x3c9
 800db8c:	4956      	ldr	r1, [pc, #344]	; (800dce8 <pbuf_copy+0x18c>)
 800db8e:	4857      	ldr	r0, [pc, #348]	; (800dcec <pbuf_copy+0x190>)
 800db90:	f009 fe08 	bl	80177a4 <iprintf>
 800db94:	f06f 030f 	mvn.w	r3, #15
 800db98:	e09f      	b.n	800dcda <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	895b      	ldrh	r3, [r3, #10]
 800db9e:	461a      	mov	r2, r3
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	1ad2      	subs	r2, r2, r3
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	895b      	ldrh	r3, [r3, #10]
 800dba8:	4619      	mov	r1, r3
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	1acb      	subs	r3, r1, r3
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d306      	bcc.n	800dbc0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	895b      	ldrh	r3, [r3, #10]
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	1ad3      	subs	r3, r2, r3
 800dbbc:	60fb      	str	r3, [r7, #12]
 800dbbe:	e005      	b.n	800dbcc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	895b      	ldrh	r3, [r3, #10]
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	1ad3      	subs	r3, r2, r3
 800dbca:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	685a      	ldr	r2, [r3, #4]
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	18d0      	adds	r0, r2, r3
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	685a      	ldr	r2, [r3, #4]
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	4413      	add	r3, r2
 800dbdc:	68fa      	ldr	r2, [r7, #12]
 800dbde:	4619      	mov	r1, r3
 800dbe0:	f009 fd20 	bl	8017624 <memcpy>
    offset_to += len;
 800dbe4:	697a      	ldr	r2, [r7, #20]
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	4413      	add	r3, r2
 800dbea:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800dbec:	693a      	ldr	r2, [r7, #16]
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	4413      	add	r3, r2
 800dbf2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	895b      	ldrh	r3, [r3, #10]
 800dbf8:	461a      	mov	r2, r3
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d906      	bls.n	800dc0e <pbuf_copy+0xb2>
 800dc00:	4b38      	ldr	r3, [pc, #224]	; (800dce4 <pbuf_copy+0x188>)
 800dc02:	f240 32d9 	movw	r2, #985	; 0x3d9
 800dc06:	493a      	ldr	r1, [pc, #232]	; (800dcf0 <pbuf_copy+0x194>)
 800dc08:	4838      	ldr	r0, [pc, #224]	; (800dcec <pbuf_copy+0x190>)
 800dc0a:	f009 fdcb 	bl	80177a4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	895b      	ldrh	r3, [r3, #10]
 800dc12:	461a      	mov	r2, r3
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d906      	bls.n	800dc28 <pbuf_copy+0xcc>
 800dc1a:	4b32      	ldr	r3, [pc, #200]	; (800dce4 <pbuf_copy+0x188>)
 800dc1c:	f240 32da 	movw	r2, #986	; 0x3da
 800dc20:	4934      	ldr	r1, [pc, #208]	; (800dcf4 <pbuf_copy+0x198>)
 800dc22:	4832      	ldr	r0, [pc, #200]	; (800dcec <pbuf_copy+0x190>)
 800dc24:	f009 fdbe 	bl	80177a4 <iprintf>
    if (offset_from >= p_from->len) {
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	895b      	ldrh	r3, [r3, #10]
 800dc2c:	461a      	mov	r2, r3
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	4293      	cmp	r3, r2
 800dc32:	d304      	bcc.n	800dc3e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800dc34:	2300      	movs	r3, #0
 800dc36:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	895b      	ldrh	r3, [r3, #10]
 800dc42:	461a      	mov	r2, r3
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d114      	bne.n	800dc74 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d10c      	bne.n	800dc74 <pbuf_copy+0x118>
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d009      	beq.n	800dc74 <pbuf_copy+0x118>
 800dc60:	4b20      	ldr	r3, [pc, #128]	; (800dce4 <pbuf_copy+0x188>)
 800dc62:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800dc66:	4924      	ldr	r1, [pc, #144]	; (800dcf8 <pbuf_copy+0x19c>)
 800dc68:	4820      	ldr	r0, [pc, #128]	; (800dcec <pbuf_copy+0x190>)
 800dc6a:	f009 fd9b 	bl	80177a4 <iprintf>
 800dc6e:	f06f 030f 	mvn.w	r3, #15
 800dc72:	e032      	b.n	800dcda <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d013      	beq.n	800dca2 <pbuf_copy+0x146>
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	895a      	ldrh	r2, [r3, #10]
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	891b      	ldrh	r3, [r3, #8]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d10d      	bne.n	800dca2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d009      	beq.n	800dca2 <pbuf_copy+0x146>
 800dc8e:	4b15      	ldr	r3, [pc, #84]	; (800dce4 <pbuf_copy+0x188>)
 800dc90:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800dc94:	4919      	ldr	r1, [pc, #100]	; (800dcfc <pbuf_copy+0x1a0>)
 800dc96:	4815      	ldr	r0, [pc, #84]	; (800dcec <pbuf_copy+0x190>)
 800dc98:	f009 fd84 	bl	80177a4 <iprintf>
 800dc9c:	f06f 0305 	mvn.w	r3, #5
 800dca0:	e01b      	b.n	800dcda <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d013      	beq.n	800dcd0 <pbuf_copy+0x174>
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	895a      	ldrh	r2, [r3, #10]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	891b      	ldrh	r3, [r3, #8]
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d10d      	bne.n	800dcd0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d009      	beq.n	800dcd0 <pbuf_copy+0x174>
 800dcbc:	4b09      	ldr	r3, [pc, #36]	; (800dce4 <pbuf_copy+0x188>)
 800dcbe:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800dcc2:	490e      	ldr	r1, [pc, #56]	; (800dcfc <pbuf_copy+0x1a0>)
 800dcc4:	4809      	ldr	r0, [pc, #36]	; (800dcec <pbuf_copy+0x190>)
 800dcc6:	f009 fd6d 	bl	80177a4 <iprintf>
 800dcca:	f06f 0305 	mvn.w	r3, #5
 800dcce:	e004      	b.n	800dcda <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	f47f af61 	bne.w	800db9a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800dcd8:	2300      	movs	r3, #0
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3718      	adds	r7, #24
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	0801972c 	.word	0x0801972c
 800dce8:	080199d4 	.word	0x080199d4
 800dcec:	0801978c 	.word	0x0801978c
 800dcf0:	08019a04 	.word	0x08019a04
 800dcf4:	08019a1c 	.word	0x08019a1c
 800dcf8:	08019a38 	.word	0x08019a38
 800dcfc:	08019a48 	.word	0x08019a48

0800dd00 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b088      	sub	sp, #32
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	4611      	mov	r1, r2
 800dd0c:	461a      	mov	r2, r3
 800dd0e:	460b      	mov	r3, r1
 800dd10:	80fb      	strh	r3, [r7, #6]
 800dd12:	4613      	mov	r3, r2
 800dd14:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800dd16:	2300      	movs	r3, #0
 800dd18:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d108      	bne.n	800dd36 <pbuf_copy_partial+0x36>
 800dd24:	4b2b      	ldr	r3, [pc, #172]	; (800ddd4 <pbuf_copy_partial+0xd4>)
 800dd26:	f240 420a 	movw	r2, #1034	; 0x40a
 800dd2a:	492b      	ldr	r1, [pc, #172]	; (800ddd8 <pbuf_copy_partial+0xd8>)
 800dd2c:	482b      	ldr	r0, [pc, #172]	; (800dddc <pbuf_copy_partial+0xdc>)
 800dd2e:	f009 fd39 	bl	80177a4 <iprintf>
 800dd32:	2300      	movs	r3, #0
 800dd34:	e04a      	b.n	800ddcc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d108      	bne.n	800dd4e <pbuf_copy_partial+0x4e>
 800dd3c:	4b25      	ldr	r3, [pc, #148]	; (800ddd4 <pbuf_copy_partial+0xd4>)
 800dd3e:	f240 420b 	movw	r2, #1035	; 0x40b
 800dd42:	4927      	ldr	r1, [pc, #156]	; (800dde0 <pbuf_copy_partial+0xe0>)
 800dd44:	4825      	ldr	r0, [pc, #148]	; (800dddc <pbuf_copy_partial+0xdc>)
 800dd46:	f009 fd2d 	bl	80177a4 <iprintf>
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	e03e      	b.n	800ddcc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	61fb      	str	r3, [r7, #28]
 800dd52:	e034      	b.n	800ddbe <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800dd54:	88bb      	ldrh	r3, [r7, #4]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d00a      	beq.n	800dd70 <pbuf_copy_partial+0x70>
 800dd5a:	69fb      	ldr	r3, [r7, #28]
 800dd5c:	895b      	ldrh	r3, [r3, #10]
 800dd5e:	88ba      	ldrh	r2, [r7, #4]
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d305      	bcc.n	800dd70 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	895b      	ldrh	r3, [r3, #10]
 800dd68:	88ba      	ldrh	r2, [r7, #4]
 800dd6a:	1ad3      	subs	r3, r2, r3
 800dd6c:	80bb      	strh	r3, [r7, #4]
 800dd6e:	e023      	b.n	800ddb8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800dd70:	69fb      	ldr	r3, [r7, #28]
 800dd72:	895a      	ldrh	r2, [r3, #10]
 800dd74:	88bb      	ldrh	r3, [r7, #4]
 800dd76:	1ad3      	subs	r3, r2, r3
 800dd78:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800dd7a:	8b3a      	ldrh	r2, [r7, #24]
 800dd7c:	88fb      	ldrh	r3, [r7, #6]
 800dd7e:	429a      	cmp	r2, r3
 800dd80:	d901      	bls.n	800dd86 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800dd82:	88fb      	ldrh	r3, [r7, #6]
 800dd84:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800dd86:	8b7b      	ldrh	r3, [r7, #26]
 800dd88:	68ba      	ldr	r2, [r7, #8]
 800dd8a:	18d0      	adds	r0, r2, r3
 800dd8c:	69fb      	ldr	r3, [r7, #28]
 800dd8e:	685a      	ldr	r2, [r3, #4]
 800dd90:	88bb      	ldrh	r3, [r7, #4]
 800dd92:	4413      	add	r3, r2
 800dd94:	8b3a      	ldrh	r2, [r7, #24]
 800dd96:	4619      	mov	r1, r3
 800dd98:	f009 fc44 	bl	8017624 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800dd9c:	8afa      	ldrh	r2, [r7, #22]
 800dd9e:	8b3b      	ldrh	r3, [r7, #24]
 800dda0:	4413      	add	r3, r2
 800dda2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800dda4:	8b7a      	ldrh	r2, [r7, #26]
 800dda6:	8b3b      	ldrh	r3, [r7, #24]
 800dda8:	4413      	add	r3, r2
 800ddaa:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ddac:	88fa      	ldrh	r2, [r7, #6]
 800ddae:	8b3b      	ldrh	r3, [r7, #24]
 800ddb0:	1ad3      	subs	r3, r2, r3
 800ddb2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ddb8:	69fb      	ldr	r3, [r7, #28]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	61fb      	str	r3, [r7, #28]
 800ddbe:	88fb      	ldrh	r3, [r7, #6]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d002      	beq.n	800ddca <pbuf_copy_partial+0xca>
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d1c4      	bne.n	800dd54 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ddca:	8afb      	ldrh	r3, [r7, #22]
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3720      	adds	r7, #32
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}
 800ddd4:	0801972c 	.word	0x0801972c
 800ddd8:	08019a74 	.word	0x08019a74
 800dddc:	0801978c 	.word	0x0801978c
 800dde0:	08019a94 	.word	0x08019a94

0800dde4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b084      	sub	sp, #16
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	4603      	mov	r3, r0
 800ddec:	603a      	str	r2, [r7, #0]
 800ddee:	71fb      	strb	r3, [r7, #7]
 800ddf0:	460b      	mov	r3, r1
 800ddf2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	8919      	ldrh	r1, [r3, #8]
 800ddf8:	88ba      	ldrh	r2, [r7, #4]
 800ddfa:	79fb      	ldrb	r3, [r7, #7]
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7ff fa95 	bl	800d32c <pbuf_alloc>
 800de02:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d101      	bne.n	800de0e <pbuf_clone+0x2a>
    return NULL;
 800de0a:	2300      	movs	r3, #0
 800de0c:	e011      	b.n	800de32 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800de0e:	6839      	ldr	r1, [r7, #0]
 800de10:	68f8      	ldr	r0, [r7, #12]
 800de12:	f7ff fea3 	bl	800db5c <pbuf_copy>
 800de16:	4603      	mov	r3, r0
 800de18:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800de1a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d006      	beq.n	800de30 <pbuf_clone+0x4c>
 800de22:	4b06      	ldr	r3, [pc, #24]	; (800de3c <pbuf_clone+0x58>)
 800de24:	f240 5224 	movw	r2, #1316	; 0x524
 800de28:	4905      	ldr	r1, [pc, #20]	; (800de40 <pbuf_clone+0x5c>)
 800de2a:	4806      	ldr	r0, [pc, #24]	; (800de44 <pbuf_clone+0x60>)
 800de2c:	f009 fcba 	bl	80177a4 <iprintf>
  return q;
 800de30:	68fb      	ldr	r3, [r7, #12]
}
 800de32:	4618      	mov	r0, r3
 800de34:	3710      	adds	r7, #16
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	0801972c 	.word	0x0801972c
 800de40:	08019ba0 	.word	0x08019ba0
 800de44:	0801978c 	.word	0x0801978c

0800de48 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800de4c:	f009 fcc2 	bl	80177d4 <rand>
 800de50:	4603      	mov	r3, r0
 800de52:	b29b      	uxth	r3, r3
 800de54:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800de58:	b29b      	uxth	r3, r3
 800de5a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800de5e:	b29a      	uxth	r2, r3
 800de60:	4b01      	ldr	r3, [pc, #4]	; (800de68 <tcp_init+0x20>)
 800de62:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800de64:	bf00      	nop
 800de66:	bd80      	pop	{r7, pc}
 800de68:	20000014 	.word	0x20000014

0800de6c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b082      	sub	sp, #8
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	7d1b      	ldrb	r3, [r3, #20]
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d105      	bne.n	800de88 <tcp_free+0x1c>
 800de7c:	4b06      	ldr	r3, [pc, #24]	; (800de98 <tcp_free+0x2c>)
 800de7e:	22d4      	movs	r2, #212	; 0xd4
 800de80:	4906      	ldr	r1, [pc, #24]	; (800de9c <tcp_free+0x30>)
 800de82:	4807      	ldr	r0, [pc, #28]	; (800dea0 <tcp_free+0x34>)
 800de84:	f009 fc8e 	bl	80177a4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800de88:	6879      	ldr	r1, [r7, #4]
 800de8a:	2001      	movs	r0, #1
 800de8c:	f7fe fef2 	bl	800cc74 <memp_free>
}
 800de90:	bf00      	nop
 800de92:	3708      	adds	r7, #8
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}
 800de98:	08019c2c 	.word	0x08019c2c
 800de9c:	08019c5c 	.word	0x08019c5c
 800dea0:	08019c70 	.word	0x08019c70

0800dea4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	7d1b      	ldrb	r3, [r3, #20]
 800deb0:	2b01      	cmp	r3, #1
 800deb2:	d105      	bne.n	800dec0 <tcp_free_listen+0x1c>
 800deb4:	4b06      	ldr	r3, [pc, #24]	; (800ded0 <tcp_free_listen+0x2c>)
 800deb6:	22df      	movs	r2, #223	; 0xdf
 800deb8:	4906      	ldr	r1, [pc, #24]	; (800ded4 <tcp_free_listen+0x30>)
 800deba:	4807      	ldr	r0, [pc, #28]	; (800ded8 <tcp_free_listen+0x34>)
 800debc:	f009 fc72 	bl	80177a4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800dec0:	6879      	ldr	r1, [r7, #4]
 800dec2:	2002      	movs	r0, #2
 800dec4:	f7fe fed6 	bl	800cc74 <memp_free>
}
 800dec8:	bf00      	nop
 800deca:	3708      	adds	r7, #8
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	08019c2c 	.word	0x08019c2c
 800ded4:	08019c98 	.word	0x08019c98
 800ded8:	08019c70 	.word	0x08019c70

0800dedc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800dee0:	f000 ffdc 	bl	800ee9c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800dee4:	4b07      	ldr	r3, [pc, #28]	; (800df04 <tcp_tmr+0x28>)
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	3301      	adds	r3, #1
 800deea:	b2da      	uxtb	r2, r3
 800deec:	4b05      	ldr	r3, [pc, #20]	; (800df04 <tcp_tmr+0x28>)
 800deee:	701a      	strb	r2, [r3, #0]
 800def0:	4b04      	ldr	r3, [pc, #16]	; (800df04 <tcp_tmr+0x28>)
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	f003 0301 	and.w	r3, r3, #1
 800def8:	2b00      	cmp	r3, #0
 800defa:	d001      	beq.n	800df00 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800defc:	f000 fc8e 	bl	800e81c <tcp_slowtmr>
  }
}
 800df00:	bf00      	nop
 800df02:	bd80      	pop	{r7, pc}
 800df04:	20006845 	.word	0x20006845

0800df08 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b084      	sub	sp, #16
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
 800df10:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d105      	bne.n	800df24 <tcp_remove_listener+0x1c>
 800df18:	4b0d      	ldr	r3, [pc, #52]	; (800df50 <tcp_remove_listener+0x48>)
 800df1a:	22ff      	movs	r2, #255	; 0xff
 800df1c:	490d      	ldr	r1, [pc, #52]	; (800df54 <tcp_remove_listener+0x4c>)
 800df1e:	480e      	ldr	r0, [pc, #56]	; (800df58 <tcp_remove_listener+0x50>)
 800df20:	f009 fc40 	bl	80177a4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	60fb      	str	r3, [r7, #12]
 800df28:	e00a      	b.n	800df40 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df2e:	683a      	ldr	r2, [r7, #0]
 800df30:	429a      	cmp	r2, r3
 800df32:	d102      	bne.n	800df3a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2200      	movs	r2, #0
 800df38:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	68db      	ldr	r3, [r3, #12]
 800df3e:	60fb      	str	r3, [r7, #12]
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d1f1      	bne.n	800df2a <tcp_remove_listener+0x22>
    }
  }
}
 800df46:	bf00      	nop
 800df48:	bf00      	nop
 800df4a:	3710      	adds	r7, #16
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}
 800df50:	08019c2c 	.word	0x08019c2c
 800df54:	08019cb4 	.word	0x08019cb4
 800df58:	08019c70 	.word	0x08019c70

0800df5c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b084      	sub	sp, #16
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d106      	bne.n	800df78 <tcp_listen_closed+0x1c>
 800df6a:	4b14      	ldr	r3, [pc, #80]	; (800dfbc <tcp_listen_closed+0x60>)
 800df6c:	f240 1211 	movw	r2, #273	; 0x111
 800df70:	4913      	ldr	r1, [pc, #76]	; (800dfc0 <tcp_listen_closed+0x64>)
 800df72:	4814      	ldr	r0, [pc, #80]	; (800dfc4 <tcp_listen_closed+0x68>)
 800df74:	f009 fc16 	bl	80177a4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	7d1b      	ldrb	r3, [r3, #20]
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	d006      	beq.n	800df8e <tcp_listen_closed+0x32>
 800df80:	4b0e      	ldr	r3, [pc, #56]	; (800dfbc <tcp_listen_closed+0x60>)
 800df82:	f44f 7289 	mov.w	r2, #274	; 0x112
 800df86:	4910      	ldr	r1, [pc, #64]	; (800dfc8 <tcp_listen_closed+0x6c>)
 800df88:	480e      	ldr	r0, [pc, #56]	; (800dfc4 <tcp_listen_closed+0x68>)
 800df8a:	f009 fc0b 	bl	80177a4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800df8e:	2301      	movs	r3, #1
 800df90:	60fb      	str	r3, [r7, #12]
 800df92:	e00b      	b.n	800dfac <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800df94:	4a0d      	ldr	r2, [pc, #52]	; (800dfcc <tcp_listen_closed+0x70>)
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	6879      	ldr	r1, [r7, #4]
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7ff ffb1 	bl	800df08 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	60fb      	str	r3, [r7, #12]
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2b03      	cmp	r3, #3
 800dfb0:	d9f0      	bls.n	800df94 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800dfb2:	bf00      	nop
 800dfb4:	bf00      	nop
 800dfb6:	3710      	adds	r7, #16
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	08019c2c 	.word	0x08019c2c
 800dfc0:	08019cdc 	.word	0x08019cdc
 800dfc4:	08019c70 	.word	0x08019c70
 800dfc8:	08019ce8 	.word	0x08019ce8
 800dfcc:	0801bc4c 	.word	0x0801bc4c

0800dfd0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800dfd0:	b5b0      	push	{r4, r5, r7, lr}
 800dfd2:	b088      	sub	sp, #32
 800dfd4:	af04      	add	r7, sp, #16
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	460b      	mov	r3, r1
 800dfda:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d106      	bne.n	800dff0 <tcp_close_shutdown+0x20>
 800dfe2:	4b63      	ldr	r3, [pc, #396]	; (800e170 <tcp_close_shutdown+0x1a0>)
 800dfe4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800dfe8:	4962      	ldr	r1, [pc, #392]	; (800e174 <tcp_close_shutdown+0x1a4>)
 800dfea:	4863      	ldr	r0, [pc, #396]	; (800e178 <tcp_close_shutdown+0x1a8>)
 800dfec:	f009 fbda 	bl	80177a4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800dff0:	78fb      	ldrb	r3, [r7, #3]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d066      	beq.n	800e0c4 <tcp_close_shutdown+0xf4>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	7d1b      	ldrb	r3, [r3, #20]
 800dffa:	2b04      	cmp	r3, #4
 800dffc:	d003      	beq.n	800e006 <tcp_close_shutdown+0x36>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	7d1b      	ldrb	r3, [r3, #20]
 800e002:	2b07      	cmp	r3, #7
 800e004:	d15e      	bne.n	800e0c4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d104      	bne.n	800e018 <tcp_close_shutdown+0x48>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e012:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e016:	d055      	beq.n	800e0c4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	8b5b      	ldrh	r3, [r3, #26]
 800e01c:	f003 0310 	and.w	r3, r3, #16
 800e020:	2b00      	cmp	r3, #0
 800e022:	d106      	bne.n	800e032 <tcp_close_shutdown+0x62>
 800e024:	4b52      	ldr	r3, [pc, #328]	; (800e170 <tcp_close_shutdown+0x1a0>)
 800e026:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e02a:	4954      	ldr	r1, [pc, #336]	; (800e17c <tcp_close_shutdown+0x1ac>)
 800e02c:	4852      	ldr	r0, [pc, #328]	; (800e178 <tcp_close_shutdown+0x1a8>)
 800e02e:	f009 fbb9 	bl	80177a4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e03a:	687d      	ldr	r5, [r7, #4]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	3304      	adds	r3, #4
 800e040:	687a      	ldr	r2, [r7, #4]
 800e042:	8ad2      	ldrh	r2, [r2, #22]
 800e044:	6879      	ldr	r1, [r7, #4]
 800e046:	8b09      	ldrh	r1, [r1, #24]
 800e048:	9102      	str	r1, [sp, #8]
 800e04a:	9201      	str	r2, [sp, #4]
 800e04c:	9300      	str	r3, [sp, #0]
 800e04e:	462b      	mov	r3, r5
 800e050:	4622      	mov	r2, r4
 800e052:	4601      	mov	r1, r0
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f005 fced 	bl	8013a34 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f001 face 	bl	800f5fc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e060:	4b47      	ldr	r3, [pc, #284]	; (800e180 <tcp_close_shutdown+0x1b0>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	687a      	ldr	r2, [r7, #4]
 800e066:	429a      	cmp	r2, r3
 800e068:	d105      	bne.n	800e076 <tcp_close_shutdown+0xa6>
 800e06a:	4b45      	ldr	r3, [pc, #276]	; (800e180 <tcp_close_shutdown+0x1b0>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	68db      	ldr	r3, [r3, #12]
 800e070:	4a43      	ldr	r2, [pc, #268]	; (800e180 <tcp_close_shutdown+0x1b0>)
 800e072:	6013      	str	r3, [r2, #0]
 800e074:	e013      	b.n	800e09e <tcp_close_shutdown+0xce>
 800e076:	4b42      	ldr	r3, [pc, #264]	; (800e180 <tcp_close_shutdown+0x1b0>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	60fb      	str	r3, [r7, #12]
 800e07c:	e00c      	b.n	800e098 <tcp_close_shutdown+0xc8>
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	68db      	ldr	r3, [r3, #12]
 800e082:	687a      	ldr	r2, [r7, #4]
 800e084:	429a      	cmp	r2, r3
 800e086:	d104      	bne.n	800e092 <tcp_close_shutdown+0xc2>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	68da      	ldr	r2, [r3, #12]
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	60da      	str	r2, [r3, #12]
 800e090:	e005      	b.n	800e09e <tcp_close_shutdown+0xce>
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	68db      	ldr	r3, [r3, #12]
 800e096:	60fb      	str	r3, [r7, #12]
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d1ef      	bne.n	800e07e <tcp_close_shutdown+0xae>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	60da      	str	r2, [r3, #12]
 800e0a4:	4b37      	ldr	r3, [pc, #220]	; (800e184 <tcp_close_shutdown+0x1b4>)
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e0aa:	4b37      	ldr	r3, [pc, #220]	; (800e188 <tcp_close_shutdown+0x1b8>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	687a      	ldr	r2, [r7, #4]
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d102      	bne.n	800e0ba <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e0b4:	f003 ff62 	bl	8011f7c <tcp_trigger_input_pcb_close>
 800e0b8:	e002      	b.n	800e0c0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f7ff fed6 	bl	800de6c <tcp_free>
      }
      return ERR_OK;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	e050      	b.n	800e166 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	7d1b      	ldrb	r3, [r3, #20]
 800e0c8:	2b02      	cmp	r3, #2
 800e0ca:	d03b      	beq.n	800e144 <tcp_close_shutdown+0x174>
 800e0cc:	2b02      	cmp	r3, #2
 800e0ce:	dc44      	bgt.n	800e15a <tcp_close_shutdown+0x18a>
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d002      	beq.n	800e0da <tcp_close_shutdown+0x10a>
 800e0d4:	2b01      	cmp	r3, #1
 800e0d6:	d02a      	beq.n	800e12e <tcp_close_shutdown+0x15e>
 800e0d8:	e03f      	b.n	800e15a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	8adb      	ldrh	r3, [r3, #22]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d021      	beq.n	800e126 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e0e2:	4b2a      	ldr	r3, [pc, #168]	; (800e18c <tcp_close_shutdown+0x1bc>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	687a      	ldr	r2, [r7, #4]
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d105      	bne.n	800e0f8 <tcp_close_shutdown+0x128>
 800e0ec:	4b27      	ldr	r3, [pc, #156]	; (800e18c <tcp_close_shutdown+0x1bc>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	68db      	ldr	r3, [r3, #12]
 800e0f2:	4a26      	ldr	r2, [pc, #152]	; (800e18c <tcp_close_shutdown+0x1bc>)
 800e0f4:	6013      	str	r3, [r2, #0]
 800e0f6:	e013      	b.n	800e120 <tcp_close_shutdown+0x150>
 800e0f8:	4b24      	ldr	r3, [pc, #144]	; (800e18c <tcp_close_shutdown+0x1bc>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	60bb      	str	r3, [r7, #8]
 800e0fe:	e00c      	b.n	800e11a <tcp_close_shutdown+0x14a>
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	68db      	ldr	r3, [r3, #12]
 800e104:	687a      	ldr	r2, [r7, #4]
 800e106:	429a      	cmp	r2, r3
 800e108:	d104      	bne.n	800e114 <tcp_close_shutdown+0x144>
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	68da      	ldr	r2, [r3, #12]
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	60da      	str	r2, [r3, #12]
 800e112:	e005      	b.n	800e120 <tcp_close_shutdown+0x150>
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	60bb      	str	r3, [r7, #8]
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d1ef      	bne.n	800e100 <tcp_close_shutdown+0x130>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2200      	movs	r2, #0
 800e124:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f7ff fea0 	bl	800de6c <tcp_free>
      break;
 800e12c:	e01a      	b.n	800e164 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f7ff ff14 	bl	800df5c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e134:	6879      	ldr	r1, [r7, #4]
 800e136:	4816      	ldr	r0, [pc, #88]	; (800e190 <tcp_close_shutdown+0x1c0>)
 800e138:	f001 fab0 	bl	800f69c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f7ff feb1 	bl	800dea4 <tcp_free_listen>
      break;
 800e142:	e00f      	b.n	800e164 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e144:	6879      	ldr	r1, [r7, #4]
 800e146:	480e      	ldr	r0, [pc, #56]	; (800e180 <tcp_close_shutdown+0x1b0>)
 800e148:	f001 faa8 	bl	800f69c <tcp_pcb_remove>
 800e14c:	4b0d      	ldr	r3, [pc, #52]	; (800e184 <tcp_close_shutdown+0x1b4>)
 800e14e:	2201      	movs	r2, #1
 800e150:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f7ff fe8a 	bl	800de6c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e158:	e004      	b.n	800e164 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f000 f81a 	bl	800e194 <tcp_close_shutdown_fin>
 800e160:	4603      	mov	r3, r0
 800e162:	e000      	b.n	800e166 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e164:	2300      	movs	r3, #0
}
 800e166:	4618      	mov	r0, r3
 800e168:	3710      	adds	r7, #16
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bdb0      	pop	{r4, r5, r7, pc}
 800e16e:	bf00      	nop
 800e170:	08019c2c 	.word	0x08019c2c
 800e174:	08019d00 	.word	0x08019d00
 800e178:	08019c70 	.word	0x08019c70
 800e17c:	08019d20 	.word	0x08019d20
 800e180:	2000d690 	.word	0x2000d690
 800e184:	2000d68c 	.word	0x2000d68c
 800e188:	2000d6a4 	.word	0x2000d6a4
 800e18c:	2000d69c 	.word	0x2000d69c
 800e190:	2000d698 	.word	0x2000d698

0800e194 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b084      	sub	sp, #16
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d106      	bne.n	800e1b0 <tcp_close_shutdown_fin+0x1c>
 800e1a2:	4b2e      	ldr	r3, [pc, #184]	; (800e25c <tcp_close_shutdown_fin+0xc8>)
 800e1a4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e1a8:	492d      	ldr	r1, [pc, #180]	; (800e260 <tcp_close_shutdown_fin+0xcc>)
 800e1aa:	482e      	ldr	r0, [pc, #184]	; (800e264 <tcp_close_shutdown_fin+0xd0>)
 800e1ac:	f009 fafa 	bl	80177a4 <iprintf>

  switch (pcb->state) {
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	7d1b      	ldrb	r3, [r3, #20]
 800e1b4:	2b07      	cmp	r3, #7
 800e1b6:	d020      	beq.n	800e1fa <tcp_close_shutdown_fin+0x66>
 800e1b8:	2b07      	cmp	r3, #7
 800e1ba:	dc2b      	bgt.n	800e214 <tcp_close_shutdown_fin+0x80>
 800e1bc:	2b03      	cmp	r3, #3
 800e1be:	d002      	beq.n	800e1c6 <tcp_close_shutdown_fin+0x32>
 800e1c0:	2b04      	cmp	r3, #4
 800e1c2:	d00d      	beq.n	800e1e0 <tcp_close_shutdown_fin+0x4c>
 800e1c4:	e026      	b.n	800e214 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e1c6:	6878      	ldr	r0, [r7, #4]
 800e1c8:	f004 fd42 	bl	8012c50 <tcp_send_fin>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e1d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d11f      	bne.n	800e218 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2205      	movs	r2, #5
 800e1dc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e1de:	e01b      	b.n	800e218 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f004 fd35 	bl	8012c50 <tcp_send_fin>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e1ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d114      	bne.n	800e21c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2205      	movs	r2, #5
 800e1f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e1f8:	e010      	b.n	800e21c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f004 fd28 	bl	8012c50 <tcp_send_fin>
 800e200:	4603      	mov	r3, r0
 800e202:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d109      	bne.n	800e220 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2209      	movs	r2, #9
 800e210:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e212:	e005      	b.n	800e220 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e214:	2300      	movs	r3, #0
 800e216:	e01c      	b.n	800e252 <tcp_close_shutdown_fin+0xbe>
      break;
 800e218:	bf00      	nop
 800e21a:	e002      	b.n	800e222 <tcp_close_shutdown_fin+0x8e>
      break;
 800e21c:	bf00      	nop
 800e21e:	e000      	b.n	800e222 <tcp_close_shutdown_fin+0x8e>
      break;
 800e220:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d103      	bne.n	800e232 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f004 fe4e 	bl	8012ecc <tcp_output>
 800e230:	e00d      	b.n	800e24e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e23a:	d108      	bne.n	800e24e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	8b5b      	ldrh	r3, [r3, #26]
 800e240:	f043 0308 	orr.w	r3, r3, #8
 800e244:	b29a      	uxth	r2, r3
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e24a:	2300      	movs	r3, #0
 800e24c:	e001      	b.n	800e252 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e24e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e252:	4618      	mov	r0, r3
 800e254:	3710      	adds	r7, #16
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
 800e25a:	bf00      	nop
 800e25c:	08019c2c 	.word	0x08019c2c
 800e260:	08019cdc 	.word	0x08019cdc
 800e264:	08019c70 	.word	0x08019c70

0800e268 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b082      	sub	sp, #8
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d109      	bne.n	800e28a <tcp_close+0x22>
 800e276:	4b0f      	ldr	r3, [pc, #60]	; (800e2b4 <tcp_close+0x4c>)
 800e278:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e27c:	490e      	ldr	r1, [pc, #56]	; (800e2b8 <tcp_close+0x50>)
 800e27e:	480f      	ldr	r0, [pc, #60]	; (800e2bc <tcp_close+0x54>)
 800e280:	f009 fa90 	bl	80177a4 <iprintf>
 800e284:	f06f 030f 	mvn.w	r3, #15
 800e288:	e00f      	b.n	800e2aa <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	7d1b      	ldrb	r3, [r3, #20]
 800e28e:	2b01      	cmp	r3, #1
 800e290:	d006      	beq.n	800e2a0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	8b5b      	ldrh	r3, [r3, #26]
 800e296:	f043 0310 	orr.w	r3, r3, #16
 800e29a:	b29a      	uxth	r2, r3
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e2a0:	2101      	movs	r1, #1
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f7ff fe94 	bl	800dfd0 <tcp_close_shutdown>
 800e2a8:	4603      	mov	r3, r0
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3708      	adds	r7, #8
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}
 800e2b2:	bf00      	nop
 800e2b4:	08019c2c 	.word	0x08019c2c
 800e2b8:	08019d3c 	.word	0x08019d3c
 800e2bc:	08019c70 	.word	0x08019c70

0800e2c0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b084      	sub	sp, #16
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	60f8      	str	r0, [r7, #12]
 800e2c8:	60b9      	str	r1, [r7, #8]
 800e2ca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d109      	bne.n	800e2e6 <tcp_shutdown+0x26>
 800e2d2:	4b26      	ldr	r3, [pc, #152]	; (800e36c <tcp_shutdown+0xac>)
 800e2d4:	f240 2207 	movw	r2, #519	; 0x207
 800e2d8:	4925      	ldr	r1, [pc, #148]	; (800e370 <tcp_shutdown+0xb0>)
 800e2da:	4826      	ldr	r0, [pc, #152]	; (800e374 <tcp_shutdown+0xb4>)
 800e2dc:	f009 fa62 	bl	80177a4 <iprintf>
 800e2e0:	f06f 030f 	mvn.w	r3, #15
 800e2e4:	e03d      	b.n	800e362 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	7d1b      	ldrb	r3, [r3, #20]
 800e2ea:	2b01      	cmp	r3, #1
 800e2ec:	d102      	bne.n	800e2f4 <tcp_shutdown+0x34>
    return ERR_CONN;
 800e2ee:	f06f 030a 	mvn.w	r3, #10
 800e2f2:	e036      	b.n	800e362 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d01b      	beq.n	800e332 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	8b5b      	ldrh	r3, [r3, #26]
 800e2fe:	f043 0310 	orr.w	r3, r3, #16
 800e302:	b29a      	uxth	r2, r3
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d005      	beq.n	800e31a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800e30e:	2101      	movs	r1, #1
 800e310:	68f8      	ldr	r0, [r7, #12]
 800e312:	f7ff fe5d 	bl	800dfd0 <tcp_close_shutdown>
 800e316:	4603      	mov	r3, r0
 800e318:	e023      	b.n	800e362 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d007      	beq.n	800e332 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e326:	4618      	mov	r0, r3
 800e328:	f7ff fae4 	bl	800d8f4 <pbuf_free>
      pcb->refused_data = NULL;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	2200      	movs	r2, #0
 800e330:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d013      	beq.n	800e360 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	7d1b      	ldrb	r3, [r3, #20]
 800e33c:	2b04      	cmp	r3, #4
 800e33e:	dc02      	bgt.n	800e346 <tcp_shutdown+0x86>
 800e340:	2b03      	cmp	r3, #3
 800e342:	da02      	bge.n	800e34a <tcp_shutdown+0x8a>
 800e344:	e009      	b.n	800e35a <tcp_shutdown+0x9a>
 800e346:	2b07      	cmp	r3, #7
 800e348:	d107      	bne.n	800e35a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	b2db      	uxtb	r3, r3
 800e34e:	4619      	mov	r1, r3
 800e350:	68f8      	ldr	r0, [r7, #12]
 800e352:	f7ff fe3d 	bl	800dfd0 <tcp_close_shutdown>
 800e356:	4603      	mov	r3, r0
 800e358:	e003      	b.n	800e362 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800e35a:	f06f 030a 	mvn.w	r3, #10
 800e35e:	e000      	b.n	800e362 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800e360:	2300      	movs	r3, #0
}
 800e362:	4618      	mov	r0, r3
 800e364:	3710      	adds	r7, #16
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
 800e36a:	bf00      	nop
 800e36c:	08019c2c 	.word	0x08019c2c
 800e370:	08019d54 	.word	0x08019d54
 800e374:	08019c70 	.word	0x08019c70

0800e378 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b08e      	sub	sp, #56	; 0x38
 800e37c:	af04      	add	r7, sp, #16
 800e37e:	6078      	str	r0, [r7, #4]
 800e380:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d107      	bne.n	800e398 <tcp_abandon+0x20>
 800e388:	4b52      	ldr	r3, [pc, #328]	; (800e4d4 <tcp_abandon+0x15c>)
 800e38a:	f240 223d 	movw	r2, #573	; 0x23d
 800e38e:	4952      	ldr	r1, [pc, #328]	; (800e4d8 <tcp_abandon+0x160>)
 800e390:	4852      	ldr	r0, [pc, #328]	; (800e4dc <tcp_abandon+0x164>)
 800e392:	f009 fa07 	bl	80177a4 <iprintf>
 800e396:	e099      	b.n	800e4cc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	7d1b      	ldrb	r3, [r3, #20]
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d106      	bne.n	800e3ae <tcp_abandon+0x36>
 800e3a0:	4b4c      	ldr	r3, [pc, #304]	; (800e4d4 <tcp_abandon+0x15c>)
 800e3a2:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e3a6:	494e      	ldr	r1, [pc, #312]	; (800e4e0 <tcp_abandon+0x168>)
 800e3a8:	484c      	ldr	r0, [pc, #304]	; (800e4dc <tcp_abandon+0x164>)
 800e3aa:	f009 f9fb 	bl	80177a4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	7d1b      	ldrb	r3, [r3, #20]
 800e3b2:	2b0a      	cmp	r3, #10
 800e3b4:	d107      	bne.n	800e3c6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e3b6:	6879      	ldr	r1, [r7, #4]
 800e3b8:	484a      	ldr	r0, [pc, #296]	; (800e4e4 <tcp_abandon+0x16c>)
 800e3ba:	f001 f96f 	bl	800f69c <tcp_pcb_remove>
    tcp_free(pcb);
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f7ff fd54 	bl	800de6c <tcp_free>
 800e3c4:	e082      	b.n	800e4cc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3d2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3d8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3e0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	691b      	ldr	r3, [r3, #16]
 800e3e6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	7d1b      	ldrb	r3, [r3, #20]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d126      	bne.n	800e43e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	8adb      	ldrh	r3, [r3, #22]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d02e      	beq.n	800e456 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e3f8:	4b3b      	ldr	r3, [pc, #236]	; (800e4e8 <tcp_abandon+0x170>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	687a      	ldr	r2, [r7, #4]
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d105      	bne.n	800e40e <tcp_abandon+0x96>
 800e402:	4b39      	ldr	r3, [pc, #228]	; (800e4e8 <tcp_abandon+0x170>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	68db      	ldr	r3, [r3, #12]
 800e408:	4a37      	ldr	r2, [pc, #220]	; (800e4e8 <tcp_abandon+0x170>)
 800e40a:	6013      	str	r3, [r2, #0]
 800e40c:	e013      	b.n	800e436 <tcp_abandon+0xbe>
 800e40e:	4b36      	ldr	r3, [pc, #216]	; (800e4e8 <tcp_abandon+0x170>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	61fb      	str	r3, [r7, #28]
 800e414:	e00c      	b.n	800e430 <tcp_abandon+0xb8>
 800e416:	69fb      	ldr	r3, [r7, #28]
 800e418:	68db      	ldr	r3, [r3, #12]
 800e41a:	687a      	ldr	r2, [r7, #4]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d104      	bne.n	800e42a <tcp_abandon+0xb2>
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	68da      	ldr	r2, [r3, #12]
 800e424:	69fb      	ldr	r3, [r7, #28]
 800e426:	60da      	str	r2, [r3, #12]
 800e428:	e005      	b.n	800e436 <tcp_abandon+0xbe>
 800e42a:	69fb      	ldr	r3, [r7, #28]
 800e42c:	68db      	ldr	r3, [r3, #12]
 800e42e:	61fb      	str	r3, [r7, #28]
 800e430:	69fb      	ldr	r3, [r7, #28]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d1ef      	bne.n	800e416 <tcp_abandon+0x9e>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2200      	movs	r2, #0
 800e43a:	60da      	str	r2, [r3, #12]
 800e43c:	e00b      	b.n	800e456 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	8adb      	ldrh	r3, [r3, #22]
 800e446:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e448:	6879      	ldr	r1, [r7, #4]
 800e44a:	4828      	ldr	r0, [pc, #160]	; (800e4ec <tcp_abandon+0x174>)
 800e44c:	f001 f926 	bl	800f69c <tcp_pcb_remove>
 800e450:	4b27      	ldr	r3, [pc, #156]	; (800e4f0 <tcp_abandon+0x178>)
 800e452:	2201      	movs	r2, #1
 800e454:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d004      	beq.n	800e468 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e462:	4618      	mov	r0, r3
 800e464:	f000 fdfa 	bl	800f05c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d004      	beq.n	800e47a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e474:	4618      	mov	r0, r3
 800e476:	f000 fdf1 	bl	800f05c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d004      	beq.n	800e48c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e486:	4618      	mov	r0, r3
 800e488:	f000 fde8 	bl	800f05c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d00e      	beq.n	800e4b0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e492:	6879      	ldr	r1, [r7, #4]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	3304      	adds	r3, #4
 800e498:	687a      	ldr	r2, [r7, #4]
 800e49a:	8b12      	ldrh	r2, [r2, #24]
 800e49c:	9202      	str	r2, [sp, #8]
 800e49e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e4a0:	9201      	str	r2, [sp, #4]
 800e4a2:	9300      	str	r3, [sp, #0]
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	697a      	ldr	r2, [r7, #20]
 800e4a8:	69b9      	ldr	r1, [r7, #24]
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f005 fac2 	bl	8013a34 <tcp_rst>
    }
    last_state = pcb->state;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	7d1b      	ldrb	r3, [r3, #20]
 800e4b4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f7ff fcd8 	bl	800de6c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e4bc:	693b      	ldr	r3, [r7, #16]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d004      	beq.n	800e4cc <tcp_abandon+0x154>
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	f06f 010c 	mvn.w	r1, #12
 800e4c8:	68f8      	ldr	r0, [r7, #12]
 800e4ca:	4798      	blx	r3
  }
}
 800e4cc:	3728      	adds	r7, #40	; 0x28
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}
 800e4d2:	bf00      	nop
 800e4d4:	08019c2c 	.word	0x08019c2c
 800e4d8:	08019d70 	.word	0x08019d70
 800e4dc:	08019c70 	.word	0x08019c70
 800e4e0:	08019d8c 	.word	0x08019d8c
 800e4e4:	2000d6a0 	.word	0x2000d6a0
 800e4e8:	2000d69c 	.word	0x2000d69c
 800e4ec:	2000d690 	.word	0x2000d690
 800e4f0:	2000d68c 	.word	0x2000d68c

0800e4f4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b082      	sub	sp, #8
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e4fc:	2101      	movs	r1, #1
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f7ff ff3a 	bl	800e378 <tcp_abandon>
}
 800e504:	bf00      	nop
 800e506:	3708      	adds	r7, #8
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b088      	sub	sp, #32
 800e510:	af00      	add	r7, sp, #0
 800e512:	60f8      	str	r0, [r7, #12]
 800e514:	60b9      	str	r1, [r7, #8]
 800e516:	4613      	mov	r3, r2
 800e518:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800e51a:	2304      	movs	r3, #4
 800e51c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d101      	bne.n	800e528 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800e524:	4b3e      	ldr	r3, [pc, #248]	; (800e620 <tcp_bind+0x114>)
 800e526:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d109      	bne.n	800e542 <tcp_bind+0x36>
 800e52e:	4b3d      	ldr	r3, [pc, #244]	; (800e624 <tcp_bind+0x118>)
 800e530:	f240 22a9 	movw	r2, #681	; 0x2a9
 800e534:	493c      	ldr	r1, [pc, #240]	; (800e628 <tcp_bind+0x11c>)
 800e536:	483d      	ldr	r0, [pc, #244]	; (800e62c <tcp_bind+0x120>)
 800e538:	f009 f934 	bl	80177a4 <iprintf>
 800e53c:	f06f 030f 	mvn.w	r3, #15
 800e540:	e06a      	b.n	800e618 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	7d1b      	ldrb	r3, [r3, #20]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d009      	beq.n	800e55e <tcp_bind+0x52>
 800e54a:	4b36      	ldr	r3, [pc, #216]	; (800e624 <tcp_bind+0x118>)
 800e54c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e550:	4937      	ldr	r1, [pc, #220]	; (800e630 <tcp_bind+0x124>)
 800e552:	4836      	ldr	r0, [pc, #216]	; (800e62c <tcp_bind+0x120>)
 800e554:	f009 f926 	bl	80177a4 <iprintf>
 800e558:	f06f 0305 	mvn.w	r3, #5
 800e55c:	e05c      	b.n	800e618 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800e55e:	88fb      	ldrh	r3, [r7, #6]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d109      	bne.n	800e578 <tcp_bind+0x6c>
    port = tcp_new_port();
 800e564:	f000 f914 	bl	800e790 <tcp_new_port>
 800e568:	4603      	mov	r3, r0
 800e56a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e56c:	88fb      	ldrh	r3, [r7, #6]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d135      	bne.n	800e5de <tcp_bind+0xd2>
      return ERR_BUF;
 800e572:	f06f 0301 	mvn.w	r3, #1
 800e576:	e04f      	b.n	800e618 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800e578:	2300      	movs	r3, #0
 800e57a:	61fb      	str	r3, [r7, #28]
 800e57c:	e02b      	b.n	800e5d6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e57e:	4a2d      	ldr	r2, [pc, #180]	; (800e634 <tcp_bind+0x128>)
 800e580:	69fb      	ldr	r3, [r7, #28]
 800e582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	61bb      	str	r3, [r7, #24]
 800e58a:	e01e      	b.n	800e5ca <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800e58c:	69bb      	ldr	r3, [r7, #24]
 800e58e:	8adb      	ldrh	r3, [r3, #22]
 800e590:	88fa      	ldrh	r2, [r7, #6]
 800e592:	429a      	cmp	r2, r3
 800e594:	d116      	bne.n	800e5c4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e596:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d010      	beq.n	800e5be <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e59c:	69bb      	ldr	r3, [r7, #24]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d00c      	beq.n	800e5be <tcp_bind+0xb2>
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d009      	beq.n	800e5be <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d005      	beq.n	800e5be <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e5b2:	69bb      	ldr	r3, [r7, #24]
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d102      	bne.n	800e5c4 <tcp_bind+0xb8>
              return ERR_USE;
 800e5be:	f06f 0307 	mvn.w	r3, #7
 800e5c2:	e029      	b.n	800e618 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e5c4:	69bb      	ldr	r3, [r7, #24]
 800e5c6:	68db      	ldr	r3, [r3, #12]
 800e5c8:	61bb      	str	r3, [r7, #24]
 800e5ca:	69bb      	ldr	r3, [r7, #24]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d1dd      	bne.n	800e58c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800e5d0:	69fb      	ldr	r3, [r7, #28]
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	61fb      	str	r3, [r7, #28]
 800e5d6:	69fa      	ldr	r2, [r7, #28]
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	dbcf      	blt.n	800e57e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d00c      	beq.n	800e5fe <tcp_bind+0xf2>
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d008      	beq.n	800e5fe <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d002      	beq.n	800e5f8 <tcp_bind+0xec>
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	e000      	b.n	800e5fa <tcp_bind+0xee>
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	68fa      	ldr	r2, [r7, #12]
 800e5fc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	88fa      	ldrh	r2, [r7, #6]
 800e602:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e604:	4b0c      	ldr	r3, [pc, #48]	; (800e638 <tcp_bind+0x12c>)
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	60da      	str	r2, [r3, #12]
 800e60c:	4a0a      	ldr	r2, [pc, #40]	; (800e638 <tcp_bind+0x12c>)
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	6013      	str	r3, [r2, #0]
 800e612:	f005 fbd1 	bl	8013db8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800e616:	2300      	movs	r3, #0
}
 800e618:	4618      	mov	r0, r3
 800e61a:	3720      	adds	r7, #32
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}
 800e620:	0801bc74 	.word	0x0801bc74
 800e624:	08019c2c 	.word	0x08019c2c
 800e628:	08019dc0 	.word	0x08019dc0
 800e62c:	08019c70 	.word	0x08019c70
 800e630:	08019dd8 	.word	0x08019dd8
 800e634:	0801bc4c 	.word	0x0801bc4c
 800e638:	2000d69c 	.word	0x2000d69c

0800e63c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b084      	sub	sp, #16
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d106      	bne.n	800e658 <tcp_update_rcv_ann_wnd+0x1c>
 800e64a:	4b25      	ldr	r3, [pc, #148]	; (800e6e0 <tcp_update_rcv_ann_wnd+0xa4>)
 800e64c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e650:	4924      	ldr	r1, [pc, #144]	; (800e6e4 <tcp_update_rcv_ann_wnd+0xa8>)
 800e652:	4825      	ldr	r0, [pc, #148]	; (800e6e8 <tcp_update_rcv_ann_wnd+0xac>)
 800e654:	f009 f8a6 	bl	80177a4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e660:	4413      	add	r3, r2
 800e662:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e66c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e670:	bf28      	it	cs
 800e672:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e676:	b292      	uxth	r2, r2
 800e678:	4413      	add	r3, r2
 800e67a:	68fa      	ldr	r2, [r7, #12]
 800e67c:	1ad3      	subs	r3, r2, r3
 800e67e:	2b00      	cmp	r3, #0
 800e680:	db08      	blt.n	800e694 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e68e:	68fa      	ldr	r2, [r7, #12]
 800e690:	1ad3      	subs	r3, r2, r3
 800e692:	e020      	b.n	800e6d6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e69c:	1ad3      	subs	r3, r2, r3
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	dd03      	ble.n	800e6aa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e6a8:	e014      	b.n	800e6d4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6b2:	1ad3      	subs	r3, r2, r3
 800e6b4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6bc:	d306      	bcc.n	800e6cc <tcp_update_rcv_ann_wnd+0x90>
 800e6be:	4b08      	ldr	r3, [pc, #32]	; (800e6e0 <tcp_update_rcv_ann_wnd+0xa4>)
 800e6c0:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e6c4:	4909      	ldr	r1, [pc, #36]	; (800e6ec <tcp_update_rcv_ann_wnd+0xb0>)
 800e6c6:	4808      	ldr	r0, [pc, #32]	; (800e6e8 <tcp_update_rcv_ann_wnd+0xac>)
 800e6c8:	f009 f86c 	bl	80177a4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	b29a      	uxth	r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e6d4:	2300      	movs	r3, #0
  }
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3710      	adds	r7, #16
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	08019c2c 	.word	0x08019c2c
 800e6e4:	08019e88 	.word	0x08019e88
 800e6e8:	08019c70 	.word	0x08019c70
 800e6ec:	08019eac 	.word	0x08019eac

0800e6f0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d107      	bne.n	800e712 <tcp_recved+0x22>
 800e702:	4b1f      	ldr	r3, [pc, #124]	; (800e780 <tcp_recved+0x90>)
 800e704:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e708:	491e      	ldr	r1, [pc, #120]	; (800e784 <tcp_recved+0x94>)
 800e70a:	481f      	ldr	r0, [pc, #124]	; (800e788 <tcp_recved+0x98>)
 800e70c:	f009 f84a 	bl	80177a4 <iprintf>
 800e710:	e032      	b.n	800e778 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	7d1b      	ldrb	r3, [r3, #20]
 800e716:	2b01      	cmp	r3, #1
 800e718:	d106      	bne.n	800e728 <tcp_recved+0x38>
 800e71a:	4b19      	ldr	r3, [pc, #100]	; (800e780 <tcp_recved+0x90>)
 800e71c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e720:	491a      	ldr	r1, [pc, #104]	; (800e78c <tcp_recved+0x9c>)
 800e722:	4819      	ldr	r0, [pc, #100]	; (800e788 <tcp_recved+0x98>)
 800e724:	f009 f83e 	bl	80177a4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e72c:	887b      	ldrh	r3, [r7, #2]
 800e72e:	4413      	add	r3, r2
 800e730:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e732:	89fb      	ldrh	r3, [r7, #14]
 800e734:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e738:	d804      	bhi.n	800e744 <tcp_recved+0x54>
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e73e:	89fa      	ldrh	r2, [r7, #14]
 800e740:	429a      	cmp	r2, r3
 800e742:	d204      	bcs.n	800e74e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e74a:	851a      	strh	r2, [r3, #40]	; 0x28
 800e74c:	e002      	b.n	800e754 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	89fa      	ldrh	r2, [r7, #14]
 800e752:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f7ff ff71 	bl	800e63c <tcp_update_rcv_ann_wnd>
 800e75a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e762:	d309      	bcc.n	800e778 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	8b5b      	ldrh	r3, [r3, #26]
 800e768:	f043 0302 	orr.w	r3, r3, #2
 800e76c:	b29a      	uxth	r2, r3
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f004 fbaa 	bl	8012ecc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e778:	3710      	adds	r7, #16
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}
 800e77e:	bf00      	nop
 800e780:	08019c2c 	.word	0x08019c2c
 800e784:	08019ec8 	.word	0x08019ec8
 800e788:	08019c70 	.word	0x08019c70
 800e78c:	08019ee0 	.word	0x08019ee0

0800e790 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e790:	b480      	push	{r7}
 800e792:	b083      	sub	sp, #12
 800e794:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e796:	2300      	movs	r3, #0
 800e798:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e79a:	4b1e      	ldr	r3, [pc, #120]	; (800e814 <tcp_new_port+0x84>)
 800e79c:	881b      	ldrh	r3, [r3, #0]
 800e79e:	3301      	adds	r3, #1
 800e7a0:	b29a      	uxth	r2, r3
 800e7a2:	4b1c      	ldr	r3, [pc, #112]	; (800e814 <tcp_new_port+0x84>)
 800e7a4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e7a6:	4b1b      	ldr	r3, [pc, #108]	; (800e814 <tcp_new_port+0x84>)
 800e7a8:	881b      	ldrh	r3, [r3, #0]
 800e7aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d103      	bne.n	800e7ba <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e7b2:	4b18      	ldr	r3, [pc, #96]	; (800e814 <tcp_new_port+0x84>)
 800e7b4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e7b8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	71fb      	strb	r3, [r7, #7]
 800e7be:	e01e      	b.n	800e7fe <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e7c0:	79fb      	ldrb	r3, [r7, #7]
 800e7c2:	4a15      	ldr	r2, [pc, #84]	; (800e818 <tcp_new_port+0x88>)
 800e7c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	603b      	str	r3, [r7, #0]
 800e7cc:	e011      	b.n	800e7f2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	8ada      	ldrh	r2, [r3, #22]
 800e7d2:	4b10      	ldr	r3, [pc, #64]	; (800e814 <tcp_new_port+0x84>)
 800e7d4:	881b      	ldrh	r3, [r3, #0]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d108      	bne.n	800e7ec <tcp_new_port+0x5c>
        n++;
 800e7da:	88bb      	ldrh	r3, [r7, #4]
 800e7dc:	3301      	adds	r3, #1
 800e7de:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e7e0:	88bb      	ldrh	r3, [r7, #4]
 800e7e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e7e6:	d3d8      	bcc.n	800e79a <tcp_new_port+0xa>
          return 0;
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	e00d      	b.n	800e808 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	68db      	ldr	r3, [r3, #12]
 800e7f0:	603b      	str	r3, [r7, #0]
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d1ea      	bne.n	800e7ce <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e7f8:	79fb      	ldrb	r3, [r7, #7]
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	71fb      	strb	r3, [r7, #7]
 800e7fe:	79fb      	ldrb	r3, [r7, #7]
 800e800:	2b03      	cmp	r3, #3
 800e802:	d9dd      	bls.n	800e7c0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e804:	4b03      	ldr	r3, [pc, #12]	; (800e814 <tcp_new_port+0x84>)
 800e806:	881b      	ldrh	r3, [r3, #0]
}
 800e808:	4618      	mov	r0, r3
 800e80a:	370c      	adds	r7, #12
 800e80c:	46bd      	mov	sp, r7
 800e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e812:	4770      	bx	lr
 800e814:	20000014 	.word	0x20000014
 800e818:	0801bc4c 	.word	0x0801bc4c

0800e81c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e81c:	b5b0      	push	{r4, r5, r7, lr}
 800e81e:	b090      	sub	sp, #64	; 0x40
 800e820:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e822:	2300      	movs	r3, #0
 800e824:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e828:	4b94      	ldr	r3, [pc, #592]	; (800ea7c <tcp_slowtmr+0x260>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	3301      	adds	r3, #1
 800e82e:	4a93      	ldr	r2, [pc, #588]	; (800ea7c <tcp_slowtmr+0x260>)
 800e830:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e832:	4b93      	ldr	r3, [pc, #588]	; (800ea80 <tcp_slowtmr+0x264>)
 800e834:	781b      	ldrb	r3, [r3, #0]
 800e836:	3301      	adds	r3, #1
 800e838:	b2da      	uxtb	r2, r3
 800e83a:	4b91      	ldr	r3, [pc, #580]	; (800ea80 <tcp_slowtmr+0x264>)
 800e83c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e83e:	2300      	movs	r3, #0
 800e840:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e842:	4b90      	ldr	r3, [pc, #576]	; (800ea84 <tcp_slowtmr+0x268>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e848:	e29f      	b.n	800ed8a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84c:	7d1b      	ldrb	r3, [r3, #20]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d106      	bne.n	800e860 <tcp_slowtmr+0x44>
 800e852:	4b8d      	ldr	r3, [pc, #564]	; (800ea88 <tcp_slowtmr+0x26c>)
 800e854:	f240 42be 	movw	r2, #1214	; 0x4be
 800e858:	498c      	ldr	r1, [pc, #560]	; (800ea8c <tcp_slowtmr+0x270>)
 800e85a:	488d      	ldr	r0, [pc, #564]	; (800ea90 <tcp_slowtmr+0x274>)
 800e85c:	f008 ffa2 	bl	80177a4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e862:	7d1b      	ldrb	r3, [r3, #20]
 800e864:	2b01      	cmp	r3, #1
 800e866:	d106      	bne.n	800e876 <tcp_slowtmr+0x5a>
 800e868:	4b87      	ldr	r3, [pc, #540]	; (800ea88 <tcp_slowtmr+0x26c>)
 800e86a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e86e:	4989      	ldr	r1, [pc, #548]	; (800ea94 <tcp_slowtmr+0x278>)
 800e870:	4887      	ldr	r0, [pc, #540]	; (800ea90 <tcp_slowtmr+0x274>)
 800e872:	f008 ff97 	bl	80177a4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e878:	7d1b      	ldrb	r3, [r3, #20]
 800e87a:	2b0a      	cmp	r3, #10
 800e87c:	d106      	bne.n	800e88c <tcp_slowtmr+0x70>
 800e87e:	4b82      	ldr	r3, [pc, #520]	; (800ea88 <tcp_slowtmr+0x26c>)
 800e880:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e884:	4984      	ldr	r1, [pc, #528]	; (800ea98 <tcp_slowtmr+0x27c>)
 800e886:	4882      	ldr	r0, [pc, #520]	; (800ea90 <tcp_slowtmr+0x274>)
 800e888:	f008 ff8c 	bl	80177a4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88e:	7f9a      	ldrb	r2, [r3, #30]
 800e890:	4b7b      	ldr	r3, [pc, #492]	; (800ea80 <tcp_slowtmr+0x264>)
 800e892:	781b      	ldrb	r3, [r3, #0]
 800e894:	429a      	cmp	r2, r3
 800e896:	d105      	bne.n	800e8a4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89e:	68db      	ldr	r3, [r3, #12]
 800e8a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e8a2:	e272      	b.n	800ed8a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e8a4:	4b76      	ldr	r3, [pc, #472]	; (800ea80 <tcp_slowtmr+0x264>)
 800e8a6:	781a      	ldrb	r2, [r3, #0]
 800e8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8aa:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ba:	7d1b      	ldrb	r3, [r3, #20]
 800e8bc:	2b02      	cmp	r3, #2
 800e8be:	d10a      	bne.n	800e8d6 <tcp_slowtmr+0xba>
 800e8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e8c6:	2b05      	cmp	r3, #5
 800e8c8:	d905      	bls.n	800e8d6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e8ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8ce:	3301      	adds	r3, #1
 800e8d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8d4:	e11e      	b.n	800eb14 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e8dc:	2b0b      	cmp	r3, #11
 800e8de:	d905      	bls.n	800e8ec <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e8e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8ea:	e113      	b.n	800eb14 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d075      	beq.n	800e9e2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d006      	beq.n	800e90c <tcp_slowtmr+0xf0>
 800e8fe:	4b62      	ldr	r3, [pc, #392]	; (800ea88 <tcp_slowtmr+0x26c>)
 800e900:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e904:	4965      	ldr	r1, [pc, #404]	; (800ea9c <tcp_slowtmr+0x280>)
 800e906:	4862      	ldr	r0, [pc, #392]	; (800ea90 <tcp_slowtmr+0x274>)
 800e908:	f008 ff4c 	bl	80177a4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e90e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e910:	2b00      	cmp	r3, #0
 800e912:	d106      	bne.n	800e922 <tcp_slowtmr+0x106>
 800e914:	4b5c      	ldr	r3, [pc, #368]	; (800ea88 <tcp_slowtmr+0x26c>)
 800e916:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e91a:	4961      	ldr	r1, [pc, #388]	; (800eaa0 <tcp_slowtmr+0x284>)
 800e91c:	485c      	ldr	r0, [pc, #368]	; (800ea90 <tcp_slowtmr+0x274>)
 800e91e:	f008 ff41 	bl	80177a4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e924:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e928:	2b0b      	cmp	r3, #11
 800e92a:	d905      	bls.n	800e938 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e92c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e930:	3301      	adds	r3, #1
 800e932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e936:	e0ed      	b.n	800eb14 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e93a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e93e:	3b01      	subs	r3, #1
 800e940:	4a58      	ldr	r2, [pc, #352]	; (800eaa4 <tcp_slowtmr+0x288>)
 800e942:	5cd3      	ldrb	r3, [r2, r3]
 800e944:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e948:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e94c:	7c7a      	ldrb	r2, [r7, #17]
 800e94e:	429a      	cmp	r2, r3
 800e950:	d907      	bls.n	800e962 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e954:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e958:	3301      	adds	r3, #1
 800e95a:	b2da      	uxtb	r2, r3
 800e95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e964:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e968:	7c7a      	ldrb	r2, [r7, #17]
 800e96a:	429a      	cmp	r2, r3
 800e96c:	f200 80d2 	bhi.w	800eb14 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e970:	2301      	movs	r3, #1
 800e972:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e976:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d108      	bne.n	800e990 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e97e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e980:	f005 f94c 	bl	8013c1c <tcp_zero_window_probe>
 800e984:	4603      	mov	r3, r0
 800e986:	2b00      	cmp	r3, #0
 800e988:	d014      	beq.n	800e9b4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e98a:	2300      	movs	r3, #0
 800e98c:	623b      	str	r3, [r7, #32]
 800e98e:	e011      	b.n	800e9b4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e992:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e996:	4619      	mov	r1, r3
 800e998:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e99a:	f004 f811 	bl	80129c0 <tcp_split_unsent_seg>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d107      	bne.n	800e9b4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e9a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e9a6:	f004 fa91 	bl	8012ecc <tcp_output>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d101      	bne.n	800e9b4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e9b4:	6a3b      	ldr	r3, [r7, #32]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	f000 80ac 	beq.w	800eb14 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9be:	2200      	movs	r2, #0
 800e9c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e9ca:	2b06      	cmp	r3, #6
 800e9cc:	f200 80a2 	bhi.w	800eb14 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	b2da      	uxtb	r2, r3
 800e9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9dc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e9e0:	e098      	b.n	800eb14 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	db0f      	blt.n	800ea0c <tcp_slowtmr+0x1f0>
 800e9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e9f2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d008      	beq.n	800ea0c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ea00:	b29b      	uxth	r3, r3
 800ea02:	3301      	adds	r3, #1
 800ea04:	b29b      	uxth	r3, r3
 800ea06:	b21a      	sxth	r2, r3
 800ea08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800ea0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ea12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea14:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	db7b      	blt.n	800eb14 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ea1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea1e:	f004 fd47 	bl	80134b0 <tcp_rexmit_rto_prepare>
 800ea22:	4603      	mov	r3, r0
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d007      	beq.n	800ea38 <tcp_slowtmr+0x21c>
 800ea28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d171      	bne.n	800eb14 <tcp_slowtmr+0x2f8>
 800ea30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d06d      	beq.n	800eb14 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ea38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea3a:	7d1b      	ldrb	r3, [r3, #20]
 800ea3c:	2b02      	cmp	r3, #2
 800ea3e:	d03a      	beq.n	800eab6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ea40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ea46:	2b0c      	cmp	r3, #12
 800ea48:	bf28      	it	cs
 800ea4a:	230c      	movcs	r3, #12
 800ea4c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ea4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ea54:	10db      	asrs	r3, r3, #3
 800ea56:	b21b      	sxth	r3, r3
 800ea58:	461a      	mov	r2, r3
 800ea5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ea60:	4413      	add	r3, r2
 800ea62:	7efa      	ldrb	r2, [r7, #27]
 800ea64:	4910      	ldr	r1, [pc, #64]	; (800eaa8 <tcp_slowtmr+0x28c>)
 800ea66:	5c8a      	ldrb	r2, [r1, r2]
 800ea68:	4093      	lsls	r3, r2
 800ea6a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ea72:	4293      	cmp	r3, r2
 800ea74:	dc1a      	bgt.n	800eaac <tcp_slowtmr+0x290>
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	b21a      	sxth	r2, r3
 800ea7a:	e019      	b.n	800eab0 <tcp_slowtmr+0x294>
 800ea7c:	2000d694 	.word	0x2000d694
 800ea80:	20006846 	.word	0x20006846
 800ea84:	2000d690 	.word	0x2000d690
 800ea88:	08019c2c 	.word	0x08019c2c
 800ea8c:	08019f70 	.word	0x08019f70
 800ea90:	08019c70 	.word	0x08019c70
 800ea94:	08019f9c 	.word	0x08019f9c
 800ea98:	08019fc8 	.word	0x08019fc8
 800ea9c:	08019ff8 	.word	0x08019ff8
 800eaa0:	0801a02c 	.word	0x0801a02c
 800eaa4:	0801bc44 	.word	0x0801bc44
 800eaa8:	0801bc34 	.word	0x0801bc34
 800eaac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800eab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800eab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab8:	2200      	movs	r2, #0
 800eaba:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800eabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eabe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eac8:	4293      	cmp	r3, r2
 800eaca:	bf28      	it	cs
 800eacc:	4613      	movcs	r3, r2
 800eace:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ead0:	8a7b      	ldrh	r3, [r7, #18]
 800ead2:	085b      	lsrs	r3, r3, #1
 800ead4:	b29a      	uxth	r2, r3
 800ead6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800eadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eade:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800eae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eae6:	005b      	lsls	r3, r3, #1
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d206      	bcs.n	800eafc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800eaee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eaf2:	005b      	lsls	r3, r3, #1
 800eaf4:	b29a      	uxth	r2, r3
 800eaf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800eafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eafe:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800eb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800eb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb08:	2200      	movs	r2, #0
 800eb0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800eb0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb10:	f004 fd3e 	bl	8013590 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800eb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb16:	7d1b      	ldrb	r3, [r3, #20]
 800eb18:	2b06      	cmp	r3, #6
 800eb1a:	d111      	bne.n	800eb40 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800eb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb1e:	8b5b      	ldrh	r3, [r3, #26]
 800eb20:	f003 0310 	and.w	r3, r3, #16
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d00b      	beq.n	800eb40 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb28:	4b9d      	ldr	r3, [pc, #628]	; (800eda0 <tcp_slowtmr+0x584>)
 800eb2a:	681a      	ldr	r2, [r3, #0]
 800eb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb2e:	6a1b      	ldr	r3, [r3, #32]
 800eb30:	1ad3      	subs	r3, r2, r3
 800eb32:	2b28      	cmp	r3, #40	; 0x28
 800eb34:	d904      	bls.n	800eb40 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800eb36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb3a:	3301      	adds	r3, #1
 800eb3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800eb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb42:	7a5b      	ldrb	r3, [r3, #9]
 800eb44:	f003 0308 	and.w	r3, r3, #8
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d04c      	beq.n	800ebe6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800eb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb4e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800eb50:	2b04      	cmp	r3, #4
 800eb52:	d003      	beq.n	800eb5c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800eb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb56:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800eb58:	2b07      	cmp	r3, #7
 800eb5a:	d144      	bne.n	800ebe6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb5c:	4b90      	ldr	r3, [pc, #576]	; (800eda0 <tcp_slowtmr+0x584>)
 800eb5e:	681a      	ldr	r2, [r3, #0]
 800eb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb62:	6a1b      	ldr	r3, [r3, #32]
 800eb64:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800eb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800eb6c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800eb70:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800eb74:	498b      	ldr	r1, [pc, #556]	; (800eda4 <tcp_slowtmr+0x588>)
 800eb76:	fba1 1303 	umull	r1, r3, r1, r3
 800eb7a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d90a      	bls.n	800eb96 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800eb80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb84:	3301      	adds	r3, #1
 800eb86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800eb8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb8e:	3301      	adds	r3, #1
 800eb90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eb94:	e027      	b.n	800ebe6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb96:	4b82      	ldr	r3, [pc, #520]	; (800eda0 <tcp_slowtmr+0x584>)
 800eb98:	681a      	ldr	r2, [r3, #0]
 800eb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb9c:	6a1b      	ldr	r3, [r3, #32]
 800eb9e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800eba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800eba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ebac:	4618      	mov	r0, r3
 800ebae:	4b7e      	ldr	r3, [pc, #504]	; (800eda8 <tcp_slowtmr+0x58c>)
 800ebb0:	fb03 f300 	mul.w	r3, r3, r0
 800ebb4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ebb6:	497b      	ldr	r1, [pc, #492]	; (800eda4 <tcp_slowtmr+0x588>)
 800ebb8:	fba1 1303 	umull	r1, r3, r1, r3
 800ebbc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d911      	bls.n	800ebe6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800ebc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebc4:	f004 ffea 	bl	8013b9c <tcp_keepalive>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800ebce:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d107      	bne.n	800ebe6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800ebd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ebdc:	3301      	adds	r3, #1
 800ebde:	b2da      	uxtb	r2, r3
 800ebe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ebe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d011      	beq.n	800ec12 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ebee:	4b6c      	ldr	r3, [pc, #432]	; (800eda0 <tcp_slowtmr+0x584>)
 800ebf0:	681a      	ldr	r2, [r3, #0]
 800ebf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf4:	6a1b      	ldr	r3, [r3, #32]
 800ebf6:	1ad2      	subs	r2, r2, r3
 800ebf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebfa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ebfe:	4619      	mov	r1, r3
 800ec00:	460b      	mov	r3, r1
 800ec02:	005b      	lsls	r3, r3, #1
 800ec04:	440b      	add	r3, r1
 800ec06:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d302      	bcc.n	800ec12 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ec0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec0e:	f000 fea9 	bl	800f964 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ec12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec14:	7d1b      	ldrb	r3, [r3, #20]
 800ec16:	2b03      	cmp	r3, #3
 800ec18:	d10b      	bne.n	800ec32 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ec1a:	4b61      	ldr	r3, [pc, #388]	; (800eda0 <tcp_slowtmr+0x584>)
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec20:	6a1b      	ldr	r3, [r3, #32]
 800ec22:	1ad3      	subs	r3, r2, r3
 800ec24:	2b28      	cmp	r3, #40	; 0x28
 800ec26:	d904      	bls.n	800ec32 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ec28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec2c:	3301      	adds	r3, #1
 800ec2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ec32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec34:	7d1b      	ldrb	r3, [r3, #20]
 800ec36:	2b09      	cmp	r3, #9
 800ec38:	d10b      	bne.n	800ec52 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ec3a:	4b59      	ldr	r3, [pc, #356]	; (800eda0 <tcp_slowtmr+0x584>)
 800ec3c:	681a      	ldr	r2, [r3, #0]
 800ec3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec40:	6a1b      	ldr	r3, [r3, #32]
 800ec42:	1ad3      	subs	r3, r2, r3
 800ec44:	2bf0      	cmp	r3, #240	; 0xf0
 800ec46:	d904      	bls.n	800ec52 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800ec48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec4c:	3301      	adds	r3, #1
 800ec4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ec52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d060      	beq.n	800ed1c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ec5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec60:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ec62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec64:	f000 fcca 	bl	800f5fc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ec68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d010      	beq.n	800ec90 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ec6e:	4b4f      	ldr	r3, [pc, #316]	; (800edac <tcp_slowtmr+0x590>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d106      	bne.n	800ec86 <tcp_slowtmr+0x46a>
 800ec78:	4b4d      	ldr	r3, [pc, #308]	; (800edb0 <tcp_slowtmr+0x594>)
 800ec7a:	f240 526d 	movw	r2, #1389	; 0x56d
 800ec7e:	494d      	ldr	r1, [pc, #308]	; (800edb4 <tcp_slowtmr+0x598>)
 800ec80:	484d      	ldr	r0, [pc, #308]	; (800edb8 <tcp_slowtmr+0x59c>)
 800ec82:	f008 fd8f 	bl	80177a4 <iprintf>
        prev->next = pcb->next;
 800ec86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec88:	68da      	ldr	r2, [r3, #12]
 800ec8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec8c:	60da      	str	r2, [r3, #12]
 800ec8e:	e00f      	b.n	800ecb0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ec90:	4b46      	ldr	r3, [pc, #280]	; (800edac <tcp_slowtmr+0x590>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d006      	beq.n	800eca8 <tcp_slowtmr+0x48c>
 800ec9a:	4b45      	ldr	r3, [pc, #276]	; (800edb0 <tcp_slowtmr+0x594>)
 800ec9c:	f240 5271 	movw	r2, #1393	; 0x571
 800eca0:	4946      	ldr	r1, [pc, #280]	; (800edbc <tcp_slowtmr+0x5a0>)
 800eca2:	4845      	ldr	r0, [pc, #276]	; (800edb8 <tcp_slowtmr+0x59c>)
 800eca4:	f008 fd7e 	bl	80177a4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800eca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecaa:	68db      	ldr	r3, [r3, #12]
 800ecac:	4a3f      	ldr	r2, [pc, #252]	; (800edac <tcp_slowtmr+0x590>)
 800ecae:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ecb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d013      	beq.n	800ece0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ecb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ecbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecbe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ecc0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ecc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc4:	3304      	adds	r3, #4
 800ecc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecc8:	8ad2      	ldrh	r2, [r2, #22]
 800ecca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eccc:	8b09      	ldrh	r1, [r1, #24]
 800ecce:	9102      	str	r1, [sp, #8]
 800ecd0:	9201      	str	r2, [sp, #4]
 800ecd2:	9300      	str	r3, [sp, #0]
 800ecd4:	462b      	mov	r3, r5
 800ecd6:	4622      	mov	r2, r4
 800ecd8:	4601      	mov	r1, r0
 800ecda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ecdc:	f004 feaa 	bl	8013a34 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ece0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece2:	691b      	ldr	r3, [r3, #16]
 800ece4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ece6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece8:	7d1b      	ldrb	r3, [r3, #20]
 800ecea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ecec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ecf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf2:	68db      	ldr	r3, [r3, #12]
 800ecf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ecf6:	6838      	ldr	r0, [r7, #0]
 800ecf8:	f7ff f8b8 	bl	800de6c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ecfc:	4b30      	ldr	r3, [pc, #192]	; (800edc0 <tcp_slowtmr+0x5a4>)
 800ecfe:	2200      	movs	r2, #0
 800ed00:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d004      	beq.n	800ed12 <tcp_slowtmr+0x4f6>
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f06f 010c 	mvn.w	r1, #12
 800ed0e:	68b8      	ldr	r0, [r7, #8]
 800ed10:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ed12:	4b2b      	ldr	r3, [pc, #172]	; (800edc0 <tcp_slowtmr+0x5a4>)
 800ed14:	781b      	ldrb	r3, [r3, #0]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d037      	beq.n	800ed8a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800ed1a:	e590      	b.n	800e83e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ed1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed1e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ed20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed22:	68db      	ldr	r3, [r3, #12]
 800ed24:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ed26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed28:	7f1b      	ldrb	r3, [r3, #28]
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	b2da      	uxtb	r2, r3
 800ed2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed30:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ed32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed34:	7f1a      	ldrb	r2, [r3, #28]
 800ed36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed38:	7f5b      	ldrb	r3, [r3, #29]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d325      	bcc.n	800ed8a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ed3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed40:	2200      	movs	r2, #0
 800ed42:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ed44:	4b1e      	ldr	r3, [pc, #120]	; (800edc0 <tcp_slowtmr+0x5a4>)
 800ed46:	2200      	movs	r2, #0
 800ed48:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ed4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d00b      	beq.n	800ed6c <tcp_slowtmr+0x550>
 800ed54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed5c:	6912      	ldr	r2, [r2, #16]
 800ed5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed60:	4610      	mov	r0, r2
 800ed62:	4798      	blx	r3
 800ed64:	4603      	mov	r3, r0
 800ed66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ed6a:	e002      	b.n	800ed72 <tcp_slowtmr+0x556>
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ed72:	4b13      	ldr	r3, [pc, #76]	; (800edc0 <tcp_slowtmr+0x5a4>)
 800ed74:	781b      	ldrb	r3, [r3, #0]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d000      	beq.n	800ed7c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800ed7a:	e560      	b.n	800e83e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ed7c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d102      	bne.n	800ed8a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800ed84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed86:	f004 f8a1 	bl	8012ecc <tcp_output>
  while (pcb != NULL) {
 800ed8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	f47f ad5c 	bne.w	800e84a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ed92:	2300      	movs	r3, #0
 800ed94:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ed96:	4b0b      	ldr	r3, [pc, #44]	; (800edc4 <tcp_slowtmr+0x5a8>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ed9c:	e067      	b.n	800ee6e <tcp_slowtmr+0x652>
 800ed9e:	bf00      	nop
 800eda0:	2000d694 	.word	0x2000d694
 800eda4:	10624dd3 	.word	0x10624dd3
 800eda8:	000124f8 	.word	0x000124f8
 800edac:	2000d690 	.word	0x2000d690
 800edb0:	08019c2c 	.word	0x08019c2c
 800edb4:	0801a064 	.word	0x0801a064
 800edb8:	08019c70 	.word	0x08019c70
 800edbc:	0801a090 	.word	0x0801a090
 800edc0:	2000d68c 	.word	0x2000d68c
 800edc4:	2000d6a0 	.word	0x2000d6a0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800edc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edca:	7d1b      	ldrb	r3, [r3, #20]
 800edcc:	2b0a      	cmp	r3, #10
 800edce:	d006      	beq.n	800edde <tcp_slowtmr+0x5c2>
 800edd0:	4b2b      	ldr	r3, [pc, #172]	; (800ee80 <tcp_slowtmr+0x664>)
 800edd2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800edd6:	492b      	ldr	r1, [pc, #172]	; (800ee84 <tcp_slowtmr+0x668>)
 800edd8:	482b      	ldr	r0, [pc, #172]	; (800ee88 <tcp_slowtmr+0x66c>)
 800edda:	f008 fce3 	bl	80177a4 <iprintf>
    pcb_remove = 0;
 800edde:	2300      	movs	r3, #0
 800ede0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ede4:	4b29      	ldr	r3, [pc, #164]	; (800ee8c <tcp_slowtmr+0x670>)
 800ede6:	681a      	ldr	r2, [r3, #0]
 800ede8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edea:	6a1b      	ldr	r3, [r3, #32]
 800edec:	1ad3      	subs	r3, r2, r3
 800edee:	2bf0      	cmp	r3, #240	; 0xf0
 800edf0:	d904      	bls.n	800edfc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800edf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edf6:	3301      	adds	r3, #1
 800edf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800edfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d02f      	beq.n	800ee64 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ee04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee06:	f000 fbf9 	bl	800f5fc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ee0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d010      	beq.n	800ee32 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ee10:	4b1f      	ldr	r3, [pc, #124]	; (800ee90 <tcp_slowtmr+0x674>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee16:	429a      	cmp	r2, r3
 800ee18:	d106      	bne.n	800ee28 <tcp_slowtmr+0x60c>
 800ee1a:	4b19      	ldr	r3, [pc, #100]	; (800ee80 <tcp_slowtmr+0x664>)
 800ee1c:	f240 52af 	movw	r2, #1455	; 0x5af
 800ee20:	491c      	ldr	r1, [pc, #112]	; (800ee94 <tcp_slowtmr+0x678>)
 800ee22:	4819      	ldr	r0, [pc, #100]	; (800ee88 <tcp_slowtmr+0x66c>)
 800ee24:	f008 fcbe 	bl	80177a4 <iprintf>
        prev->next = pcb->next;
 800ee28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee2a:	68da      	ldr	r2, [r3, #12]
 800ee2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2e:	60da      	str	r2, [r3, #12]
 800ee30:	e00f      	b.n	800ee52 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ee32:	4b17      	ldr	r3, [pc, #92]	; (800ee90 <tcp_slowtmr+0x674>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d006      	beq.n	800ee4a <tcp_slowtmr+0x62e>
 800ee3c:	4b10      	ldr	r3, [pc, #64]	; (800ee80 <tcp_slowtmr+0x664>)
 800ee3e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ee42:	4915      	ldr	r1, [pc, #84]	; (800ee98 <tcp_slowtmr+0x67c>)
 800ee44:	4810      	ldr	r0, [pc, #64]	; (800ee88 <tcp_slowtmr+0x66c>)
 800ee46:	f008 fcad 	bl	80177a4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ee4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee4c:	68db      	ldr	r3, [r3, #12]
 800ee4e:	4a10      	ldr	r2, [pc, #64]	; (800ee90 <tcp_slowtmr+0x674>)
 800ee50:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ee52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee54:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ee56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee58:	68db      	ldr	r3, [r3, #12]
 800ee5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ee5c:	69f8      	ldr	r0, [r7, #28]
 800ee5e:	f7ff f805 	bl	800de6c <tcp_free>
 800ee62:	e004      	b.n	800ee6e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ee64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee66:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ee68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee6a:	68db      	ldr	r3, [r3, #12]
 800ee6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ee6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d1a9      	bne.n	800edc8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ee74:	bf00      	nop
 800ee76:	bf00      	nop
 800ee78:	3730      	adds	r7, #48	; 0x30
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bdb0      	pop	{r4, r5, r7, pc}
 800ee7e:	bf00      	nop
 800ee80:	08019c2c 	.word	0x08019c2c
 800ee84:	0801a0bc 	.word	0x0801a0bc
 800ee88:	08019c70 	.word	0x08019c70
 800ee8c:	2000d694 	.word	0x2000d694
 800ee90:	2000d6a0 	.word	0x2000d6a0
 800ee94:	0801a0ec 	.word	0x0801a0ec
 800ee98:	0801a114 	.word	0x0801a114

0800ee9c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800eea2:	4b2d      	ldr	r3, [pc, #180]	; (800ef58 <tcp_fasttmr+0xbc>)
 800eea4:	781b      	ldrb	r3, [r3, #0]
 800eea6:	3301      	adds	r3, #1
 800eea8:	b2da      	uxtb	r2, r3
 800eeaa:	4b2b      	ldr	r3, [pc, #172]	; (800ef58 <tcp_fasttmr+0xbc>)
 800eeac:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800eeae:	4b2b      	ldr	r3, [pc, #172]	; (800ef5c <tcp_fasttmr+0xc0>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eeb4:	e048      	b.n	800ef48 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	7f9a      	ldrb	r2, [r3, #30]
 800eeba:	4b27      	ldr	r3, [pc, #156]	; (800ef58 <tcp_fasttmr+0xbc>)
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	429a      	cmp	r2, r3
 800eec0:	d03f      	beq.n	800ef42 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800eec2:	4b25      	ldr	r3, [pc, #148]	; (800ef58 <tcp_fasttmr+0xbc>)
 800eec4:	781a      	ldrb	r2, [r3, #0]
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	8b5b      	ldrh	r3, [r3, #26]
 800eece:	f003 0301 	and.w	r3, r3, #1
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d010      	beq.n	800eef8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	8b5b      	ldrh	r3, [r3, #26]
 800eeda:	f043 0302 	orr.w	r3, r3, #2
 800eede:	b29a      	uxth	r2, r3
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f003 fff1 	bl	8012ecc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	8b5b      	ldrh	r3, [r3, #26]
 800eeee:	f023 0303 	bic.w	r3, r3, #3
 800eef2:	b29a      	uxth	r2, r3
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	8b5b      	ldrh	r3, [r3, #26]
 800eefc:	f003 0308 	and.w	r3, r3, #8
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d009      	beq.n	800ef18 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	8b5b      	ldrh	r3, [r3, #26]
 800ef08:	f023 0308 	bic.w	r3, r3, #8
 800ef0c:	b29a      	uxth	r2, r3
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f7ff f93e 	bl	800e194 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	68db      	ldr	r3, [r3, #12]
 800ef1c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d00a      	beq.n	800ef3c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ef26:	4b0e      	ldr	r3, [pc, #56]	; (800ef60 <tcp_fasttmr+0xc4>)
 800ef28:	2200      	movs	r2, #0
 800ef2a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f000 f819 	bl	800ef64 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ef32:	4b0b      	ldr	r3, [pc, #44]	; (800ef60 <tcp_fasttmr+0xc4>)
 800ef34:	781b      	ldrb	r3, [r3, #0]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d000      	beq.n	800ef3c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ef3a:	e7b8      	b.n	800eeae <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	607b      	str	r3, [r7, #4]
 800ef40:	e002      	b.n	800ef48 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	68db      	ldr	r3, [r3, #12]
 800ef46:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d1b3      	bne.n	800eeb6 <tcp_fasttmr+0x1a>
    }
  }
}
 800ef4e:	bf00      	nop
 800ef50:	bf00      	nop
 800ef52:	3708      	adds	r7, #8
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}
 800ef58:	20006846 	.word	0x20006846
 800ef5c:	2000d690 	.word	0x2000d690
 800ef60:	2000d68c 	.word	0x2000d68c

0800ef64 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ef64:	b590      	push	{r4, r7, lr}
 800ef66:	b085      	sub	sp, #20
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d109      	bne.n	800ef86 <tcp_process_refused_data+0x22>
 800ef72:	4b37      	ldr	r3, [pc, #220]	; (800f050 <tcp_process_refused_data+0xec>)
 800ef74:	f240 6209 	movw	r2, #1545	; 0x609
 800ef78:	4936      	ldr	r1, [pc, #216]	; (800f054 <tcp_process_refused_data+0xf0>)
 800ef7a:	4837      	ldr	r0, [pc, #220]	; (800f058 <tcp_process_refused_data+0xf4>)
 800ef7c:	f008 fc12 	bl	80177a4 <iprintf>
 800ef80:	f06f 030f 	mvn.w	r3, #15
 800ef84:	e060      	b.n	800f048 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef8a:	7b5b      	ldrb	r3, [r3, #13]
 800ef8c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef92:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2200      	movs	r2, #0
 800ef98:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d00b      	beq.n	800efbc <tcp_process_refused_data+0x58>
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6918      	ldr	r0, [r3, #16]
 800efae:	2300      	movs	r3, #0
 800efb0:	68ba      	ldr	r2, [r7, #8]
 800efb2:	6879      	ldr	r1, [r7, #4]
 800efb4:	47a0      	blx	r4
 800efb6:	4603      	mov	r3, r0
 800efb8:	73fb      	strb	r3, [r7, #15]
 800efba:	e007      	b.n	800efcc <tcp_process_refused_data+0x68>
 800efbc:	2300      	movs	r3, #0
 800efbe:	68ba      	ldr	r2, [r7, #8]
 800efc0:	6879      	ldr	r1, [r7, #4]
 800efc2:	2000      	movs	r0, #0
 800efc4:	f000 f8a4 	bl	800f110 <tcp_recv_null>
 800efc8:	4603      	mov	r3, r0
 800efca:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800efcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d12a      	bne.n	800f02a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800efd4:	7bbb      	ldrb	r3, [r7, #14]
 800efd6:	f003 0320 	and.w	r3, r3, #32
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d033      	beq.n	800f046 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800efe2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800efe6:	d005      	beq.n	800eff4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800efec:	3301      	adds	r3, #1
 800efee:	b29a      	uxth	r2, r3
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800effa:	2b00      	cmp	r3, #0
 800effc:	d00b      	beq.n	800f016 <tcp_process_refused_data+0xb2>
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	6918      	ldr	r0, [r3, #16]
 800f008:	2300      	movs	r3, #0
 800f00a:	2200      	movs	r2, #0
 800f00c:	6879      	ldr	r1, [r7, #4]
 800f00e:	47a0      	blx	r4
 800f010:	4603      	mov	r3, r0
 800f012:	73fb      	strb	r3, [r7, #15]
 800f014:	e001      	b.n	800f01a <tcp_process_refused_data+0xb6>
 800f016:	2300      	movs	r3, #0
 800f018:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f01a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f01e:	f113 0f0d 	cmn.w	r3, #13
 800f022:	d110      	bne.n	800f046 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f024:	f06f 030c 	mvn.w	r3, #12
 800f028:	e00e      	b.n	800f048 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f02a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f02e:	f113 0f0d 	cmn.w	r3, #13
 800f032:	d102      	bne.n	800f03a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f034:	f06f 030c 	mvn.w	r3, #12
 800f038:	e006      	b.n	800f048 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	68ba      	ldr	r2, [r7, #8]
 800f03e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f040:	f06f 0304 	mvn.w	r3, #4
 800f044:	e000      	b.n	800f048 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f046:	2300      	movs	r3, #0
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3714      	adds	r7, #20
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd90      	pop	{r4, r7, pc}
 800f050:	08019c2c 	.word	0x08019c2c
 800f054:	0801a13c 	.word	0x0801a13c
 800f058:	08019c70 	.word	0x08019c70

0800f05c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b084      	sub	sp, #16
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f064:	e007      	b.n	800f076 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f000 f80a 	bl	800f086 <tcp_seg_free>
    seg = next;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d1f4      	bne.n	800f066 <tcp_segs_free+0xa>
  }
}
 800f07c:	bf00      	nop
 800f07e:	bf00      	nop
 800f080:	3710      	adds	r7, #16
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}

0800f086 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f086:	b580      	push	{r7, lr}
 800f088:	b082      	sub	sp, #8
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d00c      	beq.n	800f0ae <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	685b      	ldr	r3, [r3, #4]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d004      	beq.n	800f0a6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7fe fc27 	bl	800d8f4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f0a6:	6879      	ldr	r1, [r7, #4]
 800f0a8:	2003      	movs	r0, #3
 800f0aa:	f7fd fde3 	bl	800cc74 <memp_free>
  }
}
 800f0ae:	bf00      	nop
 800f0b0:	3708      	adds	r7, #8
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
	...

0800f0b8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b084      	sub	sp, #16
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d106      	bne.n	800f0d4 <tcp_seg_copy+0x1c>
 800f0c6:	4b0f      	ldr	r3, [pc, #60]	; (800f104 <tcp_seg_copy+0x4c>)
 800f0c8:	f240 6282 	movw	r2, #1666	; 0x682
 800f0cc:	490e      	ldr	r1, [pc, #56]	; (800f108 <tcp_seg_copy+0x50>)
 800f0ce:	480f      	ldr	r0, [pc, #60]	; (800f10c <tcp_seg_copy+0x54>)
 800f0d0:	f008 fb68 	bl	80177a4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f0d4:	2003      	movs	r0, #3
 800f0d6:	f7fd fd7b 	bl	800cbd0 <memp_malloc>
 800f0da:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d101      	bne.n	800f0e6 <tcp_seg_copy+0x2e>
    return NULL;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	e00a      	b.n	800f0fc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f0e6:	2210      	movs	r2, #16
 800f0e8:	6879      	ldr	r1, [r7, #4]
 800f0ea:	68f8      	ldr	r0, [r7, #12]
 800f0ec:	f008 fa9a 	bl	8017624 <memcpy>
  pbuf_ref(cseg->p);
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7fe fca3 	bl	800da40 <pbuf_ref>
  return cseg;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3710      	adds	r7, #16
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}
 800f104:	08019c2c 	.word	0x08019c2c
 800f108:	0801a180 	.word	0x0801a180
 800f10c:	08019c70 	.word	0x08019c70

0800f110 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b084      	sub	sp, #16
 800f114:	af00      	add	r7, sp, #0
 800f116:	60f8      	str	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	607a      	str	r2, [r7, #4]
 800f11c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d109      	bne.n	800f138 <tcp_recv_null+0x28>
 800f124:	4b12      	ldr	r3, [pc, #72]	; (800f170 <tcp_recv_null+0x60>)
 800f126:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f12a:	4912      	ldr	r1, [pc, #72]	; (800f174 <tcp_recv_null+0x64>)
 800f12c:	4812      	ldr	r0, [pc, #72]	; (800f178 <tcp_recv_null+0x68>)
 800f12e:	f008 fb39 	bl	80177a4 <iprintf>
 800f132:	f06f 030f 	mvn.w	r3, #15
 800f136:	e016      	b.n	800f166 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d009      	beq.n	800f152 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	891b      	ldrh	r3, [r3, #8]
 800f142:	4619      	mov	r1, r3
 800f144:	68b8      	ldr	r0, [r7, #8]
 800f146:	f7ff fad3 	bl	800e6f0 <tcp_recved>
    pbuf_free(p);
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f7fe fbd2 	bl	800d8f4 <pbuf_free>
 800f150:	e008      	b.n	800f164 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f152:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d104      	bne.n	800f164 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f15a:	68b8      	ldr	r0, [r7, #8]
 800f15c:	f7ff f884 	bl	800e268 <tcp_close>
 800f160:	4603      	mov	r3, r0
 800f162:	e000      	b.n	800f166 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f164:	2300      	movs	r3, #0
}
 800f166:	4618      	mov	r0, r3
 800f168:	3710      	adds	r7, #16
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}
 800f16e:	bf00      	nop
 800f170:	08019c2c 	.word	0x08019c2c
 800f174:	0801a19c 	.word	0x0801a19c
 800f178:	08019c70 	.word	0x08019c70

0800f17c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b086      	sub	sp, #24
 800f180:	af00      	add	r7, sp, #0
 800f182:	4603      	mov	r3, r0
 800f184:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	db01      	blt.n	800f192 <tcp_kill_prio+0x16>
 800f18e:	79fb      	ldrb	r3, [r7, #7]
 800f190:	e000      	b.n	800f194 <tcp_kill_prio+0x18>
 800f192:	237f      	movs	r3, #127	; 0x7f
 800f194:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f196:	7afb      	ldrb	r3, [r7, #11]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d034      	beq.n	800f206 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f19c:	7afb      	ldrb	r3, [r7, #11]
 800f19e:	3b01      	subs	r3, #1
 800f1a0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1aa:	4b19      	ldr	r3, [pc, #100]	; (800f210 <tcp_kill_prio+0x94>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	617b      	str	r3, [r7, #20]
 800f1b0:	e01f      	b.n	800f1f2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	7d5b      	ldrb	r3, [r3, #21]
 800f1b6:	7afa      	ldrb	r2, [r7, #11]
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	d80c      	bhi.n	800f1d6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f1c0:	7afa      	ldrb	r2, [r7, #11]
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d112      	bne.n	800f1ec <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f1c6:	4b13      	ldr	r3, [pc, #76]	; (800f214 <tcp_kill_prio+0x98>)
 800f1c8:	681a      	ldr	r2, [r3, #0]
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	6a1b      	ldr	r3, [r3, #32]
 800f1ce:	1ad3      	subs	r3, r2, r3
 800f1d0:	68fa      	ldr	r2, [r7, #12]
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d80a      	bhi.n	800f1ec <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f1d6:	4b0f      	ldr	r3, [pc, #60]	; (800f214 <tcp_kill_prio+0x98>)
 800f1d8:	681a      	ldr	r2, [r3, #0]
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	6a1b      	ldr	r3, [r3, #32]
 800f1de:	1ad3      	subs	r3, r2, r3
 800f1e0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	7d5b      	ldrb	r3, [r3, #21]
 800f1ea:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1ec:	697b      	ldr	r3, [r7, #20]
 800f1ee:	68db      	ldr	r3, [r3, #12]
 800f1f0:	617b      	str	r3, [r7, #20]
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d1dc      	bne.n	800f1b2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f1f8:	693b      	ldr	r3, [r7, #16]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d004      	beq.n	800f208 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f1fe:	6938      	ldr	r0, [r7, #16]
 800f200:	f7ff f978 	bl	800e4f4 <tcp_abort>
 800f204:	e000      	b.n	800f208 <tcp_kill_prio+0x8c>
    return;
 800f206:	bf00      	nop
  }
}
 800f208:	3718      	adds	r7, #24
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}
 800f20e:	bf00      	nop
 800f210:	2000d690 	.word	0x2000d690
 800f214:	2000d694 	.word	0x2000d694

0800f218 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b086      	sub	sp, #24
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	4603      	mov	r3, r0
 800f220:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f222:	79fb      	ldrb	r3, [r7, #7]
 800f224:	2b08      	cmp	r3, #8
 800f226:	d009      	beq.n	800f23c <tcp_kill_state+0x24>
 800f228:	79fb      	ldrb	r3, [r7, #7]
 800f22a:	2b09      	cmp	r3, #9
 800f22c:	d006      	beq.n	800f23c <tcp_kill_state+0x24>
 800f22e:	4b1a      	ldr	r3, [pc, #104]	; (800f298 <tcp_kill_state+0x80>)
 800f230:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f234:	4919      	ldr	r1, [pc, #100]	; (800f29c <tcp_kill_state+0x84>)
 800f236:	481a      	ldr	r0, [pc, #104]	; (800f2a0 <tcp_kill_state+0x88>)
 800f238:	f008 fab4 	bl	80177a4 <iprintf>

  inactivity = 0;
 800f23c:	2300      	movs	r3, #0
 800f23e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f240:	2300      	movs	r3, #0
 800f242:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f244:	4b17      	ldr	r3, [pc, #92]	; (800f2a4 <tcp_kill_state+0x8c>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	617b      	str	r3, [r7, #20]
 800f24a:	e017      	b.n	800f27c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	7d1b      	ldrb	r3, [r3, #20]
 800f250:	79fa      	ldrb	r2, [r7, #7]
 800f252:	429a      	cmp	r2, r3
 800f254:	d10f      	bne.n	800f276 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f256:	4b14      	ldr	r3, [pc, #80]	; (800f2a8 <tcp_kill_state+0x90>)
 800f258:	681a      	ldr	r2, [r3, #0]
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	6a1b      	ldr	r3, [r3, #32]
 800f25e:	1ad3      	subs	r3, r2, r3
 800f260:	68fa      	ldr	r2, [r7, #12]
 800f262:	429a      	cmp	r2, r3
 800f264:	d807      	bhi.n	800f276 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f266:	4b10      	ldr	r3, [pc, #64]	; (800f2a8 <tcp_kill_state+0x90>)
 800f268:	681a      	ldr	r2, [r3, #0]
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	6a1b      	ldr	r3, [r3, #32]
 800f26e:	1ad3      	subs	r3, r2, r3
 800f270:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f276:	697b      	ldr	r3, [r7, #20]
 800f278:	68db      	ldr	r3, [r3, #12]
 800f27a:	617b      	str	r3, [r7, #20]
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d1e4      	bne.n	800f24c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d003      	beq.n	800f290 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f288:	2100      	movs	r1, #0
 800f28a:	6938      	ldr	r0, [r7, #16]
 800f28c:	f7ff f874 	bl	800e378 <tcp_abandon>
  }
}
 800f290:	bf00      	nop
 800f292:	3718      	adds	r7, #24
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}
 800f298:	08019c2c 	.word	0x08019c2c
 800f29c:	0801a1b8 	.word	0x0801a1b8
 800f2a0:	08019c70 	.word	0x08019c70
 800f2a4:	2000d690 	.word	0x2000d690
 800f2a8:	2000d694 	.word	0x2000d694

0800f2ac <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b084      	sub	sp, #16
 800f2b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2ba:	4b12      	ldr	r3, [pc, #72]	; (800f304 <tcp_kill_timewait+0x58>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	60fb      	str	r3, [r7, #12]
 800f2c0:	e012      	b.n	800f2e8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f2c2:	4b11      	ldr	r3, [pc, #68]	; (800f308 <tcp_kill_timewait+0x5c>)
 800f2c4:	681a      	ldr	r2, [r3, #0]
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	6a1b      	ldr	r3, [r3, #32]
 800f2ca:	1ad3      	subs	r3, r2, r3
 800f2cc:	687a      	ldr	r2, [r7, #4]
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	d807      	bhi.n	800f2e2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f2d2:	4b0d      	ldr	r3, [pc, #52]	; (800f308 <tcp_kill_timewait+0x5c>)
 800f2d4:	681a      	ldr	r2, [r3, #0]
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	6a1b      	ldr	r3, [r3, #32]
 800f2da:	1ad3      	subs	r3, r2, r3
 800f2dc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	68db      	ldr	r3, [r3, #12]
 800f2e6:	60fb      	str	r3, [r7, #12]
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d1e9      	bne.n	800f2c2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d002      	beq.n	800f2fa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f2f4:	68b8      	ldr	r0, [r7, #8]
 800f2f6:	f7ff f8fd 	bl	800e4f4 <tcp_abort>
  }
}
 800f2fa:	bf00      	nop
 800f2fc:	3710      	adds	r7, #16
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}
 800f302:	bf00      	nop
 800f304:	2000d6a0 	.word	0x2000d6a0
 800f308:	2000d694 	.word	0x2000d694

0800f30c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f312:	4b10      	ldr	r3, [pc, #64]	; (800f354 <tcp_handle_closepend+0x48>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f318:	e014      	b.n	800f344 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	68db      	ldr	r3, [r3, #12]
 800f31e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	8b5b      	ldrh	r3, [r3, #26]
 800f324:	f003 0308 	and.w	r3, r3, #8
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d009      	beq.n	800f340 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	8b5b      	ldrh	r3, [r3, #26]
 800f330:	f023 0308 	bic.w	r3, r3, #8
 800f334:	b29a      	uxth	r2, r3
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f7fe ff2a 	bl	800e194 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d1e7      	bne.n	800f31a <tcp_handle_closepend+0xe>
  }
}
 800f34a:	bf00      	nop
 800f34c:	bf00      	nop
 800f34e:	3708      	adds	r7, #8
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	2000d690 	.word	0x2000d690

0800f358 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	4603      	mov	r3, r0
 800f360:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f362:	2001      	movs	r0, #1
 800f364:	f7fd fc34 	bl	800cbd0 <memp_malloc>
 800f368:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d126      	bne.n	800f3be <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f370:	f7ff ffcc 	bl	800f30c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f374:	f7ff ff9a 	bl	800f2ac <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f378:	2001      	movs	r0, #1
 800f37a:	f7fd fc29 	bl	800cbd0 <memp_malloc>
 800f37e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d11b      	bne.n	800f3be <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f386:	2009      	movs	r0, #9
 800f388:	f7ff ff46 	bl	800f218 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f38c:	2001      	movs	r0, #1
 800f38e:	f7fd fc1f 	bl	800cbd0 <memp_malloc>
 800f392:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d111      	bne.n	800f3be <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f39a:	2008      	movs	r0, #8
 800f39c:	f7ff ff3c 	bl	800f218 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f3a0:	2001      	movs	r0, #1
 800f3a2:	f7fd fc15 	bl	800cbd0 <memp_malloc>
 800f3a6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d107      	bne.n	800f3be <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f3ae:	79fb      	ldrb	r3, [r7, #7]
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f7ff fee3 	bl	800f17c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f3b6:	2001      	movs	r0, #1
 800f3b8:	f7fd fc0a 	bl	800cbd0 <memp_malloc>
 800f3bc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d03f      	beq.n	800f444 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f3c4:	229c      	movs	r2, #156	; 0x9c
 800f3c6:	2100      	movs	r1, #0
 800f3c8:	68f8      	ldr	r0, [r7, #12]
 800f3ca:	f008 f939 	bl	8017640 <memset>
    pcb->prio = prio;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	79fa      	ldrb	r2, [r7, #7]
 800f3d2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f3da:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f3e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	22ff      	movs	r2, #255	; 0xff
 800f3f2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f3fa:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	2206      	movs	r2, #6
 800f400:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	2206      	movs	r2, #6
 800f408:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f410:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	2201      	movs	r2, #1
 800f416:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f41a:	4b0d      	ldr	r3, [pc, #52]	; (800f450 <tcp_alloc+0xf8>)
 800f41c:	681a      	ldr	r2, [r3, #0]
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f422:	4b0c      	ldr	r3, [pc, #48]	; (800f454 <tcp_alloc+0xfc>)
 800f424:	781a      	ldrb	r2, [r3, #0]
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f430:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	4a08      	ldr	r2, [pc, #32]	; (800f458 <tcp_alloc+0x100>)
 800f438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	4a07      	ldr	r2, [pc, #28]	; (800f45c <tcp_alloc+0x104>)
 800f440:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f444:	68fb      	ldr	r3, [r7, #12]
}
 800f446:	4618      	mov	r0, r3
 800f448:	3710      	adds	r7, #16
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
 800f44e:	bf00      	nop
 800f450:	2000d694 	.word	0x2000d694
 800f454:	20006846 	.word	0x20006846
 800f458:	0800f111 	.word	0x0800f111
 800f45c:	006ddd00 	.word	0x006ddd00

0800f460 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b084      	sub	sp, #16
 800f464:	af00      	add	r7, sp, #0
 800f466:	4603      	mov	r3, r0
 800f468:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f46a:	2040      	movs	r0, #64	; 0x40
 800f46c:	f7ff ff74 	bl	800f358 <tcp_alloc>
 800f470:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f472:	68fb      	ldr	r3, [r7, #12]
}
 800f474:	4618      	mov	r0, r3
 800f476:	3710      	adds	r7, #16
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}

0800f47c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f47c:	b480      	push	{r7}
 800f47e:	b083      	sub	sp, #12
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d002      	beq.n	800f492 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	683a      	ldr	r2, [r7, #0]
 800f490:	611a      	str	r2, [r3, #16]
  }
}
 800f492:	bf00      	nop
 800f494:	370c      	adds	r7, #12
 800f496:	46bd      	mov	sp, r7
 800f498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49c:	4770      	bx	lr
	...

0800f4a0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b082      	sub	sp, #8
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d00e      	beq.n	800f4ce <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	7d1b      	ldrb	r3, [r3, #20]
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	d106      	bne.n	800f4c6 <tcp_recv+0x26>
 800f4b8:	4b07      	ldr	r3, [pc, #28]	; (800f4d8 <tcp_recv+0x38>)
 800f4ba:	f240 72df 	movw	r2, #2015	; 0x7df
 800f4be:	4907      	ldr	r1, [pc, #28]	; (800f4dc <tcp_recv+0x3c>)
 800f4c0:	4807      	ldr	r0, [pc, #28]	; (800f4e0 <tcp_recv+0x40>)
 800f4c2:	f008 f96f 	bl	80177a4 <iprintf>
    pcb->recv = recv;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	683a      	ldr	r2, [r7, #0]
 800f4ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f4ce:	bf00      	nop
 800f4d0:	3708      	adds	r7, #8
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}
 800f4d6:	bf00      	nop
 800f4d8:	08019c2c 	.word	0x08019c2c
 800f4dc:	0801a1c8 	.word	0x0801a1c8
 800f4e0:	08019c70 	.word	0x08019c70

0800f4e4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b082      	sub	sp, #8
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d00e      	beq.n	800f512 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	7d1b      	ldrb	r3, [r3, #20]
 800f4f8:	2b01      	cmp	r3, #1
 800f4fa:	d106      	bne.n	800f50a <tcp_sent+0x26>
 800f4fc:	4b07      	ldr	r3, [pc, #28]	; (800f51c <tcp_sent+0x38>)
 800f4fe:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f502:	4907      	ldr	r1, [pc, #28]	; (800f520 <tcp_sent+0x3c>)
 800f504:	4807      	ldr	r0, [pc, #28]	; (800f524 <tcp_sent+0x40>)
 800f506:	f008 f94d 	bl	80177a4 <iprintf>
    pcb->sent = sent;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	683a      	ldr	r2, [r7, #0]
 800f50e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f512:	bf00      	nop
 800f514:	3708      	adds	r7, #8
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	08019c2c 	.word	0x08019c2c
 800f520:	0801a1f0 	.word	0x0801a1f0
 800f524:	08019c70 	.word	0x08019c70

0800f528 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b082      	sub	sp, #8
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d00e      	beq.n	800f556 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	7d1b      	ldrb	r3, [r3, #20]
 800f53c:	2b01      	cmp	r3, #1
 800f53e:	d106      	bne.n	800f54e <tcp_err+0x26>
 800f540:	4b07      	ldr	r3, [pc, #28]	; (800f560 <tcp_err+0x38>)
 800f542:	f640 020d 	movw	r2, #2061	; 0x80d
 800f546:	4907      	ldr	r1, [pc, #28]	; (800f564 <tcp_err+0x3c>)
 800f548:	4807      	ldr	r0, [pc, #28]	; (800f568 <tcp_err+0x40>)
 800f54a:	f008 f92b 	bl	80177a4 <iprintf>
    pcb->errf = err;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	683a      	ldr	r2, [r7, #0]
 800f552:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f556:	bf00      	nop
 800f558:	3708      	adds	r7, #8
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	08019c2c 	.word	0x08019c2c
 800f564:	0801a218 	.word	0x0801a218
 800f568:	08019c70 	.word	0x08019c70

0800f56c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f56c:	b480      	push	{r7}
 800f56e:	b085      	sub	sp, #20
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d008      	beq.n	800f58e <tcp_accept+0x22>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	7d1b      	ldrb	r3, [r3, #20]
 800f580:	2b01      	cmp	r3, #1
 800f582:	d104      	bne.n	800f58e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	683a      	ldr	r2, [r7, #0]
 800f58c:	619a      	str	r2, [r3, #24]
  }
}
 800f58e:	bf00      	nop
 800f590:	3714      	adds	r7, #20
 800f592:	46bd      	mov	sp, r7
 800f594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f598:	4770      	bx	lr
	...

0800f59c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b084      	sub	sp, #16
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	60f8      	str	r0, [r7, #12]
 800f5a4:	60b9      	str	r1, [r7, #8]
 800f5a6:	4613      	mov	r3, r2
 800f5a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d107      	bne.n	800f5c0 <tcp_poll+0x24>
 800f5b0:	4b0e      	ldr	r3, [pc, #56]	; (800f5ec <tcp_poll+0x50>)
 800f5b2:	f640 023d 	movw	r2, #2109	; 0x83d
 800f5b6:	490e      	ldr	r1, [pc, #56]	; (800f5f0 <tcp_poll+0x54>)
 800f5b8:	480e      	ldr	r0, [pc, #56]	; (800f5f4 <tcp_poll+0x58>)
 800f5ba:	f008 f8f3 	bl	80177a4 <iprintf>
 800f5be:	e011      	b.n	800f5e4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	7d1b      	ldrb	r3, [r3, #20]
 800f5c4:	2b01      	cmp	r3, #1
 800f5c6:	d106      	bne.n	800f5d6 <tcp_poll+0x3a>
 800f5c8:	4b08      	ldr	r3, [pc, #32]	; (800f5ec <tcp_poll+0x50>)
 800f5ca:	f640 023e 	movw	r2, #2110	; 0x83e
 800f5ce:	490a      	ldr	r1, [pc, #40]	; (800f5f8 <tcp_poll+0x5c>)
 800f5d0:	4808      	ldr	r0, [pc, #32]	; (800f5f4 <tcp_poll+0x58>)
 800f5d2:	f008 f8e7 	bl	80177a4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	68ba      	ldr	r2, [r7, #8]
 800f5da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	79fa      	ldrb	r2, [r7, #7]
 800f5e2:	775a      	strb	r2, [r3, #29]
}
 800f5e4:	3710      	adds	r7, #16
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}
 800f5ea:	bf00      	nop
 800f5ec:	08019c2c 	.word	0x08019c2c
 800f5f0:	0801a240 	.word	0x0801a240
 800f5f4:	08019c70 	.word	0x08019c70
 800f5f8:	0801a258 	.word	0x0801a258

0800f5fc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b082      	sub	sp, #8
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d107      	bne.n	800f61a <tcp_pcb_purge+0x1e>
 800f60a:	4b21      	ldr	r3, [pc, #132]	; (800f690 <tcp_pcb_purge+0x94>)
 800f60c:	f640 0251 	movw	r2, #2129	; 0x851
 800f610:	4920      	ldr	r1, [pc, #128]	; (800f694 <tcp_pcb_purge+0x98>)
 800f612:	4821      	ldr	r0, [pc, #132]	; (800f698 <tcp_pcb_purge+0x9c>)
 800f614:	f008 f8c6 	bl	80177a4 <iprintf>
 800f618:	e037      	b.n	800f68a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	7d1b      	ldrb	r3, [r3, #20]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d033      	beq.n	800f68a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f626:	2b0a      	cmp	r3, #10
 800f628:	d02f      	beq.n	800f68a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f62e:	2b01      	cmp	r3, #1
 800f630:	d02b      	beq.n	800f68a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f636:	2b00      	cmp	r3, #0
 800f638:	d007      	beq.n	800f64a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f63e:	4618      	mov	r0, r3
 800f640:	f7fe f958 	bl	800d8f4 <pbuf_free>
      pcb->refused_data = NULL;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2200      	movs	r2, #0
 800f648:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d002      	beq.n	800f658 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f000 f986 	bl	800f964 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f65e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f664:	4618      	mov	r0, r3
 800f666:	f7ff fcf9 	bl	800f05c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f66e:	4618      	mov	r0, r3
 800f670:	f7ff fcf4 	bl	800f05c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2200      	movs	r2, #0
 800f678:	66da      	str	r2, [r3, #108]	; 0x6c
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2200      	movs	r2, #0
 800f686:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f68a:	3708      	adds	r7, #8
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}
 800f690:	08019c2c 	.word	0x08019c2c
 800f694:	0801a278 	.word	0x0801a278
 800f698:	08019c70 	.word	0x08019c70

0800f69c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b084      	sub	sp, #16
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
 800f6a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d106      	bne.n	800f6ba <tcp_pcb_remove+0x1e>
 800f6ac:	4b3e      	ldr	r3, [pc, #248]	; (800f7a8 <tcp_pcb_remove+0x10c>)
 800f6ae:	f640 0283 	movw	r2, #2179	; 0x883
 800f6b2:	493e      	ldr	r1, [pc, #248]	; (800f7ac <tcp_pcb_remove+0x110>)
 800f6b4:	483e      	ldr	r0, [pc, #248]	; (800f7b0 <tcp_pcb_remove+0x114>)
 800f6b6:	f008 f875 	bl	80177a4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d106      	bne.n	800f6ce <tcp_pcb_remove+0x32>
 800f6c0:	4b39      	ldr	r3, [pc, #228]	; (800f7a8 <tcp_pcb_remove+0x10c>)
 800f6c2:	f640 0284 	movw	r2, #2180	; 0x884
 800f6c6:	493b      	ldr	r1, [pc, #236]	; (800f7b4 <tcp_pcb_remove+0x118>)
 800f6c8:	4839      	ldr	r0, [pc, #228]	; (800f7b0 <tcp_pcb_remove+0x114>)
 800f6ca:	f008 f86b 	bl	80177a4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	683a      	ldr	r2, [r7, #0]
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d105      	bne.n	800f6e4 <tcp_pcb_remove+0x48>
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	68da      	ldr	r2, [r3, #12]
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	601a      	str	r2, [r3, #0]
 800f6e2:	e013      	b.n	800f70c <tcp_pcb_remove+0x70>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	60fb      	str	r3, [r7, #12]
 800f6ea:	e00c      	b.n	800f706 <tcp_pcb_remove+0x6a>
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	68db      	ldr	r3, [r3, #12]
 800f6f0:	683a      	ldr	r2, [r7, #0]
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d104      	bne.n	800f700 <tcp_pcb_remove+0x64>
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	68da      	ldr	r2, [r3, #12]
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	60da      	str	r2, [r3, #12]
 800f6fe:	e005      	b.n	800f70c <tcp_pcb_remove+0x70>
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	68db      	ldr	r3, [r3, #12]
 800f704:	60fb      	str	r3, [r7, #12]
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d1ef      	bne.n	800f6ec <tcp_pcb_remove+0x50>
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	2200      	movs	r2, #0
 800f710:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f712:	6838      	ldr	r0, [r7, #0]
 800f714:	f7ff ff72 	bl	800f5fc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	7d1b      	ldrb	r3, [r3, #20]
 800f71c:	2b0a      	cmp	r3, #10
 800f71e:	d013      	beq.n	800f748 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f724:	2b01      	cmp	r3, #1
 800f726:	d00f      	beq.n	800f748 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	8b5b      	ldrh	r3, [r3, #26]
 800f72c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f730:	2b00      	cmp	r3, #0
 800f732:	d009      	beq.n	800f748 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	8b5b      	ldrh	r3, [r3, #26]
 800f738:	f043 0302 	orr.w	r3, r3, #2
 800f73c:	b29a      	uxth	r2, r3
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f742:	6838      	ldr	r0, [r7, #0]
 800f744:	f003 fbc2 	bl	8012ecc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	7d1b      	ldrb	r3, [r3, #20]
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d020      	beq.n	800f792 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f754:	2b00      	cmp	r3, #0
 800f756:	d006      	beq.n	800f766 <tcp_pcb_remove+0xca>
 800f758:	4b13      	ldr	r3, [pc, #76]	; (800f7a8 <tcp_pcb_remove+0x10c>)
 800f75a:	f640 0293 	movw	r2, #2195	; 0x893
 800f75e:	4916      	ldr	r1, [pc, #88]	; (800f7b8 <tcp_pcb_remove+0x11c>)
 800f760:	4813      	ldr	r0, [pc, #76]	; (800f7b0 <tcp_pcb_remove+0x114>)
 800f762:	f008 f81f 	bl	80177a4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d006      	beq.n	800f77c <tcp_pcb_remove+0xe0>
 800f76e:	4b0e      	ldr	r3, [pc, #56]	; (800f7a8 <tcp_pcb_remove+0x10c>)
 800f770:	f640 0294 	movw	r2, #2196	; 0x894
 800f774:	4911      	ldr	r1, [pc, #68]	; (800f7bc <tcp_pcb_remove+0x120>)
 800f776:	480e      	ldr	r0, [pc, #56]	; (800f7b0 <tcp_pcb_remove+0x114>)
 800f778:	f008 f814 	bl	80177a4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f780:	2b00      	cmp	r3, #0
 800f782:	d006      	beq.n	800f792 <tcp_pcb_remove+0xf6>
 800f784:	4b08      	ldr	r3, [pc, #32]	; (800f7a8 <tcp_pcb_remove+0x10c>)
 800f786:	f640 0296 	movw	r2, #2198	; 0x896
 800f78a:	490d      	ldr	r1, [pc, #52]	; (800f7c0 <tcp_pcb_remove+0x124>)
 800f78c:	4808      	ldr	r0, [pc, #32]	; (800f7b0 <tcp_pcb_remove+0x114>)
 800f78e:	f008 f809 	bl	80177a4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	2200      	movs	r2, #0
 800f796:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	2200      	movs	r2, #0
 800f79c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f79e:	bf00      	nop
 800f7a0:	3710      	adds	r7, #16
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}
 800f7a6:	bf00      	nop
 800f7a8:	08019c2c 	.word	0x08019c2c
 800f7ac:	0801a294 	.word	0x0801a294
 800f7b0:	08019c70 	.word	0x08019c70
 800f7b4:	0801a2b0 	.word	0x0801a2b0
 800f7b8:	0801a2d0 	.word	0x0801a2d0
 800f7bc:	0801a2e8 	.word	0x0801a2e8
 800f7c0:	0801a304 	.word	0x0801a304

0800f7c4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b082      	sub	sp, #8
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d106      	bne.n	800f7e0 <tcp_next_iss+0x1c>
 800f7d2:	4b0a      	ldr	r3, [pc, #40]	; (800f7fc <tcp_next_iss+0x38>)
 800f7d4:	f640 02af 	movw	r2, #2223	; 0x8af
 800f7d8:	4909      	ldr	r1, [pc, #36]	; (800f800 <tcp_next_iss+0x3c>)
 800f7da:	480a      	ldr	r0, [pc, #40]	; (800f804 <tcp_next_iss+0x40>)
 800f7dc:	f007 ffe2 	bl	80177a4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f7e0:	4b09      	ldr	r3, [pc, #36]	; (800f808 <tcp_next_iss+0x44>)
 800f7e2:	681a      	ldr	r2, [r3, #0]
 800f7e4:	4b09      	ldr	r3, [pc, #36]	; (800f80c <tcp_next_iss+0x48>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	4413      	add	r3, r2
 800f7ea:	4a07      	ldr	r2, [pc, #28]	; (800f808 <tcp_next_iss+0x44>)
 800f7ec:	6013      	str	r3, [r2, #0]
  return iss;
 800f7ee:	4b06      	ldr	r3, [pc, #24]	; (800f808 <tcp_next_iss+0x44>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3708      	adds	r7, #8
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	08019c2c 	.word	0x08019c2c
 800f800:	0801a31c 	.word	0x0801a31c
 800f804:	08019c70 	.word	0x08019c70
 800f808:	20000018 	.word	0x20000018
 800f80c:	2000d694 	.word	0x2000d694

0800f810 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b086      	sub	sp, #24
 800f814:	af00      	add	r7, sp, #0
 800f816:	4603      	mov	r3, r0
 800f818:	60b9      	str	r1, [r7, #8]
 800f81a:	607a      	str	r2, [r7, #4]
 800f81c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d106      	bne.n	800f832 <tcp_eff_send_mss_netif+0x22>
 800f824:	4b14      	ldr	r3, [pc, #80]	; (800f878 <tcp_eff_send_mss_netif+0x68>)
 800f826:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f82a:	4914      	ldr	r1, [pc, #80]	; (800f87c <tcp_eff_send_mss_netif+0x6c>)
 800f82c:	4814      	ldr	r0, [pc, #80]	; (800f880 <tcp_eff_send_mss_netif+0x70>)
 800f82e:	f007 ffb9 	bl	80177a4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d101      	bne.n	800f83c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f838:	89fb      	ldrh	r3, [r7, #14]
 800f83a:	e019      	b.n	800f870 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f840:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f842:	8afb      	ldrh	r3, [r7, #22]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d012      	beq.n	800f86e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f848:	2328      	movs	r3, #40	; 0x28
 800f84a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f84c:	8afa      	ldrh	r2, [r7, #22]
 800f84e:	8abb      	ldrh	r3, [r7, #20]
 800f850:	429a      	cmp	r2, r3
 800f852:	d904      	bls.n	800f85e <tcp_eff_send_mss_netif+0x4e>
 800f854:	8afa      	ldrh	r2, [r7, #22]
 800f856:	8abb      	ldrh	r3, [r7, #20]
 800f858:	1ad3      	subs	r3, r2, r3
 800f85a:	b29b      	uxth	r3, r3
 800f85c:	e000      	b.n	800f860 <tcp_eff_send_mss_netif+0x50>
 800f85e:	2300      	movs	r3, #0
 800f860:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f862:	8a7a      	ldrh	r2, [r7, #18]
 800f864:	89fb      	ldrh	r3, [r7, #14]
 800f866:	4293      	cmp	r3, r2
 800f868:	bf28      	it	cs
 800f86a:	4613      	movcs	r3, r2
 800f86c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f86e:	89fb      	ldrh	r3, [r7, #14]
}
 800f870:	4618      	mov	r0, r3
 800f872:	3718      	adds	r7, #24
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}
 800f878:	08019c2c 	.word	0x08019c2c
 800f87c:	0801a338 	.word	0x0801a338
 800f880:	08019c70 	.word	0x08019c70

0800f884 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b084      	sub	sp, #16
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d119      	bne.n	800f8cc <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f898:	4b10      	ldr	r3, [pc, #64]	; (800f8dc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f89a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f89e:	4910      	ldr	r1, [pc, #64]	; (800f8e0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f8a0:	4810      	ldr	r0, [pc, #64]	; (800f8e4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f8a2:	f007 ff7f 	bl	80177a4 <iprintf>

  while (pcb != NULL) {
 800f8a6:	e011      	b.n	800f8cc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	681a      	ldr	r2, [r3, #0]
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d108      	bne.n	800f8c6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	68db      	ldr	r3, [r3, #12]
 800f8b8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f8ba:	68f8      	ldr	r0, [r7, #12]
 800f8bc:	f7fe fe1a 	bl	800e4f4 <tcp_abort>
      pcb = next;
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	60fb      	str	r3, [r7, #12]
 800f8c4:	e002      	b.n	800f8cc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	68db      	ldr	r3, [r3, #12]
 800f8ca:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d1ea      	bne.n	800f8a8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f8d2:	bf00      	nop
 800f8d4:	bf00      	nop
 800f8d6:	3710      	adds	r7, #16
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	08019c2c 	.word	0x08019c2c
 800f8e0:	0801a360 	.word	0x0801a360
 800f8e4:	08019c70 	.word	0x08019c70

0800f8e8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b084      	sub	sp, #16
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d02a      	beq.n	800f94e <tcp_netif_ip_addr_changed+0x66>
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d026      	beq.n	800f94e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f900:	4b15      	ldr	r3, [pc, #84]	; (800f958 <tcp_netif_ip_addr_changed+0x70>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	4619      	mov	r1, r3
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f7ff ffbc 	bl	800f884 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f90c:	4b13      	ldr	r3, [pc, #76]	; (800f95c <tcp_netif_ip_addr_changed+0x74>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	4619      	mov	r1, r3
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f7ff ffb6 	bl	800f884 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d017      	beq.n	800f94e <tcp_netif_ip_addr_changed+0x66>
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d013      	beq.n	800f94e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f926:	4b0e      	ldr	r3, [pc, #56]	; (800f960 <tcp_netif_ip_addr_changed+0x78>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	60fb      	str	r3, [r7, #12]
 800f92c:	e00c      	b.n	800f948 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	681a      	ldr	r2, [r3, #0]
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	429a      	cmp	r2, r3
 800f938:	d103      	bne.n	800f942 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	681a      	ldr	r2, [r3, #0]
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	68db      	ldr	r3, [r3, #12]
 800f946:	60fb      	str	r3, [r7, #12]
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d1ef      	bne.n	800f92e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f94e:	bf00      	nop
 800f950:	3710      	adds	r7, #16
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}
 800f956:	bf00      	nop
 800f958:	2000d690 	.word	0x2000d690
 800f95c:	2000d69c 	.word	0x2000d69c
 800f960:	2000d698 	.word	0x2000d698

0800f964 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b082      	sub	sp, #8
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f970:	2b00      	cmp	r3, #0
 800f972:	d007      	beq.n	800f984 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f978:	4618      	mov	r0, r3
 800f97a:	f7ff fb6f 	bl	800f05c <tcp_segs_free>
    pcb->ooseq = NULL;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	2200      	movs	r2, #0
 800f982:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f984:	bf00      	nop
 800f986:	3708      	adds	r7, #8
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}

0800f98c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f98c:	b590      	push	{r4, r7, lr}
 800f98e:	b08d      	sub	sp, #52	; 0x34
 800f990:	af04      	add	r7, sp, #16
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d105      	bne.n	800f9a8 <tcp_input+0x1c>
 800f99c:	4b9b      	ldr	r3, [pc, #620]	; (800fc0c <tcp_input+0x280>)
 800f99e:	2283      	movs	r2, #131	; 0x83
 800f9a0:	499b      	ldr	r1, [pc, #620]	; (800fc10 <tcp_input+0x284>)
 800f9a2:	489c      	ldr	r0, [pc, #624]	; (800fc14 <tcp_input+0x288>)
 800f9a4:	f007 fefe 	bl	80177a4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	4a9a      	ldr	r2, [pc, #616]	; (800fc18 <tcp_input+0x28c>)
 800f9ae:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	895b      	ldrh	r3, [r3, #10]
 800f9b4:	2b13      	cmp	r3, #19
 800f9b6:	f240 83c4 	bls.w	8010142 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f9ba:	4b98      	ldr	r3, [pc, #608]	; (800fc1c <tcp_input+0x290>)
 800f9bc:	695b      	ldr	r3, [r3, #20]
 800f9be:	4a97      	ldr	r2, [pc, #604]	; (800fc1c <tcp_input+0x290>)
 800f9c0:	6812      	ldr	r2, [r2, #0]
 800f9c2:	4611      	mov	r1, r2
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f006 fbcb 	bl	8016160 <ip4_addr_isbroadcast_u32>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	f040 83ba 	bne.w	8010146 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f9d2:	4b92      	ldr	r3, [pc, #584]	; (800fc1c <tcp_input+0x290>)
 800f9d4:	695b      	ldr	r3, [r3, #20]
 800f9d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f9da:	2be0      	cmp	r3, #224	; 0xe0
 800f9dc:	f000 83b3 	beq.w	8010146 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f9e0:	4b8d      	ldr	r3, [pc, #564]	; (800fc18 <tcp_input+0x28c>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	899b      	ldrh	r3, [r3, #12]
 800f9e6:	b29b      	uxth	r3, r3
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f7fc fc3b 	bl	800c264 <lwip_htons>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	0b1b      	lsrs	r3, r3, #12
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	b2db      	uxtb	r3, r3
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f9fa:	7cbb      	ldrb	r3, [r7, #18]
 800f9fc:	2b13      	cmp	r3, #19
 800f9fe:	f240 83a4 	bls.w	801014a <tcp_input+0x7be>
 800fa02:	7cbb      	ldrb	r3, [r7, #18]
 800fa04:	b29a      	uxth	r2, r3
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	891b      	ldrh	r3, [r3, #8]
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	f200 839d 	bhi.w	801014a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fa10:	7cbb      	ldrb	r3, [r7, #18]
 800fa12:	b29b      	uxth	r3, r3
 800fa14:	3b14      	subs	r3, #20
 800fa16:	b29a      	uxth	r2, r3
 800fa18:	4b81      	ldr	r3, [pc, #516]	; (800fc20 <tcp_input+0x294>)
 800fa1a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800fa1c:	4b81      	ldr	r3, [pc, #516]	; (800fc24 <tcp_input+0x298>)
 800fa1e:	2200      	movs	r2, #0
 800fa20:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	895a      	ldrh	r2, [r3, #10]
 800fa26:	7cbb      	ldrb	r3, [r7, #18]
 800fa28:	b29b      	uxth	r3, r3
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d309      	bcc.n	800fa42 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800fa2e:	4b7c      	ldr	r3, [pc, #496]	; (800fc20 <tcp_input+0x294>)
 800fa30:	881a      	ldrh	r2, [r3, #0]
 800fa32:	4b7d      	ldr	r3, [pc, #500]	; (800fc28 <tcp_input+0x29c>)
 800fa34:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fa36:	7cbb      	ldrb	r3, [r7, #18]
 800fa38:	4619      	mov	r1, r3
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f7fd fed4 	bl	800d7e8 <pbuf_remove_header>
 800fa40:	e04e      	b.n	800fae0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d105      	bne.n	800fa56 <tcp_input+0xca>
 800fa4a:	4b70      	ldr	r3, [pc, #448]	; (800fc0c <tcp_input+0x280>)
 800fa4c:	22c2      	movs	r2, #194	; 0xc2
 800fa4e:	4977      	ldr	r1, [pc, #476]	; (800fc2c <tcp_input+0x2a0>)
 800fa50:	4870      	ldr	r0, [pc, #448]	; (800fc14 <tcp_input+0x288>)
 800fa52:	f007 fea7 	bl	80177a4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800fa56:	2114      	movs	r1, #20
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f7fd fec5 	bl	800d7e8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	895a      	ldrh	r2, [r3, #10]
 800fa62:	4b71      	ldr	r3, [pc, #452]	; (800fc28 <tcp_input+0x29c>)
 800fa64:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fa66:	4b6e      	ldr	r3, [pc, #440]	; (800fc20 <tcp_input+0x294>)
 800fa68:	881a      	ldrh	r2, [r3, #0]
 800fa6a:	4b6f      	ldr	r3, [pc, #444]	; (800fc28 <tcp_input+0x29c>)
 800fa6c:	881b      	ldrh	r3, [r3, #0]
 800fa6e:	1ad3      	subs	r3, r2, r3
 800fa70:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800fa72:	4b6d      	ldr	r3, [pc, #436]	; (800fc28 <tcp_input+0x29c>)
 800fa74:	881b      	ldrh	r3, [r3, #0]
 800fa76:	4619      	mov	r1, r3
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f7fd feb5 	bl	800d7e8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	895b      	ldrh	r3, [r3, #10]
 800fa84:	8a3a      	ldrh	r2, [r7, #16]
 800fa86:	429a      	cmp	r2, r3
 800fa88:	f200 8361 	bhi.w	801014e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	685b      	ldr	r3, [r3, #4]
 800fa92:	4a64      	ldr	r2, [pc, #400]	; (800fc24 <tcp_input+0x298>)
 800fa94:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	8a3a      	ldrh	r2, [r7, #16]
 800fa9c:	4611      	mov	r1, r2
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fd fea2 	bl	800d7e8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	891a      	ldrh	r2, [r3, #8]
 800faa8:	8a3b      	ldrh	r3, [r7, #16]
 800faaa:	1ad3      	subs	r3, r2, r3
 800faac:	b29a      	uxth	r2, r3
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	895b      	ldrh	r3, [r3, #10]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d005      	beq.n	800fac6 <tcp_input+0x13a>
 800faba:	4b54      	ldr	r3, [pc, #336]	; (800fc0c <tcp_input+0x280>)
 800fabc:	22df      	movs	r2, #223	; 0xdf
 800fabe:	495c      	ldr	r1, [pc, #368]	; (800fc30 <tcp_input+0x2a4>)
 800fac0:	4854      	ldr	r0, [pc, #336]	; (800fc14 <tcp_input+0x288>)
 800fac2:	f007 fe6f 	bl	80177a4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	891a      	ldrh	r2, [r3, #8]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	891b      	ldrh	r3, [r3, #8]
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d005      	beq.n	800fae0 <tcp_input+0x154>
 800fad4:	4b4d      	ldr	r3, [pc, #308]	; (800fc0c <tcp_input+0x280>)
 800fad6:	22e0      	movs	r2, #224	; 0xe0
 800fad8:	4956      	ldr	r1, [pc, #344]	; (800fc34 <tcp_input+0x2a8>)
 800fada:	484e      	ldr	r0, [pc, #312]	; (800fc14 <tcp_input+0x288>)
 800fadc:	f007 fe62 	bl	80177a4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800fae0:	4b4d      	ldr	r3, [pc, #308]	; (800fc18 <tcp_input+0x28c>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	881b      	ldrh	r3, [r3, #0]
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	4a4b      	ldr	r2, [pc, #300]	; (800fc18 <tcp_input+0x28c>)
 800faea:	6814      	ldr	r4, [r2, #0]
 800faec:	4618      	mov	r0, r3
 800faee:	f7fc fbb9 	bl	800c264 <lwip_htons>
 800faf2:	4603      	mov	r3, r0
 800faf4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800faf6:	4b48      	ldr	r3, [pc, #288]	; (800fc18 <tcp_input+0x28c>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	885b      	ldrh	r3, [r3, #2]
 800fafc:	b29b      	uxth	r3, r3
 800fafe:	4a46      	ldr	r2, [pc, #280]	; (800fc18 <tcp_input+0x28c>)
 800fb00:	6814      	ldr	r4, [r2, #0]
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7fc fbae 	bl	800c264 <lwip_htons>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800fb0c:	4b42      	ldr	r3, [pc, #264]	; (800fc18 <tcp_input+0x28c>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	685b      	ldr	r3, [r3, #4]
 800fb12:	4a41      	ldr	r2, [pc, #260]	; (800fc18 <tcp_input+0x28c>)
 800fb14:	6814      	ldr	r4, [r2, #0]
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7fc fbb9 	bl	800c28e <lwip_htonl>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	6063      	str	r3, [r4, #4]
 800fb20:	6863      	ldr	r3, [r4, #4]
 800fb22:	4a45      	ldr	r2, [pc, #276]	; (800fc38 <tcp_input+0x2ac>)
 800fb24:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fb26:	4b3c      	ldr	r3, [pc, #240]	; (800fc18 <tcp_input+0x28c>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	689b      	ldr	r3, [r3, #8]
 800fb2c:	4a3a      	ldr	r2, [pc, #232]	; (800fc18 <tcp_input+0x28c>)
 800fb2e:	6814      	ldr	r4, [r2, #0]
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7fc fbac 	bl	800c28e <lwip_htonl>
 800fb36:	4603      	mov	r3, r0
 800fb38:	60a3      	str	r3, [r4, #8]
 800fb3a:	68a3      	ldr	r3, [r4, #8]
 800fb3c:	4a3f      	ldr	r2, [pc, #252]	; (800fc3c <tcp_input+0x2b0>)
 800fb3e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800fb40:	4b35      	ldr	r3, [pc, #212]	; (800fc18 <tcp_input+0x28c>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	89db      	ldrh	r3, [r3, #14]
 800fb46:	b29b      	uxth	r3, r3
 800fb48:	4a33      	ldr	r2, [pc, #204]	; (800fc18 <tcp_input+0x28c>)
 800fb4a:	6814      	ldr	r4, [r2, #0]
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f7fc fb89 	bl	800c264 <lwip_htons>
 800fb52:	4603      	mov	r3, r0
 800fb54:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800fb56:	4b30      	ldr	r3, [pc, #192]	; (800fc18 <tcp_input+0x28c>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	899b      	ldrh	r3, [r3, #12]
 800fb5c:	b29b      	uxth	r3, r3
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7fc fb80 	bl	800c264 <lwip_htons>
 800fb64:	4603      	mov	r3, r0
 800fb66:	b2db      	uxtb	r3, r3
 800fb68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb6c:	b2da      	uxtb	r2, r3
 800fb6e:	4b34      	ldr	r3, [pc, #208]	; (800fc40 <tcp_input+0x2b4>)
 800fb70:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	891a      	ldrh	r2, [r3, #8]
 800fb76:	4b33      	ldr	r3, [pc, #204]	; (800fc44 <tcp_input+0x2b8>)
 800fb78:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800fb7a:	4b31      	ldr	r3, [pc, #196]	; (800fc40 <tcp_input+0x2b4>)
 800fb7c:	781b      	ldrb	r3, [r3, #0]
 800fb7e:	f003 0303 	and.w	r3, r3, #3
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d00c      	beq.n	800fba0 <tcp_input+0x214>
    tcplen++;
 800fb86:	4b2f      	ldr	r3, [pc, #188]	; (800fc44 <tcp_input+0x2b8>)
 800fb88:	881b      	ldrh	r3, [r3, #0]
 800fb8a:	3301      	adds	r3, #1
 800fb8c:	b29a      	uxth	r2, r3
 800fb8e:	4b2d      	ldr	r3, [pc, #180]	; (800fc44 <tcp_input+0x2b8>)
 800fb90:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	891a      	ldrh	r2, [r3, #8]
 800fb96:	4b2b      	ldr	r3, [pc, #172]	; (800fc44 <tcp_input+0x2b8>)
 800fb98:	881b      	ldrh	r3, [r3, #0]
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	f200 82d9 	bhi.w	8010152 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800fba0:	2300      	movs	r3, #0
 800fba2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fba4:	4b28      	ldr	r3, [pc, #160]	; (800fc48 <tcp_input+0x2bc>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	61fb      	str	r3, [r7, #28]
 800fbaa:	e09d      	b.n	800fce8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800fbac:	69fb      	ldr	r3, [r7, #28]
 800fbae:	7d1b      	ldrb	r3, [r3, #20]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d105      	bne.n	800fbc0 <tcp_input+0x234>
 800fbb4:	4b15      	ldr	r3, [pc, #84]	; (800fc0c <tcp_input+0x280>)
 800fbb6:	22fb      	movs	r2, #251	; 0xfb
 800fbb8:	4924      	ldr	r1, [pc, #144]	; (800fc4c <tcp_input+0x2c0>)
 800fbba:	4816      	ldr	r0, [pc, #88]	; (800fc14 <tcp_input+0x288>)
 800fbbc:	f007 fdf2 	bl	80177a4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800fbc0:	69fb      	ldr	r3, [r7, #28]
 800fbc2:	7d1b      	ldrb	r3, [r3, #20]
 800fbc4:	2b0a      	cmp	r3, #10
 800fbc6:	d105      	bne.n	800fbd4 <tcp_input+0x248>
 800fbc8:	4b10      	ldr	r3, [pc, #64]	; (800fc0c <tcp_input+0x280>)
 800fbca:	22fc      	movs	r2, #252	; 0xfc
 800fbcc:	4920      	ldr	r1, [pc, #128]	; (800fc50 <tcp_input+0x2c4>)
 800fbce:	4811      	ldr	r0, [pc, #68]	; (800fc14 <tcp_input+0x288>)
 800fbd0:	f007 fde8 	bl	80177a4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800fbd4:	69fb      	ldr	r3, [r7, #28]
 800fbd6:	7d1b      	ldrb	r3, [r3, #20]
 800fbd8:	2b01      	cmp	r3, #1
 800fbda:	d105      	bne.n	800fbe8 <tcp_input+0x25c>
 800fbdc:	4b0b      	ldr	r3, [pc, #44]	; (800fc0c <tcp_input+0x280>)
 800fbde:	22fd      	movs	r2, #253	; 0xfd
 800fbe0:	491c      	ldr	r1, [pc, #112]	; (800fc54 <tcp_input+0x2c8>)
 800fbe2:	480c      	ldr	r0, [pc, #48]	; (800fc14 <tcp_input+0x288>)
 800fbe4:	f007 fdde 	bl	80177a4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fbe8:	69fb      	ldr	r3, [r7, #28]
 800fbea:	7a1b      	ldrb	r3, [r3, #8]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d033      	beq.n	800fc58 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fbf0:	69fb      	ldr	r3, [r7, #28]
 800fbf2:	7a1a      	ldrb	r2, [r3, #8]
 800fbf4:	4b09      	ldr	r3, [pc, #36]	; (800fc1c <tcp_input+0x290>)
 800fbf6:	685b      	ldr	r3, [r3, #4]
 800fbf8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fbfc:	3301      	adds	r3, #1
 800fbfe:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d029      	beq.n	800fc58 <tcp_input+0x2cc>
      prev = pcb;
 800fc04:	69fb      	ldr	r3, [r7, #28]
 800fc06:	61bb      	str	r3, [r7, #24]
      continue;
 800fc08:	e06b      	b.n	800fce2 <tcp_input+0x356>
 800fc0a:	bf00      	nop
 800fc0c:	0801a394 	.word	0x0801a394
 800fc10:	0801a3c8 	.word	0x0801a3c8
 800fc14:	0801a3e0 	.word	0x0801a3e0
 800fc18:	20006858 	.word	0x20006858
 800fc1c:	20009f7c 	.word	0x20009f7c
 800fc20:	2000685c 	.word	0x2000685c
 800fc24:	20006860 	.word	0x20006860
 800fc28:	2000685e 	.word	0x2000685e
 800fc2c:	0801a408 	.word	0x0801a408
 800fc30:	0801a418 	.word	0x0801a418
 800fc34:	0801a424 	.word	0x0801a424
 800fc38:	20006868 	.word	0x20006868
 800fc3c:	2000686c 	.word	0x2000686c
 800fc40:	20006874 	.word	0x20006874
 800fc44:	20006872 	.word	0x20006872
 800fc48:	2000d690 	.word	0x2000d690
 800fc4c:	0801a444 	.word	0x0801a444
 800fc50:	0801a46c 	.word	0x0801a46c
 800fc54:	0801a498 	.word	0x0801a498
    }

    if (pcb->remote_port == tcphdr->src &&
 800fc58:	69fb      	ldr	r3, [r7, #28]
 800fc5a:	8b1a      	ldrh	r2, [r3, #24]
 800fc5c:	4b94      	ldr	r3, [pc, #592]	; (800feb0 <tcp_input+0x524>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	881b      	ldrh	r3, [r3, #0]
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	429a      	cmp	r2, r3
 800fc66:	d13a      	bne.n	800fcde <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800fc68:	69fb      	ldr	r3, [r7, #28]
 800fc6a:	8ada      	ldrh	r2, [r3, #22]
 800fc6c:	4b90      	ldr	r3, [pc, #576]	; (800feb0 <tcp_input+0x524>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	885b      	ldrh	r3, [r3, #2]
 800fc72:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800fc74:	429a      	cmp	r2, r3
 800fc76:	d132      	bne.n	800fcde <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fc78:	69fb      	ldr	r3, [r7, #28]
 800fc7a:	685a      	ldr	r2, [r3, #4]
 800fc7c:	4b8d      	ldr	r3, [pc, #564]	; (800feb4 <tcp_input+0x528>)
 800fc7e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800fc80:	429a      	cmp	r2, r3
 800fc82:	d12c      	bne.n	800fcde <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fc84:	69fb      	ldr	r3, [r7, #28]
 800fc86:	681a      	ldr	r2, [r3, #0]
 800fc88:	4b8a      	ldr	r3, [pc, #552]	; (800feb4 <tcp_input+0x528>)
 800fc8a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d126      	bne.n	800fcde <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fc90:	69fb      	ldr	r3, [r7, #28]
 800fc92:	68db      	ldr	r3, [r3, #12]
 800fc94:	69fa      	ldr	r2, [r7, #28]
 800fc96:	429a      	cmp	r2, r3
 800fc98:	d106      	bne.n	800fca8 <tcp_input+0x31c>
 800fc9a:	4b87      	ldr	r3, [pc, #540]	; (800feb8 <tcp_input+0x52c>)
 800fc9c:	f240 120d 	movw	r2, #269	; 0x10d
 800fca0:	4986      	ldr	r1, [pc, #536]	; (800febc <tcp_input+0x530>)
 800fca2:	4887      	ldr	r0, [pc, #540]	; (800fec0 <tcp_input+0x534>)
 800fca4:	f007 fd7e 	bl	80177a4 <iprintf>
      if (prev != NULL) {
 800fca8:	69bb      	ldr	r3, [r7, #24]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d00a      	beq.n	800fcc4 <tcp_input+0x338>
        prev->next = pcb->next;
 800fcae:	69fb      	ldr	r3, [r7, #28]
 800fcb0:	68da      	ldr	r2, [r3, #12]
 800fcb2:	69bb      	ldr	r3, [r7, #24]
 800fcb4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800fcb6:	4b83      	ldr	r3, [pc, #524]	; (800fec4 <tcp_input+0x538>)
 800fcb8:	681a      	ldr	r2, [r3, #0]
 800fcba:	69fb      	ldr	r3, [r7, #28]
 800fcbc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800fcbe:	4a81      	ldr	r2, [pc, #516]	; (800fec4 <tcp_input+0x538>)
 800fcc0:	69fb      	ldr	r3, [r7, #28]
 800fcc2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800fcc4:	69fb      	ldr	r3, [r7, #28]
 800fcc6:	68db      	ldr	r3, [r3, #12]
 800fcc8:	69fa      	ldr	r2, [r7, #28]
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d111      	bne.n	800fcf2 <tcp_input+0x366>
 800fcce:	4b7a      	ldr	r3, [pc, #488]	; (800feb8 <tcp_input+0x52c>)
 800fcd0:	f240 1215 	movw	r2, #277	; 0x115
 800fcd4:	497c      	ldr	r1, [pc, #496]	; (800fec8 <tcp_input+0x53c>)
 800fcd6:	487a      	ldr	r0, [pc, #488]	; (800fec0 <tcp_input+0x534>)
 800fcd8:	f007 fd64 	bl	80177a4 <iprintf>
      break;
 800fcdc:	e009      	b.n	800fcf2 <tcp_input+0x366>
    }
    prev = pcb;
 800fcde:	69fb      	ldr	r3, [r7, #28]
 800fce0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fce2:	69fb      	ldr	r3, [r7, #28]
 800fce4:	68db      	ldr	r3, [r3, #12]
 800fce6:	61fb      	str	r3, [r7, #28]
 800fce8:	69fb      	ldr	r3, [r7, #28]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	f47f af5e 	bne.w	800fbac <tcp_input+0x220>
 800fcf0:	e000      	b.n	800fcf4 <tcp_input+0x368>
      break;
 800fcf2:	bf00      	nop
  }

  if (pcb == NULL) {
 800fcf4:	69fb      	ldr	r3, [r7, #28]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	f040 8095 	bne.w	800fe26 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fcfc:	4b73      	ldr	r3, [pc, #460]	; (800fecc <tcp_input+0x540>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	61fb      	str	r3, [r7, #28]
 800fd02:	e03f      	b.n	800fd84 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fd04:	69fb      	ldr	r3, [r7, #28]
 800fd06:	7d1b      	ldrb	r3, [r3, #20]
 800fd08:	2b0a      	cmp	r3, #10
 800fd0a:	d006      	beq.n	800fd1a <tcp_input+0x38e>
 800fd0c:	4b6a      	ldr	r3, [pc, #424]	; (800feb8 <tcp_input+0x52c>)
 800fd0e:	f240 121f 	movw	r2, #287	; 0x11f
 800fd12:	496f      	ldr	r1, [pc, #444]	; (800fed0 <tcp_input+0x544>)
 800fd14:	486a      	ldr	r0, [pc, #424]	; (800fec0 <tcp_input+0x534>)
 800fd16:	f007 fd45 	bl	80177a4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fd1a:	69fb      	ldr	r3, [r7, #28]
 800fd1c:	7a1b      	ldrb	r3, [r3, #8]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d009      	beq.n	800fd36 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fd22:	69fb      	ldr	r3, [r7, #28]
 800fd24:	7a1a      	ldrb	r2, [r3, #8]
 800fd26:	4b63      	ldr	r3, [pc, #396]	; (800feb4 <tcp_input+0x528>)
 800fd28:	685b      	ldr	r3, [r3, #4]
 800fd2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fd2e:	3301      	adds	r3, #1
 800fd30:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d122      	bne.n	800fd7c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800fd36:	69fb      	ldr	r3, [r7, #28]
 800fd38:	8b1a      	ldrh	r2, [r3, #24]
 800fd3a:	4b5d      	ldr	r3, [pc, #372]	; (800feb0 <tcp_input+0x524>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	881b      	ldrh	r3, [r3, #0]
 800fd40:	b29b      	uxth	r3, r3
 800fd42:	429a      	cmp	r2, r3
 800fd44:	d11b      	bne.n	800fd7e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800fd46:	69fb      	ldr	r3, [r7, #28]
 800fd48:	8ada      	ldrh	r2, [r3, #22]
 800fd4a:	4b59      	ldr	r3, [pc, #356]	; (800feb0 <tcp_input+0x524>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	885b      	ldrh	r3, [r3, #2]
 800fd50:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d113      	bne.n	800fd7e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fd56:	69fb      	ldr	r3, [r7, #28]
 800fd58:	685a      	ldr	r2, [r3, #4]
 800fd5a:	4b56      	ldr	r3, [pc, #344]	; (800feb4 <tcp_input+0x528>)
 800fd5c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d10d      	bne.n	800fd7e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fd62:	69fb      	ldr	r3, [r7, #28]
 800fd64:	681a      	ldr	r2, [r3, #0]
 800fd66:	4b53      	ldr	r3, [pc, #332]	; (800feb4 <tcp_input+0x528>)
 800fd68:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d107      	bne.n	800fd7e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800fd6e:	69f8      	ldr	r0, [r7, #28]
 800fd70:	f000 fb54 	bl	801041c <tcp_timewait_input>
        }
        pbuf_free(p);
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f7fd fdbd 	bl	800d8f4 <pbuf_free>
        return;
 800fd7a:	e1f0      	b.n	801015e <tcp_input+0x7d2>
        continue;
 800fd7c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd7e:	69fb      	ldr	r3, [r7, #28]
 800fd80:	68db      	ldr	r3, [r3, #12]
 800fd82:	61fb      	str	r3, [r7, #28]
 800fd84:	69fb      	ldr	r3, [r7, #28]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d1bc      	bne.n	800fd04 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fd8e:	4b51      	ldr	r3, [pc, #324]	; (800fed4 <tcp_input+0x548>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	617b      	str	r3, [r7, #20]
 800fd94:	e02a      	b.n	800fdec <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	7a1b      	ldrb	r3, [r3, #8]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d00c      	beq.n	800fdb8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	7a1a      	ldrb	r2, [r3, #8]
 800fda2:	4b44      	ldr	r3, [pc, #272]	; (800feb4 <tcp_input+0x528>)
 800fda4:	685b      	ldr	r3, [r3, #4]
 800fda6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fdaa:	3301      	adds	r3, #1
 800fdac:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d002      	beq.n	800fdb8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	61bb      	str	r3, [r7, #24]
        continue;
 800fdb6:	e016      	b.n	800fde6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	8ada      	ldrh	r2, [r3, #22]
 800fdbc:	4b3c      	ldr	r3, [pc, #240]	; (800feb0 <tcp_input+0x524>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	885b      	ldrh	r3, [r3, #2]
 800fdc2:	b29b      	uxth	r3, r3
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	d10c      	bne.n	800fde2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fdc8:	697b      	ldr	r3, [r7, #20]
 800fdca:	681a      	ldr	r2, [r3, #0]
 800fdcc:	4b39      	ldr	r3, [pc, #228]	; (800feb4 <tcp_input+0x528>)
 800fdce:	695b      	ldr	r3, [r3, #20]
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	d00f      	beq.n	800fdf4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d00d      	beq.n	800fdf6 <tcp_input+0x46a>
 800fdda:	697b      	ldr	r3, [r7, #20]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d009      	beq.n	800fdf6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	68db      	ldr	r3, [r3, #12]
 800fdea:	617b      	str	r3, [r7, #20]
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d1d1      	bne.n	800fd96 <tcp_input+0x40a>
 800fdf2:	e000      	b.n	800fdf6 <tcp_input+0x46a>
            break;
 800fdf4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d014      	beq.n	800fe26 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fdfc:	69bb      	ldr	r3, [r7, #24]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d00a      	beq.n	800fe18 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	68da      	ldr	r2, [r3, #12]
 800fe06:	69bb      	ldr	r3, [r7, #24]
 800fe08:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fe0a:	4b32      	ldr	r3, [pc, #200]	; (800fed4 <tcp_input+0x548>)
 800fe0c:	681a      	ldr	r2, [r3, #0]
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fe12:	4a30      	ldr	r2, [pc, #192]	; (800fed4 <tcp_input+0x548>)
 800fe14:	697b      	ldr	r3, [r7, #20]
 800fe16:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800fe18:	6978      	ldr	r0, [r7, #20]
 800fe1a:	f000 fa01 	bl	8010220 <tcp_listen_input>
      }
      pbuf_free(p);
 800fe1e:	6878      	ldr	r0, [r7, #4]
 800fe20:	f7fd fd68 	bl	800d8f4 <pbuf_free>
      return;
 800fe24:	e19b      	b.n	801015e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fe26:	69fb      	ldr	r3, [r7, #28]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	f000 8160 	beq.w	80100ee <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fe2e:	4b2a      	ldr	r3, [pc, #168]	; (800fed8 <tcp_input+0x54c>)
 800fe30:	2200      	movs	r2, #0
 800fe32:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	891a      	ldrh	r2, [r3, #8]
 800fe38:	4b27      	ldr	r3, [pc, #156]	; (800fed8 <tcp_input+0x54c>)
 800fe3a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fe3c:	4a26      	ldr	r2, [pc, #152]	; (800fed8 <tcp_input+0x54c>)
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fe42:	4b1b      	ldr	r3, [pc, #108]	; (800feb0 <tcp_input+0x524>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	4a24      	ldr	r2, [pc, #144]	; (800fed8 <tcp_input+0x54c>)
 800fe48:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fe4a:	4b24      	ldr	r3, [pc, #144]	; (800fedc <tcp_input+0x550>)
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fe50:	4b23      	ldr	r3, [pc, #140]	; (800fee0 <tcp_input+0x554>)
 800fe52:	2200      	movs	r2, #0
 800fe54:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fe56:	4b23      	ldr	r3, [pc, #140]	; (800fee4 <tcp_input+0x558>)
 800fe58:	2200      	movs	r2, #0
 800fe5a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fe5c:	4b22      	ldr	r3, [pc, #136]	; (800fee8 <tcp_input+0x55c>)
 800fe5e:	781b      	ldrb	r3, [r3, #0]
 800fe60:	f003 0308 	and.w	r3, r3, #8
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d006      	beq.n	800fe76 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	7b5b      	ldrb	r3, [r3, #13]
 800fe6c:	f043 0301 	orr.w	r3, r3, #1
 800fe70:	b2da      	uxtb	r2, r3
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fe76:	69fb      	ldr	r3, [r7, #28]
 800fe78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d038      	beq.n	800fef0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fe7e:	69f8      	ldr	r0, [r7, #28]
 800fe80:	f7ff f870 	bl	800ef64 <tcp_process_refused_data>
 800fe84:	4603      	mov	r3, r0
 800fe86:	f113 0f0d 	cmn.w	r3, #13
 800fe8a:	d007      	beq.n	800fe9c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fe8c:	69fb      	ldr	r3, [r7, #28]
 800fe8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d02d      	beq.n	800fef0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fe94:	4b15      	ldr	r3, [pc, #84]	; (800feec <tcp_input+0x560>)
 800fe96:	881b      	ldrh	r3, [r3, #0]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d029      	beq.n	800fef0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fe9c:	69fb      	ldr	r3, [r7, #28]
 800fe9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	f040 8104 	bne.w	80100ae <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fea6:	69f8      	ldr	r0, [r7, #28]
 800fea8:	f003 fe16 	bl	8013ad8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800feac:	e0ff      	b.n	80100ae <tcp_input+0x722>
 800feae:	bf00      	nop
 800feb0:	20006858 	.word	0x20006858
 800feb4:	20009f7c 	.word	0x20009f7c
 800feb8:	0801a394 	.word	0x0801a394
 800febc:	0801a4c0 	.word	0x0801a4c0
 800fec0:	0801a3e0 	.word	0x0801a3e0
 800fec4:	2000d690 	.word	0x2000d690
 800fec8:	0801a4ec 	.word	0x0801a4ec
 800fecc:	2000d6a0 	.word	0x2000d6a0
 800fed0:	0801a518 	.word	0x0801a518
 800fed4:	2000d698 	.word	0x2000d698
 800fed8:	20006848 	.word	0x20006848
 800fedc:	20006878 	.word	0x20006878
 800fee0:	20006875 	.word	0x20006875
 800fee4:	20006870 	.word	0x20006870
 800fee8:	20006874 	.word	0x20006874
 800feec:	20006872 	.word	0x20006872
      }
    }
    tcp_input_pcb = pcb;
 800fef0:	4a9c      	ldr	r2, [pc, #624]	; (8010164 <tcp_input+0x7d8>)
 800fef2:	69fb      	ldr	r3, [r7, #28]
 800fef4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fef6:	69f8      	ldr	r0, [r7, #28]
 800fef8:	f000 fb0a 	bl	8010510 <tcp_process>
 800fefc:	4603      	mov	r3, r0
 800fefe:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ff00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ff04:	f113 0f0d 	cmn.w	r3, #13
 800ff08:	f000 80d3 	beq.w	80100b2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800ff0c:	4b96      	ldr	r3, [pc, #600]	; (8010168 <tcp_input+0x7dc>)
 800ff0e:	781b      	ldrb	r3, [r3, #0]
 800ff10:	f003 0308 	and.w	r3, r3, #8
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d015      	beq.n	800ff44 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ff18:	69fb      	ldr	r3, [r7, #28]
 800ff1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d008      	beq.n	800ff34 <tcp_input+0x5a8>
 800ff22:	69fb      	ldr	r3, [r7, #28]
 800ff24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff28:	69fa      	ldr	r2, [r7, #28]
 800ff2a:	6912      	ldr	r2, [r2, #16]
 800ff2c:	f06f 010d 	mvn.w	r1, #13
 800ff30:	4610      	mov	r0, r2
 800ff32:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ff34:	69f9      	ldr	r1, [r7, #28]
 800ff36:	488d      	ldr	r0, [pc, #564]	; (801016c <tcp_input+0x7e0>)
 800ff38:	f7ff fbb0 	bl	800f69c <tcp_pcb_remove>
        tcp_free(pcb);
 800ff3c:	69f8      	ldr	r0, [r7, #28]
 800ff3e:	f7fd ff95 	bl	800de6c <tcp_free>
 800ff42:	e0c1      	b.n	80100c8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800ff44:	2300      	movs	r3, #0
 800ff46:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ff48:	4b89      	ldr	r3, [pc, #548]	; (8010170 <tcp_input+0x7e4>)
 800ff4a:	881b      	ldrh	r3, [r3, #0]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d01d      	beq.n	800ff8c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ff50:	4b87      	ldr	r3, [pc, #540]	; (8010170 <tcp_input+0x7e4>)
 800ff52:	881b      	ldrh	r3, [r3, #0]
 800ff54:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ff56:	69fb      	ldr	r3, [r7, #28]
 800ff58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d00a      	beq.n	800ff76 <tcp_input+0x5ea>
 800ff60:	69fb      	ldr	r3, [r7, #28]
 800ff62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff66:	69fa      	ldr	r2, [r7, #28]
 800ff68:	6910      	ldr	r0, [r2, #16]
 800ff6a:	89fa      	ldrh	r2, [r7, #14]
 800ff6c:	69f9      	ldr	r1, [r7, #28]
 800ff6e:	4798      	blx	r3
 800ff70:	4603      	mov	r3, r0
 800ff72:	74fb      	strb	r3, [r7, #19]
 800ff74:	e001      	b.n	800ff7a <tcp_input+0x5ee>
 800ff76:	2300      	movs	r3, #0
 800ff78:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ff7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ff7e:	f113 0f0d 	cmn.w	r3, #13
 800ff82:	f000 8098 	beq.w	80100b6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ff86:	4b7a      	ldr	r3, [pc, #488]	; (8010170 <tcp_input+0x7e4>)
 800ff88:	2200      	movs	r2, #0
 800ff8a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ff8c:	69f8      	ldr	r0, [r7, #28]
 800ff8e:	f000 f907 	bl	80101a0 <tcp_input_delayed_close>
 800ff92:	4603      	mov	r3, r0
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	f040 8090 	bne.w	80100ba <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ff9a:	4b76      	ldr	r3, [pc, #472]	; (8010174 <tcp_input+0x7e8>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d041      	beq.n	8010026 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ffa2:	69fb      	ldr	r3, [r7, #28]
 800ffa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d006      	beq.n	800ffb8 <tcp_input+0x62c>
 800ffaa:	4b73      	ldr	r3, [pc, #460]	; (8010178 <tcp_input+0x7ec>)
 800ffac:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ffb0:	4972      	ldr	r1, [pc, #456]	; (801017c <tcp_input+0x7f0>)
 800ffb2:	4873      	ldr	r0, [pc, #460]	; (8010180 <tcp_input+0x7f4>)
 800ffb4:	f007 fbf6 	bl	80177a4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ffb8:	69fb      	ldr	r3, [r7, #28]
 800ffba:	8b5b      	ldrh	r3, [r3, #26]
 800ffbc:	f003 0310 	and.w	r3, r3, #16
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d008      	beq.n	800ffd6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ffc4:	4b6b      	ldr	r3, [pc, #428]	; (8010174 <tcp_input+0x7e8>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f7fd fc93 	bl	800d8f4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ffce:	69f8      	ldr	r0, [r7, #28]
 800ffd0:	f7fe fa90 	bl	800e4f4 <tcp_abort>
            goto aborted;
 800ffd4:	e078      	b.n	80100c8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ffd6:	69fb      	ldr	r3, [r7, #28]
 800ffd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d00c      	beq.n	800fffa <tcp_input+0x66e>
 800ffe0:	69fb      	ldr	r3, [r7, #28]
 800ffe2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ffe6:	69fb      	ldr	r3, [r7, #28]
 800ffe8:	6918      	ldr	r0, [r3, #16]
 800ffea:	4b62      	ldr	r3, [pc, #392]	; (8010174 <tcp_input+0x7e8>)
 800ffec:	681a      	ldr	r2, [r3, #0]
 800ffee:	2300      	movs	r3, #0
 800fff0:	69f9      	ldr	r1, [r7, #28]
 800fff2:	47a0      	blx	r4
 800fff4:	4603      	mov	r3, r0
 800fff6:	74fb      	strb	r3, [r7, #19]
 800fff8:	e008      	b.n	801000c <tcp_input+0x680>
 800fffa:	4b5e      	ldr	r3, [pc, #376]	; (8010174 <tcp_input+0x7e8>)
 800fffc:	681a      	ldr	r2, [r3, #0]
 800fffe:	2300      	movs	r3, #0
 8010000:	69f9      	ldr	r1, [r7, #28]
 8010002:	2000      	movs	r0, #0
 8010004:	f7ff f884 	bl	800f110 <tcp_recv_null>
 8010008:	4603      	mov	r3, r0
 801000a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801000c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010010:	f113 0f0d 	cmn.w	r3, #13
 8010014:	d053      	beq.n	80100be <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010016:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d003      	beq.n	8010026 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801001e:	4b55      	ldr	r3, [pc, #340]	; (8010174 <tcp_input+0x7e8>)
 8010020:	681a      	ldr	r2, [r3, #0]
 8010022:	69fb      	ldr	r3, [r7, #28]
 8010024:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010026:	4b50      	ldr	r3, [pc, #320]	; (8010168 <tcp_input+0x7dc>)
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	f003 0320 	and.w	r3, r3, #32
 801002e:	2b00      	cmp	r3, #0
 8010030:	d030      	beq.n	8010094 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8010032:	69fb      	ldr	r3, [r7, #28]
 8010034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010036:	2b00      	cmp	r3, #0
 8010038:	d009      	beq.n	801004e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801003a:	69fb      	ldr	r3, [r7, #28]
 801003c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801003e:	7b5a      	ldrb	r2, [r3, #13]
 8010040:	69fb      	ldr	r3, [r7, #28]
 8010042:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010044:	f042 0220 	orr.w	r2, r2, #32
 8010048:	b2d2      	uxtb	r2, r2
 801004a:	735a      	strb	r2, [r3, #13]
 801004c:	e022      	b.n	8010094 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801004e:	69fb      	ldr	r3, [r7, #28]
 8010050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010052:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010056:	d005      	beq.n	8010064 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010058:	69fb      	ldr	r3, [r7, #28]
 801005a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801005c:	3301      	adds	r3, #1
 801005e:	b29a      	uxth	r2, r3
 8010060:	69fb      	ldr	r3, [r7, #28]
 8010062:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010064:	69fb      	ldr	r3, [r7, #28]
 8010066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801006a:	2b00      	cmp	r3, #0
 801006c:	d00b      	beq.n	8010086 <tcp_input+0x6fa>
 801006e:	69fb      	ldr	r3, [r7, #28]
 8010070:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010074:	69fb      	ldr	r3, [r7, #28]
 8010076:	6918      	ldr	r0, [r3, #16]
 8010078:	2300      	movs	r3, #0
 801007a:	2200      	movs	r2, #0
 801007c:	69f9      	ldr	r1, [r7, #28]
 801007e:	47a0      	blx	r4
 8010080:	4603      	mov	r3, r0
 8010082:	74fb      	strb	r3, [r7, #19]
 8010084:	e001      	b.n	801008a <tcp_input+0x6fe>
 8010086:	2300      	movs	r3, #0
 8010088:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801008a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801008e:	f113 0f0d 	cmn.w	r3, #13
 8010092:	d016      	beq.n	80100c2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010094:	4b33      	ldr	r3, [pc, #204]	; (8010164 <tcp_input+0x7d8>)
 8010096:	2200      	movs	r2, #0
 8010098:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801009a:	69f8      	ldr	r0, [r7, #28]
 801009c:	f000 f880 	bl	80101a0 <tcp_input_delayed_close>
 80100a0:	4603      	mov	r3, r0
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d10f      	bne.n	80100c6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80100a6:	69f8      	ldr	r0, [r7, #28]
 80100a8:	f002 ff10 	bl	8012ecc <tcp_output>
 80100ac:	e00c      	b.n	80100c8 <tcp_input+0x73c>
        goto aborted;
 80100ae:	bf00      	nop
 80100b0:	e00a      	b.n	80100c8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80100b2:	bf00      	nop
 80100b4:	e008      	b.n	80100c8 <tcp_input+0x73c>
              goto aborted;
 80100b6:	bf00      	nop
 80100b8:	e006      	b.n	80100c8 <tcp_input+0x73c>
          goto aborted;
 80100ba:	bf00      	nop
 80100bc:	e004      	b.n	80100c8 <tcp_input+0x73c>
            goto aborted;
 80100be:	bf00      	nop
 80100c0:	e002      	b.n	80100c8 <tcp_input+0x73c>
              goto aborted;
 80100c2:	bf00      	nop
 80100c4:	e000      	b.n	80100c8 <tcp_input+0x73c>
          goto aborted;
 80100c6:	bf00      	nop
    tcp_input_pcb = NULL;
 80100c8:	4b26      	ldr	r3, [pc, #152]	; (8010164 <tcp_input+0x7d8>)
 80100ca:	2200      	movs	r2, #0
 80100cc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80100ce:	4b29      	ldr	r3, [pc, #164]	; (8010174 <tcp_input+0x7e8>)
 80100d0:	2200      	movs	r2, #0
 80100d2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80100d4:	4b2b      	ldr	r3, [pc, #172]	; (8010184 <tcp_input+0x7f8>)
 80100d6:	685b      	ldr	r3, [r3, #4]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d03f      	beq.n	801015c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 80100dc:	4b29      	ldr	r3, [pc, #164]	; (8010184 <tcp_input+0x7f8>)
 80100de:	685b      	ldr	r3, [r3, #4]
 80100e0:	4618      	mov	r0, r3
 80100e2:	f7fd fc07 	bl	800d8f4 <pbuf_free>
      inseg.p = NULL;
 80100e6:	4b27      	ldr	r3, [pc, #156]	; (8010184 <tcp_input+0x7f8>)
 80100e8:	2200      	movs	r2, #0
 80100ea:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80100ec:	e036      	b.n	801015c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80100ee:	4b26      	ldr	r3, [pc, #152]	; (8010188 <tcp_input+0x7fc>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	899b      	ldrh	r3, [r3, #12]
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	4618      	mov	r0, r3
 80100f8:	f7fc f8b4 	bl	800c264 <lwip_htons>
 80100fc:	4603      	mov	r3, r0
 80100fe:	b2db      	uxtb	r3, r3
 8010100:	f003 0304 	and.w	r3, r3, #4
 8010104:	2b00      	cmp	r3, #0
 8010106:	d118      	bne.n	801013a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010108:	4b20      	ldr	r3, [pc, #128]	; (801018c <tcp_input+0x800>)
 801010a:	6819      	ldr	r1, [r3, #0]
 801010c:	4b20      	ldr	r3, [pc, #128]	; (8010190 <tcp_input+0x804>)
 801010e:	881b      	ldrh	r3, [r3, #0]
 8010110:	461a      	mov	r2, r3
 8010112:	4b20      	ldr	r3, [pc, #128]	; (8010194 <tcp_input+0x808>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010118:	4b1b      	ldr	r3, [pc, #108]	; (8010188 <tcp_input+0x7fc>)
 801011a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801011c:	885b      	ldrh	r3, [r3, #2]
 801011e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010120:	4a19      	ldr	r2, [pc, #100]	; (8010188 <tcp_input+0x7fc>)
 8010122:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010124:	8812      	ldrh	r2, [r2, #0]
 8010126:	b292      	uxth	r2, r2
 8010128:	9202      	str	r2, [sp, #8]
 801012a:	9301      	str	r3, [sp, #4]
 801012c:	4b1a      	ldr	r3, [pc, #104]	; (8010198 <tcp_input+0x80c>)
 801012e:	9300      	str	r3, [sp, #0]
 8010130:	4b1a      	ldr	r3, [pc, #104]	; (801019c <tcp_input+0x810>)
 8010132:	4602      	mov	r2, r0
 8010134:	2000      	movs	r0, #0
 8010136:	f003 fc7d 	bl	8013a34 <tcp_rst>
    pbuf_free(p);
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f7fd fbda 	bl	800d8f4 <pbuf_free>
  return;
 8010140:	e00c      	b.n	801015c <tcp_input+0x7d0>
    goto dropped;
 8010142:	bf00      	nop
 8010144:	e006      	b.n	8010154 <tcp_input+0x7c8>
    goto dropped;
 8010146:	bf00      	nop
 8010148:	e004      	b.n	8010154 <tcp_input+0x7c8>
    goto dropped;
 801014a:	bf00      	nop
 801014c:	e002      	b.n	8010154 <tcp_input+0x7c8>
      goto dropped;
 801014e:	bf00      	nop
 8010150:	e000      	b.n	8010154 <tcp_input+0x7c8>
      goto dropped;
 8010152:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f7fd fbcd 	bl	800d8f4 <pbuf_free>
 801015a:	e000      	b.n	801015e <tcp_input+0x7d2>
  return;
 801015c:	bf00      	nop
}
 801015e:	3724      	adds	r7, #36	; 0x24
 8010160:	46bd      	mov	sp, r7
 8010162:	bd90      	pop	{r4, r7, pc}
 8010164:	2000d6a4 	.word	0x2000d6a4
 8010168:	20006875 	.word	0x20006875
 801016c:	2000d690 	.word	0x2000d690
 8010170:	20006870 	.word	0x20006870
 8010174:	20006878 	.word	0x20006878
 8010178:	0801a394 	.word	0x0801a394
 801017c:	0801a548 	.word	0x0801a548
 8010180:	0801a3e0 	.word	0x0801a3e0
 8010184:	20006848 	.word	0x20006848
 8010188:	20006858 	.word	0x20006858
 801018c:	2000686c 	.word	0x2000686c
 8010190:	20006872 	.word	0x20006872
 8010194:	20006868 	.word	0x20006868
 8010198:	20009f8c 	.word	0x20009f8c
 801019c:	20009f90 	.word	0x20009f90

080101a0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b082      	sub	sp, #8
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d106      	bne.n	80101bc <tcp_input_delayed_close+0x1c>
 80101ae:	4b17      	ldr	r3, [pc, #92]	; (801020c <tcp_input_delayed_close+0x6c>)
 80101b0:	f240 225a 	movw	r2, #602	; 0x25a
 80101b4:	4916      	ldr	r1, [pc, #88]	; (8010210 <tcp_input_delayed_close+0x70>)
 80101b6:	4817      	ldr	r0, [pc, #92]	; (8010214 <tcp_input_delayed_close+0x74>)
 80101b8:	f007 faf4 	bl	80177a4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80101bc:	4b16      	ldr	r3, [pc, #88]	; (8010218 <tcp_input_delayed_close+0x78>)
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	f003 0310 	and.w	r3, r3, #16
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d01c      	beq.n	8010202 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	8b5b      	ldrh	r3, [r3, #26]
 80101cc:	f003 0310 	and.w	r3, r3, #16
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d10d      	bne.n	80101f0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d008      	beq.n	80101f0 <tcp_input_delayed_close+0x50>
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101e4:	687a      	ldr	r2, [r7, #4]
 80101e6:	6912      	ldr	r2, [r2, #16]
 80101e8:	f06f 010e 	mvn.w	r1, #14
 80101ec:	4610      	mov	r0, r2
 80101ee:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80101f0:	6879      	ldr	r1, [r7, #4]
 80101f2:	480a      	ldr	r0, [pc, #40]	; (801021c <tcp_input_delayed_close+0x7c>)
 80101f4:	f7ff fa52 	bl	800f69c <tcp_pcb_remove>
    tcp_free(pcb);
 80101f8:	6878      	ldr	r0, [r7, #4]
 80101fa:	f7fd fe37 	bl	800de6c <tcp_free>
    return 1;
 80101fe:	2301      	movs	r3, #1
 8010200:	e000      	b.n	8010204 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010202:	2300      	movs	r3, #0
}
 8010204:	4618      	mov	r0, r3
 8010206:	3708      	adds	r7, #8
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}
 801020c:	0801a394 	.word	0x0801a394
 8010210:	0801a564 	.word	0x0801a564
 8010214:	0801a3e0 	.word	0x0801a3e0
 8010218:	20006875 	.word	0x20006875
 801021c:	2000d690 	.word	0x2000d690

08010220 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010220:	b590      	push	{r4, r7, lr}
 8010222:	b08b      	sub	sp, #44	; 0x2c
 8010224:	af04      	add	r7, sp, #16
 8010226:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010228:	4b6f      	ldr	r3, [pc, #444]	; (80103e8 <tcp_listen_input+0x1c8>)
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	f003 0304 	and.w	r3, r3, #4
 8010230:	2b00      	cmp	r3, #0
 8010232:	f040 80d2 	bne.w	80103da <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d106      	bne.n	801024a <tcp_listen_input+0x2a>
 801023c:	4b6b      	ldr	r3, [pc, #428]	; (80103ec <tcp_listen_input+0x1cc>)
 801023e:	f240 2281 	movw	r2, #641	; 0x281
 8010242:	496b      	ldr	r1, [pc, #428]	; (80103f0 <tcp_listen_input+0x1d0>)
 8010244:	486b      	ldr	r0, [pc, #428]	; (80103f4 <tcp_listen_input+0x1d4>)
 8010246:	f007 faad 	bl	80177a4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801024a:	4b67      	ldr	r3, [pc, #412]	; (80103e8 <tcp_listen_input+0x1c8>)
 801024c:	781b      	ldrb	r3, [r3, #0]
 801024e:	f003 0310 	and.w	r3, r3, #16
 8010252:	2b00      	cmp	r3, #0
 8010254:	d019      	beq.n	801028a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010256:	4b68      	ldr	r3, [pc, #416]	; (80103f8 <tcp_listen_input+0x1d8>)
 8010258:	6819      	ldr	r1, [r3, #0]
 801025a:	4b68      	ldr	r3, [pc, #416]	; (80103fc <tcp_listen_input+0x1dc>)
 801025c:	881b      	ldrh	r3, [r3, #0]
 801025e:	461a      	mov	r2, r3
 8010260:	4b67      	ldr	r3, [pc, #412]	; (8010400 <tcp_listen_input+0x1e0>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010266:	4b67      	ldr	r3, [pc, #412]	; (8010404 <tcp_listen_input+0x1e4>)
 8010268:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801026a:	885b      	ldrh	r3, [r3, #2]
 801026c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801026e:	4a65      	ldr	r2, [pc, #404]	; (8010404 <tcp_listen_input+0x1e4>)
 8010270:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010272:	8812      	ldrh	r2, [r2, #0]
 8010274:	b292      	uxth	r2, r2
 8010276:	9202      	str	r2, [sp, #8]
 8010278:	9301      	str	r3, [sp, #4]
 801027a:	4b63      	ldr	r3, [pc, #396]	; (8010408 <tcp_listen_input+0x1e8>)
 801027c:	9300      	str	r3, [sp, #0]
 801027e:	4b63      	ldr	r3, [pc, #396]	; (801040c <tcp_listen_input+0x1ec>)
 8010280:	4602      	mov	r2, r0
 8010282:	6878      	ldr	r0, [r7, #4]
 8010284:	f003 fbd6 	bl	8013a34 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010288:	e0a9      	b.n	80103de <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801028a:	4b57      	ldr	r3, [pc, #348]	; (80103e8 <tcp_listen_input+0x1c8>)
 801028c:	781b      	ldrb	r3, [r3, #0]
 801028e:	f003 0302 	and.w	r3, r3, #2
 8010292:	2b00      	cmp	r3, #0
 8010294:	f000 80a3 	beq.w	80103de <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	7d5b      	ldrb	r3, [r3, #21]
 801029c:	4618      	mov	r0, r3
 801029e:	f7ff f85b 	bl	800f358 <tcp_alloc>
 80102a2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d111      	bne.n	80102ce <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	699b      	ldr	r3, [r3, #24]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d00a      	beq.n	80102c8 <tcp_listen_input+0xa8>
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	699b      	ldr	r3, [r3, #24]
 80102b6:	687a      	ldr	r2, [r7, #4]
 80102b8:	6910      	ldr	r0, [r2, #16]
 80102ba:	f04f 32ff 	mov.w	r2, #4294967295
 80102be:	2100      	movs	r1, #0
 80102c0:	4798      	blx	r3
 80102c2:	4603      	mov	r3, r0
 80102c4:	73bb      	strb	r3, [r7, #14]
      return;
 80102c6:	e08b      	b.n	80103e0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80102c8:	23f0      	movs	r3, #240	; 0xf0
 80102ca:	73bb      	strb	r3, [r7, #14]
      return;
 80102cc:	e088      	b.n	80103e0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80102ce:	4b50      	ldr	r3, [pc, #320]	; (8010410 <tcp_listen_input+0x1f0>)
 80102d0:	695a      	ldr	r2, [r3, #20]
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80102d6:	4b4e      	ldr	r3, [pc, #312]	; (8010410 <tcp_listen_input+0x1f0>)
 80102d8:	691a      	ldr	r2, [r3, #16]
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	8ada      	ldrh	r2, [r3, #22]
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80102e6:	4b47      	ldr	r3, [pc, #284]	; (8010404 <tcp_listen_input+0x1e4>)
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	881b      	ldrh	r3, [r3, #0]
 80102ec:	b29a      	uxth	r2, r3
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	2203      	movs	r2, #3
 80102f6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80102f8:	4b41      	ldr	r3, [pc, #260]	; (8010400 <tcp_listen_input+0x1e0>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	1c5a      	adds	r2, r3, #1
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801030a:	6978      	ldr	r0, [r7, #20]
 801030c:	f7ff fa5a 	bl	800f7c4 <tcp_next_iss>
 8010310:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010312:	697b      	ldr	r3, [r7, #20]
 8010314:	693a      	ldr	r2, [r7, #16]
 8010316:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	693a      	ldr	r2, [r7, #16]
 801031c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	693a      	ldr	r2, [r7, #16]
 8010322:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010324:	697b      	ldr	r3, [r7, #20]
 8010326:	693a      	ldr	r2, [r7, #16]
 8010328:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801032a:	4b35      	ldr	r3, [pc, #212]	; (8010400 <tcp_listen_input+0x1e0>)
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	1e5a      	subs	r2, r3, #1
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	691a      	ldr	r2, [r3, #16]
 8010338:	697b      	ldr	r3, [r7, #20]
 801033a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	687a      	ldr	r2, [r7, #4]
 8010340:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	7a5b      	ldrb	r3, [r3, #9]
 8010346:	f003 030c 	and.w	r3, r3, #12
 801034a:	b2da      	uxtb	r2, r3
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	7a1a      	ldrb	r2, [r3, #8]
 8010354:	697b      	ldr	r3, [r7, #20]
 8010356:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010358:	4b2e      	ldr	r3, [pc, #184]	; (8010414 <tcp_listen_input+0x1f4>)
 801035a:	681a      	ldr	r2, [r3, #0]
 801035c:	697b      	ldr	r3, [r7, #20]
 801035e:	60da      	str	r2, [r3, #12]
 8010360:	4a2c      	ldr	r2, [pc, #176]	; (8010414 <tcp_listen_input+0x1f4>)
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	6013      	str	r3, [r2, #0]
 8010366:	f003 fd27 	bl	8013db8 <tcp_timer_needed>
 801036a:	4b2b      	ldr	r3, [pc, #172]	; (8010418 <tcp_listen_input+0x1f8>)
 801036c:	2201      	movs	r2, #1
 801036e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010370:	6978      	ldr	r0, [r7, #20]
 8010372:	f001 fd8d 	bl	8011e90 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010376:	4b23      	ldr	r3, [pc, #140]	; (8010404 <tcp_listen_input+0x1e4>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	89db      	ldrh	r3, [r3, #14]
 801037c:	b29a      	uxth	r2, r3
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010384:	697b      	ldr	r3, [r7, #20]
 8010386:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801038a:	697b      	ldr	r3, [r7, #20]
 801038c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010394:	697b      	ldr	r3, [r7, #20]
 8010396:	3304      	adds	r3, #4
 8010398:	4618      	mov	r0, r3
 801039a:	f005 fc4b 	bl	8015c34 <ip4_route>
 801039e:	4601      	mov	r1, r0
 80103a0:	697b      	ldr	r3, [r7, #20]
 80103a2:	3304      	adds	r3, #4
 80103a4:	461a      	mov	r2, r3
 80103a6:	4620      	mov	r0, r4
 80103a8:	f7ff fa32 	bl	800f810 <tcp_eff_send_mss_netif>
 80103ac:	4603      	mov	r3, r0
 80103ae:	461a      	mov	r2, r3
 80103b0:	697b      	ldr	r3, [r7, #20]
 80103b2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80103b4:	2112      	movs	r1, #18
 80103b6:	6978      	ldr	r0, [r7, #20]
 80103b8:	f002 fc9a 	bl	8012cf0 <tcp_enqueue_flags>
 80103bc:	4603      	mov	r3, r0
 80103be:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80103c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d004      	beq.n	80103d2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80103c8:	2100      	movs	r1, #0
 80103ca:	6978      	ldr	r0, [r7, #20]
 80103cc:	f7fd ffd4 	bl	800e378 <tcp_abandon>
      return;
 80103d0:	e006      	b.n	80103e0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80103d2:	6978      	ldr	r0, [r7, #20]
 80103d4:	f002 fd7a 	bl	8012ecc <tcp_output>
  return;
 80103d8:	e001      	b.n	80103de <tcp_listen_input+0x1be>
    return;
 80103da:	bf00      	nop
 80103dc:	e000      	b.n	80103e0 <tcp_listen_input+0x1c0>
  return;
 80103de:	bf00      	nop
}
 80103e0:	371c      	adds	r7, #28
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd90      	pop	{r4, r7, pc}
 80103e6:	bf00      	nop
 80103e8:	20006874 	.word	0x20006874
 80103ec:	0801a394 	.word	0x0801a394
 80103f0:	0801a58c 	.word	0x0801a58c
 80103f4:	0801a3e0 	.word	0x0801a3e0
 80103f8:	2000686c 	.word	0x2000686c
 80103fc:	20006872 	.word	0x20006872
 8010400:	20006868 	.word	0x20006868
 8010404:	20006858 	.word	0x20006858
 8010408:	20009f8c 	.word	0x20009f8c
 801040c:	20009f90 	.word	0x20009f90
 8010410:	20009f7c 	.word	0x20009f7c
 8010414:	2000d690 	.word	0x2000d690
 8010418:	2000d68c 	.word	0x2000d68c

0801041c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b086      	sub	sp, #24
 8010420:	af04      	add	r7, sp, #16
 8010422:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010424:	4b2f      	ldr	r3, [pc, #188]	; (80104e4 <tcp_timewait_input+0xc8>)
 8010426:	781b      	ldrb	r3, [r3, #0]
 8010428:	f003 0304 	and.w	r3, r3, #4
 801042c:	2b00      	cmp	r3, #0
 801042e:	d153      	bne.n	80104d8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d106      	bne.n	8010444 <tcp_timewait_input+0x28>
 8010436:	4b2c      	ldr	r3, [pc, #176]	; (80104e8 <tcp_timewait_input+0xcc>)
 8010438:	f240 22ee 	movw	r2, #750	; 0x2ee
 801043c:	492b      	ldr	r1, [pc, #172]	; (80104ec <tcp_timewait_input+0xd0>)
 801043e:	482c      	ldr	r0, [pc, #176]	; (80104f0 <tcp_timewait_input+0xd4>)
 8010440:	f007 f9b0 	bl	80177a4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010444:	4b27      	ldr	r3, [pc, #156]	; (80104e4 <tcp_timewait_input+0xc8>)
 8010446:	781b      	ldrb	r3, [r3, #0]
 8010448:	f003 0302 	and.w	r3, r3, #2
 801044c:	2b00      	cmp	r3, #0
 801044e:	d02a      	beq.n	80104a6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010450:	4b28      	ldr	r3, [pc, #160]	; (80104f4 <tcp_timewait_input+0xd8>)
 8010452:	681a      	ldr	r2, [r3, #0]
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010458:	1ad3      	subs	r3, r2, r3
 801045a:	2b00      	cmp	r3, #0
 801045c:	db2d      	blt.n	80104ba <tcp_timewait_input+0x9e>
 801045e:	4b25      	ldr	r3, [pc, #148]	; (80104f4 <tcp_timewait_input+0xd8>)
 8010460:	681a      	ldr	r2, [r3, #0]
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010466:	6879      	ldr	r1, [r7, #4]
 8010468:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801046a:	440b      	add	r3, r1
 801046c:	1ad3      	subs	r3, r2, r3
 801046e:	2b00      	cmp	r3, #0
 8010470:	dc23      	bgt.n	80104ba <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010472:	4b21      	ldr	r3, [pc, #132]	; (80104f8 <tcp_timewait_input+0xdc>)
 8010474:	6819      	ldr	r1, [r3, #0]
 8010476:	4b21      	ldr	r3, [pc, #132]	; (80104fc <tcp_timewait_input+0xe0>)
 8010478:	881b      	ldrh	r3, [r3, #0]
 801047a:	461a      	mov	r2, r3
 801047c:	4b1d      	ldr	r3, [pc, #116]	; (80104f4 <tcp_timewait_input+0xd8>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010482:	4b1f      	ldr	r3, [pc, #124]	; (8010500 <tcp_timewait_input+0xe4>)
 8010484:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010486:	885b      	ldrh	r3, [r3, #2]
 8010488:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801048a:	4a1d      	ldr	r2, [pc, #116]	; (8010500 <tcp_timewait_input+0xe4>)
 801048c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801048e:	8812      	ldrh	r2, [r2, #0]
 8010490:	b292      	uxth	r2, r2
 8010492:	9202      	str	r2, [sp, #8]
 8010494:	9301      	str	r3, [sp, #4]
 8010496:	4b1b      	ldr	r3, [pc, #108]	; (8010504 <tcp_timewait_input+0xe8>)
 8010498:	9300      	str	r3, [sp, #0]
 801049a:	4b1b      	ldr	r3, [pc, #108]	; (8010508 <tcp_timewait_input+0xec>)
 801049c:	4602      	mov	r2, r0
 801049e:	6878      	ldr	r0, [r7, #4]
 80104a0:	f003 fac8 	bl	8013a34 <tcp_rst>
      return;
 80104a4:	e01b      	b.n	80104de <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80104a6:	4b0f      	ldr	r3, [pc, #60]	; (80104e4 <tcp_timewait_input+0xc8>)
 80104a8:	781b      	ldrb	r3, [r3, #0]
 80104aa:	f003 0301 	and.w	r3, r3, #1
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d003      	beq.n	80104ba <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80104b2:	4b16      	ldr	r3, [pc, #88]	; (801050c <tcp_timewait_input+0xf0>)
 80104b4:	681a      	ldr	r2, [r3, #0]
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80104ba:	4b10      	ldr	r3, [pc, #64]	; (80104fc <tcp_timewait_input+0xe0>)
 80104bc:	881b      	ldrh	r3, [r3, #0]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d00c      	beq.n	80104dc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	8b5b      	ldrh	r3, [r3, #26]
 80104c6:	f043 0302 	orr.w	r3, r3, #2
 80104ca:	b29a      	uxth	r2, r3
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80104d0:	6878      	ldr	r0, [r7, #4]
 80104d2:	f002 fcfb 	bl	8012ecc <tcp_output>
  }
  return;
 80104d6:	e001      	b.n	80104dc <tcp_timewait_input+0xc0>
    return;
 80104d8:	bf00      	nop
 80104da:	e000      	b.n	80104de <tcp_timewait_input+0xc2>
  return;
 80104dc:	bf00      	nop
}
 80104de:	3708      	adds	r7, #8
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}
 80104e4:	20006874 	.word	0x20006874
 80104e8:	0801a394 	.word	0x0801a394
 80104ec:	0801a5ac 	.word	0x0801a5ac
 80104f0:	0801a3e0 	.word	0x0801a3e0
 80104f4:	20006868 	.word	0x20006868
 80104f8:	2000686c 	.word	0x2000686c
 80104fc:	20006872 	.word	0x20006872
 8010500:	20006858 	.word	0x20006858
 8010504:	20009f8c 	.word	0x20009f8c
 8010508:	20009f90 	.word	0x20009f90
 801050c:	2000d694 	.word	0x2000d694

08010510 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010510:	b590      	push	{r4, r7, lr}
 8010512:	b08d      	sub	sp, #52	; 0x34
 8010514:	af04      	add	r7, sp, #16
 8010516:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010518:	2300      	movs	r3, #0
 801051a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801051c:	2300      	movs	r3, #0
 801051e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d106      	bne.n	8010534 <tcp_process+0x24>
 8010526:	4ba5      	ldr	r3, [pc, #660]	; (80107bc <tcp_process+0x2ac>)
 8010528:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801052c:	49a4      	ldr	r1, [pc, #656]	; (80107c0 <tcp_process+0x2b0>)
 801052e:	48a5      	ldr	r0, [pc, #660]	; (80107c4 <tcp_process+0x2b4>)
 8010530:	f007 f938 	bl	80177a4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010534:	4ba4      	ldr	r3, [pc, #656]	; (80107c8 <tcp_process+0x2b8>)
 8010536:	781b      	ldrb	r3, [r3, #0]
 8010538:	f003 0304 	and.w	r3, r3, #4
 801053c:	2b00      	cmp	r3, #0
 801053e:	d04e      	beq.n	80105de <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	7d1b      	ldrb	r3, [r3, #20]
 8010544:	2b02      	cmp	r3, #2
 8010546:	d108      	bne.n	801055a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801054c:	4b9f      	ldr	r3, [pc, #636]	; (80107cc <tcp_process+0x2bc>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	429a      	cmp	r2, r3
 8010552:	d123      	bne.n	801059c <tcp_process+0x8c>
        acceptable = 1;
 8010554:	2301      	movs	r3, #1
 8010556:	76fb      	strb	r3, [r7, #27]
 8010558:	e020      	b.n	801059c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801055e:	4b9c      	ldr	r3, [pc, #624]	; (80107d0 <tcp_process+0x2c0>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	429a      	cmp	r2, r3
 8010564:	d102      	bne.n	801056c <tcp_process+0x5c>
        acceptable = 1;
 8010566:	2301      	movs	r3, #1
 8010568:	76fb      	strb	r3, [r7, #27]
 801056a:	e017      	b.n	801059c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801056c:	4b98      	ldr	r3, [pc, #608]	; (80107d0 <tcp_process+0x2c0>)
 801056e:	681a      	ldr	r2, [r3, #0]
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010574:	1ad3      	subs	r3, r2, r3
 8010576:	2b00      	cmp	r3, #0
 8010578:	db10      	blt.n	801059c <tcp_process+0x8c>
 801057a:	4b95      	ldr	r3, [pc, #596]	; (80107d0 <tcp_process+0x2c0>)
 801057c:	681a      	ldr	r2, [r3, #0]
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010582:	6879      	ldr	r1, [r7, #4]
 8010584:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010586:	440b      	add	r3, r1
 8010588:	1ad3      	subs	r3, r2, r3
 801058a:	2b00      	cmp	r3, #0
 801058c:	dc06      	bgt.n	801059c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	8b5b      	ldrh	r3, [r3, #26]
 8010592:	f043 0302 	orr.w	r3, r3, #2
 8010596:	b29a      	uxth	r2, r3
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801059c:	7efb      	ldrb	r3, [r7, #27]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d01b      	beq.n	80105da <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	7d1b      	ldrb	r3, [r3, #20]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d106      	bne.n	80105b8 <tcp_process+0xa8>
 80105aa:	4b84      	ldr	r3, [pc, #528]	; (80107bc <tcp_process+0x2ac>)
 80105ac:	f44f 724e 	mov.w	r2, #824	; 0x338
 80105b0:	4988      	ldr	r1, [pc, #544]	; (80107d4 <tcp_process+0x2c4>)
 80105b2:	4884      	ldr	r0, [pc, #528]	; (80107c4 <tcp_process+0x2b4>)
 80105b4:	f007 f8f6 	bl	80177a4 <iprintf>
      recv_flags |= TF_RESET;
 80105b8:	4b87      	ldr	r3, [pc, #540]	; (80107d8 <tcp_process+0x2c8>)
 80105ba:	781b      	ldrb	r3, [r3, #0]
 80105bc:	f043 0308 	orr.w	r3, r3, #8
 80105c0:	b2da      	uxtb	r2, r3
 80105c2:	4b85      	ldr	r3, [pc, #532]	; (80107d8 <tcp_process+0x2c8>)
 80105c4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	8b5b      	ldrh	r3, [r3, #26]
 80105ca:	f023 0301 	bic.w	r3, r3, #1
 80105ce:	b29a      	uxth	r2, r3
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80105d4:	f06f 030d 	mvn.w	r3, #13
 80105d8:	e37a      	b.n	8010cd0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80105da:	2300      	movs	r3, #0
 80105dc:	e378      	b.n	8010cd0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80105de:	4b7a      	ldr	r3, [pc, #488]	; (80107c8 <tcp_process+0x2b8>)
 80105e0:	781b      	ldrb	r3, [r3, #0]
 80105e2:	f003 0302 	and.w	r3, r3, #2
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d010      	beq.n	801060c <tcp_process+0xfc>
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	7d1b      	ldrb	r3, [r3, #20]
 80105ee:	2b02      	cmp	r3, #2
 80105f0:	d00c      	beq.n	801060c <tcp_process+0xfc>
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	7d1b      	ldrb	r3, [r3, #20]
 80105f6:	2b03      	cmp	r3, #3
 80105f8:	d008      	beq.n	801060c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	8b5b      	ldrh	r3, [r3, #26]
 80105fe:	f043 0302 	orr.w	r3, r3, #2
 8010602:	b29a      	uxth	r2, r3
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010608:	2300      	movs	r3, #0
 801060a:	e361      	b.n	8010cd0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	8b5b      	ldrh	r3, [r3, #26]
 8010610:	f003 0310 	and.w	r3, r3, #16
 8010614:	2b00      	cmp	r3, #0
 8010616:	d103      	bne.n	8010620 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010618:	4b70      	ldr	r3, [pc, #448]	; (80107dc <tcp_process+0x2cc>)
 801061a:	681a      	ldr	r2, [r3, #0]
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2200      	movs	r2, #0
 8010624:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2200      	movs	r2, #0
 801062c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010630:	6878      	ldr	r0, [r7, #4]
 8010632:	f001 fc2d 	bl	8011e90 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	7d1b      	ldrb	r3, [r3, #20]
 801063a:	3b02      	subs	r3, #2
 801063c:	2b07      	cmp	r3, #7
 801063e:	f200 8337 	bhi.w	8010cb0 <tcp_process+0x7a0>
 8010642:	a201      	add	r2, pc, #4	; (adr r2, 8010648 <tcp_process+0x138>)
 8010644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010648:	08010669 	.word	0x08010669
 801064c:	08010899 	.word	0x08010899
 8010650:	08010a11 	.word	0x08010a11
 8010654:	08010a3b 	.word	0x08010a3b
 8010658:	08010b5f 	.word	0x08010b5f
 801065c:	08010a11 	.word	0x08010a11
 8010660:	08010beb 	.word	0x08010beb
 8010664:	08010c7b 	.word	0x08010c7b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010668:	4b57      	ldr	r3, [pc, #348]	; (80107c8 <tcp_process+0x2b8>)
 801066a:	781b      	ldrb	r3, [r3, #0]
 801066c:	f003 0310 	and.w	r3, r3, #16
 8010670:	2b00      	cmp	r3, #0
 8010672:	f000 80e4 	beq.w	801083e <tcp_process+0x32e>
 8010676:	4b54      	ldr	r3, [pc, #336]	; (80107c8 <tcp_process+0x2b8>)
 8010678:	781b      	ldrb	r3, [r3, #0]
 801067a:	f003 0302 	and.w	r3, r3, #2
 801067e:	2b00      	cmp	r3, #0
 8010680:	f000 80dd 	beq.w	801083e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010688:	1c5a      	adds	r2, r3, #1
 801068a:	4b50      	ldr	r3, [pc, #320]	; (80107cc <tcp_process+0x2bc>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	429a      	cmp	r2, r3
 8010690:	f040 80d5 	bne.w	801083e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010694:	4b4e      	ldr	r3, [pc, #312]	; (80107d0 <tcp_process+0x2c0>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	1c5a      	adds	r2, r3, #1
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80106a6:	4b49      	ldr	r3, [pc, #292]	; (80107cc <tcp_process+0x2bc>)
 80106a8:	681a      	ldr	r2, [r3, #0]
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80106ae:	4b4c      	ldr	r3, [pc, #304]	; (80107e0 <tcp_process+0x2d0>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	89db      	ldrh	r3, [r3, #14]
 80106b4:	b29a      	uxth	r2, r3
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80106c8:	4b41      	ldr	r3, [pc, #260]	; (80107d0 <tcp_process+0x2c0>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	1e5a      	subs	r2, r3, #1
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	2204      	movs	r2, #4
 80106d6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	3304      	adds	r3, #4
 80106e0:	4618      	mov	r0, r3
 80106e2:	f005 faa7 	bl	8015c34 <ip4_route>
 80106e6:	4601      	mov	r1, r0
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	3304      	adds	r3, #4
 80106ec:	461a      	mov	r2, r3
 80106ee:	4620      	mov	r0, r4
 80106f0:	f7ff f88e 	bl	800f810 <tcp_eff_send_mss_netif>
 80106f4:	4603      	mov	r3, r0
 80106f6:	461a      	mov	r2, r3
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010700:	009a      	lsls	r2, r3, #2
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010706:	005b      	lsls	r3, r3, #1
 8010708:	f241 111c 	movw	r1, #4380	; 0x111c
 801070c:	428b      	cmp	r3, r1
 801070e:	bf38      	it	cc
 8010710:	460b      	movcc	r3, r1
 8010712:	429a      	cmp	r2, r3
 8010714:	d204      	bcs.n	8010720 <tcp_process+0x210>
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801071a:	009b      	lsls	r3, r3, #2
 801071c:	b29b      	uxth	r3, r3
 801071e:	e00d      	b.n	801073c <tcp_process+0x22c>
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010724:	005b      	lsls	r3, r3, #1
 8010726:	f241 121c 	movw	r2, #4380	; 0x111c
 801072a:	4293      	cmp	r3, r2
 801072c:	d904      	bls.n	8010738 <tcp_process+0x228>
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010732:	005b      	lsls	r3, r3, #1
 8010734:	b29b      	uxth	r3, r3
 8010736:	e001      	b.n	801073c <tcp_process+0x22c>
 8010738:	f241 131c 	movw	r3, #4380	; 0x111c
 801073c:	687a      	ldr	r2, [r7, #4]
 801073e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010748:	2b00      	cmp	r3, #0
 801074a:	d106      	bne.n	801075a <tcp_process+0x24a>
 801074c:	4b1b      	ldr	r3, [pc, #108]	; (80107bc <tcp_process+0x2ac>)
 801074e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010752:	4924      	ldr	r1, [pc, #144]	; (80107e4 <tcp_process+0x2d4>)
 8010754:	481b      	ldr	r0, [pc, #108]	; (80107c4 <tcp_process+0x2b4>)
 8010756:	f007 f825 	bl	80177a4 <iprintf>
        --pcb->snd_queuelen;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010760:	3b01      	subs	r3, #1
 8010762:	b29a      	uxth	r2, r3
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801076e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010770:	69fb      	ldr	r3, [r7, #28]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d111      	bne.n	801079a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801077a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801077c:	69fb      	ldr	r3, [r7, #28]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d106      	bne.n	8010790 <tcp_process+0x280>
 8010782:	4b0e      	ldr	r3, [pc, #56]	; (80107bc <tcp_process+0x2ac>)
 8010784:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010788:	4917      	ldr	r1, [pc, #92]	; (80107e8 <tcp_process+0x2d8>)
 801078a:	480e      	ldr	r0, [pc, #56]	; (80107c4 <tcp_process+0x2b4>)
 801078c:	f007 f80a 	bl	80177a4 <iprintf>
          pcb->unsent = rseg->next;
 8010790:	69fb      	ldr	r3, [r7, #28]
 8010792:	681a      	ldr	r2, [r3, #0]
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	66da      	str	r2, [r3, #108]	; 0x6c
 8010798:	e003      	b.n	80107a2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801079a:	69fb      	ldr	r3, [r7, #28]
 801079c:	681a      	ldr	r2, [r3, #0]
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80107a2:	69f8      	ldr	r0, [r7, #28]
 80107a4:	f7fe fc6f 	bl	800f086 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d11d      	bne.n	80107ec <tcp_process+0x2dc>
          pcb->rtime = -1;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80107b6:	861a      	strh	r2, [r3, #48]	; 0x30
 80107b8:	e01f      	b.n	80107fa <tcp_process+0x2ea>
 80107ba:	bf00      	nop
 80107bc:	0801a394 	.word	0x0801a394
 80107c0:	0801a5cc 	.word	0x0801a5cc
 80107c4:	0801a3e0 	.word	0x0801a3e0
 80107c8:	20006874 	.word	0x20006874
 80107cc:	2000686c 	.word	0x2000686c
 80107d0:	20006868 	.word	0x20006868
 80107d4:	0801a5e8 	.word	0x0801a5e8
 80107d8:	20006875 	.word	0x20006875
 80107dc:	2000d694 	.word	0x2000d694
 80107e0:	20006858 	.word	0x20006858
 80107e4:	0801a608 	.word	0x0801a608
 80107e8:	0801a620 	.word	0x0801a620
        } else {
          pcb->rtime = 0;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2200      	movs	r2, #0
 80107f0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2200      	movs	r2, #0
 80107f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010800:	2b00      	cmp	r3, #0
 8010802:	d00a      	beq.n	801081a <tcp_process+0x30a>
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801080a:	687a      	ldr	r2, [r7, #4]
 801080c:	6910      	ldr	r0, [r2, #16]
 801080e:	2200      	movs	r2, #0
 8010810:	6879      	ldr	r1, [r7, #4]
 8010812:	4798      	blx	r3
 8010814:	4603      	mov	r3, r0
 8010816:	76bb      	strb	r3, [r7, #26]
 8010818:	e001      	b.n	801081e <tcp_process+0x30e>
 801081a:	2300      	movs	r3, #0
 801081c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801081e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010822:	f113 0f0d 	cmn.w	r3, #13
 8010826:	d102      	bne.n	801082e <tcp_process+0x31e>
          return ERR_ABRT;
 8010828:	f06f 030c 	mvn.w	r3, #12
 801082c:	e250      	b.n	8010cd0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	8b5b      	ldrh	r3, [r3, #26]
 8010832:	f043 0302 	orr.w	r3, r3, #2
 8010836:	b29a      	uxth	r2, r3
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801083c:	e23a      	b.n	8010cb4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801083e:	4b9d      	ldr	r3, [pc, #628]	; (8010ab4 <tcp_process+0x5a4>)
 8010840:	781b      	ldrb	r3, [r3, #0]
 8010842:	f003 0310 	and.w	r3, r3, #16
 8010846:	2b00      	cmp	r3, #0
 8010848:	f000 8234 	beq.w	8010cb4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801084c:	4b9a      	ldr	r3, [pc, #616]	; (8010ab8 <tcp_process+0x5a8>)
 801084e:	6819      	ldr	r1, [r3, #0]
 8010850:	4b9a      	ldr	r3, [pc, #616]	; (8010abc <tcp_process+0x5ac>)
 8010852:	881b      	ldrh	r3, [r3, #0]
 8010854:	461a      	mov	r2, r3
 8010856:	4b9a      	ldr	r3, [pc, #616]	; (8010ac0 <tcp_process+0x5b0>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801085c:	4b99      	ldr	r3, [pc, #612]	; (8010ac4 <tcp_process+0x5b4>)
 801085e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010860:	885b      	ldrh	r3, [r3, #2]
 8010862:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010864:	4a97      	ldr	r2, [pc, #604]	; (8010ac4 <tcp_process+0x5b4>)
 8010866:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010868:	8812      	ldrh	r2, [r2, #0]
 801086a:	b292      	uxth	r2, r2
 801086c:	9202      	str	r2, [sp, #8]
 801086e:	9301      	str	r3, [sp, #4]
 8010870:	4b95      	ldr	r3, [pc, #596]	; (8010ac8 <tcp_process+0x5b8>)
 8010872:	9300      	str	r3, [sp, #0]
 8010874:	4b95      	ldr	r3, [pc, #596]	; (8010acc <tcp_process+0x5bc>)
 8010876:	4602      	mov	r2, r0
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f003 f8db 	bl	8013a34 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010884:	2b05      	cmp	r3, #5
 8010886:	f200 8215 	bhi.w	8010cb4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2200      	movs	r2, #0
 801088e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010890:	6878      	ldr	r0, [r7, #4]
 8010892:	f002 fea5 	bl	80135e0 <tcp_rexmit_rto>
      break;
 8010896:	e20d      	b.n	8010cb4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010898:	4b86      	ldr	r3, [pc, #536]	; (8010ab4 <tcp_process+0x5a4>)
 801089a:	781b      	ldrb	r3, [r3, #0]
 801089c:	f003 0310 	and.w	r3, r3, #16
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	f000 80a1 	beq.w	80109e8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80108a6:	4b84      	ldr	r3, [pc, #528]	; (8010ab8 <tcp_process+0x5a8>)
 80108a8:	681a      	ldr	r2, [r3, #0]
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108ae:	1ad3      	subs	r3, r2, r3
 80108b0:	3b01      	subs	r3, #1
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	db7e      	blt.n	80109b4 <tcp_process+0x4a4>
 80108b6:	4b80      	ldr	r3, [pc, #512]	; (8010ab8 <tcp_process+0x5a8>)
 80108b8:	681a      	ldr	r2, [r3, #0]
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108be:	1ad3      	subs	r3, r2, r3
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	dc77      	bgt.n	80109b4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2204      	movs	r2, #4
 80108c8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d102      	bne.n	80108d8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80108d2:	23fa      	movs	r3, #250	; 0xfa
 80108d4:	76bb      	strb	r3, [r7, #26]
 80108d6:	e01d      	b.n	8010914 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80108dc:	699b      	ldr	r3, [r3, #24]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d106      	bne.n	80108f0 <tcp_process+0x3e0>
 80108e2:	4b7b      	ldr	r3, [pc, #492]	; (8010ad0 <tcp_process+0x5c0>)
 80108e4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80108e8:	497a      	ldr	r1, [pc, #488]	; (8010ad4 <tcp_process+0x5c4>)
 80108ea:	487b      	ldr	r0, [pc, #492]	; (8010ad8 <tcp_process+0x5c8>)
 80108ec:	f006 ff5a 	bl	80177a4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80108f4:	699b      	ldr	r3, [r3, #24]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d00a      	beq.n	8010910 <tcp_process+0x400>
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80108fe:	699b      	ldr	r3, [r3, #24]
 8010900:	687a      	ldr	r2, [r7, #4]
 8010902:	6910      	ldr	r0, [r2, #16]
 8010904:	2200      	movs	r2, #0
 8010906:	6879      	ldr	r1, [r7, #4]
 8010908:	4798      	blx	r3
 801090a:	4603      	mov	r3, r0
 801090c:	76bb      	strb	r3, [r7, #26]
 801090e:	e001      	b.n	8010914 <tcp_process+0x404>
 8010910:	23f0      	movs	r3, #240	; 0xf0
 8010912:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010914:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d00a      	beq.n	8010932 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801091c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010920:	f113 0f0d 	cmn.w	r3, #13
 8010924:	d002      	beq.n	801092c <tcp_process+0x41c>
              tcp_abort(pcb);
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f7fd fde4 	bl	800e4f4 <tcp_abort>
            }
            return ERR_ABRT;
 801092c:	f06f 030c 	mvn.w	r3, #12
 8010930:	e1ce      	b.n	8010cd0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f000 fae0 	bl	8010ef8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010938:	4b68      	ldr	r3, [pc, #416]	; (8010adc <tcp_process+0x5cc>)
 801093a:	881b      	ldrh	r3, [r3, #0]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d005      	beq.n	801094c <tcp_process+0x43c>
            recv_acked--;
 8010940:	4b66      	ldr	r3, [pc, #408]	; (8010adc <tcp_process+0x5cc>)
 8010942:	881b      	ldrh	r3, [r3, #0]
 8010944:	3b01      	subs	r3, #1
 8010946:	b29a      	uxth	r2, r3
 8010948:	4b64      	ldr	r3, [pc, #400]	; (8010adc <tcp_process+0x5cc>)
 801094a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010950:	009a      	lsls	r2, r3, #2
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010956:	005b      	lsls	r3, r3, #1
 8010958:	f241 111c 	movw	r1, #4380	; 0x111c
 801095c:	428b      	cmp	r3, r1
 801095e:	bf38      	it	cc
 8010960:	460b      	movcc	r3, r1
 8010962:	429a      	cmp	r2, r3
 8010964:	d204      	bcs.n	8010970 <tcp_process+0x460>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801096a:	009b      	lsls	r3, r3, #2
 801096c:	b29b      	uxth	r3, r3
 801096e:	e00d      	b.n	801098c <tcp_process+0x47c>
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010974:	005b      	lsls	r3, r3, #1
 8010976:	f241 121c 	movw	r2, #4380	; 0x111c
 801097a:	4293      	cmp	r3, r2
 801097c:	d904      	bls.n	8010988 <tcp_process+0x478>
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010982:	005b      	lsls	r3, r3, #1
 8010984:	b29b      	uxth	r3, r3
 8010986:	e001      	b.n	801098c <tcp_process+0x47c>
 8010988:	f241 131c 	movw	r3, #4380	; 0x111c
 801098c:	687a      	ldr	r2, [r7, #4]
 801098e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010992:	4b53      	ldr	r3, [pc, #332]	; (8010ae0 <tcp_process+0x5d0>)
 8010994:	781b      	ldrb	r3, [r3, #0]
 8010996:	f003 0320 	and.w	r3, r3, #32
 801099a:	2b00      	cmp	r3, #0
 801099c:	d037      	beq.n	8010a0e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	8b5b      	ldrh	r3, [r3, #26]
 80109a2:	f043 0302 	orr.w	r3, r3, #2
 80109a6:	b29a      	uxth	r2, r3
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2207      	movs	r2, #7
 80109b0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80109b2:	e02c      	b.n	8010a0e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80109b4:	4b40      	ldr	r3, [pc, #256]	; (8010ab8 <tcp_process+0x5a8>)
 80109b6:	6819      	ldr	r1, [r3, #0]
 80109b8:	4b40      	ldr	r3, [pc, #256]	; (8010abc <tcp_process+0x5ac>)
 80109ba:	881b      	ldrh	r3, [r3, #0]
 80109bc:	461a      	mov	r2, r3
 80109be:	4b40      	ldr	r3, [pc, #256]	; (8010ac0 <tcp_process+0x5b0>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80109c4:	4b3f      	ldr	r3, [pc, #252]	; (8010ac4 <tcp_process+0x5b4>)
 80109c6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80109c8:	885b      	ldrh	r3, [r3, #2]
 80109ca:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80109cc:	4a3d      	ldr	r2, [pc, #244]	; (8010ac4 <tcp_process+0x5b4>)
 80109ce:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80109d0:	8812      	ldrh	r2, [r2, #0]
 80109d2:	b292      	uxth	r2, r2
 80109d4:	9202      	str	r2, [sp, #8]
 80109d6:	9301      	str	r3, [sp, #4]
 80109d8:	4b3b      	ldr	r3, [pc, #236]	; (8010ac8 <tcp_process+0x5b8>)
 80109da:	9300      	str	r3, [sp, #0]
 80109dc:	4b3b      	ldr	r3, [pc, #236]	; (8010acc <tcp_process+0x5bc>)
 80109de:	4602      	mov	r2, r0
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f003 f827 	bl	8013a34 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80109e6:	e167      	b.n	8010cb8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80109e8:	4b32      	ldr	r3, [pc, #200]	; (8010ab4 <tcp_process+0x5a4>)
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	f003 0302 	and.w	r3, r3, #2
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	f000 8161 	beq.w	8010cb8 <tcp_process+0x7a8>
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109fa:	1e5a      	subs	r2, r3, #1
 80109fc:	4b30      	ldr	r3, [pc, #192]	; (8010ac0 <tcp_process+0x5b0>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	f040 8159 	bne.w	8010cb8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f002 fe0c 	bl	8013624 <tcp_rexmit>
      break;
 8010a0c:	e154      	b.n	8010cb8 <tcp_process+0x7a8>
 8010a0e:	e153      	b.n	8010cb8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f000 fa71 	bl	8010ef8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010a16:	4b32      	ldr	r3, [pc, #200]	; (8010ae0 <tcp_process+0x5d0>)
 8010a18:	781b      	ldrb	r3, [r3, #0]
 8010a1a:	f003 0320 	and.w	r3, r3, #32
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	f000 814c 	beq.w	8010cbc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	8b5b      	ldrh	r3, [r3, #26]
 8010a28:	f043 0302 	orr.w	r3, r3, #2
 8010a2c:	b29a      	uxth	r2, r3
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	2207      	movs	r2, #7
 8010a36:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010a38:	e140      	b.n	8010cbc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f000 fa5c 	bl	8010ef8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010a40:	4b27      	ldr	r3, [pc, #156]	; (8010ae0 <tcp_process+0x5d0>)
 8010a42:	781b      	ldrb	r3, [r3, #0]
 8010a44:	f003 0320 	and.w	r3, r3, #32
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d071      	beq.n	8010b30 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010a4c:	4b19      	ldr	r3, [pc, #100]	; (8010ab4 <tcp_process+0x5a4>)
 8010a4e:	781b      	ldrb	r3, [r3, #0]
 8010a50:	f003 0310 	and.w	r3, r3, #16
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d060      	beq.n	8010b1a <tcp_process+0x60a>
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a5c:	4b16      	ldr	r3, [pc, #88]	; (8010ab8 <tcp_process+0x5a8>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	429a      	cmp	r2, r3
 8010a62:	d15a      	bne.n	8010b1a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d156      	bne.n	8010b1a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	8b5b      	ldrh	r3, [r3, #26]
 8010a70:	f043 0302 	orr.w	r3, r3, #2
 8010a74:	b29a      	uxth	r2, r3
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	f7fe fdbe 	bl	800f5fc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010a80:	4b18      	ldr	r3, [pc, #96]	; (8010ae4 <tcp_process+0x5d4>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	687a      	ldr	r2, [r7, #4]
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d105      	bne.n	8010a96 <tcp_process+0x586>
 8010a8a:	4b16      	ldr	r3, [pc, #88]	; (8010ae4 <tcp_process+0x5d4>)
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	68db      	ldr	r3, [r3, #12]
 8010a90:	4a14      	ldr	r2, [pc, #80]	; (8010ae4 <tcp_process+0x5d4>)
 8010a92:	6013      	str	r3, [r2, #0]
 8010a94:	e02e      	b.n	8010af4 <tcp_process+0x5e4>
 8010a96:	4b13      	ldr	r3, [pc, #76]	; (8010ae4 <tcp_process+0x5d4>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	617b      	str	r3, [r7, #20]
 8010a9c:	e027      	b.n	8010aee <tcp_process+0x5de>
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	68db      	ldr	r3, [r3, #12]
 8010aa2:	687a      	ldr	r2, [r7, #4]
 8010aa4:	429a      	cmp	r2, r3
 8010aa6:	d11f      	bne.n	8010ae8 <tcp_process+0x5d8>
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	68da      	ldr	r2, [r3, #12]
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	60da      	str	r2, [r3, #12]
 8010ab0:	e020      	b.n	8010af4 <tcp_process+0x5e4>
 8010ab2:	bf00      	nop
 8010ab4:	20006874 	.word	0x20006874
 8010ab8:	2000686c 	.word	0x2000686c
 8010abc:	20006872 	.word	0x20006872
 8010ac0:	20006868 	.word	0x20006868
 8010ac4:	20006858 	.word	0x20006858
 8010ac8:	20009f8c 	.word	0x20009f8c
 8010acc:	20009f90 	.word	0x20009f90
 8010ad0:	0801a394 	.word	0x0801a394
 8010ad4:	0801a634 	.word	0x0801a634
 8010ad8:	0801a3e0 	.word	0x0801a3e0
 8010adc:	20006870 	.word	0x20006870
 8010ae0:	20006875 	.word	0x20006875
 8010ae4:	2000d690 	.word	0x2000d690
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	68db      	ldr	r3, [r3, #12]
 8010aec:	617b      	str	r3, [r7, #20]
 8010aee:	697b      	ldr	r3, [r7, #20]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d1d4      	bne.n	8010a9e <tcp_process+0x58e>
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2200      	movs	r2, #0
 8010af8:	60da      	str	r2, [r3, #12]
 8010afa:	4b77      	ldr	r3, [pc, #476]	; (8010cd8 <tcp_process+0x7c8>)
 8010afc:	2201      	movs	r2, #1
 8010afe:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	220a      	movs	r2, #10
 8010b04:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010b06:	4b75      	ldr	r3, [pc, #468]	; (8010cdc <tcp_process+0x7cc>)
 8010b08:	681a      	ldr	r2, [r3, #0]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	60da      	str	r2, [r3, #12]
 8010b0e:	4a73      	ldr	r2, [pc, #460]	; (8010cdc <tcp_process+0x7cc>)
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	6013      	str	r3, [r2, #0]
 8010b14:	f003 f950 	bl	8013db8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010b18:	e0d2      	b.n	8010cc0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	8b5b      	ldrh	r3, [r3, #26]
 8010b1e:	f043 0302 	orr.w	r3, r3, #2
 8010b22:	b29a      	uxth	r2, r3
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2208      	movs	r2, #8
 8010b2c:	751a      	strb	r2, [r3, #20]
      break;
 8010b2e:	e0c7      	b.n	8010cc0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010b30:	4b6b      	ldr	r3, [pc, #428]	; (8010ce0 <tcp_process+0x7d0>)
 8010b32:	781b      	ldrb	r3, [r3, #0]
 8010b34:	f003 0310 	and.w	r3, r3, #16
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	f000 80c1 	beq.w	8010cc0 <tcp_process+0x7b0>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010b42:	4b68      	ldr	r3, [pc, #416]	; (8010ce4 <tcp_process+0x7d4>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	429a      	cmp	r2, r3
 8010b48:	f040 80ba 	bne.w	8010cc0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	f040 80b5 	bne.w	8010cc0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2206      	movs	r2, #6
 8010b5a:	751a      	strb	r2, [r3, #20]
      break;
 8010b5c:	e0b0      	b.n	8010cc0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	f000 f9ca 	bl	8010ef8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010b64:	4b60      	ldr	r3, [pc, #384]	; (8010ce8 <tcp_process+0x7d8>)
 8010b66:	781b      	ldrb	r3, [r3, #0]
 8010b68:	f003 0320 	and.w	r3, r3, #32
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	f000 80a9 	beq.w	8010cc4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	8b5b      	ldrh	r3, [r3, #26]
 8010b76:	f043 0302 	orr.w	r3, r3, #2
 8010b7a:	b29a      	uxth	r2, r3
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f7fe fd3b 	bl	800f5fc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010b86:	4b59      	ldr	r3, [pc, #356]	; (8010cec <tcp_process+0x7dc>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	687a      	ldr	r2, [r7, #4]
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d105      	bne.n	8010b9c <tcp_process+0x68c>
 8010b90:	4b56      	ldr	r3, [pc, #344]	; (8010cec <tcp_process+0x7dc>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	68db      	ldr	r3, [r3, #12]
 8010b96:	4a55      	ldr	r2, [pc, #340]	; (8010cec <tcp_process+0x7dc>)
 8010b98:	6013      	str	r3, [r2, #0]
 8010b9a:	e013      	b.n	8010bc4 <tcp_process+0x6b4>
 8010b9c:	4b53      	ldr	r3, [pc, #332]	; (8010cec <tcp_process+0x7dc>)
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	613b      	str	r3, [r7, #16]
 8010ba2:	e00c      	b.n	8010bbe <tcp_process+0x6ae>
 8010ba4:	693b      	ldr	r3, [r7, #16]
 8010ba6:	68db      	ldr	r3, [r3, #12]
 8010ba8:	687a      	ldr	r2, [r7, #4]
 8010baa:	429a      	cmp	r2, r3
 8010bac:	d104      	bne.n	8010bb8 <tcp_process+0x6a8>
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	68da      	ldr	r2, [r3, #12]
 8010bb2:	693b      	ldr	r3, [r7, #16]
 8010bb4:	60da      	str	r2, [r3, #12]
 8010bb6:	e005      	b.n	8010bc4 <tcp_process+0x6b4>
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	68db      	ldr	r3, [r3, #12]
 8010bbc:	613b      	str	r3, [r7, #16]
 8010bbe:	693b      	ldr	r3, [r7, #16]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d1ef      	bne.n	8010ba4 <tcp_process+0x694>
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	60da      	str	r2, [r3, #12]
 8010bca:	4b43      	ldr	r3, [pc, #268]	; (8010cd8 <tcp_process+0x7c8>)
 8010bcc:	2201      	movs	r2, #1
 8010bce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	220a      	movs	r2, #10
 8010bd4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010bd6:	4b41      	ldr	r3, [pc, #260]	; (8010cdc <tcp_process+0x7cc>)
 8010bd8:	681a      	ldr	r2, [r3, #0]
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	60da      	str	r2, [r3, #12]
 8010bde:	4a3f      	ldr	r2, [pc, #252]	; (8010cdc <tcp_process+0x7cc>)
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6013      	str	r3, [r2, #0]
 8010be4:	f003 f8e8 	bl	8013db8 <tcp_timer_needed>
      }
      break;
 8010be8:	e06c      	b.n	8010cc4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f000 f984 	bl	8010ef8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010bf0:	4b3b      	ldr	r3, [pc, #236]	; (8010ce0 <tcp_process+0x7d0>)
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	f003 0310 	and.w	r3, r3, #16
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d065      	beq.n	8010cc8 <tcp_process+0x7b8>
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010c00:	4b38      	ldr	r3, [pc, #224]	; (8010ce4 <tcp_process+0x7d4>)
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	429a      	cmp	r2, r3
 8010c06:	d15f      	bne.n	8010cc8 <tcp_process+0x7b8>
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d15b      	bne.n	8010cc8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f7fe fcf3 	bl	800f5fc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010c16:	4b35      	ldr	r3, [pc, #212]	; (8010cec <tcp_process+0x7dc>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	687a      	ldr	r2, [r7, #4]
 8010c1c:	429a      	cmp	r2, r3
 8010c1e:	d105      	bne.n	8010c2c <tcp_process+0x71c>
 8010c20:	4b32      	ldr	r3, [pc, #200]	; (8010cec <tcp_process+0x7dc>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	68db      	ldr	r3, [r3, #12]
 8010c26:	4a31      	ldr	r2, [pc, #196]	; (8010cec <tcp_process+0x7dc>)
 8010c28:	6013      	str	r3, [r2, #0]
 8010c2a:	e013      	b.n	8010c54 <tcp_process+0x744>
 8010c2c:	4b2f      	ldr	r3, [pc, #188]	; (8010cec <tcp_process+0x7dc>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	60fb      	str	r3, [r7, #12]
 8010c32:	e00c      	b.n	8010c4e <tcp_process+0x73e>
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	68db      	ldr	r3, [r3, #12]
 8010c38:	687a      	ldr	r2, [r7, #4]
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d104      	bne.n	8010c48 <tcp_process+0x738>
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	68da      	ldr	r2, [r3, #12]
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	60da      	str	r2, [r3, #12]
 8010c46:	e005      	b.n	8010c54 <tcp_process+0x744>
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	60fb      	str	r3, [r7, #12]
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d1ef      	bne.n	8010c34 <tcp_process+0x724>
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2200      	movs	r2, #0
 8010c58:	60da      	str	r2, [r3, #12]
 8010c5a:	4b1f      	ldr	r3, [pc, #124]	; (8010cd8 <tcp_process+0x7c8>)
 8010c5c:	2201      	movs	r2, #1
 8010c5e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	220a      	movs	r2, #10
 8010c64:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010c66:	4b1d      	ldr	r3, [pc, #116]	; (8010cdc <tcp_process+0x7cc>)
 8010c68:	681a      	ldr	r2, [r3, #0]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	60da      	str	r2, [r3, #12]
 8010c6e:	4a1b      	ldr	r2, [pc, #108]	; (8010cdc <tcp_process+0x7cc>)
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	6013      	str	r3, [r2, #0]
 8010c74:	f003 f8a0 	bl	8013db8 <tcp_timer_needed>
      }
      break;
 8010c78:	e026      	b.n	8010cc8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010c7a:	6878      	ldr	r0, [r7, #4]
 8010c7c:	f000 f93c 	bl	8010ef8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010c80:	4b17      	ldr	r3, [pc, #92]	; (8010ce0 <tcp_process+0x7d0>)
 8010c82:	781b      	ldrb	r3, [r3, #0]
 8010c84:	f003 0310 	and.w	r3, r3, #16
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d01f      	beq.n	8010ccc <tcp_process+0x7bc>
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010c90:	4b14      	ldr	r3, [pc, #80]	; (8010ce4 <tcp_process+0x7d4>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	429a      	cmp	r2, r3
 8010c96:	d119      	bne.n	8010ccc <tcp_process+0x7bc>
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d115      	bne.n	8010ccc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010ca0:	4b11      	ldr	r3, [pc, #68]	; (8010ce8 <tcp_process+0x7d8>)
 8010ca2:	781b      	ldrb	r3, [r3, #0]
 8010ca4:	f043 0310 	orr.w	r3, r3, #16
 8010ca8:	b2da      	uxtb	r2, r3
 8010caa:	4b0f      	ldr	r3, [pc, #60]	; (8010ce8 <tcp_process+0x7d8>)
 8010cac:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010cae:	e00d      	b.n	8010ccc <tcp_process+0x7bc>
    default:
      break;
 8010cb0:	bf00      	nop
 8010cb2:	e00c      	b.n	8010cce <tcp_process+0x7be>
      break;
 8010cb4:	bf00      	nop
 8010cb6:	e00a      	b.n	8010cce <tcp_process+0x7be>
      break;
 8010cb8:	bf00      	nop
 8010cba:	e008      	b.n	8010cce <tcp_process+0x7be>
      break;
 8010cbc:	bf00      	nop
 8010cbe:	e006      	b.n	8010cce <tcp_process+0x7be>
      break;
 8010cc0:	bf00      	nop
 8010cc2:	e004      	b.n	8010cce <tcp_process+0x7be>
      break;
 8010cc4:	bf00      	nop
 8010cc6:	e002      	b.n	8010cce <tcp_process+0x7be>
      break;
 8010cc8:	bf00      	nop
 8010cca:	e000      	b.n	8010cce <tcp_process+0x7be>
      break;
 8010ccc:	bf00      	nop
  }
  return ERR_OK;
 8010cce:	2300      	movs	r3, #0
}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3724      	adds	r7, #36	; 0x24
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd90      	pop	{r4, r7, pc}
 8010cd8:	2000d68c 	.word	0x2000d68c
 8010cdc:	2000d6a0 	.word	0x2000d6a0
 8010ce0:	20006874 	.word	0x20006874
 8010ce4:	2000686c 	.word	0x2000686c
 8010ce8:	20006875 	.word	0x20006875
 8010cec:	2000d690 	.word	0x2000d690

08010cf0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010cf0:	b590      	push	{r4, r7, lr}
 8010cf2:	b085      	sub	sp, #20
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
 8010cf8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d106      	bne.n	8010d0e <tcp_oos_insert_segment+0x1e>
 8010d00:	4b3b      	ldr	r3, [pc, #236]	; (8010df0 <tcp_oos_insert_segment+0x100>)
 8010d02:	f240 421f 	movw	r2, #1055	; 0x41f
 8010d06:	493b      	ldr	r1, [pc, #236]	; (8010df4 <tcp_oos_insert_segment+0x104>)
 8010d08:	483b      	ldr	r0, [pc, #236]	; (8010df8 <tcp_oos_insert_segment+0x108>)
 8010d0a:	f006 fd4b 	bl	80177a4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	68db      	ldr	r3, [r3, #12]
 8010d12:	899b      	ldrh	r3, [r3, #12]
 8010d14:	b29b      	uxth	r3, r3
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7fb faa4 	bl	800c264 <lwip_htons>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	b2db      	uxtb	r3, r3
 8010d20:	f003 0301 	and.w	r3, r3, #1
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d028      	beq.n	8010d7a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010d28:	6838      	ldr	r0, [r7, #0]
 8010d2a:	f7fe f997 	bl	800f05c <tcp_segs_free>
    next = NULL;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	603b      	str	r3, [r7, #0]
 8010d32:	e056      	b.n	8010de2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010d34:	683b      	ldr	r3, [r7, #0]
 8010d36:	68db      	ldr	r3, [r3, #12]
 8010d38:	899b      	ldrh	r3, [r3, #12]
 8010d3a:	b29b      	uxth	r3, r3
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7fb fa91 	bl	800c264 <lwip_htons>
 8010d42:	4603      	mov	r3, r0
 8010d44:	b2db      	uxtb	r3, r3
 8010d46:	f003 0301 	and.w	r3, r3, #1
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d00d      	beq.n	8010d6a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	68db      	ldr	r3, [r3, #12]
 8010d52:	899b      	ldrh	r3, [r3, #12]
 8010d54:	b29c      	uxth	r4, r3
 8010d56:	2001      	movs	r0, #1
 8010d58:	f7fb fa84 	bl	800c264 <lwip_htons>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	461a      	mov	r2, r3
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	68db      	ldr	r3, [r3, #12]
 8010d64:	4322      	orrs	r2, r4
 8010d66:	b292      	uxth	r2, r2
 8010d68:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010d74:	68f8      	ldr	r0, [r7, #12]
 8010d76:	f7fe f986 	bl	800f086 <tcp_seg_free>
    while (next &&
 8010d7a:	683b      	ldr	r3, [r7, #0]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d00e      	beq.n	8010d9e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	891b      	ldrh	r3, [r3, #8]
 8010d84:	461a      	mov	r2, r3
 8010d86:	4b1d      	ldr	r3, [pc, #116]	; (8010dfc <tcp_oos_insert_segment+0x10c>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	441a      	add	r2, r3
 8010d8c:	683b      	ldr	r3, [r7, #0]
 8010d8e:	68db      	ldr	r3, [r3, #12]
 8010d90:	685b      	ldr	r3, [r3, #4]
 8010d92:	6839      	ldr	r1, [r7, #0]
 8010d94:	8909      	ldrh	r1, [r1, #8]
 8010d96:	440b      	add	r3, r1
 8010d98:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	daca      	bge.n	8010d34 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010d9e:	683b      	ldr	r3, [r7, #0]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d01e      	beq.n	8010de2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	891b      	ldrh	r3, [r3, #8]
 8010da8:	461a      	mov	r2, r3
 8010daa:	4b14      	ldr	r3, [pc, #80]	; (8010dfc <tcp_oos_insert_segment+0x10c>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	441a      	add	r2, r3
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	68db      	ldr	r3, [r3, #12]
 8010db4:	685b      	ldr	r3, [r3, #4]
 8010db6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	dd12      	ble.n	8010de2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010dbc:	683b      	ldr	r3, [r7, #0]
 8010dbe:	68db      	ldr	r3, [r3, #12]
 8010dc0:	685b      	ldr	r3, [r3, #4]
 8010dc2:	b29a      	uxth	r2, r3
 8010dc4:	4b0d      	ldr	r3, [pc, #52]	; (8010dfc <tcp_oos_insert_segment+0x10c>)
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	b29b      	uxth	r3, r3
 8010dca:	1ad3      	subs	r3, r2, r3
 8010dcc:	b29a      	uxth	r2, r3
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	685a      	ldr	r2, [r3, #4]
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	891b      	ldrh	r3, [r3, #8]
 8010dda:	4619      	mov	r1, r3
 8010ddc:	4610      	mov	r0, r2
 8010dde:	f7fc fc03 	bl	800d5e8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	683a      	ldr	r2, [r7, #0]
 8010de6:	601a      	str	r2, [r3, #0]
}
 8010de8:	bf00      	nop
 8010dea:	3714      	adds	r7, #20
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd90      	pop	{r4, r7, pc}
 8010df0:	0801a394 	.word	0x0801a394
 8010df4:	0801a654 	.word	0x0801a654
 8010df8:	0801a3e0 	.word	0x0801a3e0
 8010dfc:	20006868 	.word	0x20006868

08010e00 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010e00:	b5b0      	push	{r4, r5, r7, lr}
 8010e02:	b086      	sub	sp, #24
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	60f8      	str	r0, [r7, #12]
 8010e08:	60b9      	str	r1, [r7, #8]
 8010e0a:	607a      	str	r2, [r7, #4]
 8010e0c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010e0e:	e03e      	b.n	8010e8e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010e1a:	697b      	ldr	r3, [r7, #20]
 8010e1c:	685b      	ldr	r3, [r3, #4]
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f7fc fdf6 	bl	800da10 <pbuf_clen>
 8010e24:	4603      	mov	r3, r0
 8010e26:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e2e:	8a7a      	ldrh	r2, [r7, #18]
 8010e30:	429a      	cmp	r2, r3
 8010e32:	d906      	bls.n	8010e42 <tcp_free_acked_segments+0x42>
 8010e34:	4b2a      	ldr	r3, [pc, #168]	; (8010ee0 <tcp_free_acked_segments+0xe0>)
 8010e36:	f240 4257 	movw	r2, #1111	; 0x457
 8010e3a:	492a      	ldr	r1, [pc, #168]	; (8010ee4 <tcp_free_acked_segments+0xe4>)
 8010e3c:	482a      	ldr	r0, [pc, #168]	; (8010ee8 <tcp_free_acked_segments+0xe8>)
 8010e3e:	f006 fcb1 	bl	80177a4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010e48:	8a7b      	ldrh	r3, [r7, #18]
 8010e4a:	1ad3      	subs	r3, r2, r3
 8010e4c:	b29a      	uxth	r2, r3
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010e54:	697b      	ldr	r3, [r7, #20]
 8010e56:	891a      	ldrh	r2, [r3, #8]
 8010e58:	4b24      	ldr	r3, [pc, #144]	; (8010eec <tcp_free_acked_segments+0xec>)
 8010e5a:	881b      	ldrh	r3, [r3, #0]
 8010e5c:	4413      	add	r3, r2
 8010e5e:	b29a      	uxth	r2, r3
 8010e60:	4b22      	ldr	r3, [pc, #136]	; (8010eec <tcp_free_acked_segments+0xec>)
 8010e62:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010e64:	6978      	ldr	r0, [r7, #20]
 8010e66:	f7fe f90e 	bl	800f086 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d00c      	beq.n	8010e8e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010e74:	68bb      	ldr	r3, [r7, #8]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d109      	bne.n	8010e8e <tcp_free_acked_segments+0x8e>
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d106      	bne.n	8010e8e <tcp_free_acked_segments+0x8e>
 8010e80:	4b17      	ldr	r3, [pc, #92]	; (8010ee0 <tcp_free_acked_segments+0xe0>)
 8010e82:	f240 4261 	movw	r2, #1121	; 0x461
 8010e86:	491a      	ldr	r1, [pc, #104]	; (8010ef0 <tcp_free_acked_segments+0xf0>)
 8010e88:	4817      	ldr	r0, [pc, #92]	; (8010ee8 <tcp_free_acked_segments+0xe8>)
 8010e8a:	f006 fc8b 	bl	80177a4 <iprintf>
  while (seg_list != NULL &&
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d020      	beq.n	8010ed6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010e94:	68bb      	ldr	r3, [r7, #8]
 8010e96:	68db      	ldr	r3, [r3, #12]
 8010e98:	685b      	ldr	r3, [r3, #4]
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7fb f9f7 	bl	800c28e <lwip_htonl>
 8010ea0:	4604      	mov	r4, r0
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	891b      	ldrh	r3, [r3, #8]
 8010ea6:	461d      	mov	r5, r3
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	68db      	ldr	r3, [r3, #12]
 8010eac:	899b      	ldrh	r3, [r3, #12]
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f7fb f9d7 	bl	800c264 <lwip_htons>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	b2db      	uxtb	r3, r3
 8010eba:	f003 0303 	and.w	r3, r3, #3
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d001      	beq.n	8010ec6 <tcp_free_acked_segments+0xc6>
 8010ec2:	2301      	movs	r3, #1
 8010ec4:	e000      	b.n	8010ec8 <tcp_free_acked_segments+0xc8>
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	442b      	add	r3, r5
 8010eca:	18e2      	adds	r2, r4, r3
 8010ecc:	4b09      	ldr	r3, [pc, #36]	; (8010ef4 <tcp_free_acked_segments+0xf4>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	dd9c      	ble.n	8010e10 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010ed6:	68bb      	ldr	r3, [r7, #8]
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3718      	adds	r7, #24
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bdb0      	pop	{r4, r5, r7, pc}
 8010ee0:	0801a394 	.word	0x0801a394
 8010ee4:	0801a67c 	.word	0x0801a67c
 8010ee8:	0801a3e0 	.word	0x0801a3e0
 8010eec:	20006870 	.word	0x20006870
 8010ef0:	0801a6a4 	.word	0x0801a6a4
 8010ef4:	2000686c 	.word	0x2000686c

08010ef8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010ef8:	b5b0      	push	{r4, r5, r7, lr}
 8010efa:	b094      	sub	sp, #80	; 0x50
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010f00:	2300      	movs	r3, #0
 8010f02:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d106      	bne.n	8010f18 <tcp_receive+0x20>
 8010f0a:	4ba6      	ldr	r3, [pc, #664]	; (80111a4 <tcp_receive+0x2ac>)
 8010f0c:	f240 427b 	movw	r2, #1147	; 0x47b
 8010f10:	49a5      	ldr	r1, [pc, #660]	; (80111a8 <tcp_receive+0x2b0>)
 8010f12:	48a6      	ldr	r0, [pc, #664]	; (80111ac <tcp_receive+0x2b4>)
 8010f14:	f006 fc46 	bl	80177a4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	7d1b      	ldrb	r3, [r3, #20]
 8010f1c:	2b03      	cmp	r3, #3
 8010f1e:	d806      	bhi.n	8010f2e <tcp_receive+0x36>
 8010f20:	4ba0      	ldr	r3, [pc, #640]	; (80111a4 <tcp_receive+0x2ac>)
 8010f22:	f240 427c 	movw	r2, #1148	; 0x47c
 8010f26:	49a2      	ldr	r1, [pc, #648]	; (80111b0 <tcp_receive+0x2b8>)
 8010f28:	48a0      	ldr	r0, [pc, #640]	; (80111ac <tcp_receive+0x2b4>)
 8010f2a:	f006 fc3b 	bl	80177a4 <iprintf>

  if (flags & TCP_ACK) {
 8010f2e:	4ba1      	ldr	r3, [pc, #644]	; (80111b4 <tcp_receive+0x2bc>)
 8010f30:	781b      	ldrb	r3, [r3, #0]
 8010f32:	f003 0310 	and.w	r3, r3, #16
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	f000 8263 	beq.w	8011402 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010f42:	461a      	mov	r2, r3
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f48:	4413      	add	r3, r2
 8010f4a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f50:	4b99      	ldr	r3, [pc, #612]	; (80111b8 <tcp_receive+0x2c0>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	1ad3      	subs	r3, r2, r3
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	db1b      	blt.n	8010f92 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f5e:	4b96      	ldr	r3, [pc, #600]	; (80111b8 <tcp_receive+0x2c0>)
 8010f60:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010f62:	429a      	cmp	r2, r3
 8010f64:	d106      	bne.n	8010f74 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010f6a:	4b94      	ldr	r3, [pc, #592]	; (80111bc <tcp_receive+0x2c4>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	1ad3      	subs	r3, r2, r3
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	db0e      	blt.n	8010f92 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010f78:	4b90      	ldr	r3, [pc, #576]	; (80111bc <tcp_receive+0x2c4>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d125      	bne.n	8010fcc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010f80:	4b8f      	ldr	r3, [pc, #572]	; (80111c0 <tcp_receive+0x2c8>)
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	89db      	ldrh	r3, [r3, #14]
 8010f86:	b29a      	uxth	r2, r3
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010f8e:	429a      	cmp	r2, r3
 8010f90:	d91c      	bls.n	8010fcc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010f92:	4b8b      	ldr	r3, [pc, #556]	; (80111c0 <tcp_receive+0x2c8>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	89db      	ldrh	r3, [r3, #14]
 8010f98:	b29a      	uxth	r2, r3
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d205      	bcs.n	8010fbc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010fbc:	4b7e      	ldr	r3, [pc, #504]	; (80111b8 <tcp_receive+0x2c0>)
 8010fbe:	681a      	ldr	r2, [r3, #0]
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010fc4:	4b7d      	ldr	r3, [pc, #500]	; (80111bc <tcp_receive+0x2c4>)
 8010fc6:	681a      	ldr	r2, [r3, #0]
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010fcc:	4b7b      	ldr	r3, [pc, #492]	; (80111bc <tcp_receive+0x2c4>)
 8010fce:	681a      	ldr	r2, [r3, #0]
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fd4:	1ad3      	subs	r3, r2, r3
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	dc58      	bgt.n	801108c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010fda:	4b7a      	ldr	r3, [pc, #488]	; (80111c4 <tcp_receive+0x2cc>)
 8010fdc:	881b      	ldrh	r3, [r3, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d14b      	bne.n	801107a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fe6:	687a      	ldr	r2, [r7, #4]
 8010fe8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010fec:	4413      	add	r3, r2
 8010fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ff0:	429a      	cmp	r2, r3
 8010ff2:	d142      	bne.n	801107a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	db3d      	blt.n	801107a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011002:	4b6e      	ldr	r3, [pc, #440]	; (80111bc <tcp_receive+0x2c4>)
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	429a      	cmp	r2, r3
 8011008:	d137      	bne.n	801107a <tcp_receive+0x182>
              found_dupack = 1;
 801100a:	2301      	movs	r3, #1
 801100c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011014:	2bff      	cmp	r3, #255	; 0xff
 8011016:	d007      	beq.n	8011028 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801101e:	3301      	adds	r3, #1
 8011020:	b2da      	uxtb	r2, r3
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801102e:	2b03      	cmp	r3, #3
 8011030:	d91b      	bls.n	801106a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801103c:	4413      	add	r3, r2
 801103e:	b29a      	uxth	r2, r3
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011046:	429a      	cmp	r2, r3
 8011048:	d30a      	bcc.n	8011060 <tcp_receive+0x168>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011054:	4413      	add	r3, r2
 8011056:	b29a      	uxth	r2, r3
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801105e:	e004      	b.n	801106a <tcp_receive+0x172>
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011066:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011070:	2b02      	cmp	r3, #2
 8011072:	d902      	bls.n	801107a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f002 fb41 	bl	80136fc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801107a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801107c:	2b00      	cmp	r3, #0
 801107e:	f040 8160 	bne.w	8011342 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2200      	movs	r2, #0
 8011086:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801108a:	e15a      	b.n	8011342 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801108c:	4b4b      	ldr	r3, [pc, #300]	; (80111bc <tcp_receive+0x2c4>)
 801108e:	681a      	ldr	r2, [r3, #0]
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011094:	1ad3      	subs	r3, r2, r3
 8011096:	3b01      	subs	r3, #1
 8011098:	2b00      	cmp	r3, #0
 801109a:	f2c0 814d 	blt.w	8011338 <tcp_receive+0x440>
 801109e:	4b47      	ldr	r3, [pc, #284]	; (80111bc <tcp_receive+0x2c4>)
 80110a0:	681a      	ldr	r2, [r3, #0]
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80110a6:	1ad3      	subs	r3, r2, r3
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	f300 8145 	bgt.w	8011338 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	8b5b      	ldrh	r3, [r3, #26]
 80110b2:	f003 0304 	and.w	r3, r3, #4
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d010      	beq.n	80110dc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	8b5b      	ldrh	r3, [r3, #26]
 80110be:	f023 0304 	bic.w	r3, r3, #4
 80110c2:	b29a      	uxth	r2, r3
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	2200      	movs	r2, #0
 80110d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	2200      	movs	r2, #0
 80110e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80110ea:	10db      	asrs	r3, r3, #3
 80110ec:	b21b      	sxth	r3, r3
 80110ee:	b29a      	uxth	r2, r3
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	4413      	add	r3, r2
 80110fa:	b29b      	uxth	r3, r3
 80110fc:	b21a      	sxth	r2, r3
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011104:	4b2d      	ldr	r3, [pc, #180]	; (80111bc <tcp_receive+0x2c4>)
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	b29a      	uxth	r2, r3
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801110e:	b29b      	uxth	r3, r3
 8011110:	1ad3      	subs	r3, r2, r3
 8011112:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2200      	movs	r2, #0
 8011118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801111c:	4b27      	ldr	r3, [pc, #156]	; (80111bc <tcp_receive+0x2c4>)
 801111e:	681a      	ldr	r2, [r3, #0]
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	7d1b      	ldrb	r3, [r3, #20]
 8011128:	2b03      	cmp	r3, #3
 801112a:	f240 8096 	bls.w	801125a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801113a:	429a      	cmp	r2, r3
 801113c:	d244      	bcs.n	80111c8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	8b5b      	ldrh	r3, [r3, #26]
 8011142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011146:	2b00      	cmp	r3, #0
 8011148:	d001      	beq.n	801114e <tcp_receive+0x256>
 801114a:	2301      	movs	r3, #1
 801114c:	e000      	b.n	8011150 <tcp_receive+0x258>
 801114e:	2302      	movs	r3, #2
 8011150:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011154:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011158:	b29a      	uxth	r2, r3
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801115e:	fb12 f303 	smulbb	r3, r2, r3
 8011162:	b29b      	uxth	r3, r3
 8011164:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011166:	4293      	cmp	r3, r2
 8011168:	bf28      	it	cs
 801116a:	4613      	movcs	r3, r2
 801116c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011174:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011176:	4413      	add	r3, r2
 8011178:	b29a      	uxth	r2, r3
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011180:	429a      	cmp	r2, r3
 8011182:	d309      	bcc.n	8011198 <tcp_receive+0x2a0>
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801118a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801118c:	4413      	add	r3, r2
 801118e:	b29a      	uxth	r2, r3
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011196:	e060      	b.n	801125a <tcp_receive+0x362>
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801119e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80111a2:	e05a      	b.n	801125a <tcp_receive+0x362>
 80111a4:	0801a394 	.word	0x0801a394
 80111a8:	0801a6c4 	.word	0x0801a6c4
 80111ac:	0801a3e0 	.word	0x0801a3e0
 80111b0:	0801a6e0 	.word	0x0801a6e0
 80111b4:	20006874 	.word	0x20006874
 80111b8:	20006868 	.word	0x20006868
 80111bc:	2000686c 	.word	0x2000686c
 80111c0:	20006858 	.word	0x20006858
 80111c4:	20006872 	.word	0x20006872
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80111ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80111d0:	4413      	add	r3, r2
 80111d2:	b29a      	uxth	r2, r3
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80111da:	429a      	cmp	r2, r3
 80111dc:	d309      	bcc.n	80111f2 <tcp_receive+0x2fa>
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80111e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80111e6:	4413      	add	r3, r2
 80111e8:	b29a      	uxth	r2, r3
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80111f0:	e004      	b.n	80111fc <tcp_receive+0x304>
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80111f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011208:	429a      	cmp	r2, r3
 801120a:	d326      	bcc.n	801125a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011218:	1ad3      	subs	r3, r2, r3
 801121a:	b29a      	uxth	r2, r3
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801122c:	4413      	add	r3, r2
 801122e:	b29a      	uxth	r2, r3
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011236:	429a      	cmp	r2, r3
 8011238:	d30a      	bcc.n	8011250 <tcp_receive+0x358>
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011244:	4413      	add	r3, r2
 8011246:	b29a      	uxth	r2, r3
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801124e:	e004      	b.n	801125a <tcp_receive+0x362>
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011256:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011262:	4a98      	ldr	r2, [pc, #608]	; (80114c4 <tcp_receive+0x5cc>)
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	f7ff fdcb 	bl	8010e00 <tcp_free_acked_segments>
 801126a:	4602      	mov	r2, r0
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011278:	4a93      	ldr	r2, [pc, #588]	; (80114c8 <tcp_receive+0x5d0>)
 801127a:	6878      	ldr	r0, [r7, #4]
 801127c:	f7ff fdc0 	bl	8010e00 <tcp_free_acked_segments>
 8011280:	4602      	mov	r2, r0
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801128a:	2b00      	cmp	r3, #0
 801128c:	d104      	bne.n	8011298 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011294:	861a      	strh	r2, [r3, #48]	; 0x30
 8011296:	e002      	b.n	801129e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	2200      	movs	r2, #0
 801129c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	2200      	movs	r2, #0
 80112a2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d103      	bne.n	80112b4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2200      	movs	r2, #0
 80112b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80112ba:	4b84      	ldr	r3, [pc, #528]	; (80114cc <tcp_receive+0x5d4>)
 80112bc:	881b      	ldrh	r3, [r3, #0]
 80112be:	4413      	add	r3, r2
 80112c0:	b29a      	uxth	r2, r3
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	8b5b      	ldrh	r3, [r3, #26]
 80112cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d035      	beq.n	8011340 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d118      	bne.n	801130e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d00c      	beq.n	80112fe <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112ec:	68db      	ldr	r3, [r3, #12]
 80112ee:	685b      	ldr	r3, [r3, #4]
 80112f0:	4618      	mov	r0, r3
 80112f2:	f7fa ffcc 	bl	800c28e <lwip_htonl>
 80112f6:	4603      	mov	r3, r0
 80112f8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	dc20      	bgt.n	8011340 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	8b5b      	ldrh	r3, [r3, #26]
 8011302:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011306:	b29a      	uxth	r2, r3
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801130c:	e018      	b.n	8011340 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011316:	68db      	ldr	r3, [r3, #12]
 8011318:	685b      	ldr	r3, [r3, #4]
 801131a:	4618      	mov	r0, r3
 801131c:	f7fa ffb7 	bl	800c28e <lwip_htonl>
 8011320:	4603      	mov	r3, r0
 8011322:	1ae3      	subs	r3, r4, r3
 8011324:	2b00      	cmp	r3, #0
 8011326:	dc0b      	bgt.n	8011340 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	8b5b      	ldrh	r3, [r3, #26]
 801132c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011330:	b29a      	uxth	r2, r3
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011336:	e003      	b.n	8011340 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f002 fbcd 	bl	8013ad8 <tcp_send_empty_ack>
 801133e:	e000      	b.n	8011342 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011340:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011346:	2b00      	cmp	r3, #0
 8011348:	d05b      	beq.n	8011402 <tcp_receive+0x50a>
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801134e:	4b60      	ldr	r3, [pc, #384]	; (80114d0 <tcp_receive+0x5d8>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	1ad3      	subs	r3, r2, r3
 8011354:	2b00      	cmp	r3, #0
 8011356:	da54      	bge.n	8011402 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011358:	4b5e      	ldr	r3, [pc, #376]	; (80114d4 <tcp_receive+0x5dc>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	b29a      	uxth	r2, r3
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011362:	b29b      	uxth	r3, r3
 8011364:	1ad3      	subs	r3, r2, r3
 8011366:	b29b      	uxth	r3, r3
 8011368:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801136c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011376:	10db      	asrs	r3, r3, #3
 8011378:	b21b      	sxth	r3, r3
 801137a:	b29b      	uxth	r3, r3
 801137c:	1ad3      	subs	r3, r2, r3
 801137e:	b29b      	uxth	r3, r3
 8011380:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801138a:	b29a      	uxth	r2, r3
 801138c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011390:	4413      	add	r3, r2
 8011392:	b29b      	uxth	r3, r3
 8011394:	b21a      	sxth	r2, r3
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801139a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801139e:	2b00      	cmp	r3, #0
 80113a0:	da05      	bge.n	80113ae <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80113a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80113a6:	425b      	negs	r3, r3
 80113a8:	b29b      	uxth	r3, r3
 80113aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80113ae:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80113b8:	109b      	asrs	r3, r3, #2
 80113ba:	b21b      	sxth	r3, r3
 80113bc:	b29b      	uxth	r3, r3
 80113be:	1ad3      	subs	r3, r2, r3
 80113c0:	b29b      	uxth	r3, r3
 80113c2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80113cc:	b29a      	uxth	r2, r3
 80113ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80113d2:	4413      	add	r3, r2
 80113d4:	b29b      	uxth	r3, r3
 80113d6:	b21a      	sxth	r2, r3
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80113e2:	10db      	asrs	r3, r3, #3
 80113e4:	b21b      	sxth	r3, r3
 80113e6:	b29a      	uxth	r2, r3
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	4413      	add	r3, r2
 80113f2:	b29b      	uxth	r3, r3
 80113f4:	b21a      	sxth	r2, r3
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2200      	movs	r2, #0
 8011400:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011402:	4b35      	ldr	r3, [pc, #212]	; (80114d8 <tcp_receive+0x5e0>)
 8011404:	881b      	ldrh	r3, [r3, #0]
 8011406:	2b00      	cmp	r3, #0
 8011408:	f000 84e1 	beq.w	8011dce <tcp_receive+0xed6>
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	7d1b      	ldrb	r3, [r3, #20]
 8011410:	2b06      	cmp	r3, #6
 8011412:	f200 84dc 	bhi.w	8011dce <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801141a:	4b30      	ldr	r3, [pc, #192]	; (80114dc <tcp_receive+0x5e4>)
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	1ad3      	subs	r3, r2, r3
 8011420:	3b01      	subs	r3, #1
 8011422:	2b00      	cmp	r3, #0
 8011424:	f2c0 808e 	blt.w	8011544 <tcp_receive+0x64c>
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801142c:	4b2a      	ldr	r3, [pc, #168]	; (80114d8 <tcp_receive+0x5e0>)
 801142e:	881b      	ldrh	r3, [r3, #0]
 8011430:	4619      	mov	r1, r3
 8011432:	4b2a      	ldr	r3, [pc, #168]	; (80114dc <tcp_receive+0x5e4>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	440b      	add	r3, r1
 8011438:	1ad3      	subs	r3, r2, r3
 801143a:	3301      	adds	r3, #1
 801143c:	2b00      	cmp	r3, #0
 801143e:	f300 8081 	bgt.w	8011544 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011442:	4b27      	ldr	r3, [pc, #156]	; (80114e0 <tcp_receive+0x5e8>)
 8011444:	685b      	ldr	r3, [r3, #4]
 8011446:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801144c:	4b23      	ldr	r3, [pc, #140]	; (80114dc <tcp_receive+0x5e4>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	1ad3      	subs	r3, r2, r3
 8011452:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011454:	4b22      	ldr	r3, [pc, #136]	; (80114e0 <tcp_receive+0x5e8>)
 8011456:	685b      	ldr	r3, [r3, #4]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d106      	bne.n	801146a <tcp_receive+0x572>
 801145c:	4b21      	ldr	r3, [pc, #132]	; (80114e4 <tcp_receive+0x5ec>)
 801145e:	f240 5294 	movw	r2, #1428	; 0x594
 8011462:	4921      	ldr	r1, [pc, #132]	; (80114e8 <tcp_receive+0x5f0>)
 8011464:	4821      	ldr	r0, [pc, #132]	; (80114ec <tcp_receive+0x5f4>)
 8011466:	f006 f99d 	bl	80177a4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801146c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011470:	4293      	cmp	r3, r2
 8011472:	d906      	bls.n	8011482 <tcp_receive+0x58a>
 8011474:	4b1b      	ldr	r3, [pc, #108]	; (80114e4 <tcp_receive+0x5ec>)
 8011476:	f240 5295 	movw	r2, #1429	; 0x595
 801147a:	491d      	ldr	r1, [pc, #116]	; (80114f0 <tcp_receive+0x5f8>)
 801147c:	481b      	ldr	r0, [pc, #108]	; (80114ec <tcp_receive+0x5f4>)
 801147e:	f006 f991 	bl	80177a4 <iprintf>
      off = (u16_t)off32;
 8011482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011484:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011488:	4b15      	ldr	r3, [pc, #84]	; (80114e0 <tcp_receive+0x5e8>)
 801148a:	685b      	ldr	r3, [r3, #4]
 801148c:	891b      	ldrh	r3, [r3, #8]
 801148e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011492:	429a      	cmp	r2, r3
 8011494:	d906      	bls.n	80114a4 <tcp_receive+0x5ac>
 8011496:	4b13      	ldr	r3, [pc, #76]	; (80114e4 <tcp_receive+0x5ec>)
 8011498:	f240 5297 	movw	r2, #1431	; 0x597
 801149c:	4915      	ldr	r1, [pc, #84]	; (80114f4 <tcp_receive+0x5fc>)
 801149e:	4813      	ldr	r0, [pc, #76]	; (80114ec <tcp_receive+0x5f4>)
 80114a0:	f006 f980 	bl	80177a4 <iprintf>
      inseg.len -= off;
 80114a4:	4b0e      	ldr	r3, [pc, #56]	; (80114e0 <tcp_receive+0x5e8>)
 80114a6:	891a      	ldrh	r2, [r3, #8]
 80114a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80114ac:	1ad3      	subs	r3, r2, r3
 80114ae:	b29a      	uxth	r2, r3
 80114b0:	4b0b      	ldr	r3, [pc, #44]	; (80114e0 <tcp_receive+0x5e8>)
 80114b2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80114b4:	4b0a      	ldr	r3, [pc, #40]	; (80114e0 <tcp_receive+0x5e8>)
 80114b6:	685b      	ldr	r3, [r3, #4]
 80114b8:	891a      	ldrh	r2, [r3, #8]
 80114ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80114be:	1ad3      	subs	r3, r2, r3
 80114c0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80114c2:	e029      	b.n	8011518 <tcp_receive+0x620>
 80114c4:	0801a6fc 	.word	0x0801a6fc
 80114c8:	0801a704 	.word	0x0801a704
 80114cc:	20006870 	.word	0x20006870
 80114d0:	2000686c 	.word	0x2000686c
 80114d4:	2000d694 	.word	0x2000d694
 80114d8:	20006872 	.word	0x20006872
 80114dc:	20006868 	.word	0x20006868
 80114e0:	20006848 	.word	0x20006848
 80114e4:	0801a394 	.word	0x0801a394
 80114e8:	0801a70c 	.word	0x0801a70c
 80114ec:	0801a3e0 	.word	0x0801a3e0
 80114f0:	0801a71c 	.word	0x0801a71c
 80114f4:	0801a72c 	.word	0x0801a72c
        off -= p->len;
 80114f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114fa:	895b      	ldrh	r3, [r3, #10]
 80114fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011500:	1ad3      	subs	r3, r2, r3
 8011502:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011508:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801150a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801150c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801150e:	2200      	movs	r2, #0
 8011510:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801151a:	895b      	ldrh	r3, [r3, #10]
 801151c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011520:	429a      	cmp	r2, r3
 8011522:	d8e9      	bhi.n	80114f8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011524:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011528:	4619      	mov	r1, r3
 801152a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801152c:	f7fc f95c 	bl	800d7e8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011534:	4a91      	ldr	r2, [pc, #580]	; (801177c <tcp_receive+0x884>)
 8011536:	6013      	str	r3, [r2, #0]
 8011538:	4b91      	ldr	r3, [pc, #580]	; (8011780 <tcp_receive+0x888>)
 801153a:	68db      	ldr	r3, [r3, #12]
 801153c:	4a8f      	ldr	r2, [pc, #572]	; (801177c <tcp_receive+0x884>)
 801153e:	6812      	ldr	r2, [r2, #0]
 8011540:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011542:	e00d      	b.n	8011560 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011544:	4b8d      	ldr	r3, [pc, #564]	; (801177c <tcp_receive+0x884>)
 8011546:	681a      	ldr	r2, [r3, #0]
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801154c:	1ad3      	subs	r3, r2, r3
 801154e:	2b00      	cmp	r3, #0
 8011550:	da06      	bge.n	8011560 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	8b5b      	ldrh	r3, [r3, #26]
 8011556:	f043 0302 	orr.w	r3, r3, #2
 801155a:	b29a      	uxth	r2, r3
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011560:	4b86      	ldr	r3, [pc, #536]	; (801177c <tcp_receive+0x884>)
 8011562:	681a      	ldr	r2, [r3, #0]
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011568:	1ad3      	subs	r3, r2, r3
 801156a:	2b00      	cmp	r3, #0
 801156c:	f2c0 842a 	blt.w	8011dc4 <tcp_receive+0xecc>
 8011570:	4b82      	ldr	r3, [pc, #520]	; (801177c <tcp_receive+0x884>)
 8011572:	681a      	ldr	r2, [r3, #0]
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011578:	6879      	ldr	r1, [r7, #4]
 801157a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801157c:	440b      	add	r3, r1
 801157e:	1ad3      	subs	r3, r2, r3
 8011580:	3301      	adds	r3, #1
 8011582:	2b00      	cmp	r3, #0
 8011584:	f300 841e 	bgt.w	8011dc4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801158c:	4b7b      	ldr	r3, [pc, #492]	; (801177c <tcp_receive+0x884>)
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	429a      	cmp	r2, r3
 8011592:	f040 829a 	bne.w	8011aca <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011596:	4b7a      	ldr	r3, [pc, #488]	; (8011780 <tcp_receive+0x888>)
 8011598:	891c      	ldrh	r4, [r3, #8]
 801159a:	4b79      	ldr	r3, [pc, #484]	; (8011780 <tcp_receive+0x888>)
 801159c:	68db      	ldr	r3, [r3, #12]
 801159e:	899b      	ldrh	r3, [r3, #12]
 80115a0:	b29b      	uxth	r3, r3
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7fa fe5e 	bl	800c264 <lwip_htons>
 80115a8:	4603      	mov	r3, r0
 80115aa:	b2db      	uxtb	r3, r3
 80115ac:	f003 0303 	and.w	r3, r3, #3
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d001      	beq.n	80115b8 <tcp_receive+0x6c0>
 80115b4:	2301      	movs	r3, #1
 80115b6:	e000      	b.n	80115ba <tcp_receive+0x6c2>
 80115b8:	2300      	movs	r3, #0
 80115ba:	4423      	add	r3, r4
 80115bc:	b29a      	uxth	r2, r3
 80115be:	4b71      	ldr	r3, [pc, #452]	; (8011784 <tcp_receive+0x88c>)
 80115c0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80115c6:	4b6f      	ldr	r3, [pc, #444]	; (8011784 <tcp_receive+0x88c>)
 80115c8:	881b      	ldrh	r3, [r3, #0]
 80115ca:	429a      	cmp	r2, r3
 80115cc:	d275      	bcs.n	80116ba <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80115ce:	4b6c      	ldr	r3, [pc, #432]	; (8011780 <tcp_receive+0x888>)
 80115d0:	68db      	ldr	r3, [r3, #12]
 80115d2:	899b      	ldrh	r3, [r3, #12]
 80115d4:	b29b      	uxth	r3, r3
 80115d6:	4618      	mov	r0, r3
 80115d8:	f7fa fe44 	bl	800c264 <lwip_htons>
 80115dc:	4603      	mov	r3, r0
 80115de:	b2db      	uxtb	r3, r3
 80115e0:	f003 0301 	and.w	r3, r3, #1
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d01f      	beq.n	8011628 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80115e8:	4b65      	ldr	r3, [pc, #404]	; (8011780 <tcp_receive+0x888>)
 80115ea:	68db      	ldr	r3, [r3, #12]
 80115ec:	899b      	ldrh	r3, [r3, #12]
 80115ee:	b29b      	uxth	r3, r3
 80115f0:	b21b      	sxth	r3, r3
 80115f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80115f6:	b21c      	sxth	r4, r3
 80115f8:	4b61      	ldr	r3, [pc, #388]	; (8011780 <tcp_receive+0x888>)
 80115fa:	68db      	ldr	r3, [r3, #12]
 80115fc:	899b      	ldrh	r3, [r3, #12]
 80115fe:	b29b      	uxth	r3, r3
 8011600:	4618      	mov	r0, r3
 8011602:	f7fa fe2f 	bl	800c264 <lwip_htons>
 8011606:	4603      	mov	r3, r0
 8011608:	b2db      	uxtb	r3, r3
 801160a:	b29b      	uxth	r3, r3
 801160c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011610:	b29b      	uxth	r3, r3
 8011612:	4618      	mov	r0, r3
 8011614:	f7fa fe26 	bl	800c264 <lwip_htons>
 8011618:	4603      	mov	r3, r0
 801161a:	b21b      	sxth	r3, r3
 801161c:	4323      	orrs	r3, r4
 801161e:	b21a      	sxth	r2, r3
 8011620:	4b57      	ldr	r3, [pc, #348]	; (8011780 <tcp_receive+0x888>)
 8011622:	68db      	ldr	r3, [r3, #12]
 8011624:	b292      	uxth	r2, r2
 8011626:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801162c:	4b54      	ldr	r3, [pc, #336]	; (8011780 <tcp_receive+0x888>)
 801162e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011630:	4b53      	ldr	r3, [pc, #332]	; (8011780 <tcp_receive+0x888>)
 8011632:	68db      	ldr	r3, [r3, #12]
 8011634:	899b      	ldrh	r3, [r3, #12]
 8011636:	b29b      	uxth	r3, r3
 8011638:	4618      	mov	r0, r3
 801163a:	f7fa fe13 	bl	800c264 <lwip_htons>
 801163e:	4603      	mov	r3, r0
 8011640:	b2db      	uxtb	r3, r3
 8011642:	f003 0302 	and.w	r3, r3, #2
 8011646:	2b00      	cmp	r3, #0
 8011648:	d005      	beq.n	8011656 <tcp_receive+0x75e>
            inseg.len -= 1;
 801164a:	4b4d      	ldr	r3, [pc, #308]	; (8011780 <tcp_receive+0x888>)
 801164c:	891b      	ldrh	r3, [r3, #8]
 801164e:	3b01      	subs	r3, #1
 8011650:	b29a      	uxth	r2, r3
 8011652:	4b4b      	ldr	r3, [pc, #300]	; (8011780 <tcp_receive+0x888>)
 8011654:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011656:	4b4a      	ldr	r3, [pc, #296]	; (8011780 <tcp_receive+0x888>)
 8011658:	685b      	ldr	r3, [r3, #4]
 801165a:	4a49      	ldr	r2, [pc, #292]	; (8011780 <tcp_receive+0x888>)
 801165c:	8912      	ldrh	r2, [r2, #8]
 801165e:	4611      	mov	r1, r2
 8011660:	4618      	mov	r0, r3
 8011662:	f7fb ffc1 	bl	800d5e8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011666:	4b46      	ldr	r3, [pc, #280]	; (8011780 <tcp_receive+0x888>)
 8011668:	891c      	ldrh	r4, [r3, #8]
 801166a:	4b45      	ldr	r3, [pc, #276]	; (8011780 <tcp_receive+0x888>)
 801166c:	68db      	ldr	r3, [r3, #12]
 801166e:	899b      	ldrh	r3, [r3, #12]
 8011670:	b29b      	uxth	r3, r3
 8011672:	4618      	mov	r0, r3
 8011674:	f7fa fdf6 	bl	800c264 <lwip_htons>
 8011678:	4603      	mov	r3, r0
 801167a:	b2db      	uxtb	r3, r3
 801167c:	f003 0303 	and.w	r3, r3, #3
 8011680:	2b00      	cmp	r3, #0
 8011682:	d001      	beq.n	8011688 <tcp_receive+0x790>
 8011684:	2301      	movs	r3, #1
 8011686:	e000      	b.n	801168a <tcp_receive+0x792>
 8011688:	2300      	movs	r3, #0
 801168a:	4423      	add	r3, r4
 801168c:	b29a      	uxth	r2, r3
 801168e:	4b3d      	ldr	r3, [pc, #244]	; (8011784 <tcp_receive+0x88c>)
 8011690:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011692:	4b3c      	ldr	r3, [pc, #240]	; (8011784 <tcp_receive+0x88c>)
 8011694:	881b      	ldrh	r3, [r3, #0]
 8011696:	461a      	mov	r2, r3
 8011698:	4b38      	ldr	r3, [pc, #224]	; (801177c <tcp_receive+0x884>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	441a      	add	r2, r3
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116a2:	6879      	ldr	r1, [r7, #4]
 80116a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80116a6:	440b      	add	r3, r1
 80116a8:	429a      	cmp	r2, r3
 80116aa:	d006      	beq.n	80116ba <tcp_receive+0x7c2>
 80116ac:	4b36      	ldr	r3, [pc, #216]	; (8011788 <tcp_receive+0x890>)
 80116ae:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80116b2:	4936      	ldr	r1, [pc, #216]	; (801178c <tcp_receive+0x894>)
 80116b4:	4836      	ldr	r0, [pc, #216]	; (8011790 <tcp_receive+0x898>)
 80116b6:	f006 f875 	bl	80177a4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116be:	2b00      	cmp	r3, #0
 80116c0:	f000 80e7 	beq.w	8011892 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80116c4:	4b2e      	ldr	r3, [pc, #184]	; (8011780 <tcp_receive+0x888>)
 80116c6:	68db      	ldr	r3, [r3, #12]
 80116c8:	899b      	ldrh	r3, [r3, #12]
 80116ca:	b29b      	uxth	r3, r3
 80116cc:	4618      	mov	r0, r3
 80116ce:	f7fa fdc9 	bl	800c264 <lwip_htons>
 80116d2:	4603      	mov	r3, r0
 80116d4:	b2db      	uxtb	r3, r3
 80116d6:	f003 0301 	and.w	r3, r3, #1
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d010      	beq.n	8011700 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80116de:	e00a      	b.n	80116f6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116e4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116ea:	681a      	ldr	r2, [r3, #0]
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80116f0:	68f8      	ldr	r0, [r7, #12]
 80116f2:	f7fd fcc8 	bl	800f086 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d1f0      	bne.n	80116e0 <tcp_receive+0x7e8>
 80116fe:	e0c8      	b.n	8011892 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011704:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011706:	e052      	b.n	80117ae <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801170a:	68db      	ldr	r3, [r3, #12]
 801170c:	899b      	ldrh	r3, [r3, #12]
 801170e:	b29b      	uxth	r3, r3
 8011710:	4618      	mov	r0, r3
 8011712:	f7fa fda7 	bl	800c264 <lwip_htons>
 8011716:	4603      	mov	r3, r0
 8011718:	b2db      	uxtb	r3, r3
 801171a:	f003 0301 	and.w	r3, r3, #1
 801171e:	2b00      	cmp	r3, #0
 8011720:	d03d      	beq.n	801179e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011722:	4b17      	ldr	r3, [pc, #92]	; (8011780 <tcp_receive+0x888>)
 8011724:	68db      	ldr	r3, [r3, #12]
 8011726:	899b      	ldrh	r3, [r3, #12]
 8011728:	b29b      	uxth	r3, r3
 801172a:	4618      	mov	r0, r3
 801172c:	f7fa fd9a 	bl	800c264 <lwip_htons>
 8011730:	4603      	mov	r3, r0
 8011732:	b2db      	uxtb	r3, r3
 8011734:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011738:	2b00      	cmp	r3, #0
 801173a:	d130      	bne.n	801179e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801173c:	4b10      	ldr	r3, [pc, #64]	; (8011780 <tcp_receive+0x888>)
 801173e:	68db      	ldr	r3, [r3, #12]
 8011740:	899b      	ldrh	r3, [r3, #12]
 8011742:	b29c      	uxth	r4, r3
 8011744:	2001      	movs	r0, #1
 8011746:	f7fa fd8d 	bl	800c264 <lwip_htons>
 801174a:	4603      	mov	r3, r0
 801174c:	461a      	mov	r2, r3
 801174e:	4b0c      	ldr	r3, [pc, #48]	; (8011780 <tcp_receive+0x888>)
 8011750:	68db      	ldr	r3, [r3, #12]
 8011752:	4322      	orrs	r2, r4
 8011754:	b292      	uxth	r2, r2
 8011756:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011758:	4b09      	ldr	r3, [pc, #36]	; (8011780 <tcp_receive+0x888>)
 801175a:	891c      	ldrh	r4, [r3, #8]
 801175c:	4b08      	ldr	r3, [pc, #32]	; (8011780 <tcp_receive+0x888>)
 801175e:	68db      	ldr	r3, [r3, #12]
 8011760:	899b      	ldrh	r3, [r3, #12]
 8011762:	b29b      	uxth	r3, r3
 8011764:	4618      	mov	r0, r3
 8011766:	f7fa fd7d 	bl	800c264 <lwip_htons>
 801176a:	4603      	mov	r3, r0
 801176c:	b2db      	uxtb	r3, r3
 801176e:	f003 0303 	and.w	r3, r3, #3
 8011772:	2b00      	cmp	r3, #0
 8011774:	d00e      	beq.n	8011794 <tcp_receive+0x89c>
 8011776:	2301      	movs	r3, #1
 8011778:	e00d      	b.n	8011796 <tcp_receive+0x89e>
 801177a:	bf00      	nop
 801177c:	20006868 	.word	0x20006868
 8011780:	20006848 	.word	0x20006848
 8011784:	20006872 	.word	0x20006872
 8011788:	0801a394 	.word	0x0801a394
 801178c:	0801a73c 	.word	0x0801a73c
 8011790:	0801a3e0 	.word	0x0801a3e0
 8011794:	2300      	movs	r3, #0
 8011796:	4423      	add	r3, r4
 8011798:	b29a      	uxth	r2, r3
 801179a:	4b98      	ldr	r3, [pc, #608]	; (80119fc <tcp_receive+0xb04>)
 801179c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801179e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117a0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80117a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80117a8:	6938      	ldr	r0, [r7, #16]
 80117aa:	f7fd fc6c 	bl	800f086 <tcp_seg_free>
            while (next &&
 80117ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d00e      	beq.n	80117d2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80117b4:	4b91      	ldr	r3, [pc, #580]	; (80119fc <tcp_receive+0xb04>)
 80117b6:	881b      	ldrh	r3, [r3, #0]
 80117b8:	461a      	mov	r2, r3
 80117ba:	4b91      	ldr	r3, [pc, #580]	; (8011a00 <tcp_receive+0xb08>)
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	441a      	add	r2, r3
 80117c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117c2:	68db      	ldr	r3, [r3, #12]
 80117c4:	685b      	ldr	r3, [r3, #4]
 80117c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80117c8:	8909      	ldrh	r1, [r1, #8]
 80117ca:	440b      	add	r3, r1
 80117cc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	da9a      	bge.n	8011708 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80117d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d059      	beq.n	801188c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80117d8:	4b88      	ldr	r3, [pc, #544]	; (80119fc <tcp_receive+0xb04>)
 80117da:	881b      	ldrh	r3, [r3, #0]
 80117dc:	461a      	mov	r2, r3
 80117de:	4b88      	ldr	r3, [pc, #544]	; (8011a00 <tcp_receive+0xb08>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	441a      	add	r2, r3
 80117e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117e6:	68db      	ldr	r3, [r3, #12]
 80117e8:	685b      	ldr	r3, [r3, #4]
 80117ea:	1ad3      	subs	r3, r2, r3
            if (next &&
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	dd4d      	ble.n	801188c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80117f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117f2:	68db      	ldr	r3, [r3, #12]
 80117f4:	685b      	ldr	r3, [r3, #4]
 80117f6:	b29a      	uxth	r2, r3
 80117f8:	4b81      	ldr	r3, [pc, #516]	; (8011a00 <tcp_receive+0xb08>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	b29b      	uxth	r3, r3
 80117fe:	1ad3      	subs	r3, r2, r3
 8011800:	b29a      	uxth	r2, r3
 8011802:	4b80      	ldr	r3, [pc, #512]	; (8011a04 <tcp_receive+0xb0c>)
 8011804:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011806:	4b7f      	ldr	r3, [pc, #508]	; (8011a04 <tcp_receive+0xb0c>)
 8011808:	68db      	ldr	r3, [r3, #12]
 801180a:	899b      	ldrh	r3, [r3, #12]
 801180c:	b29b      	uxth	r3, r3
 801180e:	4618      	mov	r0, r3
 8011810:	f7fa fd28 	bl	800c264 <lwip_htons>
 8011814:	4603      	mov	r3, r0
 8011816:	b2db      	uxtb	r3, r3
 8011818:	f003 0302 	and.w	r3, r3, #2
 801181c:	2b00      	cmp	r3, #0
 801181e:	d005      	beq.n	801182c <tcp_receive+0x934>
                inseg.len -= 1;
 8011820:	4b78      	ldr	r3, [pc, #480]	; (8011a04 <tcp_receive+0xb0c>)
 8011822:	891b      	ldrh	r3, [r3, #8]
 8011824:	3b01      	subs	r3, #1
 8011826:	b29a      	uxth	r2, r3
 8011828:	4b76      	ldr	r3, [pc, #472]	; (8011a04 <tcp_receive+0xb0c>)
 801182a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801182c:	4b75      	ldr	r3, [pc, #468]	; (8011a04 <tcp_receive+0xb0c>)
 801182e:	685b      	ldr	r3, [r3, #4]
 8011830:	4a74      	ldr	r2, [pc, #464]	; (8011a04 <tcp_receive+0xb0c>)
 8011832:	8912      	ldrh	r2, [r2, #8]
 8011834:	4611      	mov	r1, r2
 8011836:	4618      	mov	r0, r3
 8011838:	f7fb fed6 	bl	800d5e8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801183c:	4b71      	ldr	r3, [pc, #452]	; (8011a04 <tcp_receive+0xb0c>)
 801183e:	891c      	ldrh	r4, [r3, #8]
 8011840:	4b70      	ldr	r3, [pc, #448]	; (8011a04 <tcp_receive+0xb0c>)
 8011842:	68db      	ldr	r3, [r3, #12]
 8011844:	899b      	ldrh	r3, [r3, #12]
 8011846:	b29b      	uxth	r3, r3
 8011848:	4618      	mov	r0, r3
 801184a:	f7fa fd0b 	bl	800c264 <lwip_htons>
 801184e:	4603      	mov	r3, r0
 8011850:	b2db      	uxtb	r3, r3
 8011852:	f003 0303 	and.w	r3, r3, #3
 8011856:	2b00      	cmp	r3, #0
 8011858:	d001      	beq.n	801185e <tcp_receive+0x966>
 801185a:	2301      	movs	r3, #1
 801185c:	e000      	b.n	8011860 <tcp_receive+0x968>
 801185e:	2300      	movs	r3, #0
 8011860:	4423      	add	r3, r4
 8011862:	b29a      	uxth	r2, r3
 8011864:	4b65      	ldr	r3, [pc, #404]	; (80119fc <tcp_receive+0xb04>)
 8011866:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011868:	4b64      	ldr	r3, [pc, #400]	; (80119fc <tcp_receive+0xb04>)
 801186a:	881b      	ldrh	r3, [r3, #0]
 801186c:	461a      	mov	r2, r3
 801186e:	4b64      	ldr	r3, [pc, #400]	; (8011a00 <tcp_receive+0xb08>)
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	441a      	add	r2, r3
 8011874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011876:	68db      	ldr	r3, [r3, #12]
 8011878:	685b      	ldr	r3, [r3, #4]
 801187a:	429a      	cmp	r2, r3
 801187c:	d006      	beq.n	801188c <tcp_receive+0x994>
 801187e:	4b62      	ldr	r3, [pc, #392]	; (8011a08 <tcp_receive+0xb10>)
 8011880:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011884:	4961      	ldr	r1, [pc, #388]	; (8011a0c <tcp_receive+0xb14>)
 8011886:	4862      	ldr	r0, [pc, #392]	; (8011a10 <tcp_receive+0xb18>)
 8011888:	f005 ff8c 	bl	80177a4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011890:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011892:	4b5a      	ldr	r3, [pc, #360]	; (80119fc <tcp_receive+0xb04>)
 8011894:	881b      	ldrh	r3, [r3, #0]
 8011896:	461a      	mov	r2, r3
 8011898:	4b59      	ldr	r3, [pc, #356]	; (8011a00 <tcp_receive+0xb08>)
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	441a      	add	r2, r3
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80118a6:	4b55      	ldr	r3, [pc, #340]	; (80119fc <tcp_receive+0xb04>)
 80118a8:	881b      	ldrh	r3, [r3, #0]
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d206      	bcs.n	80118bc <tcp_receive+0x9c4>
 80118ae:	4b56      	ldr	r3, [pc, #344]	; (8011a08 <tcp_receive+0xb10>)
 80118b0:	f240 6207 	movw	r2, #1543	; 0x607
 80118b4:	4957      	ldr	r1, [pc, #348]	; (8011a14 <tcp_receive+0xb1c>)
 80118b6:	4856      	ldr	r0, [pc, #344]	; (8011a10 <tcp_receive+0xb18>)
 80118b8:	f005 ff74 	bl	80177a4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80118c0:	4b4e      	ldr	r3, [pc, #312]	; (80119fc <tcp_receive+0xb04>)
 80118c2:	881b      	ldrh	r3, [r3, #0]
 80118c4:	1ad3      	subs	r3, r2, r3
 80118c6:	b29a      	uxth	r2, r3
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80118cc:	6878      	ldr	r0, [r7, #4]
 80118ce:	f7fc feb5 	bl	800e63c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80118d2:	4b4c      	ldr	r3, [pc, #304]	; (8011a04 <tcp_receive+0xb0c>)
 80118d4:	685b      	ldr	r3, [r3, #4]
 80118d6:	891b      	ldrh	r3, [r3, #8]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d006      	beq.n	80118ea <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80118dc:	4b49      	ldr	r3, [pc, #292]	; (8011a04 <tcp_receive+0xb0c>)
 80118de:	685b      	ldr	r3, [r3, #4]
 80118e0:	4a4d      	ldr	r2, [pc, #308]	; (8011a18 <tcp_receive+0xb20>)
 80118e2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80118e4:	4b47      	ldr	r3, [pc, #284]	; (8011a04 <tcp_receive+0xb0c>)
 80118e6:	2200      	movs	r2, #0
 80118e8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80118ea:	4b46      	ldr	r3, [pc, #280]	; (8011a04 <tcp_receive+0xb0c>)
 80118ec:	68db      	ldr	r3, [r3, #12]
 80118ee:	899b      	ldrh	r3, [r3, #12]
 80118f0:	b29b      	uxth	r3, r3
 80118f2:	4618      	mov	r0, r3
 80118f4:	f7fa fcb6 	bl	800c264 <lwip_htons>
 80118f8:	4603      	mov	r3, r0
 80118fa:	b2db      	uxtb	r3, r3
 80118fc:	f003 0301 	and.w	r3, r3, #1
 8011900:	2b00      	cmp	r3, #0
 8011902:	f000 80b8 	beq.w	8011a76 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011906:	4b45      	ldr	r3, [pc, #276]	; (8011a1c <tcp_receive+0xb24>)
 8011908:	781b      	ldrb	r3, [r3, #0]
 801190a:	f043 0320 	orr.w	r3, r3, #32
 801190e:	b2da      	uxtb	r2, r3
 8011910:	4b42      	ldr	r3, [pc, #264]	; (8011a1c <tcp_receive+0xb24>)
 8011912:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011914:	e0af      	b.n	8011a76 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801191a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011920:	68db      	ldr	r3, [r3, #12]
 8011922:	685b      	ldr	r3, [r3, #4]
 8011924:	4a36      	ldr	r2, [pc, #216]	; (8011a00 <tcp_receive+0xb08>)
 8011926:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011928:	68bb      	ldr	r3, [r7, #8]
 801192a:	891b      	ldrh	r3, [r3, #8]
 801192c:	461c      	mov	r4, r3
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	68db      	ldr	r3, [r3, #12]
 8011932:	899b      	ldrh	r3, [r3, #12]
 8011934:	b29b      	uxth	r3, r3
 8011936:	4618      	mov	r0, r3
 8011938:	f7fa fc94 	bl	800c264 <lwip_htons>
 801193c:	4603      	mov	r3, r0
 801193e:	b2db      	uxtb	r3, r3
 8011940:	f003 0303 	and.w	r3, r3, #3
 8011944:	2b00      	cmp	r3, #0
 8011946:	d001      	beq.n	801194c <tcp_receive+0xa54>
 8011948:	2301      	movs	r3, #1
 801194a:	e000      	b.n	801194e <tcp_receive+0xa56>
 801194c:	2300      	movs	r3, #0
 801194e:	191a      	adds	r2, r3, r4
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011954:	441a      	add	r2, r3
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801195e:	461c      	mov	r4, r3
 8011960:	68bb      	ldr	r3, [r7, #8]
 8011962:	891b      	ldrh	r3, [r3, #8]
 8011964:	461d      	mov	r5, r3
 8011966:	68bb      	ldr	r3, [r7, #8]
 8011968:	68db      	ldr	r3, [r3, #12]
 801196a:	899b      	ldrh	r3, [r3, #12]
 801196c:	b29b      	uxth	r3, r3
 801196e:	4618      	mov	r0, r3
 8011970:	f7fa fc78 	bl	800c264 <lwip_htons>
 8011974:	4603      	mov	r3, r0
 8011976:	b2db      	uxtb	r3, r3
 8011978:	f003 0303 	and.w	r3, r3, #3
 801197c:	2b00      	cmp	r3, #0
 801197e:	d001      	beq.n	8011984 <tcp_receive+0xa8c>
 8011980:	2301      	movs	r3, #1
 8011982:	e000      	b.n	8011986 <tcp_receive+0xa8e>
 8011984:	2300      	movs	r3, #0
 8011986:	442b      	add	r3, r5
 8011988:	429c      	cmp	r4, r3
 801198a:	d206      	bcs.n	801199a <tcp_receive+0xaa2>
 801198c:	4b1e      	ldr	r3, [pc, #120]	; (8011a08 <tcp_receive+0xb10>)
 801198e:	f240 622b 	movw	r2, #1579	; 0x62b
 8011992:	4923      	ldr	r1, [pc, #140]	; (8011a20 <tcp_receive+0xb28>)
 8011994:	481e      	ldr	r0, [pc, #120]	; (8011a10 <tcp_receive+0xb18>)
 8011996:	f005 ff05 	bl	80177a4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801199a:	68bb      	ldr	r3, [r7, #8]
 801199c:	891b      	ldrh	r3, [r3, #8]
 801199e:	461c      	mov	r4, r3
 80119a0:	68bb      	ldr	r3, [r7, #8]
 80119a2:	68db      	ldr	r3, [r3, #12]
 80119a4:	899b      	ldrh	r3, [r3, #12]
 80119a6:	b29b      	uxth	r3, r3
 80119a8:	4618      	mov	r0, r3
 80119aa:	f7fa fc5b 	bl	800c264 <lwip_htons>
 80119ae:	4603      	mov	r3, r0
 80119b0:	b2db      	uxtb	r3, r3
 80119b2:	f003 0303 	and.w	r3, r3, #3
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d001      	beq.n	80119be <tcp_receive+0xac6>
 80119ba:	2301      	movs	r3, #1
 80119bc:	e000      	b.n	80119c0 <tcp_receive+0xac8>
 80119be:	2300      	movs	r3, #0
 80119c0:	1919      	adds	r1, r3, r4
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80119c6:	b28b      	uxth	r3, r1
 80119c8:	1ad3      	subs	r3, r2, r3
 80119ca:	b29a      	uxth	r2, r3
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80119d0:	6878      	ldr	r0, [r7, #4]
 80119d2:	f7fc fe33 	bl	800e63c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80119d6:	68bb      	ldr	r3, [r7, #8]
 80119d8:	685b      	ldr	r3, [r3, #4]
 80119da:	891b      	ldrh	r3, [r3, #8]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d028      	beq.n	8011a32 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80119e0:	4b0d      	ldr	r3, [pc, #52]	; (8011a18 <tcp_receive+0xb20>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d01d      	beq.n	8011a24 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80119e8:	4b0b      	ldr	r3, [pc, #44]	; (8011a18 <tcp_receive+0xb20>)
 80119ea:	681a      	ldr	r2, [r3, #0]
 80119ec:	68bb      	ldr	r3, [r7, #8]
 80119ee:	685b      	ldr	r3, [r3, #4]
 80119f0:	4619      	mov	r1, r3
 80119f2:	4610      	mov	r0, r2
 80119f4:	f7fc f84c 	bl	800da90 <pbuf_cat>
 80119f8:	e018      	b.n	8011a2c <tcp_receive+0xb34>
 80119fa:	bf00      	nop
 80119fc:	20006872 	.word	0x20006872
 8011a00:	20006868 	.word	0x20006868
 8011a04:	20006848 	.word	0x20006848
 8011a08:	0801a394 	.word	0x0801a394
 8011a0c:	0801a774 	.word	0x0801a774
 8011a10:	0801a3e0 	.word	0x0801a3e0
 8011a14:	0801a7b0 	.word	0x0801a7b0
 8011a18:	20006878 	.word	0x20006878
 8011a1c:	20006875 	.word	0x20006875
 8011a20:	0801a7d0 	.word	0x0801a7d0
            } else {
              recv_data = cseg->p;
 8011a24:	68bb      	ldr	r3, [r7, #8]
 8011a26:	685b      	ldr	r3, [r3, #4]
 8011a28:	4a70      	ldr	r2, [pc, #448]	; (8011bec <tcp_receive+0xcf4>)
 8011a2a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	2200      	movs	r2, #0
 8011a30:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011a32:	68bb      	ldr	r3, [r7, #8]
 8011a34:	68db      	ldr	r3, [r3, #12]
 8011a36:	899b      	ldrh	r3, [r3, #12]
 8011a38:	b29b      	uxth	r3, r3
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f7fa fc12 	bl	800c264 <lwip_htons>
 8011a40:	4603      	mov	r3, r0
 8011a42:	b2db      	uxtb	r3, r3
 8011a44:	f003 0301 	and.w	r3, r3, #1
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d00d      	beq.n	8011a68 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011a4c:	4b68      	ldr	r3, [pc, #416]	; (8011bf0 <tcp_receive+0xcf8>)
 8011a4e:	781b      	ldrb	r3, [r3, #0]
 8011a50:	f043 0320 	orr.w	r3, r3, #32
 8011a54:	b2da      	uxtb	r2, r3
 8011a56:	4b66      	ldr	r3, [pc, #408]	; (8011bf0 <tcp_receive+0xcf8>)
 8011a58:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	7d1b      	ldrb	r3, [r3, #20]
 8011a5e:	2b04      	cmp	r3, #4
 8011a60:	d102      	bne.n	8011a68 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	2207      	movs	r2, #7
 8011a66:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	681a      	ldr	r2, [r3, #0]
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011a70:	68b8      	ldr	r0, [r7, #8]
 8011a72:	f7fd fb08 	bl	800f086 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d008      	beq.n	8011a90 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a82:	68db      	ldr	r3, [r3, #12]
 8011a84:	685a      	ldr	r2, [r3, #4]
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011a8a:	429a      	cmp	r2, r3
 8011a8c:	f43f af43 	beq.w	8011916 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	8b5b      	ldrh	r3, [r3, #26]
 8011a94:	f003 0301 	and.w	r3, r3, #1
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d00e      	beq.n	8011aba <tcp_receive+0xbc2>
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	8b5b      	ldrh	r3, [r3, #26]
 8011aa0:	f023 0301 	bic.w	r3, r3, #1
 8011aa4:	b29a      	uxth	r2, r3
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	835a      	strh	r2, [r3, #26]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	8b5b      	ldrh	r3, [r3, #26]
 8011aae:	f043 0302 	orr.w	r3, r3, #2
 8011ab2:	b29a      	uxth	r2, r3
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011ab8:	e188      	b.n	8011dcc <tcp_receive+0xed4>
        tcp_ack(pcb);
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	8b5b      	ldrh	r3, [r3, #26]
 8011abe:	f043 0301 	orr.w	r3, r3, #1
 8011ac2:	b29a      	uxth	r2, r3
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011ac8:	e180      	b.n	8011dcc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d106      	bne.n	8011ae0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011ad2:	4848      	ldr	r0, [pc, #288]	; (8011bf4 <tcp_receive+0xcfc>)
 8011ad4:	f7fd faf0 	bl	800f0b8 <tcp_seg_copy>
 8011ad8:	4602      	mov	r2, r0
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	675a      	str	r2, [r3, #116]	; 0x74
 8011ade:	e16d      	b.n	8011dbc <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ae8:	63bb      	str	r3, [r7, #56]	; 0x38
 8011aea:	e157      	b.n	8011d9c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8011aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aee:	68db      	ldr	r3, [r3, #12]
 8011af0:	685a      	ldr	r2, [r3, #4]
 8011af2:	4b41      	ldr	r3, [pc, #260]	; (8011bf8 <tcp_receive+0xd00>)
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	429a      	cmp	r2, r3
 8011af8:	d11d      	bne.n	8011b36 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011afa:	4b3e      	ldr	r3, [pc, #248]	; (8011bf4 <tcp_receive+0xcfc>)
 8011afc:	891a      	ldrh	r2, [r3, #8]
 8011afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b00:	891b      	ldrh	r3, [r3, #8]
 8011b02:	429a      	cmp	r2, r3
 8011b04:	f240 814f 	bls.w	8011da6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011b08:	483a      	ldr	r0, [pc, #232]	; (8011bf4 <tcp_receive+0xcfc>)
 8011b0a:	f7fd fad5 	bl	800f0b8 <tcp_seg_copy>
 8011b0e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011b10:	697b      	ldr	r3, [r7, #20]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	f000 8149 	beq.w	8011daa <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8011b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d003      	beq.n	8011b26 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b20:	697a      	ldr	r2, [r7, #20]
 8011b22:	601a      	str	r2, [r3, #0]
 8011b24:	e002      	b.n	8011b2c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	697a      	ldr	r2, [r7, #20]
 8011b2a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011b2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011b2e:	6978      	ldr	r0, [r7, #20]
 8011b30:	f7ff f8de 	bl	8010cf0 <tcp_oos_insert_segment>
                }
                break;
 8011b34:	e139      	b.n	8011daa <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d117      	bne.n	8011b6c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011b3c:	4b2e      	ldr	r3, [pc, #184]	; (8011bf8 <tcp_receive+0xd00>)
 8011b3e:	681a      	ldr	r2, [r3, #0]
 8011b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b42:	68db      	ldr	r3, [r3, #12]
 8011b44:	685b      	ldr	r3, [r3, #4]
 8011b46:	1ad3      	subs	r3, r2, r3
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	da57      	bge.n	8011bfc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011b4c:	4829      	ldr	r0, [pc, #164]	; (8011bf4 <tcp_receive+0xcfc>)
 8011b4e:	f7fd fab3 	bl	800f0b8 <tcp_seg_copy>
 8011b52:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011b54:	69bb      	ldr	r3, [r7, #24]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	f000 8129 	beq.w	8011dae <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	69ba      	ldr	r2, [r7, #24]
 8011b60:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011b62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011b64:	69b8      	ldr	r0, [r7, #24]
 8011b66:	f7ff f8c3 	bl	8010cf0 <tcp_oos_insert_segment>
                  }
                  break;
 8011b6a:	e120      	b.n	8011dae <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011b6c:	4b22      	ldr	r3, [pc, #136]	; (8011bf8 <tcp_receive+0xd00>)
 8011b6e:	681a      	ldr	r2, [r3, #0]
 8011b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b72:	68db      	ldr	r3, [r3, #12]
 8011b74:	685b      	ldr	r3, [r3, #4]
 8011b76:	1ad3      	subs	r3, r2, r3
 8011b78:	3b01      	subs	r3, #1
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	db3e      	blt.n	8011bfc <tcp_receive+0xd04>
 8011b7e:	4b1e      	ldr	r3, [pc, #120]	; (8011bf8 <tcp_receive+0xd00>)
 8011b80:	681a      	ldr	r2, [r3, #0]
 8011b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b84:	68db      	ldr	r3, [r3, #12]
 8011b86:	685b      	ldr	r3, [r3, #4]
 8011b88:	1ad3      	subs	r3, r2, r3
 8011b8a:	3301      	adds	r3, #1
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	dc35      	bgt.n	8011bfc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011b90:	4818      	ldr	r0, [pc, #96]	; (8011bf4 <tcp_receive+0xcfc>)
 8011b92:	f7fd fa91 	bl	800f0b8 <tcp_seg_copy>
 8011b96:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011b98:	69fb      	ldr	r3, [r7, #28]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	f000 8109 	beq.w	8011db2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ba2:	68db      	ldr	r3, [r3, #12]
 8011ba4:	685b      	ldr	r3, [r3, #4]
 8011ba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ba8:	8912      	ldrh	r2, [r2, #8]
 8011baa:	441a      	add	r2, r3
 8011bac:	4b12      	ldr	r3, [pc, #72]	; (8011bf8 <tcp_receive+0xd00>)
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	1ad3      	subs	r3, r2, r3
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	dd12      	ble.n	8011bdc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011bb6:	4b10      	ldr	r3, [pc, #64]	; (8011bf8 <tcp_receive+0xd00>)
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	b29a      	uxth	r2, r3
 8011bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bbe:	68db      	ldr	r3, [r3, #12]
 8011bc0:	685b      	ldr	r3, [r3, #4]
 8011bc2:	b29b      	uxth	r3, r3
 8011bc4:	1ad3      	subs	r3, r2, r3
 8011bc6:	b29a      	uxth	r2, r3
 8011bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bca:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bce:	685a      	ldr	r2, [r3, #4]
 8011bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bd2:	891b      	ldrh	r3, [r3, #8]
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	4610      	mov	r0, r2
 8011bd8:	f7fb fd06 	bl	800d5e8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bde:	69fa      	ldr	r2, [r7, #28]
 8011be0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011be2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011be4:	69f8      	ldr	r0, [r7, #28]
 8011be6:	f7ff f883 	bl	8010cf0 <tcp_oos_insert_segment>
                  }
                  break;
 8011bea:	e0e2      	b.n	8011db2 <tcp_receive+0xeba>
 8011bec:	20006878 	.word	0x20006878
 8011bf0:	20006875 	.word	0x20006875
 8011bf4:	20006848 	.word	0x20006848
 8011bf8:	20006868 	.word	0x20006868
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bfe:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	f040 80c6 	bne.w	8011d96 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011c0a:	4b80      	ldr	r3, [pc, #512]	; (8011e0c <tcp_receive+0xf14>)
 8011c0c:	681a      	ldr	r2, [r3, #0]
 8011c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c10:	68db      	ldr	r3, [r3, #12]
 8011c12:	685b      	ldr	r3, [r3, #4]
 8011c14:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	f340 80bd 	ble.w	8011d96 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c1e:	68db      	ldr	r3, [r3, #12]
 8011c20:	899b      	ldrh	r3, [r3, #12]
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7fa fb1d 	bl	800c264 <lwip_htons>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	b2db      	uxtb	r3, r3
 8011c2e:	f003 0301 	and.w	r3, r3, #1
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	f040 80bf 	bne.w	8011db6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011c38:	4875      	ldr	r0, [pc, #468]	; (8011e10 <tcp_receive+0xf18>)
 8011c3a:	f7fd fa3d 	bl	800f0b8 <tcp_seg_copy>
 8011c3e:	4602      	mov	r2, r0
 8011c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c42:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	f000 80b6 	beq.w	8011dba <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c50:	68db      	ldr	r3, [r3, #12]
 8011c52:	685b      	ldr	r3, [r3, #4]
 8011c54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c56:	8912      	ldrh	r2, [r2, #8]
 8011c58:	441a      	add	r2, r3
 8011c5a:	4b6c      	ldr	r3, [pc, #432]	; (8011e0c <tcp_receive+0xf14>)
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	1ad3      	subs	r3, r2, r3
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	dd12      	ble.n	8011c8a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011c64:	4b69      	ldr	r3, [pc, #420]	; (8011e0c <tcp_receive+0xf14>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	b29a      	uxth	r2, r3
 8011c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c6c:	68db      	ldr	r3, [r3, #12]
 8011c6e:	685b      	ldr	r3, [r3, #4]
 8011c70:	b29b      	uxth	r3, r3
 8011c72:	1ad3      	subs	r3, r2, r3
 8011c74:	b29a      	uxth	r2, r3
 8011c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c78:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c7c:	685a      	ldr	r2, [r3, #4]
 8011c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c80:	891b      	ldrh	r3, [r3, #8]
 8011c82:	4619      	mov	r1, r3
 8011c84:	4610      	mov	r0, r2
 8011c86:	f7fb fcaf 	bl	800d5e8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011c8a:	4b62      	ldr	r3, [pc, #392]	; (8011e14 <tcp_receive+0xf1c>)
 8011c8c:	881b      	ldrh	r3, [r3, #0]
 8011c8e:	461a      	mov	r2, r3
 8011c90:	4b5e      	ldr	r3, [pc, #376]	; (8011e0c <tcp_receive+0xf14>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	441a      	add	r2, r3
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c9a:	6879      	ldr	r1, [r7, #4]
 8011c9c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011c9e:	440b      	add	r3, r1
 8011ca0:	1ad3      	subs	r3, r2, r3
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	f340 8089 	ble.w	8011dba <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	68db      	ldr	r3, [r3, #12]
 8011cae:	899b      	ldrh	r3, [r3, #12]
 8011cb0:	b29b      	uxth	r3, r3
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f7fa fad6 	bl	800c264 <lwip_htons>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	b2db      	uxtb	r3, r3
 8011cbc:	f003 0301 	and.w	r3, r3, #1
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d022      	beq.n	8011d0a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	68db      	ldr	r3, [r3, #12]
 8011cca:	899b      	ldrh	r3, [r3, #12]
 8011ccc:	b29b      	uxth	r3, r3
 8011cce:	b21b      	sxth	r3, r3
 8011cd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011cd4:	b21c      	sxth	r4, r3
 8011cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	68db      	ldr	r3, [r3, #12]
 8011cdc:	899b      	ldrh	r3, [r3, #12]
 8011cde:	b29b      	uxth	r3, r3
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f7fa fabf 	bl	800c264 <lwip_htons>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	b2db      	uxtb	r3, r3
 8011cea:	b29b      	uxth	r3, r3
 8011cec:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011cf0:	b29b      	uxth	r3, r3
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f7fa fab6 	bl	800c264 <lwip_htons>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	b21b      	sxth	r3, r3
 8011cfc:	4323      	orrs	r3, r4
 8011cfe:	b21a      	sxth	r2, r3
 8011d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	68db      	ldr	r3, [r3, #12]
 8011d06:	b292      	uxth	r2, r2
 8011d08:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d0e:	b29a      	uxth	r2, r3
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011d14:	4413      	add	r3, r2
 8011d16:	b299      	uxth	r1, r3
 8011d18:	4b3c      	ldr	r3, [pc, #240]	; (8011e0c <tcp_receive+0xf14>)
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	b29a      	uxth	r2, r3
 8011d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	1a8a      	subs	r2, r1, r2
 8011d24:	b292      	uxth	r2, r2
 8011d26:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	685a      	ldr	r2, [r3, #4]
 8011d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	891b      	ldrh	r3, [r3, #8]
 8011d34:	4619      	mov	r1, r3
 8011d36:	4610      	mov	r0, r2
 8011d38:	f7fb fc56 	bl	800d5e8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	891c      	ldrh	r4, [r3, #8]
 8011d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	68db      	ldr	r3, [r3, #12]
 8011d48:	899b      	ldrh	r3, [r3, #12]
 8011d4a:	b29b      	uxth	r3, r3
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f7fa fa89 	bl	800c264 <lwip_htons>
 8011d52:	4603      	mov	r3, r0
 8011d54:	b2db      	uxtb	r3, r3
 8011d56:	f003 0303 	and.w	r3, r3, #3
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d001      	beq.n	8011d62 <tcp_receive+0xe6a>
 8011d5e:	2301      	movs	r3, #1
 8011d60:	e000      	b.n	8011d64 <tcp_receive+0xe6c>
 8011d62:	2300      	movs	r3, #0
 8011d64:	4423      	add	r3, r4
 8011d66:	b29a      	uxth	r2, r3
 8011d68:	4b2a      	ldr	r3, [pc, #168]	; (8011e14 <tcp_receive+0xf1c>)
 8011d6a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011d6c:	4b29      	ldr	r3, [pc, #164]	; (8011e14 <tcp_receive+0xf1c>)
 8011d6e:	881b      	ldrh	r3, [r3, #0]
 8011d70:	461a      	mov	r2, r3
 8011d72:	4b26      	ldr	r3, [pc, #152]	; (8011e0c <tcp_receive+0xf14>)
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	441a      	add	r2, r3
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d7c:	6879      	ldr	r1, [r7, #4]
 8011d7e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011d80:	440b      	add	r3, r1
 8011d82:	429a      	cmp	r2, r3
 8011d84:	d019      	beq.n	8011dba <tcp_receive+0xec2>
 8011d86:	4b24      	ldr	r3, [pc, #144]	; (8011e18 <tcp_receive+0xf20>)
 8011d88:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011d8c:	4923      	ldr	r1, [pc, #140]	; (8011e1c <tcp_receive+0xf24>)
 8011d8e:	4824      	ldr	r0, [pc, #144]	; (8011e20 <tcp_receive+0xf28>)
 8011d90:	f005 fd08 	bl	80177a4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011d94:	e011      	b.n	8011dba <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8011d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	f47f aea4 	bne.w	8011aec <tcp_receive+0xbf4>
 8011da4:	e00a      	b.n	8011dbc <tcp_receive+0xec4>
                break;
 8011da6:	bf00      	nop
 8011da8:	e008      	b.n	8011dbc <tcp_receive+0xec4>
                break;
 8011daa:	bf00      	nop
 8011dac:	e006      	b.n	8011dbc <tcp_receive+0xec4>
                  break;
 8011dae:	bf00      	nop
 8011db0:	e004      	b.n	8011dbc <tcp_receive+0xec4>
                  break;
 8011db2:	bf00      	nop
 8011db4:	e002      	b.n	8011dbc <tcp_receive+0xec4>
                  break;
 8011db6:	bf00      	nop
 8011db8:	e000      	b.n	8011dbc <tcp_receive+0xec4>
                break;
 8011dba:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011dbc:	6878      	ldr	r0, [r7, #4]
 8011dbe:	f001 fe8b 	bl	8013ad8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011dc2:	e003      	b.n	8011dcc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011dc4:	6878      	ldr	r0, [r7, #4]
 8011dc6:	f001 fe87 	bl	8013ad8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011dca:	e01a      	b.n	8011e02 <tcp_receive+0xf0a>
 8011dcc:	e019      	b.n	8011e02 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011dce:	4b0f      	ldr	r3, [pc, #60]	; (8011e0c <tcp_receive+0xf14>)
 8011dd0:	681a      	ldr	r2, [r3, #0]
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dd6:	1ad3      	subs	r3, r2, r3
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	db0a      	blt.n	8011df2 <tcp_receive+0xefa>
 8011ddc:	4b0b      	ldr	r3, [pc, #44]	; (8011e0c <tcp_receive+0xf14>)
 8011dde:	681a      	ldr	r2, [r3, #0]
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011de4:	6879      	ldr	r1, [r7, #4]
 8011de6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011de8:	440b      	add	r3, r1
 8011dea:	1ad3      	subs	r3, r2, r3
 8011dec:	3301      	adds	r3, #1
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	dd07      	ble.n	8011e02 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	8b5b      	ldrh	r3, [r3, #26]
 8011df6:	f043 0302 	orr.w	r3, r3, #2
 8011dfa:	b29a      	uxth	r2, r3
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011e00:	e7ff      	b.n	8011e02 <tcp_receive+0xf0a>
 8011e02:	bf00      	nop
 8011e04:	3750      	adds	r7, #80	; 0x50
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bdb0      	pop	{r4, r5, r7, pc}
 8011e0a:	bf00      	nop
 8011e0c:	20006868 	.word	0x20006868
 8011e10:	20006848 	.word	0x20006848
 8011e14:	20006872 	.word	0x20006872
 8011e18:	0801a394 	.word	0x0801a394
 8011e1c:	0801a73c 	.word	0x0801a73c
 8011e20:	0801a3e0 	.word	0x0801a3e0

08011e24 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011e24:	b480      	push	{r7}
 8011e26:	b083      	sub	sp, #12
 8011e28:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011e2a:	4b15      	ldr	r3, [pc, #84]	; (8011e80 <tcp_get_next_optbyte+0x5c>)
 8011e2c:	881b      	ldrh	r3, [r3, #0]
 8011e2e:	1c5a      	adds	r2, r3, #1
 8011e30:	b291      	uxth	r1, r2
 8011e32:	4a13      	ldr	r2, [pc, #76]	; (8011e80 <tcp_get_next_optbyte+0x5c>)
 8011e34:	8011      	strh	r1, [r2, #0]
 8011e36:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011e38:	4b12      	ldr	r3, [pc, #72]	; (8011e84 <tcp_get_next_optbyte+0x60>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d004      	beq.n	8011e4a <tcp_get_next_optbyte+0x26>
 8011e40:	4b11      	ldr	r3, [pc, #68]	; (8011e88 <tcp_get_next_optbyte+0x64>)
 8011e42:	881b      	ldrh	r3, [r3, #0]
 8011e44:	88fa      	ldrh	r2, [r7, #6]
 8011e46:	429a      	cmp	r2, r3
 8011e48:	d208      	bcs.n	8011e5c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011e4a:	4b10      	ldr	r3, [pc, #64]	; (8011e8c <tcp_get_next_optbyte+0x68>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	3314      	adds	r3, #20
 8011e50:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011e52:	88fb      	ldrh	r3, [r7, #6]
 8011e54:	683a      	ldr	r2, [r7, #0]
 8011e56:	4413      	add	r3, r2
 8011e58:	781b      	ldrb	r3, [r3, #0]
 8011e5a:	e00b      	b.n	8011e74 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011e5c:	88fb      	ldrh	r3, [r7, #6]
 8011e5e:	b2da      	uxtb	r2, r3
 8011e60:	4b09      	ldr	r3, [pc, #36]	; (8011e88 <tcp_get_next_optbyte+0x64>)
 8011e62:	881b      	ldrh	r3, [r3, #0]
 8011e64:	b2db      	uxtb	r3, r3
 8011e66:	1ad3      	subs	r3, r2, r3
 8011e68:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011e6a:	4b06      	ldr	r3, [pc, #24]	; (8011e84 <tcp_get_next_optbyte+0x60>)
 8011e6c:	681a      	ldr	r2, [r3, #0]
 8011e6e:	797b      	ldrb	r3, [r7, #5]
 8011e70:	4413      	add	r3, r2
 8011e72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011e74:	4618      	mov	r0, r3
 8011e76:	370c      	adds	r7, #12
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7e:	4770      	bx	lr
 8011e80:	20006864 	.word	0x20006864
 8011e84:	20006860 	.word	0x20006860
 8011e88:	2000685e 	.word	0x2000685e
 8011e8c:	20006858 	.word	0x20006858

08011e90 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b084      	sub	sp, #16
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d106      	bne.n	8011eac <tcp_parseopt+0x1c>
 8011e9e:	4b32      	ldr	r3, [pc, #200]	; (8011f68 <tcp_parseopt+0xd8>)
 8011ea0:	f240 727d 	movw	r2, #1917	; 0x77d
 8011ea4:	4931      	ldr	r1, [pc, #196]	; (8011f6c <tcp_parseopt+0xdc>)
 8011ea6:	4832      	ldr	r0, [pc, #200]	; (8011f70 <tcp_parseopt+0xe0>)
 8011ea8:	f005 fc7c 	bl	80177a4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011eac:	4b31      	ldr	r3, [pc, #196]	; (8011f74 <tcp_parseopt+0xe4>)
 8011eae:	881b      	ldrh	r3, [r3, #0]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d055      	beq.n	8011f60 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011eb4:	4b30      	ldr	r3, [pc, #192]	; (8011f78 <tcp_parseopt+0xe8>)
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	801a      	strh	r2, [r3, #0]
 8011eba:	e045      	b.n	8011f48 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011ebc:	f7ff ffb2 	bl	8011e24 <tcp_get_next_optbyte>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011ec4:	7bfb      	ldrb	r3, [r7, #15]
 8011ec6:	2b02      	cmp	r3, #2
 8011ec8:	d006      	beq.n	8011ed8 <tcp_parseopt+0x48>
 8011eca:	2b02      	cmp	r3, #2
 8011ecc:	dc2b      	bgt.n	8011f26 <tcp_parseopt+0x96>
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d041      	beq.n	8011f56 <tcp_parseopt+0xc6>
 8011ed2:	2b01      	cmp	r3, #1
 8011ed4:	d127      	bne.n	8011f26 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011ed6:	e037      	b.n	8011f48 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011ed8:	f7ff ffa4 	bl	8011e24 <tcp_get_next_optbyte>
 8011edc:	4603      	mov	r3, r0
 8011ede:	2b04      	cmp	r3, #4
 8011ee0:	d13b      	bne.n	8011f5a <tcp_parseopt+0xca>
 8011ee2:	4b25      	ldr	r3, [pc, #148]	; (8011f78 <tcp_parseopt+0xe8>)
 8011ee4:	881b      	ldrh	r3, [r3, #0]
 8011ee6:	3301      	adds	r3, #1
 8011ee8:	4a22      	ldr	r2, [pc, #136]	; (8011f74 <tcp_parseopt+0xe4>)
 8011eea:	8812      	ldrh	r2, [r2, #0]
 8011eec:	4293      	cmp	r3, r2
 8011eee:	da34      	bge.n	8011f5a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011ef0:	f7ff ff98 	bl	8011e24 <tcp_get_next_optbyte>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	b29b      	uxth	r3, r3
 8011ef8:	021b      	lsls	r3, r3, #8
 8011efa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011efc:	f7ff ff92 	bl	8011e24 <tcp_get_next_optbyte>
 8011f00:	4603      	mov	r3, r0
 8011f02:	b29a      	uxth	r2, r3
 8011f04:	89bb      	ldrh	r3, [r7, #12]
 8011f06:	4313      	orrs	r3, r2
 8011f08:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011f0a:	89bb      	ldrh	r3, [r7, #12]
 8011f0c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011f10:	d804      	bhi.n	8011f1c <tcp_parseopt+0x8c>
 8011f12:	89bb      	ldrh	r3, [r7, #12]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d001      	beq.n	8011f1c <tcp_parseopt+0x8c>
 8011f18:	89ba      	ldrh	r2, [r7, #12]
 8011f1a:	e001      	b.n	8011f20 <tcp_parseopt+0x90>
 8011f1c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011f24:	e010      	b.n	8011f48 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011f26:	f7ff ff7d 	bl	8011e24 <tcp_get_next_optbyte>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011f2e:	7afb      	ldrb	r3, [r7, #11]
 8011f30:	2b01      	cmp	r3, #1
 8011f32:	d914      	bls.n	8011f5e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011f34:	7afb      	ldrb	r3, [r7, #11]
 8011f36:	b29a      	uxth	r2, r3
 8011f38:	4b0f      	ldr	r3, [pc, #60]	; (8011f78 <tcp_parseopt+0xe8>)
 8011f3a:	881b      	ldrh	r3, [r3, #0]
 8011f3c:	4413      	add	r3, r2
 8011f3e:	b29b      	uxth	r3, r3
 8011f40:	3b02      	subs	r3, #2
 8011f42:	b29a      	uxth	r2, r3
 8011f44:	4b0c      	ldr	r3, [pc, #48]	; (8011f78 <tcp_parseopt+0xe8>)
 8011f46:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011f48:	4b0b      	ldr	r3, [pc, #44]	; (8011f78 <tcp_parseopt+0xe8>)
 8011f4a:	881a      	ldrh	r2, [r3, #0]
 8011f4c:	4b09      	ldr	r3, [pc, #36]	; (8011f74 <tcp_parseopt+0xe4>)
 8011f4e:	881b      	ldrh	r3, [r3, #0]
 8011f50:	429a      	cmp	r2, r3
 8011f52:	d3b3      	bcc.n	8011ebc <tcp_parseopt+0x2c>
 8011f54:	e004      	b.n	8011f60 <tcp_parseopt+0xd0>
          return;
 8011f56:	bf00      	nop
 8011f58:	e002      	b.n	8011f60 <tcp_parseopt+0xd0>
            return;
 8011f5a:	bf00      	nop
 8011f5c:	e000      	b.n	8011f60 <tcp_parseopt+0xd0>
            return;
 8011f5e:	bf00      	nop
      }
    }
  }
}
 8011f60:	3710      	adds	r7, #16
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
 8011f66:	bf00      	nop
 8011f68:	0801a394 	.word	0x0801a394
 8011f6c:	0801a7f8 	.word	0x0801a7f8
 8011f70:	0801a3e0 	.word	0x0801a3e0
 8011f74:	2000685c 	.word	0x2000685c
 8011f78:	20006864 	.word	0x20006864

08011f7c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011f7c:	b480      	push	{r7}
 8011f7e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011f80:	4b05      	ldr	r3, [pc, #20]	; (8011f98 <tcp_trigger_input_pcb_close+0x1c>)
 8011f82:	781b      	ldrb	r3, [r3, #0]
 8011f84:	f043 0310 	orr.w	r3, r3, #16
 8011f88:	b2da      	uxtb	r2, r3
 8011f8a:	4b03      	ldr	r3, [pc, #12]	; (8011f98 <tcp_trigger_input_pcb_close+0x1c>)
 8011f8c:	701a      	strb	r2, [r3, #0]
}
 8011f8e:	bf00      	nop
 8011f90:	46bd      	mov	sp, r7
 8011f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f96:	4770      	bx	lr
 8011f98:	20006875 	.word	0x20006875

08011f9c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b084      	sub	sp, #16
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	60f8      	str	r0, [r7, #12]
 8011fa4:	60b9      	str	r1, [r7, #8]
 8011fa6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d00a      	beq.n	8011fc4 <tcp_route+0x28>
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	7a1b      	ldrb	r3, [r3, #8]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d006      	beq.n	8011fc4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	7a1b      	ldrb	r3, [r3, #8]
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f7fb f90c 	bl	800d1d8 <netif_get_by_index>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	e003      	b.n	8011fcc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011fc4:	6878      	ldr	r0, [r7, #4]
 8011fc6:	f003 fe35 	bl	8015c34 <ip4_route>
 8011fca:	4603      	mov	r3, r0
  }
}
 8011fcc:	4618      	mov	r0, r3
 8011fce:	3710      	adds	r7, #16
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	bd80      	pop	{r7, pc}

08011fd4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011fd4:	b590      	push	{r4, r7, lr}
 8011fd6:	b087      	sub	sp, #28
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	60f8      	str	r0, [r7, #12]
 8011fdc:	60b9      	str	r1, [r7, #8]
 8011fde:	603b      	str	r3, [r7, #0]
 8011fe0:	4613      	mov	r3, r2
 8011fe2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d105      	bne.n	8011ff6 <tcp_create_segment+0x22>
 8011fea:	4b44      	ldr	r3, [pc, #272]	; (80120fc <tcp_create_segment+0x128>)
 8011fec:	22a3      	movs	r2, #163	; 0xa3
 8011fee:	4944      	ldr	r1, [pc, #272]	; (8012100 <tcp_create_segment+0x12c>)
 8011ff0:	4844      	ldr	r0, [pc, #272]	; (8012104 <tcp_create_segment+0x130>)
 8011ff2:	f005 fbd7 	bl	80177a4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d105      	bne.n	8012008 <tcp_create_segment+0x34>
 8011ffc:	4b3f      	ldr	r3, [pc, #252]	; (80120fc <tcp_create_segment+0x128>)
 8011ffe:	22a4      	movs	r2, #164	; 0xa4
 8012000:	4941      	ldr	r1, [pc, #260]	; (8012108 <tcp_create_segment+0x134>)
 8012002:	4840      	ldr	r0, [pc, #256]	; (8012104 <tcp_create_segment+0x130>)
 8012004:	f005 fbce 	bl	80177a4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012008:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801200c:	009b      	lsls	r3, r3, #2
 801200e:	b2db      	uxtb	r3, r3
 8012010:	f003 0304 	and.w	r3, r3, #4
 8012014:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012016:	2003      	movs	r0, #3
 8012018:	f7fa fdda 	bl	800cbd0 <memp_malloc>
 801201c:	6138      	str	r0, [r7, #16]
 801201e:	693b      	ldr	r3, [r7, #16]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d104      	bne.n	801202e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012024:	68b8      	ldr	r0, [r7, #8]
 8012026:	f7fb fc65 	bl	800d8f4 <pbuf_free>
    return NULL;
 801202a:	2300      	movs	r3, #0
 801202c:	e061      	b.n	80120f2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801202e:	693b      	ldr	r3, [r7, #16]
 8012030:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012034:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012036:	693b      	ldr	r3, [r7, #16]
 8012038:	2200      	movs	r2, #0
 801203a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801203c:	693b      	ldr	r3, [r7, #16]
 801203e:	68ba      	ldr	r2, [r7, #8]
 8012040:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012042:	68bb      	ldr	r3, [r7, #8]
 8012044:	891a      	ldrh	r2, [r3, #8]
 8012046:	7dfb      	ldrb	r3, [r7, #23]
 8012048:	b29b      	uxth	r3, r3
 801204a:	429a      	cmp	r2, r3
 801204c:	d205      	bcs.n	801205a <tcp_create_segment+0x86>
 801204e:	4b2b      	ldr	r3, [pc, #172]	; (80120fc <tcp_create_segment+0x128>)
 8012050:	22b0      	movs	r2, #176	; 0xb0
 8012052:	492e      	ldr	r1, [pc, #184]	; (801210c <tcp_create_segment+0x138>)
 8012054:	482b      	ldr	r0, [pc, #172]	; (8012104 <tcp_create_segment+0x130>)
 8012056:	f005 fba5 	bl	80177a4 <iprintf>
  seg->len = p->tot_len - optlen;
 801205a:	68bb      	ldr	r3, [r7, #8]
 801205c:	891a      	ldrh	r2, [r3, #8]
 801205e:	7dfb      	ldrb	r3, [r7, #23]
 8012060:	b29b      	uxth	r3, r3
 8012062:	1ad3      	subs	r3, r2, r3
 8012064:	b29a      	uxth	r2, r3
 8012066:	693b      	ldr	r3, [r7, #16]
 8012068:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801206a:	2114      	movs	r1, #20
 801206c:	68b8      	ldr	r0, [r7, #8]
 801206e:	f7fb fbab 	bl	800d7c8 <pbuf_add_header>
 8012072:	4603      	mov	r3, r0
 8012074:	2b00      	cmp	r3, #0
 8012076:	d004      	beq.n	8012082 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012078:	6938      	ldr	r0, [r7, #16]
 801207a:	f7fd f804 	bl	800f086 <tcp_seg_free>
    return NULL;
 801207e:	2300      	movs	r3, #0
 8012080:	e037      	b.n	80120f2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012082:	693b      	ldr	r3, [r7, #16]
 8012084:	685b      	ldr	r3, [r3, #4]
 8012086:	685a      	ldr	r2, [r3, #4]
 8012088:	693b      	ldr	r3, [r7, #16]
 801208a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	8ada      	ldrh	r2, [r3, #22]
 8012090:	693b      	ldr	r3, [r7, #16]
 8012092:	68dc      	ldr	r4, [r3, #12]
 8012094:	4610      	mov	r0, r2
 8012096:	f7fa f8e5 	bl	800c264 <lwip_htons>
 801209a:	4603      	mov	r3, r0
 801209c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	8b1a      	ldrh	r2, [r3, #24]
 80120a2:	693b      	ldr	r3, [r7, #16]
 80120a4:	68dc      	ldr	r4, [r3, #12]
 80120a6:	4610      	mov	r0, r2
 80120a8:	f7fa f8dc 	bl	800c264 <lwip_htons>
 80120ac:	4603      	mov	r3, r0
 80120ae:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80120b0:	693b      	ldr	r3, [r7, #16]
 80120b2:	68dc      	ldr	r4, [r3, #12]
 80120b4:	6838      	ldr	r0, [r7, #0]
 80120b6:	f7fa f8ea 	bl	800c28e <lwip_htonl>
 80120ba:	4603      	mov	r3, r0
 80120bc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80120be:	7dfb      	ldrb	r3, [r7, #23]
 80120c0:	089b      	lsrs	r3, r3, #2
 80120c2:	b2db      	uxtb	r3, r3
 80120c4:	b29b      	uxth	r3, r3
 80120c6:	3305      	adds	r3, #5
 80120c8:	b29b      	uxth	r3, r3
 80120ca:	031b      	lsls	r3, r3, #12
 80120cc:	b29a      	uxth	r2, r3
 80120ce:	79fb      	ldrb	r3, [r7, #7]
 80120d0:	b29b      	uxth	r3, r3
 80120d2:	4313      	orrs	r3, r2
 80120d4:	b29a      	uxth	r2, r3
 80120d6:	693b      	ldr	r3, [r7, #16]
 80120d8:	68dc      	ldr	r4, [r3, #12]
 80120da:	4610      	mov	r0, r2
 80120dc:	f7fa f8c2 	bl	800c264 <lwip_htons>
 80120e0:	4603      	mov	r3, r0
 80120e2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80120e4:	693b      	ldr	r3, [r7, #16]
 80120e6:	68db      	ldr	r3, [r3, #12]
 80120e8:	2200      	movs	r2, #0
 80120ea:	749a      	strb	r2, [r3, #18]
 80120ec:	2200      	movs	r2, #0
 80120ee:	74da      	strb	r2, [r3, #19]
  return seg;
 80120f0:	693b      	ldr	r3, [r7, #16]
}
 80120f2:	4618      	mov	r0, r3
 80120f4:	371c      	adds	r7, #28
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd90      	pop	{r4, r7, pc}
 80120fa:	bf00      	nop
 80120fc:	0801a814 	.word	0x0801a814
 8012100:	0801a848 	.word	0x0801a848
 8012104:	0801a868 	.word	0x0801a868
 8012108:	0801a890 	.word	0x0801a890
 801210c:	0801a8b4 	.word	0x0801a8b4

08012110 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b086      	sub	sp, #24
 8012114:	af00      	add	r7, sp, #0
 8012116:	607b      	str	r3, [r7, #4]
 8012118:	4603      	mov	r3, r0
 801211a:	73fb      	strb	r3, [r7, #15]
 801211c:	460b      	mov	r3, r1
 801211e:	81bb      	strh	r3, [r7, #12]
 8012120:	4613      	mov	r3, r2
 8012122:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012124:	89bb      	ldrh	r3, [r7, #12]
 8012126:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d105      	bne.n	801213a <tcp_pbuf_prealloc+0x2a>
 801212e:	4b30      	ldr	r3, [pc, #192]	; (80121f0 <tcp_pbuf_prealloc+0xe0>)
 8012130:	22e8      	movs	r2, #232	; 0xe8
 8012132:	4930      	ldr	r1, [pc, #192]	; (80121f4 <tcp_pbuf_prealloc+0xe4>)
 8012134:	4830      	ldr	r0, [pc, #192]	; (80121f8 <tcp_pbuf_prealloc+0xe8>)
 8012136:	f005 fb35 	bl	80177a4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801213a:	6a3b      	ldr	r3, [r7, #32]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d105      	bne.n	801214c <tcp_pbuf_prealloc+0x3c>
 8012140:	4b2b      	ldr	r3, [pc, #172]	; (80121f0 <tcp_pbuf_prealloc+0xe0>)
 8012142:	22e9      	movs	r2, #233	; 0xe9
 8012144:	492d      	ldr	r1, [pc, #180]	; (80121fc <tcp_pbuf_prealloc+0xec>)
 8012146:	482c      	ldr	r0, [pc, #176]	; (80121f8 <tcp_pbuf_prealloc+0xe8>)
 8012148:	f005 fb2c 	bl	80177a4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801214c:	89ba      	ldrh	r2, [r7, #12]
 801214e:	897b      	ldrh	r3, [r7, #10]
 8012150:	429a      	cmp	r2, r3
 8012152:	d221      	bcs.n	8012198 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012154:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012158:	f003 0302 	and.w	r3, r3, #2
 801215c:	2b00      	cmp	r3, #0
 801215e:	d111      	bne.n	8012184 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012160:	6a3b      	ldr	r3, [r7, #32]
 8012162:	8b5b      	ldrh	r3, [r3, #26]
 8012164:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012168:	2b00      	cmp	r3, #0
 801216a:	d115      	bne.n	8012198 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801216c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012170:	2b00      	cmp	r3, #0
 8012172:	d007      	beq.n	8012184 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012174:	6a3b      	ldr	r3, [r7, #32]
 8012176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012178:	2b00      	cmp	r3, #0
 801217a:	d103      	bne.n	8012184 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801217c:	6a3b      	ldr	r3, [r7, #32]
 801217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8012180:	2b00      	cmp	r3, #0
 8012182:	d009      	beq.n	8012198 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012184:	89bb      	ldrh	r3, [r7, #12]
 8012186:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801218a:	f023 0203 	bic.w	r2, r3, #3
 801218e:	897b      	ldrh	r3, [r7, #10]
 8012190:	4293      	cmp	r3, r2
 8012192:	bf28      	it	cs
 8012194:	4613      	movcs	r3, r2
 8012196:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012198:	8af9      	ldrh	r1, [r7, #22]
 801219a:	7bfb      	ldrb	r3, [r7, #15]
 801219c:	f44f 7220 	mov.w	r2, #640	; 0x280
 80121a0:	4618      	mov	r0, r3
 80121a2:	f7fb f8c3 	bl	800d32c <pbuf_alloc>
 80121a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80121a8:	693b      	ldr	r3, [r7, #16]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d101      	bne.n	80121b2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80121ae:	2300      	movs	r3, #0
 80121b0:	e019      	b.n	80121e6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80121b2:	693b      	ldr	r3, [r7, #16]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d006      	beq.n	80121c8 <tcp_pbuf_prealloc+0xb8>
 80121ba:	4b0d      	ldr	r3, [pc, #52]	; (80121f0 <tcp_pbuf_prealloc+0xe0>)
 80121bc:	f240 120b 	movw	r2, #267	; 0x10b
 80121c0:	490f      	ldr	r1, [pc, #60]	; (8012200 <tcp_pbuf_prealloc+0xf0>)
 80121c2:	480d      	ldr	r0, [pc, #52]	; (80121f8 <tcp_pbuf_prealloc+0xe8>)
 80121c4:	f005 faee 	bl	80177a4 <iprintf>
  *oversize = p->len - length;
 80121c8:	693b      	ldr	r3, [r7, #16]
 80121ca:	895a      	ldrh	r2, [r3, #10]
 80121cc:	89bb      	ldrh	r3, [r7, #12]
 80121ce:	1ad3      	subs	r3, r2, r3
 80121d0:	b29a      	uxth	r2, r3
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80121d6:	693b      	ldr	r3, [r7, #16]
 80121d8:	89ba      	ldrh	r2, [r7, #12]
 80121da:	811a      	strh	r2, [r3, #8]
 80121dc:	693b      	ldr	r3, [r7, #16]
 80121de:	891a      	ldrh	r2, [r3, #8]
 80121e0:	693b      	ldr	r3, [r7, #16]
 80121e2:	815a      	strh	r2, [r3, #10]
  return p;
 80121e4:	693b      	ldr	r3, [r7, #16]
}
 80121e6:	4618      	mov	r0, r3
 80121e8:	3718      	adds	r7, #24
 80121ea:	46bd      	mov	sp, r7
 80121ec:	bd80      	pop	{r7, pc}
 80121ee:	bf00      	nop
 80121f0:	0801a814 	.word	0x0801a814
 80121f4:	0801a8cc 	.word	0x0801a8cc
 80121f8:	0801a868 	.word	0x0801a868
 80121fc:	0801a8f0 	.word	0x0801a8f0
 8012200:	0801a910 	.word	0x0801a910

08012204 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b082      	sub	sp, #8
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
 801220c:	460b      	mov	r3, r1
 801220e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d106      	bne.n	8012224 <tcp_write_checks+0x20>
 8012216:	4b33      	ldr	r3, [pc, #204]	; (80122e4 <tcp_write_checks+0xe0>)
 8012218:	f240 1233 	movw	r2, #307	; 0x133
 801221c:	4932      	ldr	r1, [pc, #200]	; (80122e8 <tcp_write_checks+0xe4>)
 801221e:	4833      	ldr	r0, [pc, #204]	; (80122ec <tcp_write_checks+0xe8>)
 8012220:	f005 fac0 	bl	80177a4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	7d1b      	ldrb	r3, [r3, #20]
 8012228:	2b04      	cmp	r3, #4
 801222a:	d00e      	beq.n	801224a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8012230:	2b07      	cmp	r3, #7
 8012232:	d00a      	beq.n	801224a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012238:	2b02      	cmp	r3, #2
 801223a:	d006      	beq.n	801224a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012240:	2b03      	cmp	r3, #3
 8012242:	d002      	beq.n	801224a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012244:	f06f 030a 	mvn.w	r3, #10
 8012248:	e048      	b.n	80122dc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801224a:	887b      	ldrh	r3, [r7, #2]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d101      	bne.n	8012254 <tcp_write_checks+0x50>
    return ERR_OK;
 8012250:	2300      	movs	r3, #0
 8012252:	e043      	b.n	80122dc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801225a:	887a      	ldrh	r2, [r7, #2]
 801225c:	429a      	cmp	r2, r3
 801225e:	d909      	bls.n	8012274 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	8b5b      	ldrh	r3, [r3, #26]
 8012264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012268:	b29a      	uxth	r2, r3
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801226e:	f04f 33ff 	mov.w	r3, #4294967295
 8012272:	e033      	b.n	80122dc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801227a:	2b08      	cmp	r3, #8
 801227c:	d909      	bls.n	8012292 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	8b5b      	ldrh	r3, [r3, #26]
 8012282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012286:	b29a      	uxth	r2, r3
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801228c:	f04f 33ff 	mov.w	r3, #4294967295
 8012290:	e024      	b.n	80122dc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012298:	2b00      	cmp	r3, #0
 801229a:	d00f      	beq.n	80122bc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d11a      	bne.n	80122da <tcp_write_checks+0xd6>
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d116      	bne.n	80122da <tcp_write_checks+0xd6>
 80122ac:	4b0d      	ldr	r3, [pc, #52]	; (80122e4 <tcp_write_checks+0xe0>)
 80122ae:	f240 1255 	movw	r2, #341	; 0x155
 80122b2:	490f      	ldr	r1, [pc, #60]	; (80122f0 <tcp_write_checks+0xec>)
 80122b4:	480d      	ldr	r0, [pc, #52]	; (80122ec <tcp_write_checks+0xe8>)
 80122b6:	f005 fa75 	bl	80177a4 <iprintf>
 80122ba:	e00e      	b.n	80122da <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d103      	bne.n	80122cc <tcp_write_checks+0xc8>
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d006      	beq.n	80122da <tcp_write_checks+0xd6>
 80122cc:	4b05      	ldr	r3, [pc, #20]	; (80122e4 <tcp_write_checks+0xe0>)
 80122ce:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80122d2:	4908      	ldr	r1, [pc, #32]	; (80122f4 <tcp_write_checks+0xf0>)
 80122d4:	4805      	ldr	r0, [pc, #20]	; (80122ec <tcp_write_checks+0xe8>)
 80122d6:	f005 fa65 	bl	80177a4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80122da:	2300      	movs	r3, #0
}
 80122dc:	4618      	mov	r0, r3
 80122de:	3708      	adds	r7, #8
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}
 80122e4:	0801a814 	.word	0x0801a814
 80122e8:	0801a924 	.word	0x0801a924
 80122ec:	0801a868 	.word	0x0801a868
 80122f0:	0801a944 	.word	0x0801a944
 80122f4:	0801a980 	.word	0x0801a980

080122f8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80122f8:	b590      	push	{r4, r7, lr}
 80122fa:	b09b      	sub	sp, #108	; 0x6c
 80122fc:	af04      	add	r7, sp, #16
 80122fe:	60f8      	str	r0, [r7, #12]
 8012300:	60b9      	str	r1, [r7, #8]
 8012302:	4611      	mov	r1, r2
 8012304:	461a      	mov	r2, r3
 8012306:	460b      	mov	r3, r1
 8012308:	80fb      	strh	r3, [r7, #6]
 801230a:	4613      	mov	r3, r2
 801230c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801230e:	2300      	movs	r3, #0
 8012310:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012312:	2300      	movs	r3, #0
 8012314:	653b      	str	r3, [r7, #80]	; 0x50
 8012316:	2300      	movs	r3, #0
 8012318:	64fb      	str	r3, [r7, #76]	; 0x4c
 801231a:	2300      	movs	r3, #0
 801231c:	64bb      	str	r3, [r7, #72]	; 0x48
 801231e:	2300      	movs	r3, #0
 8012320:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8012322:	2300      	movs	r3, #0
 8012324:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012328:	2300      	movs	r3, #0
 801232a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801232e:	2300      	movs	r3, #0
 8012330:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8012332:	2300      	movs	r3, #0
 8012334:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8012336:	2300      	movs	r3, #0
 8012338:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d109      	bne.n	8012354 <tcp_write+0x5c>
 8012340:	4ba4      	ldr	r3, [pc, #656]	; (80125d4 <tcp_write+0x2dc>)
 8012342:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8012346:	49a4      	ldr	r1, [pc, #656]	; (80125d8 <tcp_write+0x2e0>)
 8012348:	48a4      	ldr	r0, [pc, #656]	; (80125dc <tcp_write+0x2e4>)
 801234a:	f005 fa2b 	bl	80177a4 <iprintf>
 801234e:	f06f 030f 	mvn.w	r3, #15
 8012352:	e32a      	b.n	80129aa <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801235a:	085b      	lsrs	r3, r3, #1
 801235c:	b29a      	uxth	r2, r3
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012362:	4293      	cmp	r3, r2
 8012364:	bf28      	it	cs
 8012366:	4613      	movcs	r3, r2
 8012368:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801236a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801236c:	2b00      	cmp	r3, #0
 801236e:	d102      	bne.n	8012376 <tcp_write+0x7e>
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012374:	e000      	b.n	8012378 <tcp_write+0x80>
 8012376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012378:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801237a:	68bb      	ldr	r3, [r7, #8]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d109      	bne.n	8012394 <tcp_write+0x9c>
 8012380:	4b94      	ldr	r3, [pc, #592]	; (80125d4 <tcp_write+0x2dc>)
 8012382:	f240 12ad 	movw	r2, #429	; 0x1ad
 8012386:	4996      	ldr	r1, [pc, #600]	; (80125e0 <tcp_write+0x2e8>)
 8012388:	4894      	ldr	r0, [pc, #592]	; (80125dc <tcp_write+0x2e4>)
 801238a:	f005 fa0b 	bl	80177a4 <iprintf>
 801238e:	f06f 030f 	mvn.w	r3, #15
 8012392:	e30a      	b.n	80129aa <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012394:	88fb      	ldrh	r3, [r7, #6]
 8012396:	4619      	mov	r1, r3
 8012398:	68f8      	ldr	r0, [r7, #12]
 801239a:	f7ff ff33 	bl	8012204 <tcp_write_checks>
 801239e:	4603      	mov	r3, r0
 80123a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80123a4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d002      	beq.n	80123b2 <tcp_write+0xba>
    return err;
 80123ac:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80123b0:	e2fb      	b.n	80129aa <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80123b8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80123bc:	2300      	movs	r3, #0
 80123be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	f000 80f6 	beq.w	80125b8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123d0:	653b      	str	r3, [r7, #80]	; 0x50
 80123d2:	e002      	b.n	80123da <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80123d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80123da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d1f8      	bne.n	80123d4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80123e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123e4:	7a9b      	ldrb	r3, [r3, #10]
 80123e6:	009b      	lsls	r3, r3, #2
 80123e8:	b29b      	uxth	r3, r3
 80123ea:	f003 0304 	and.w	r3, r3, #4
 80123ee:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80123f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80123f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123f4:	891b      	ldrh	r3, [r3, #8]
 80123f6:	4619      	mov	r1, r3
 80123f8:	8c3b      	ldrh	r3, [r7, #32]
 80123fa:	440b      	add	r3, r1
 80123fc:	429a      	cmp	r2, r3
 80123fe:	da06      	bge.n	801240e <tcp_write+0x116>
 8012400:	4b74      	ldr	r3, [pc, #464]	; (80125d4 <tcp_write+0x2dc>)
 8012402:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012406:	4977      	ldr	r1, [pc, #476]	; (80125e4 <tcp_write+0x2ec>)
 8012408:	4874      	ldr	r0, [pc, #464]	; (80125dc <tcp_write+0x2e4>)
 801240a:	f005 f9cb 	bl	80177a4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801240e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012410:	891a      	ldrh	r2, [r3, #8]
 8012412:	8c3b      	ldrh	r3, [r7, #32]
 8012414:	4413      	add	r3, r2
 8012416:	b29b      	uxth	r3, r3
 8012418:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801241a:	1ad3      	subs	r3, r2, r3
 801241c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012424:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012426:	8a7b      	ldrh	r3, [r7, #18]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d026      	beq.n	801247a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801242c:	8a7b      	ldrh	r3, [r7, #18]
 801242e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012430:	429a      	cmp	r2, r3
 8012432:	d206      	bcs.n	8012442 <tcp_write+0x14a>
 8012434:	4b67      	ldr	r3, [pc, #412]	; (80125d4 <tcp_write+0x2dc>)
 8012436:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801243a:	496b      	ldr	r1, [pc, #428]	; (80125e8 <tcp_write+0x2f0>)
 801243c:	4867      	ldr	r0, [pc, #412]	; (80125dc <tcp_write+0x2e4>)
 801243e:	f005 f9b1 	bl	80177a4 <iprintf>
      seg = last_unsent;
 8012442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012444:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012446:	8a7b      	ldrh	r3, [r7, #18]
 8012448:	88fa      	ldrh	r2, [r7, #6]
 801244a:	4293      	cmp	r3, r2
 801244c:	bf28      	it	cs
 801244e:	4613      	movcs	r3, r2
 8012450:	b29b      	uxth	r3, r3
 8012452:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012454:	4293      	cmp	r3, r2
 8012456:	bf28      	it	cs
 8012458:	4613      	movcs	r3, r2
 801245a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801245c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012460:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012462:	4413      	add	r3, r2
 8012464:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012468:	8a7a      	ldrh	r2, [r7, #18]
 801246a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801246c:	1ad3      	subs	r3, r2, r3
 801246e:	b29b      	uxth	r3, r3
 8012470:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012472:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012474:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012476:	1ad3      	subs	r3, r2, r3
 8012478:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801247a:	8a7b      	ldrh	r3, [r7, #18]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d00b      	beq.n	8012498 <tcp_write+0x1a0>
 8012480:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012484:	88fb      	ldrh	r3, [r7, #6]
 8012486:	429a      	cmp	r2, r3
 8012488:	d006      	beq.n	8012498 <tcp_write+0x1a0>
 801248a:	4b52      	ldr	r3, [pc, #328]	; (80125d4 <tcp_write+0x2dc>)
 801248c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012490:	4956      	ldr	r1, [pc, #344]	; (80125ec <tcp_write+0x2f4>)
 8012492:	4852      	ldr	r0, [pc, #328]	; (80125dc <tcp_write+0x2e4>)
 8012494:	f005 f986 	bl	80177a4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012498:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801249c:	88fb      	ldrh	r3, [r7, #6]
 801249e:	429a      	cmp	r2, r3
 80124a0:	f080 8167 	bcs.w	8012772 <tcp_write+0x47a>
 80124a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	f000 8163 	beq.w	8012772 <tcp_write+0x47a>
 80124ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124ae:	891b      	ldrh	r3, [r3, #8]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	f000 815e 	beq.w	8012772 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80124b6:	88fa      	ldrh	r2, [r7, #6]
 80124b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80124bc:	1ad2      	subs	r2, r2, r3
 80124be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80124c0:	4293      	cmp	r3, r2
 80124c2:	bfa8      	it	ge
 80124c4:	4613      	movge	r3, r2
 80124c6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80124c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124ca:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80124cc:	797b      	ldrb	r3, [r7, #5]
 80124ce:	f003 0301 	and.w	r3, r3, #1
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d027      	beq.n	8012526 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80124d6:	f107 0012 	add.w	r0, r7, #18
 80124da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80124dc:	8bf9      	ldrh	r1, [r7, #30]
 80124de:	2301      	movs	r3, #1
 80124e0:	9302      	str	r3, [sp, #8]
 80124e2:	797b      	ldrb	r3, [r7, #5]
 80124e4:	9301      	str	r3, [sp, #4]
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	9300      	str	r3, [sp, #0]
 80124ea:	4603      	mov	r3, r0
 80124ec:	2000      	movs	r0, #0
 80124ee:	f7ff fe0f 	bl	8012110 <tcp_pbuf_prealloc>
 80124f2:	6578      	str	r0, [r7, #84]	; 0x54
 80124f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	f000 8225 	beq.w	8012946 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80124fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124fe:	6858      	ldr	r0, [r3, #4]
 8012500:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012504:	68ba      	ldr	r2, [r7, #8]
 8012506:	4413      	add	r3, r2
 8012508:	8bfa      	ldrh	r2, [r7, #30]
 801250a:	4619      	mov	r1, r3
 801250c:	f005 f88a 	bl	8017624 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012510:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012512:	f7fb fa7d 	bl	800da10 <pbuf_clen>
 8012516:	4603      	mov	r3, r0
 8012518:	461a      	mov	r2, r3
 801251a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801251e:	4413      	add	r3, r2
 8012520:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012524:	e041      	b.n	80125aa <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012528:	685b      	ldr	r3, [r3, #4]
 801252a:	637b      	str	r3, [r7, #52]	; 0x34
 801252c:	e002      	b.n	8012534 <tcp_write+0x23c>
 801252e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	637b      	str	r3, [r7, #52]	; 0x34
 8012534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d1f8      	bne.n	801252e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801253c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801253e:	7b1b      	ldrb	r3, [r3, #12]
 8012540:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012544:	2b00      	cmp	r3, #0
 8012546:	d115      	bne.n	8012574 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801254a:	685b      	ldr	r3, [r3, #4]
 801254c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801254e:	8952      	ldrh	r2, [r2, #10]
 8012550:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012552:	68ba      	ldr	r2, [r7, #8]
 8012554:	429a      	cmp	r2, r3
 8012556:	d10d      	bne.n	8012574 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012558:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801255c:	2b00      	cmp	r3, #0
 801255e:	d006      	beq.n	801256e <tcp_write+0x276>
 8012560:	4b1c      	ldr	r3, [pc, #112]	; (80125d4 <tcp_write+0x2dc>)
 8012562:	f240 2231 	movw	r2, #561	; 0x231
 8012566:	4922      	ldr	r1, [pc, #136]	; (80125f0 <tcp_write+0x2f8>)
 8012568:	481c      	ldr	r0, [pc, #112]	; (80125dc <tcp_write+0x2e4>)
 801256a:	f005 f91b 	bl	80177a4 <iprintf>
          extendlen = seglen;
 801256e:	8bfb      	ldrh	r3, [r7, #30]
 8012570:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012572:	e01a      	b.n	80125aa <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012574:	8bfb      	ldrh	r3, [r7, #30]
 8012576:	2201      	movs	r2, #1
 8012578:	4619      	mov	r1, r3
 801257a:	2000      	movs	r0, #0
 801257c:	f7fa fed6 	bl	800d32c <pbuf_alloc>
 8012580:	6578      	str	r0, [r7, #84]	; 0x54
 8012582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012584:	2b00      	cmp	r3, #0
 8012586:	f000 81e0 	beq.w	801294a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801258a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801258e:	68ba      	ldr	r2, [r7, #8]
 8012590:	441a      	add	r2, r3
 8012592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012594:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012596:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012598:	f7fb fa3a 	bl	800da10 <pbuf_clen>
 801259c:	4603      	mov	r3, r0
 801259e:	461a      	mov	r2, r3
 80125a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80125a4:	4413      	add	r3, r2
 80125a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80125aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80125ae:	8bfb      	ldrh	r3, [r7, #30]
 80125b0:	4413      	add	r3, r2
 80125b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80125b6:	e0dc      	b.n	8012772 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80125be:	2b00      	cmp	r3, #0
 80125c0:	f000 80d7 	beq.w	8012772 <tcp_write+0x47a>
 80125c4:	4b03      	ldr	r3, [pc, #12]	; (80125d4 <tcp_write+0x2dc>)
 80125c6:	f240 224a 	movw	r2, #586	; 0x24a
 80125ca:	490a      	ldr	r1, [pc, #40]	; (80125f4 <tcp_write+0x2fc>)
 80125cc:	4803      	ldr	r0, [pc, #12]	; (80125dc <tcp_write+0x2e4>)
 80125ce:	f005 f8e9 	bl	80177a4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80125d2:	e0ce      	b.n	8012772 <tcp_write+0x47a>
 80125d4:	0801a814 	.word	0x0801a814
 80125d8:	0801a9b4 	.word	0x0801a9b4
 80125dc:	0801a868 	.word	0x0801a868
 80125e0:	0801a9cc 	.word	0x0801a9cc
 80125e4:	0801aa00 	.word	0x0801aa00
 80125e8:	0801aa18 	.word	0x0801aa18
 80125ec:	0801aa38 	.word	0x0801aa38
 80125f0:	0801aa58 	.word	0x0801aa58
 80125f4:	0801aa84 	.word	0x0801aa84
    struct pbuf *p;
    u16_t left = len - pos;
 80125f8:	88fa      	ldrh	r2, [r7, #6]
 80125fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80125fe:	1ad3      	subs	r3, r2, r3
 8012600:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012602:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012606:	b29b      	uxth	r3, r3
 8012608:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801260a:	1ad3      	subs	r3, r2, r3
 801260c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801260e:	8b7a      	ldrh	r2, [r7, #26]
 8012610:	8bbb      	ldrh	r3, [r7, #28]
 8012612:	4293      	cmp	r3, r2
 8012614:	bf28      	it	cs
 8012616:	4613      	movcs	r3, r2
 8012618:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801261a:	797b      	ldrb	r3, [r7, #5]
 801261c:	f003 0301 	and.w	r3, r3, #1
 8012620:	2b00      	cmp	r3, #0
 8012622:	d036      	beq.n	8012692 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012624:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012628:	b29a      	uxth	r2, r3
 801262a:	8b3b      	ldrh	r3, [r7, #24]
 801262c:	4413      	add	r3, r2
 801262e:	b299      	uxth	r1, r3
 8012630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012632:	2b00      	cmp	r3, #0
 8012634:	bf0c      	ite	eq
 8012636:	2301      	moveq	r3, #1
 8012638:	2300      	movne	r3, #0
 801263a:	b2db      	uxtb	r3, r3
 801263c:	f107 0012 	add.w	r0, r7, #18
 8012640:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012642:	9302      	str	r3, [sp, #8]
 8012644:	797b      	ldrb	r3, [r7, #5]
 8012646:	9301      	str	r3, [sp, #4]
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	9300      	str	r3, [sp, #0]
 801264c:	4603      	mov	r3, r0
 801264e:	2036      	movs	r0, #54	; 0x36
 8012650:	f7ff fd5e 	bl	8012110 <tcp_pbuf_prealloc>
 8012654:	6338      	str	r0, [r7, #48]	; 0x30
 8012656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012658:	2b00      	cmp	r3, #0
 801265a:	f000 8178 	beq.w	801294e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801265e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012660:	895b      	ldrh	r3, [r3, #10]
 8012662:	8b3a      	ldrh	r2, [r7, #24]
 8012664:	429a      	cmp	r2, r3
 8012666:	d906      	bls.n	8012676 <tcp_write+0x37e>
 8012668:	4b8c      	ldr	r3, [pc, #560]	; (801289c <tcp_write+0x5a4>)
 801266a:	f240 2266 	movw	r2, #614	; 0x266
 801266e:	498c      	ldr	r1, [pc, #560]	; (80128a0 <tcp_write+0x5a8>)
 8012670:	488c      	ldr	r0, [pc, #560]	; (80128a4 <tcp_write+0x5ac>)
 8012672:	f005 f897 	bl	80177a4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012678:	685a      	ldr	r2, [r3, #4]
 801267a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801267e:	18d0      	adds	r0, r2, r3
 8012680:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012684:	68ba      	ldr	r2, [r7, #8]
 8012686:	4413      	add	r3, r2
 8012688:	8b3a      	ldrh	r2, [r7, #24]
 801268a:	4619      	mov	r1, r3
 801268c:	f004 ffca 	bl	8017624 <memcpy>
 8012690:	e02f      	b.n	80126f2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012692:	8a7b      	ldrh	r3, [r7, #18]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d006      	beq.n	80126a6 <tcp_write+0x3ae>
 8012698:	4b80      	ldr	r3, [pc, #512]	; (801289c <tcp_write+0x5a4>)
 801269a:	f240 2271 	movw	r2, #625	; 0x271
 801269e:	4982      	ldr	r1, [pc, #520]	; (80128a8 <tcp_write+0x5b0>)
 80126a0:	4880      	ldr	r0, [pc, #512]	; (80128a4 <tcp_write+0x5ac>)
 80126a2:	f005 f87f 	bl	80177a4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80126a6:	8b3b      	ldrh	r3, [r7, #24]
 80126a8:	2201      	movs	r2, #1
 80126aa:	4619      	mov	r1, r3
 80126ac:	2036      	movs	r0, #54	; 0x36
 80126ae:	f7fa fe3d 	bl	800d32c <pbuf_alloc>
 80126b2:	6178      	str	r0, [r7, #20]
 80126b4:	697b      	ldr	r3, [r7, #20]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	f000 814b 	beq.w	8012952 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80126bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80126c0:	68ba      	ldr	r2, [r7, #8]
 80126c2:	441a      	add	r2, r3
 80126c4:	697b      	ldr	r3, [r7, #20]
 80126c6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80126c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80126cc:	b29b      	uxth	r3, r3
 80126ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80126d2:	4619      	mov	r1, r3
 80126d4:	2036      	movs	r0, #54	; 0x36
 80126d6:	f7fa fe29 	bl	800d32c <pbuf_alloc>
 80126da:	6338      	str	r0, [r7, #48]	; 0x30
 80126dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d103      	bne.n	80126ea <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80126e2:	6978      	ldr	r0, [r7, #20]
 80126e4:	f7fb f906 	bl	800d8f4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80126e8:	e136      	b.n	8012958 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80126ea:	6979      	ldr	r1, [r7, #20]
 80126ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126ee:	f7fb f9cf 	bl	800da90 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80126f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126f4:	f7fb f98c 	bl	800da10 <pbuf_clen>
 80126f8:	4603      	mov	r3, r0
 80126fa:	461a      	mov	r2, r3
 80126fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012700:	4413      	add	r3, r2
 8012702:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012706:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801270a:	2b09      	cmp	r3, #9
 801270c:	d903      	bls.n	8012716 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801270e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012710:	f7fb f8f0 	bl	800d8f4 <pbuf_free>
      goto memerr;
 8012714:	e120      	b.n	8012958 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801271a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801271e:	441a      	add	r2, r3
 8012720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012724:	9300      	str	r3, [sp, #0]
 8012726:	4613      	mov	r3, r2
 8012728:	2200      	movs	r2, #0
 801272a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801272c:	68f8      	ldr	r0, [r7, #12]
 801272e:	f7ff fc51 	bl	8011fd4 <tcp_create_segment>
 8012732:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012736:	2b00      	cmp	r3, #0
 8012738:	f000 810d 	beq.w	8012956 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801273c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801273e:	2b00      	cmp	r3, #0
 8012740:	d102      	bne.n	8012748 <tcp_write+0x450>
      queue = seg;
 8012742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012744:	647b      	str	r3, [r7, #68]	; 0x44
 8012746:	e00c      	b.n	8012762 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801274a:	2b00      	cmp	r3, #0
 801274c:	d106      	bne.n	801275c <tcp_write+0x464>
 801274e:	4b53      	ldr	r3, [pc, #332]	; (801289c <tcp_write+0x5a4>)
 8012750:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012754:	4955      	ldr	r1, [pc, #340]	; (80128ac <tcp_write+0x5b4>)
 8012756:	4853      	ldr	r0, [pc, #332]	; (80128a4 <tcp_write+0x5ac>)
 8012758:	f005 f824 	bl	80177a4 <iprintf>
      prev_seg->next = seg;
 801275c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801275e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012760:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012764:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012766:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801276a:	8b3b      	ldrh	r3, [r7, #24]
 801276c:	4413      	add	r3, r2
 801276e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012772:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012776:	88fb      	ldrh	r3, [r7, #6]
 8012778:	429a      	cmp	r2, r3
 801277a:	f4ff af3d 	bcc.w	80125f8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801277e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012780:	2b00      	cmp	r3, #0
 8012782:	d02c      	beq.n	80127de <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012786:	685b      	ldr	r3, [r3, #4]
 8012788:	62fb      	str	r3, [r7, #44]	; 0x2c
 801278a:	e01e      	b.n	80127ca <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801278c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801278e:	891a      	ldrh	r2, [r3, #8]
 8012790:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012792:	4413      	add	r3, r2
 8012794:	b29a      	uxth	r2, r3
 8012796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012798:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d110      	bne.n	80127c4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80127a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a4:	685b      	ldr	r3, [r3, #4]
 80127a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80127a8:	8952      	ldrh	r2, [r2, #10]
 80127aa:	4413      	add	r3, r2
 80127ac:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80127ae:	68b9      	ldr	r1, [r7, #8]
 80127b0:	4618      	mov	r0, r3
 80127b2:	f004 ff37 	bl	8017624 <memcpy>
        p->len += oversize_used;
 80127b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127b8:	895a      	ldrh	r2, [r3, #10]
 80127ba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80127bc:	4413      	add	r3, r2
 80127be:	b29a      	uxth	r2, r3
 80127c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80127c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80127ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d1dd      	bne.n	801278c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80127d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127d2:	891a      	ldrh	r2, [r3, #8]
 80127d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80127d6:	4413      	add	r3, r2
 80127d8:	b29a      	uxth	r2, r3
 80127da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127dc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80127de:	8a7a      	ldrh	r2, [r7, #18]
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80127e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d018      	beq.n	801281e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80127ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d106      	bne.n	8012800 <tcp_write+0x508>
 80127f2:	4b2a      	ldr	r3, [pc, #168]	; (801289c <tcp_write+0x5a4>)
 80127f4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80127f8:	492d      	ldr	r1, [pc, #180]	; (80128b0 <tcp_write+0x5b8>)
 80127fa:	482a      	ldr	r0, [pc, #168]	; (80128a4 <tcp_write+0x5ac>)
 80127fc:	f004 ffd2 	bl	80177a4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012802:	685b      	ldr	r3, [r3, #4]
 8012804:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012806:	4618      	mov	r0, r3
 8012808:	f7fb f942 	bl	800da90 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801280c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801280e:	891a      	ldrh	r2, [r3, #8]
 8012810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012812:	891b      	ldrh	r3, [r3, #8]
 8012814:	4413      	add	r3, r2
 8012816:	b29a      	uxth	r2, r3
 8012818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801281a:	811a      	strh	r2, [r3, #8]
 801281c:	e037      	b.n	801288e <tcp_write+0x596>
  } else if (extendlen > 0) {
 801281e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012820:	2b00      	cmp	r3, #0
 8012822:	d034      	beq.n	801288e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012826:	2b00      	cmp	r3, #0
 8012828:	d003      	beq.n	8012832 <tcp_write+0x53a>
 801282a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801282c:	685b      	ldr	r3, [r3, #4]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d106      	bne.n	8012840 <tcp_write+0x548>
 8012832:	4b1a      	ldr	r3, [pc, #104]	; (801289c <tcp_write+0x5a4>)
 8012834:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012838:	491e      	ldr	r1, [pc, #120]	; (80128b4 <tcp_write+0x5bc>)
 801283a:	481a      	ldr	r0, [pc, #104]	; (80128a4 <tcp_write+0x5ac>)
 801283c:	f004 ffb2 	bl	80177a4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012842:	685b      	ldr	r3, [r3, #4]
 8012844:	62bb      	str	r3, [r7, #40]	; 0x28
 8012846:	e009      	b.n	801285c <tcp_write+0x564>
      p->tot_len += extendlen;
 8012848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801284a:	891a      	ldrh	r2, [r3, #8]
 801284c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801284e:	4413      	add	r3, r2
 8012850:	b29a      	uxth	r2, r3
 8012852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012854:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	62bb      	str	r3, [r7, #40]	; 0x28
 801285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d1f1      	bne.n	8012848 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012866:	891a      	ldrh	r2, [r3, #8]
 8012868:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801286a:	4413      	add	r3, r2
 801286c:	b29a      	uxth	r2, r3
 801286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012870:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012874:	895a      	ldrh	r2, [r3, #10]
 8012876:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012878:	4413      	add	r3, r2
 801287a:	b29a      	uxth	r2, r3
 801287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801287e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012882:	891a      	ldrh	r2, [r3, #8]
 8012884:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012886:	4413      	add	r3, r2
 8012888:	b29a      	uxth	r2, r3
 801288a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801288c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801288e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012890:	2b00      	cmp	r3, #0
 8012892:	d111      	bne.n	80128b8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012898:	66da      	str	r2, [r3, #108]	; 0x6c
 801289a:	e010      	b.n	80128be <tcp_write+0x5c6>
 801289c:	0801a814 	.word	0x0801a814
 80128a0:	0801aab4 	.word	0x0801aab4
 80128a4:	0801a868 	.word	0x0801a868
 80128a8:	0801aaf4 	.word	0x0801aaf4
 80128ac:	0801ab04 	.word	0x0801ab04
 80128b0:	0801ab18 	.word	0x0801ab18
 80128b4:	0801ab50 	.word	0x0801ab50
  } else {
    last_unsent->next = queue;
 80128b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80128bc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80128c2:	88fb      	ldrh	r3, [r7, #6]
 80128c4:	441a      	add	r2, r3
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80128d0:	88fb      	ldrh	r3, [r7, #6]
 80128d2:	1ad3      	subs	r3, r2, r3
 80128d4:	b29a      	uxth	r2, r3
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80128e2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d00e      	beq.n	801290e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d10a      	bne.n	801290e <tcp_write+0x616>
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d106      	bne.n	801290e <tcp_write+0x616>
 8012900:	4b2c      	ldr	r3, [pc, #176]	; (80129b4 <tcp_write+0x6bc>)
 8012902:	f240 3212 	movw	r2, #786	; 0x312
 8012906:	492c      	ldr	r1, [pc, #176]	; (80129b8 <tcp_write+0x6c0>)
 8012908:	482c      	ldr	r0, [pc, #176]	; (80129bc <tcp_write+0x6c4>)
 801290a:	f004 ff4b 	bl	80177a4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801290e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012910:	2b00      	cmp	r3, #0
 8012912:	d016      	beq.n	8012942 <tcp_write+0x64a>
 8012914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012916:	68db      	ldr	r3, [r3, #12]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d012      	beq.n	8012942 <tcp_write+0x64a>
 801291c:	797b      	ldrb	r3, [r7, #5]
 801291e:	f003 0302 	and.w	r3, r3, #2
 8012922:	2b00      	cmp	r3, #0
 8012924:	d10d      	bne.n	8012942 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012928:	68db      	ldr	r3, [r3, #12]
 801292a:	899b      	ldrh	r3, [r3, #12]
 801292c:	b29c      	uxth	r4, r3
 801292e:	2008      	movs	r0, #8
 8012930:	f7f9 fc98 	bl	800c264 <lwip_htons>
 8012934:	4603      	mov	r3, r0
 8012936:	461a      	mov	r2, r3
 8012938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801293a:	68db      	ldr	r3, [r3, #12]
 801293c:	4322      	orrs	r2, r4
 801293e:	b292      	uxth	r2, r2
 8012940:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012942:	2300      	movs	r3, #0
 8012944:	e031      	b.n	80129aa <tcp_write+0x6b2>
          goto memerr;
 8012946:	bf00      	nop
 8012948:	e006      	b.n	8012958 <tcp_write+0x660>
            goto memerr;
 801294a:	bf00      	nop
 801294c:	e004      	b.n	8012958 <tcp_write+0x660>
        goto memerr;
 801294e:	bf00      	nop
 8012950:	e002      	b.n	8012958 <tcp_write+0x660>
        goto memerr;
 8012952:	bf00      	nop
 8012954:	e000      	b.n	8012958 <tcp_write+0x660>
      goto memerr;
 8012956:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	8b5b      	ldrh	r3, [r3, #26]
 801295c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012960:	b29a      	uxth	r2, r3
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012968:	2b00      	cmp	r3, #0
 801296a:	d002      	beq.n	8012972 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801296c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801296e:	f7fa ffc1 	bl	800d8f4 <pbuf_free>
  }
  if (queue != NULL) {
 8012972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012974:	2b00      	cmp	r3, #0
 8012976:	d002      	beq.n	801297e <tcp_write+0x686>
    tcp_segs_free(queue);
 8012978:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801297a:	f7fc fb6f 	bl	800f05c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012984:	2b00      	cmp	r3, #0
 8012986:	d00e      	beq.n	80129a6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801298c:	2b00      	cmp	r3, #0
 801298e:	d10a      	bne.n	80129a6 <tcp_write+0x6ae>
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012994:	2b00      	cmp	r3, #0
 8012996:	d106      	bne.n	80129a6 <tcp_write+0x6ae>
 8012998:	4b06      	ldr	r3, [pc, #24]	; (80129b4 <tcp_write+0x6bc>)
 801299a:	f240 3227 	movw	r2, #807	; 0x327
 801299e:	4906      	ldr	r1, [pc, #24]	; (80129b8 <tcp_write+0x6c0>)
 80129a0:	4806      	ldr	r0, [pc, #24]	; (80129bc <tcp_write+0x6c4>)
 80129a2:	f004 feff 	bl	80177a4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80129a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80129aa:	4618      	mov	r0, r3
 80129ac:	375c      	adds	r7, #92	; 0x5c
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd90      	pop	{r4, r7, pc}
 80129b2:	bf00      	nop
 80129b4:	0801a814 	.word	0x0801a814
 80129b8:	0801ab88 	.word	0x0801ab88
 80129bc:	0801a868 	.word	0x0801a868

080129c0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80129c0:	b590      	push	{r4, r7, lr}
 80129c2:	b08b      	sub	sp, #44	; 0x2c
 80129c4:	af02      	add	r7, sp, #8
 80129c6:	6078      	str	r0, [r7, #4]
 80129c8:	460b      	mov	r3, r1
 80129ca:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80129cc:	2300      	movs	r3, #0
 80129ce:	61fb      	str	r3, [r7, #28]
 80129d0:	2300      	movs	r3, #0
 80129d2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80129d4:	2300      	movs	r3, #0
 80129d6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d106      	bne.n	80129ec <tcp_split_unsent_seg+0x2c>
 80129de:	4b95      	ldr	r3, [pc, #596]	; (8012c34 <tcp_split_unsent_seg+0x274>)
 80129e0:	f240 324b 	movw	r2, #843	; 0x34b
 80129e4:	4994      	ldr	r1, [pc, #592]	; (8012c38 <tcp_split_unsent_seg+0x278>)
 80129e6:	4895      	ldr	r0, [pc, #596]	; (8012c3c <tcp_split_unsent_seg+0x27c>)
 80129e8:	f004 fedc 	bl	80177a4 <iprintf>

  useg = pcb->unsent;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129f0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80129f2:	697b      	ldr	r3, [r7, #20]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d102      	bne.n	80129fe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80129f8:	f04f 33ff 	mov.w	r3, #4294967295
 80129fc:	e116      	b.n	8012c2c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80129fe:	887b      	ldrh	r3, [r7, #2]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d109      	bne.n	8012a18 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012a04:	4b8b      	ldr	r3, [pc, #556]	; (8012c34 <tcp_split_unsent_seg+0x274>)
 8012a06:	f240 3253 	movw	r2, #851	; 0x353
 8012a0a:	498d      	ldr	r1, [pc, #564]	; (8012c40 <tcp_split_unsent_seg+0x280>)
 8012a0c:	488b      	ldr	r0, [pc, #556]	; (8012c3c <tcp_split_unsent_seg+0x27c>)
 8012a0e:	f004 fec9 	bl	80177a4 <iprintf>
    return ERR_VAL;
 8012a12:	f06f 0305 	mvn.w	r3, #5
 8012a16:	e109      	b.n	8012c2c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	891b      	ldrh	r3, [r3, #8]
 8012a1c:	887a      	ldrh	r2, [r7, #2]
 8012a1e:	429a      	cmp	r2, r3
 8012a20:	d301      	bcc.n	8012a26 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012a22:	2300      	movs	r3, #0
 8012a24:	e102      	b.n	8012c2c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a2a:	887a      	ldrh	r2, [r7, #2]
 8012a2c:	429a      	cmp	r2, r3
 8012a2e:	d906      	bls.n	8012a3e <tcp_split_unsent_seg+0x7e>
 8012a30:	4b80      	ldr	r3, [pc, #512]	; (8012c34 <tcp_split_unsent_seg+0x274>)
 8012a32:	f240 325b 	movw	r2, #859	; 0x35b
 8012a36:	4983      	ldr	r1, [pc, #524]	; (8012c44 <tcp_split_unsent_seg+0x284>)
 8012a38:	4880      	ldr	r0, [pc, #512]	; (8012c3c <tcp_split_unsent_seg+0x27c>)
 8012a3a:	f004 feb3 	bl	80177a4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012a3e:	697b      	ldr	r3, [r7, #20]
 8012a40:	891b      	ldrh	r3, [r3, #8]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d106      	bne.n	8012a54 <tcp_split_unsent_seg+0x94>
 8012a46:	4b7b      	ldr	r3, [pc, #492]	; (8012c34 <tcp_split_unsent_seg+0x274>)
 8012a48:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012a4c:	497e      	ldr	r1, [pc, #504]	; (8012c48 <tcp_split_unsent_seg+0x288>)
 8012a4e:	487b      	ldr	r0, [pc, #492]	; (8012c3c <tcp_split_unsent_seg+0x27c>)
 8012a50:	f004 fea8 	bl	80177a4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012a54:	697b      	ldr	r3, [r7, #20]
 8012a56:	7a9b      	ldrb	r3, [r3, #10]
 8012a58:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012a5a:	7bfb      	ldrb	r3, [r7, #15]
 8012a5c:	009b      	lsls	r3, r3, #2
 8012a5e:	b2db      	uxtb	r3, r3
 8012a60:	f003 0304 	and.w	r3, r3, #4
 8012a64:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012a66:	697b      	ldr	r3, [r7, #20]
 8012a68:	891a      	ldrh	r2, [r3, #8]
 8012a6a:	887b      	ldrh	r3, [r7, #2]
 8012a6c:	1ad3      	subs	r3, r2, r3
 8012a6e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012a70:	7bbb      	ldrb	r3, [r7, #14]
 8012a72:	b29a      	uxth	r2, r3
 8012a74:	89bb      	ldrh	r3, [r7, #12]
 8012a76:	4413      	add	r3, r2
 8012a78:	b29b      	uxth	r3, r3
 8012a7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012a7e:	4619      	mov	r1, r3
 8012a80:	2036      	movs	r0, #54	; 0x36
 8012a82:	f7fa fc53 	bl	800d32c <pbuf_alloc>
 8012a86:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012a88:	693b      	ldr	r3, [r7, #16]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	f000 80b7 	beq.w	8012bfe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012a90:	697b      	ldr	r3, [r7, #20]
 8012a92:	685b      	ldr	r3, [r3, #4]
 8012a94:	891a      	ldrh	r2, [r3, #8]
 8012a96:	697b      	ldr	r3, [r7, #20]
 8012a98:	891b      	ldrh	r3, [r3, #8]
 8012a9a:	1ad3      	subs	r3, r2, r3
 8012a9c:	b29a      	uxth	r2, r3
 8012a9e:	887b      	ldrh	r3, [r7, #2]
 8012aa0:	4413      	add	r3, r2
 8012aa2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	6858      	ldr	r0, [r3, #4]
 8012aa8:	693b      	ldr	r3, [r7, #16]
 8012aaa:	685a      	ldr	r2, [r3, #4]
 8012aac:	7bbb      	ldrb	r3, [r7, #14]
 8012aae:	18d1      	adds	r1, r2, r3
 8012ab0:	897b      	ldrh	r3, [r7, #10]
 8012ab2:	89ba      	ldrh	r2, [r7, #12]
 8012ab4:	f7fb f924 	bl	800dd00 <pbuf_copy_partial>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	461a      	mov	r2, r3
 8012abc:	89bb      	ldrh	r3, [r7, #12]
 8012abe:	4293      	cmp	r3, r2
 8012ac0:	f040 809f 	bne.w	8012c02 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012ac4:	697b      	ldr	r3, [r7, #20]
 8012ac6:	68db      	ldr	r3, [r3, #12]
 8012ac8:	899b      	ldrh	r3, [r3, #12]
 8012aca:	b29b      	uxth	r3, r3
 8012acc:	4618      	mov	r0, r3
 8012ace:	f7f9 fbc9 	bl	800c264 <lwip_htons>
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	b2db      	uxtb	r3, r3
 8012ad6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ada:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012adc:	2300      	movs	r3, #0
 8012ade:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012ae0:	7efb      	ldrb	r3, [r7, #27]
 8012ae2:	f003 0308 	and.w	r3, r3, #8
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d007      	beq.n	8012afa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012aea:	7efb      	ldrb	r3, [r7, #27]
 8012aec:	f023 0308 	bic.w	r3, r3, #8
 8012af0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012af2:	7ebb      	ldrb	r3, [r7, #26]
 8012af4:	f043 0308 	orr.w	r3, r3, #8
 8012af8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012afa:	7efb      	ldrb	r3, [r7, #27]
 8012afc:	f003 0301 	and.w	r3, r3, #1
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d007      	beq.n	8012b14 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012b04:	7efb      	ldrb	r3, [r7, #27]
 8012b06:	f023 0301 	bic.w	r3, r3, #1
 8012b0a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012b0c:	7ebb      	ldrb	r3, [r7, #26]
 8012b0e:	f043 0301 	orr.w	r3, r3, #1
 8012b12:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012b14:	697b      	ldr	r3, [r7, #20]
 8012b16:	68db      	ldr	r3, [r3, #12]
 8012b18:	685b      	ldr	r3, [r3, #4]
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f7f9 fbb7 	bl	800c28e <lwip_htonl>
 8012b20:	4602      	mov	r2, r0
 8012b22:	887b      	ldrh	r3, [r7, #2]
 8012b24:	18d1      	adds	r1, r2, r3
 8012b26:	7eba      	ldrb	r2, [r7, #26]
 8012b28:	7bfb      	ldrb	r3, [r7, #15]
 8012b2a:	9300      	str	r3, [sp, #0]
 8012b2c:	460b      	mov	r3, r1
 8012b2e:	6939      	ldr	r1, [r7, #16]
 8012b30:	6878      	ldr	r0, [r7, #4]
 8012b32:	f7ff fa4f 	bl	8011fd4 <tcp_create_segment>
 8012b36:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012b38:	69fb      	ldr	r3, [r7, #28]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d063      	beq.n	8012c06 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	685b      	ldr	r3, [r3, #4]
 8012b42:	4618      	mov	r0, r3
 8012b44:	f7fa ff64 	bl	800da10 <pbuf_clen>
 8012b48:	4603      	mov	r3, r0
 8012b4a:	461a      	mov	r2, r3
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b52:	1a9b      	subs	r3, r3, r2
 8012b54:	b29a      	uxth	r2, r3
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012b5c:	697b      	ldr	r3, [r7, #20]
 8012b5e:	6858      	ldr	r0, [r3, #4]
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	685b      	ldr	r3, [r3, #4]
 8012b64:	891a      	ldrh	r2, [r3, #8]
 8012b66:	89bb      	ldrh	r3, [r7, #12]
 8012b68:	1ad3      	subs	r3, r2, r3
 8012b6a:	b29b      	uxth	r3, r3
 8012b6c:	4619      	mov	r1, r3
 8012b6e:	f7fa fd3b 	bl	800d5e8 <pbuf_realloc>
  useg->len -= remainder;
 8012b72:	697b      	ldr	r3, [r7, #20]
 8012b74:	891a      	ldrh	r2, [r3, #8]
 8012b76:	89bb      	ldrh	r3, [r7, #12]
 8012b78:	1ad3      	subs	r3, r2, r3
 8012b7a:	b29a      	uxth	r2, r3
 8012b7c:	697b      	ldr	r3, [r7, #20]
 8012b7e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012b80:	697b      	ldr	r3, [r7, #20]
 8012b82:	68db      	ldr	r3, [r3, #12]
 8012b84:	899b      	ldrh	r3, [r3, #12]
 8012b86:	b29c      	uxth	r4, r3
 8012b88:	7efb      	ldrb	r3, [r7, #27]
 8012b8a:	b29b      	uxth	r3, r3
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f7f9 fb69 	bl	800c264 <lwip_htons>
 8012b92:	4603      	mov	r3, r0
 8012b94:	461a      	mov	r2, r3
 8012b96:	697b      	ldr	r3, [r7, #20]
 8012b98:	68db      	ldr	r3, [r3, #12]
 8012b9a:	4322      	orrs	r2, r4
 8012b9c:	b292      	uxth	r2, r2
 8012b9e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012ba0:	697b      	ldr	r3, [r7, #20]
 8012ba2:	685b      	ldr	r3, [r3, #4]
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f7fa ff33 	bl	800da10 <pbuf_clen>
 8012baa:	4603      	mov	r3, r0
 8012bac:	461a      	mov	r2, r3
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012bb4:	4413      	add	r3, r2
 8012bb6:	b29a      	uxth	r2, r3
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012bbe:	69fb      	ldr	r3, [r7, #28]
 8012bc0:	685b      	ldr	r3, [r3, #4]
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f7fa ff24 	bl	800da10 <pbuf_clen>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	461a      	mov	r2, r3
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012bd2:	4413      	add	r3, r2
 8012bd4:	b29a      	uxth	r2, r3
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012bdc:	697b      	ldr	r3, [r7, #20]
 8012bde:	681a      	ldr	r2, [r3, #0]
 8012be0:	69fb      	ldr	r3, [r7, #28]
 8012be2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012be4:	697b      	ldr	r3, [r7, #20]
 8012be6:	69fa      	ldr	r2, [r7, #28]
 8012be8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012bea:	69fb      	ldr	r3, [r7, #28]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d103      	bne.n	8012bfa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	e016      	b.n	8012c2c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012bfe:	bf00      	nop
 8012c00:	e002      	b.n	8012c08 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012c02:	bf00      	nop
 8012c04:	e000      	b.n	8012c08 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012c06:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012c08:	69fb      	ldr	r3, [r7, #28]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d006      	beq.n	8012c1c <tcp_split_unsent_seg+0x25c>
 8012c0e:	4b09      	ldr	r3, [pc, #36]	; (8012c34 <tcp_split_unsent_seg+0x274>)
 8012c10:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012c14:	490d      	ldr	r1, [pc, #52]	; (8012c4c <tcp_split_unsent_seg+0x28c>)
 8012c16:	4809      	ldr	r0, [pc, #36]	; (8012c3c <tcp_split_unsent_seg+0x27c>)
 8012c18:	f004 fdc4 	bl	80177a4 <iprintf>
  if (p != NULL) {
 8012c1c:	693b      	ldr	r3, [r7, #16]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d002      	beq.n	8012c28 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012c22:	6938      	ldr	r0, [r7, #16]
 8012c24:	f7fa fe66 	bl	800d8f4 <pbuf_free>
  }

  return ERR_MEM;
 8012c28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	3724      	adds	r7, #36	; 0x24
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd90      	pop	{r4, r7, pc}
 8012c34:	0801a814 	.word	0x0801a814
 8012c38:	0801aba8 	.word	0x0801aba8
 8012c3c:	0801a868 	.word	0x0801a868
 8012c40:	0801abcc 	.word	0x0801abcc
 8012c44:	0801abf0 	.word	0x0801abf0
 8012c48:	0801ac00 	.word	0x0801ac00
 8012c4c:	0801ac10 	.word	0x0801ac10

08012c50 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012c50:	b590      	push	{r4, r7, lr}
 8012c52:	b085      	sub	sp, #20
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d106      	bne.n	8012c6c <tcp_send_fin+0x1c>
 8012c5e:	4b21      	ldr	r3, [pc, #132]	; (8012ce4 <tcp_send_fin+0x94>)
 8012c60:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012c64:	4920      	ldr	r1, [pc, #128]	; (8012ce8 <tcp_send_fin+0x98>)
 8012c66:	4821      	ldr	r0, [pc, #132]	; (8012cec <tcp_send_fin+0x9c>)
 8012c68:	f004 fd9c 	bl	80177a4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d02e      	beq.n	8012cd2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c78:	60fb      	str	r3, [r7, #12]
 8012c7a:	e002      	b.n	8012c82 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d1f8      	bne.n	8012c7c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	68db      	ldr	r3, [r3, #12]
 8012c8e:	899b      	ldrh	r3, [r3, #12]
 8012c90:	b29b      	uxth	r3, r3
 8012c92:	4618      	mov	r0, r3
 8012c94:	f7f9 fae6 	bl	800c264 <lwip_htons>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	b2db      	uxtb	r3, r3
 8012c9c:	f003 0307 	and.w	r3, r3, #7
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d116      	bne.n	8012cd2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	68db      	ldr	r3, [r3, #12]
 8012ca8:	899b      	ldrh	r3, [r3, #12]
 8012caa:	b29c      	uxth	r4, r3
 8012cac:	2001      	movs	r0, #1
 8012cae:	f7f9 fad9 	bl	800c264 <lwip_htons>
 8012cb2:	4603      	mov	r3, r0
 8012cb4:	461a      	mov	r2, r3
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	68db      	ldr	r3, [r3, #12]
 8012cba:	4322      	orrs	r2, r4
 8012cbc:	b292      	uxth	r2, r2
 8012cbe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	8b5b      	ldrh	r3, [r3, #26]
 8012cc4:	f043 0320 	orr.w	r3, r3, #32
 8012cc8:	b29a      	uxth	r2, r3
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012cce:	2300      	movs	r3, #0
 8012cd0:	e004      	b.n	8012cdc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012cd2:	2101      	movs	r1, #1
 8012cd4:	6878      	ldr	r0, [r7, #4]
 8012cd6:	f000 f80b 	bl	8012cf0 <tcp_enqueue_flags>
 8012cda:	4603      	mov	r3, r0
}
 8012cdc:	4618      	mov	r0, r3
 8012cde:	3714      	adds	r7, #20
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	bd90      	pop	{r4, r7, pc}
 8012ce4:	0801a814 	.word	0x0801a814
 8012ce8:	0801ac1c 	.word	0x0801ac1c
 8012cec:	0801a868 	.word	0x0801a868

08012cf0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b08a      	sub	sp, #40	; 0x28
 8012cf4:	af02      	add	r7, sp, #8
 8012cf6:	6078      	str	r0, [r7, #4]
 8012cf8:	460b      	mov	r3, r1
 8012cfa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012d00:	2300      	movs	r3, #0
 8012d02:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012d04:	78fb      	ldrb	r3, [r7, #3]
 8012d06:	f003 0303 	and.w	r3, r3, #3
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d106      	bne.n	8012d1c <tcp_enqueue_flags+0x2c>
 8012d0e:	4b67      	ldr	r3, [pc, #412]	; (8012eac <tcp_enqueue_flags+0x1bc>)
 8012d10:	f240 4211 	movw	r2, #1041	; 0x411
 8012d14:	4966      	ldr	r1, [pc, #408]	; (8012eb0 <tcp_enqueue_flags+0x1c0>)
 8012d16:	4867      	ldr	r0, [pc, #412]	; (8012eb4 <tcp_enqueue_flags+0x1c4>)
 8012d18:	f004 fd44 	bl	80177a4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d106      	bne.n	8012d30 <tcp_enqueue_flags+0x40>
 8012d22:	4b62      	ldr	r3, [pc, #392]	; (8012eac <tcp_enqueue_flags+0x1bc>)
 8012d24:	f240 4213 	movw	r2, #1043	; 0x413
 8012d28:	4963      	ldr	r1, [pc, #396]	; (8012eb8 <tcp_enqueue_flags+0x1c8>)
 8012d2a:	4862      	ldr	r0, [pc, #392]	; (8012eb4 <tcp_enqueue_flags+0x1c4>)
 8012d2c:	f004 fd3a 	bl	80177a4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012d30:	78fb      	ldrb	r3, [r7, #3]
 8012d32:	f003 0302 	and.w	r3, r3, #2
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d001      	beq.n	8012d3e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012d3a:	2301      	movs	r3, #1
 8012d3c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012d3e:	7ffb      	ldrb	r3, [r7, #31]
 8012d40:	009b      	lsls	r3, r3, #2
 8012d42:	b2db      	uxtb	r3, r3
 8012d44:	f003 0304 	and.w	r3, r3, #4
 8012d48:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012d4a:	7dfb      	ldrb	r3, [r7, #23]
 8012d4c:	b29b      	uxth	r3, r3
 8012d4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012d52:	4619      	mov	r1, r3
 8012d54:	2036      	movs	r0, #54	; 0x36
 8012d56:	f7fa fae9 	bl	800d32c <pbuf_alloc>
 8012d5a:	6138      	str	r0, [r7, #16]
 8012d5c:	693b      	ldr	r3, [r7, #16]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d109      	bne.n	8012d76 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	8b5b      	ldrh	r3, [r3, #26]
 8012d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d6a:	b29a      	uxth	r2, r3
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012d70:	f04f 33ff 	mov.w	r3, #4294967295
 8012d74:	e095      	b.n	8012ea2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012d76:	693b      	ldr	r3, [r7, #16]
 8012d78:	895a      	ldrh	r2, [r3, #10]
 8012d7a:	7dfb      	ldrb	r3, [r7, #23]
 8012d7c:	b29b      	uxth	r3, r3
 8012d7e:	429a      	cmp	r2, r3
 8012d80:	d206      	bcs.n	8012d90 <tcp_enqueue_flags+0xa0>
 8012d82:	4b4a      	ldr	r3, [pc, #296]	; (8012eac <tcp_enqueue_flags+0x1bc>)
 8012d84:	f240 4239 	movw	r2, #1081	; 0x439
 8012d88:	494c      	ldr	r1, [pc, #304]	; (8012ebc <tcp_enqueue_flags+0x1cc>)
 8012d8a:	484a      	ldr	r0, [pc, #296]	; (8012eb4 <tcp_enqueue_flags+0x1c4>)
 8012d8c:	f004 fd0a 	bl	80177a4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012d94:	78fa      	ldrb	r2, [r7, #3]
 8012d96:	7ffb      	ldrb	r3, [r7, #31]
 8012d98:	9300      	str	r3, [sp, #0]
 8012d9a:	460b      	mov	r3, r1
 8012d9c:	6939      	ldr	r1, [r7, #16]
 8012d9e:	6878      	ldr	r0, [r7, #4]
 8012da0:	f7ff f918 	bl	8011fd4 <tcp_create_segment>
 8012da4:	60f8      	str	r0, [r7, #12]
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d109      	bne.n	8012dc0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	8b5b      	ldrh	r3, [r3, #26]
 8012db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012db4:	b29a      	uxth	r2, r3
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012dba:	f04f 33ff 	mov.w	r3, #4294967295
 8012dbe:	e070      	b.n	8012ea2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	68db      	ldr	r3, [r3, #12]
 8012dc4:	f003 0303 	and.w	r3, r3, #3
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d006      	beq.n	8012dda <tcp_enqueue_flags+0xea>
 8012dcc:	4b37      	ldr	r3, [pc, #220]	; (8012eac <tcp_enqueue_flags+0x1bc>)
 8012dce:	f240 4242 	movw	r2, #1090	; 0x442
 8012dd2:	493b      	ldr	r1, [pc, #236]	; (8012ec0 <tcp_enqueue_flags+0x1d0>)
 8012dd4:	4837      	ldr	r0, [pc, #220]	; (8012eb4 <tcp_enqueue_flags+0x1c4>)
 8012dd6:	f004 fce5 	bl	80177a4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	891b      	ldrh	r3, [r3, #8]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d006      	beq.n	8012df0 <tcp_enqueue_flags+0x100>
 8012de2:	4b32      	ldr	r3, [pc, #200]	; (8012eac <tcp_enqueue_flags+0x1bc>)
 8012de4:	f240 4243 	movw	r2, #1091	; 0x443
 8012de8:	4936      	ldr	r1, [pc, #216]	; (8012ec4 <tcp_enqueue_flags+0x1d4>)
 8012dea:	4832      	ldr	r0, [pc, #200]	; (8012eb4 <tcp_enqueue_flags+0x1c4>)
 8012dec:	f004 fcda 	bl	80177a4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d103      	bne.n	8012e00 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	68fa      	ldr	r2, [r7, #12]
 8012dfc:	66da      	str	r2, [r3, #108]	; 0x6c
 8012dfe:	e00d      	b.n	8012e1c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e04:	61bb      	str	r3, [r7, #24]
 8012e06:	e002      	b.n	8012e0e <tcp_enqueue_flags+0x11e>
 8012e08:	69bb      	ldr	r3, [r7, #24]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	61bb      	str	r3, [r7, #24]
 8012e0e:	69bb      	ldr	r3, [r7, #24]
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d1f8      	bne.n	8012e08 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012e16:	69bb      	ldr	r3, [r7, #24]
 8012e18:	68fa      	ldr	r2, [r7, #12]
 8012e1a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2200      	movs	r2, #0
 8012e20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012e24:	78fb      	ldrb	r3, [r7, #3]
 8012e26:	f003 0302 	and.w	r3, r3, #2
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d104      	bne.n	8012e38 <tcp_enqueue_flags+0x148>
 8012e2e:	78fb      	ldrb	r3, [r7, #3]
 8012e30:	f003 0301 	and.w	r3, r3, #1
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d004      	beq.n	8012e42 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012e3c:	1c5a      	adds	r2, r3, #1
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012e42:	78fb      	ldrb	r3, [r7, #3]
 8012e44:	f003 0301 	and.w	r3, r3, #1
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d006      	beq.n	8012e5a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	8b5b      	ldrh	r3, [r3, #26]
 8012e50:	f043 0320 	orr.w	r3, r3, #32
 8012e54:	b29a      	uxth	r2, r3
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	685b      	ldr	r3, [r3, #4]
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f7fa fdd6 	bl	800da10 <pbuf_clen>
 8012e64:	4603      	mov	r3, r0
 8012e66:	461a      	mov	r2, r3
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012e6e:	4413      	add	r3, r2
 8012e70:	b29a      	uxth	r2, r3
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d00e      	beq.n	8012ea0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d10a      	bne.n	8012ea0 <tcp_enqueue_flags+0x1b0>
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d106      	bne.n	8012ea0 <tcp_enqueue_flags+0x1b0>
 8012e92:	4b06      	ldr	r3, [pc, #24]	; (8012eac <tcp_enqueue_flags+0x1bc>)
 8012e94:	f240 4265 	movw	r2, #1125	; 0x465
 8012e98:	490b      	ldr	r1, [pc, #44]	; (8012ec8 <tcp_enqueue_flags+0x1d8>)
 8012e9a:	4806      	ldr	r0, [pc, #24]	; (8012eb4 <tcp_enqueue_flags+0x1c4>)
 8012e9c:	f004 fc82 	bl	80177a4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012ea0:	2300      	movs	r3, #0
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	3720      	adds	r7, #32
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bd80      	pop	{r7, pc}
 8012eaa:	bf00      	nop
 8012eac:	0801a814 	.word	0x0801a814
 8012eb0:	0801ac38 	.word	0x0801ac38
 8012eb4:	0801a868 	.word	0x0801a868
 8012eb8:	0801ac90 	.word	0x0801ac90
 8012ebc:	0801acb0 	.word	0x0801acb0
 8012ec0:	0801acec 	.word	0x0801acec
 8012ec4:	0801ad04 	.word	0x0801ad04
 8012ec8:	0801ad30 	.word	0x0801ad30

08012ecc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012ecc:	b5b0      	push	{r4, r5, r7, lr}
 8012ece:	b08a      	sub	sp, #40	; 0x28
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d106      	bne.n	8012ee8 <tcp_output+0x1c>
 8012eda:	4b9e      	ldr	r3, [pc, #632]	; (8013154 <tcp_output+0x288>)
 8012edc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012ee0:	499d      	ldr	r1, [pc, #628]	; (8013158 <tcp_output+0x28c>)
 8012ee2:	489e      	ldr	r0, [pc, #632]	; (801315c <tcp_output+0x290>)
 8012ee4:	f004 fc5e 	bl	80177a4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	7d1b      	ldrb	r3, [r3, #20]
 8012eec:	2b01      	cmp	r3, #1
 8012eee:	d106      	bne.n	8012efe <tcp_output+0x32>
 8012ef0:	4b98      	ldr	r3, [pc, #608]	; (8013154 <tcp_output+0x288>)
 8012ef2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012ef6:	499a      	ldr	r1, [pc, #616]	; (8013160 <tcp_output+0x294>)
 8012ef8:	4898      	ldr	r0, [pc, #608]	; (801315c <tcp_output+0x290>)
 8012efa:	f004 fc53 	bl	80177a4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012efe:	4b99      	ldr	r3, [pc, #612]	; (8013164 <tcp_output+0x298>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	687a      	ldr	r2, [r7, #4]
 8012f04:	429a      	cmp	r2, r3
 8012f06:	d101      	bne.n	8012f0c <tcp_output+0x40>
    return ERR_OK;
 8012f08:	2300      	movs	r3, #0
 8012f0a:	e1ce      	b.n	80132aa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012f18:	4293      	cmp	r3, r2
 8012f1a:	bf28      	it	cs
 8012f1c:	4613      	movcs	r3, r2
 8012f1e:	b29b      	uxth	r3, r3
 8012f20:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f26:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d10b      	bne.n	8012f46 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	8b5b      	ldrh	r3, [r3, #26]
 8012f32:	f003 0302 	and.w	r3, r3, #2
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	f000 81aa 	beq.w	8013290 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012f3c:	6878      	ldr	r0, [r7, #4]
 8012f3e:	f000 fdcb 	bl	8013ad8 <tcp_send_empty_ack>
 8012f42:	4603      	mov	r3, r0
 8012f44:	e1b1      	b.n	80132aa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012f46:	6879      	ldr	r1, [r7, #4]
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	3304      	adds	r3, #4
 8012f4c:	461a      	mov	r2, r3
 8012f4e:	6878      	ldr	r0, [r7, #4]
 8012f50:	f7ff f824 	bl	8011f9c <tcp_route>
 8012f54:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012f56:	697b      	ldr	r3, [r7, #20]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d102      	bne.n	8012f62 <tcp_output+0x96>
    return ERR_RTE;
 8012f5c:	f06f 0303 	mvn.w	r3, #3
 8012f60:	e1a3      	b.n	80132aa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d003      	beq.n	8012f70 <tcp_output+0xa4>
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d111      	bne.n	8012f94 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012f70:	697b      	ldr	r3, [r7, #20]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d002      	beq.n	8012f7c <tcp_output+0xb0>
 8012f76:	697b      	ldr	r3, [r7, #20]
 8012f78:	3304      	adds	r3, #4
 8012f7a:	e000      	b.n	8012f7e <tcp_output+0xb2>
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012f80:	693b      	ldr	r3, [r7, #16]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d102      	bne.n	8012f8c <tcp_output+0xc0>
      return ERR_RTE;
 8012f86:	f06f 0303 	mvn.w	r3, #3
 8012f8a:	e18e      	b.n	80132aa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012f8c:	693b      	ldr	r3, [r7, #16]
 8012f8e:	681a      	ldr	r2, [r3, #0]
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f96:	68db      	ldr	r3, [r3, #12]
 8012f98:	685b      	ldr	r3, [r3, #4]
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f7f9 f977 	bl	800c28e <lwip_htonl>
 8012fa0:	4602      	mov	r2, r0
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012fa6:	1ad3      	subs	r3, r2, r3
 8012fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012faa:	8912      	ldrh	r2, [r2, #8]
 8012fac:	4413      	add	r3, r2
 8012fae:	69ba      	ldr	r2, [r7, #24]
 8012fb0:	429a      	cmp	r2, r3
 8012fb2:	d227      	bcs.n	8013004 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012fba:	461a      	mov	r2, r3
 8012fbc:	69bb      	ldr	r3, [r7, #24]
 8012fbe:	4293      	cmp	r3, r2
 8012fc0:	d114      	bne.n	8012fec <tcp_output+0x120>
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d110      	bne.n	8012fec <tcp_output+0x120>
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d10b      	bne.n	8012fec <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	2201      	movs	r2, #1
 8012fe0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	8b5b      	ldrh	r3, [r3, #26]
 8012ff0:	f003 0302 	and.w	r3, r3, #2
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	f000 814d 	beq.w	8013294 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012ffa:	6878      	ldr	r0, [r7, #4]
 8012ffc:	f000 fd6c 	bl	8013ad8 <tcp_send_empty_ack>
 8013000:	4603      	mov	r3, r0
 8013002:	e152      	b.n	80132aa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	2200      	movs	r2, #0
 8013008:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013010:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013012:	6a3b      	ldr	r3, [r7, #32]
 8013014:	2b00      	cmp	r3, #0
 8013016:	f000 811c 	beq.w	8013252 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801301a:	e002      	b.n	8013022 <tcp_output+0x156>
 801301c:	6a3b      	ldr	r3, [r7, #32]
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	623b      	str	r3, [r7, #32]
 8013022:	6a3b      	ldr	r3, [r7, #32]
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d1f8      	bne.n	801301c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801302a:	e112      	b.n	8013252 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801302e:	68db      	ldr	r3, [r3, #12]
 8013030:	899b      	ldrh	r3, [r3, #12]
 8013032:	b29b      	uxth	r3, r3
 8013034:	4618      	mov	r0, r3
 8013036:	f7f9 f915 	bl	800c264 <lwip_htons>
 801303a:	4603      	mov	r3, r0
 801303c:	b2db      	uxtb	r3, r3
 801303e:	f003 0304 	and.w	r3, r3, #4
 8013042:	2b00      	cmp	r3, #0
 8013044:	d006      	beq.n	8013054 <tcp_output+0x188>
 8013046:	4b43      	ldr	r3, [pc, #268]	; (8013154 <tcp_output+0x288>)
 8013048:	f240 5236 	movw	r2, #1334	; 0x536
 801304c:	4946      	ldr	r1, [pc, #280]	; (8013168 <tcp_output+0x29c>)
 801304e:	4843      	ldr	r0, [pc, #268]	; (801315c <tcp_output+0x290>)
 8013050:	f004 fba8 	bl	80177a4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013058:	2b00      	cmp	r3, #0
 801305a:	d01f      	beq.n	801309c <tcp_output+0x1d0>
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	8b5b      	ldrh	r3, [r3, #26]
 8013060:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013064:	2b00      	cmp	r3, #0
 8013066:	d119      	bne.n	801309c <tcp_output+0x1d0>
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801306c:	2b00      	cmp	r3, #0
 801306e:	d00b      	beq.n	8013088 <tcp_output+0x1bc>
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d110      	bne.n	801309c <tcp_output+0x1d0>
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801307e:	891a      	ldrh	r2, [r3, #8]
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013084:	429a      	cmp	r2, r3
 8013086:	d209      	bcs.n	801309c <tcp_output+0x1d0>
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801308e:	2b00      	cmp	r3, #0
 8013090:	d004      	beq.n	801309c <tcp_output+0x1d0>
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013098:	2b08      	cmp	r3, #8
 801309a:	d901      	bls.n	80130a0 <tcp_output+0x1d4>
 801309c:	2301      	movs	r3, #1
 801309e:	e000      	b.n	80130a2 <tcp_output+0x1d6>
 80130a0:	2300      	movs	r3, #0
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d106      	bne.n	80130b4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	8b5b      	ldrh	r3, [r3, #26]
 80130aa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	f000 80e4 	beq.w	801327c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	7d1b      	ldrb	r3, [r3, #20]
 80130b8:	2b02      	cmp	r3, #2
 80130ba:	d00d      	beq.n	80130d8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80130bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130be:	68db      	ldr	r3, [r3, #12]
 80130c0:	899b      	ldrh	r3, [r3, #12]
 80130c2:	b29c      	uxth	r4, r3
 80130c4:	2010      	movs	r0, #16
 80130c6:	f7f9 f8cd 	bl	800c264 <lwip_htons>
 80130ca:	4603      	mov	r3, r0
 80130cc:	461a      	mov	r2, r3
 80130ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d0:	68db      	ldr	r3, [r3, #12]
 80130d2:	4322      	orrs	r2, r4
 80130d4:	b292      	uxth	r2, r2
 80130d6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80130d8:	697a      	ldr	r2, [r7, #20]
 80130da:	6879      	ldr	r1, [r7, #4]
 80130dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80130de:	f000 f909 	bl	80132f4 <tcp_output_segment>
 80130e2:	4603      	mov	r3, r0
 80130e4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80130e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d009      	beq.n	8013102 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	8b5b      	ldrh	r3, [r3, #26]
 80130f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130f6:	b29a      	uxth	r2, r3
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	835a      	strh	r2, [r3, #26]
      return err;
 80130fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013100:	e0d3      	b.n	80132aa <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013104:	681a      	ldr	r2, [r3, #0]
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	7d1b      	ldrb	r3, [r3, #20]
 801310e:	2b02      	cmp	r3, #2
 8013110:	d006      	beq.n	8013120 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	8b5b      	ldrh	r3, [r3, #26]
 8013116:	f023 0303 	bic.w	r3, r3, #3
 801311a:	b29a      	uxth	r2, r3
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013122:	68db      	ldr	r3, [r3, #12]
 8013124:	685b      	ldr	r3, [r3, #4]
 8013126:	4618      	mov	r0, r3
 8013128:	f7f9 f8b1 	bl	800c28e <lwip_htonl>
 801312c:	4604      	mov	r4, r0
 801312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013130:	891b      	ldrh	r3, [r3, #8]
 8013132:	461d      	mov	r5, r3
 8013134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013136:	68db      	ldr	r3, [r3, #12]
 8013138:	899b      	ldrh	r3, [r3, #12]
 801313a:	b29b      	uxth	r3, r3
 801313c:	4618      	mov	r0, r3
 801313e:	f7f9 f891 	bl	800c264 <lwip_htons>
 8013142:	4603      	mov	r3, r0
 8013144:	b2db      	uxtb	r3, r3
 8013146:	f003 0303 	and.w	r3, r3, #3
 801314a:	2b00      	cmp	r3, #0
 801314c:	d00e      	beq.n	801316c <tcp_output+0x2a0>
 801314e:	2301      	movs	r3, #1
 8013150:	e00d      	b.n	801316e <tcp_output+0x2a2>
 8013152:	bf00      	nop
 8013154:	0801a814 	.word	0x0801a814
 8013158:	0801ad58 	.word	0x0801ad58
 801315c:	0801a868 	.word	0x0801a868
 8013160:	0801ad70 	.word	0x0801ad70
 8013164:	2000d6a4 	.word	0x2000d6a4
 8013168:	0801ad98 	.word	0x0801ad98
 801316c:	2300      	movs	r3, #0
 801316e:	442b      	add	r3, r5
 8013170:	4423      	add	r3, r4
 8013172:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013178:	68bb      	ldr	r3, [r7, #8]
 801317a:	1ad3      	subs	r3, r2, r3
 801317c:	2b00      	cmp	r3, #0
 801317e:	da02      	bge.n	8013186 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	68ba      	ldr	r2, [r7, #8]
 8013184:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013188:	891b      	ldrh	r3, [r3, #8]
 801318a:	461c      	mov	r4, r3
 801318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801318e:	68db      	ldr	r3, [r3, #12]
 8013190:	899b      	ldrh	r3, [r3, #12]
 8013192:	b29b      	uxth	r3, r3
 8013194:	4618      	mov	r0, r3
 8013196:	f7f9 f865 	bl	800c264 <lwip_htons>
 801319a:	4603      	mov	r3, r0
 801319c:	b2db      	uxtb	r3, r3
 801319e:	f003 0303 	and.w	r3, r3, #3
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d001      	beq.n	80131aa <tcp_output+0x2de>
 80131a6:	2301      	movs	r3, #1
 80131a8:	e000      	b.n	80131ac <tcp_output+0x2e0>
 80131aa:	2300      	movs	r3, #0
 80131ac:	4423      	add	r3, r4
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d049      	beq.n	8013246 <tcp_output+0x37a>
      seg->next = NULL;
 80131b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131b4:	2200      	movs	r2, #0
 80131b6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d105      	bne.n	80131cc <tcp_output+0x300>
        pcb->unacked = seg;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131c4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80131c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131c8:	623b      	str	r3, [r7, #32]
 80131ca:	e03f      	b.n	801324c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80131cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ce:	68db      	ldr	r3, [r3, #12]
 80131d0:	685b      	ldr	r3, [r3, #4]
 80131d2:	4618      	mov	r0, r3
 80131d4:	f7f9 f85b 	bl	800c28e <lwip_htonl>
 80131d8:	4604      	mov	r4, r0
 80131da:	6a3b      	ldr	r3, [r7, #32]
 80131dc:	68db      	ldr	r3, [r3, #12]
 80131de:	685b      	ldr	r3, [r3, #4]
 80131e0:	4618      	mov	r0, r3
 80131e2:	f7f9 f854 	bl	800c28e <lwip_htonl>
 80131e6:	4603      	mov	r3, r0
 80131e8:	1ae3      	subs	r3, r4, r3
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	da24      	bge.n	8013238 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	3370      	adds	r3, #112	; 0x70
 80131f2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80131f4:	e002      	b.n	80131fc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80131f6:	69fb      	ldr	r3, [r7, #28]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80131fc:	69fb      	ldr	r3, [r7, #28]
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d011      	beq.n	8013228 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013204:	69fb      	ldr	r3, [r7, #28]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	68db      	ldr	r3, [r3, #12]
 801320a:	685b      	ldr	r3, [r3, #4]
 801320c:	4618      	mov	r0, r3
 801320e:	f7f9 f83e 	bl	800c28e <lwip_htonl>
 8013212:	4604      	mov	r4, r0
 8013214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013216:	68db      	ldr	r3, [r3, #12]
 8013218:	685b      	ldr	r3, [r3, #4]
 801321a:	4618      	mov	r0, r3
 801321c:	f7f9 f837 	bl	800c28e <lwip_htonl>
 8013220:	4603      	mov	r3, r0
 8013222:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013224:	2b00      	cmp	r3, #0
 8013226:	dbe6      	blt.n	80131f6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013228:	69fb      	ldr	r3, [r7, #28]
 801322a:	681a      	ldr	r2, [r3, #0]
 801322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801322e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013230:	69fb      	ldr	r3, [r7, #28]
 8013232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013234:	601a      	str	r2, [r3, #0]
 8013236:	e009      	b.n	801324c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013238:	6a3b      	ldr	r3, [r7, #32]
 801323a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801323c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801323e:	6a3b      	ldr	r3, [r7, #32]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	623b      	str	r3, [r7, #32]
 8013244:	e002      	b.n	801324c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013246:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013248:	f7fb ff1d 	bl	800f086 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013250:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013254:	2b00      	cmp	r3, #0
 8013256:	d012      	beq.n	801327e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801325a:	68db      	ldr	r3, [r3, #12]
 801325c:	685b      	ldr	r3, [r3, #4]
 801325e:	4618      	mov	r0, r3
 8013260:	f7f9 f815 	bl	800c28e <lwip_htonl>
 8013264:	4602      	mov	r2, r0
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801326a:	1ad3      	subs	r3, r2, r3
 801326c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801326e:	8912      	ldrh	r2, [r2, #8]
 8013270:	4413      	add	r3, r2
  while (seg != NULL &&
 8013272:	69ba      	ldr	r2, [r7, #24]
 8013274:	429a      	cmp	r2, r3
 8013276:	f4bf aed9 	bcs.w	801302c <tcp_output+0x160>
 801327a:	e000      	b.n	801327e <tcp_output+0x3b2>
      break;
 801327c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013282:	2b00      	cmp	r3, #0
 8013284:	d108      	bne.n	8013298 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	2200      	movs	r2, #0
 801328a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801328e:	e004      	b.n	801329a <tcp_output+0x3ce>
    goto output_done;
 8013290:	bf00      	nop
 8013292:	e002      	b.n	801329a <tcp_output+0x3ce>
    goto output_done;
 8013294:	bf00      	nop
 8013296:	e000      	b.n	801329a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013298:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	8b5b      	ldrh	r3, [r3, #26]
 801329e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80132a2:	b29a      	uxth	r2, r3
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80132a8:	2300      	movs	r3, #0
}
 80132aa:	4618      	mov	r0, r3
 80132ac:	3728      	adds	r7, #40	; 0x28
 80132ae:	46bd      	mov	sp, r7
 80132b0:	bdb0      	pop	{r4, r5, r7, pc}
 80132b2:	bf00      	nop

080132b4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	b082      	sub	sp, #8
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d106      	bne.n	80132d0 <tcp_output_segment_busy+0x1c>
 80132c2:	4b09      	ldr	r3, [pc, #36]	; (80132e8 <tcp_output_segment_busy+0x34>)
 80132c4:	f240 529a 	movw	r2, #1434	; 0x59a
 80132c8:	4908      	ldr	r1, [pc, #32]	; (80132ec <tcp_output_segment_busy+0x38>)
 80132ca:	4809      	ldr	r0, [pc, #36]	; (80132f0 <tcp_output_segment_busy+0x3c>)
 80132cc:	f004 fa6a 	bl	80177a4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	685b      	ldr	r3, [r3, #4]
 80132d4:	7b9b      	ldrb	r3, [r3, #14]
 80132d6:	2b01      	cmp	r3, #1
 80132d8:	d001      	beq.n	80132de <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80132da:	2301      	movs	r3, #1
 80132dc:	e000      	b.n	80132e0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80132de:	2300      	movs	r3, #0
}
 80132e0:	4618      	mov	r0, r3
 80132e2:	3708      	adds	r7, #8
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd80      	pop	{r7, pc}
 80132e8:	0801a814 	.word	0x0801a814
 80132ec:	0801adb0 	.word	0x0801adb0
 80132f0:	0801a868 	.word	0x0801a868

080132f4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80132f4:	b5b0      	push	{r4, r5, r7, lr}
 80132f6:	b08c      	sub	sp, #48	; 0x30
 80132f8:	af04      	add	r7, sp, #16
 80132fa:	60f8      	str	r0, [r7, #12]
 80132fc:	60b9      	str	r1, [r7, #8]
 80132fe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d106      	bne.n	8013314 <tcp_output_segment+0x20>
 8013306:	4b63      	ldr	r3, [pc, #396]	; (8013494 <tcp_output_segment+0x1a0>)
 8013308:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801330c:	4962      	ldr	r1, [pc, #392]	; (8013498 <tcp_output_segment+0x1a4>)
 801330e:	4863      	ldr	r0, [pc, #396]	; (801349c <tcp_output_segment+0x1a8>)
 8013310:	f004 fa48 	bl	80177a4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013314:	68bb      	ldr	r3, [r7, #8]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d106      	bne.n	8013328 <tcp_output_segment+0x34>
 801331a:	4b5e      	ldr	r3, [pc, #376]	; (8013494 <tcp_output_segment+0x1a0>)
 801331c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013320:	495f      	ldr	r1, [pc, #380]	; (80134a0 <tcp_output_segment+0x1ac>)
 8013322:	485e      	ldr	r0, [pc, #376]	; (801349c <tcp_output_segment+0x1a8>)
 8013324:	f004 fa3e 	bl	80177a4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d106      	bne.n	801333c <tcp_output_segment+0x48>
 801332e:	4b59      	ldr	r3, [pc, #356]	; (8013494 <tcp_output_segment+0x1a0>)
 8013330:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013334:	495b      	ldr	r1, [pc, #364]	; (80134a4 <tcp_output_segment+0x1b0>)
 8013336:	4859      	ldr	r0, [pc, #356]	; (801349c <tcp_output_segment+0x1a8>)
 8013338:	f004 fa34 	bl	80177a4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801333c:	68f8      	ldr	r0, [r7, #12]
 801333e:	f7ff ffb9 	bl	80132b4 <tcp_output_segment_busy>
 8013342:	4603      	mov	r3, r0
 8013344:	2b00      	cmp	r3, #0
 8013346:	d001      	beq.n	801334c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013348:	2300      	movs	r3, #0
 801334a:	e09f      	b.n	801348c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801334c:	68bb      	ldr	r3, [r7, #8]
 801334e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	68dc      	ldr	r4, [r3, #12]
 8013354:	4610      	mov	r0, r2
 8013356:	f7f8 ff9a 	bl	800c28e <lwip_htonl>
 801335a:	4603      	mov	r3, r0
 801335c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801335e:	68bb      	ldr	r3, [r7, #8]
 8013360:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	68dc      	ldr	r4, [r3, #12]
 8013366:	4610      	mov	r0, r2
 8013368:	f7f8 ff7c 	bl	800c264 <lwip_htons>
 801336c:	4603      	mov	r3, r0
 801336e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013370:	68bb      	ldr	r3, [r7, #8]
 8013372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013374:	68ba      	ldr	r2, [r7, #8]
 8013376:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013378:	441a      	add	r2, r3
 801337a:	68bb      	ldr	r3, [r7, #8]
 801337c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	68db      	ldr	r3, [r3, #12]
 8013382:	3314      	adds	r3, #20
 8013384:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	7a9b      	ldrb	r3, [r3, #10]
 801338a:	f003 0301 	and.w	r3, r3, #1
 801338e:	2b00      	cmp	r3, #0
 8013390:	d015      	beq.n	80133be <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013392:	68bb      	ldr	r3, [r7, #8]
 8013394:	3304      	adds	r3, #4
 8013396:	461a      	mov	r2, r3
 8013398:	6879      	ldr	r1, [r7, #4]
 801339a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801339e:	f7fc fa37 	bl	800f810 <tcp_eff_send_mss_netif>
 80133a2:	4603      	mov	r3, r0
 80133a4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80133a6:	8b7b      	ldrh	r3, [r7, #26]
 80133a8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80133ac:	4618      	mov	r0, r3
 80133ae:	f7f8 ff6e 	bl	800c28e <lwip_htonl>
 80133b2:	4602      	mov	r2, r0
 80133b4:	69fb      	ldr	r3, [r7, #28]
 80133b6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80133b8:	69fb      	ldr	r3, [r7, #28]
 80133ba:	3304      	adds	r3, #4
 80133bc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80133be:	68bb      	ldr	r3, [r7, #8]
 80133c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	da02      	bge.n	80133ce <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80133c8:	68bb      	ldr	r3, [r7, #8]
 80133ca:	2200      	movs	r2, #0
 80133cc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80133ce:	68bb      	ldr	r3, [r7, #8]
 80133d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d10c      	bne.n	80133f0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80133d6:	4b34      	ldr	r3, [pc, #208]	; (80134a8 <tcp_output_segment+0x1b4>)
 80133d8:	681a      	ldr	r2, [r3, #0]
 80133da:	68bb      	ldr	r3, [r7, #8]
 80133dc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	68db      	ldr	r3, [r3, #12]
 80133e2:	685b      	ldr	r3, [r3, #4]
 80133e4:	4618      	mov	r0, r3
 80133e6:	f7f8 ff52 	bl	800c28e <lwip_htonl>
 80133ea:	4602      	mov	r2, r0
 80133ec:	68bb      	ldr	r3, [r7, #8]
 80133ee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	68da      	ldr	r2, [r3, #12]
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	685b      	ldr	r3, [r3, #4]
 80133f8:	685b      	ldr	r3, [r3, #4]
 80133fa:	1ad3      	subs	r3, r2, r3
 80133fc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	685b      	ldr	r3, [r3, #4]
 8013402:	8959      	ldrh	r1, [r3, #10]
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	685b      	ldr	r3, [r3, #4]
 8013408:	8b3a      	ldrh	r2, [r7, #24]
 801340a:	1a8a      	subs	r2, r1, r2
 801340c:	b292      	uxth	r2, r2
 801340e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	685b      	ldr	r3, [r3, #4]
 8013414:	8919      	ldrh	r1, [r3, #8]
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	685b      	ldr	r3, [r3, #4]
 801341a:	8b3a      	ldrh	r2, [r7, #24]
 801341c:	1a8a      	subs	r2, r1, r2
 801341e:	b292      	uxth	r2, r2
 8013420:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	685b      	ldr	r3, [r3, #4]
 8013426:	68fa      	ldr	r2, [r7, #12]
 8013428:	68d2      	ldr	r2, [r2, #12]
 801342a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	68db      	ldr	r3, [r3, #12]
 8013430:	2200      	movs	r2, #0
 8013432:	741a      	strb	r2, [r3, #16]
 8013434:	2200      	movs	r2, #0
 8013436:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	68db      	ldr	r3, [r3, #12]
 801343c:	f103 0214 	add.w	r2, r3, #20
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	7a9b      	ldrb	r3, [r3, #10]
 8013444:	009b      	lsls	r3, r3, #2
 8013446:	f003 0304 	and.w	r3, r3, #4
 801344a:	4413      	add	r3, r2
 801344c:	69fa      	ldr	r2, [r7, #28]
 801344e:	429a      	cmp	r2, r3
 8013450:	d006      	beq.n	8013460 <tcp_output_segment+0x16c>
 8013452:	4b10      	ldr	r3, [pc, #64]	; (8013494 <tcp_output_segment+0x1a0>)
 8013454:	f240 621c 	movw	r2, #1564	; 0x61c
 8013458:	4914      	ldr	r1, [pc, #80]	; (80134ac <tcp_output_segment+0x1b8>)
 801345a:	4810      	ldr	r0, [pc, #64]	; (801349c <tcp_output_segment+0x1a8>)
 801345c:	f004 f9a2 	bl	80177a4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	6858      	ldr	r0, [r3, #4]
 8013464:	68b9      	ldr	r1, [r7, #8]
 8013466:	68bb      	ldr	r3, [r7, #8]
 8013468:	1d1c      	adds	r4, r3, #4
 801346a:	68bb      	ldr	r3, [r7, #8]
 801346c:	7add      	ldrb	r5, [r3, #11]
 801346e:	68bb      	ldr	r3, [r7, #8]
 8013470:	7a9b      	ldrb	r3, [r3, #10]
 8013472:	687a      	ldr	r2, [r7, #4]
 8013474:	9202      	str	r2, [sp, #8]
 8013476:	2206      	movs	r2, #6
 8013478:	9201      	str	r2, [sp, #4]
 801347a:	9300      	str	r3, [sp, #0]
 801347c:	462b      	mov	r3, r5
 801347e:	4622      	mov	r2, r4
 8013480:	f002 fd96 	bl	8015fb0 <ip4_output_if>
 8013484:	4603      	mov	r3, r0
 8013486:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013488:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801348c:	4618      	mov	r0, r3
 801348e:	3720      	adds	r7, #32
 8013490:	46bd      	mov	sp, r7
 8013492:	bdb0      	pop	{r4, r5, r7, pc}
 8013494:	0801a814 	.word	0x0801a814
 8013498:	0801add8 	.word	0x0801add8
 801349c:	0801a868 	.word	0x0801a868
 80134a0:	0801adf8 	.word	0x0801adf8
 80134a4:	0801ae18 	.word	0x0801ae18
 80134a8:	2000d694 	.word	0x2000d694
 80134ac:	0801ae3c 	.word	0x0801ae3c

080134b0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80134b0:	b5b0      	push	{r4, r5, r7, lr}
 80134b2:	b084      	sub	sp, #16
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d106      	bne.n	80134cc <tcp_rexmit_rto_prepare+0x1c>
 80134be:	4b31      	ldr	r3, [pc, #196]	; (8013584 <tcp_rexmit_rto_prepare+0xd4>)
 80134c0:	f240 6263 	movw	r2, #1635	; 0x663
 80134c4:	4930      	ldr	r1, [pc, #192]	; (8013588 <tcp_rexmit_rto_prepare+0xd8>)
 80134c6:	4831      	ldr	r0, [pc, #196]	; (801358c <tcp_rexmit_rto_prepare+0xdc>)
 80134c8:	f004 f96c 	bl	80177a4 <iprintf>

  if (pcb->unacked == NULL) {
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d102      	bne.n	80134da <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80134d4:	f06f 0305 	mvn.w	r3, #5
 80134d8:	e050      	b.n	801357c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134de:	60fb      	str	r3, [r7, #12]
 80134e0:	e00b      	b.n	80134fa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80134e2:	68f8      	ldr	r0, [r7, #12]
 80134e4:	f7ff fee6 	bl	80132b4 <tcp_output_segment_busy>
 80134e8:	4603      	mov	r3, r0
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d002      	beq.n	80134f4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80134ee:	f06f 0305 	mvn.w	r3, #5
 80134f2:	e043      	b.n	801357c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	60fb      	str	r3, [r7, #12]
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d1ef      	bne.n	80134e2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013502:	68f8      	ldr	r0, [r7, #12]
 8013504:	f7ff fed6 	bl	80132b4 <tcp_output_segment_busy>
 8013508:	4603      	mov	r3, r0
 801350a:	2b00      	cmp	r3, #0
 801350c:	d002      	beq.n	8013514 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801350e:	f06f 0305 	mvn.w	r3, #5
 8013512:	e033      	b.n	801357c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	2200      	movs	r2, #0
 8013528:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	8b5b      	ldrh	r3, [r3, #26]
 801352e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013532:	b29a      	uxth	r2, r3
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	68db      	ldr	r3, [r3, #12]
 801353c:	685b      	ldr	r3, [r3, #4]
 801353e:	4618      	mov	r0, r3
 8013540:	f7f8 fea5 	bl	800c28e <lwip_htonl>
 8013544:	4604      	mov	r4, r0
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	891b      	ldrh	r3, [r3, #8]
 801354a:	461d      	mov	r5, r3
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	68db      	ldr	r3, [r3, #12]
 8013550:	899b      	ldrh	r3, [r3, #12]
 8013552:	b29b      	uxth	r3, r3
 8013554:	4618      	mov	r0, r3
 8013556:	f7f8 fe85 	bl	800c264 <lwip_htons>
 801355a:	4603      	mov	r3, r0
 801355c:	b2db      	uxtb	r3, r3
 801355e:	f003 0303 	and.w	r3, r3, #3
 8013562:	2b00      	cmp	r3, #0
 8013564:	d001      	beq.n	801356a <tcp_rexmit_rto_prepare+0xba>
 8013566:	2301      	movs	r3, #1
 8013568:	e000      	b.n	801356c <tcp_rexmit_rto_prepare+0xbc>
 801356a:	2300      	movs	r3, #0
 801356c:	442b      	add	r3, r5
 801356e:	18e2      	adds	r2, r4, r3
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	2200      	movs	r2, #0
 8013578:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801357a:	2300      	movs	r3, #0
}
 801357c:	4618      	mov	r0, r3
 801357e:	3710      	adds	r7, #16
 8013580:	46bd      	mov	sp, r7
 8013582:	bdb0      	pop	{r4, r5, r7, pc}
 8013584:	0801a814 	.word	0x0801a814
 8013588:	0801ae50 	.word	0x0801ae50
 801358c:	0801a868 	.word	0x0801a868

08013590 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b082      	sub	sp, #8
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d106      	bne.n	80135ac <tcp_rexmit_rto_commit+0x1c>
 801359e:	4b0d      	ldr	r3, [pc, #52]	; (80135d4 <tcp_rexmit_rto_commit+0x44>)
 80135a0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80135a4:	490c      	ldr	r1, [pc, #48]	; (80135d8 <tcp_rexmit_rto_commit+0x48>)
 80135a6:	480d      	ldr	r0, [pc, #52]	; (80135dc <tcp_rexmit_rto_commit+0x4c>)
 80135a8:	f004 f8fc 	bl	80177a4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80135b2:	2bff      	cmp	r3, #255	; 0xff
 80135b4:	d007      	beq.n	80135c6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80135bc:	3301      	adds	r3, #1
 80135be:	b2da      	uxtb	r2, r3
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80135c6:	6878      	ldr	r0, [r7, #4]
 80135c8:	f7ff fc80 	bl	8012ecc <tcp_output>
}
 80135cc:	bf00      	nop
 80135ce:	3708      	adds	r7, #8
 80135d0:	46bd      	mov	sp, r7
 80135d2:	bd80      	pop	{r7, pc}
 80135d4:	0801a814 	.word	0x0801a814
 80135d8:	0801ae74 	.word	0x0801ae74
 80135dc:	0801a868 	.word	0x0801a868

080135e0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b082      	sub	sp, #8
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d106      	bne.n	80135fc <tcp_rexmit_rto+0x1c>
 80135ee:	4b0a      	ldr	r3, [pc, #40]	; (8013618 <tcp_rexmit_rto+0x38>)
 80135f0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80135f4:	4909      	ldr	r1, [pc, #36]	; (801361c <tcp_rexmit_rto+0x3c>)
 80135f6:	480a      	ldr	r0, [pc, #40]	; (8013620 <tcp_rexmit_rto+0x40>)
 80135f8:	f004 f8d4 	bl	80177a4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80135fc:	6878      	ldr	r0, [r7, #4]
 80135fe:	f7ff ff57 	bl	80134b0 <tcp_rexmit_rto_prepare>
 8013602:	4603      	mov	r3, r0
 8013604:	2b00      	cmp	r3, #0
 8013606:	d102      	bne.n	801360e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013608:	6878      	ldr	r0, [r7, #4]
 801360a:	f7ff ffc1 	bl	8013590 <tcp_rexmit_rto_commit>
  }
}
 801360e:	bf00      	nop
 8013610:	3708      	adds	r7, #8
 8013612:	46bd      	mov	sp, r7
 8013614:	bd80      	pop	{r7, pc}
 8013616:	bf00      	nop
 8013618:	0801a814 	.word	0x0801a814
 801361c:	0801ae98 	.word	0x0801ae98
 8013620:	0801a868 	.word	0x0801a868

08013624 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013624:	b590      	push	{r4, r7, lr}
 8013626:	b085      	sub	sp, #20
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d106      	bne.n	8013640 <tcp_rexmit+0x1c>
 8013632:	4b2f      	ldr	r3, [pc, #188]	; (80136f0 <tcp_rexmit+0xcc>)
 8013634:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013638:	492e      	ldr	r1, [pc, #184]	; (80136f4 <tcp_rexmit+0xd0>)
 801363a:	482f      	ldr	r0, [pc, #188]	; (80136f8 <tcp_rexmit+0xd4>)
 801363c:	f004 f8b2 	bl	80177a4 <iprintf>

  if (pcb->unacked == NULL) {
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013644:	2b00      	cmp	r3, #0
 8013646:	d102      	bne.n	801364e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013648:	f06f 0305 	mvn.w	r3, #5
 801364c:	e04c      	b.n	80136e8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013652:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013654:	68b8      	ldr	r0, [r7, #8]
 8013656:	f7ff fe2d 	bl	80132b4 <tcp_output_segment_busy>
 801365a:	4603      	mov	r3, r0
 801365c:	2b00      	cmp	r3, #0
 801365e:	d002      	beq.n	8013666 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013660:	f06f 0305 	mvn.w	r3, #5
 8013664:	e040      	b.n	80136e8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013666:	68bb      	ldr	r3, [r7, #8]
 8013668:	681a      	ldr	r2, [r3, #0]
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	336c      	adds	r3, #108	; 0x6c
 8013672:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013674:	e002      	b.n	801367c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d011      	beq.n	80136a8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	68db      	ldr	r3, [r3, #12]
 801368a:	685b      	ldr	r3, [r3, #4]
 801368c:	4618      	mov	r0, r3
 801368e:	f7f8 fdfe 	bl	800c28e <lwip_htonl>
 8013692:	4604      	mov	r4, r0
 8013694:	68bb      	ldr	r3, [r7, #8]
 8013696:	68db      	ldr	r3, [r3, #12]
 8013698:	685b      	ldr	r3, [r3, #4]
 801369a:	4618      	mov	r0, r3
 801369c:	f7f8 fdf7 	bl	800c28e <lwip_htonl>
 80136a0:	4603      	mov	r3, r0
 80136a2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	dbe6      	blt.n	8013676 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	681a      	ldr	r2, [r3, #0]
 80136ac:	68bb      	ldr	r3, [r7, #8]
 80136ae:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	68ba      	ldr	r2, [r7, #8]
 80136b4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80136b6:	68bb      	ldr	r3, [r7, #8]
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d103      	bne.n	80136c6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	2200      	movs	r2, #0
 80136c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80136cc:	2bff      	cmp	r3, #255	; 0xff
 80136ce:	d007      	beq.n	80136e0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80136d6:	3301      	adds	r3, #1
 80136d8:	b2da      	uxtb	r2, r3
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	2200      	movs	r2, #0
 80136e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80136e6:	2300      	movs	r3, #0
}
 80136e8:	4618      	mov	r0, r3
 80136ea:	3714      	adds	r7, #20
 80136ec:	46bd      	mov	sp, r7
 80136ee:	bd90      	pop	{r4, r7, pc}
 80136f0:	0801a814 	.word	0x0801a814
 80136f4:	0801aeb4 	.word	0x0801aeb4
 80136f8:	0801a868 	.word	0x0801a868

080136fc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b082      	sub	sp, #8
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d106      	bne.n	8013718 <tcp_rexmit_fast+0x1c>
 801370a:	4b2a      	ldr	r3, [pc, #168]	; (80137b4 <tcp_rexmit_fast+0xb8>)
 801370c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013710:	4929      	ldr	r1, [pc, #164]	; (80137b8 <tcp_rexmit_fast+0xbc>)
 8013712:	482a      	ldr	r0, [pc, #168]	; (80137bc <tcp_rexmit_fast+0xc0>)
 8013714:	f004 f846 	bl	80177a4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801371c:	2b00      	cmp	r3, #0
 801371e:	d044      	beq.n	80137aa <tcp_rexmit_fast+0xae>
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	8b5b      	ldrh	r3, [r3, #26]
 8013724:	f003 0304 	and.w	r3, r3, #4
 8013728:	2b00      	cmp	r3, #0
 801372a:	d13e      	bne.n	80137aa <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801372c:	6878      	ldr	r0, [r7, #4]
 801372e:	f7ff ff79 	bl	8013624 <tcp_rexmit>
 8013732:	4603      	mov	r3, r0
 8013734:	2b00      	cmp	r3, #0
 8013736:	d138      	bne.n	80137aa <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013744:	4293      	cmp	r3, r2
 8013746:	bf28      	it	cs
 8013748:	4613      	movcs	r3, r2
 801374a:	b29b      	uxth	r3, r3
 801374c:	0fda      	lsrs	r2, r3, #31
 801374e:	4413      	add	r3, r2
 8013750:	105b      	asrs	r3, r3, #1
 8013752:	b29a      	uxth	r2, r3
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013760:	461a      	mov	r2, r3
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013766:	005b      	lsls	r3, r3, #1
 8013768:	429a      	cmp	r2, r3
 801376a:	d206      	bcs.n	801377a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013770:	005b      	lsls	r3, r3, #1
 8013772:	b29a      	uxth	r2, r3
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013784:	4619      	mov	r1, r3
 8013786:	0049      	lsls	r1, r1, #1
 8013788:	440b      	add	r3, r1
 801378a:	b29b      	uxth	r3, r3
 801378c:	4413      	add	r3, r2
 801378e:	b29a      	uxth	r2, r3
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	8b5b      	ldrh	r3, [r3, #26]
 801379a:	f043 0304 	orr.w	r3, r3, #4
 801379e:	b29a      	uxth	r2, r3
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	2200      	movs	r2, #0
 80137a8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80137aa:	bf00      	nop
 80137ac:	3708      	adds	r7, #8
 80137ae:	46bd      	mov	sp, r7
 80137b0:	bd80      	pop	{r7, pc}
 80137b2:	bf00      	nop
 80137b4:	0801a814 	.word	0x0801a814
 80137b8:	0801aecc 	.word	0x0801aecc
 80137bc:	0801a868 	.word	0x0801a868

080137c0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b086      	sub	sp, #24
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	60f8      	str	r0, [r7, #12]
 80137c8:	607b      	str	r3, [r7, #4]
 80137ca:	460b      	mov	r3, r1
 80137cc:	817b      	strh	r3, [r7, #10]
 80137ce:	4613      	mov	r3, r2
 80137d0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80137d2:	897a      	ldrh	r2, [r7, #10]
 80137d4:	893b      	ldrh	r3, [r7, #8]
 80137d6:	4413      	add	r3, r2
 80137d8:	b29b      	uxth	r3, r3
 80137da:	3314      	adds	r3, #20
 80137dc:	b29b      	uxth	r3, r3
 80137de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80137e2:	4619      	mov	r1, r3
 80137e4:	2022      	movs	r0, #34	; 0x22
 80137e6:	f7f9 fda1 	bl	800d32c <pbuf_alloc>
 80137ea:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80137ec:	697b      	ldr	r3, [r7, #20]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d04d      	beq.n	801388e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80137f2:	897b      	ldrh	r3, [r7, #10]
 80137f4:	3313      	adds	r3, #19
 80137f6:	697a      	ldr	r2, [r7, #20]
 80137f8:	8952      	ldrh	r2, [r2, #10]
 80137fa:	4293      	cmp	r3, r2
 80137fc:	db06      	blt.n	801380c <tcp_output_alloc_header_common+0x4c>
 80137fe:	4b26      	ldr	r3, [pc, #152]	; (8013898 <tcp_output_alloc_header_common+0xd8>)
 8013800:	f240 7223 	movw	r2, #1827	; 0x723
 8013804:	4925      	ldr	r1, [pc, #148]	; (801389c <tcp_output_alloc_header_common+0xdc>)
 8013806:	4826      	ldr	r0, [pc, #152]	; (80138a0 <tcp_output_alloc_header_common+0xe0>)
 8013808:	f003 ffcc 	bl	80177a4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801380c:	697b      	ldr	r3, [r7, #20]
 801380e:	685b      	ldr	r3, [r3, #4]
 8013810:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013812:	8c3b      	ldrh	r3, [r7, #32]
 8013814:	4618      	mov	r0, r3
 8013816:	f7f8 fd25 	bl	800c264 <lwip_htons>
 801381a:	4603      	mov	r3, r0
 801381c:	461a      	mov	r2, r3
 801381e:	693b      	ldr	r3, [r7, #16]
 8013820:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013824:	4618      	mov	r0, r3
 8013826:	f7f8 fd1d 	bl	800c264 <lwip_htons>
 801382a:	4603      	mov	r3, r0
 801382c:	461a      	mov	r2, r3
 801382e:	693b      	ldr	r3, [r7, #16]
 8013830:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013832:	693b      	ldr	r3, [r7, #16]
 8013834:	687a      	ldr	r2, [r7, #4]
 8013836:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013838:	68f8      	ldr	r0, [r7, #12]
 801383a:	f7f8 fd28 	bl	800c28e <lwip_htonl>
 801383e:	4602      	mov	r2, r0
 8013840:	693b      	ldr	r3, [r7, #16]
 8013842:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013844:	897b      	ldrh	r3, [r7, #10]
 8013846:	089b      	lsrs	r3, r3, #2
 8013848:	b29b      	uxth	r3, r3
 801384a:	3305      	adds	r3, #5
 801384c:	b29b      	uxth	r3, r3
 801384e:	031b      	lsls	r3, r3, #12
 8013850:	b29a      	uxth	r2, r3
 8013852:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013856:	b29b      	uxth	r3, r3
 8013858:	4313      	orrs	r3, r2
 801385a:	b29b      	uxth	r3, r3
 801385c:	4618      	mov	r0, r3
 801385e:	f7f8 fd01 	bl	800c264 <lwip_htons>
 8013862:	4603      	mov	r3, r0
 8013864:	461a      	mov	r2, r3
 8013866:	693b      	ldr	r3, [r7, #16]
 8013868:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801386a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801386c:	4618      	mov	r0, r3
 801386e:	f7f8 fcf9 	bl	800c264 <lwip_htons>
 8013872:	4603      	mov	r3, r0
 8013874:	461a      	mov	r2, r3
 8013876:	693b      	ldr	r3, [r7, #16]
 8013878:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801387a:	693b      	ldr	r3, [r7, #16]
 801387c:	2200      	movs	r2, #0
 801387e:	741a      	strb	r2, [r3, #16]
 8013880:	2200      	movs	r2, #0
 8013882:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013884:	693b      	ldr	r3, [r7, #16]
 8013886:	2200      	movs	r2, #0
 8013888:	749a      	strb	r2, [r3, #18]
 801388a:	2200      	movs	r2, #0
 801388c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801388e:	697b      	ldr	r3, [r7, #20]
}
 8013890:	4618      	mov	r0, r3
 8013892:	3718      	adds	r7, #24
 8013894:	46bd      	mov	sp, r7
 8013896:	bd80      	pop	{r7, pc}
 8013898:	0801a814 	.word	0x0801a814
 801389c:	0801aeec 	.word	0x0801aeec
 80138a0:	0801a868 	.word	0x0801a868

080138a4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80138a4:	b5b0      	push	{r4, r5, r7, lr}
 80138a6:	b08a      	sub	sp, #40	; 0x28
 80138a8:	af04      	add	r7, sp, #16
 80138aa:	60f8      	str	r0, [r7, #12]
 80138ac:	607b      	str	r3, [r7, #4]
 80138ae:	460b      	mov	r3, r1
 80138b0:	817b      	strh	r3, [r7, #10]
 80138b2:	4613      	mov	r3, r2
 80138b4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d106      	bne.n	80138ca <tcp_output_alloc_header+0x26>
 80138bc:	4b15      	ldr	r3, [pc, #84]	; (8013914 <tcp_output_alloc_header+0x70>)
 80138be:	f240 7242 	movw	r2, #1858	; 0x742
 80138c2:	4915      	ldr	r1, [pc, #84]	; (8013918 <tcp_output_alloc_header+0x74>)
 80138c4:	4815      	ldr	r0, [pc, #84]	; (801391c <tcp_output_alloc_header+0x78>)
 80138c6:	f003 ff6d 	bl	80177a4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	8adb      	ldrh	r3, [r3, #22]
 80138d2:	68fa      	ldr	r2, [r7, #12]
 80138d4:	8b12      	ldrh	r2, [r2, #24]
 80138d6:	68f9      	ldr	r1, [r7, #12]
 80138d8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80138da:	893d      	ldrh	r5, [r7, #8]
 80138dc:	897c      	ldrh	r4, [r7, #10]
 80138de:	9103      	str	r1, [sp, #12]
 80138e0:	2110      	movs	r1, #16
 80138e2:	9102      	str	r1, [sp, #8]
 80138e4:	9201      	str	r2, [sp, #4]
 80138e6:	9300      	str	r3, [sp, #0]
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	462a      	mov	r2, r5
 80138ec:	4621      	mov	r1, r4
 80138ee:	f7ff ff67 	bl	80137c0 <tcp_output_alloc_header_common>
 80138f2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80138f4:	697b      	ldr	r3, [r7, #20]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d006      	beq.n	8013908 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138fe:	68fa      	ldr	r2, [r7, #12]
 8013900:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013902:	441a      	add	r2, r3
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013908:	697b      	ldr	r3, [r7, #20]
}
 801390a:	4618      	mov	r0, r3
 801390c:	3718      	adds	r7, #24
 801390e:	46bd      	mov	sp, r7
 8013910:	bdb0      	pop	{r4, r5, r7, pc}
 8013912:	bf00      	nop
 8013914:	0801a814 	.word	0x0801a814
 8013918:	0801af1c 	.word	0x0801af1c
 801391c:	0801a868 	.word	0x0801a868

08013920 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b088      	sub	sp, #32
 8013924:	af00      	add	r7, sp, #0
 8013926:	60f8      	str	r0, [r7, #12]
 8013928:	60b9      	str	r1, [r7, #8]
 801392a:	4611      	mov	r1, r2
 801392c:	461a      	mov	r2, r3
 801392e:	460b      	mov	r3, r1
 8013930:	71fb      	strb	r3, [r7, #7]
 8013932:	4613      	mov	r3, r2
 8013934:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013936:	2300      	movs	r3, #0
 8013938:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801393a:	68bb      	ldr	r3, [r7, #8]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d106      	bne.n	801394e <tcp_output_fill_options+0x2e>
 8013940:	4b13      	ldr	r3, [pc, #76]	; (8013990 <tcp_output_fill_options+0x70>)
 8013942:	f240 7256 	movw	r2, #1878	; 0x756
 8013946:	4913      	ldr	r1, [pc, #76]	; (8013994 <tcp_output_fill_options+0x74>)
 8013948:	4813      	ldr	r0, [pc, #76]	; (8013998 <tcp_output_fill_options+0x78>)
 801394a:	f003 ff2b 	bl	80177a4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801394e:	68bb      	ldr	r3, [r7, #8]
 8013950:	685b      	ldr	r3, [r3, #4]
 8013952:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013954:	69bb      	ldr	r3, [r7, #24]
 8013956:	3314      	adds	r3, #20
 8013958:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801395a:	69bb      	ldr	r3, [r7, #24]
 801395c:	f103 0214 	add.w	r2, r3, #20
 8013960:	8bfb      	ldrh	r3, [r7, #30]
 8013962:	009b      	lsls	r3, r3, #2
 8013964:	4619      	mov	r1, r3
 8013966:	79fb      	ldrb	r3, [r7, #7]
 8013968:	009b      	lsls	r3, r3, #2
 801396a:	f003 0304 	and.w	r3, r3, #4
 801396e:	440b      	add	r3, r1
 8013970:	4413      	add	r3, r2
 8013972:	697a      	ldr	r2, [r7, #20]
 8013974:	429a      	cmp	r2, r3
 8013976:	d006      	beq.n	8013986 <tcp_output_fill_options+0x66>
 8013978:	4b05      	ldr	r3, [pc, #20]	; (8013990 <tcp_output_fill_options+0x70>)
 801397a:	f240 7275 	movw	r2, #1909	; 0x775
 801397e:	4907      	ldr	r1, [pc, #28]	; (801399c <tcp_output_fill_options+0x7c>)
 8013980:	4805      	ldr	r0, [pc, #20]	; (8013998 <tcp_output_fill_options+0x78>)
 8013982:	f003 ff0f 	bl	80177a4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013986:	bf00      	nop
 8013988:	3720      	adds	r7, #32
 801398a:	46bd      	mov	sp, r7
 801398c:	bd80      	pop	{r7, pc}
 801398e:	bf00      	nop
 8013990:	0801a814 	.word	0x0801a814
 8013994:	0801af44 	.word	0x0801af44
 8013998:	0801a868 	.word	0x0801a868
 801399c:	0801ae3c 	.word	0x0801ae3c

080139a0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b08a      	sub	sp, #40	; 0x28
 80139a4:	af04      	add	r7, sp, #16
 80139a6:	60f8      	str	r0, [r7, #12]
 80139a8:	60b9      	str	r1, [r7, #8]
 80139aa:	607a      	str	r2, [r7, #4]
 80139ac:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80139ae:	68bb      	ldr	r3, [r7, #8]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d106      	bne.n	80139c2 <tcp_output_control_segment+0x22>
 80139b4:	4b1c      	ldr	r3, [pc, #112]	; (8013a28 <tcp_output_control_segment+0x88>)
 80139b6:	f240 7287 	movw	r2, #1927	; 0x787
 80139ba:	491c      	ldr	r1, [pc, #112]	; (8013a2c <tcp_output_control_segment+0x8c>)
 80139bc:	481c      	ldr	r0, [pc, #112]	; (8013a30 <tcp_output_control_segment+0x90>)
 80139be:	f003 fef1 	bl	80177a4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80139c2:	683a      	ldr	r2, [r7, #0]
 80139c4:	6879      	ldr	r1, [r7, #4]
 80139c6:	68f8      	ldr	r0, [r7, #12]
 80139c8:	f7fe fae8 	bl	8011f9c <tcp_route>
 80139cc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80139ce:	693b      	ldr	r3, [r7, #16]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d102      	bne.n	80139da <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80139d4:	23fc      	movs	r3, #252	; 0xfc
 80139d6:	75fb      	strb	r3, [r7, #23]
 80139d8:	e01c      	b.n	8013a14 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d006      	beq.n	80139ee <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	7adb      	ldrb	r3, [r3, #11]
 80139e4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	7a9b      	ldrb	r3, [r3, #10]
 80139ea:	757b      	strb	r3, [r7, #21]
 80139ec:	e003      	b.n	80139f6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80139ee:	23ff      	movs	r3, #255	; 0xff
 80139f0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80139f2:	2300      	movs	r3, #0
 80139f4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80139f6:	7dba      	ldrb	r2, [r7, #22]
 80139f8:	693b      	ldr	r3, [r7, #16]
 80139fa:	9302      	str	r3, [sp, #8]
 80139fc:	2306      	movs	r3, #6
 80139fe:	9301      	str	r3, [sp, #4]
 8013a00:	7d7b      	ldrb	r3, [r7, #21]
 8013a02:	9300      	str	r3, [sp, #0]
 8013a04:	4613      	mov	r3, r2
 8013a06:	683a      	ldr	r2, [r7, #0]
 8013a08:	6879      	ldr	r1, [r7, #4]
 8013a0a:	68b8      	ldr	r0, [r7, #8]
 8013a0c:	f002 fad0 	bl	8015fb0 <ip4_output_if>
 8013a10:	4603      	mov	r3, r0
 8013a12:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013a14:	68b8      	ldr	r0, [r7, #8]
 8013a16:	f7f9 ff6d 	bl	800d8f4 <pbuf_free>
  return err;
 8013a1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013a1e:	4618      	mov	r0, r3
 8013a20:	3718      	adds	r7, #24
 8013a22:	46bd      	mov	sp, r7
 8013a24:	bd80      	pop	{r7, pc}
 8013a26:	bf00      	nop
 8013a28:	0801a814 	.word	0x0801a814
 8013a2c:	0801af6c 	.word	0x0801af6c
 8013a30:	0801a868 	.word	0x0801a868

08013a34 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013a34:	b590      	push	{r4, r7, lr}
 8013a36:	b08b      	sub	sp, #44	; 0x2c
 8013a38:	af04      	add	r7, sp, #16
 8013a3a:	60f8      	str	r0, [r7, #12]
 8013a3c:	60b9      	str	r1, [r7, #8]
 8013a3e:	607a      	str	r2, [r7, #4]
 8013a40:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013a42:	683b      	ldr	r3, [r7, #0]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d106      	bne.n	8013a56 <tcp_rst+0x22>
 8013a48:	4b1f      	ldr	r3, [pc, #124]	; (8013ac8 <tcp_rst+0x94>)
 8013a4a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013a4e:	491f      	ldr	r1, [pc, #124]	; (8013acc <tcp_rst+0x98>)
 8013a50:	481f      	ldr	r0, [pc, #124]	; (8013ad0 <tcp_rst+0x9c>)
 8013a52:	f003 fea7 	bl	80177a4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d106      	bne.n	8013a6a <tcp_rst+0x36>
 8013a5c:	4b1a      	ldr	r3, [pc, #104]	; (8013ac8 <tcp_rst+0x94>)
 8013a5e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013a62:	491c      	ldr	r1, [pc, #112]	; (8013ad4 <tcp_rst+0xa0>)
 8013a64:	481a      	ldr	r0, [pc, #104]	; (8013ad0 <tcp_rst+0x9c>)
 8013a66:	f003 fe9d 	bl	80177a4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013a6e:	f246 0308 	movw	r3, #24584	; 0x6008
 8013a72:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013a74:	7dfb      	ldrb	r3, [r7, #23]
 8013a76:	b29c      	uxth	r4, r3
 8013a78:	68b8      	ldr	r0, [r7, #8]
 8013a7a:	f7f8 fc08 	bl	800c28e <lwip_htonl>
 8013a7e:	4602      	mov	r2, r0
 8013a80:	8abb      	ldrh	r3, [r7, #20]
 8013a82:	9303      	str	r3, [sp, #12]
 8013a84:	2314      	movs	r3, #20
 8013a86:	9302      	str	r3, [sp, #8]
 8013a88:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013a8a:	9301      	str	r3, [sp, #4]
 8013a8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013a8e:	9300      	str	r3, [sp, #0]
 8013a90:	4613      	mov	r3, r2
 8013a92:	2200      	movs	r2, #0
 8013a94:	4621      	mov	r1, r4
 8013a96:	6878      	ldr	r0, [r7, #4]
 8013a98:	f7ff fe92 	bl	80137c0 <tcp_output_alloc_header_common>
 8013a9c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013a9e:	693b      	ldr	r3, [r7, #16]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d00c      	beq.n	8013abe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013aa4:	7dfb      	ldrb	r3, [r7, #23]
 8013aa6:	2200      	movs	r2, #0
 8013aa8:	6939      	ldr	r1, [r7, #16]
 8013aaa:	68f8      	ldr	r0, [r7, #12]
 8013aac:	f7ff ff38 	bl	8013920 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab2:	683a      	ldr	r2, [r7, #0]
 8013ab4:	6939      	ldr	r1, [r7, #16]
 8013ab6:	68f8      	ldr	r0, [r7, #12]
 8013ab8:	f7ff ff72 	bl	80139a0 <tcp_output_control_segment>
 8013abc:	e000      	b.n	8013ac0 <tcp_rst+0x8c>
    return;
 8013abe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013ac0:	371c      	adds	r7, #28
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	bd90      	pop	{r4, r7, pc}
 8013ac6:	bf00      	nop
 8013ac8:	0801a814 	.word	0x0801a814
 8013acc:	0801af98 	.word	0x0801af98
 8013ad0:	0801a868 	.word	0x0801a868
 8013ad4:	0801afb4 	.word	0x0801afb4

08013ad8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013ad8:	b590      	push	{r4, r7, lr}
 8013ada:	b087      	sub	sp, #28
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d106      	bne.n	8013afc <tcp_send_empty_ack+0x24>
 8013aee:	4b28      	ldr	r3, [pc, #160]	; (8013b90 <tcp_send_empty_ack+0xb8>)
 8013af0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013af4:	4927      	ldr	r1, [pc, #156]	; (8013b94 <tcp_send_empty_ack+0xbc>)
 8013af6:	4828      	ldr	r0, [pc, #160]	; (8013b98 <tcp_send_empty_ack+0xc0>)
 8013af8:	f003 fe54 	bl	80177a4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013afc:	7dfb      	ldrb	r3, [r7, #23]
 8013afe:	009b      	lsls	r3, r3, #2
 8013b00:	b2db      	uxtb	r3, r3
 8013b02:	f003 0304 	and.w	r3, r3, #4
 8013b06:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013b08:	7d7b      	ldrb	r3, [r7, #21]
 8013b0a:	b29c      	uxth	r4, r3
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b10:	4618      	mov	r0, r3
 8013b12:	f7f8 fbbc 	bl	800c28e <lwip_htonl>
 8013b16:	4603      	mov	r3, r0
 8013b18:	2200      	movs	r2, #0
 8013b1a:	4621      	mov	r1, r4
 8013b1c:	6878      	ldr	r0, [r7, #4]
 8013b1e:	f7ff fec1 	bl	80138a4 <tcp_output_alloc_header>
 8013b22:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013b24:	693b      	ldr	r3, [r7, #16]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d109      	bne.n	8013b3e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	8b5b      	ldrh	r3, [r3, #26]
 8013b2e:	f043 0303 	orr.w	r3, r3, #3
 8013b32:	b29a      	uxth	r2, r3
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013b38:	f06f 0301 	mvn.w	r3, #1
 8013b3c:	e023      	b.n	8013b86 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013b3e:	7dbb      	ldrb	r3, [r7, #22]
 8013b40:	7dfa      	ldrb	r2, [r7, #23]
 8013b42:	6939      	ldr	r1, [r7, #16]
 8013b44:	6878      	ldr	r0, [r7, #4]
 8013b46:	f7ff feeb 	bl	8013920 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013b4a:	687a      	ldr	r2, [r7, #4]
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	3304      	adds	r3, #4
 8013b50:	6939      	ldr	r1, [r7, #16]
 8013b52:	6878      	ldr	r0, [r7, #4]
 8013b54:	f7ff ff24 	bl	80139a0 <tcp_output_control_segment>
 8013b58:	4603      	mov	r3, r0
 8013b5a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d007      	beq.n	8013b74 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	8b5b      	ldrh	r3, [r3, #26]
 8013b68:	f043 0303 	orr.w	r3, r3, #3
 8013b6c:	b29a      	uxth	r2, r3
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	835a      	strh	r2, [r3, #26]
 8013b72:	e006      	b.n	8013b82 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	8b5b      	ldrh	r3, [r3, #26]
 8013b78:	f023 0303 	bic.w	r3, r3, #3
 8013b7c:	b29a      	uxth	r2, r3
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013b86:	4618      	mov	r0, r3
 8013b88:	371c      	adds	r7, #28
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	bd90      	pop	{r4, r7, pc}
 8013b8e:	bf00      	nop
 8013b90:	0801a814 	.word	0x0801a814
 8013b94:	0801afd0 	.word	0x0801afd0
 8013b98:	0801a868 	.word	0x0801a868

08013b9c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013b9c:	b590      	push	{r4, r7, lr}
 8013b9e:	b087      	sub	sp, #28
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d106      	bne.n	8013bbc <tcp_keepalive+0x20>
 8013bae:	4b18      	ldr	r3, [pc, #96]	; (8013c10 <tcp_keepalive+0x74>)
 8013bb0:	f640 0224 	movw	r2, #2084	; 0x824
 8013bb4:	4917      	ldr	r1, [pc, #92]	; (8013c14 <tcp_keepalive+0x78>)
 8013bb6:	4818      	ldr	r0, [pc, #96]	; (8013c18 <tcp_keepalive+0x7c>)
 8013bb8:	f003 fdf4 	bl	80177a4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013bbc:	7dfb      	ldrb	r3, [r7, #23]
 8013bbe:	b29c      	uxth	r4, r3
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013bc4:	3b01      	subs	r3, #1
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	f7f8 fb61 	bl	800c28e <lwip_htonl>
 8013bcc:	4603      	mov	r3, r0
 8013bce:	2200      	movs	r2, #0
 8013bd0:	4621      	mov	r1, r4
 8013bd2:	6878      	ldr	r0, [r7, #4]
 8013bd4:	f7ff fe66 	bl	80138a4 <tcp_output_alloc_header>
 8013bd8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013bda:	693b      	ldr	r3, [r7, #16]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d102      	bne.n	8013be6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013be0:	f04f 33ff 	mov.w	r3, #4294967295
 8013be4:	e010      	b.n	8013c08 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013be6:	7dfb      	ldrb	r3, [r7, #23]
 8013be8:	2200      	movs	r2, #0
 8013bea:	6939      	ldr	r1, [r7, #16]
 8013bec:	6878      	ldr	r0, [r7, #4]
 8013bee:	f7ff fe97 	bl	8013920 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013bf2:	687a      	ldr	r2, [r7, #4]
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	3304      	adds	r3, #4
 8013bf8:	6939      	ldr	r1, [r7, #16]
 8013bfa:	6878      	ldr	r0, [r7, #4]
 8013bfc:	f7ff fed0 	bl	80139a0 <tcp_output_control_segment>
 8013c00:	4603      	mov	r3, r0
 8013c02:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013c08:	4618      	mov	r0, r3
 8013c0a:	371c      	adds	r7, #28
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	bd90      	pop	{r4, r7, pc}
 8013c10:	0801a814 	.word	0x0801a814
 8013c14:	0801aff0 	.word	0x0801aff0
 8013c18:	0801a868 	.word	0x0801a868

08013c1c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013c1c:	b590      	push	{r4, r7, lr}
 8013c1e:	b08b      	sub	sp, #44	; 0x2c
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013c24:	2300      	movs	r3, #0
 8013c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d106      	bne.n	8013c3e <tcp_zero_window_probe+0x22>
 8013c30:	4b4c      	ldr	r3, [pc, #304]	; (8013d64 <tcp_zero_window_probe+0x148>)
 8013c32:	f640 024f 	movw	r2, #2127	; 0x84f
 8013c36:	494c      	ldr	r1, [pc, #304]	; (8013d68 <tcp_zero_window_probe+0x14c>)
 8013c38:	484c      	ldr	r0, [pc, #304]	; (8013d6c <tcp_zero_window_probe+0x150>)
 8013c3a:	f003 fdb3 	bl	80177a4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c42:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013c44:	6a3b      	ldr	r3, [r7, #32]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d101      	bne.n	8013c4e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	e086      	b.n	8013d5c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013c54:	2bff      	cmp	r3, #255	; 0xff
 8013c56:	d007      	beq.n	8013c68 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013c5e:	3301      	adds	r3, #1
 8013c60:	b2da      	uxtb	r2, r3
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013c68:	6a3b      	ldr	r3, [r7, #32]
 8013c6a:	68db      	ldr	r3, [r3, #12]
 8013c6c:	899b      	ldrh	r3, [r3, #12]
 8013c6e:	b29b      	uxth	r3, r3
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7f8 faf7 	bl	800c264 <lwip_htons>
 8013c76:	4603      	mov	r3, r0
 8013c78:	b2db      	uxtb	r3, r3
 8013c7a:	f003 0301 	and.w	r3, r3, #1
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d005      	beq.n	8013c8e <tcp_zero_window_probe+0x72>
 8013c82:	6a3b      	ldr	r3, [r7, #32]
 8013c84:	891b      	ldrh	r3, [r3, #8]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d101      	bne.n	8013c8e <tcp_zero_window_probe+0x72>
 8013c8a:	2301      	movs	r3, #1
 8013c8c:	e000      	b.n	8013c90 <tcp_zero_window_probe+0x74>
 8013c8e:	2300      	movs	r3, #0
 8013c90:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013c92:	7ffb      	ldrb	r3, [r7, #31]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	bf0c      	ite	eq
 8013c98:	2301      	moveq	r3, #1
 8013c9a:	2300      	movne	r3, #0
 8013c9c:	b2db      	uxtb	r3, r3
 8013c9e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ca4:	b299      	uxth	r1, r3
 8013ca6:	6a3b      	ldr	r3, [r7, #32]
 8013ca8:	68db      	ldr	r3, [r3, #12]
 8013caa:	685b      	ldr	r3, [r3, #4]
 8013cac:	8bba      	ldrh	r2, [r7, #28]
 8013cae:	6878      	ldr	r0, [r7, #4]
 8013cb0:	f7ff fdf8 	bl	80138a4 <tcp_output_alloc_header>
 8013cb4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013cb6:	69bb      	ldr	r3, [r7, #24]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d102      	bne.n	8013cc2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8013cc0:	e04c      	b.n	8013d5c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013cc2:	69bb      	ldr	r3, [r7, #24]
 8013cc4:	685b      	ldr	r3, [r3, #4]
 8013cc6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013cc8:	7ffb      	ldrb	r3, [r7, #31]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d011      	beq.n	8013cf2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013cce:	697b      	ldr	r3, [r7, #20]
 8013cd0:	899b      	ldrh	r3, [r3, #12]
 8013cd2:	b29b      	uxth	r3, r3
 8013cd4:	b21b      	sxth	r3, r3
 8013cd6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013cda:	b21c      	sxth	r4, r3
 8013cdc:	2011      	movs	r0, #17
 8013cde:	f7f8 fac1 	bl	800c264 <lwip_htons>
 8013ce2:	4603      	mov	r3, r0
 8013ce4:	b21b      	sxth	r3, r3
 8013ce6:	4323      	orrs	r3, r4
 8013ce8:	b21b      	sxth	r3, r3
 8013cea:	b29a      	uxth	r2, r3
 8013cec:	697b      	ldr	r3, [r7, #20]
 8013cee:	819a      	strh	r2, [r3, #12]
 8013cf0:	e010      	b.n	8013d14 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013cf2:	69bb      	ldr	r3, [r7, #24]
 8013cf4:	685b      	ldr	r3, [r3, #4]
 8013cf6:	3314      	adds	r3, #20
 8013cf8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013cfa:	6a3b      	ldr	r3, [r7, #32]
 8013cfc:	6858      	ldr	r0, [r3, #4]
 8013cfe:	6a3b      	ldr	r3, [r7, #32]
 8013d00:	685b      	ldr	r3, [r3, #4]
 8013d02:	891a      	ldrh	r2, [r3, #8]
 8013d04:	6a3b      	ldr	r3, [r7, #32]
 8013d06:	891b      	ldrh	r3, [r3, #8]
 8013d08:	1ad3      	subs	r3, r2, r3
 8013d0a:	b29b      	uxth	r3, r3
 8013d0c:	2201      	movs	r2, #1
 8013d0e:	6939      	ldr	r1, [r7, #16]
 8013d10:	f7f9 fff6 	bl	800dd00 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013d14:	6a3b      	ldr	r3, [r7, #32]
 8013d16:	68db      	ldr	r3, [r3, #12]
 8013d18:	685b      	ldr	r3, [r3, #4]
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f7f8 fab7 	bl	800c28e <lwip_htonl>
 8013d20:	4603      	mov	r3, r0
 8013d22:	3301      	adds	r3, #1
 8013d24:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	1ad3      	subs	r3, r2, r3
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	da02      	bge.n	8013d38 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	68fa      	ldr	r2, [r7, #12]
 8013d36:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	69b9      	ldr	r1, [r7, #24]
 8013d40:	6878      	ldr	r0, [r7, #4]
 8013d42:	f7ff fded 	bl	8013920 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013d46:	687a      	ldr	r2, [r7, #4]
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	3304      	adds	r3, #4
 8013d4c:	69b9      	ldr	r1, [r7, #24]
 8013d4e:	6878      	ldr	r0, [r7, #4]
 8013d50:	f7ff fe26 	bl	80139a0 <tcp_output_control_segment>
 8013d54:	4603      	mov	r3, r0
 8013d56:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013d58:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	372c      	adds	r7, #44	; 0x2c
 8013d60:	46bd      	mov	sp, r7
 8013d62:	bd90      	pop	{r4, r7, pc}
 8013d64:	0801a814 	.word	0x0801a814
 8013d68:	0801b00c 	.word	0x0801b00c
 8013d6c:	0801a868 	.word	0x0801a868

08013d70 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b082      	sub	sp, #8
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013d78:	f7fa f8b0 	bl	800dedc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013d7c:	4b0a      	ldr	r3, [pc, #40]	; (8013da8 <tcpip_tcp_timer+0x38>)
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d103      	bne.n	8013d8c <tcpip_tcp_timer+0x1c>
 8013d84:	4b09      	ldr	r3, [pc, #36]	; (8013dac <tcpip_tcp_timer+0x3c>)
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d005      	beq.n	8013d98 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	4908      	ldr	r1, [pc, #32]	; (8013db0 <tcpip_tcp_timer+0x40>)
 8013d90:	20fa      	movs	r0, #250	; 0xfa
 8013d92:	f000 f8f3 	bl	8013f7c <sys_timeout>
 8013d96:	e003      	b.n	8013da0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013d98:	4b06      	ldr	r3, [pc, #24]	; (8013db4 <tcpip_tcp_timer+0x44>)
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	601a      	str	r2, [r3, #0]
  }
}
 8013d9e:	bf00      	nop
 8013da0:	bf00      	nop
 8013da2:	3708      	adds	r7, #8
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}
 8013da8:	2000d690 	.word	0x2000d690
 8013dac:	2000d6a0 	.word	0x2000d6a0
 8013db0:	08013d71 	.word	0x08013d71
 8013db4:	20006884 	.word	0x20006884

08013db8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013db8:	b580      	push	{r7, lr}
 8013dba:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013dbc:	4b0a      	ldr	r3, [pc, #40]	; (8013de8 <tcp_timer_needed+0x30>)
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d10f      	bne.n	8013de4 <tcp_timer_needed+0x2c>
 8013dc4:	4b09      	ldr	r3, [pc, #36]	; (8013dec <tcp_timer_needed+0x34>)
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d103      	bne.n	8013dd4 <tcp_timer_needed+0x1c>
 8013dcc:	4b08      	ldr	r3, [pc, #32]	; (8013df0 <tcp_timer_needed+0x38>)
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d007      	beq.n	8013de4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013dd4:	4b04      	ldr	r3, [pc, #16]	; (8013de8 <tcp_timer_needed+0x30>)
 8013dd6:	2201      	movs	r2, #1
 8013dd8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013dda:	2200      	movs	r2, #0
 8013ddc:	4905      	ldr	r1, [pc, #20]	; (8013df4 <tcp_timer_needed+0x3c>)
 8013dde:	20fa      	movs	r0, #250	; 0xfa
 8013de0:	f000 f8cc 	bl	8013f7c <sys_timeout>
  }
}
 8013de4:	bf00      	nop
 8013de6:	bd80      	pop	{r7, pc}
 8013de8:	20006884 	.word	0x20006884
 8013dec:	2000d690 	.word	0x2000d690
 8013df0:	2000d6a0 	.word	0x2000d6a0
 8013df4:	08013d71 	.word	0x08013d71

08013df8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b086      	sub	sp, #24
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	60f8      	str	r0, [r7, #12]
 8013e00:	60b9      	str	r1, [r7, #8]
 8013e02:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013e04:	200a      	movs	r0, #10
 8013e06:	f7f8 fee3 	bl	800cbd0 <memp_malloc>
 8013e0a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013e0c:	693b      	ldr	r3, [r7, #16]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d109      	bne.n	8013e26 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013e12:	693b      	ldr	r3, [r7, #16]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d151      	bne.n	8013ebc <sys_timeout_abs+0xc4>
 8013e18:	4b2a      	ldr	r3, [pc, #168]	; (8013ec4 <sys_timeout_abs+0xcc>)
 8013e1a:	22be      	movs	r2, #190	; 0xbe
 8013e1c:	492a      	ldr	r1, [pc, #168]	; (8013ec8 <sys_timeout_abs+0xd0>)
 8013e1e:	482b      	ldr	r0, [pc, #172]	; (8013ecc <sys_timeout_abs+0xd4>)
 8013e20:	f003 fcc0 	bl	80177a4 <iprintf>
    return;
 8013e24:	e04a      	b.n	8013ebc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013e26:	693b      	ldr	r3, [r7, #16]
 8013e28:	2200      	movs	r2, #0
 8013e2a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013e2c:	693b      	ldr	r3, [r7, #16]
 8013e2e:	68ba      	ldr	r2, [r7, #8]
 8013e30:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013e32:	693b      	ldr	r3, [r7, #16]
 8013e34:	687a      	ldr	r2, [r7, #4]
 8013e36:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013e38:	693b      	ldr	r3, [r7, #16]
 8013e3a:	68fa      	ldr	r2, [r7, #12]
 8013e3c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013e3e:	4b24      	ldr	r3, [pc, #144]	; (8013ed0 <sys_timeout_abs+0xd8>)
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d103      	bne.n	8013e4e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013e46:	4a22      	ldr	r2, [pc, #136]	; (8013ed0 <sys_timeout_abs+0xd8>)
 8013e48:	693b      	ldr	r3, [r7, #16]
 8013e4a:	6013      	str	r3, [r2, #0]
    return;
 8013e4c:	e037      	b.n	8013ebe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013e4e:	693b      	ldr	r3, [r7, #16]
 8013e50:	685a      	ldr	r2, [r3, #4]
 8013e52:	4b1f      	ldr	r3, [pc, #124]	; (8013ed0 <sys_timeout_abs+0xd8>)
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	685b      	ldr	r3, [r3, #4]
 8013e58:	1ad3      	subs	r3, r2, r3
 8013e5a:	0fdb      	lsrs	r3, r3, #31
 8013e5c:	f003 0301 	and.w	r3, r3, #1
 8013e60:	b2db      	uxtb	r3, r3
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d007      	beq.n	8013e76 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013e66:	4b1a      	ldr	r3, [pc, #104]	; (8013ed0 <sys_timeout_abs+0xd8>)
 8013e68:	681a      	ldr	r2, [r3, #0]
 8013e6a:	693b      	ldr	r3, [r7, #16]
 8013e6c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013e6e:	4a18      	ldr	r2, [pc, #96]	; (8013ed0 <sys_timeout_abs+0xd8>)
 8013e70:	693b      	ldr	r3, [r7, #16]
 8013e72:	6013      	str	r3, [r2, #0]
 8013e74:	e023      	b.n	8013ebe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013e76:	4b16      	ldr	r3, [pc, #88]	; (8013ed0 <sys_timeout_abs+0xd8>)
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	617b      	str	r3, [r7, #20]
 8013e7c:	e01a      	b.n	8013eb4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013e7e:	697b      	ldr	r3, [r7, #20]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d00b      	beq.n	8013e9e <sys_timeout_abs+0xa6>
 8013e86:	693b      	ldr	r3, [r7, #16]
 8013e88:	685a      	ldr	r2, [r3, #4]
 8013e8a:	697b      	ldr	r3, [r7, #20]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	685b      	ldr	r3, [r3, #4]
 8013e90:	1ad3      	subs	r3, r2, r3
 8013e92:	0fdb      	lsrs	r3, r3, #31
 8013e94:	f003 0301 	and.w	r3, r3, #1
 8013e98:	b2db      	uxtb	r3, r3
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d007      	beq.n	8013eae <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013e9e:	697b      	ldr	r3, [r7, #20]
 8013ea0:	681a      	ldr	r2, [r3, #0]
 8013ea2:	693b      	ldr	r3, [r7, #16]
 8013ea4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013ea6:	697b      	ldr	r3, [r7, #20]
 8013ea8:	693a      	ldr	r2, [r7, #16]
 8013eaa:	601a      	str	r2, [r3, #0]
        break;
 8013eac:	e007      	b.n	8013ebe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013eae:	697b      	ldr	r3, [r7, #20]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	617b      	str	r3, [r7, #20]
 8013eb4:	697b      	ldr	r3, [r7, #20]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d1e1      	bne.n	8013e7e <sys_timeout_abs+0x86>
 8013eba:	e000      	b.n	8013ebe <sys_timeout_abs+0xc6>
    return;
 8013ebc:	bf00      	nop
      }
    }
  }
}
 8013ebe:	3718      	adds	r7, #24
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	bd80      	pop	{r7, pc}
 8013ec4:	0801b030 	.word	0x0801b030
 8013ec8:	0801b064 	.word	0x0801b064
 8013ecc:	0801b0a4 	.word	0x0801b0a4
 8013ed0:	2000687c 	.word	0x2000687c

08013ed4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b086      	sub	sp, #24
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013ee0:	697b      	ldr	r3, [r7, #20]
 8013ee2:	685b      	ldr	r3, [r3, #4]
 8013ee4:	4798      	blx	r3

  now = sys_now();
 8013ee6:	f7f3 f815 	bl	8006f14 <sys_now>
 8013eea:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013eec:	697b      	ldr	r3, [r7, #20]
 8013eee:	681a      	ldr	r2, [r3, #0]
 8013ef0:	4b0f      	ldr	r3, [pc, #60]	; (8013f30 <lwip_cyclic_timer+0x5c>)
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	4413      	add	r3, r2
 8013ef6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013ef8:	68fa      	ldr	r2, [r7, #12]
 8013efa:	693b      	ldr	r3, [r7, #16]
 8013efc:	1ad3      	subs	r3, r2, r3
 8013efe:	0fdb      	lsrs	r3, r3, #31
 8013f00:	f003 0301 	and.w	r3, r3, #1
 8013f04:	b2db      	uxtb	r3, r3
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d009      	beq.n	8013f1e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013f0a:	697b      	ldr	r3, [r7, #20]
 8013f0c:	681a      	ldr	r2, [r3, #0]
 8013f0e:	693b      	ldr	r3, [r7, #16]
 8013f10:	4413      	add	r3, r2
 8013f12:	687a      	ldr	r2, [r7, #4]
 8013f14:	4907      	ldr	r1, [pc, #28]	; (8013f34 <lwip_cyclic_timer+0x60>)
 8013f16:	4618      	mov	r0, r3
 8013f18:	f7ff ff6e 	bl	8013df8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013f1c:	e004      	b.n	8013f28 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013f1e:	687a      	ldr	r2, [r7, #4]
 8013f20:	4904      	ldr	r1, [pc, #16]	; (8013f34 <lwip_cyclic_timer+0x60>)
 8013f22:	68f8      	ldr	r0, [r7, #12]
 8013f24:	f7ff ff68 	bl	8013df8 <sys_timeout_abs>
}
 8013f28:	bf00      	nop
 8013f2a:	3718      	adds	r7, #24
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}
 8013f30:	20006880 	.word	0x20006880
 8013f34:	08013ed5 	.word	0x08013ed5

08013f38 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b082      	sub	sp, #8
 8013f3c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013f3e:	2301      	movs	r3, #1
 8013f40:	607b      	str	r3, [r7, #4]
 8013f42:	e00e      	b.n	8013f62 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013f44:	4a0b      	ldr	r2, [pc, #44]	; (8013f74 <sys_timeouts_init+0x3c>)
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	00db      	lsls	r3, r3, #3
 8013f50:	4a08      	ldr	r2, [pc, #32]	; (8013f74 <sys_timeouts_init+0x3c>)
 8013f52:	4413      	add	r3, r2
 8013f54:	461a      	mov	r2, r3
 8013f56:	4908      	ldr	r1, [pc, #32]	; (8013f78 <sys_timeouts_init+0x40>)
 8013f58:	f000 f810 	bl	8013f7c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	3301      	adds	r3, #1
 8013f60:	607b      	str	r3, [r7, #4]
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	2b02      	cmp	r3, #2
 8013f66:	d9ed      	bls.n	8013f44 <sys_timeouts_init+0xc>
  }
}
 8013f68:	bf00      	nop
 8013f6a:	bf00      	nop
 8013f6c:	3708      	adds	r7, #8
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	bd80      	pop	{r7, pc}
 8013f72:	bf00      	nop
 8013f74:	0801bc5c 	.word	0x0801bc5c
 8013f78:	08013ed5 	.word	0x08013ed5

08013f7c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b086      	sub	sp, #24
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	60f8      	str	r0, [r7, #12]
 8013f84:	60b9      	str	r1, [r7, #8]
 8013f86:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013f8e:	d306      	bcc.n	8013f9e <sys_timeout+0x22>
 8013f90:	4b0a      	ldr	r3, [pc, #40]	; (8013fbc <sys_timeout+0x40>)
 8013f92:	f240 1229 	movw	r2, #297	; 0x129
 8013f96:	490a      	ldr	r1, [pc, #40]	; (8013fc0 <sys_timeout+0x44>)
 8013f98:	480a      	ldr	r0, [pc, #40]	; (8013fc4 <sys_timeout+0x48>)
 8013f9a:	f003 fc03 	bl	80177a4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013f9e:	f7f2 ffb9 	bl	8006f14 <sys_now>
 8013fa2:	4602      	mov	r2, r0
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	4413      	add	r3, r2
 8013fa8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013faa:	687a      	ldr	r2, [r7, #4]
 8013fac:	68b9      	ldr	r1, [r7, #8]
 8013fae:	6978      	ldr	r0, [r7, #20]
 8013fb0:	f7ff ff22 	bl	8013df8 <sys_timeout_abs>
#endif
}
 8013fb4:	bf00      	nop
 8013fb6:	3718      	adds	r7, #24
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bd80      	pop	{r7, pc}
 8013fbc:	0801b030 	.word	0x0801b030
 8013fc0:	0801b0cc 	.word	0x0801b0cc
 8013fc4:	0801b0a4 	.word	0x0801b0a4

08013fc8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b084      	sub	sp, #16
 8013fcc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013fce:	f7f2 ffa1 	bl	8006f14 <sys_now>
 8013fd2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013fd4:	4b17      	ldr	r3, [pc, #92]	; (8014034 <sys_check_timeouts+0x6c>)
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013fda:	68bb      	ldr	r3, [r7, #8]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d022      	beq.n	8014026 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013fe0:	68bb      	ldr	r3, [r7, #8]
 8013fe2:	685b      	ldr	r3, [r3, #4]
 8013fe4:	68fa      	ldr	r2, [r7, #12]
 8013fe6:	1ad3      	subs	r3, r2, r3
 8013fe8:	0fdb      	lsrs	r3, r3, #31
 8013fea:	f003 0301 	and.w	r3, r3, #1
 8013fee:	b2db      	uxtb	r3, r3
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d11a      	bne.n	801402a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013ff4:	68bb      	ldr	r3, [r7, #8]
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	4a0e      	ldr	r2, [pc, #56]	; (8014034 <sys_check_timeouts+0x6c>)
 8013ffa:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013ffc:	68bb      	ldr	r3, [r7, #8]
 8013ffe:	689b      	ldr	r3, [r3, #8]
 8014000:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014002:	68bb      	ldr	r3, [r7, #8]
 8014004:	68db      	ldr	r3, [r3, #12]
 8014006:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014008:	68bb      	ldr	r3, [r7, #8]
 801400a:	685b      	ldr	r3, [r3, #4]
 801400c:	4a0a      	ldr	r2, [pc, #40]	; (8014038 <sys_check_timeouts+0x70>)
 801400e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014010:	68b9      	ldr	r1, [r7, #8]
 8014012:	200a      	movs	r0, #10
 8014014:	f7f8 fe2e 	bl	800cc74 <memp_free>
    if (handler != NULL) {
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d0da      	beq.n	8013fd4 <sys_check_timeouts+0xc>
      handler(arg);
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	6838      	ldr	r0, [r7, #0]
 8014022:	4798      	blx	r3
  do {
 8014024:	e7d6      	b.n	8013fd4 <sys_check_timeouts+0xc>
      return;
 8014026:	bf00      	nop
 8014028:	e000      	b.n	801402c <sys_check_timeouts+0x64>
      return;
 801402a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801402c:	3710      	adds	r7, #16
 801402e:	46bd      	mov	sp, r7
 8014030:	bd80      	pop	{r7, pc}
 8014032:	bf00      	nop
 8014034:	2000687c 	.word	0x2000687c
 8014038:	20006880 	.word	0x20006880

0801403c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b082      	sub	sp, #8
 8014040:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014042:	4b16      	ldr	r3, [pc, #88]	; (801409c <sys_timeouts_sleeptime+0x60>)
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d102      	bne.n	8014050 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801404a:	f04f 33ff 	mov.w	r3, #4294967295
 801404e:	e020      	b.n	8014092 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014050:	f7f2 ff60 	bl	8006f14 <sys_now>
 8014054:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014056:	4b11      	ldr	r3, [pc, #68]	; (801409c <sys_timeouts_sleeptime+0x60>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	685a      	ldr	r2, [r3, #4]
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	1ad3      	subs	r3, r2, r3
 8014060:	0fdb      	lsrs	r3, r3, #31
 8014062:	f003 0301 	and.w	r3, r3, #1
 8014066:	b2db      	uxtb	r3, r3
 8014068:	2b00      	cmp	r3, #0
 801406a:	d001      	beq.n	8014070 <sys_timeouts_sleeptime+0x34>
    return 0;
 801406c:	2300      	movs	r3, #0
 801406e:	e010      	b.n	8014092 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014070:	4b0a      	ldr	r3, [pc, #40]	; (801409c <sys_timeouts_sleeptime+0x60>)
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	685a      	ldr	r2, [r3, #4]
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	1ad3      	subs	r3, r2, r3
 801407a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801407c:	683b      	ldr	r3, [r7, #0]
 801407e:	2b00      	cmp	r3, #0
 8014080:	da06      	bge.n	8014090 <sys_timeouts_sleeptime+0x54>
 8014082:	4b07      	ldr	r3, [pc, #28]	; (80140a0 <sys_timeouts_sleeptime+0x64>)
 8014084:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014088:	4906      	ldr	r1, [pc, #24]	; (80140a4 <sys_timeouts_sleeptime+0x68>)
 801408a:	4807      	ldr	r0, [pc, #28]	; (80140a8 <sys_timeouts_sleeptime+0x6c>)
 801408c:	f003 fb8a 	bl	80177a4 <iprintf>
    return ret;
 8014090:	683b      	ldr	r3, [r7, #0]
  }
}
 8014092:	4618      	mov	r0, r3
 8014094:	3708      	adds	r7, #8
 8014096:	46bd      	mov	sp, r7
 8014098:	bd80      	pop	{r7, pc}
 801409a:	bf00      	nop
 801409c:	2000687c 	.word	0x2000687c
 80140a0:	0801b030 	.word	0x0801b030
 80140a4:	0801b104 	.word	0x0801b104
 80140a8:	0801b0a4 	.word	0x0801b0a4

080140ac <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80140ac:	b580      	push	{r7, lr}
 80140ae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80140b0:	f003 fb90 	bl	80177d4 <rand>
 80140b4:	4603      	mov	r3, r0
 80140b6:	b29b      	uxth	r3, r3
 80140b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80140bc:	b29b      	uxth	r3, r3
 80140be:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80140c2:	b29a      	uxth	r2, r3
 80140c4:	4b01      	ldr	r3, [pc, #4]	; (80140cc <udp_init+0x20>)
 80140c6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80140c8:	bf00      	nop
 80140ca:	bd80      	pop	{r7, pc}
 80140cc:	2000001c 	.word	0x2000001c

080140d0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80140d0:	b480      	push	{r7}
 80140d2:	b083      	sub	sp, #12
 80140d4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80140d6:	2300      	movs	r3, #0
 80140d8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80140da:	4b17      	ldr	r3, [pc, #92]	; (8014138 <udp_new_port+0x68>)
 80140dc:	881b      	ldrh	r3, [r3, #0]
 80140de:	1c5a      	adds	r2, r3, #1
 80140e0:	b291      	uxth	r1, r2
 80140e2:	4a15      	ldr	r2, [pc, #84]	; (8014138 <udp_new_port+0x68>)
 80140e4:	8011      	strh	r1, [r2, #0]
 80140e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80140ea:	4293      	cmp	r3, r2
 80140ec:	d103      	bne.n	80140f6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80140ee:	4b12      	ldr	r3, [pc, #72]	; (8014138 <udp_new_port+0x68>)
 80140f0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80140f4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80140f6:	4b11      	ldr	r3, [pc, #68]	; (801413c <udp_new_port+0x6c>)
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	603b      	str	r3, [r7, #0]
 80140fc:	e011      	b.n	8014122 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	8a5a      	ldrh	r2, [r3, #18]
 8014102:	4b0d      	ldr	r3, [pc, #52]	; (8014138 <udp_new_port+0x68>)
 8014104:	881b      	ldrh	r3, [r3, #0]
 8014106:	429a      	cmp	r2, r3
 8014108:	d108      	bne.n	801411c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801410a:	88fb      	ldrh	r3, [r7, #6]
 801410c:	3301      	adds	r3, #1
 801410e:	80fb      	strh	r3, [r7, #6]
 8014110:	88fb      	ldrh	r3, [r7, #6]
 8014112:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014116:	d3e0      	bcc.n	80140da <udp_new_port+0xa>
        return 0;
 8014118:	2300      	movs	r3, #0
 801411a:	e007      	b.n	801412c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801411c:	683b      	ldr	r3, [r7, #0]
 801411e:	68db      	ldr	r3, [r3, #12]
 8014120:	603b      	str	r3, [r7, #0]
 8014122:	683b      	ldr	r3, [r7, #0]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d1ea      	bne.n	80140fe <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014128:	4b03      	ldr	r3, [pc, #12]	; (8014138 <udp_new_port+0x68>)
 801412a:	881b      	ldrh	r3, [r3, #0]
}
 801412c:	4618      	mov	r0, r3
 801412e:	370c      	adds	r7, #12
 8014130:	46bd      	mov	sp, r7
 8014132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014136:	4770      	bx	lr
 8014138:	2000001c 	.word	0x2000001c
 801413c:	2000d6a8 	.word	0x2000d6a8

08014140 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b084      	sub	sp, #16
 8014144:	af00      	add	r7, sp, #0
 8014146:	60f8      	str	r0, [r7, #12]
 8014148:	60b9      	str	r1, [r7, #8]
 801414a:	4613      	mov	r3, r2
 801414c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d105      	bne.n	8014160 <udp_input_local_match+0x20>
 8014154:	4b27      	ldr	r3, [pc, #156]	; (80141f4 <udp_input_local_match+0xb4>)
 8014156:	2287      	movs	r2, #135	; 0x87
 8014158:	4927      	ldr	r1, [pc, #156]	; (80141f8 <udp_input_local_match+0xb8>)
 801415a:	4828      	ldr	r0, [pc, #160]	; (80141fc <udp_input_local_match+0xbc>)
 801415c:	f003 fb22 	bl	80177a4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	2b00      	cmp	r3, #0
 8014164:	d105      	bne.n	8014172 <udp_input_local_match+0x32>
 8014166:	4b23      	ldr	r3, [pc, #140]	; (80141f4 <udp_input_local_match+0xb4>)
 8014168:	2288      	movs	r2, #136	; 0x88
 801416a:	4925      	ldr	r1, [pc, #148]	; (8014200 <udp_input_local_match+0xc0>)
 801416c:	4823      	ldr	r0, [pc, #140]	; (80141fc <udp_input_local_match+0xbc>)
 801416e:	f003 fb19 	bl	80177a4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	7a1b      	ldrb	r3, [r3, #8]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d00b      	beq.n	8014192 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	7a1a      	ldrb	r2, [r3, #8]
 801417e:	4b21      	ldr	r3, [pc, #132]	; (8014204 <udp_input_local_match+0xc4>)
 8014180:	685b      	ldr	r3, [r3, #4]
 8014182:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014186:	3301      	adds	r3, #1
 8014188:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801418a:	429a      	cmp	r2, r3
 801418c:	d001      	beq.n	8014192 <udp_input_local_match+0x52>
    return 0;
 801418e:	2300      	movs	r3, #0
 8014190:	e02b      	b.n	80141ea <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014192:	79fb      	ldrb	r3, [r7, #7]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d018      	beq.n	80141ca <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d013      	beq.n	80141c6 <udp_input_local_match+0x86>
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d00f      	beq.n	80141c6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80141a6:	4b17      	ldr	r3, [pc, #92]	; (8014204 <udp_input_local_match+0xc4>)
 80141a8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80141aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141ae:	d00a      	beq.n	80141c6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	681a      	ldr	r2, [r3, #0]
 80141b4:	4b13      	ldr	r3, [pc, #76]	; (8014204 <udp_input_local_match+0xc4>)
 80141b6:	695b      	ldr	r3, [r3, #20]
 80141b8:	405a      	eors	r2, r3
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	3308      	adds	r3, #8
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d110      	bne.n	80141e8 <udp_input_local_match+0xa8>
          return 1;
 80141c6:	2301      	movs	r3, #1
 80141c8:	e00f      	b.n	80141ea <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d009      	beq.n	80141e4 <udp_input_local_match+0xa4>
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d005      	beq.n	80141e4 <udp_input_local_match+0xa4>
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	681a      	ldr	r2, [r3, #0]
 80141dc:	4b09      	ldr	r3, [pc, #36]	; (8014204 <udp_input_local_match+0xc4>)
 80141de:	695b      	ldr	r3, [r3, #20]
 80141e0:	429a      	cmp	r2, r3
 80141e2:	d101      	bne.n	80141e8 <udp_input_local_match+0xa8>
        return 1;
 80141e4:	2301      	movs	r3, #1
 80141e6:	e000      	b.n	80141ea <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80141e8:	2300      	movs	r3, #0
}
 80141ea:	4618      	mov	r0, r3
 80141ec:	3710      	adds	r7, #16
 80141ee:	46bd      	mov	sp, r7
 80141f0:	bd80      	pop	{r7, pc}
 80141f2:	bf00      	nop
 80141f4:	0801b118 	.word	0x0801b118
 80141f8:	0801b148 	.word	0x0801b148
 80141fc:	0801b16c 	.word	0x0801b16c
 8014200:	0801b194 	.word	0x0801b194
 8014204:	20009f7c 	.word	0x20009f7c

08014208 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014208:	b590      	push	{r4, r7, lr}
 801420a:	b08d      	sub	sp, #52	; 0x34
 801420c:	af02      	add	r7, sp, #8
 801420e:	6078      	str	r0, [r7, #4]
 8014210:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014212:	2300      	movs	r3, #0
 8014214:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d105      	bne.n	8014228 <udp_input+0x20>
 801421c:	4b7c      	ldr	r3, [pc, #496]	; (8014410 <udp_input+0x208>)
 801421e:	22cf      	movs	r2, #207	; 0xcf
 8014220:	497c      	ldr	r1, [pc, #496]	; (8014414 <udp_input+0x20c>)
 8014222:	487d      	ldr	r0, [pc, #500]	; (8014418 <udp_input+0x210>)
 8014224:	f003 fabe 	bl	80177a4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014228:	683b      	ldr	r3, [r7, #0]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d105      	bne.n	801423a <udp_input+0x32>
 801422e:	4b78      	ldr	r3, [pc, #480]	; (8014410 <udp_input+0x208>)
 8014230:	22d0      	movs	r2, #208	; 0xd0
 8014232:	497a      	ldr	r1, [pc, #488]	; (801441c <udp_input+0x214>)
 8014234:	4878      	ldr	r0, [pc, #480]	; (8014418 <udp_input+0x210>)
 8014236:	f003 fab5 	bl	80177a4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	895b      	ldrh	r3, [r3, #10]
 801423e:	2b07      	cmp	r3, #7
 8014240:	d803      	bhi.n	801424a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014242:	6878      	ldr	r0, [r7, #4]
 8014244:	f7f9 fb56 	bl	800d8f4 <pbuf_free>
    goto end;
 8014248:	e0de      	b.n	8014408 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	685b      	ldr	r3, [r3, #4]
 801424e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014250:	4b73      	ldr	r3, [pc, #460]	; (8014420 <udp_input+0x218>)
 8014252:	695b      	ldr	r3, [r3, #20]
 8014254:	4a72      	ldr	r2, [pc, #456]	; (8014420 <udp_input+0x218>)
 8014256:	6812      	ldr	r2, [r2, #0]
 8014258:	4611      	mov	r1, r2
 801425a:	4618      	mov	r0, r3
 801425c:	f001 ff80 	bl	8016160 <ip4_addr_isbroadcast_u32>
 8014260:	4603      	mov	r3, r0
 8014262:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014264:	697b      	ldr	r3, [r7, #20]
 8014266:	881b      	ldrh	r3, [r3, #0]
 8014268:	b29b      	uxth	r3, r3
 801426a:	4618      	mov	r0, r3
 801426c:	f7f7 fffa 	bl	800c264 <lwip_htons>
 8014270:	4603      	mov	r3, r0
 8014272:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014274:	697b      	ldr	r3, [r7, #20]
 8014276:	885b      	ldrh	r3, [r3, #2]
 8014278:	b29b      	uxth	r3, r3
 801427a:	4618      	mov	r0, r3
 801427c:	f7f7 fff2 	bl	800c264 <lwip_htons>
 8014280:	4603      	mov	r3, r0
 8014282:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014284:	2300      	movs	r3, #0
 8014286:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014288:	2300      	movs	r3, #0
 801428a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801428c:	2300      	movs	r3, #0
 801428e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014290:	4b64      	ldr	r3, [pc, #400]	; (8014424 <udp_input+0x21c>)
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	627b      	str	r3, [r7, #36]	; 0x24
 8014296:	e054      	b.n	8014342 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801429a:	8a5b      	ldrh	r3, [r3, #18]
 801429c:	89fa      	ldrh	r2, [r7, #14]
 801429e:	429a      	cmp	r2, r3
 80142a0:	d14a      	bne.n	8014338 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80142a2:	7cfb      	ldrb	r3, [r7, #19]
 80142a4:	461a      	mov	r2, r3
 80142a6:	6839      	ldr	r1, [r7, #0]
 80142a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80142aa:	f7ff ff49 	bl	8014140 <udp_input_local_match>
 80142ae:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d041      	beq.n	8014338 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80142b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142b6:	7c1b      	ldrb	r3, [r3, #16]
 80142b8:	f003 0304 	and.w	r3, r3, #4
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d11d      	bne.n	80142fc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80142c0:	69fb      	ldr	r3, [r7, #28]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d102      	bne.n	80142cc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80142c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142c8:	61fb      	str	r3, [r7, #28]
 80142ca:	e017      	b.n	80142fc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80142cc:	7cfb      	ldrb	r3, [r7, #19]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d014      	beq.n	80142fc <udp_input+0xf4>
 80142d2:	4b53      	ldr	r3, [pc, #332]	; (8014420 <udp_input+0x218>)
 80142d4:	695b      	ldr	r3, [r3, #20]
 80142d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142da:	d10f      	bne.n	80142fc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80142dc:	69fb      	ldr	r3, [r7, #28]
 80142de:	681a      	ldr	r2, [r3, #0]
 80142e0:	683b      	ldr	r3, [r7, #0]
 80142e2:	3304      	adds	r3, #4
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	429a      	cmp	r2, r3
 80142e8:	d008      	beq.n	80142fc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80142ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ec:	681a      	ldr	r2, [r3, #0]
 80142ee:	683b      	ldr	r3, [r7, #0]
 80142f0:	3304      	adds	r3, #4
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	429a      	cmp	r2, r3
 80142f6:	d101      	bne.n	80142fc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80142f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142fa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80142fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142fe:	8a9b      	ldrh	r3, [r3, #20]
 8014300:	8a3a      	ldrh	r2, [r7, #16]
 8014302:	429a      	cmp	r2, r3
 8014304:	d118      	bne.n	8014338 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014308:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801430a:	2b00      	cmp	r3, #0
 801430c:	d005      	beq.n	801431a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014310:	685a      	ldr	r2, [r3, #4]
 8014312:	4b43      	ldr	r3, [pc, #268]	; (8014420 <udp_input+0x218>)
 8014314:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014316:	429a      	cmp	r2, r3
 8014318:	d10e      	bne.n	8014338 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801431a:	6a3b      	ldr	r3, [r7, #32]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d014      	beq.n	801434a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014322:	68da      	ldr	r2, [r3, #12]
 8014324:	6a3b      	ldr	r3, [r7, #32]
 8014326:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014328:	4b3e      	ldr	r3, [pc, #248]	; (8014424 <udp_input+0x21c>)
 801432a:	681a      	ldr	r2, [r3, #0]
 801432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801432e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014330:	4a3c      	ldr	r2, [pc, #240]	; (8014424 <udp_input+0x21c>)
 8014332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014334:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014336:	e008      	b.n	801434a <udp_input+0x142>
      }
    }

    prev = pcb;
 8014338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801433a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801433e:	68db      	ldr	r3, [r3, #12]
 8014340:	627b      	str	r3, [r7, #36]	; 0x24
 8014342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014344:	2b00      	cmp	r3, #0
 8014346:	d1a7      	bne.n	8014298 <udp_input+0x90>
 8014348:	e000      	b.n	801434c <udp_input+0x144>
        break;
 801434a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801434e:	2b00      	cmp	r3, #0
 8014350:	d101      	bne.n	8014356 <udp_input+0x14e>
    pcb = uncon_pcb;
 8014352:	69fb      	ldr	r3, [r7, #28]
 8014354:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014358:	2b00      	cmp	r3, #0
 801435a:	d002      	beq.n	8014362 <udp_input+0x15a>
    for_us = 1;
 801435c:	2301      	movs	r3, #1
 801435e:	76fb      	strb	r3, [r7, #27]
 8014360:	e00a      	b.n	8014378 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014362:	683b      	ldr	r3, [r7, #0]
 8014364:	3304      	adds	r3, #4
 8014366:	681a      	ldr	r2, [r3, #0]
 8014368:	4b2d      	ldr	r3, [pc, #180]	; (8014420 <udp_input+0x218>)
 801436a:	695b      	ldr	r3, [r3, #20]
 801436c:	429a      	cmp	r2, r3
 801436e:	bf0c      	ite	eq
 8014370:	2301      	moveq	r3, #1
 8014372:	2300      	movne	r3, #0
 8014374:	b2db      	uxtb	r3, r3
 8014376:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014378:	7efb      	ldrb	r3, [r7, #27]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d041      	beq.n	8014402 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801437e:	2108      	movs	r1, #8
 8014380:	6878      	ldr	r0, [r7, #4]
 8014382:	f7f9 fa31 	bl	800d7e8 <pbuf_remove_header>
 8014386:	4603      	mov	r3, r0
 8014388:	2b00      	cmp	r3, #0
 801438a:	d00a      	beq.n	80143a2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801438c:	4b20      	ldr	r3, [pc, #128]	; (8014410 <udp_input+0x208>)
 801438e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8014392:	4925      	ldr	r1, [pc, #148]	; (8014428 <udp_input+0x220>)
 8014394:	4820      	ldr	r0, [pc, #128]	; (8014418 <udp_input+0x210>)
 8014396:	f003 fa05 	bl	80177a4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801439a:	6878      	ldr	r0, [r7, #4]
 801439c:	f7f9 faaa 	bl	800d8f4 <pbuf_free>
      goto end;
 80143a0:	e032      	b.n	8014408 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80143a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d012      	beq.n	80143ce <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80143a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143aa:	699b      	ldr	r3, [r3, #24]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d00a      	beq.n	80143c6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80143b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143b2:	699c      	ldr	r4, [r3, #24]
 80143b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143b6:	69d8      	ldr	r0, [r3, #28]
 80143b8:	8a3b      	ldrh	r3, [r7, #16]
 80143ba:	9300      	str	r3, [sp, #0]
 80143bc:	4b1b      	ldr	r3, [pc, #108]	; (801442c <udp_input+0x224>)
 80143be:	687a      	ldr	r2, [r7, #4]
 80143c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80143c2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80143c4:	e021      	b.n	801440a <udp_input+0x202>
        pbuf_free(p);
 80143c6:	6878      	ldr	r0, [r7, #4]
 80143c8:	f7f9 fa94 	bl	800d8f4 <pbuf_free>
        goto end;
 80143cc:	e01c      	b.n	8014408 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80143ce:	7cfb      	ldrb	r3, [r7, #19]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d112      	bne.n	80143fa <udp_input+0x1f2>
 80143d4:	4b12      	ldr	r3, [pc, #72]	; (8014420 <udp_input+0x218>)
 80143d6:	695b      	ldr	r3, [r3, #20]
 80143d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80143dc:	2be0      	cmp	r3, #224	; 0xe0
 80143de:	d00c      	beq.n	80143fa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80143e0:	4b0f      	ldr	r3, [pc, #60]	; (8014420 <udp_input+0x218>)
 80143e2:	899b      	ldrh	r3, [r3, #12]
 80143e4:	3308      	adds	r3, #8
 80143e6:	b29b      	uxth	r3, r3
 80143e8:	b21b      	sxth	r3, r3
 80143ea:	4619      	mov	r1, r3
 80143ec:	6878      	ldr	r0, [r7, #4]
 80143ee:	f7f9 fa6e 	bl	800d8ce <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80143f2:	2103      	movs	r1, #3
 80143f4:	6878      	ldr	r0, [r7, #4]
 80143f6:	f001 fb93 	bl	8015b20 <icmp_dest_unreach>
      pbuf_free(p);
 80143fa:	6878      	ldr	r0, [r7, #4]
 80143fc:	f7f9 fa7a 	bl	800d8f4 <pbuf_free>
  return;
 8014400:	e003      	b.n	801440a <udp_input+0x202>
    pbuf_free(p);
 8014402:	6878      	ldr	r0, [r7, #4]
 8014404:	f7f9 fa76 	bl	800d8f4 <pbuf_free>
  return;
 8014408:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801440a:	372c      	adds	r7, #44	; 0x2c
 801440c:	46bd      	mov	sp, r7
 801440e:	bd90      	pop	{r4, r7, pc}
 8014410:	0801b118 	.word	0x0801b118
 8014414:	0801b1bc 	.word	0x0801b1bc
 8014418:	0801b16c 	.word	0x0801b16c
 801441c:	0801b1d4 	.word	0x0801b1d4
 8014420:	20009f7c 	.word	0x20009f7c
 8014424:	2000d6a8 	.word	0x2000d6a8
 8014428:	0801b1f0 	.word	0x0801b1f0
 801442c:	20009f8c 	.word	0x20009f8c

08014430 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8014430:	b580      	push	{r7, lr}
 8014432:	b082      	sub	sp, #8
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
 8014438:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d109      	bne.n	8014454 <udp_send+0x24>
 8014440:	4b11      	ldr	r3, [pc, #68]	; (8014488 <udp_send+0x58>)
 8014442:	f240 12d5 	movw	r2, #469	; 0x1d5
 8014446:	4911      	ldr	r1, [pc, #68]	; (801448c <udp_send+0x5c>)
 8014448:	4811      	ldr	r0, [pc, #68]	; (8014490 <udp_send+0x60>)
 801444a:	f003 f9ab 	bl	80177a4 <iprintf>
 801444e:	f06f 030f 	mvn.w	r3, #15
 8014452:	e015      	b.n	8014480 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8014454:	683b      	ldr	r3, [r7, #0]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d109      	bne.n	801446e <udp_send+0x3e>
 801445a:	4b0b      	ldr	r3, [pc, #44]	; (8014488 <udp_send+0x58>)
 801445c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8014460:	490c      	ldr	r1, [pc, #48]	; (8014494 <udp_send+0x64>)
 8014462:	480b      	ldr	r0, [pc, #44]	; (8014490 <udp_send+0x60>)
 8014464:	f003 f99e 	bl	80177a4 <iprintf>
 8014468:	f06f 030f 	mvn.w	r3, #15
 801446c:	e008      	b.n	8014480 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	1d1a      	adds	r2, r3, #4
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	8a9b      	ldrh	r3, [r3, #20]
 8014476:	6839      	ldr	r1, [r7, #0]
 8014478:	6878      	ldr	r0, [r7, #4]
 801447a:	f000 f80d 	bl	8014498 <udp_sendto>
 801447e:	4603      	mov	r3, r0
}
 8014480:	4618      	mov	r0, r3
 8014482:	3708      	adds	r7, #8
 8014484:	46bd      	mov	sp, r7
 8014486:	bd80      	pop	{r7, pc}
 8014488:	0801b118 	.word	0x0801b118
 801448c:	0801b20c 	.word	0x0801b20c
 8014490:	0801b16c 	.word	0x0801b16c
 8014494:	0801b224 	.word	0x0801b224

08014498 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8014498:	b580      	push	{r7, lr}
 801449a:	b088      	sub	sp, #32
 801449c:	af02      	add	r7, sp, #8
 801449e:	60f8      	str	r0, [r7, #12]
 80144a0:	60b9      	str	r1, [r7, #8]
 80144a2:	607a      	str	r2, [r7, #4]
 80144a4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d109      	bne.n	80144c0 <udp_sendto+0x28>
 80144ac:	4b23      	ldr	r3, [pc, #140]	; (801453c <udp_sendto+0xa4>)
 80144ae:	f44f 7206 	mov.w	r2, #536	; 0x218
 80144b2:	4923      	ldr	r1, [pc, #140]	; (8014540 <udp_sendto+0xa8>)
 80144b4:	4823      	ldr	r0, [pc, #140]	; (8014544 <udp_sendto+0xac>)
 80144b6:	f003 f975 	bl	80177a4 <iprintf>
 80144ba:	f06f 030f 	mvn.w	r3, #15
 80144be:	e038      	b.n	8014532 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80144c0:	68bb      	ldr	r3, [r7, #8]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d109      	bne.n	80144da <udp_sendto+0x42>
 80144c6:	4b1d      	ldr	r3, [pc, #116]	; (801453c <udp_sendto+0xa4>)
 80144c8:	f240 2219 	movw	r2, #537	; 0x219
 80144cc:	491e      	ldr	r1, [pc, #120]	; (8014548 <udp_sendto+0xb0>)
 80144ce:	481d      	ldr	r0, [pc, #116]	; (8014544 <udp_sendto+0xac>)
 80144d0:	f003 f968 	bl	80177a4 <iprintf>
 80144d4:	f06f 030f 	mvn.w	r3, #15
 80144d8:	e02b      	b.n	8014532 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d109      	bne.n	80144f4 <udp_sendto+0x5c>
 80144e0:	4b16      	ldr	r3, [pc, #88]	; (801453c <udp_sendto+0xa4>)
 80144e2:	f240 221a 	movw	r2, #538	; 0x21a
 80144e6:	4919      	ldr	r1, [pc, #100]	; (801454c <udp_sendto+0xb4>)
 80144e8:	4816      	ldr	r0, [pc, #88]	; (8014544 <udp_sendto+0xac>)
 80144ea:	f003 f95b 	bl	80177a4 <iprintf>
 80144ee:	f06f 030f 	mvn.w	r3, #15
 80144f2:	e01e      	b.n	8014532 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	7a1b      	ldrb	r3, [r3, #8]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d006      	beq.n	801450a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	7a1b      	ldrb	r3, [r3, #8]
 8014500:	4618      	mov	r0, r3
 8014502:	f7f8 fe69 	bl	800d1d8 <netif_get_by_index>
 8014506:	6178      	str	r0, [r7, #20]
 8014508:	e003      	b.n	8014512 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801450a:	6878      	ldr	r0, [r7, #4]
 801450c:	f001 fb92 	bl	8015c34 <ip4_route>
 8014510:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8014512:	697b      	ldr	r3, [r7, #20]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d102      	bne.n	801451e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8014518:	f06f 0303 	mvn.w	r3, #3
 801451c:	e009      	b.n	8014532 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801451e:	887a      	ldrh	r2, [r7, #2]
 8014520:	697b      	ldr	r3, [r7, #20]
 8014522:	9300      	str	r3, [sp, #0]
 8014524:	4613      	mov	r3, r2
 8014526:	687a      	ldr	r2, [r7, #4]
 8014528:	68b9      	ldr	r1, [r7, #8]
 801452a:	68f8      	ldr	r0, [r7, #12]
 801452c:	f000 f810 	bl	8014550 <udp_sendto_if>
 8014530:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014532:	4618      	mov	r0, r3
 8014534:	3718      	adds	r7, #24
 8014536:	46bd      	mov	sp, r7
 8014538:	bd80      	pop	{r7, pc}
 801453a:	bf00      	nop
 801453c:	0801b118 	.word	0x0801b118
 8014540:	0801b23c 	.word	0x0801b23c
 8014544:	0801b16c 	.word	0x0801b16c
 8014548:	0801b254 	.word	0x0801b254
 801454c:	0801b270 	.word	0x0801b270

08014550 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b088      	sub	sp, #32
 8014554:	af02      	add	r7, sp, #8
 8014556:	60f8      	str	r0, [r7, #12]
 8014558:	60b9      	str	r1, [r7, #8]
 801455a:	607a      	str	r2, [r7, #4]
 801455c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d109      	bne.n	8014578 <udp_sendto_if+0x28>
 8014564:	4b2e      	ldr	r3, [pc, #184]	; (8014620 <udp_sendto_if+0xd0>)
 8014566:	f44f 7220 	mov.w	r2, #640	; 0x280
 801456a:	492e      	ldr	r1, [pc, #184]	; (8014624 <udp_sendto_if+0xd4>)
 801456c:	482e      	ldr	r0, [pc, #184]	; (8014628 <udp_sendto_if+0xd8>)
 801456e:	f003 f919 	bl	80177a4 <iprintf>
 8014572:	f06f 030f 	mvn.w	r3, #15
 8014576:	e04f      	b.n	8014618 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8014578:	68bb      	ldr	r3, [r7, #8]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d109      	bne.n	8014592 <udp_sendto_if+0x42>
 801457e:	4b28      	ldr	r3, [pc, #160]	; (8014620 <udp_sendto_if+0xd0>)
 8014580:	f240 2281 	movw	r2, #641	; 0x281
 8014584:	4929      	ldr	r1, [pc, #164]	; (801462c <udp_sendto_if+0xdc>)
 8014586:	4828      	ldr	r0, [pc, #160]	; (8014628 <udp_sendto_if+0xd8>)
 8014588:	f003 f90c 	bl	80177a4 <iprintf>
 801458c:	f06f 030f 	mvn.w	r3, #15
 8014590:	e042      	b.n	8014618 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d109      	bne.n	80145ac <udp_sendto_if+0x5c>
 8014598:	4b21      	ldr	r3, [pc, #132]	; (8014620 <udp_sendto_if+0xd0>)
 801459a:	f240 2282 	movw	r2, #642	; 0x282
 801459e:	4924      	ldr	r1, [pc, #144]	; (8014630 <udp_sendto_if+0xe0>)
 80145a0:	4821      	ldr	r0, [pc, #132]	; (8014628 <udp_sendto_if+0xd8>)
 80145a2:	f003 f8ff 	bl	80177a4 <iprintf>
 80145a6:	f06f 030f 	mvn.w	r3, #15
 80145aa:	e035      	b.n	8014618 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80145ac:	6a3b      	ldr	r3, [r7, #32]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d109      	bne.n	80145c6 <udp_sendto_if+0x76>
 80145b2:	4b1b      	ldr	r3, [pc, #108]	; (8014620 <udp_sendto_if+0xd0>)
 80145b4:	f240 2283 	movw	r2, #643	; 0x283
 80145b8:	491e      	ldr	r1, [pc, #120]	; (8014634 <udp_sendto_if+0xe4>)
 80145ba:	481b      	ldr	r0, [pc, #108]	; (8014628 <udp_sendto_if+0xd8>)
 80145bc:	f003 f8f2 	bl	80177a4 <iprintf>
 80145c0:	f06f 030f 	mvn.w	r3, #15
 80145c4:	e028      	b.n	8014618 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d009      	beq.n	80145e0 <udp_sendto_if+0x90>
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d005      	beq.n	80145e0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80145dc:	2be0      	cmp	r3, #224	; 0xe0
 80145de:	d103      	bne.n	80145e8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80145e0:	6a3b      	ldr	r3, [r7, #32]
 80145e2:	3304      	adds	r3, #4
 80145e4:	617b      	str	r3, [r7, #20]
 80145e6:	e00b      	b.n	8014600 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	681a      	ldr	r2, [r3, #0]
 80145ec:	6a3b      	ldr	r3, [r7, #32]
 80145ee:	3304      	adds	r3, #4
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	429a      	cmp	r2, r3
 80145f4:	d002      	beq.n	80145fc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80145f6:	f06f 0303 	mvn.w	r3, #3
 80145fa:	e00d      	b.n	8014618 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014600:	887a      	ldrh	r2, [r7, #2]
 8014602:	697b      	ldr	r3, [r7, #20]
 8014604:	9301      	str	r3, [sp, #4]
 8014606:	6a3b      	ldr	r3, [r7, #32]
 8014608:	9300      	str	r3, [sp, #0]
 801460a:	4613      	mov	r3, r2
 801460c:	687a      	ldr	r2, [r7, #4]
 801460e:	68b9      	ldr	r1, [r7, #8]
 8014610:	68f8      	ldr	r0, [r7, #12]
 8014612:	f000 f811 	bl	8014638 <udp_sendto_if_src>
 8014616:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014618:	4618      	mov	r0, r3
 801461a:	3718      	adds	r7, #24
 801461c:	46bd      	mov	sp, r7
 801461e:	bd80      	pop	{r7, pc}
 8014620:	0801b118 	.word	0x0801b118
 8014624:	0801b28c 	.word	0x0801b28c
 8014628:	0801b16c 	.word	0x0801b16c
 801462c:	0801b2a8 	.word	0x0801b2a8
 8014630:	0801b2c4 	.word	0x0801b2c4
 8014634:	0801b2e4 	.word	0x0801b2e4

08014638 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b08c      	sub	sp, #48	; 0x30
 801463c:	af04      	add	r7, sp, #16
 801463e:	60f8      	str	r0, [r7, #12]
 8014640:	60b9      	str	r1, [r7, #8]
 8014642:	607a      	str	r2, [r7, #4]
 8014644:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d109      	bne.n	8014660 <udp_sendto_if_src+0x28>
 801464c:	4b65      	ldr	r3, [pc, #404]	; (80147e4 <udp_sendto_if_src+0x1ac>)
 801464e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8014652:	4965      	ldr	r1, [pc, #404]	; (80147e8 <udp_sendto_if_src+0x1b0>)
 8014654:	4865      	ldr	r0, [pc, #404]	; (80147ec <udp_sendto_if_src+0x1b4>)
 8014656:	f003 f8a5 	bl	80177a4 <iprintf>
 801465a:	f06f 030f 	mvn.w	r3, #15
 801465e:	e0bc      	b.n	80147da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8014660:	68bb      	ldr	r3, [r7, #8]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d109      	bne.n	801467a <udp_sendto_if_src+0x42>
 8014666:	4b5f      	ldr	r3, [pc, #380]	; (80147e4 <udp_sendto_if_src+0x1ac>)
 8014668:	f240 22d2 	movw	r2, #722	; 0x2d2
 801466c:	4960      	ldr	r1, [pc, #384]	; (80147f0 <udp_sendto_if_src+0x1b8>)
 801466e:	485f      	ldr	r0, [pc, #380]	; (80147ec <udp_sendto_if_src+0x1b4>)
 8014670:	f003 f898 	bl	80177a4 <iprintf>
 8014674:	f06f 030f 	mvn.w	r3, #15
 8014678:	e0af      	b.n	80147da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d109      	bne.n	8014694 <udp_sendto_if_src+0x5c>
 8014680:	4b58      	ldr	r3, [pc, #352]	; (80147e4 <udp_sendto_if_src+0x1ac>)
 8014682:	f240 22d3 	movw	r2, #723	; 0x2d3
 8014686:	495b      	ldr	r1, [pc, #364]	; (80147f4 <udp_sendto_if_src+0x1bc>)
 8014688:	4858      	ldr	r0, [pc, #352]	; (80147ec <udp_sendto_if_src+0x1b4>)
 801468a:	f003 f88b 	bl	80177a4 <iprintf>
 801468e:	f06f 030f 	mvn.w	r3, #15
 8014692:	e0a2      	b.n	80147da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8014694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014696:	2b00      	cmp	r3, #0
 8014698:	d109      	bne.n	80146ae <udp_sendto_if_src+0x76>
 801469a:	4b52      	ldr	r3, [pc, #328]	; (80147e4 <udp_sendto_if_src+0x1ac>)
 801469c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80146a0:	4955      	ldr	r1, [pc, #340]	; (80147f8 <udp_sendto_if_src+0x1c0>)
 80146a2:	4852      	ldr	r0, [pc, #328]	; (80147ec <udp_sendto_if_src+0x1b4>)
 80146a4:	f003 f87e 	bl	80177a4 <iprintf>
 80146a8:	f06f 030f 	mvn.w	r3, #15
 80146ac:	e095      	b.n	80147da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80146ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d109      	bne.n	80146c8 <udp_sendto_if_src+0x90>
 80146b4:	4b4b      	ldr	r3, [pc, #300]	; (80147e4 <udp_sendto_if_src+0x1ac>)
 80146b6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80146ba:	4950      	ldr	r1, [pc, #320]	; (80147fc <udp_sendto_if_src+0x1c4>)
 80146bc:	484b      	ldr	r0, [pc, #300]	; (80147ec <udp_sendto_if_src+0x1b4>)
 80146be:	f003 f871 	bl	80177a4 <iprintf>
 80146c2:	f06f 030f 	mvn.w	r3, #15
 80146c6:	e088      	b.n	80147da <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	8a5b      	ldrh	r3, [r3, #18]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d10f      	bne.n	80146f0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80146d0:	68f9      	ldr	r1, [r7, #12]
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	8a5b      	ldrh	r3, [r3, #18]
 80146d6:	461a      	mov	r2, r3
 80146d8:	68f8      	ldr	r0, [r7, #12]
 80146da:	f000 f893 	bl	8014804 <udp_bind>
 80146de:	4603      	mov	r3, r0
 80146e0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80146e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d002      	beq.n	80146f0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80146ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80146ee:	e074      	b.n	80147da <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80146f0:	68bb      	ldr	r3, [r7, #8]
 80146f2:	891b      	ldrh	r3, [r3, #8]
 80146f4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80146f8:	4293      	cmp	r3, r2
 80146fa:	d902      	bls.n	8014702 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80146fc:	f04f 33ff 	mov.w	r3, #4294967295
 8014700:	e06b      	b.n	80147da <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8014702:	2108      	movs	r1, #8
 8014704:	68b8      	ldr	r0, [r7, #8]
 8014706:	f7f9 f85f 	bl	800d7c8 <pbuf_add_header>
 801470a:	4603      	mov	r3, r0
 801470c:	2b00      	cmp	r3, #0
 801470e:	d015      	beq.n	801473c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014710:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014714:	2108      	movs	r1, #8
 8014716:	2022      	movs	r0, #34	; 0x22
 8014718:	f7f8 fe08 	bl	800d32c <pbuf_alloc>
 801471c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801471e:	69fb      	ldr	r3, [r7, #28]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d102      	bne.n	801472a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014724:	f04f 33ff 	mov.w	r3, #4294967295
 8014728:	e057      	b.n	80147da <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801472a:	68bb      	ldr	r3, [r7, #8]
 801472c:	891b      	ldrh	r3, [r3, #8]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d006      	beq.n	8014740 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8014732:	68b9      	ldr	r1, [r7, #8]
 8014734:	69f8      	ldr	r0, [r7, #28]
 8014736:	f7f9 fa01 	bl	800db3c <pbuf_chain>
 801473a:	e001      	b.n	8014740 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801473c:	68bb      	ldr	r3, [r7, #8]
 801473e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014740:	69fb      	ldr	r3, [r7, #28]
 8014742:	895b      	ldrh	r3, [r3, #10]
 8014744:	2b07      	cmp	r3, #7
 8014746:	d806      	bhi.n	8014756 <udp_sendto_if_src+0x11e>
 8014748:	4b26      	ldr	r3, [pc, #152]	; (80147e4 <udp_sendto_if_src+0x1ac>)
 801474a:	f240 320d 	movw	r2, #781	; 0x30d
 801474e:	492c      	ldr	r1, [pc, #176]	; (8014800 <udp_sendto_if_src+0x1c8>)
 8014750:	4826      	ldr	r0, [pc, #152]	; (80147ec <udp_sendto_if_src+0x1b4>)
 8014752:	f003 f827 	bl	80177a4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014756:	69fb      	ldr	r3, [r7, #28]
 8014758:	685b      	ldr	r3, [r3, #4]
 801475a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	8a5b      	ldrh	r3, [r3, #18]
 8014760:	4618      	mov	r0, r3
 8014762:	f7f7 fd7f 	bl	800c264 <lwip_htons>
 8014766:	4603      	mov	r3, r0
 8014768:	461a      	mov	r2, r3
 801476a:	697b      	ldr	r3, [r7, #20]
 801476c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801476e:	887b      	ldrh	r3, [r7, #2]
 8014770:	4618      	mov	r0, r3
 8014772:	f7f7 fd77 	bl	800c264 <lwip_htons>
 8014776:	4603      	mov	r3, r0
 8014778:	461a      	mov	r2, r3
 801477a:	697b      	ldr	r3, [r7, #20]
 801477c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801477e:	697b      	ldr	r3, [r7, #20]
 8014780:	2200      	movs	r2, #0
 8014782:	719a      	strb	r2, [r3, #6]
 8014784:	2200      	movs	r2, #0
 8014786:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8014788:	69fb      	ldr	r3, [r7, #28]
 801478a:	891b      	ldrh	r3, [r3, #8]
 801478c:	4618      	mov	r0, r3
 801478e:	f7f7 fd69 	bl	800c264 <lwip_htons>
 8014792:	4603      	mov	r3, r0
 8014794:	461a      	mov	r2, r3
 8014796:	697b      	ldr	r3, [r7, #20]
 8014798:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801479a:	2311      	movs	r3, #17
 801479c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	7adb      	ldrb	r3, [r3, #11]
 80147a2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	7a9b      	ldrb	r3, [r3, #10]
 80147a8:	7cb9      	ldrb	r1, [r7, #18]
 80147aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147ac:	9202      	str	r2, [sp, #8]
 80147ae:	7cfa      	ldrb	r2, [r7, #19]
 80147b0:	9201      	str	r2, [sp, #4]
 80147b2:	9300      	str	r3, [sp, #0]
 80147b4:	460b      	mov	r3, r1
 80147b6:	687a      	ldr	r2, [r7, #4]
 80147b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80147ba:	69f8      	ldr	r0, [r7, #28]
 80147bc:	f001 fc22 	bl	8016004 <ip4_output_if_src>
 80147c0:	4603      	mov	r3, r0
 80147c2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80147c4:	69fa      	ldr	r2, [r7, #28]
 80147c6:	68bb      	ldr	r3, [r7, #8]
 80147c8:	429a      	cmp	r2, r3
 80147ca:	d004      	beq.n	80147d6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80147cc:	69f8      	ldr	r0, [r7, #28]
 80147ce:	f7f9 f891 	bl	800d8f4 <pbuf_free>
    q = NULL;
 80147d2:	2300      	movs	r3, #0
 80147d4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80147d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80147da:	4618      	mov	r0, r3
 80147dc:	3720      	adds	r7, #32
 80147de:	46bd      	mov	sp, r7
 80147e0:	bd80      	pop	{r7, pc}
 80147e2:	bf00      	nop
 80147e4:	0801b118 	.word	0x0801b118
 80147e8:	0801b304 	.word	0x0801b304
 80147ec:	0801b16c 	.word	0x0801b16c
 80147f0:	0801b324 	.word	0x0801b324
 80147f4:	0801b344 	.word	0x0801b344
 80147f8:	0801b368 	.word	0x0801b368
 80147fc:	0801b38c 	.word	0x0801b38c
 8014800:	0801b3b0 	.word	0x0801b3b0

08014804 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b086      	sub	sp, #24
 8014808:	af00      	add	r7, sp, #0
 801480a:	60f8      	str	r0, [r7, #12]
 801480c:	60b9      	str	r1, [r7, #8]
 801480e:	4613      	mov	r3, r2
 8014810:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014812:	68bb      	ldr	r3, [r7, #8]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d101      	bne.n	801481c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014818:	4b39      	ldr	r3, [pc, #228]	; (8014900 <udp_bind+0xfc>)
 801481a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d109      	bne.n	8014836 <udp_bind+0x32>
 8014822:	4b38      	ldr	r3, [pc, #224]	; (8014904 <udp_bind+0x100>)
 8014824:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014828:	4937      	ldr	r1, [pc, #220]	; (8014908 <udp_bind+0x104>)
 801482a:	4838      	ldr	r0, [pc, #224]	; (801490c <udp_bind+0x108>)
 801482c:	f002 ffba 	bl	80177a4 <iprintf>
 8014830:	f06f 030f 	mvn.w	r3, #15
 8014834:	e060      	b.n	80148f8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014836:	2300      	movs	r3, #0
 8014838:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801483a:	4b35      	ldr	r3, [pc, #212]	; (8014910 <udp_bind+0x10c>)
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	617b      	str	r3, [r7, #20]
 8014840:	e009      	b.n	8014856 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014842:	68fa      	ldr	r2, [r7, #12]
 8014844:	697b      	ldr	r3, [r7, #20]
 8014846:	429a      	cmp	r2, r3
 8014848:	d102      	bne.n	8014850 <udp_bind+0x4c>
      rebind = 1;
 801484a:	2301      	movs	r3, #1
 801484c:	74fb      	strb	r3, [r7, #19]
      break;
 801484e:	e005      	b.n	801485c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014850:	697b      	ldr	r3, [r7, #20]
 8014852:	68db      	ldr	r3, [r3, #12]
 8014854:	617b      	str	r3, [r7, #20]
 8014856:	697b      	ldr	r3, [r7, #20]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d1f2      	bne.n	8014842 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801485c:	88fb      	ldrh	r3, [r7, #6]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d109      	bne.n	8014876 <udp_bind+0x72>
    port = udp_new_port();
 8014862:	f7ff fc35 	bl	80140d0 <udp_new_port>
 8014866:	4603      	mov	r3, r0
 8014868:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801486a:	88fb      	ldrh	r3, [r7, #6]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d12c      	bne.n	80148ca <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014870:	f06f 0307 	mvn.w	r3, #7
 8014874:	e040      	b.n	80148f8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014876:	4b26      	ldr	r3, [pc, #152]	; (8014910 <udp_bind+0x10c>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	617b      	str	r3, [r7, #20]
 801487c:	e022      	b.n	80148c4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801487e:	68fa      	ldr	r2, [r7, #12]
 8014880:	697b      	ldr	r3, [r7, #20]
 8014882:	429a      	cmp	r2, r3
 8014884:	d01b      	beq.n	80148be <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014886:	697b      	ldr	r3, [r7, #20]
 8014888:	8a5b      	ldrh	r3, [r3, #18]
 801488a:	88fa      	ldrh	r2, [r7, #6]
 801488c:	429a      	cmp	r2, r3
 801488e:	d116      	bne.n	80148be <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014890:	697b      	ldr	r3, [r7, #20]
 8014892:	681a      	ldr	r2, [r3, #0]
 8014894:	68bb      	ldr	r3, [r7, #8]
 8014896:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014898:	429a      	cmp	r2, r3
 801489a:	d00d      	beq.n	80148b8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801489c:	68bb      	ldr	r3, [r7, #8]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d00a      	beq.n	80148b8 <udp_bind+0xb4>
 80148a2:	68bb      	ldr	r3, [r7, #8]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d006      	beq.n	80148b8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80148aa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d003      	beq.n	80148b8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80148b0:	697b      	ldr	r3, [r7, #20]
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d102      	bne.n	80148be <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80148b8:	f06f 0307 	mvn.w	r3, #7
 80148bc:	e01c      	b.n	80148f8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80148be:	697b      	ldr	r3, [r7, #20]
 80148c0:	68db      	ldr	r3, [r3, #12]
 80148c2:	617b      	str	r3, [r7, #20]
 80148c4:	697b      	ldr	r3, [r7, #20]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d1d9      	bne.n	801487e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80148ca:	68bb      	ldr	r3, [r7, #8]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d002      	beq.n	80148d6 <udp_bind+0xd2>
 80148d0:	68bb      	ldr	r3, [r7, #8]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	e000      	b.n	80148d8 <udp_bind+0xd4>
 80148d6:	2300      	movs	r3, #0
 80148d8:	68fa      	ldr	r2, [r7, #12]
 80148da:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	88fa      	ldrh	r2, [r7, #6]
 80148e0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80148e2:	7cfb      	ldrb	r3, [r7, #19]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d106      	bne.n	80148f6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80148e8:	4b09      	ldr	r3, [pc, #36]	; (8014910 <udp_bind+0x10c>)
 80148ea:	681a      	ldr	r2, [r3, #0]
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80148f0:	4a07      	ldr	r2, [pc, #28]	; (8014910 <udp_bind+0x10c>)
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80148f6:	2300      	movs	r3, #0
}
 80148f8:	4618      	mov	r0, r3
 80148fa:	3718      	adds	r7, #24
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}
 8014900:	0801bc74 	.word	0x0801bc74
 8014904:	0801b118 	.word	0x0801b118
 8014908:	0801b3e0 	.word	0x0801b3e0
 801490c:	0801b16c 	.word	0x0801b16c
 8014910:	2000d6a8 	.word	0x2000d6a8

08014914 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014914:	b580      	push	{r7, lr}
 8014916:	b084      	sub	sp, #16
 8014918:	af00      	add	r7, sp, #0
 801491a:	60f8      	str	r0, [r7, #12]
 801491c:	60b9      	str	r1, [r7, #8]
 801491e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d107      	bne.n	8014936 <udp_recv+0x22>
 8014926:	4b08      	ldr	r3, [pc, #32]	; (8014948 <udp_recv+0x34>)
 8014928:	f240 428a 	movw	r2, #1162	; 0x48a
 801492c:	4907      	ldr	r1, [pc, #28]	; (801494c <udp_recv+0x38>)
 801492e:	4808      	ldr	r0, [pc, #32]	; (8014950 <udp_recv+0x3c>)
 8014930:	f002 ff38 	bl	80177a4 <iprintf>
 8014934:	e005      	b.n	8014942 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	68ba      	ldr	r2, [r7, #8]
 801493a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	687a      	ldr	r2, [r7, #4]
 8014940:	61da      	str	r2, [r3, #28]
}
 8014942:	3710      	adds	r7, #16
 8014944:	46bd      	mov	sp, r7
 8014946:	bd80      	pop	{r7, pc}
 8014948:	0801b118 	.word	0x0801b118
 801494c:	0801b44c 	.word	0x0801b44c
 8014950:	0801b16c 	.word	0x0801b16c

08014954 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014954:	b580      	push	{r7, lr}
 8014956:	b084      	sub	sp, #16
 8014958:	af00      	add	r7, sp, #0
 801495a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d107      	bne.n	8014972 <udp_remove+0x1e>
 8014962:	4b19      	ldr	r3, [pc, #100]	; (80149c8 <udp_remove+0x74>)
 8014964:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014968:	4918      	ldr	r1, [pc, #96]	; (80149cc <udp_remove+0x78>)
 801496a:	4819      	ldr	r0, [pc, #100]	; (80149d0 <udp_remove+0x7c>)
 801496c:	f002 ff1a 	bl	80177a4 <iprintf>
 8014970:	e026      	b.n	80149c0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014972:	4b18      	ldr	r3, [pc, #96]	; (80149d4 <udp_remove+0x80>)
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	687a      	ldr	r2, [r7, #4]
 8014978:	429a      	cmp	r2, r3
 801497a:	d105      	bne.n	8014988 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801497c:	4b15      	ldr	r3, [pc, #84]	; (80149d4 <udp_remove+0x80>)
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	68db      	ldr	r3, [r3, #12]
 8014982:	4a14      	ldr	r2, [pc, #80]	; (80149d4 <udp_remove+0x80>)
 8014984:	6013      	str	r3, [r2, #0]
 8014986:	e017      	b.n	80149b8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014988:	4b12      	ldr	r3, [pc, #72]	; (80149d4 <udp_remove+0x80>)
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	60fb      	str	r3, [r7, #12]
 801498e:	e010      	b.n	80149b2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	68db      	ldr	r3, [r3, #12]
 8014994:	2b00      	cmp	r3, #0
 8014996:	d009      	beq.n	80149ac <udp_remove+0x58>
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	68db      	ldr	r3, [r3, #12]
 801499c:	687a      	ldr	r2, [r7, #4]
 801499e:	429a      	cmp	r2, r3
 80149a0:	d104      	bne.n	80149ac <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	68da      	ldr	r2, [r3, #12]
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	60da      	str	r2, [r3, #12]
        break;
 80149aa:	e005      	b.n	80149b8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	68db      	ldr	r3, [r3, #12]
 80149b0:	60fb      	str	r3, [r7, #12]
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d1eb      	bne.n	8014990 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80149b8:	6879      	ldr	r1, [r7, #4]
 80149ba:	2000      	movs	r0, #0
 80149bc:	f7f8 f95a 	bl	800cc74 <memp_free>
}
 80149c0:	3710      	adds	r7, #16
 80149c2:	46bd      	mov	sp, r7
 80149c4:	bd80      	pop	{r7, pc}
 80149c6:	bf00      	nop
 80149c8:	0801b118 	.word	0x0801b118
 80149cc:	0801b464 	.word	0x0801b464
 80149d0:	0801b16c 	.word	0x0801b16c
 80149d4:	2000d6a8 	.word	0x2000d6a8

080149d8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80149d8:	b580      	push	{r7, lr}
 80149da:	b082      	sub	sp, #8
 80149dc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80149de:	2000      	movs	r0, #0
 80149e0:	f7f8 f8f6 	bl	800cbd0 <memp_malloc>
 80149e4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d007      	beq.n	80149fc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80149ec:	2220      	movs	r2, #32
 80149ee:	2100      	movs	r1, #0
 80149f0:	6878      	ldr	r0, [r7, #4]
 80149f2:	f002 fe25 	bl	8017640 <memset>
    pcb->ttl = UDP_TTL;
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	22ff      	movs	r2, #255	; 0xff
 80149fa:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80149fc:	687b      	ldr	r3, [r7, #4]
}
 80149fe:	4618      	mov	r0, r3
 8014a00:	3708      	adds	r7, #8
 8014a02:	46bd      	mov	sp, r7
 8014a04:	bd80      	pop	{r7, pc}

08014a06 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8014a06:	b580      	push	{r7, lr}
 8014a08:	b084      	sub	sp, #16
 8014a0a:	af00      	add	r7, sp, #0
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014a10:	f7ff ffe2 	bl	80149d8 <udp_new>
 8014a14:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014a16:	68fb      	ldr	r3, [r7, #12]
}
 8014a18:	4618      	mov	r0, r3
 8014a1a:	3710      	adds	r7, #16
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	bd80      	pop	{r7, pc}

08014a20 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014a20:	b480      	push	{r7}
 8014a22:	b085      	sub	sp, #20
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	6078      	str	r0, [r7, #4]
 8014a28:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d01e      	beq.n	8014a6e <udp_netif_ip_addr_changed+0x4e>
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d01a      	beq.n	8014a6e <udp_netif_ip_addr_changed+0x4e>
 8014a38:	683b      	ldr	r3, [r7, #0]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d017      	beq.n	8014a6e <udp_netif_ip_addr_changed+0x4e>
 8014a3e:	683b      	ldr	r3, [r7, #0]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d013      	beq.n	8014a6e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014a46:	4b0d      	ldr	r3, [pc, #52]	; (8014a7c <udp_netif_ip_addr_changed+0x5c>)
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	60fb      	str	r3, [r7, #12]
 8014a4c:	e00c      	b.n	8014a68 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	681a      	ldr	r2, [r3, #0]
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	429a      	cmp	r2, r3
 8014a58:	d103      	bne.n	8014a62 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014a5a:	683b      	ldr	r3, [r7, #0]
 8014a5c:	681a      	ldr	r2, [r3, #0]
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	68db      	ldr	r3, [r3, #12]
 8014a66:	60fb      	str	r3, [r7, #12]
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d1ef      	bne.n	8014a4e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014a6e:	bf00      	nop
 8014a70:	3714      	adds	r7, #20
 8014a72:	46bd      	mov	sp, r7
 8014a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a78:	4770      	bx	lr
 8014a7a:	bf00      	nop
 8014a7c:	2000d6a8 	.word	0x2000d6a8

08014a80 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b082      	sub	sp, #8
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014a88:	4915      	ldr	r1, [pc, #84]	; (8014ae0 <etharp_free_entry+0x60>)
 8014a8a:	687a      	ldr	r2, [r7, #4]
 8014a8c:	4613      	mov	r3, r2
 8014a8e:	005b      	lsls	r3, r3, #1
 8014a90:	4413      	add	r3, r2
 8014a92:	00db      	lsls	r3, r3, #3
 8014a94:	440b      	add	r3, r1
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d013      	beq.n	8014ac4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014a9c:	4910      	ldr	r1, [pc, #64]	; (8014ae0 <etharp_free_entry+0x60>)
 8014a9e:	687a      	ldr	r2, [r7, #4]
 8014aa0:	4613      	mov	r3, r2
 8014aa2:	005b      	lsls	r3, r3, #1
 8014aa4:	4413      	add	r3, r2
 8014aa6:	00db      	lsls	r3, r3, #3
 8014aa8:	440b      	add	r3, r1
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	4618      	mov	r0, r3
 8014aae:	f7f8 ff21 	bl	800d8f4 <pbuf_free>
    arp_table[i].q = NULL;
 8014ab2:	490b      	ldr	r1, [pc, #44]	; (8014ae0 <etharp_free_entry+0x60>)
 8014ab4:	687a      	ldr	r2, [r7, #4]
 8014ab6:	4613      	mov	r3, r2
 8014ab8:	005b      	lsls	r3, r3, #1
 8014aba:	4413      	add	r3, r2
 8014abc:	00db      	lsls	r3, r3, #3
 8014abe:	440b      	add	r3, r1
 8014ac0:	2200      	movs	r2, #0
 8014ac2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014ac4:	4906      	ldr	r1, [pc, #24]	; (8014ae0 <etharp_free_entry+0x60>)
 8014ac6:	687a      	ldr	r2, [r7, #4]
 8014ac8:	4613      	mov	r3, r2
 8014aca:	005b      	lsls	r3, r3, #1
 8014acc:	4413      	add	r3, r2
 8014ace:	00db      	lsls	r3, r3, #3
 8014ad0:	440b      	add	r3, r1
 8014ad2:	3314      	adds	r3, #20
 8014ad4:	2200      	movs	r2, #0
 8014ad6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014ad8:	bf00      	nop
 8014ada:	3708      	adds	r7, #8
 8014adc:	46bd      	mov	sp, r7
 8014ade:	bd80      	pop	{r7, pc}
 8014ae0:	20006888 	.word	0x20006888

08014ae4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b082      	sub	sp, #8
 8014ae8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014aea:	2300      	movs	r3, #0
 8014aec:	607b      	str	r3, [r7, #4]
 8014aee:	e096      	b.n	8014c1e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014af0:	494f      	ldr	r1, [pc, #316]	; (8014c30 <etharp_tmr+0x14c>)
 8014af2:	687a      	ldr	r2, [r7, #4]
 8014af4:	4613      	mov	r3, r2
 8014af6:	005b      	lsls	r3, r3, #1
 8014af8:	4413      	add	r3, r2
 8014afa:	00db      	lsls	r3, r3, #3
 8014afc:	440b      	add	r3, r1
 8014afe:	3314      	adds	r3, #20
 8014b00:	781b      	ldrb	r3, [r3, #0]
 8014b02:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014b04:	78fb      	ldrb	r3, [r7, #3]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	f000 8086 	beq.w	8014c18 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014b0c:	4948      	ldr	r1, [pc, #288]	; (8014c30 <etharp_tmr+0x14c>)
 8014b0e:	687a      	ldr	r2, [r7, #4]
 8014b10:	4613      	mov	r3, r2
 8014b12:	005b      	lsls	r3, r3, #1
 8014b14:	4413      	add	r3, r2
 8014b16:	00db      	lsls	r3, r3, #3
 8014b18:	440b      	add	r3, r1
 8014b1a:	3312      	adds	r3, #18
 8014b1c:	881b      	ldrh	r3, [r3, #0]
 8014b1e:	3301      	adds	r3, #1
 8014b20:	b298      	uxth	r0, r3
 8014b22:	4943      	ldr	r1, [pc, #268]	; (8014c30 <etharp_tmr+0x14c>)
 8014b24:	687a      	ldr	r2, [r7, #4]
 8014b26:	4613      	mov	r3, r2
 8014b28:	005b      	lsls	r3, r3, #1
 8014b2a:	4413      	add	r3, r2
 8014b2c:	00db      	lsls	r3, r3, #3
 8014b2e:	440b      	add	r3, r1
 8014b30:	3312      	adds	r3, #18
 8014b32:	4602      	mov	r2, r0
 8014b34:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014b36:	493e      	ldr	r1, [pc, #248]	; (8014c30 <etharp_tmr+0x14c>)
 8014b38:	687a      	ldr	r2, [r7, #4]
 8014b3a:	4613      	mov	r3, r2
 8014b3c:	005b      	lsls	r3, r3, #1
 8014b3e:	4413      	add	r3, r2
 8014b40:	00db      	lsls	r3, r3, #3
 8014b42:	440b      	add	r3, r1
 8014b44:	3312      	adds	r3, #18
 8014b46:	881b      	ldrh	r3, [r3, #0]
 8014b48:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014b4c:	d215      	bcs.n	8014b7a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014b4e:	4938      	ldr	r1, [pc, #224]	; (8014c30 <etharp_tmr+0x14c>)
 8014b50:	687a      	ldr	r2, [r7, #4]
 8014b52:	4613      	mov	r3, r2
 8014b54:	005b      	lsls	r3, r3, #1
 8014b56:	4413      	add	r3, r2
 8014b58:	00db      	lsls	r3, r3, #3
 8014b5a:	440b      	add	r3, r1
 8014b5c:	3314      	adds	r3, #20
 8014b5e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014b60:	2b01      	cmp	r3, #1
 8014b62:	d10e      	bne.n	8014b82 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014b64:	4932      	ldr	r1, [pc, #200]	; (8014c30 <etharp_tmr+0x14c>)
 8014b66:	687a      	ldr	r2, [r7, #4]
 8014b68:	4613      	mov	r3, r2
 8014b6a:	005b      	lsls	r3, r3, #1
 8014b6c:	4413      	add	r3, r2
 8014b6e:	00db      	lsls	r3, r3, #3
 8014b70:	440b      	add	r3, r1
 8014b72:	3312      	adds	r3, #18
 8014b74:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014b76:	2b04      	cmp	r3, #4
 8014b78:	d903      	bls.n	8014b82 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014b7a:	6878      	ldr	r0, [r7, #4]
 8014b7c:	f7ff ff80 	bl	8014a80 <etharp_free_entry>
 8014b80:	e04a      	b.n	8014c18 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014b82:	492b      	ldr	r1, [pc, #172]	; (8014c30 <etharp_tmr+0x14c>)
 8014b84:	687a      	ldr	r2, [r7, #4]
 8014b86:	4613      	mov	r3, r2
 8014b88:	005b      	lsls	r3, r3, #1
 8014b8a:	4413      	add	r3, r2
 8014b8c:	00db      	lsls	r3, r3, #3
 8014b8e:	440b      	add	r3, r1
 8014b90:	3314      	adds	r3, #20
 8014b92:	781b      	ldrb	r3, [r3, #0]
 8014b94:	2b03      	cmp	r3, #3
 8014b96:	d10a      	bne.n	8014bae <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014b98:	4925      	ldr	r1, [pc, #148]	; (8014c30 <etharp_tmr+0x14c>)
 8014b9a:	687a      	ldr	r2, [r7, #4]
 8014b9c:	4613      	mov	r3, r2
 8014b9e:	005b      	lsls	r3, r3, #1
 8014ba0:	4413      	add	r3, r2
 8014ba2:	00db      	lsls	r3, r3, #3
 8014ba4:	440b      	add	r3, r1
 8014ba6:	3314      	adds	r3, #20
 8014ba8:	2204      	movs	r2, #4
 8014baa:	701a      	strb	r2, [r3, #0]
 8014bac:	e034      	b.n	8014c18 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014bae:	4920      	ldr	r1, [pc, #128]	; (8014c30 <etharp_tmr+0x14c>)
 8014bb0:	687a      	ldr	r2, [r7, #4]
 8014bb2:	4613      	mov	r3, r2
 8014bb4:	005b      	lsls	r3, r3, #1
 8014bb6:	4413      	add	r3, r2
 8014bb8:	00db      	lsls	r3, r3, #3
 8014bba:	440b      	add	r3, r1
 8014bbc:	3314      	adds	r3, #20
 8014bbe:	781b      	ldrb	r3, [r3, #0]
 8014bc0:	2b04      	cmp	r3, #4
 8014bc2:	d10a      	bne.n	8014bda <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014bc4:	491a      	ldr	r1, [pc, #104]	; (8014c30 <etharp_tmr+0x14c>)
 8014bc6:	687a      	ldr	r2, [r7, #4]
 8014bc8:	4613      	mov	r3, r2
 8014bca:	005b      	lsls	r3, r3, #1
 8014bcc:	4413      	add	r3, r2
 8014bce:	00db      	lsls	r3, r3, #3
 8014bd0:	440b      	add	r3, r1
 8014bd2:	3314      	adds	r3, #20
 8014bd4:	2202      	movs	r2, #2
 8014bd6:	701a      	strb	r2, [r3, #0]
 8014bd8:	e01e      	b.n	8014c18 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014bda:	4915      	ldr	r1, [pc, #84]	; (8014c30 <etharp_tmr+0x14c>)
 8014bdc:	687a      	ldr	r2, [r7, #4]
 8014bde:	4613      	mov	r3, r2
 8014be0:	005b      	lsls	r3, r3, #1
 8014be2:	4413      	add	r3, r2
 8014be4:	00db      	lsls	r3, r3, #3
 8014be6:	440b      	add	r3, r1
 8014be8:	3314      	adds	r3, #20
 8014bea:	781b      	ldrb	r3, [r3, #0]
 8014bec:	2b01      	cmp	r3, #1
 8014bee:	d113      	bne.n	8014c18 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014bf0:	490f      	ldr	r1, [pc, #60]	; (8014c30 <etharp_tmr+0x14c>)
 8014bf2:	687a      	ldr	r2, [r7, #4]
 8014bf4:	4613      	mov	r3, r2
 8014bf6:	005b      	lsls	r3, r3, #1
 8014bf8:	4413      	add	r3, r2
 8014bfa:	00db      	lsls	r3, r3, #3
 8014bfc:	440b      	add	r3, r1
 8014bfe:	3308      	adds	r3, #8
 8014c00:	6818      	ldr	r0, [r3, #0]
 8014c02:	687a      	ldr	r2, [r7, #4]
 8014c04:	4613      	mov	r3, r2
 8014c06:	005b      	lsls	r3, r3, #1
 8014c08:	4413      	add	r3, r2
 8014c0a:	00db      	lsls	r3, r3, #3
 8014c0c:	4a08      	ldr	r2, [pc, #32]	; (8014c30 <etharp_tmr+0x14c>)
 8014c0e:	4413      	add	r3, r2
 8014c10:	3304      	adds	r3, #4
 8014c12:	4619      	mov	r1, r3
 8014c14:	f000 fe6e 	bl	80158f4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	3301      	adds	r3, #1
 8014c1c:	607b      	str	r3, [r7, #4]
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	2b09      	cmp	r3, #9
 8014c22:	f77f af65 	ble.w	8014af0 <etharp_tmr+0xc>
      }
    }
  }
}
 8014c26:	bf00      	nop
 8014c28:	bf00      	nop
 8014c2a:	3708      	adds	r7, #8
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	bd80      	pop	{r7, pc}
 8014c30:	20006888 	.word	0x20006888

08014c34 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b08a      	sub	sp, #40	; 0x28
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	60f8      	str	r0, [r7, #12]
 8014c3c:	460b      	mov	r3, r1
 8014c3e:	607a      	str	r2, [r7, #4]
 8014c40:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014c42:	230a      	movs	r3, #10
 8014c44:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014c46:	230a      	movs	r3, #10
 8014c48:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014c4a:	230a      	movs	r3, #10
 8014c4c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014c4e:	2300      	movs	r3, #0
 8014c50:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014c52:	230a      	movs	r3, #10
 8014c54:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014c56:	2300      	movs	r3, #0
 8014c58:	83bb      	strh	r3, [r7, #28]
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	837b      	strh	r3, [r7, #26]
 8014c5e:	2300      	movs	r3, #0
 8014c60:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014c62:	2300      	movs	r3, #0
 8014c64:	843b      	strh	r3, [r7, #32]
 8014c66:	e0ae      	b.n	8014dc6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014c68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c6c:	49a6      	ldr	r1, [pc, #664]	; (8014f08 <etharp_find_entry+0x2d4>)
 8014c6e:	4613      	mov	r3, r2
 8014c70:	005b      	lsls	r3, r3, #1
 8014c72:	4413      	add	r3, r2
 8014c74:	00db      	lsls	r3, r3, #3
 8014c76:	440b      	add	r3, r1
 8014c78:	3314      	adds	r3, #20
 8014c7a:	781b      	ldrb	r3, [r3, #0]
 8014c7c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014c7e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014c82:	2b0a      	cmp	r3, #10
 8014c84:	d105      	bne.n	8014c92 <etharp_find_entry+0x5e>
 8014c86:	7dfb      	ldrb	r3, [r7, #23]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d102      	bne.n	8014c92 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014c8c:	8c3b      	ldrh	r3, [r7, #32]
 8014c8e:	847b      	strh	r3, [r7, #34]	; 0x22
 8014c90:	e095      	b.n	8014dbe <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014c92:	7dfb      	ldrb	r3, [r7, #23]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	f000 8092 	beq.w	8014dbe <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014c9a:	7dfb      	ldrb	r3, [r7, #23]
 8014c9c:	2b01      	cmp	r3, #1
 8014c9e:	d009      	beq.n	8014cb4 <etharp_find_entry+0x80>
 8014ca0:	7dfb      	ldrb	r3, [r7, #23]
 8014ca2:	2b01      	cmp	r3, #1
 8014ca4:	d806      	bhi.n	8014cb4 <etharp_find_entry+0x80>
 8014ca6:	4b99      	ldr	r3, [pc, #612]	; (8014f0c <etharp_find_entry+0x2d8>)
 8014ca8:	f240 1223 	movw	r2, #291	; 0x123
 8014cac:	4998      	ldr	r1, [pc, #608]	; (8014f10 <etharp_find_entry+0x2dc>)
 8014cae:	4899      	ldr	r0, [pc, #612]	; (8014f14 <etharp_find_entry+0x2e0>)
 8014cb0:	f002 fd78 	bl	80177a4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d020      	beq.n	8014cfc <etharp_find_entry+0xc8>
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	6819      	ldr	r1, [r3, #0]
 8014cbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014cc2:	4891      	ldr	r0, [pc, #580]	; (8014f08 <etharp_find_entry+0x2d4>)
 8014cc4:	4613      	mov	r3, r2
 8014cc6:	005b      	lsls	r3, r3, #1
 8014cc8:	4413      	add	r3, r2
 8014cca:	00db      	lsls	r3, r3, #3
 8014ccc:	4403      	add	r3, r0
 8014cce:	3304      	adds	r3, #4
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	4299      	cmp	r1, r3
 8014cd4:	d112      	bne.n	8014cfc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d00c      	beq.n	8014cf6 <etharp_find_entry+0xc2>
 8014cdc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ce0:	4989      	ldr	r1, [pc, #548]	; (8014f08 <etharp_find_entry+0x2d4>)
 8014ce2:	4613      	mov	r3, r2
 8014ce4:	005b      	lsls	r3, r3, #1
 8014ce6:	4413      	add	r3, r2
 8014ce8:	00db      	lsls	r3, r3, #3
 8014cea:	440b      	add	r3, r1
 8014cec:	3308      	adds	r3, #8
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	687a      	ldr	r2, [r7, #4]
 8014cf2:	429a      	cmp	r2, r3
 8014cf4:	d102      	bne.n	8014cfc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014cf6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014cfa:	e100      	b.n	8014efe <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014cfc:	7dfb      	ldrb	r3, [r7, #23]
 8014cfe:	2b01      	cmp	r3, #1
 8014d00:	d140      	bne.n	8014d84 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014d02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d06:	4980      	ldr	r1, [pc, #512]	; (8014f08 <etharp_find_entry+0x2d4>)
 8014d08:	4613      	mov	r3, r2
 8014d0a:	005b      	lsls	r3, r3, #1
 8014d0c:	4413      	add	r3, r2
 8014d0e:	00db      	lsls	r3, r3, #3
 8014d10:	440b      	add	r3, r1
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d01a      	beq.n	8014d4e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014d18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d1c:	497a      	ldr	r1, [pc, #488]	; (8014f08 <etharp_find_entry+0x2d4>)
 8014d1e:	4613      	mov	r3, r2
 8014d20:	005b      	lsls	r3, r3, #1
 8014d22:	4413      	add	r3, r2
 8014d24:	00db      	lsls	r3, r3, #3
 8014d26:	440b      	add	r3, r1
 8014d28:	3312      	adds	r3, #18
 8014d2a:	881b      	ldrh	r3, [r3, #0]
 8014d2c:	8bba      	ldrh	r2, [r7, #28]
 8014d2e:	429a      	cmp	r2, r3
 8014d30:	d845      	bhi.n	8014dbe <etharp_find_entry+0x18a>
            old_queue = i;
 8014d32:	8c3b      	ldrh	r3, [r7, #32]
 8014d34:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014d36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d3a:	4973      	ldr	r1, [pc, #460]	; (8014f08 <etharp_find_entry+0x2d4>)
 8014d3c:	4613      	mov	r3, r2
 8014d3e:	005b      	lsls	r3, r3, #1
 8014d40:	4413      	add	r3, r2
 8014d42:	00db      	lsls	r3, r3, #3
 8014d44:	440b      	add	r3, r1
 8014d46:	3312      	adds	r3, #18
 8014d48:	881b      	ldrh	r3, [r3, #0]
 8014d4a:	83bb      	strh	r3, [r7, #28]
 8014d4c:	e037      	b.n	8014dbe <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014d4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d52:	496d      	ldr	r1, [pc, #436]	; (8014f08 <etharp_find_entry+0x2d4>)
 8014d54:	4613      	mov	r3, r2
 8014d56:	005b      	lsls	r3, r3, #1
 8014d58:	4413      	add	r3, r2
 8014d5a:	00db      	lsls	r3, r3, #3
 8014d5c:	440b      	add	r3, r1
 8014d5e:	3312      	adds	r3, #18
 8014d60:	881b      	ldrh	r3, [r3, #0]
 8014d62:	8b7a      	ldrh	r2, [r7, #26]
 8014d64:	429a      	cmp	r2, r3
 8014d66:	d82a      	bhi.n	8014dbe <etharp_find_entry+0x18a>
            old_pending = i;
 8014d68:	8c3b      	ldrh	r3, [r7, #32]
 8014d6a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014d6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d70:	4965      	ldr	r1, [pc, #404]	; (8014f08 <etharp_find_entry+0x2d4>)
 8014d72:	4613      	mov	r3, r2
 8014d74:	005b      	lsls	r3, r3, #1
 8014d76:	4413      	add	r3, r2
 8014d78:	00db      	lsls	r3, r3, #3
 8014d7a:	440b      	add	r3, r1
 8014d7c:	3312      	adds	r3, #18
 8014d7e:	881b      	ldrh	r3, [r3, #0]
 8014d80:	837b      	strh	r3, [r7, #26]
 8014d82:	e01c      	b.n	8014dbe <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014d84:	7dfb      	ldrb	r3, [r7, #23]
 8014d86:	2b01      	cmp	r3, #1
 8014d88:	d919      	bls.n	8014dbe <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014d8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d8e:	495e      	ldr	r1, [pc, #376]	; (8014f08 <etharp_find_entry+0x2d4>)
 8014d90:	4613      	mov	r3, r2
 8014d92:	005b      	lsls	r3, r3, #1
 8014d94:	4413      	add	r3, r2
 8014d96:	00db      	lsls	r3, r3, #3
 8014d98:	440b      	add	r3, r1
 8014d9a:	3312      	adds	r3, #18
 8014d9c:	881b      	ldrh	r3, [r3, #0]
 8014d9e:	8b3a      	ldrh	r2, [r7, #24]
 8014da0:	429a      	cmp	r2, r3
 8014da2:	d80c      	bhi.n	8014dbe <etharp_find_entry+0x18a>
            old_stable = i;
 8014da4:	8c3b      	ldrh	r3, [r7, #32]
 8014da6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014da8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014dac:	4956      	ldr	r1, [pc, #344]	; (8014f08 <etharp_find_entry+0x2d4>)
 8014dae:	4613      	mov	r3, r2
 8014db0:	005b      	lsls	r3, r3, #1
 8014db2:	4413      	add	r3, r2
 8014db4:	00db      	lsls	r3, r3, #3
 8014db6:	440b      	add	r3, r1
 8014db8:	3312      	adds	r3, #18
 8014dba:	881b      	ldrh	r3, [r3, #0]
 8014dbc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014dbe:	8c3b      	ldrh	r3, [r7, #32]
 8014dc0:	3301      	adds	r3, #1
 8014dc2:	b29b      	uxth	r3, r3
 8014dc4:	843b      	strh	r3, [r7, #32]
 8014dc6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014dca:	2b09      	cmp	r3, #9
 8014dcc:	f77f af4c 	ble.w	8014c68 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014dd0:	7afb      	ldrb	r3, [r7, #11]
 8014dd2:	f003 0302 	and.w	r3, r3, #2
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d108      	bne.n	8014dec <etharp_find_entry+0x1b8>
 8014dda:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014dde:	2b0a      	cmp	r3, #10
 8014de0:	d107      	bne.n	8014df2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014de2:	7afb      	ldrb	r3, [r7, #11]
 8014de4:	f003 0301 	and.w	r3, r3, #1
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d102      	bne.n	8014df2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014dec:	f04f 33ff 	mov.w	r3, #4294967295
 8014df0:	e085      	b.n	8014efe <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014df2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014df6:	2b09      	cmp	r3, #9
 8014df8:	dc02      	bgt.n	8014e00 <etharp_find_entry+0x1cc>
    i = empty;
 8014dfa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014dfc:	843b      	strh	r3, [r7, #32]
 8014dfe:	e039      	b.n	8014e74 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014e00:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014e04:	2b09      	cmp	r3, #9
 8014e06:	dc14      	bgt.n	8014e32 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014e08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014e0a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014e0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e10:	493d      	ldr	r1, [pc, #244]	; (8014f08 <etharp_find_entry+0x2d4>)
 8014e12:	4613      	mov	r3, r2
 8014e14:	005b      	lsls	r3, r3, #1
 8014e16:	4413      	add	r3, r2
 8014e18:	00db      	lsls	r3, r3, #3
 8014e1a:	440b      	add	r3, r1
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d018      	beq.n	8014e54 <etharp_find_entry+0x220>
 8014e22:	4b3a      	ldr	r3, [pc, #232]	; (8014f0c <etharp_find_entry+0x2d8>)
 8014e24:	f240 126d 	movw	r2, #365	; 0x16d
 8014e28:	493b      	ldr	r1, [pc, #236]	; (8014f18 <etharp_find_entry+0x2e4>)
 8014e2a:	483a      	ldr	r0, [pc, #232]	; (8014f14 <etharp_find_entry+0x2e0>)
 8014e2c:	f002 fcba 	bl	80177a4 <iprintf>
 8014e30:	e010      	b.n	8014e54 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014e32:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014e36:	2b09      	cmp	r3, #9
 8014e38:	dc02      	bgt.n	8014e40 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014e3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014e3c:	843b      	strh	r3, [r7, #32]
 8014e3e:	e009      	b.n	8014e54 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014e40:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014e44:	2b09      	cmp	r3, #9
 8014e46:	dc02      	bgt.n	8014e4e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014e48:	8bfb      	ldrh	r3, [r7, #30]
 8014e4a:	843b      	strh	r3, [r7, #32]
 8014e4c:	e002      	b.n	8014e54 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8014e52:	e054      	b.n	8014efe <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014e54:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014e58:	2b09      	cmp	r3, #9
 8014e5a:	dd06      	ble.n	8014e6a <etharp_find_entry+0x236>
 8014e5c:	4b2b      	ldr	r3, [pc, #172]	; (8014f0c <etharp_find_entry+0x2d8>)
 8014e5e:	f240 127f 	movw	r2, #383	; 0x17f
 8014e62:	492e      	ldr	r1, [pc, #184]	; (8014f1c <etharp_find_entry+0x2e8>)
 8014e64:	482b      	ldr	r0, [pc, #172]	; (8014f14 <etharp_find_entry+0x2e0>)
 8014e66:	f002 fc9d 	bl	80177a4 <iprintf>
    etharp_free_entry(i);
 8014e6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f7ff fe06 	bl	8014a80 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014e74:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014e78:	2b09      	cmp	r3, #9
 8014e7a:	dd06      	ble.n	8014e8a <etharp_find_entry+0x256>
 8014e7c:	4b23      	ldr	r3, [pc, #140]	; (8014f0c <etharp_find_entry+0x2d8>)
 8014e7e:	f240 1283 	movw	r2, #387	; 0x183
 8014e82:	4926      	ldr	r1, [pc, #152]	; (8014f1c <etharp_find_entry+0x2e8>)
 8014e84:	4823      	ldr	r0, [pc, #140]	; (8014f14 <etharp_find_entry+0x2e0>)
 8014e86:	f002 fc8d 	bl	80177a4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014e8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e8e:	491e      	ldr	r1, [pc, #120]	; (8014f08 <etharp_find_entry+0x2d4>)
 8014e90:	4613      	mov	r3, r2
 8014e92:	005b      	lsls	r3, r3, #1
 8014e94:	4413      	add	r3, r2
 8014e96:	00db      	lsls	r3, r3, #3
 8014e98:	440b      	add	r3, r1
 8014e9a:	3314      	adds	r3, #20
 8014e9c:	781b      	ldrb	r3, [r3, #0]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d006      	beq.n	8014eb0 <etharp_find_entry+0x27c>
 8014ea2:	4b1a      	ldr	r3, [pc, #104]	; (8014f0c <etharp_find_entry+0x2d8>)
 8014ea4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014ea8:	491d      	ldr	r1, [pc, #116]	; (8014f20 <etharp_find_entry+0x2ec>)
 8014eaa:	481a      	ldr	r0, [pc, #104]	; (8014f14 <etharp_find_entry+0x2e0>)
 8014eac:	f002 fc7a 	bl	80177a4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d00b      	beq.n	8014ece <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014eb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	6819      	ldr	r1, [r3, #0]
 8014ebe:	4812      	ldr	r0, [pc, #72]	; (8014f08 <etharp_find_entry+0x2d4>)
 8014ec0:	4613      	mov	r3, r2
 8014ec2:	005b      	lsls	r3, r3, #1
 8014ec4:	4413      	add	r3, r2
 8014ec6:	00db      	lsls	r3, r3, #3
 8014ec8:	4403      	add	r3, r0
 8014eca:	3304      	adds	r3, #4
 8014ecc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014ece:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ed2:	490d      	ldr	r1, [pc, #52]	; (8014f08 <etharp_find_entry+0x2d4>)
 8014ed4:	4613      	mov	r3, r2
 8014ed6:	005b      	lsls	r3, r3, #1
 8014ed8:	4413      	add	r3, r2
 8014eda:	00db      	lsls	r3, r3, #3
 8014edc:	440b      	add	r3, r1
 8014ede:	3312      	adds	r3, #18
 8014ee0:	2200      	movs	r2, #0
 8014ee2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014ee4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ee8:	4907      	ldr	r1, [pc, #28]	; (8014f08 <etharp_find_entry+0x2d4>)
 8014eea:	4613      	mov	r3, r2
 8014eec:	005b      	lsls	r3, r3, #1
 8014eee:	4413      	add	r3, r2
 8014ef0:	00db      	lsls	r3, r3, #3
 8014ef2:	440b      	add	r3, r1
 8014ef4:	3308      	adds	r3, #8
 8014ef6:	687a      	ldr	r2, [r7, #4]
 8014ef8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014efa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014efe:	4618      	mov	r0, r3
 8014f00:	3728      	adds	r7, #40	; 0x28
 8014f02:	46bd      	mov	sp, r7
 8014f04:	bd80      	pop	{r7, pc}
 8014f06:	bf00      	nop
 8014f08:	20006888 	.word	0x20006888
 8014f0c:	0801b47c 	.word	0x0801b47c
 8014f10:	0801b4b4 	.word	0x0801b4b4
 8014f14:	0801b4f4 	.word	0x0801b4f4
 8014f18:	0801b51c 	.word	0x0801b51c
 8014f1c:	0801b534 	.word	0x0801b534
 8014f20:	0801b548 	.word	0x0801b548

08014f24 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b088      	sub	sp, #32
 8014f28:	af02      	add	r7, sp, #8
 8014f2a:	60f8      	str	r0, [r7, #12]
 8014f2c:	60b9      	str	r1, [r7, #8]
 8014f2e:	607a      	str	r2, [r7, #4]
 8014f30:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014f38:	2b06      	cmp	r3, #6
 8014f3a:	d006      	beq.n	8014f4a <etharp_update_arp_entry+0x26>
 8014f3c:	4b48      	ldr	r3, [pc, #288]	; (8015060 <etharp_update_arp_entry+0x13c>)
 8014f3e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014f42:	4948      	ldr	r1, [pc, #288]	; (8015064 <etharp_update_arp_entry+0x140>)
 8014f44:	4848      	ldr	r0, [pc, #288]	; (8015068 <etharp_update_arp_entry+0x144>)
 8014f46:	f002 fc2d 	bl	80177a4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014f4a:	68bb      	ldr	r3, [r7, #8]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d012      	beq.n	8014f76 <etharp_update_arp_entry+0x52>
 8014f50:	68bb      	ldr	r3, [r7, #8]
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d00e      	beq.n	8014f76 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014f58:	68bb      	ldr	r3, [r7, #8]
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	68f9      	ldr	r1, [r7, #12]
 8014f5e:	4618      	mov	r0, r3
 8014f60:	f001 f8fe 	bl	8016160 <ip4_addr_isbroadcast_u32>
 8014f64:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d105      	bne.n	8014f76 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014f6a:	68bb      	ldr	r3, [r7, #8]
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014f72:	2be0      	cmp	r3, #224	; 0xe0
 8014f74:	d102      	bne.n	8014f7c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014f76:	f06f 030f 	mvn.w	r3, #15
 8014f7a:	e06c      	b.n	8015056 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014f7c:	78fb      	ldrb	r3, [r7, #3]
 8014f7e:	68fa      	ldr	r2, [r7, #12]
 8014f80:	4619      	mov	r1, r3
 8014f82:	68b8      	ldr	r0, [r7, #8]
 8014f84:	f7ff fe56 	bl	8014c34 <etharp_find_entry>
 8014f88:	4603      	mov	r3, r0
 8014f8a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014f8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	da02      	bge.n	8014f9a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014f94:	8afb      	ldrh	r3, [r7, #22]
 8014f96:	b25b      	sxtb	r3, r3
 8014f98:	e05d      	b.n	8015056 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014f9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014f9e:	4933      	ldr	r1, [pc, #204]	; (801506c <etharp_update_arp_entry+0x148>)
 8014fa0:	4613      	mov	r3, r2
 8014fa2:	005b      	lsls	r3, r3, #1
 8014fa4:	4413      	add	r3, r2
 8014fa6:	00db      	lsls	r3, r3, #3
 8014fa8:	440b      	add	r3, r1
 8014faa:	3314      	adds	r3, #20
 8014fac:	2202      	movs	r2, #2
 8014fae:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014fb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014fb4:	492d      	ldr	r1, [pc, #180]	; (801506c <etharp_update_arp_entry+0x148>)
 8014fb6:	4613      	mov	r3, r2
 8014fb8:	005b      	lsls	r3, r3, #1
 8014fba:	4413      	add	r3, r2
 8014fbc:	00db      	lsls	r3, r3, #3
 8014fbe:	440b      	add	r3, r1
 8014fc0:	3308      	adds	r3, #8
 8014fc2:	68fa      	ldr	r2, [r7, #12]
 8014fc4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014fc6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014fca:	4613      	mov	r3, r2
 8014fcc:	005b      	lsls	r3, r3, #1
 8014fce:	4413      	add	r3, r2
 8014fd0:	00db      	lsls	r3, r3, #3
 8014fd2:	3308      	adds	r3, #8
 8014fd4:	4a25      	ldr	r2, [pc, #148]	; (801506c <etharp_update_arp_entry+0x148>)
 8014fd6:	4413      	add	r3, r2
 8014fd8:	3304      	adds	r3, #4
 8014fda:	2206      	movs	r2, #6
 8014fdc:	6879      	ldr	r1, [r7, #4]
 8014fde:	4618      	mov	r0, r3
 8014fe0:	f002 fb20 	bl	8017624 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014fe4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014fe8:	4920      	ldr	r1, [pc, #128]	; (801506c <etharp_update_arp_entry+0x148>)
 8014fea:	4613      	mov	r3, r2
 8014fec:	005b      	lsls	r3, r3, #1
 8014fee:	4413      	add	r3, r2
 8014ff0:	00db      	lsls	r3, r3, #3
 8014ff2:	440b      	add	r3, r1
 8014ff4:	3312      	adds	r3, #18
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014ffa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014ffe:	491b      	ldr	r1, [pc, #108]	; (801506c <etharp_update_arp_entry+0x148>)
 8015000:	4613      	mov	r3, r2
 8015002:	005b      	lsls	r3, r3, #1
 8015004:	4413      	add	r3, r2
 8015006:	00db      	lsls	r3, r3, #3
 8015008:	440b      	add	r3, r1
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	2b00      	cmp	r3, #0
 801500e:	d021      	beq.n	8015054 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015010:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015014:	4915      	ldr	r1, [pc, #84]	; (801506c <etharp_update_arp_entry+0x148>)
 8015016:	4613      	mov	r3, r2
 8015018:	005b      	lsls	r3, r3, #1
 801501a:	4413      	add	r3, r2
 801501c:	00db      	lsls	r3, r3, #3
 801501e:	440b      	add	r3, r1
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015024:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015028:	4910      	ldr	r1, [pc, #64]	; (801506c <etharp_update_arp_entry+0x148>)
 801502a:	4613      	mov	r3, r2
 801502c:	005b      	lsls	r3, r3, #1
 801502e:	4413      	add	r3, r2
 8015030:	00db      	lsls	r3, r3, #3
 8015032:	440b      	add	r3, r1
 8015034:	2200      	movs	r2, #0
 8015036:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801503e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015042:	9300      	str	r3, [sp, #0]
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	6939      	ldr	r1, [r7, #16]
 8015048:	68f8      	ldr	r0, [r7, #12]
 801504a:	f001 ff91 	bl	8016f70 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801504e:	6938      	ldr	r0, [r7, #16]
 8015050:	f7f8 fc50 	bl	800d8f4 <pbuf_free>
  }
  return ERR_OK;
 8015054:	2300      	movs	r3, #0
}
 8015056:	4618      	mov	r0, r3
 8015058:	3718      	adds	r7, #24
 801505a:	46bd      	mov	sp, r7
 801505c:	bd80      	pop	{r7, pc}
 801505e:	bf00      	nop
 8015060:	0801b47c 	.word	0x0801b47c
 8015064:	0801b574 	.word	0x0801b574
 8015068:	0801b4f4 	.word	0x0801b4f4
 801506c:	20006888 	.word	0x20006888

08015070 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015070:	b580      	push	{r7, lr}
 8015072:	b084      	sub	sp, #16
 8015074:	af00      	add	r7, sp, #0
 8015076:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015078:	2300      	movs	r3, #0
 801507a:	60fb      	str	r3, [r7, #12]
 801507c:	e01e      	b.n	80150bc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801507e:	4913      	ldr	r1, [pc, #76]	; (80150cc <etharp_cleanup_netif+0x5c>)
 8015080:	68fa      	ldr	r2, [r7, #12]
 8015082:	4613      	mov	r3, r2
 8015084:	005b      	lsls	r3, r3, #1
 8015086:	4413      	add	r3, r2
 8015088:	00db      	lsls	r3, r3, #3
 801508a:	440b      	add	r3, r1
 801508c:	3314      	adds	r3, #20
 801508e:	781b      	ldrb	r3, [r3, #0]
 8015090:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015092:	7afb      	ldrb	r3, [r7, #11]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d00e      	beq.n	80150b6 <etharp_cleanup_netif+0x46>
 8015098:	490c      	ldr	r1, [pc, #48]	; (80150cc <etharp_cleanup_netif+0x5c>)
 801509a:	68fa      	ldr	r2, [r7, #12]
 801509c:	4613      	mov	r3, r2
 801509e:	005b      	lsls	r3, r3, #1
 80150a0:	4413      	add	r3, r2
 80150a2:	00db      	lsls	r3, r3, #3
 80150a4:	440b      	add	r3, r1
 80150a6:	3308      	adds	r3, #8
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	687a      	ldr	r2, [r7, #4]
 80150ac:	429a      	cmp	r2, r3
 80150ae:	d102      	bne.n	80150b6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80150b0:	68f8      	ldr	r0, [r7, #12]
 80150b2:	f7ff fce5 	bl	8014a80 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	3301      	adds	r3, #1
 80150ba:	60fb      	str	r3, [r7, #12]
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	2b09      	cmp	r3, #9
 80150c0:	dddd      	ble.n	801507e <etharp_cleanup_netif+0xe>
    }
  }
}
 80150c2:	bf00      	nop
 80150c4:	bf00      	nop
 80150c6:	3710      	adds	r7, #16
 80150c8:	46bd      	mov	sp, r7
 80150ca:	bd80      	pop	{r7, pc}
 80150cc:	20006888 	.word	0x20006888

080150d0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80150d0:	b5b0      	push	{r4, r5, r7, lr}
 80150d2:	b08a      	sub	sp, #40	; 0x28
 80150d4:	af04      	add	r7, sp, #16
 80150d6:	6078      	str	r0, [r7, #4]
 80150d8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80150da:	683b      	ldr	r3, [r7, #0]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d107      	bne.n	80150f0 <etharp_input+0x20>
 80150e0:	4b3d      	ldr	r3, [pc, #244]	; (80151d8 <etharp_input+0x108>)
 80150e2:	f240 228a 	movw	r2, #650	; 0x28a
 80150e6:	493d      	ldr	r1, [pc, #244]	; (80151dc <etharp_input+0x10c>)
 80150e8:	483d      	ldr	r0, [pc, #244]	; (80151e0 <etharp_input+0x110>)
 80150ea:	f002 fb5b 	bl	80177a4 <iprintf>
 80150ee:	e06f      	b.n	80151d0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	685b      	ldr	r3, [r3, #4]
 80150f4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80150f6:	693b      	ldr	r3, [r7, #16]
 80150f8:	881b      	ldrh	r3, [r3, #0]
 80150fa:	b29b      	uxth	r3, r3
 80150fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015100:	d10c      	bne.n	801511c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015102:	693b      	ldr	r3, [r7, #16]
 8015104:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015106:	2b06      	cmp	r3, #6
 8015108:	d108      	bne.n	801511c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801510a:	693b      	ldr	r3, [r7, #16]
 801510c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801510e:	2b04      	cmp	r3, #4
 8015110:	d104      	bne.n	801511c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015112:	693b      	ldr	r3, [r7, #16]
 8015114:	885b      	ldrh	r3, [r3, #2]
 8015116:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015118:	2b08      	cmp	r3, #8
 801511a:	d003      	beq.n	8015124 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801511c:	6878      	ldr	r0, [r7, #4]
 801511e:	f7f8 fbe9 	bl	800d8f4 <pbuf_free>
    return;
 8015122:	e055      	b.n	80151d0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015124:	693b      	ldr	r3, [r7, #16]
 8015126:	330e      	adds	r3, #14
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801512c:	693b      	ldr	r3, [r7, #16]
 801512e:	3318      	adds	r3, #24
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015134:	683b      	ldr	r3, [r7, #0]
 8015136:	3304      	adds	r3, #4
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d102      	bne.n	8015144 <etharp_input+0x74>
    for_us = 0;
 801513e:	2300      	movs	r3, #0
 8015140:	75fb      	strb	r3, [r7, #23]
 8015142:	e009      	b.n	8015158 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015144:	68ba      	ldr	r2, [r7, #8]
 8015146:	683b      	ldr	r3, [r7, #0]
 8015148:	3304      	adds	r3, #4
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	429a      	cmp	r2, r3
 801514e:	bf0c      	ite	eq
 8015150:	2301      	moveq	r3, #1
 8015152:	2300      	movne	r3, #0
 8015154:	b2db      	uxtb	r3, r3
 8015156:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015158:	693b      	ldr	r3, [r7, #16]
 801515a:	f103 0208 	add.w	r2, r3, #8
 801515e:	7dfb      	ldrb	r3, [r7, #23]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d001      	beq.n	8015168 <etharp_input+0x98>
 8015164:	2301      	movs	r3, #1
 8015166:	e000      	b.n	801516a <etharp_input+0x9a>
 8015168:	2302      	movs	r3, #2
 801516a:	f107 010c 	add.w	r1, r7, #12
 801516e:	6838      	ldr	r0, [r7, #0]
 8015170:	f7ff fed8 	bl	8014f24 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015174:	693b      	ldr	r3, [r7, #16]
 8015176:	88db      	ldrh	r3, [r3, #6]
 8015178:	b29b      	uxth	r3, r3
 801517a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801517e:	d003      	beq.n	8015188 <etharp_input+0xb8>
 8015180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015184:	d01e      	beq.n	80151c4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015186:	e020      	b.n	80151ca <etharp_input+0xfa>
      if (for_us) {
 8015188:	7dfb      	ldrb	r3, [r7, #23]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d01c      	beq.n	80151c8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801518e:	683b      	ldr	r3, [r7, #0]
 8015190:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015194:	693b      	ldr	r3, [r7, #16]
 8015196:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801519a:	683b      	ldr	r3, [r7, #0]
 801519c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80151a0:	683b      	ldr	r3, [r7, #0]
 80151a2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80151a4:	693a      	ldr	r2, [r7, #16]
 80151a6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80151a8:	2102      	movs	r1, #2
 80151aa:	9103      	str	r1, [sp, #12]
 80151ac:	f107 010c 	add.w	r1, r7, #12
 80151b0:	9102      	str	r1, [sp, #8]
 80151b2:	9201      	str	r2, [sp, #4]
 80151b4:	9300      	str	r3, [sp, #0]
 80151b6:	462b      	mov	r3, r5
 80151b8:	4622      	mov	r2, r4
 80151ba:	4601      	mov	r1, r0
 80151bc:	6838      	ldr	r0, [r7, #0]
 80151be:	f000 faeb 	bl	8015798 <etharp_raw>
      break;
 80151c2:	e001      	b.n	80151c8 <etharp_input+0xf8>
      break;
 80151c4:	bf00      	nop
 80151c6:	e000      	b.n	80151ca <etharp_input+0xfa>
      break;
 80151c8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80151ca:	6878      	ldr	r0, [r7, #4]
 80151cc:	f7f8 fb92 	bl	800d8f4 <pbuf_free>
}
 80151d0:	3718      	adds	r7, #24
 80151d2:	46bd      	mov	sp, r7
 80151d4:	bdb0      	pop	{r4, r5, r7, pc}
 80151d6:	bf00      	nop
 80151d8:	0801b47c 	.word	0x0801b47c
 80151dc:	0801b5cc 	.word	0x0801b5cc
 80151e0:	0801b4f4 	.word	0x0801b4f4

080151e4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b086      	sub	sp, #24
 80151e8:	af02      	add	r7, sp, #8
 80151ea:	60f8      	str	r0, [r7, #12]
 80151ec:	60b9      	str	r1, [r7, #8]
 80151ee:	4613      	mov	r3, r2
 80151f0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80151f2:	79fa      	ldrb	r2, [r7, #7]
 80151f4:	4944      	ldr	r1, [pc, #272]	; (8015308 <etharp_output_to_arp_index+0x124>)
 80151f6:	4613      	mov	r3, r2
 80151f8:	005b      	lsls	r3, r3, #1
 80151fa:	4413      	add	r3, r2
 80151fc:	00db      	lsls	r3, r3, #3
 80151fe:	440b      	add	r3, r1
 8015200:	3314      	adds	r3, #20
 8015202:	781b      	ldrb	r3, [r3, #0]
 8015204:	2b01      	cmp	r3, #1
 8015206:	d806      	bhi.n	8015216 <etharp_output_to_arp_index+0x32>
 8015208:	4b40      	ldr	r3, [pc, #256]	; (801530c <etharp_output_to_arp_index+0x128>)
 801520a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801520e:	4940      	ldr	r1, [pc, #256]	; (8015310 <etharp_output_to_arp_index+0x12c>)
 8015210:	4840      	ldr	r0, [pc, #256]	; (8015314 <etharp_output_to_arp_index+0x130>)
 8015212:	f002 fac7 	bl	80177a4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015216:	79fa      	ldrb	r2, [r7, #7]
 8015218:	493b      	ldr	r1, [pc, #236]	; (8015308 <etharp_output_to_arp_index+0x124>)
 801521a:	4613      	mov	r3, r2
 801521c:	005b      	lsls	r3, r3, #1
 801521e:	4413      	add	r3, r2
 8015220:	00db      	lsls	r3, r3, #3
 8015222:	440b      	add	r3, r1
 8015224:	3314      	adds	r3, #20
 8015226:	781b      	ldrb	r3, [r3, #0]
 8015228:	2b02      	cmp	r3, #2
 801522a:	d153      	bne.n	80152d4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801522c:	79fa      	ldrb	r2, [r7, #7]
 801522e:	4936      	ldr	r1, [pc, #216]	; (8015308 <etharp_output_to_arp_index+0x124>)
 8015230:	4613      	mov	r3, r2
 8015232:	005b      	lsls	r3, r3, #1
 8015234:	4413      	add	r3, r2
 8015236:	00db      	lsls	r3, r3, #3
 8015238:	440b      	add	r3, r1
 801523a:	3312      	adds	r3, #18
 801523c:	881b      	ldrh	r3, [r3, #0]
 801523e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015242:	d919      	bls.n	8015278 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015244:	79fa      	ldrb	r2, [r7, #7]
 8015246:	4613      	mov	r3, r2
 8015248:	005b      	lsls	r3, r3, #1
 801524a:	4413      	add	r3, r2
 801524c:	00db      	lsls	r3, r3, #3
 801524e:	4a2e      	ldr	r2, [pc, #184]	; (8015308 <etharp_output_to_arp_index+0x124>)
 8015250:	4413      	add	r3, r2
 8015252:	3304      	adds	r3, #4
 8015254:	4619      	mov	r1, r3
 8015256:	68f8      	ldr	r0, [r7, #12]
 8015258:	f000 fb4c 	bl	80158f4 <etharp_request>
 801525c:	4603      	mov	r3, r0
 801525e:	2b00      	cmp	r3, #0
 8015260:	d138      	bne.n	80152d4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015262:	79fa      	ldrb	r2, [r7, #7]
 8015264:	4928      	ldr	r1, [pc, #160]	; (8015308 <etharp_output_to_arp_index+0x124>)
 8015266:	4613      	mov	r3, r2
 8015268:	005b      	lsls	r3, r3, #1
 801526a:	4413      	add	r3, r2
 801526c:	00db      	lsls	r3, r3, #3
 801526e:	440b      	add	r3, r1
 8015270:	3314      	adds	r3, #20
 8015272:	2203      	movs	r2, #3
 8015274:	701a      	strb	r2, [r3, #0]
 8015276:	e02d      	b.n	80152d4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015278:	79fa      	ldrb	r2, [r7, #7]
 801527a:	4923      	ldr	r1, [pc, #140]	; (8015308 <etharp_output_to_arp_index+0x124>)
 801527c:	4613      	mov	r3, r2
 801527e:	005b      	lsls	r3, r3, #1
 8015280:	4413      	add	r3, r2
 8015282:	00db      	lsls	r3, r3, #3
 8015284:	440b      	add	r3, r1
 8015286:	3312      	adds	r3, #18
 8015288:	881b      	ldrh	r3, [r3, #0]
 801528a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801528e:	d321      	bcc.n	80152d4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015290:	79fa      	ldrb	r2, [r7, #7]
 8015292:	4613      	mov	r3, r2
 8015294:	005b      	lsls	r3, r3, #1
 8015296:	4413      	add	r3, r2
 8015298:	00db      	lsls	r3, r3, #3
 801529a:	4a1b      	ldr	r2, [pc, #108]	; (8015308 <etharp_output_to_arp_index+0x124>)
 801529c:	4413      	add	r3, r2
 801529e:	1d19      	adds	r1, r3, #4
 80152a0:	79fa      	ldrb	r2, [r7, #7]
 80152a2:	4613      	mov	r3, r2
 80152a4:	005b      	lsls	r3, r3, #1
 80152a6:	4413      	add	r3, r2
 80152a8:	00db      	lsls	r3, r3, #3
 80152aa:	3308      	adds	r3, #8
 80152ac:	4a16      	ldr	r2, [pc, #88]	; (8015308 <etharp_output_to_arp_index+0x124>)
 80152ae:	4413      	add	r3, r2
 80152b0:	3304      	adds	r3, #4
 80152b2:	461a      	mov	r2, r3
 80152b4:	68f8      	ldr	r0, [r7, #12]
 80152b6:	f000 fafb 	bl	80158b0 <etharp_request_dst>
 80152ba:	4603      	mov	r3, r0
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d109      	bne.n	80152d4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80152c0:	79fa      	ldrb	r2, [r7, #7]
 80152c2:	4911      	ldr	r1, [pc, #68]	; (8015308 <etharp_output_to_arp_index+0x124>)
 80152c4:	4613      	mov	r3, r2
 80152c6:	005b      	lsls	r3, r3, #1
 80152c8:	4413      	add	r3, r2
 80152ca:	00db      	lsls	r3, r3, #3
 80152cc:	440b      	add	r3, r1
 80152ce:	3314      	adds	r3, #20
 80152d0:	2203      	movs	r2, #3
 80152d2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80152da:	79fa      	ldrb	r2, [r7, #7]
 80152dc:	4613      	mov	r3, r2
 80152de:	005b      	lsls	r3, r3, #1
 80152e0:	4413      	add	r3, r2
 80152e2:	00db      	lsls	r3, r3, #3
 80152e4:	3308      	adds	r3, #8
 80152e6:	4a08      	ldr	r2, [pc, #32]	; (8015308 <etharp_output_to_arp_index+0x124>)
 80152e8:	4413      	add	r3, r2
 80152ea:	3304      	adds	r3, #4
 80152ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80152f0:	9200      	str	r2, [sp, #0]
 80152f2:	460a      	mov	r2, r1
 80152f4:	68b9      	ldr	r1, [r7, #8]
 80152f6:	68f8      	ldr	r0, [r7, #12]
 80152f8:	f001 fe3a 	bl	8016f70 <ethernet_output>
 80152fc:	4603      	mov	r3, r0
}
 80152fe:	4618      	mov	r0, r3
 8015300:	3710      	adds	r7, #16
 8015302:	46bd      	mov	sp, r7
 8015304:	bd80      	pop	{r7, pc}
 8015306:	bf00      	nop
 8015308:	20006888 	.word	0x20006888
 801530c:	0801b47c 	.word	0x0801b47c
 8015310:	0801b5ec 	.word	0x0801b5ec
 8015314:	0801b4f4 	.word	0x0801b4f4

08015318 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015318:	b580      	push	{r7, lr}
 801531a:	b08a      	sub	sp, #40	; 0x28
 801531c:	af02      	add	r7, sp, #8
 801531e:	60f8      	str	r0, [r7, #12]
 8015320:	60b9      	str	r1, [r7, #8]
 8015322:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d106      	bne.n	801533c <etharp_output+0x24>
 801532e:	4b73      	ldr	r3, [pc, #460]	; (80154fc <etharp_output+0x1e4>)
 8015330:	f240 321e 	movw	r2, #798	; 0x31e
 8015334:	4972      	ldr	r1, [pc, #456]	; (8015500 <etharp_output+0x1e8>)
 8015336:	4873      	ldr	r0, [pc, #460]	; (8015504 <etharp_output+0x1ec>)
 8015338:	f002 fa34 	bl	80177a4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801533c:	68bb      	ldr	r3, [r7, #8]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d106      	bne.n	8015350 <etharp_output+0x38>
 8015342:	4b6e      	ldr	r3, [pc, #440]	; (80154fc <etharp_output+0x1e4>)
 8015344:	f240 321f 	movw	r2, #799	; 0x31f
 8015348:	496f      	ldr	r1, [pc, #444]	; (8015508 <etharp_output+0x1f0>)
 801534a:	486e      	ldr	r0, [pc, #440]	; (8015504 <etharp_output+0x1ec>)
 801534c:	f002 fa2a 	bl	80177a4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d106      	bne.n	8015364 <etharp_output+0x4c>
 8015356:	4b69      	ldr	r3, [pc, #420]	; (80154fc <etharp_output+0x1e4>)
 8015358:	f44f 7248 	mov.w	r2, #800	; 0x320
 801535c:	496b      	ldr	r1, [pc, #428]	; (801550c <etharp_output+0x1f4>)
 801535e:	4869      	ldr	r0, [pc, #420]	; (8015504 <etharp_output+0x1ec>)
 8015360:	f002 fa20 	bl	80177a4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	68f9      	ldr	r1, [r7, #12]
 801536a:	4618      	mov	r0, r3
 801536c:	f000 fef8 	bl	8016160 <ip4_addr_isbroadcast_u32>
 8015370:	4603      	mov	r3, r0
 8015372:	2b00      	cmp	r3, #0
 8015374:	d002      	beq.n	801537c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015376:	4b66      	ldr	r3, [pc, #408]	; (8015510 <etharp_output+0x1f8>)
 8015378:	61fb      	str	r3, [r7, #28]
 801537a:	e0af      	b.n	80154dc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015384:	2be0      	cmp	r3, #224	; 0xe0
 8015386:	d118      	bne.n	80153ba <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015388:	2301      	movs	r3, #1
 801538a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801538c:	2300      	movs	r3, #0
 801538e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015390:	235e      	movs	r3, #94	; 0x5e
 8015392:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	3301      	adds	r3, #1
 8015398:	781b      	ldrb	r3, [r3, #0]
 801539a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801539e:	b2db      	uxtb	r3, r3
 80153a0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	3302      	adds	r3, #2
 80153a6:	781b      	ldrb	r3, [r3, #0]
 80153a8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	3303      	adds	r3, #3
 80153ae:	781b      	ldrb	r3, [r3, #0]
 80153b0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80153b2:	f107 0310 	add.w	r3, r7, #16
 80153b6:	61fb      	str	r3, [r7, #28]
 80153b8:	e090      	b.n	80154dc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	681a      	ldr	r2, [r3, #0]
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	3304      	adds	r3, #4
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	405a      	eors	r2, r3
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	3308      	adds	r3, #8
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	4013      	ands	r3, r2
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d012      	beq.n	80153f8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80153d8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80153dc:	4293      	cmp	r3, r2
 80153de:	d00b      	beq.n	80153f8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	330c      	adds	r3, #12
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d003      	beq.n	80153f2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	330c      	adds	r3, #12
 80153ee:	61bb      	str	r3, [r7, #24]
 80153f0:	e002      	b.n	80153f8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80153f2:	f06f 0303 	mvn.w	r3, #3
 80153f6:	e07d      	b.n	80154f4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80153f8:	4b46      	ldr	r3, [pc, #280]	; (8015514 <etharp_output+0x1fc>)
 80153fa:	781b      	ldrb	r3, [r3, #0]
 80153fc:	4619      	mov	r1, r3
 80153fe:	4a46      	ldr	r2, [pc, #280]	; (8015518 <etharp_output+0x200>)
 8015400:	460b      	mov	r3, r1
 8015402:	005b      	lsls	r3, r3, #1
 8015404:	440b      	add	r3, r1
 8015406:	00db      	lsls	r3, r3, #3
 8015408:	4413      	add	r3, r2
 801540a:	3314      	adds	r3, #20
 801540c:	781b      	ldrb	r3, [r3, #0]
 801540e:	2b01      	cmp	r3, #1
 8015410:	d925      	bls.n	801545e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015412:	4b40      	ldr	r3, [pc, #256]	; (8015514 <etharp_output+0x1fc>)
 8015414:	781b      	ldrb	r3, [r3, #0]
 8015416:	4619      	mov	r1, r3
 8015418:	4a3f      	ldr	r2, [pc, #252]	; (8015518 <etharp_output+0x200>)
 801541a:	460b      	mov	r3, r1
 801541c:	005b      	lsls	r3, r3, #1
 801541e:	440b      	add	r3, r1
 8015420:	00db      	lsls	r3, r3, #3
 8015422:	4413      	add	r3, r2
 8015424:	3308      	adds	r3, #8
 8015426:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015428:	68fa      	ldr	r2, [r7, #12]
 801542a:	429a      	cmp	r2, r3
 801542c:	d117      	bne.n	801545e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801542e:	69bb      	ldr	r3, [r7, #24]
 8015430:	681a      	ldr	r2, [r3, #0]
 8015432:	4b38      	ldr	r3, [pc, #224]	; (8015514 <etharp_output+0x1fc>)
 8015434:	781b      	ldrb	r3, [r3, #0]
 8015436:	4618      	mov	r0, r3
 8015438:	4937      	ldr	r1, [pc, #220]	; (8015518 <etharp_output+0x200>)
 801543a:	4603      	mov	r3, r0
 801543c:	005b      	lsls	r3, r3, #1
 801543e:	4403      	add	r3, r0
 8015440:	00db      	lsls	r3, r3, #3
 8015442:	440b      	add	r3, r1
 8015444:	3304      	adds	r3, #4
 8015446:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015448:	429a      	cmp	r2, r3
 801544a:	d108      	bne.n	801545e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801544c:	4b31      	ldr	r3, [pc, #196]	; (8015514 <etharp_output+0x1fc>)
 801544e:	781b      	ldrb	r3, [r3, #0]
 8015450:	461a      	mov	r2, r3
 8015452:	68b9      	ldr	r1, [r7, #8]
 8015454:	68f8      	ldr	r0, [r7, #12]
 8015456:	f7ff fec5 	bl	80151e4 <etharp_output_to_arp_index>
 801545a:	4603      	mov	r3, r0
 801545c:	e04a      	b.n	80154f4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801545e:	2300      	movs	r3, #0
 8015460:	75fb      	strb	r3, [r7, #23]
 8015462:	e031      	b.n	80154c8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015464:	7dfa      	ldrb	r2, [r7, #23]
 8015466:	492c      	ldr	r1, [pc, #176]	; (8015518 <etharp_output+0x200>)
 8015468:	4613      	mov	r3, r2
 801546a:	005b      	lsls	r3, r3, #1
 801546c:	4413      	add	r3, r2
 801546e:	00db      	lsls	r3, r3, #3
 8015470:	440b      	add	r3, r1
 8015472:	3314      	adds	r3, #20
 8015474:	781b      	ldrb	r3, [r3, #0]
 8015476:	2b01      	cmp	r3, #1
 8015478:	d923      	bls.n	80154c2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801547a:	7dfa      	ldrb	r2, [r7, #23]
 801547c:	4926      	ldr	r1, [pc, #152]	; (8015518 <etharp_output+0x200>)
 801547e:	4613      	mov	r3, r2
 8015480:	005b      	lsls	r3, r3, #1
 8015482:	4413      	add	r3, r2
 8015484:	00db      	lsls	r3, r3, #3
 8015486:	440b      	add	r3, r1
 8015488:	3308      	adds	r3, #8
 801548a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801548c:	68fa      	ldr	r2, [r7, #12]
 801548e:	429a      	cmp	r2, r3
 8015490:	d117      	bne.n	80154c2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015492:	69bb      	ldr	r3, [r7, #24]
 8015494:	6819      	ldr	r1, [r3, #0]
 8015496:	7dfa      	ldrb	r2, [r7, #23]
 8015498:	481f      	ldr	r0, [pc, #124]	; (8015518 <etharp_output+0x200>)
 801549a:	4613      	mov	r3, r2
 801549c:	005b      	lsls	r3, r3, #1
 801549e:	4413      	add	r3, r2
 80154a0:	00db      	lsls	r3, r3, #3
 80154a2:	4403      	add	r3, r0
 80154a4:	3304      	adds	r3, #4
 80154a6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80154a8:	4299      	cmp	r1, r3
 80154aa:	d10a      	bne.n	80154c2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80154ac:	4a19      	ldr	r2, [pc, #100]	; (8015514 <etharp_output+0x1fc>)
 80154ae:	7dfb      	ldrb	r3, [r7, #23]
 80154b0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80154b2:	7dfb      	ldrb	r3, [r7, #23]
 80154b4:	461a      	mov	r2, r3
 80154b6:	68b9      	ldr	r1, [r7, #8]
 80154b8:	68f8      	ldr	r0, [r7, #12]
 80154ba:	f7ff fe93 	bl	80151e4 <etharp_output_to_arp_index>
 80154be:	4603      	mov	r3, r0
 80154c0:	e018      	b.n	80154f4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80154c2:	7dfb      	ldrb	r3, [r7, #23]
 80154c4:	3301      	adds	r3, #1
 80154c6:	75fb      	strb	r3, [r7, #23]
 80154c8:	7dfb      	ldrb	r3, [r7, #23]
 80154ca:	2b09      	cmp	r3, #9
 80154cc:	d9ca      	bls.n	8015464 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80154ce:	68ba      	ldr	r2, [r7, #8]
 80154d0:	69b9      	ldr	r1, [r7, #24]
 80154d2:	68f8      	ldr	r0, [r7, #12]
 80154d4:	f000 f822 	bl	801551c <etharp_query>
 80154d8:	4603      	mov	r3, r0
 80154da:	e00b      	b.n	80154f4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80154e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80154e6:	9300      	str	r3, [sp, #0]
 80154e8:	69fb      	ldr	r3, [r7, #28]
 80154ea:	68b9      	ldr	r1, [r7, #8]
 80154ec:	68f8      	ldr	r0, [r7, #12]
 80154ee:	f001 fd3f 	bl	8016f70 <ethernet_output>
 80154f2:	4603      	mov	r3, r0
}
 80154f4:	4618      	mov	r0, r3
 80154f6:	3720      	adds	r7, #32
 80154f8:	46bd      	mov	sp, r7
 80154fa:	bd80      	pop	{r7, pc}
 80154fc:	0801b47c 	.word	0x0801b47c
 8015500:	0801b5cc 	.word	0x0801b5cc
 8015504:	0801b4f4 	.word	0x0801b4f4
 8015508:	0801b61c 	.word	0x0801b61c
 801550c:	0801b5bc 	.word	0x0801b5bc
 8015510:	0801bc78 	.word	0x0801bc78
 8015514:	20006978 	.word	0x20006978
 8015518:	20006888 	.word	0x20006888

0801551c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b08c      	sub	sp, #48	; 0x30
 8015520:	af02      	add	r7, sp, #8
 8015522:	60f8      	str	r0, [r7, #12]
 8015524:	60b9      	str	r1, [r7, #8]
 8015526:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	3326      	adds	r3, #38	; 0x26
 801552c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801552e:	23ff      	movs	r3, #255	; 0xff
 8015530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015534:	2300      	movs	r3, #0
 8015536:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015538:	68bb      	ldr	r3, [r7, #8]
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	68f9      	ldr	r1, [r7, #12]
 801553e:	4618      	mov	r0, r3
 8015540:	f000 fe0e 	bl	8016160 <ip4_addr_isbroadcast_u32>
 8015544:	4603      	mov	r3, r0
 8015546:	2b00      	cmp	r3, #0
 8015548:	d10c      	bne.n	8015564 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801554a:	68bb      	ldr	r3, [r7, #8]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015552:	2be0      	cmp	r3, #224	; 0xe0
 8015554:	d006      	beq.n	8015564 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015556:	68bb      	ldr	r3, [r7, #8]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d003      	beq.n	8015564 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801555c:	68bb      	ldr	r3, [r7, #8]
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d102      	bne.n	801556a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015564:	f06f 030f 	mvn.w	r3, #15
 8015568:	e101      	b.n	801576e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801556a:	68fa      	ldr	r2, [r7, #12]
 801556c:	2101      	movs	r1, #1
 801556e:	68b8      	ldr	r0, [r7, #8]
 8015570:	f7ff fb60 	bl	8014c34 <etharp_find_entry>
 8015574:	4603      	mov	r3, r0
 8015576:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015578:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801557c:	2b00      	cmp	r3, #0
 801557e:	da02      	bge.n	8015586 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015580:	8a7b      	ldrh	r3, [r7, #18]
 8015582:	b25b      	sxtb	r3, r3
 8015584:	e0f3      	b.n	801576e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015586:	8a7b      	ldrh	r3, [r7, #18]
 8015588:	2b7e      	cmp	r3, #126	; 0x7e
 801558a:	d906      	bls.n	801559a <etharp_query+0x7e>
 801558c:	4b7a      	ldr	r3, [pc, #488]	; (8015778 <etharp_query+0x25c>)
 801558e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015592:	497a      	ldr	r1, [pc, #488]	; (801577c <etharp_query+0x260>)
 8015594:	487a      	ldr	r0, [pc, #488]	; (8015780 <etharp_query+0x264>)
 8015596:	f002 f905 	bl	80177a4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801559a:	8a7b      	ldrh	r3, [r7, #18]
 801559c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801559e:	7c7a      	ldrb	r2, [r7, #17]
 80155a0:	4978      	ldr	r1, [pc, #480]	; (8015784 <etharp_query+0x268>)
 80155a2:	4613      	mov	r3, r2
 80155a4:	005b      	lsls	r3, r3, #1
 80155a6:	4413      	add	r3, r2
 80155a8:	00db      	lsls	r3, r3, #3
 80155aa:	440b      	add	r3, r1
 80155ac:	3314      	adds	r3, #20
 80155ae:	781b      	ldrb	r3, [r3, #0]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d115      	bne.n	80155e0 <etharp_query+0xc4>
    is_new_entry = 1;
 80155b4:	2301      	movs	r3, #1
 80155b6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80155b8:	7c7a      	ldrb	r2, [r7, #17]
 80155ba:	4972      	ldr	r1, [pc, #456]	; (8015784 <etharp_query+0x268>)
 80155bc:	4613      	mov	r3, r2
 80155be:	005b      	lsls	r3, r3, #1
 80155c0:	4413      	add	r3, r2
 80155c2:	00db      	lsls	r3, r3, #3
 80155c4:	440b      	add	r3, r1
 80155c6:	3314      	adds	r3, #20
 80155c8:	2201      	movs	r2, #1
 80155ca:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80155cc:	7c7a      	ldrb	r2, [r7, #17]
 80155ce:	496d      	ldr	r1, [pc, #436]	; (8015784 <etharp_query+0x268>)
 80155d0:	4613      	mov	r3, r2
 80155d2:	005b      	lsls	r3, r3, #1
 80155d4:	4413      	add	r3, r2
 80155d6:	00db      	lsls	r3, r3, #3
 80155d8:	440b      	add	r3, r1
 80155da:	3308      	adds	r3, #8
 80155dc:	68fa      	ldr	r2, [r7, #12]
 80155de:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80155e0:	7c7a      	ldrb	r2, [r7, #17]
 80155e2:	4968      	ldr	r1, [pc, #416]	; (8015784 <etharp_query+0x268>)
 80155e4:	4613      	mov	r3, r2
 80155e6:	005b      	lsls	r3, r3, #1
 80155e8:	4413      	add	r3, r2
 80155ea:	00db      	lsls	r3, r3, #3
 80155ec:	440b      	add	r3, r1
 80155ee:	3314      	adds	r3, #20
 80155f0:	781b      	ldrb	r3, [r3, #0]
 80155f2:	2b01      	cmp	r3, #1
 80155f4:	d011      	beq.n	801561a <etharp_query+0xfe>
 80155f6:	7c7a      	ldrb	r2, [r7, #17]
 80155f8:	4962      	ldr	r1, [pc, #392]	; (8015784 <etharp_query+0x268>)
 80155fa:	4613      	mov	r3, r2
 80155fc:	005b      	lsls	r3, r3, #1
 80155fe:	4413      	add	r3, r2
 8015600:	00db      	lsls	r3, r3, #3
 8015602:	440b      	add	r3, r1
 8015604:	3314      	adds	r3, #20
 8015606:	781b      	ldrb	r3, [r3, #0]
 8015608:	2b01      	cmp	r3, #1
 801560a:	d806      	bhi.n	801561a <etharp_query+0xfe>
 801560c:	4b5a      	ldr	r3, [pc, #360]	; (8015778 <etharp_query+0x25c>)
 801560e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8015612:	495d      	ldr	r1, [pc, #372]	; (8015788 <etharp_query+0x26c>)
 8015614:	485a      	ldr	r0, [pc, #360]	; (8015780 <etharp_query+0x264>)
 8015616:	f002 f8c5 	bl	80177a4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801561a:	6a3b      	ldr	r3, [r7, #32]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d102      	bne.n	8015626 <etharp_query+0x10a>
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d10c      	bne.n	8015640 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015626:	68b9      	ldr	r1, [r7, #8]
 8015628:	68f8      	ldr	r0, [r7, #12]
 801562a:	f000 f963 	bl	80158f4 <etharp_request>
 801562e:	4603      	mov	r3, r0
 8015630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d102      	bne.n	8015640 <etharp_query+0x124>
      return result;
 801563a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801563e:	e096      	b.n	801576e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d106      	bne.n	8015654 <etharp_query+0x138>
 8015646:	4b4c      	ldr	r3, [pc, #304]	; (8015778 <etharp_query+0x25c>)
 8015648:	f240 32e1 	movw	r2, #993	; 0x3e1
 801564c:	494f      	ldr	r1, [pc, #316]	; (801578c <etharp_query+0x270>)
 801564e:	484c      	ldr	r0, [pc, #304]	; (8015780 <etharp_query+0x264>)
 8015650:	f002 f8a8 	bl	80177a4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015654:	7c7a      	ldrb	r2, [r7, #17]
 8015656:	494b      	ldr	r1, [pc, #300]	; (8015784 <etharp_query+0x268>)
 8015658:	4613      	mov	r3, r2
 801565a:	005b      	lsls	r3, r3, #1
 801565c:	4413      	add	r3, r2
 801565e:	00db      	lsls	r3, r3, #3
 8015660:	440b      	add	r3, r1
 8015662:	3314      	adds	r3, #20
 8015664:	781b      	ldrb	r3, [r3, #0]
 8015666:	2b01      	cmp	r3, #1
 8015668:	d917      	bls.n	801569a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801566a:	4a49      	ldr	r2, [pc, #292]	; (8015790 <etharp_query+0x274>)
 801566c:	7c7b      	ldrb	r3, [r7, #17]
 801566e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015670:	7c7a      	ldrb	r2, [r7, #17]
 8015672:	4613      	mov	r3, r2
 8015674:	005b      	lsls	r3, r3, #1
 8015676:	4413      	add	r3, r2
 8015678:	00db      	lsls	r3, r3, #3
 801567a:	3308      	adds	r3, #8
 801567c:	4a41      	ldr	r2, [pc, #260]	; (8015784 <etharp_query+0x268>)
 801567e:	4413      	add	r3, r2
 8015680:	3304      	adds	r3, #4
 8015682:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015686:	9200      	str	r2, [sp, #0]
 8015688:	697a      	ldr	r2, [r7, #20]
 801568a:	6879      	ldr	r1, [r7, #4]
 801568c:	68f8      	ldr	r0, [r7, #12]
 801568e:	f001 fc6f 	bl	8016f70 <ethernet_output>
 8015692:	4603      	mov	r3, r0
 8015694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015698:	e067      	b.n	801576a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801569a:	7c7a      	ldrb	r2, [r7, #17]
 801569c:	4939      	ldr	r1, [pc, #228]	; (8015784 <etharp_query+0x268>)
 801569e:	4613      	mov	r3, r2
 80156a0:	005b      	lsls	r3, r3, #1
 80156a2:	4413      	add	r3, r2
 80156a4:	00db      	lsls	r3, r3, #3
 80156a6:	440b      	add	r3, r1
 80156a8:	3314      	adds	r3, #20
 80156aa:	781b      	ldrb	r3, [r3, #0]
 80156ac:	2b01      	cmp	r3, #1
 80156ae:	d15c      	bne.n	801576a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80156b0:	2300      	movs	r3, #0
 80156b2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80156b8:	e01c      	b.n	80156f4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80156ba:	69fb      	ldr	r3, [r7, #28]
 80156bc:	895a      	ldrh	r2, [r3, #10]
 80156be:	69fb      	ldr	r3, [r7, #28]
 80156c0:	891b      	ldrh	r3, [r3, #8]
 80156c2:	429a      	cmp	r2, r3
 80156c4:	d10a      	bne.n	80156dc <etharp_query+0x1c0>
 80156c6:	69fb      	ldr	r3, [r7, #28]
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d006      	beq.n	80156dc <etharp_query+0x1c0>
 80156ce:	4b2a      	ldr	r3, [pc, #168]	; (8015778 <etharp_query+0x25c>)
 80156d0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80156d4:	492f      	ldr	r1, [pc, #188]	; (8015794 <etharp_query+0x278>)
 80156d6:	482a      	ldr	r0, [pc, #168]	; (8015780 <etharp_query+0x264>)
 80156d8:	f002 f864 	bl	80177a4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80156dc:	69fb      	ldr	r3, [r7, #28]
 80156de:	7b1b      	ldrb	r3, [r3, #12]
 80156e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d002      	beq.n	80156ee <etharp_query+0x1d2>
        copy_needed = 1;
 80156e8:	2301      	movs	r3, #1
 80156ea:	61bb      	str	r3, [r7, #24]
        break;
 80156ec:	e005      	b.n	80156fa <etharp_query+0x1de>
      }
      p = p->next;
 80156ee:	69fb      	ldr	r3, [r7, #28]
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80156f4:	69fb      	ldr	r3, [r7, #28]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d1df      	bne.n	80156ba <etharp_query+0x19e>
    }
    if (copy_needed) {
 80156fa:	69bb      	ldr	r3, [r7, #24]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d007      	beq.n	8015710 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015700:	687a      	ldr	r2, [r7, #4]
 8015702:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015706:	200e      	movs	r0, #14
 8015708:	f7f8 fb6c 	bl	800dde4 <pbuf_clone>
 801570c:	61f8      	str	r0, [r7, #28]
 801570e:	e004      	b.n	801571a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015714:	69f8      	ldr	r0, [r7, #28]
 8015716:	f7f8 f993 	bl	800da40 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801571a:	69fb      	ldr	r3, [r7, #28]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d021      	beq.n	8015764 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015720:	7c7a      	ldrb	r2, [r7, #17]
 8015722:	4918      	ldr	r1, [pc, #96]	; (8015784 <etharp_query+0x268>)
 8015724:	4613      	mov	r3, r2
 8015726:	005b      	lsls	r3, r3, #1
 8015728:	4413      	add	r3, r2
 801572a:	00db      	lsls	r3, r3, #3
 801572c:	440b      	add	r3, r1
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d00a      	beq.n	801574a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015734:	7c7a      	ldrb	r2, [r7, #17]
 8015736:	4913      	ldr	r1, [pc, #76]	; (8015784 <etharp_query+0x268>)
 8015738:	4613      	mov	r3, r2
 801573a:	005b      	lsls	r3, r3, #1
 801573c:	4413      	add	r3, r2
 801573e:	00db      	lsls	r3, r3, #3
 8015740:	440b      	add	r3, r1
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	4618      	mov	r0, r3
 8015746:	f7f8 f8d5 	bl	800d8f4 <pbuf_free>
      }
      arp_table[i].q = p;
 801574a:	7c7a      	ldrb	r2, [r7, #17]
 801574c:	490d      	ldr	r1, [pc, #52]	; (8015784 <etharp_query+0x268>)
 801574e:	4613      	mov	r3, r2
 8015750:	005b      	lsls	r3, r3, #1
 8015752:	4413      	add	r3, r2
 8015754:	00db      	lsls	r3, r3, #3
 8015756:	440b      	add	r3, r1
 8015758:	69fa      	ldr	r2, [r7, #28]
 801575a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801575c:	2300      	movs	r3, #0
 801575e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015762:	e002      	b.n	801576a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015764:	23ff      	movs	r3, #255	; 0xff
 8015766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801576a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801576e:	4618      	mov	r0, r3
 8015770:	3728      	adds	r7, #40	; 0x28
 8015772:	46bd      	mov	sp, r7
 8015774:	bd80      	pop	{r7, pc}
 8015776:	bf00      	nop
 8015778:	0801b47c 	.word	0x0801b47c
 801577c:	0801b628 	.word	0x0801b628
 8015780:	0801b4f4 	.word	0x0801b4f4
 8015784:	20006888 	.word	0x20006888
 8015788:	0801b638 	.word	0x0801b638
 801578c:	0801b61c 	.word	0x0801b61c
 8015790:	20006978 	.word	0x20006978
 8015794:	0801b660 	.word	0x0801b660

08015798 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015798:	b580      	push	{r7, lr}
 801579a:	b08a      	sub	sp, #40	; 0x28
 801579c:	af02      	add	r7, sp, #8
 801579e:	60f8      	str	r0, [r7, #12]
 80157a0:	60b9      	str	r1, [r7, #8]
 80157a2:	607a      	str	r2, [r7, #4]
 80157a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80157a6:	2300      	movs	r3, #0
 80157a8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d106      	bne.n	80157be <etharp_raw+0x26>
 80157b0:	4b3a      	ldr	r3, [pc, #232]	; (801589c <etharp_raw+0x104>)
 80157b2:	f240 4257 	movw	r2, #1111	; 0x457
 80157b6:	493a      	ldr	r1, [pc, #232]	; (80158a0 <etharp_raw+0x108>)
 80157b8:	483a      	ldr	r0, [pc, #232]	; (80158a4 <etharp_raw+0x10c>)
 80157ba:	f001 fff3 	bl	80177a4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80157be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80157c2:	211c      	movs	r1, #28
 80157c4:	200e      	movs	r0, #14
 80157c6:	f7f7 fdb1 	bl	800d32c <pbuf_alloc>
 80157ca:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80157cc:	69bb      	ldr	r3, [r7, #24]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d102      	bne.n	80157d8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80157d2:	f04f 33ff 	mov.w	r3, #4294967295
 80157d6:	e05d      	b.n	8015894 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80157d8:	69bb      	ldr	r3, [r7, #24]
 80157da:	895b      	ldrh	r3, [r3, #10]
 80157dc:	2b1b      	cmp	r3, #27
 80157de:	d806      	bhi.n	80157ee <etharp_raw+0x56>
 80157e0:	4b2e      	ldr	r3, [pc, #184]	; (801589c <etharp_raw+0x104>)
 80157e2:	f240 4262 	movw	r2, #1122	; 0x462
 80157e6:	4930      	ldr	r1, [pc, #192]	; (80158a8 <etharp_raw+0x110>)
 80157e8:	482e      	ldr	r0, [pc, #184]	; (80158a4 <etharp_raw+0x10c>)
 80157ea:	f001 ffdb 	bl	80177a4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80157ee:	69bb      	ldr	r3, [r7, #24]
 80157f0:	685b      	ldr	r3, [r3, #4]
 80157f2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80157f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80157f6:	4618      	mov	r0, r3
 80157f8:	f7f6 fd34 	bl	800c264 <lwip_htons>
 80157fc:	4603      	mov	r3, r0
 80157fe:	461a      	mov	r2, r3
 8015800:	697b      	ldr	r3, [r7, #20]
 8015802:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801580a:	2b06      	cmp	r3, #6
 801580c:	d006      	beq.n	801581c <etharp_raw+0x84>
 801580e:	4b23      	ldr	r3, [pc, #140]	; (801589c <etharp_raw+0x104>)
 8015810:	f240 4269 	movw	r2, #1129	; 0x469
 8015814:	4925      	ldr	r1, [pc, #148]	; (80158ac <etharp_raw+0x114>)
 8015816:	4823      	ldr	r0, [pc, #140]	; (80158a4 <etharp_raw+0x10c>)
 8015818:	f001 ffc4 	bl	80177a4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801581c:	697b      	ldr	r3, [r7, #20]
 801581e:	3308      	adds	r3, #8
 8015820:	2206      	movs	r2, #6
 8015822:	6839      	ldr	r1, [r7, #0]
 8015824:	4618      	mov	r0, r3
 8015826:	f001 fefd 	bl	8017624 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801582a:	697b      	ldr	r3, [r7, #20]
 801582c:	3312      	adds	r3, #18
 801582e:	2206      	movs	r2, #6
 8015830:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015832:	4618      	mov	r0, r3
 8015834:	f001 fef6 	bl	8017624 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015838:	697b      	ldr	r3, [r7, #20]
 801583a:	330e      	adds	r3, #14
 801583c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801583e:	6812      	ldr	r2, [r2, #0]
 8015840:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015842:	697b      	ldr	r3, [r7, #20]
 8015844:	3318      	adds	r3, #24
 8015846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015848:	6812      	ldr	r2, [r2, #0]
 801584a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801584c:	697b      	ldr	r3, [r7, #20]
 801584e:	2200      	movs	r2, #0
 8015850:	701a      	strb	r2, [r3, #0]
 8015852:	2200      	movs	r2, #0
 8015854:	f042 0201 	orr.w	r2, r2, #1
 8015858:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801585a:	697b      	ldr	r3, [r7, #20]
 801585c:	2200      	movs	r2, #0
 801585e:	f042 0208 	orr.w	r2, r2, #8
 8015862:	709a      	strb	r2, [r3, #2]
 8015864:	2200      	movs	r2, #0
 8015866:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015868:	697b      	ldr	r3, [r7, #20]
 801586a:	2206      	movs	r2, #6
 801586c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801586e:	697b      	ldr	r3, [r7, #20]
 8015870:	2204      	movs	r2, #4
 8015872:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015874:	f640 0306 	movw	r3, #2054	; 0x806
 8015878:	9300      	str	r3, [sp, #0]
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	68ba      	ldr	r2, [r7, #8]
 801587e:	69b9      	ldr	r1, [r7, #24]
 8015880:	68f8      	ldr	r0, [r7, #12]
 8015882:	f001 fb75 	bl	8016f70 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015886:	69b8      	ldr	r0, [r7, #24]
 8015888:	f7f8 f834 	bl	800d8f4 <pbuf_free>
  p = NULL;
 801588c:	2300      	movs	r3, #0
 801588e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015890:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015894:	4618      	mov	r0, r3
 8015896:	3720      	adds	r7, #32
 8015898:	46bd      	mov	sp, r7
 801589a:	bd80      	pop	{r7, pc}
 801589c:	0801b47c 	.word	0x0801b47c
 80158a0:	0801b5cc 	.word	0x0801b5cc
 80158a4:	0801b4f4 	.word	0x0801b4f4
 80158a8:	0801b67c 	.word	0x0801b67c
 80158ac:	0801b6b0 	.word	0x0801b6b0

080158b0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b088      	sub	sp, #32
 80158b4:	af04      	add	r7, sp, #16
 80158b6:	60f8      	str	r0, [r7, #12]
 80158b8:	60b9      	str	r1, [r7, #8]
 80158ba:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80158cc:	2201      	movs	r2, #1
 80158ce:	9203      	str	r2, [sp, #12]
 80158d0:	68ba      	ldr	r2, [r7, #8]
 80158d2:	9202      	str	r2, [sp, #8]
 80158d4:	4a06      	ldr	r2, [pc, #24]	; (80158f0 <etharp_request_dst+0x40>)
 80158d6:	9201      	str	r2, [sp, #4]
 80158d8:	9300      	str	r3, [sp, #0]
 80158da:	4603      	mov	r3, r0
 80158dc:	687a      	ldr	r2, [r7, #4]
 80158de:	68f8      	ldr	r0, [r7, #12]
 80158e0:	f7ff ff5a 	bl	8015798 <etharp_raw>
 80158e4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80158e6:	4618      	mov	r0, r3
 80158e8:	3710      	adds	r7, #16
 80158ea:	46bd      	mov	sp, r7
 80158ec:	bd80      	pop	{r7, pc}
 80158ee:	bf00      	nop
 80158f0:	0801bc80 	.word	0x0801bc80

080158f4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b082      	sub	sp, #8
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	6078      	str	r0, [r7, #4]
 80158fc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80158fe:	4a05      	ldr	r2, [pc, #20]	; (8015914 <etharp_request+0x20>)
 8015900:	6839      	ldr	r1, [r7, #0]
 8015902:	6878      	ldr	r0, [r7, #4]
 8015904:	f7ff ffd4 	bl	80158b0 <etharp_request_dst>
 8015908:	4603      	mov	r3, r0
}
 801590a:	4618      	mov	r0, r3
 801590c:	3708      	adds	r7, #8
 801590e:	46bd      	mov	sp, r7
 8015910:	bd80      	pop	{r7, pc}
 8015912:	bf00      	nop
 8015914:	0801bc78 	.word	0x0801bc78

08015918 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015918:	b580      	push	{r7, lr}
 801591a:	b08e      	sub	sp, #56	; 0x38
 801591c:	af04      	add	r7, sp, #16
 801591e:	6078      	str	r0, [r7, #4]
 8015920:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015922:	4b79      	ldr	r3, [pc, #484]	; (8015b08 <icmp_input+0x1f0>)
 8015924:	689b      	ldr	r3, [r3, #8]
 8015926:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801592a:	781b      	ldrb	r3, [r3, #0]
 801592c:	f003 030f 	and.w	r3, r3, #15
 8015930:	b2db      	uxtb	r3, r3
 8015932:	009b      	lsls	r3, r3, #2
 8015934:	b2db      	uxtb	r3, r3
 8015936:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015938:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801593a:	2b13      	cmp	r3, #19
 801593c:	f240 80cd 	bls.w	8015ada <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	895b      	ldrh	r3, [r3, #10]
 8015944:	2b03      	cmp	r3, #3
 8015946:	f240 80ca 	bls.w	8015ade <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	685b      	ldr	r3, [r3, #4]
 801594e:	781b      	ldrb	r3, [r3, #0]
 8015950:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015954:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015958:	2b00      	cmp	r3, #0
 801595a:	f000 80b7 	beq.w	8015acc <icmp_input+0x1b4>
 801595e:	2b08      	cmp	r3, #8
 8015960:	f040 80b7 	bne.w	8015ad2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015964:	4b69      	ldr	r3, [pc, #420]	; (8015b0c <icmp_input+0x1f4>)
 8015966:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015968:	4b67      	ldr	r3, [pc, #412]	; (8015b08 <icmp_input+0x1f0>)
 801596a:	695b      	ldr	r3, [r3, #20]
 801596c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015970:	2be0      	cmp	r3, #224	; 0xe0
 8015972:	f000 80bb 	beq.w	8015aec <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015976:	4b64      	ldr	r3, [pc, #400]	; (8015b08 <icmp_input+0x1f0>)
 8015978:	695b      	ldr	r3, [r3, #20]
 801597a:	4a63      	ldr	r2, [pc, #396]	; (8015b08 <icmp_input+0x1f0>)
 801597c:	6812      	ldr	r2, [r2, #0]
 801597e:	4611      	mov	r1, r2
 8015980:	4618      	mov	r0, r3
 8015982:	f000 fbed 	bl	8016160 <ip4_addr_isbroadcast_u32>
 8015986:	4603      	mov	r3, r0
 8015988:	2b00      	cmp	r3, #0
 801598a:	f040 80b1 	bne.w	8015af0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	891b      	ldrh	r3, [r3, #8]
 8015992:	2b07      	cmp	r3, #7
 8015994:	f240 80a5 	bls.w	8015ae2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015998:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801599a:	330e      	adds	r3, #14
 801599c:	4619      	mov	r1, r3
 801599e:	6878      	ldr	r0, [r7, #4]
 80159a0:	f7f7 ff12 	bl	800d7c8 <pbuf_add_header>
 80159a4:	4603      	mov	r3, r0
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d04b      	beq.n	8015a42 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	891a      	ldrh	r2, [r3, #8]
 80159ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80159b0:	4413      	add	r3, r2
 80159b2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	891b      	ldrh	r3, [r3, #8]
 80159b8:	8b7a      	ldrh	r2, [r7, #26]
 80159ba:	429a      	cmp	r2, r3
 80159bc:	f0c0 809a 	bcc.w	8015af4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80159c0:	8b7b      	ldrh	r3, [r7, #26]
 80159c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80159c6:	4619      	mov	r1, r3
 80159c8:	200e      	movs	r0, #14
 80159ca:	f7f7 fcaf 	bl	800d32c <pbuf_alloc>
 80159ce:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80159d0:	697b      	ldr	r3, [r7, #20]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	f000 8090 	beq.w	8015af8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80159d8:	697b      	ldr	r3, [r7, #20]
 80159da:	895b      	ldrh	r3, [r3, #10]
 80159dc:	461a      	mov	r2, r3
 80159de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80159e0:	3308      	adds	r3, #8
 80159e2:	429a      	cmp	r2, r3
 80159e4:	d203      	bcs.n	80159ee <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80159e6:	6978      	ldr	r0, [r7, #20]
 80159e8:	f7f7 ff84 	bl	800d8f4 <pbuf_free>
          goto icmperr;
 80159ec:	e085      	b.n	8015afa <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80159ee:	697b      	ldr	r3, [r7, #20]
 80159f0:	685b      	ldr	r3, [r3, #4]
 80159f2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80159f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80159f6:	4618      	mov	r0, r3
 80159f8:	f001 fe14 	bl	8017624 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80159fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80159fe:	4619      	mov	r1, r3
 8015a00:	6978      	ldr	r0, [r7, #20]
 8015a02:	f7f7 fef1 	bl	800d7e8 <pbuf_remove_header>
 8015a06:	4603      	mov	r3, r0
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d009      	beq.n	8015a20 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015a0c:	4b40      	ldr	r3, [pc, #256]	; (8015b10 <icmp_input+0x1f8>)
 8015a0e:	22b6      	movs	r2, #182	; 0xb6
 8015a10:	4940      	ldr	r1, [pc, #256]	; (8015b14 <icmp_input+0x1fc>)
 8015a12:	4841      	ldr	r0, [pc, #260]	; (8015b18 <icmp_input+0x200>)
 8015a14:	f001 fec6 	bl	80177a4 <iprintf>
          pbuf_free(r);
 8015a18:	6978      	ldr	r0, [r7, #20]
 8015a1a:	f7f7 ff6b 	bl	800d8f4 <pbuf_free>
          goto icmperr;
 8015a1e:	e06c      	b.n	8015afa <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015a20:	6879      	ldr	r1, [r7, #4]
 8015a22:	6978      	ldr	r0, [r7, #20]
 8015a24:	f7f8 f89a 	bl	800db5c <pbuf_copy>
 8015a28:	4603      	mov	r3, r0
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d003      	beq.n	8015a36 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015a2e:	6978      	ldr	r0, [r7, #20]
 8015a30:	f7f7 ff60 	bl	800d8f4 <pbuf_free>
          goto icmperr;
 8015a34:	e061      	b.n	8015afa <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015a36:	6878      	ldr	r0, [r7, #4]
 8015a38:	f7f7 ff5c 	bl	800d8f4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015a3c:	697b      	ldr	r3, [r7, #20]
 8015a3e:	607b      	str	r3, [r7, #4]
 8015a40:	e00f      	b.n	8015a62 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015a42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a44:	330e      	adds	r3, #14
 8015a46:	4619      	mov	r1, r3
 8015a48:	6878      	ldr	r0, [r7, #4]
 8015a4a:	f7f7 fecd 	bl	800d7e8 <pbuf_remove_header>
 8015a4e:	4603      	mov	r3, r0
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d006      	beq.n	8015a62 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015a54:	4b2e      	ldr	r3, [pc, #184]	; (8015b10 <icmp_input+0x1f8>)
 8015a56:	22c7      	movs	r2, #199	; 0xc7
 8015a58:	4930      	ldr	r1, [pc, #192]	; (8015b1c <icmp_input+0x204>)
 8015a5a:	482f      	ldr	r0, [pc, #188]	; (8015b18 <icmp_input+0x200>)
 8015a5c:	f001 fea2 	bl	80177a4 <iprintf>
          goto icmperr;
 8015a60:	e04b      	b.n	8015afa <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	685b      	ldr	r3, [r3, #4]
 8015a66:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015a68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a6a:	4619      	mov	r1, r3
 8015a6c:	6878      	ldr	r0, [r7, #4]
 8015a6e:	f7f7 feab 	bl	800d7c8 <pbuf_add_header>
 8015a72:	4603      	mov	r3, r0
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d12b      	bne.n	8015ad0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	685b      	ldr	r3, [r3, #4]
 8015a7c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015a7e:	69fb      	ldr	r3, [r7, #28]
 8015a80:	681a      	ldr	r2, [r3, #0]
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015a86:	4b20      	ldr	r3, [pc, #128]	; (8015b08 <icmp_input+0x1f0>)
 8015a88:	691a      	ldr	r2, [r3, #16]
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015a8e:	693b      	ldr	r3, [r7, #16]
 8015a90:	2200      	movs	r2, #0
 8015a92:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015a94:	693b      	ldr	r3, [r7, #16]
 8015a96:	2200      	movs	r2, #0
 8015a98:	709a      	strb	r2, [r3, #2]
 8015a9a:	2200      	movs	r2, #0
 8015a9c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	22ff      	movs	r2, #255	; 0xff
 8015aa2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	729a      	strb	r2, [r3, #10]
 8015aaa:	2200      	movs	r2, #0
 8015aac:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015aae:	683b      	ldr	r3, [r7, #0]
 8015ab0:	9302      	str	r3, [sp, #8]
 8015ab2:	2301      	movs	r3, #1
 8015ab4:	9301      	str	r3, [sp, #4]
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	9300      	str	r3, [sp, #0]
 8015aba:	23ff      	movs	r3, #255	; 0xff
 8015abc:	2200      	movs	r2, #0
 8015abe:	69f9      	ldr	r1, [r7, #28]
 8015ac0:	6878      	ldr	r0, [r7, #4]
 8015ac2:	f000 fa75 	bl	8015fb0 <ip4_output_if>
 8015ac6:	4603      	mov	r3, r0
 8015ac8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015aca:	e001      	b.n	8015ad0 <icmp_input+0x1b8>
      break;
 8015acc:	bf00      	nop
 8015ace:	e000      	b.n	8015ad2 <icmp_input+0x1ba>
      break;
 8015ad0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015ad2:	6878      	ldr	r0, [r7, #4]
 8015ad4:	f7f7 ff0e 	bl	800d8f4 <pbuf_free>
  return;
 8015ad8:	e013      	b.n	8015b02 <icmp_input+0x1ea>
    goto lenerr;
 8015ada:	bf00      	nop
 8015adc:	e002      	b.n	8015ae4 <icmp_input+0x1cc>
    goto lenerr;
 8015ade:	bf00      	nop
 8015ae0:	e000      	b.n	8015ae4 <icmp_input+0x1cc>
        goto lenerr;
 8015ae2:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015ae4:	6878      	ldr	r0, [r7, #4]
 8015ae6:	f7f7 ff05 	bl	800d8f4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015aea:	e00a      	b.n	8015b02 <icmp_input+0x1ea>
        goto icmperr;
 8015aec:	bf00      	nop
 8015aee:	e004      	b.n	8015afa <icmp_input+0x1e2>
        goto icmperr;
 8015af0:	bf00      	nop
 8015af2:	e002      	b.n	8015afa <icmp_input+0x1e2>
          goto icmperr;
 8015af4:	bf00      	nop
 8015af6:	e000      	b.n	8015afa <icmp_input+0x1e2>
          goto icmperr;
 8015af8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015afa:	6878      	ldr	r0, [r7, #4]
 8015afc:	f7f7 fefa 	bl	800d8f4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015b00:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015b02:	3728      	adds	r7, #40	; 0x28
 8015b04:	46bd      	mov	sp, r7
 8015b06:	bd80      	pop	{r7, pc}
 8015b08:	20009f7c 	.word	0x20009f7c
 8015b0c:	20009f90 	.word	0x20009f90
 8015b10:	0801b6f4 	.word	0x0801b6f4
 8015b14:	0801b72c 	.word	0x0801b72c
 8015b18:	0801b764 	.word	0x0801b764
 8015b1c:	0801b78c 	.word	0x0801b78c

08015b20 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b082      	sub	sp, #8
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	6078      	str	r0, [r7, #4]
 8015b28:	460b      	mov	r3, r1
 8015b2a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015b2c:	78fb      	ldrb	r3, [r7, #3]
 8015b2e:	461a      	mov	r2, r3
 8015b30:	2103      	movs	r1, #3
 8015b32:	6878      	ldr	r0, [r7, #4]
 8015b34:	f000 f814 	bl	8015b60 <icmp_send_response>
}
 8015b38:	bf00      	nop
 8015b3a:	3708      	adds	r7, #8
 8015b3c:	46bd      	mov	sp, r7
 8015b3e:	bd80      	pop	{r7, pc}

08015b40 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b082      	sub	sp, #8
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	6078      	str	r0, [r7, #4]
 8015b48:	460b      	mov	r3, r1
 8015b4a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015b4c:	78fb      	ldrb	r3, [r7, #3]
 8015b4e:	461a      	mov	r2, r3
 8015b50:	210b      	movs	r1, #11
 8015b52:	6878      	ldr	r0, [r7, #4]
 8015b54:	f000 f804 	bl	8015b60 <icmp_send_response>
}
 8015b58:	bf00      	nop
 8015b5a:	3708      	adds	r7, #8
 8015b5c:	46bd      	mov	sp, r7
 8015b5e:	bd80      	pop	{r7, pc}

08015b60 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b08c      	sub	sp, #48	; 0x30
 8015b64:	af04      	add	r7, sp, #16
 8015b66:	6078      	str	r0, [r7, #4]
 8015b68:	460b      	mov	r3, r1
 8015b6a:	70fb      	strb	r3, [r7, #3]
 8015b6c:	4613      	mov	r3, r2
 8015b6e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015b70:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015b74:	2124      	movs	r1, #36	; 0x24
 8015b76:	2022      	movs	r0, #34	; 0x22
 8015b78:	f7f7 fbd8 	bl	800d32c <pbuf_alloc>
 8015b7c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015b7e:	69fb      	ldr	r3, [r7, #28]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d04c      	beq.n	8015c1e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015b84:	69fb      	ldr	r3, [r7, #28]
 8015b86:	895b      	ldrh	r3, [r3, #10]
 8015b88:	2b23      	cmp	r3, #35	; 0x23
 8015b8a:	d806      	bhi.n	8015b9a <icmp_send_response+0x3a>
 8015b8c:	4b26      	ldr	r3, [pc, #152]	; (8015c28 <icmp_send_response+0xc8>)
 8015b8e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015b92:	4926      	ldr	r1, [pc, #152]	; (8015c2c <icmp_send_response+0xcc>)
 8015b94:	4826      	ldr	r0, [pc, #152]	; (8015c30 <icmp_send_response+0xd0>)
 8015b96:	f001 fe05 	bl	80177a4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	685b      	ldr	r3, [r3, #4]
 8015b9e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015ba0:	69fb      	ldr	r3, [r7, #28]
 8015ba2:	685b      	ldr	r3, [r3, #4]
 8015ba4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015ba6:	697b      	ldr	r3, [r7, #20]
 8015ba8:	78fa      	ldrb	r2, [r7, #3]
 8015baa:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015bac:	697b      	ldr	r3, [r7, #20]
 8015bae:	78ba      	ldrb	r2, [r7, #2]
 8015bb0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015bb2:	697b      	ldr	r3, [r7, #20]
 8015bb4:	2200      	movs	r2, #0
 8015bb6:	711a      	strb	r2, [r3, #4]
 8015bb8:	2200      	movs	r2, #0
 8015bba:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015bbc:	697b      	ldr	r3, [r7, #20]
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	719a      	strb	r2, [r3, #6]
 8015bc2:	2200      	movs	r2, #0
 8015bc4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015bc6:	69fb      	ldr	r3, [r7, #28]
 8015bc8:	685b      	ldr	r3, [r3, #4]
 8015bca:	f103 0008 	add.w	r0, r3, #8
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	685b      	ldr	r3, [r3, #4]
 8015bd2:	221c      	movs	r2, #28
 8015bd4:	4619      	mov	r1, r3
 8015bd6:	f001 fd25 	bl	8017624 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015bda:	69bb      	ldr	r3, [r7, #24]
 8015bdc:	68db      	ldr	r3, [r3, #12]
 8015bde:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015be0:	f107 030c 	add.w	r3, r7, #12
 8015be4:	4618      	mov	r0, r3
 8015be6:	f000 f825 	bl	8015c34 <ip4_route>
 8015bea:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015bec:	693b      	ldr	r3, [r7, #16]
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d011      	beq.n	8015c16 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015bf2:	697b      	ldr	r3, [r7, #20]
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	709a      	strb	r2, [r3, #2]
 8015bf8:	2200      	movs	r2, #0
 8015bfa:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015bfc:	f107 020c 	add.w	r2, r7, #12
 8015c00:	693b      	ldr	r3, [r7, #16]
 8015c02:	9302      	str	r3, [sp, #8]
 8015c04:	2301      	movs	r3, #1
 8015c06:	9301      	str	r3, [sp, #4]
 8015c08:	2300      	movs	r3, #0
 8015c0a:	9300      	str	r3, [sp, #0]
 8015c0c:	23ff      	movs	r3, #255	; 0xff
 8015c0e:	2100      	movs	r1, #0
 8015c10:	69f8      	ldr	r0, [r7, #28]
 8015c12:	f000 f9cd 	bl	8015fb0 <ip4_output_if>
  }
  pbuf_free(q);
 8015c16:	69f8      	ldr	r0, [r7, #28]
 8015c18:	f7f7 fe6c 	bl	800d8f4 <pbuf_free>
 8015c1c:	e000      	b.n	8015c20 <icmp_send_response+0xc0>
    return;
 8015c1e:	bf00      	nop
}
 8015c20:	3720      	adds	r7, #32
 8015c22:	46bd      	mov	sp, r7
 8015c24:	bd80      	pop	{r7, pc}
 8015c26:	bf00      	nop
 8015c28:	0801b6f4 	.word	0x0801b6f4
 8015c2c:	0801b7c0 	.word	0x0801b7c0
 8015c30:	0801b764 	.word	0x0801b764

08015c34 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015c34:	b480      	push	{r7}
 8015c36:	b085      	sub	sp, #20
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015c3c:	4b33      	ldr	r3, [pc, #204]	; (8015d0c <ip4_route+0xd8>)
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	60fb      	str	r3, [r7, #12]
 8015c42:	e036      	b.n	8015cb2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015c4a:	f003 0301 	and.w	r3, r3, #1
 8015c4e:	b2db      	uxtb	r3, r3
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d02b      	beq.n	8015cac <ip4_route+0x78>
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015c5a:	089b      	lsrs	r3, r3, #2
 8015c5c:	f003 0301 	and.w	r3, r3, #1
 8015c60:	b2db      	uxtb	r3, r3
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d022      	beq.n	8015cac <ip4_route+0x78>
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	3304      	adds	r3, #4
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d01d      	beq.n	8015cac <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	681a      	ldr	r2, [r3, #0]
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	3304      	adds	r3, #4
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	405a      	eors	r2, r3
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	3308      	adds	r3, #8
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	4013      	ands	r3, r2
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d101      	bne.n	8015c8c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	e038      	b.n	8015cfe <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015c92:	f003 0302 	and.w	r3, r3, #2
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d108      	bne.n	8015cac <ip4_route+0x78>
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	681a      	ldr	r2, [r3, #0]
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	330c      	adds	r3, #12
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	429a      	cmp	r2, r3
 8015ca6:	d101      	bne.n	8015cac <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	e028      	b.n	8015cfe <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	60fb      	str	r3, [r7, #12]
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d1c5      	bne.n	8015c44 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015cb8:	4b15      	ldr	r3, [pc, #84]	; (8015d10 <ip4_route+0xdc>)
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d01a      	beq.n	8015cf6 <ip4_route+0xc2>
 8015cc0:	4b13      	ldr	r3, [pc, #76]	; (8015d10 <ip4_route+0xdc>)
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015cc8:	f003 0301 	and.w	r3, r3, #1
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d012      	beq.n	8015cf6 <ip4_route+0xc2>
 8015cd0:	4b0f      	ldr	r3, [pc, #60]	; (8015d10 <ip4_route+0xdc>)
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015cd8:	f003 0304 	and.w	r3, r3, #4
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d00a      	beq.n	8015cf6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015ce0:	4b0b      	ldr	r3, [pc, #44]	; (8015d10 <ip4_route+0xdc>)
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	3304      	adds	r3, #4
 8015ce6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d004      	beq.n	8015cf6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	b2db      	uxtb	r3, r3
 8015cf2:	2b7f      	cmp	r3, #127	; 0x7f
 8015cf4:	d101      	bne.n	8015cfa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	e001      	b.n	8015cfe <ip4_route+0xca>
  }

  return netif_default;
 8015cfa:	4b05      	ldr	r3, [pc, #20]	; (8015d10 <ip4_route+0xdc>)
 8015cfc:	681b      	ldr	r3, [r3, #0]
}
 8015cfe:	4618      	mov	r0, r3
 8015d00:	3714      	adds	r7, #20
 8015d02:	46bd      	mov	sp, r7
 8015d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d08:	4770      	bx	lr
 8015d0a:	bf00      	nop
 8015d0c:	2000d680 	.word	0x2000d680
 8015d10:	2000d684 	.word	0x2000d684

08015d14 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015d14:	b580      	push	{r7, lr}
 8015d16:	b082      	sub	sp, #8
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015d22:	f003 0301 	and.w	r3, r3, #1
 8015d26:	b2db      	uxtb	r3, r3
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d016      	beq.n	8015d5a <ip4_input_accept+0x46>
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	3304      	adds	r3, #4
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d011      	beq.n	8015d5a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015d36:	4b0b      	ldr	r3, [pc, #44]	; (8015d64 <ip4_input_accept+0x50>)
 8015d38:	695a      	ldr	r2, [r3, #20]
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	3304      	adds	r3, #4
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	429a      	cmp	r2, r3
 8015d42:	d008      	beq.n	8015d56 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015d44:	4b07      	ldr	r3, [pc, #28]	; (8015d64 <ip4_input_accept+0x50>)
 8015d46:	695b      	ldr	r3, [r3, #20]
 8015d48:	6879      	ldr	r1, [r7, #4]
 8015d4a:	4618      	mov	r0, r3
 8015d4c:	f000 fa08 	bl	8016160 <ip4_addr_isbroadcast_u32>
 8015d50:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d001      	beq.n	8015d5a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015d56:	2301      	movs	r3, #1
 8015d58:	e000      	b.n	8015d5c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015d5a:	2300      	movs	r3, #0
}
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	3708      	adds	r7, #8
 8015d60:	46bd      	mov	sp, r7
 8015d62:	bd80      	pop	{r7, pc}
 8015d64:	20009f7c 	.word	0x20009f7c

08015d68 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015d68:	b580      	push	{r7, lr}
 8015d6a:	b086      	sub	sp, #24
 8015d6c:	af00      	add	r7, sp, #0
 8015d6e:	6078      	str	r0, [r7, #4]
 8015d70:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	685b      	ldr	r3, [r3, #4]
 8015d76:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015d78:	697b      	ldr	r3, [r7, #20]
 8015d7a:	781b      	ldrb	r3, [r3, #0]
 8015d7c:	091b      	lsrs	r3, r3, #4
 8015d7e:	b2db      	uxtb	r3, r3
 8015d80:	2b04      	cmp	r3, #4
 8015d82:	d004      	beq.n	8015d8e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015d84:	6878      	ldr	r0, [r7, #4]
 8015d86:	f7f7 fdb5 	bl	800d8f4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	e107      	b.n	8015f9e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015d8e:	697b      	ldr	r3, [r7, #20]
 8015d90:	781b      	ldrb	r3, [r3, #0]
 8015d92:	f003 030f 	and.w	r3, r3, #15
 8015d96:	b2db      	uxtb	r3, r3
 8015d98:	009b      	lsls	r3, r3, #2
 8015d9a:	b2db      	uxtb	r3, r3
 8015d9c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015d9e:	697b      	ldr	r3, [r7, #20]
 8015da0:	885b      	ldrh	r3, [r3, #2]
 8015da2:	b29b      	uxth	r3, r3
 8015da4:	4618      	mov	r0, r3
 8015da6:	f7f6 fa5d 	bl	800c264 <lwip_htons>
 8015daa:	4603      	mov	r3, r0
 8015dac:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	891b      	ldrh	r3, [r3, #8]
 8015db2:	89ba      	ldrh	r2, [r7, #12]
 8015db4:	429a      	cmp	r2, r3
 8015db6:	d204      	bcs.n	8015dc2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015db8:	89bb      	ldrh	r3, [r7, #12]
 8015dba:	4619      	mov	r1, r3
 8015dbc:	6878      	ldr	r0, [r7, #4]
 8015dbe:	f7f7 fc13 	bl	800d5e8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	895b      	ldrh	r3, [r3, #10]
 8015dc6:	89fa      	ldrh	r2, [r7, #14]
 8015dc8:	429a      	cmp	r2, r3
 8015dca:	d807      	bhi.n	8015ddc <ip4_input+0x74>
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	891b      	ldrh	r3, [r3, #8]
 8015dd0:	89ba      	ldrh	r2, [r7, #12]
 8015dd2:	429a      	cmp	r2, r3
 8015dd4:	d802      	bhi.n	8015ddc <ip4_input+0x74>
 8015dd6:	89fb      	ldrh	r3, [r7, #14]
 8015dd8:	2b13      	cmp	r3, #19
 8015dda:	d804      	bhi.n	8015de6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015ddc:	6878      	ldr	r0, [r7, #4]
 8015dde:	f7f7 fd89 	bl	800d8f4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015de2:	2300      	movs	r3, #0
 8015de4:	e0db      	b.n	8015f9e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015de6:	697b      	ldr	r3, [r7, #20]
 8015de8:	691b      	ldr	r3, [r3, #16]
 8015dea:	4a6f      	ldr	r2, [pc, #444]	; (8015fa8 <ip4_input+0x240>)
 8015dec:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015dee:	697b      	ldr	r3, [r7, #20]
 8015df0:	68db      	ldr	r3, [r3, #12]
 8015df2:	4a6d      	ldr	r2, [pc, #436]	; (8015fa8 <ip4_input+0x240>)
 8015df4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015df6:	4b6c      	ldr	r3, [pc, #432]	; (8015fa8 <ip4_input+0x240>)
 8015df8:	695b      	ldr	r3, [r3, #20]
 8015dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015dfe:	2be0      	cmp	r3, #224	; 0xe0
 8015e00:	d112      	bne.n	8015e28 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015e02:	683b      	ldr	r3, [r7, #0]
 8015e04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015e08:	f003 0301 	and.w	r3, r3, #1
 8015e0c:	b2db      	uxtb	r3, r3
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d007      	beq.n	8015e22 <ip4_input+0xba>
 8015e12:	683b      	ldr	r3, [r7, #0]
 8015e14:	3304      	adds	r3, #4
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d002      	beq.n	8015e22 <ip4_input+0xba>
      netif = inp;
 8015e1c:	683b      	ldr	r3, [r7, #0]
 8015e1e:	613b      	str	r3, [r7, #16]
 8015e20:	e02a      	b.n	8015e78 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015e22:	2300      	movs	r3, #0
 8015e24:	613b      	str	r3, [r7, #16]
 8015e26:	e027      	b.n	8015e78 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015e28:	6838      	ldr	r0, [r7, #0]
 8015e2a:	f7ff ff73 	bl	8015d14 <ip4_input_accept>
 8015e2e:	4603      	mov	r3, r0
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d002      	beq.n	8015e3a <ip4_input+0xd2>
      netif = inp;
 8015e34:	683b      	ldr	r3, [r7, #0]
 8015e36:	613b      	str	r3, [r7, #16]
 8015e38:	e01e      	b.n	8015e78 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015e3e:	4b5a      	ldr	r3, [pc, #360]	; (8015fa8 <ip4_input+0x240>)
 8015e40:	695b      	ldr	r3, [r3, #20]
 8015e42:	b2db      	uxtb	r3, r3
 8015e44:	2b7f      	cmp	r3, #127	; 0x7f
 8015e46:	d017      	beq.n	8015e78 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015e48:	4b58      	ldr	r3, [pc, #352]	; (8015fac <ip4_input+0x244>)
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	613b      	str	r3, [r7, #16]
 8015e4e:	e00e      	b.n	8015e6e <ip4_input+0x106>
          if (netif == inp) {
 8015e50:	693a      	ldr	r2, [r7, #16]
 8015e52:	683b      	ldr	r3, [r7, #0]
 8015e54:	429a      	cmp	r2, r3
 8015e56:	d006      	beq.n	8015e66 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015e58:	6938      	ldr	r0, [r7, #16]
 8015e5a:	f7ff ff5b 	bl	8015d14 <ip4_input_accept>
 8015e5e:	4603      	mov	r3, r0
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d108      	bne.n	8015e76 <ip4_input+0x10e>
 8015e64:	e000      	b.n	8015e68 <ip4_input+0x100>
            continue;
 8015e66:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015e68:	693b      	ldr	r3, [r7, #16]
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	613b      	str	r3, [r7, #16]
 8015e6e:	693b      	ldr	r3, [r7, #16]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d1ed      	bne.n	8015e50 <ip4_input+0xe8>
 8015e74:	e000      	b.n	8015e78 <ip4_input+0x110>
            break;
 8015e76:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015e78:	4b4b      	ldr	r3, [pc, #300]	; (8015fa8 <ip4_input+0x240>)
 8015e7a:	691b      	ldr	r3, [r3, #16]
 8015e7c:	6839      	ldr	r1, [r7, #0]
 8015e7e:	4618      	mov	r0, r3
 8015e80:	f000 f96e 	bl	8016160 <ip4_addr_isbroadcast_u32>
 8015e84:	4603      	mov	r3, r0
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d105      	bne.n	8015e96 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015e8a:	4b47      	ldr	r3, [pc, #284]	; (8015fa8 <ip4_input+0x240>)
 8015e8c:	691b      	ldr	r3, [r3, #16]
 8015e8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015e92:	2be0      	cmp	r3, #224	; 0xe0
 8015e94:	d104      	bne.n	8015ea0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015e96:	6878      	ldr	r0, [r7, #4]
 8015e98:	f7f7 fd2c 	bl	800d8f4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	e07e      	b.n	8015f9e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015ea0:	693b      	ldr	r3, [r7, #16]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d104      	bne.n	8015eb0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015ea6:	6878      	ldr	r0, [r7, #4]
 8015ea8:	f7f7 fd24 	bl	800d8f4 <pbuf_free>
    return ERR_OK;
 8015eac:	2300      	movs	r3, #0
 8015eae:	e076      	b.n	8015f9e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015eb0:	697b      	ldr	r3, [r7, #20]
 8015eb2:	88db      	ldrh	r3, [r3, #6]
 8015eb4:	b29b      	uxth	r3, r3
 8015eb6:	461a      	mov	r2, r3
 8015eb8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015ebc:	4013      	ands	r3, r2
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d00b      	beq.n	8015eda <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015ec2:	6878      	ldr	r0, [r7, #4]
 8015ec4:	f000 fc92 	bl	80167ec <ip4_reass>
 8015ec8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d101      	bne.n	8015ed4 <ip4_input+0x16c>
      return ERR_OK;
 8015ed0:	2300      	movs	r3, #0
 8015ed2:	e064      	b.n	8015f9e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	685b      	ldr	r3, [r3, #4]
 8015ed8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015eda:	4a33      	ldr	r2, [pc, #204]	; (8015fa8 <ip4_input+0x240>)
 8015edc:	693b      	ldr	r3, [r7, #16]
 8015ede:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015ee0:	4a31      	ldr	r2, [pc, #196]	; (8015fa8 <ip4_input+0x240>)
 8015ee2:	683b      	ldr	r3, [r7, #0]
 8015ee4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015ee6:	4a30      	ldr	r2, [pc, #192]	; (8015fa8 <ip4_input+0x240>)
 8015ee8:	697b      	ldr	r3, [r7, #20]
 8015eea:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015eec:	697b      	ldr	r3, [r7, #20]
 8015eee:	781b      	ldrb	r3, [r3, #0]
 8015ef0:	f003 030f 	and.w	r3, r3, #15
 8015ef4:	b2db      	uxtb	r3, r3
 8015ef6:	009b      	lsls	r3, r3, #2
 8015ef8:	b2db      	uxtb	r3, r3
 8015efa:	b29a      	uxth	r2, r3
 8015efc:	4b2a      	ldr	r3, [pc, #168]	; (8015fa8 <ip4_input+0x240>)
 8015efe:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015f00:	89fb      	ldrh	r3, [r7, #14]
 8015f02:	4619      	mov	r1, r3
 8015f04:	6878      	ldr	r0, [r7, #4]
 8015f06:	f7f7 fc6f 	bl	800d7e8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015f0a:	697b      	ldr	r3, [r7, #20]
 8015f0c:	7a5b      	ldrb	r3, [r3, #9]
 8015f0e:	2b11      	cmp	r3, #17
 8015f10:	d006      	beq.n	8015f20 <ip4_input+0x1b8>
 8015f12:	2b11      	cmp	r3, #17
 8015f14:	dc13      	bgt.n	8015f3e <ip4_input+0x1d6>
 8015f16:	2b01      	cmp	r3, #1
 8015f18:	d00c      	beq.n	8015f34 <ip4_input+0x1cc>
 8015f1a:	2b06      	cmp	r3, #6
 8015f1c:	d005      	beq.n	8015f2a <ip4_input+0x1c2>
 8015f1e:	e00e      	b.n	8015f3e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015f20:	6839      	ldr	r1, [r7, #0]
 8015f22:	6878      	ldr	r0, [r7, #4]
 8015f24:	f7fe f970 	bl	8014208 <udp_input>
        break;
 8015f28:	e026      	b.n	8015f78 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015f2a:	6839      	ldr	r1, [r7, #0]
 8015f2c:	6878      	ldr	r0, [r7, #4]
 8015f2e:	f7f9 fd2d 	bl	800f98c <tcp_input>
        break;
 8015f32:	e021      	b.n	8015f78 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015f34:	6839      	ldr	r1, [r7, #0]
 8015f36:	6878      	ldr	r0, [r7, #4]
 8015f38:	f7ff fcee 	bl	8015918 <icmp_input>
        break;
 8015f3c:	e01c      	b.n	8015f78 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015f3e:	4b1a      	ldr	r3, [pc, #104]	; (8015fa8 <ip4_input+0x240>)
 8015f40:	695b      	ldr	r3, [r3, #20]
 8015f42:	6939      	ldr	r1, [r7, #16]
 8015f44:	4618      	mov	r0, r3
 8015f46:	f000 f90b 	bl	8016160 <ip4_addr_isbroadcast_u32>
 8015f4a:	4603      	mov	r3, r0
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d10f      	bne.n	8015f70 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015f50:	4b15      	ldr	r3, [pc, #84]	; (8015fa8 <ip4_input+0x240>)
 8015f52:	695b      	ldr	r3, [r3, #20]
 8015f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015f58:	2be0      	cmp	r3, #224	; 0xe0
 8015f5a:	d009      	beq.n	8015f70 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015f5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015f60:	4619      	mov	r1, r3
 8015f62:	6878      	ldr	r0, [r7, #4]
 8015f64:	f7f7 fcb3 	bl	800d8ce <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015f68:	2102      	movs	r1, #2
 8015f6a:	6878      	ldr	r0, [r7, #4]
 8015f6c:	f7ff fdd8 	bl	8015b20 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015f70:	6878      	ldr	r0, [r7, #4]
 8015f72:	f7f7 fcbf 	bl	800d8f4 <pbuf_free>
        break;
 8015f76:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015f78:	4b0b      	ldr	r3, [pc, #44]	; (8015fa8 <ip4_input+0x240>)
 8015f7a:	2200      	movs	r2, #0
 8015f7c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015f7e:	4b0a      	ldr	r3, [pc, #40]	; (8015fa8 <ip4_input+0x240>)
 8015f80:	2200      	movs	r2, #0
 8015f82:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015f84:	4b08      	ldr	r3, [pc, #32]	; (8015fa8 <ip4_input+0x240>)
 8015f86:	2200      	movs	r2, #0
 8015f88:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015f8a:	4b07      	ldr	r3, [pc, #28]	; (8015fa8 <ip4_input+0x240>)
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015f90:	4b05      	ldr	r3, [pc, #20]	; (8015fa8 <ip4_input+0x240>)
 8015f92:	2200      	movs	r2, #0
 8015f94:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015f96:	4b04      	ldr	r3, [pc, #16]	; (8015fa8 <ip4_input+0x240>)
 8015f98:	2200      	movs	r2, #0
 8015f9a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015f9c:	2300      	movs	r3, #0
}
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	3718      	adds	r7, #24
 8015fa2:	46bd      	mov	sp, r7
 8015fa4:	bd80      	pop	{r7, pc}
 8015fa6:	bf00      	nop
 8015fa8:	20009f7c 	.word	0x20009f7c
 8015fac:	2000d680 	.word	0x2000d680

08015fb0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015fb0:	b580      	push	{r7, lr}
 8015fb2:	b08a      	sub	sp, #40	; 0x28
 8015fb4:	af04      	add	r7, sp, #16
 8015fb6:	60f8      	str	r0, [r7, #12]
 8015fb8:	60b9      	str	r1, [r7, #8]
 8015fba:	607a      	str	r2, [r7, #4]
 8015fbc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015fbe:	68bb      	ldr	r3, [r7, #8]
 8015fc0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d009      	beq.n	8015fdc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015fc8:	68bb      	ldr	r3, [r7, #8]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d003      	beq.n	8015fd6 <ip4_output_if+0x26>
 8015fce:	68bb      	ldr	r3, [r7, #8]
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d102      	bne.n	8015fdc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fd8:	3304      	adds	r3, #4
 8015fda:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015fdc:	78fa      	ldrb	r2, [r7, #3]
 8015fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fe0:	9302      	str	r3, [sp, #8]
 8015fe2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015fe6:	9301      	str	r3, [sp, #4]
 8015fe8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015fec:	9300      	str	r3, [sp, #0]
 8015fee:	4613      	mov	r3, r2
 8015ff0:	687a      	ldr	r2, [r7, #4]
 8015ff2:	6979      	ldr	r1, [r7, #20]
 8015ff4:	68f8      	ldr	r0, [r7, #12]
 8015ff6:	f000 f805 	bl	8016004 <ip4_output_if_src>
 8015ffa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	3718      	adds	r7, #24
 8016000:	46bd      	mov	sp, r7
 8016002:	bd80      	pop	{r7, pc}

08016004 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016004:	b580      	push	{r7, lr}
 8016006:	b088      	sub	sp, #32
 8016008:	af00      	add	r7, sp, #0
 801600a:	60f8      	str	r0, [r7, #12]
 801600c:	60b9      	str	r1, [r7, #8]
 801600e:	607a      	str	r2, [r7, #4]
 8016010:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	7b9b      	ldrb	r3, [r3, #14]
 8016016:	2b01      	cmp	r3, #1
 8016018:	d006      	beq.n	8016028 <ip4_output_if_src+0x24>
 801601a:	4b4b      	ldr	r3, [pc, #300]	; (8016148 <ip4_output_if_src+0x144>)
 801601c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016020:	494a      	ldr	r1, [pc, #296]	; (801614c <ip4_output_if_src+0x148>)
 8016022:	484b      	ldr	r0, [pc, #300]	; (8016150 <ip4_output_if_src+0x14c>)
 8016024:	f001 fbbe 	bl	80177a4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d060      	beq.n	80160f0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801602e:	2314      	movs	r3, #20
 8016030:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016032:	2114      	movs	r1, #20
 8016034:	68f8      	ldr	r0, [r7, #12]
 8016036:	f7f7 fbc7 	bl	800d7c8 <pbuf_add_header>
 801603a:	4603      	mov	r3, r0
 801603c:	2b00      	cmp	r3, #0
 801603e:	d002      	beq.n	8016046 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016040:	f06f 0301 	mvn.w	r3, #1
 8016044:	e07c      	b.n	8016140 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	685b      	ldr	r3, [r3, #4]
 801604a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	895b      	ldrh	r3, [r3, #10]
 8016050:	2b13      	cmp	r3, #19
 8016052:	d806      	bhi.n	8016062 <ip4_output_if_src+0x5e>
 8016054:	4b3c      	ldr	r3, [pc, #240]	; (8016148 <ip4_output_if_src+0x144>)
 8016056:	f44f 7262 	mov.w	r2, #904	; 0x388
 801605a:	493e      	ldr	r1, [pc, #248]	; (8016154 <ip4_output_if_src+0x150>)
 801605c:	483c      	ldr	r0, [pc, #240]	; (8016150 <ip4_output_if_src+0x14c>)
 801605e:	f001 fba1 	bl	80177a4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016062:	69fb      	ldr	r3, [r7, #28]
 8016064:	78fa      	ldrb	r2, [r7, #3]
 8016066:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016068:	69fb      	ldr	r3, [r7, #28]
 801606a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801606e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	681a      	ldr	r2, [r3, #0]
 8016074:	69fb      	ldr	r3, [r7, #28]
 8016076:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016078:	8b7b      	ldrh	r3, [r7, #26]
 801607a:	089b      	lsrs	r3, r3, #2
 801607c:	b29b      	uxth	r3, r3
 801607e:	b2db      	uxtb	r3, r3
 8016080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016084:	b2da      	uxtb	r2, r3
 8016086:	69fb      	ldr	r3, [r7, #28]
 8016088:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801608a:	69fb      	ldr	r3, [r7, #28]
 801608c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016090:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	891b      	ldrh	r3, [r3, #8]
 8016096:	4618      	mov	r0, r3
 8016098:	f7f6 f8e4 	bl	800c264 <lwip_htons>
 801609c:	4603      	mov	r3, r0
 801609e:	461a      	mov	r2, r3
 80160a0:	69fb      	ldr	r3, [r7, #28]
 80160a2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80160a4:	69fb      	ldr	r3, [r7, #28]
 80160a6:	2200      	movs	r2, #0
 80160a8:	719a      	strb	r2, [r3, #6]
 80160aa:	2200      	movs	r2, #0
 80160ac:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80160ae:	4b2a      	ldr	r3, [pc, #168]	; (8016158 <ip4_output_if_src+0x154>)
 80160b0:	881b      	ldrh	r3, [r3, #0]
 80160b2:	4618      	mov	r0, r3
 80160b4:	f7f6 f8d6 	bl	800c264 <lwip_htons>
 80160b8:	4603      	mov	r3, r0
 80160ba:	461a      	mov	r2, r3
 80160bc:	69fb      	ldr	r3, [r7, #28]
 80160be:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80160c0:	4b25      	ldr	r3, [pc, #148]	; (8016158 <ip4_output_if_src+0x154>)
 80160c2:	881b      	ldrh	r3, [r3, #0]
 80160c4:	3301      	adds	r3, #1
 80160c6:	b29a      	uxth	r2, r3
 80160c8:	4b23      	ldr	r3, [pc, #140]	; (8016158 <ip4_output_if_src+0x154>)
 80160ca:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80160cc:	68bb      	ldr	r3, [r7, #8]
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d104      	bne.n	80160dc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80160d2:	4b22      	ldr	r3, [pc, #136]	; (801615c <ip4_output_if_src+0x158>)
 80160d4:	681a      	ldr	r2, [r3, #0]
 80160d6:	69fb      	ldr	r3, [r7, #28]
 80160d8:	60da      	str	r2, [r3, #12]
 80160da:	e003      	b.n	80160e4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80160dc:	68bb      	ldr	r3, [r7, #8]
 80160de:	681a      	ldr	r2, [r3, #0]
 80160e0:	69fb      	ldr	r3, [r7, #28]
 80160e2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80160e4:	69fb      	ldr	r3, [r7, #28]
 80160e6:	2200      	movs	r2, #0
 80160e8:	729a      	strb	r2, [r3, #10]
 80160ea:	2200      	movs	r2, #0
 80160ec:	72da      	strb	r2, [r3, #11]
 80160ee:	e00f      	b.n	8016110 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	895b      	ldrh	r3, [r3, #10]
 80160f4:	2b13      	cmp	r3, #19
 80160f6:	d802      	bhi.n	80160fe <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80160f8:	f06f 0301 	mvn.w	r3, #1
 80160fc:	e020      	b.n	8016140 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	685b      	ldr	r3, [r3, #4]
 8016102:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016104:	69fb      	ldr	r3, [r7, #28]
 8016106:	691b      	ldr	r3, [r3, #16]
 8016108:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801610a:	f107 0314 	add.w	r3, r7, #20
 801610e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016112:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016114:	2b00      	cmp	r3, #0
 8016116:	d00c      	beq.n	8016132 <ip4_output_if_src+0x12e>
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	891a      	ldrh	r2, [r3, #8]
 801611c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801611e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016120:	429a      	cmp	r2, r3
 8016122:	d906      	bls.n	8016132 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016124:	687a      	ldr	r2, [r7, #4]
 8016126:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016128:	68f8      	ldr	r0, [r7, #12]
 801612a:	f000 fd4d 	bl	8016bc8 <ip4_frag>
 801612e:	4603      	mov	r3, r0
 8016130:	e006      	b.n	8016140 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016134:	695b      	ldr	r3, [r3, #20]
 8016136:	687a      	ldr	r2, [r7, #4]
 8016138:	68f9      	ldr	r1, [r7, #12]
 801613a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801613c:	4798      	blx	r3
 801613e:	4603      	mov	r3, r0
}
 8016140:	4618      	mov	r0, r3
 8016142:	3720      	adds	r7, #32
 8016144:	46bd      	mov	sp, r7
 8016146:	bd80      	pop	{r7, pc}
 8016148:	0801b7ec 	.word	0x0801b7ec
 801614c:	0801b820 	.word	0x0801b820
 8016150:	0801b82c 	.word	0x0801b82c
 8016154:	0801b854 	.word	0x0801b854
 8016158:	2000697a 	.word	0x2000697a
 801615c:	0801bc74 	.word	0x0801bc74

08016160 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016160:	b480      	push	{r7}
 8016162:	b085      	sub	sp, #20
 8016164:	af00      	add	r7, sp, #0
 8016166:	6078      	str	r0, [r7, #4]
 8016168:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016174:	d002      	beq.n	801617c <ip4_addr_isbroadcast_u32+0x1c>
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d101      	bne.n	8016180 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801617c:	2301      	movs	r3, #1
 801617e:	e02a      	b.n	80161d6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016180:	683b      	ldr	r3, [r7, #0]
 8016182:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016186:	f003 0302 	and.w	r3, r3, #2
 801618a:	2b00      	cmp	r3, #0
 801618c:	d101      	bne.n	8016192 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801618e:	2300      	movs	r3, #0
 8016190:	e021      	b.n	80161d6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016192:	683b      	ldr	r3, [r7, #0]
 8016194:	3304      	adds	r3, #4
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	687a      	ldr	r2, [r7, #4]
 801619a:	429a      	cmp	r2, r3
 801619c:	d101      	bne.n	80161a2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801619e:	2300      	movs	r3, #0
 80161a0:	e019      	b.n	80161d6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80161a2:	68fa      	ldr	r2, [r7, #12]
 80161a4:	683b      	ldr	r3, [r7, #0]
 80161a6:	3304      	adds	r3, #4
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	405a      	eors	r2, r3
 80161ac:	683b      	ldr	r3, [r7, #0]
 80161ae:	3308      	adds	r3, #8
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	4013      	ands	r3, r2
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d10d      	bne.n	80161d4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80161b8:	683b      	ldr	r3, [r7, #0]
 80161ba:	3308      	adds	r3, #8
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	43da      	mvns	r2, r3
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80161c4:	683b      	ldr	r3, [r7, #0]
 80161c6:	3308      	adds	r3, #8
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80161cc:	429a      	cmp	r2, r3
 80161ce:	d101      	bne.n	80161d4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80161d0:	2301      	movs	r3, #1
 80161d2:	e000      	b.n	80161d6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80161d4:	2300      	movs	r3, #0
  }
}
 80161d6:	4618      	mov	r0, r3
 80161d8:	3714      	adds	r7, #20
 80161da:	46bd      	mov	sp, r7
 80161dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e0:	4770      	bx	lr
	...

080161e4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b084      	sub	sp, #16
 80161e8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80161ea:	2300      	movs	r3, #0
 80161ec:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80161ee:	4b12      	ldr	r3, [pc, #72]	; (8016238 <ip_reass_tmr+0x54>)
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80161f4:	e018      	b.n	8016228 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	7fdb      	ldrb	r3, [r3, #31]
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d00b      	beq.n	8016216 <ip_reass_tmr+0x32>
      r->timer--;
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	7fdb      	ldrb	r3, [r3, #31]
 8016202:	3b01      	subs	r3, #1
 8016204:	b2da      	uxtb	r2, r3
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	60fb      	str	r3, [r7, #12]
 8016214:	e008      	b.n	8016228 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016220:	68b9      	ldr	r1, [r7, #8]
 8016222:	6878      	ldr	r0, [r7, #4]
 8016224:	f000 f80a 	bl	801623c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d1e3      	bne.n	80161f6 <ip_reass_tmr+0x12>
    }
  }
}
 801622e:	bf00      	nop
 8016230:	bf00      	nop
 8016232:	3710      	adds	r7, #16
 8016234:	46bd      	mov	sp, r7
 8016236:	bd80      	pop	{r7, pc}
 8016238:	2000697c 	.word	0x2000697c

0801623c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801623c:	b580      	push	{r7, lr}
 801623e:	b088      	sub	sp, #32
 8016240:	af00      	add	r7, sp, #0
 8016242:	6078      	str	r0, [r7, #4]
 8016244:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016246:	2300      	movs	r3, #0
 8016248:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801624a:	683a      	ldr	r2, [r7, #0]
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	429a      	cmp	r2, r3
 8016250:	d105      	bne.n	801625e <ip_reass_free_complete_datagram+0x22>
 8016252:	4b45      	ldr	r3, [pc, #276]	; (8016368 <ip_reass_free_complete_datagram+0x12c>)
 8016254:	22ab      	movs	r2, #171	; 0xab
 8016256:	4945      	ldr	r1, [pc, #276]	; (801636c <ip_reass_free_complete_datagram+0x130>)
 8016258:	4845      	ldr	r0, [pc, #276]	; (8016370 <ip_reass_free_complete_datagram+0x134>)
 801625a:	f001 faa3 	bl	80177a4 <iprintf>
  if (prev != NULL) {
 801625e:	683b      	ldr	r3, [r7, #0]
 8016260:	2b00      	cmp	r3, #0
 8016262:	d00a      	beq.n	801627a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016264:	683b      	ldr	r3, [r7, #0]
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	687a      	ldr	r2, [r7, #4]
 801626a:	429a      	cmp	r2, r3
 801626c:	d005      	beq.n	801627a <ip_reass_free_complete_datagram+0x3e>
 801626e:	4b3e      	ldr	r3, [pc, #248]	; (8016368 <ip_reass_free_complete_datagram+0x12c>)
 8016270:	22ad      	movs	r2, #173	; 0xad
 8016272:	4940      	ldr	r1, [pc, #256]	; (8016374 <ip_reass_free_complete_datagram+0x138>)
 8016274:	483e      	ldr	r0, [pc, #248]	; (8016370 <ip_reass_free_complete_datagram+0x134>)
 8016276:	f001 fa95 	bl	80177a4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	685b      	ldr	r3, [r3, #4]
 801627e:	685b      	ldr	r3, [r3, #4]
 8016280:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016282:	697b      	ldr	r3, [r7, #20]
 8016284:	889b      	ldrh	r3, [r3, #4]
 8016286:	b29b      	uxth	r3, r3
 8016288:	2b00      	cmp	r3, #0
 801628a:	d12a      	bne.n	80162e2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	685b      	ldr	r3, [r3, #4]
 8016290:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016292:	697b      	ldr	r3, [r7, #20]
 8016294:	681a      	ldr	r2, [r3, #0]
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801629a:	69bb      	ldr	r3, [r7, #24]
 801629c:	6858      	ldr	r0, [r3, #4]
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	3308      	adds	r3, #8
 80162a2:	2214      	movs	r2, #20
 80162a4:	4619      	mov	r1, r3
 80162a6:	f001 f9bd 	bl	8017624 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80162aa:	2101      	movs	r1, #1
 80162ac:	69b8      	ldr	r0, [r7, #24]
 80162ae:	f7ff fc47 	bl	8015b40 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80162b2:	69b8      	ldr	r0, [r7, #24]
 80162b4:	f7f7 fbac 	bl	800da10 <pbuf_clen>
 80162b8:	4603      	mov	r3, r0
 80162ba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80162bc:	8bfa      	ldrh	r2, [r7, #30]
 80162be:	8a7b      	ldrh	r3, [r7, #18]
 80162c0:	4413      	add	r3, r2
 80162c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80162c6:	db05      	blt.n	80162d4 <ip_reass_free_complete_datagram+0x98>
 80162c8:	4b27      	ldr	r3, [pc, #156]	; (8016368 <ip_reass_free_complete_datagram+0x12c>)
 80162ca:	22bc      	movs	r2, #188	; 0xbc
 80162cc:	492a      	ldr	r1, [pc, #168]	; (8016378 <ip_reass_free_complete_datagram+0x13c>)
 80162ce:	4828      	ldr	r0, [pc, #160]	; (8016370 <ip_reass_free_complete_datagram+0x134>)
 80162d0:	f001 fa68 	bl	80177a4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80162d4:	8bfa      	ldrh	r2, [r7, #30]
 80162d6:	8a7b      	ldrh	r3, [r7, #18]
 80162d8:	4413      	add	r3, r2
 80162da:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80162dc:	69b8      	ldr	r0, [r7, #24]
 80162de:	f7f7 fb09 	bl	800d8f4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	685b      	ldr	r3, [r3, #4]
 80162e6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80162e8:	e01f      	b.n	801632a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80162ea:	69bb      	ldr	r3, [r7, #24]
 80162ec:	685b      	ldr	r3, [r3, #4]
 80162ee:	617b      	str	r3, [r7, #20]
    pcur = p;
 80162f0:	69bb      	ldr	r3, [r7, #24]
 80162f2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80162f4:	697b      	ldr	r3, [r7, #20]
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80162fa:	68f8      	ldr	r0, [r7, #12]
 80162fc:	f7f7 fb88 	bl	800da10 <pbuf_clen>
 8016300:	4603      	mov	r3, r0
 8016302:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016304:	8bfa      	ldrh	r2, [r7, #30]
 8016306:	8a7b      	ldrh	r3, [r7, #18]
 8016308:	4413      	add	r3, r2
 801630a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801630e:	db05      	blt.n	801631c <ip_reass_free_complete_datagram+0xe0>
 8016310:	4b15      	ldr	r3, [pc, #84]	; (8016368 <ip_reass_free_complete_datagram+0x12c>)
 8016312:	22cc      	movs	r2, #204	; 0xcc
 8016314:	4918      	ldr	r1, [pc, #96]	; (8016378 <ip_reass_free_complete_datagram+0x13c>)
 8016316:	4816      	ldr	r0, [pc, #88]	; (8016370 <ip_reass_free_complete_datagram+0x134>)
 8016318:	f001 fa44 	bl	80177a4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801631c:	8bfa      	ldrh	r2, [r7, #30]
 801631e:	8a7b      	ldrh	r3, [r7, #18]
 8016320:	4413      	add	r3, r2
 8016322:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016324:	68f8      	ldr	r0, [r7, #12]
 8016326:	f7f7 fae5 	bl	800d8f4 <pbuf_free>
  while (p != NULL) {
 801632a:	69bb      	ldr	r3, [r7, #24]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d1dc      	bne.n	80162ea <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016330:	6839      	ldr	r1, [r7, #0]
 8016332:	6878      	ldr	r0, [r7, #4]
 8016334:	f000 f8c2 	bl	80164bc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016338:	4b10      	ldr	r3, [pc, #64]	; (801637c <ip_reass_free_complete_datagram+0x140>)
 801633a:	881b      	ldrh	r3, [r3, #0]
 801633c:	8bfa      	ldrh	r2, [r7, #30]
 801633e:	429a      	cmp	r2, r3
 8016340:	d905      	bls.n	801634e <ip_reass_free_complete_datagram+0x112>
 8016342:	4b09      	ldr	r3, [pc, #36]	; (8016368 <ip_reass_free_complete_datagram+0x12c>)
 8016344:	22d2      	movs	r2, #210	; 0xd2
 8016346:	490e      	ldr	r1, [pc, #56]	; (8016380 <ip_reass_free_complete_datagram+0x144>)
 8016348:	4809      	ldr	r0, [pc, #36]	; (8016370 <ip_reass_free_complete_datagram+0x134>)
 801634a:	f001 fa2b 	bl	80177a4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801634e:	4b0b      	ldr	r3, [pc, #44]	; (801637c <ip_reass_free_complete_datagram+0x140>)
 8016350:	881a      	ldrh	r2, [r3, #0]
 8016352:	8bfb      	ldrh	r3, [r7, #30]
 8016354:	1ad3      	subs	r3, r2, r3
 8016356:	b29a      	uxth	r2, r3
 8016358:	4b08      	ldr	r3, [pc, #32]	; (801637c <ip_reass_free_complete_datagram+0x140>)
 801635a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801635c:	8bfb      	ldrh	r3, [r7, #30]
}
 801635e:	4618      	mov	r0, r3
 8016360:	3720      	adds	r7, #32
 8016362:	46bd      	mov	sp, r7
 8016364:	bd80      	pop	{r7, pc}
 8016366:	bf00      	nop
 8016368:	0801b884 	.word	0x0801b884
 801636c:	0801b8c0 	.word	0x0801b8c0
 8016370:	0801b8cc 	.word	0x0801b8cc
 8016374:	0801b8f4 	.word	0x0801b8f4
 8016378:	0801b908 	.word	0x0801b908
 801637c:	20006980 	.word	0x20006980
 8016380:	0801b928 	.word	0x0801b928

08016384 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016384:	b580      	push	{r7, lr}
 8016386:	b08a      	sub	sp, #40	; 0x28
 8016388:	af00      	add	r7, sp, #0
 801638a:	6078      	str	r0, [r7, #4]
 801638c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801638e:	2300      	movs	r3, #0
 8016390:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016392:	2300      	movs	r3, #0
 8016394:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016396:	2300      	movs	r3, #0
 8016398:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801639a:	2300      	movs	r3, #0
 801639c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801639e:	2300      	movs	r3, #0
 80163a0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80163a2:	4b28      	ldr	r3, [pc, #160]	; (8016444 <ip_reass_remove_oldest_datagram+0xc0>)
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80163a8:	e030      	b.n	801640c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80163aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ac:	695a      	ldr	r2, [r3, #20]
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	68db      	ldr	r3, [r3, #12]
 80163b2:	429a      	cmp	r2, r3
 80163b4:	d10c      	bne.n	80163d0 <ip_reass_remove_oldest_datagram+0x4c>
 80163b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163b8:	699a      	ldr	r2, [r3, #24]
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	691b      	ldr	r3, [r3, #16]
 80163be:	429a      	cmp	r2, r3
 80163c0:	d106      	bne.n	80163d0 <ip_reass_remove_oldest_datagram+0x4c>
 80163c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163c4:	899a      	ldrh	r2, [r3, #12]
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	889b      	ldrh	r3, [r3, #4]
 80163ca:	b29b      	uxth	r3, r3
 80163cc:	429a      	cmp	r2, r3
 80163ce:	d014      	beq.n	80163fa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80163d0:	693b      	ldr	r3, [r7, #16]
 80163d2:	3301      	adds	r3, #1
 80163d4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80163d6:	6a3b      	ldr	r3, [r7, #32]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d104      	bne.n	80163e6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80163dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163de:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80163e0:	69fb      	ldr	r3, [r7, #28]
 80163e2:	61bb      	str	r3, [r7, #24]
 80163e4:	e009      	b.n	80163fa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80163e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163e8:	7fda      	ldrb	r2, [r3, #31]
 80163ea:	6a3b      	ldr	r3, [r7, #32]
 80163ec:	7fdb      	ldrb	r3, [r3, #31]
 80163ee:	429a      	cmp	r2, r3
 80163f0:	d803      	bhi.n	80163fa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80163f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163f4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80163f6:	69fb      	ldr	r3, [r7, #28]
 80163f8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80163fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d001      	beq.n	8016406 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016404:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801640e:	2b00      	cmp	r3, #0
 8016410:	d1cb      	bne.n	80163aa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016412:	6a3b      	ldr	r3, [r7, #32]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d008      	beq.n	801642a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016418:	69b9      	ldr	r1, [r7, #24]
 801641a:	6a38      	ldr	r0, [r7, #32]
 801641c:	f7ff ff0e 	bl	801623c <ip_reass_free_complete_datagram>
 8016420:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016422:	697a      	ldr	r2, [r7, #20]
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	4413      	add	r3, r2
 8016428:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801642a:	697a      	ldr	r2, [r7, #20]
 801642c:	683b      	ldr	r3, [r7, #0]
 801642e:	429a      	cmp	r2, r3
 8016430:	da02      	bge.n	8016438 <ip_reass_remove_oldest_datagram+0xb4>
 8016432:	693b      	ldr	r3, [r7, #16]
 8016434:	2b01      	cmp	r3, #1
 8016436:	dcac      	bgt.n	8016392 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016438:	697b      	ldr	r3, [r7, #20]
}
 801643a:	4618      	mov	r0, r3
 801643c:	3728      	adds	r7, #40	; 0x28
 801643e:	46bd      	mov	sp, r7
 8016440:	bd80      	pop	{r7, pc}
 8016442:	bf00      	nop
 8016444:	2000697c 	.word	0x2000697c

08016448 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016448:	b580      	push	{r7, lr}
 801644a:	b084      	sub	sp, #16
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
 8016450:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016452:	2004      	movs	r0, #4
 8016454:	f7f6 fbbc 	bl	800cbd0 <memp_malloc>
 8016458:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d110      	bne.n	8016482 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016460:	6839      	ldr	r1, [r7, #0]
 8016462:	6878      	ldr	r0, [r7, #4]
 8016464:	f7ff ff8e 	bl	8016384 <ip_reass_remove_oldest_datagram>
 8016468:	4602      	mov	r2, r0
 801646a:	683b      	ldr	r3, [r7, #0]
 801646c:	4293      	cmp	r3, r2
 801646e:	dc03      	bgt.n	8016478 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016470:	2004      	movs	r0, #4
 8016472:	f7f6 fbad 	bl	800cbd0 <memp_malloc>
 8016476:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	2b00      	cmp	r3, #0
 801647c:	d101      	bne.n	8016482 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801647e:	2300      	movs	r3, #0
 8016480:	e016      	b.n	80164b0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016482:	2220      	movs	r2, #32
 8016484:	2100      	movs	r1, #0
 8016486:	68f8      	ldr	r0, [r7, #12]
 8016488:	f001 f8da 	bl	8017640 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	220f      	movs	r2, #15
 8016490:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016492:	4b09      	ldr	r3, [pc, #36]	; (80164b8 <ip_reass_enqueue_new_datagram+0x70>)
 8016494:	681a      	ldr	r2, [r3, #0]
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801649a:	4a07      	ldr	r2, [pc, #28]	; (80164b8 <ip_reass_enqueue_new_datagram+0x70>)
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	3308      	adds	r3, #8
 80164a4:	2214      	movs	r2, #20
 80164a6:	6879      	ldr	r1, [r7, #4]
 80164a8:	4618      	mov	r0, r3
 80164aa:	f001 f8bb 	bl	8017624 <memcpy>
  return ipr;
 80164ae:	68fb      	ldr	r3, [r7, #12]
}
 80164b0:	4618      	mov	r0, r3
 80164b2:	3710      	adds	r7, #16
 80164b4:	46bd      	mov	sp, r7
 80164b6:	bd80      	pop	{r7, pc}
 80164b8:	2000697c 	.word	0x2000697c

080164bc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80164bc:	b580      	push	{r7, lr}
 80164be:	b082      	sub	sp, #8
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	6078      	str	r0, [r7, #4]
 80164c4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80164c6:	4b10      	ldr	r3, [pc, #64]	; (8016508 <ip_reass_dequeue_datagram+0x4c>)
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	687a      	ldr	r2, [r7, #4]
 80164cc:	429a      	cmp	r2, r3
 80164ce:	d104      	bne.n	80164da <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	4a0c      	ldr	r2, [pc, #48]	; (8016508 <ip_reass_dequeue_datagram+0x4c>)
 80164d6:	6013      	str	r3, [r2, #0]
 80164d8:	e00d      	b.n	80164f6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80164da:	683b      	ldr	r3, [r7, #0]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d106      	bne.n	80164ee <ip_reass_dequeue_datagram+0x32>
 80164e0:	4b0a      	ldr	r3, [pc, #40]	; (801650c <ip_reass_dequeue_datagram+0x50>)
 80164e2:	f240 1245 	movw	r2, #325	; 0x145
 80164e6:	490a      	ldr	r1, [pc, #40]	; (8016510 <ip_reass_dequeue_datagram+0x54>)
 80164e8:	480a      	ldr	r0, [pc, #40]	; (8016514 <ip_reass_dequeue_datagram+0x58>)
 80164ea:	f001 f95b 	bl	80177a4 <iprintf>
    prev->next = ipr->next;
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	681a      	ldr	r2, [r3, #0]
 80164f2:	683b      	ldr	r3, [r7, #0]
 80164f4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80164f6:	6879      	ldr	r1, [r7, #4]
 80164f8:	2004      	movs	r0, #4
 80164fa:	f7f6 fbbb 	bl	800cc74 <memp_free>
}
 80164fe:	bf00      	nop
 8016500:	3708      	adds	r7, #8
 8016502:	46bd      	mov	sp, r7
 8016504:	bd80      	pop	{r7, pc}
 8016506:	bf00      	nop
 8016508:	2000697c 	.word	0x2000697c
 801650c:	0801b884 	.word	0x0801b884
 8016510:	0801b94c 	.word	0x0801b94c
 8016514:	0801b8cc 	.word	0x0801b8cc

08016518 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016518:	b580      	push	{r7, lr}
 801651a:	b08c      	sub	sp, #48	; 0x30
 801651c:	af00      	add	r7, sp, #0
 801651e:	60f8      	str	r0, [r7, #12]
 8016520:	60b9      	str	r1, [r7, #8]
 8016522:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016524:	2300      	movs	r3, #0
 8016526:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016528:	2301      	movs	r3, #1
 801652a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801652c:	68bb      	ldr	r3, [r7, #8]
 801652e:	685b      	ldr	r3, [r3, #4]
 8016530:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016532:	69fb      	ldr	r3, [r7, #28]
 8016534:	885b      	ldrh	r3, [r3, #2]
 8016536:	b29b      	uxth	r3, r3
 8016538:	4618      	mov	r0, r3
 801653a:	f7f5 fe93 	bl	800c264 <lwip_htons>
 801653e:	4603      	mov	r3, r0
 8016540:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016542:	69fb      	ldr	r3, [r7, #28]
 8016544:	781b      	ldrb	r3, [r3, #0]
 8016546:	f003 030f 	and.w	r3, r3, #15
 801654a:	b2db      	uxtb	r3, r3
 801654c:	009b      	lsls	r3, r3, #2
 801654e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016550:	7e7b      	ldrb	r3, [r7, #25]
 8016552:	b29b      	uxth	r3, r3
 8016554:	8b7a      	ldrh	r2, [r7, #26]
 8016556:	429a      	cmp	r2, r3
 8016558:	d202      	bcs.n	8016560 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801655a:	f04f 33ff 	mov.w	r3, #4294967295
 801655e:	e135      	b.n	80167cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016560:	7e7b      	ldrb	r3, [r7, #25]
 8016562:	b29b      	uxth	r3, r3
 8016564:	8b7a      	ldrh	r2, [r7, #26]
 8016566:	1ad3      	subs	r3, r2, r3
 8016568:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801656a:	69fb      	ldr	r3, [r7, #28]
 801656c:	88db      	ldrh	r3, [r3, #6]
 801656e:	b29b      	uxth	r3, r3
 8016570:	4618      	mov	r0, r3
 8016572:	f7f5 fe77 	bl	800c264 <lwip_htons>
 8016576:	4603      	mov	r3, r0
 8016578:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801657c:	b29b      	uxth	r3, r3
 801657e:	00db      	lsls	r3, r3, #3
 8016580:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016582:	68bb      	ldr	r3, [r7, #8]
 8016584:	685b      	ldr	r3, [r3, #4]
 8016586:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801658a:	2200      	movs	r2, #0
 801658c:	701a      	strb	r2, [r3, #0]
 801658e:	2200      	movs	r2, #0
 8016590:	705a      	strb	r2, [r3, #1]
 8016592:	2200      	movs	r2, #0
 8016594:	709a      	strb	r2, [r3, #2]
 8016596:	2200      	movs	r2, #0
 8016598:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801659a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801659c:	8afa      	ldrh	r2, [r7, #22]
 801659e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80165a0:	8afa      	ldrh	r2, [r7, #22]
 80165a2:	8b7b      	ldrh	r3, [r7, #26]
 80165a4:	4413      	add	r3, r2
 80165a6:	b29a      	uxth	r2, r3
 80165a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165aa:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80165ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ae:	88db      	ldrh	r3, [r3, #6]
 80165b0:	b29b      	uxth	r3, r3
 80165b2:	8afa      	ldrh	r2, [r7, #22]
 80165b4:	429a      	cmp	r2, r3
 80165b6:	d902      	bls.n	80165be <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80165b8:	f04f 33ff 	mov.w	r3, #4294967295
 80165bc:	e106      	b.n	80167cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	685b      	ldr	r3, [r3, #4]
 80165c2:	627b      	str	r3, [r7, #36]	; 0x24
 80165c4:	e068      	b.n	8016698 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80165c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165c8:	685b      	ldr	r3, [r3, #4]
 80165ca:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80165cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ce:	889b      	ldrh	r3, [r3, #4]
 80165d0:	b29a      	uxth	r2, r3
 80165d2:	693b      	ldr	r3, [r7, #16]
 80165d4:	889b      	ldrh	r3, [r3, #4]
 80165d6:	b29b      	uxth	r3, r3
 80165d8:	429a      	cmp	r2, r3
 80165da:	d235      	bcs.n	8016648 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80165dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80165e0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80165e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d020      	beq.n	801662a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80165e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ea:	889b      	ldrh	r3, [r3, #4]
 80165ec:	b29a      	uxth	r2, r3
 80165ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165f0:	88db      	ldrh	r3, [r3, #6]
 80165f2:	b29b      	uxth	r3, r3
 80165f4:	429a      	cmp	r2, r3
 80165f6:	d307      	bcc.n	8016608 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80165f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165fa:	88db      	ldrh	r3, [r3, #6]
 80165fc:	b29a      	uxth	r2, r3
 80165fe:	693b      	ldr	r3, [r7, #16]
 8016600:	889b      	ldrh	r3, [r3, #4]
 8016602:	b29b      	uxth	r3, r3
 8016604:	429a      	cmp	r2, r3
 8016606:	d902      	bls.n	801660e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016608:	f04f 33ff 	mov.w	r3, #4294967295
 801660c:	e0de      	b.n	80167cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016610:	68ba      	ldr	r2, [r7, #8]
 8016612:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016616:	88db      	ldrh	r3, [r3, #6]
 8016618:	b29a      	uxth	r2, r3
 801661a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801661c:	889b      	ldrh	r3, [r3, #4]
 801661e:	b29b      	uxth	r3, r3
 8016620:	429a      	cmp	r2, r3
 8016622:	d03d      	beq.n	80166a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016624:	2300      	movs	r3, #0
 8016626:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016628:	e03a      	b.n	80166a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801662a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801662c:	88db      	ldrh	r3, [r3, #6]
 801662e:	b29a      	uxth	r2, r3
 8016630:	693b      	ldr	r3, [r7, #16]
 8016632:	889b      	ldrh	r3, [r3, #4]
 8016634:	b29b      	uxth	r3, r3
 8016636:	429a      	cmp	r2, r3
 8016638:	d902      	bls.n	8016640 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801663a:	f04f 33ff 	mov.w	r3, #4294967295
 801663e:	e0c5      	b.n	80167cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	68ba      	ldr	r2, [r7, #8]
 8016644:	605a      	str	r2, [r3, #4]
      break;
 8016646:	e02b      	b.n	80166a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801664a:	889b      	ldrh	r3, [r3, #4]
 801664c:	b29a      	uxth	r2, r3
 801664e:	693b      	ldr	r3, [r7, #16]
 8016650:	889b      	ldrh	r3, [r3, #4]
 8016652:	b29b      	uxth	r3, r3
 8016654:	429a      	cmp	r2, r3
 8016656:	d102      	bne.n	801665e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016658:	f04f 33ff 	mov.w	r3, #4294967295
 801665c:	e0b6      	b.n	80167cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801665e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016660:	889b      	ldrh	r3, [r3, #4]
 8016662:	b29a      	uxth	r2, r3
 8016664:	693b      	ldr	r3, [r7, #16]
 8016666:	88db      	ldrh	r3, [r3, #6]
 8016668:	b29b      	uxth	r3, r3
 801666a:	429a      	cmp	r2, r3
 801666c:	d202      	bcs.n	8016674 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801666e:	f04f 33ff 	mov.w	r3, #4294967295
 8016672:	e0ab      	b.n	80167cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016676:	2b00      	cmp	r3, #0
 8016678:	d009      	beq.n	801668e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801667c:	88db      	ldrh	r3, [r3, #6]
 801667e:	b29a      	uxth	r2, r3
 8016680:	693b      	ldr	r3, [r7, #16]
 8016682:	889b      	ldrh	r3, [r3, #4]
 8016684:	b29b      	uxth	r3, r3
 8016686:	429a      	cmp	r2, r3
 8016688:	d001      	beq.n	801668e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801668a:	2300      	movs	r3, #0
 801668c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801668e:	693b      	ldr	r3, [r7, #16]
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016694:	693b      	ldr	r3, [r7, #16]
 8016696:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801669a:	2b00      	cmp	r3, #0
 801669c:	d193      	bne.n	80165c6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801669e:	e000      	b.n	80166a2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80166a0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80166a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d12d      	bne.n	8016704 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80166a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d01c      	beq.n	80166e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80166ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166b0:	88db      	ldrh	r3, [r3, #6]
 80166b2:	b29a      	uxth	r2, r3
 80166b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166b6:	889b      	ldrh	r3, [r3, #4]
 80166b8:	b29b      	uxth	r3, r3
 80166ba:	429a      	cmp	r2, r3
 80166bc:	d906      	bls.n	80166cc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80166be:	4b45      	ldr	r3, [pc, #276]	; (80167d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80166c0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80166c4:	4944      	ldr	r1, [pc, #272]	; (80167d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80166c6:	4845      	ldr	r0, [pc, #276]	; (80167dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80166c8:	f001 f86c 	bl	80177a4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80166cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166ce:	68ba      	ldr	r2, [r7, #8]
 80166d0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80166d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166d4:	88db      	ldrh	r3, [r3, #6]
 80166d6:	b29a      	uxth	r2, r3
 80166d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166da:	889b      	ldrh	r3, [r3, #4]
 80166dc:	b29b      	uxth	r3, r3
 80166de:	429a      	cmp	r2, r3
 80166e0:	d010      	beq.n	8016704 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80166e2:	2300      	movs	r3, #0
 80166e4:	623b      	str	r3, [r7, #32]
 80166e6:	e00d      	b.n	8016704 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80166e8:	68fb      	ldr	r3, [r7, #12]
 80166ea:	685b      	ldr	r3, [r3, #4]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d006      	beq.n	80166fe <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80166f0:	4b38      	ldr	r3, [pc, #224]	; (80167d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80166f2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80166f6:	493a      	ldr	r1, [pc, #232]	; (80167e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80166f8:	4838      	ldr	r0, [pc, #224]	; (80167dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80166fa:	f001 f853 	bl	80177a4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80166fe:	68fb      	ldr	r3, [r7, #12]
 8016700:	68ba      	ldr	r2, [r7, #8]
 8016702:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	2b00      	cmp	r3, #0
 8016708:	d105      	bne.n	8016716 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	7f9b      	ldrb	r3, [r3, #30]
 801670e:	f003 0301 	and.w	r3, r3, #1
 8016712:	2b00      	cmp	r3, #0
 8016714:	d059      	beq.n	80167ca <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016716:	6a3b      	ldr	r3, [r7, #32]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d04f      	beq.n	80167bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801671c:	68fb      	ldr	r3, [r7, #12]
 801671e:	685b      	ldr	r3, [r3, #4]
 8016720:	2b00      	cmp	r3, #0
 8016722:	d006      	beq.n	8016732 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	685b      	ldr	r3, [r3, #4]
 8016728:	685b      	ldr	r3, [r3, #4]
 801672a:	889b      	ldrh	r3, [r3, #4]
 801672c:	b29b      	uxth	r3, r3
 801672e:	2b00      	cmp	r3, #0
 8016730:	d002      	beq.n	8016738 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016732:	2300      	movs	r3, #0
 8016734:	623b      	str	r3, [r7, #32]
 8016736:	e041      	b.n	80167bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801673a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801673c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016742:	e012      	b.n	801676a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016746:	685b      	ldr	r3, [r3, #4]
 8016748:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801674c:	88db      	ldrh	r3, [r3, #6]
 801674e:	b29a      	uxth	r2, r3
 8016750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016752:	889b      	ldrh	r3, [r3, #4]
 8016754:	b29b      	uxth	r3, r3
 8016756:	429a      	cmp	r2, r3
 8016758:	d002      	beq.n	8016760 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801675a:	2300      	movs	r3, #0
 801675c:	623b      	str	r3, [r7, #32]
            break;
 801675e:	e007      	b.n	8016770 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016762:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801676c:	2b00      	cmp	r3, #0
 801676e:	d1e9      	bne.n	8016744 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016770:	6a3b      	ldr	r3, [r7, #32]
 8016772:	2b00      	cmp	r3, #0
 8016774:	d022      	beq.n	80167bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	685b      	ldr	r3, [r3, #4]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d106      	bne.n	801678c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801677e:	4b15      	ldr	r3, [pc, #84]	; (80167d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016780:	f240 12df 	movw	r2, #479	; 0x1df
 8016784:	4917      	ldr	r1, [pc, #92]	; (80167e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016786:	4815      	ldr	r0, [pc, #84]	; (80167dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016788:	f001 f80c 	bl	80177a4 <iprintf>
          LWIP_ASSERT("sanity check",
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	685b      	ldr	r3, [r3, #4]
 8016790:	685b      	ldr	r3, [r3, #4]
 8016792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016794:	429a      	cmp	r2, r3
 8016796:	d106      	bne.n	80167a6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016798:	4b0e      	ldr	r3, [pc, #56]	; (80167d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801679a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801679e:	4911      	ldr	r1, [pc, #68]	; (80167e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80167a0:	480e      	ldr	r0, [pc, #56]	; (80167dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80167a2:	f000 ffff 	bl	80177a4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80167a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d006      	beq.n	80167bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80167ae:	4b09      	ldr	r3, [pc, #36]	; (80167d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80167b0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80167b4:	490c      	ldr	r1, [pc, #48]	; (80167e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80167b6:	4809      	ldr	r0, [pc, #36]	; (80167dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80167b8:	f000 fff4 	bl	80177a4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80167bc:	6a3b      	ldr	r3, [r7, #32]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	bf14      	ite	ne
 80167c2:	2301      	movne	r3, #1
 80167c4:	2300      	moveq	r3, #0
 80167c6:	b2db      	uxtb	r3, r3
 80167c8:	e000      	b.n	80167cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80167ca:	2300      	movs	r3, #0
}
 80167cc:	4618      	mov	r0, r3
 80167ce:	3730      	adds	r7, #48	; 0x30
 80167d0:	46bd      	mov	sp, r7
 80167d2:	bd80      	pop	{r7, pc}
 80167d4:	0801b884 	.word	0x0801b884
 80167d8:	0801b968 	.word	0x0801b968
 80167dc:	0801b8cc 	.word	0x0801b8cc
 80167e0:	0801b988 	.word	0x0801b988
 80167e4:	0801b9c0 	.word	0x0801b9c0
 80167e8:	0801b9d0 	.word	0x0801b9d0

080167ec <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80167ec:	b580      	push	{r7, lr}
 80167ee:	b08e      	sub	sp, #56	; 0x38
 80167f0:	af00      	add	r7, sp, #0
 80167f2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	685b      	ldr	r3, [r3, #4]
 80167f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80167fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167fc:	781b      	ldrb	r3, [r3, #0]
 80167fe:	f003 030f 	and.w	r3, r3, #15
 8016802:	b2db      	uxtb	r3, r3
 8016804:	009b      	lsls	r3, r3, #2
 8016806:	b2db      	uxtb	r3, r3
 8016808:	2b14      	cmp	r3, #20
 801680a:	f040 8167 	bne.w	8016adc <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801680e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016810:	88db      	ldrh	r3, [r3, #6]
 8016812:	b29b      	uxth	r3, r3
 8016814:	4618      	mov	r0, r3
 8016816:	f7f5 fd25 	bl	800c264 <lwip_htons>
 801681a:	4603      	mov	r3, r0
 801681c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016820:	b29b      	uxth	r3, r3
 8016822:	00db      	lsls	r3, r3, #3
 8016824:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016828:	885b      	ldrh	r3, [r3, #2]
 801682a:	b29b      	uxth	r3, r3
 801682c:	4618      	mov	r0, r3
 801682e:	f7f5 fd19 	bl	800c264 <lwip_htons>
 8016832:	4603      	mov	r3, r0
 8016834:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016838:	781b      	ldrb	r3, [r3, #0]
 801683a:	f003 030f 	and.w	r3, r3, #15
 801683e:	b2db      	uxtb	r3, r3
 8016840:	009b      	lsls	r3, r3, #2
 8016842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016846:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801684a:	b29b      	uxth	r3, r3
 801684c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801684e:	429a      	cmp	r2, r3
 8016850:	f0c0 8146 	bcc.w	8016ae0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016854:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016858:	b29b      	uxth	r3, r3
 801685a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801685c:	1ad3      	subs	r3, r2, r3
 801685e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016860:	6878      	ldr	r0, [r7, #4]
 8016862:	f7f7 f8d5 	bl	800da10 <pbuf_clen>
 8016866:	4603      	mov	r3, r0
 8016868:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801686a:	4b9f      	ldr	r3, [pc, #636]	; (8016ae8 <ip4_reass+0x2fc>)
 801686c:	881b      	ldrh	r3, [r3, #0]
 801686e:	461a      	mov	r2, r3
 8016870:	8c3b      	ldrh	r3, [r7, #32]
 8016872:	4413      	add	r3, r2
 8016874:	2b0a      	cmp	r3, #10
 8016876:	dd10      	ble.n	801689a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016878:	8c3b      	ldrh	r3, [r7, #32]
 801687a:	4619      	mov	r1, r3
 801687c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801687e:	f7ff fd81 	bl	8016384 <ip_reass_remove_oldest_datagram>
 8016882:	4603      	mov	r3, r0
 8016884:	2b00      	cmp	r3, #0
 8016886:	f000 812d 	beq.w	8016ae4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801688a:	4b97      	ldr	r3, [pc, #604]	; (8016ae8 <ip4_reass+0x2fc>)
 801688c:	881b      	ldrh	r3, [r3, #0]
 801688e:	461a      	mov	r2, r3
 8016890:	8c3b      	ldrh	r3, [r7, #32]
 8016892:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016894:	2b0a      	cmp	r3, #10
 8016896:	f300 8125 	bgt.w	8016ae4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801689a:	4b94      	ldr	r3, [pc, #592]	; (8016aec <ip4_reass+0x300>)
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	633b      	str	r3, [r7, #48]	; 0x30
 80168a0:	e015      	b.n	80168ce <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80168a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168a4:	695a      	ldr	r2, [r3, #20]
 80168a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168a8:	68db      	ldr	r3, [r3, #12]
 80168aa:	429a      	cmp	r2, r3
 80168ac:	d10c      	bne.n	80168c8 <ip4_reass+0xdc>
 80168ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168b0:	699a      	ldr	r2, [r3, #24]
 80168b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168b4:	691b      	ldr	r3, [r3, #16]
 80168b6:	429a      	cmp	r2, r3
 80168b8:	d106      	bne.n	80168c8 <ip4_reass+0xdc>
 80168ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168bc:	899a      	ldrh	r2, [r3, #12]
 80168be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168c0:	889b      	ldrh	r3, [r3, #4]
 80168c2:	b29b      	uxth	r3, r3
 80168c4:	429a      	cmp	r2, r3
 80168c6:	d006      	beq.n	80168d6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80168c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	633b      	str	r3, [r7, #48]	; 0x30
 80168ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d1e6      	bne.n	80168a2 <ip4_reass+0xb6>
 80168d4:	e000      	b.n	80168d8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80168d6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80168d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d109      	bne.n	80168f2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80168de:	8c3b      	ldrh	r3, [r7, #32]
 80168e0:	4619      	mov	r1, r3
 80168e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80168e4:	f7ff fdb0 	bl	8016448 <ip_reass_enqueue_new_datagram>
 80168e8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80168ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d11c      	bne.n	801692a <ip4_reass+0x13e>
      goto nullreturn;
 80168f0:	e109      	b.n	8016b06 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80168f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168f4:	88db      	ldrh	r3, [r3, #6]
 80168f6:	b29b      	uxth	r3, r3
 80168f8:	4618      	mov	r0, r3
 80168fa:	f7f5 fcb3 	bl	800c264 <lwip_htons>
 80168fe:	4603      	mov	r3, r0
 8016900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016904:	2b00      	cmp	r3, #0
 8016906:	d110      	bne.n	801692a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801690a:	89db      	ldrh	r3, [r3, #14]
 801690c:	4618      	mov	r0, r3
 801690e:	f7f5 fca9 	bl	800c264 <lwip_htons>
 8016912:	4603      	mov	r3, r0
 8016914:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016918:	2b00      	cmp	r3, #0
 801691a:	d006      	beq.n	801692a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801691c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801691e:	3308      	adds	r3, #8
 8016920:	2214      	movs	r2, #20
 8016922:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016924:	4618      	mov	r0, r3
 8016926:	f000 fe7d 	bl	8017624 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801692a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801692c:	88db      	ldrh	r3, [r3, #6]
 801692e:	b29b      	uxth	r3, r3
 8016930:	f003 0320 	and.w	r3, r3, #32
 8016934:	2b00      	cmp	r3, #0
 8016936:	bf0c      	ite	eq
 8016938:	2301      	moveq	r3, #1
 801693a:	2300      	movne	r3, #0
 801693c:	b2db      	uxtb	r3, r3
 801693e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016940:	69fb      	ldr	r3, [r7, #28]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d00e      	beq.n	8016964 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016946:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016948:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801694a:	4413      	add	r3, r2
 801694c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801694e:	8b7a      	ldrh	r2, [r7, #26]
 8016950:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016952:	429a      	cmp	r2, r3
 8016954:	f0c0 80a0 	bcc.w	8016a98 <ip4_reass+0x2ac>
 8016958:	8b7b      	ldrh	r3, [r7, #26]
 801695a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801695e:	4293      	cmp	r3, r2
 8016960:	f200 809a 	bhi.w	8016a98 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016964:	69fa      	ldr	r2, [r7, #28]
 8016966:	6879      	ldr	r1, [r7, #4]
 8016968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801696a:	f7ff fdd5 	bl	8016518 <ip_reass_chain_frag_into_datagram_and_validate>
 801696e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016970:	697b      	ldr	r3, [r7, #20]
 8016972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016976:	f000 8091 	beq.w	8016a9c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801697a:	4b5b      	ldr	r3, [pc, #364]	; (8016ae8 <ip4_reass+0x2fc>)
 801697c:	881a      	ldrh	r2, [r3, #0]
 801697e:	8c3b      	ldrh	r3, [r7, #32]
 8016980:	4413      	add	r3, r2
 8016982:	b29a      	uxth	r2, r3
 8016984:	4b58      	ldr	r3, [pc, #352]	; (8016ae8 <ip4_reass+0x2fc>)
 8016986:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016988:	69fb      	ldr	r3, [r7, #28]
 801698a:	2b00      	cmp	r3, #0
 801698c:	d00d      	beq.n	80169aa <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801698e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016990:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016992:	4413      	add	r3, r2
 8016994:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016998:	8a7a      	ldrh	r2, [r7, #18]
 801699a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801699e:	7f9b      	ldrb	r3, [r3, #30]
 80169a0:	f043 0301 	orr.w	r3, r3, #1
 80169a4:	b2da      	uxtb	r2, r3
 80169a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169a8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80169aa:	697b      	ldr	r3, [r7, #20]
 80169ac:	2b01      	cmp	r3, #1
 80169ae:	d171      	bne.n	8016a94 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80169b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169b2:	8b9b      	ldrh	r3, [r3, #28]
 80169b4:	3314      	adds	r3, #20
 80169b6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80169b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169ba:	685b      	ldr	r3, [r3, #4]
 80169bc:	685b      	ldr	r3, [r3, #4]
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80169c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169c4:	685b      	ldr	r3, [r3, #4]
 80169c6:	685b      	ldr	r3, [r3, #4]
 80169c8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80169ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169cc:	3308      	adds	r3, #8
 80169ce:	2214      	movs	r2, #20
 80169d0:	4619      	mov	r1, r3
 80169d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80169d4:	f000 fe26 	bl	8017624 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80169d8:	8a3b      	ldrh	r3, [r7, #16]
 80169da:	4618      	mov	r0, r3
 80169dc:	f7f5 fc42 	bl	800c264 <lwip_htons>
 80169e0:	4603      	mov	r3, r0
 80169e2:	461a      	mov	r2, r3
 80169e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169e6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80169e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169ea:	2200      	movs	r2, #0
 80169ec:	719a      	strb	r2, [r3, #6]
 80169ee:	2200      	movs	r2, #0
 80169f0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80169f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169f4:	2200      	movs	r2, #0
 80169f6:	729a      	strb	r2, [r3, #10]
 80169f8:	2200      	movs	r2, #0
 80169fa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80169fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169fe:	685b      	ldr	r3, [r3, #4]
 8016a00:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016a02:	e00d      	b.n	8016a20 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a06:	685b      	ldr	r3, [r3, #4]
 8016a08:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016a0a:	2114      	movs	r1, #20
 8016a0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016a0e:	f7f6 feeb 	bl	800d7e8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016a12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016a14:	6878      	ldr	r0, [r7, #4]
 8016a16:	f7f7 f83b 	bl	800da90 <pbuf_cat>
      r = iprh->next_pbuf;
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d1ee      	bne.n	8016a04 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016a26:	4b31      	ldr	r3, [pc, #196]	; (8016aec <ip4_reass+0x300>)
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016a2c:	429a      	cmp	r2, r3
 8016a2e:	d102      	bne.n	8016a36 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016a30:	2300      	movs	r3, #0
 8016a32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016a34:	e010      	b.n	8016a58 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016a36:	4b2d      	ldr	r3, [pc, #180]	; (8016aec <ip4_reass+0x300>)
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016a3c:	e007      	b.n	8016a4e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016a44:	429a      	cmp	r2, r3
 8016a46:	d006      	beq.n	8016a56 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d1f4      	bne.n	8016a3e <ip4_reass+0x252>
 8016a54:	e000      	b.n	8016a58 <ip4_reass+0x26c>
          break;
 8016a56:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016a58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016a5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a5c:	f7ff fd2e 	bl	80164bc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016a60:	6878      	ldr	r0, [r7, #4]
 8016a62:	f7f6 ffd5 	bl	800da10 <pbuf_clen>
 8016a66:	4603      	mov	r3, r0
 8016a68:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016a6a:	4b1f      	ldr	r3, [pc, #124]	; (8016ae8 <ip4_reass+0x2fc>)
 8016a6c:	881b      	ldrh	r3, [r3, #0]
 8016a6e:	8c3a      	ldrh	r2, [r7, #32]
 8016a70:	429a      	cmp	r2, r3
 8016a72:	d906      	bls.n	8016a82 <ip4_reass+0x296>
 8016a74:	4b1e      	ldr	r3, [pc, #120]	; (8016af0 <ip4_reass+0x304>)
 8016a76:	f240 229b 	movw	r2, #667	; 0x29b
 8016a7a:	491e      	ldr	r1, [pc, #120]	; (8016af4 <ip4_reass+0x308>)
 8016a7c:	481e      	ldr	r0, [pc, #120]	; (8016af8 <ip4_reass+0x30c>)
 8016a7e:	f000 fe91 	bl	80177a4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016a82:	4b19      	ldr	r3, [pc, #100]	; (8016ae8 <ip4_reass+0x2fc>)
 8016a84:	881a      	ldrh	r2, [r3, #0]
 8016a86:	8c3b      	ldrh	r3, [r7, #32]
 8016a88:	1ad3      	subs	r3, r2, r3
 8016a8a:	b29a      	uxth	r2, r3
 8016a8c:	4b16      	ldr	r3, [pc, #88]	; (8016ae8 <ip4_reass+0x2fc>)
 8016a8e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	e03c      	b.n	8016b0e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016a94:	2300      	movs	r3, #0
 8016a96:	e03a      	b.n	8016b0e <ip4_reass+0x322>
      goto nullreturn_ipr;
 8016a98:	bf00      	nop
 8016a9a:	e000      	b.n	8016a9e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8016a9c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d106      	bne.n	8016ab2 <ip4_reass+0x2c6>
 8016aa4:	4b12      	ldr	r3, [pc, #72]	; (8016af0 <ip4_reass+0x304>)
 8016aa6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016aaa:	4914      	ldr	r1, [pc, #80]	; (8016afc <ip4_reass+0x310>)
 8016aac:	4812      	ldr	r0, [pc, #72]	; (8016af8 <ip4_reass+0x30c>)
 8016aae:	f000 fe79 	bl	80177a4 <iprintf>
  if (ipr->p == NULL) {
 8016ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ab4:	685b      	ldr	r3, [r3, #4]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d124      	bne.n	8016b04 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016aba:	4b0c      	ldr	r3, [pc, #48]	; (8016aec <ip4_reass+0x300>)
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ac0:	429a      	cmp	r2, r3
 8016ac2:	d006      	beq.n	8016ad2 <ip4_reass+0x2e6>
 8016ac4:	4b0a      	ldr	r3, [pc, #40]	; (8016af0 <ip4_reass+0x304>)
 8016ac6:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016aca:	490d      	ldr	r1, [pc, #52]	; (8016b00 <ip4_reass+0x314>)
 8016acc:	480a      	ldr	r0, [pc, #40]	; (8016af8 <ip4_reass+0x30c>)
 8016ace:	f000 fe69 	bl	80177a4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016ad2:	2100      	movs	r1, #0
 8016ad4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016ad6:	f7ff fcf1 	bl	80164bc <ip_reass_dequeue_datagram>
 8016ada:	e014      	b.n	8016b06 <ip4_reass+0x31a>
    goto nullreturn;
 8016adc:	bf00      	nop
 8016ade:	e012      	b.n	8016b06 <ip4_reass+0x31a>
    goto nullreturn;
 8016ae0:	bf00      	nop
 8016ae2:	e010      	b.n	8016b06 <ip4_reass+0x31a>
      goto nullreturn;
 8016ae4:	bf00      	nop
 8016ae6:	e00e      	b.n	8016b06 <ip4_reass+0x31a>
 8016ae8:	20006980 	.word	0x20006980
 8016aec:	2000697c 	.word	0x2000697c
 8016af0:	0801b884 	.word	0x0801b884
 8016af4:	0801b9f4 	.word	0x0801b9f4
 8016af8:	0801b8cc 	.word	0x0801b8cc
 8016afc:	0801ba10 	.word	0x0801ba10
 8016b00:	0801ba1c 	.word	0x0801ba1c
  }

nullreturn:
 8016b04:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016b06:	6878      	ldr	r0, [r7, #4]
 8016b08:	f7f6 fef4 	bl	800d8f4 <pbuf_free>
  return NULL;
 8016b0c:	2300      	movs	r3, #0
}
 8016b0e:	4618      	mov	r0, r3
 8016b10:	3738      	adds	r7, #56	; 0x38
 8016b12:	46bd      	mov	sp, r7
 8016b14:	bd80      	pop	{r7, pc}
 8016b16:	bf00      	nop

08016b18 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016b1c:	2005      	movs	r0, #5
 8016b1e:	f7f6 f857 	bl	800cbd0 <memp_malloc>
 8016b22:	4603      	mov	r3, r0
}
 8016b24:	4618      	mov	r0, r3
 8016b26:	bd80      	pop	{r7, pc}

08016b28 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b082      	sub	sp, #8
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d106      	bne.n	8016b44 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016b36:	4b07      	ldr	r3, [pc, #28]	; (8016b54 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016b38:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016b3c:	4906      	ldr	r1, [pc, #24]	; (8016b58 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016b3e:	4807      	ldr	r0, [pc, #28]	; (8016b5c <ip_frag_free_pbuf_custom_ref+0x34>)
 8016b40:	f000 fe30 	bl	80177a4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016b44:	6879      	ldr	r1, [r7, #4]
 8016b46:	2005      	movs	r0, #5
 8016b48:	f7f6 f894 	bl	800cc74 <memp_free>
}
 8016b4c:	bf00      	nop
 8016b4e:	3708      	adds	r7, #8
 8016b50:	46bd      	mov	sp, r7
 8016b52:	bd80      	pop	{r7, pc}
 8016b54:	0801b884 	.word	0x0801b884
 8016b58:	0801ba3c 	.word	0x0801ba3c
 8016b5c:	0801b8cc 	.word	0x0801b8cc

08016b60 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b084      	sub	sp, #16
 8016b64:	af00      	add	r7, sp, #0
 8016b66:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d106      	bne.n	8016b80 <ipfrag_free_pbuf_custom+0x20>
 8016b72:	4b11      	ldr	r3, [pc, #68]	; (8016bb8 <ipfrag_free_pbuf_custom+0x58>)
 8016b74:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016b78:	4910      	ldr	r1, [pc, #64]	; (8016bbc <ipfrag_free_pbuf_custom+0x5c>)
 8016b7a:	4811      	ldr	r0, [pc, #68]	; (8016bc0 <ipfrag_free_pbuf_custom+0x60>)
 8016b7c:	f000 fe12 	bl	80177a4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016b80:	68fa      	ldr	r2, [r7, #12]
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	429a      	cmp	r2, r3
 8016b86:	d006      	beq.n	8016b96 <ipfrag_free_pbuf_custom+0x36>
 8016b88:	4b0b      	ldr	r3, [pc, #44]	; (8016bb8 <ipfrag_free_pbuf_custom+0x58>)
 8016b8a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016b8e:	490d      	ldr	r1, [pc, #52]	; (8016bc4 <ipfrag_free_pbuf_custom+0x64>)
 8016b90:	480b      	ldr	r0, [pc, #44]	; (8016bc0 <ipfrag_free_pbuf_custom+0x60>)
 8016b92:	f000 fe07 	bl	80177a4 <iprintf>
  if (pcr->original != NULL) {
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	695b      	ldr	r3, [r3, #20]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d004      	beq.n	8016ba8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	695b      	ldr	r3, [r3, #20]
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	f7f6 fea6 	bl	800d8f4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016ba8:	68f8      	ldr	r0, [r7, #12]
 8016baa:	f7ff ffbd 	bl	8016b28 <ip_frag_free_pbuf_custom_ref>
}
 8016bae:	bf00      	nop
 8016bb0:	3710      	adds	r7, #16
 8016bb2:	46bd      	mov	sp, r7
 8016bb4:	bd80      	pop	{r7, pc}
 8016bb6:	bf00      	nop
 8016bb8:	0801b884 	.word	0x0801b884
 8016bbc:	0801ba48 	.word	0x0801ba48
 8016bc0:	0801b8cc 	.word	0x0801b8cc
 8016bc4:	0801ba54 	.word	0x0801ba54

08016bc8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016bc8:	b580      	push	{r7, lr}
 8016bca:	b094      	sub	sp, #80	; 0x50
 8016bcc:	af02      	add	r7, sp, #8
 8016bce:	60f8      	str	r0, [r7, #12]
 8016bd0:	60b9      	str	r1, [r7, #8]
 8016bd2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016bda:	68bb      	ldr	r3, [r7, #8]
 8016bdc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016bde:	3b14      	subs	r3, #20
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	da00      	bge.n	8016be6 <ip4_frag+0x1e>
 8016be4:	3307      	adds	r3, #7
 8016be6:	10db      	asrs	r3, r3, #3
 8016be8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016bea:	2314      	movs	r3, #20
 8016bec:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	685b      	ldr	r3, [r3, #4]
 8016bf2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bf6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bfa:	781b      	ldrb	r3, [r3, #0]
 8016bfc:	f003 030f 	and.w	r3, r3, #15
 8016c00:	b2db      	uxtb	r3, r3
 8016c02:	009b      	lsls	r3, r3, #2
 8016c04:	b2db      	uxtb	r3, r3
 8016c06:	2b14      	cmp	r3, #20
 8016c08:	d002      	beq.n	8016c10 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016c0a:	f06f 0305 	mvn.w	r3, #5
 8016c0e:	e110      	b.n	8016e32 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	895b      	ldrh	r3, [r3, #10]
 8016c14:	2b13      	cmp	r3, #19
 8016c16:	d809      	bhi.n	8016c2c <ip4_frag+0x64>
 8016c18:	4b88      	ldr	r3, [pc, #544]	; (8016e3c <ip4_frag+0x274>)
 8016c1a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016c1e:	4988      	ldr	r1, [pc, #544]	; (8016e40 <ip4_frag+0x278>)
 8016c20:	4888      	ldr	r0, [pc, #544]	; (8016e44 <ip4_frag+0x27c>)
 8016c22:	f000 fdbf 	bl	80177a4 <iprintf>
 8016c26:	f06f 0305 	mvn.w	r3, #5
 8016c2a:	e102      	b.n	8016e32 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c2e:	88db      	ldrh	r3, [r3, #6]
 8016c30:	b29b      	uxth	r3, r3
 8016c32:	4618      	mov	r0, r3
 8016c34:	f7f5 fb16 	bl	800c264 <lwip_htons>
 8016c38:	4603      	mov	r3, r0
 8016c3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016c3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016c3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016c42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016c46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016c4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016c4e:	68fb      	ldr	r3, [r7, #12]
 8016c50:	891b      	ldrh	r3, [r3, #8]
 8016c52:	3b14      	subs	r3, #20
 8016c54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016c58:	e0e1      	b.n	8016e1e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016c5a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016c5c:	00db      	lsls	r3, r3, #3
 8016c5e:	b29b      	uxth	r3, r3
 8016c60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016c64:	4293      	cmp	r3, r2
 8016c66:	bf28      	it	cs
 8016c68:	4613      	movcs	r3, r2
 8016c6a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016c6c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016c70:	2114      	movs	r1, #20
 8016c72:	200e      	movs	r0, #14
 8016c74:	f7f6 fb5a 	bl	800d32c <pbuf_alloc>
 8016c78:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	f000 80d5 	beq.w	8016e2c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c84:	895b      	ldrh	r3, [r3, #10]
 8016c86:	2b13      	cmp	r3, #19
 8016c88:	d806      	bhi.n	8016c98 <ip4_frag+0xd0>
 8016c8a:	4b6c      	ldr	r3, [pc, #432]	; (8016e3c <ip4_frag+0x274>)
 8016c8c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016c90:	496d      	ldr	r1, [pc, #436]	; (8016e48 <ip4_frag+0x280>)
 8016c92:	486c      	ldr	r0, [pc, #432]	; (8016e44 <ip4_frag+0x27c>)
 8016c94:	f000 fd86 	bl	80177a4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c9a:	685b      	ldr	r3, [r3, #4]
 8016c9c:	2214      	movs	r2, #20
 8016c9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	f000 fcbf 	bl	8017624 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ca8:	685b      	ldr	r3, [r3, #4]
 8016caa:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016cac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016cae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016cb2:	e064      	b.n	8016d7e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	895a      	ldrh	r2, [r3, #10]
 8016cb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016cba:	1ad3      	subs	r3, r2, r3
 8016cbc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	895b      	ldrh	r3, [r3, #10]
 8016cc2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016cc4:	429a      	cmp	r2, r3
 8016cc6:	d906      	bls.n	8016cd6 <ip4_frag+0x10e>
 8016cc8:	4b5c      	ldr	r3, [pc, #368]	; (8016e3c <ip4_frag+0x274>)
 8016cca:	f240 322d 	movw	r2, #813	; 0x32d
 8016cce:	495f      	ldr	r1, [pc, #380]	; (8016e4c <ip4_frag+0x284>)
 8016cd0:	485c      	ldr	r0, [pc, #368]	; (8016e44 <ip4_frag+0x27c>)
 8016cd2:	f000 fd67 	bl	80177a4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016cd6:	8bfa      	ldrh	r2, [r7, #30]
 8016cd8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016cdc:	4293      	cmp	r3, r2
 8016cde:	bf28      	it	cs
 8016ce0:	4613      	movcs	r3, r2
 8016ce2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016ce6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d105      	bne.n	8016cfa <ip4_frag+0x132>
        poff = 0;
 8016cee:	2300      	movs	r3, #0
 8016cf0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	60fb      	str	r3, [r7, #12]
        continue;
 8016cf8:	e041      	b.n	8016d7e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016cfa:	f7ff ff0d 	bl	8016b18 <ip_frag_alloc_pbuf_custom_ref>
 8016cfe:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016d00:	69bb      	ldr	r3, [r7, #24]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d103      	bne.n	8016d0e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016d06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d08:	f7f6 fdf4 	bl	800d8f4 <pbuf_free>
        goto memerr;
 8016d0c:	e08f      	b.n	8016e2e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016d0e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016d10:	68fb      	ldr	r3, [r7, #12]
 8016d12:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016d14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016d16:	4413      	add	r3, r2
 8016d18:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016d1c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016d20:	9201      	str	r2, [sp, #4]
 8016d22:	9300      	str	r3, [sp, #0]
 8016d24:	4603      	mov	r3, r0
 8016d26:	2241      	movs	r2, #65	; 0x41
 8016d28:	2000      	movs	r0, #0
 8016d2a:	f7f6 fc29 	bl	800d580 <pbuf_alloced_custom>
 8016d2e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016d30:	697b      	ldr	r3, [r7, #20]
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d106      	bne.n	8016d44 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016d36:	69b8      	ldr	r0, [r7, #24]
 8016d38:	f7ff fef6 	bl	8016b28 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016d3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d3e:	f7f6 fdd9 	bl	800d8f4 <pbuf_free>
        goto memerr;
 8016d42:	e074      	b.n	8016e2e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016d44:	68f8      	ldr	r0, [r7, #12]
 8016d46:	f7f6 fe7b 	bl	800da40 <pbuf_ref>
      pcr->original = p;
 8016d4a:	69bb      	ldr	r3, [r7, #24]
 8016d4c:	68fa      	ldr	r2, [r7, #12]
 8016d4e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016d50:	69bb      	ldr	r3, [r7, #24]
 8016d52:	4a3f      	ldr	r2, [pc, #252]	; (8016e50 <ip4_frag+0x288>)
 8016d54:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016d56:	6979      	ldr	r1, [r7, #20]
 8016d58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d5a:	f7f6 fe99 	bl	800da90 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016d5e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016d62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016d66:	1ad3      	subs	r3, r2, r3
 8016d68:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016d6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d004      	beq.n	8016d7e <ip4_frag+0x1b6>
        poff = 0;
 8016d74:	2300      	movs	r3, #0
 8016d76:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016d7e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d196      	bne.n	8016cb4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016d86:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016d88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016d8c:	4413      	add	r3, r2
 8016d8e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016d90:	68bb      	ldr	r3, [r7, #8]
 8016d92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016d94:	f1a3 0213 	sub.w	r2, r3, #19
 8016d98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016d9c:	429a      	cmp	r2, r3
 8016d9e:	bfcc      	ite	gt
 8016da0:	2301      	movgt	r3, #1
 8016da2:	2300      	movle	r3, #0
 8016da4:	b2db      	uxtb	r3, r3
 8016da6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016da8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016dac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016db0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016db2:	6a3b      	ldr	r3, [r7, #32]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d002      	beq.n	8016dbe <ip4_frag+0x1f6>
 8016db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d003      	beq.n	8016dc6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016dbe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016dc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016dc4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016dc6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016dc8:	4618      	mov	r0, r3
 8016dca:	f7f5 fa4b 	bl	800c264 <lwip_htons>
 8016dce:	4603      	mov	r3, r0
 8016dd0:	461a      	mov	r2, r3
 8016dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dd4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016dd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016dd8:	3314      	adds	r3, #20
 8016dda:	b29b      	uxth	r3, r3
 8016ddc:	4618      	mov	r0, r3
 8016dde:	f7f5 fa41 	bl	800c264 <lwip_htons>
 8016de2:	4603      	mov	r3, r0
 8016de4:	461a      	mov	r2, r3
 8016de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016de8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dec:	2200      	movs	r2, #0
 8016dee:	729a      	strb	r2, [r3, #10]
 8016df0:	2200      	movs	r2, #0
 8016df2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016df4:	68bb      	ldr	r3, [r7, #8]
 8016df6:	695b      	ldr	r3, [r3, #20]
 8016df8:	687a      	ldr	r2, [r7, #4]
 8016dfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016dfc:	68b8      	ldr	r0, [r7, #8]
 8016dfe:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016e00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016e02:	f7f6 fd77 	bl	800d8f4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016e06:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016e0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016e0c:	1ad3      	subs	r3, r2, r3
 8016e0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016e12:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016e16:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016e18:	4413      	add	r3, r2
 8016e1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016e1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	f47f af19 	bne.w	8016c5a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016e28:	2300      	movs	r3, #0
 8016e2a:	e002      	b.n	8016e32 <ip4_frag+0x26a>
      goto memerr;
 8016e2c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016e2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016e32:	4618      	mov	r0, r3
 8016e34:	3748      	adds	r7, #72	; 0x48
 8016e36:	46bd      	mov	sp, r7
 8016e38:	bd80      	pop	{r7, pc}
 8016e3a:	bf00      	nop
 8016e3c:	0801b884 	.word	0x0801b884
 8016e40:	0801ba60 	.word	0x0801ba60
 8016e44:	0801b8cc 	.word	0x0801b8cc
 8016e48:	0801ba7c 	.word	0x0801ba7c
 8016e4c:	0801ba9c 	.word	0x0801ba9c
 8016e50:	08016b61 	.word	0x08016b61

08016e54 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016e54:	b580      	push	{r7, lr}
 8016e56:	b086      	sub	sp, #24
 8016e58:	af00      	add	r7, sp, #0
 8016e5a:	6078      	str	r0, [r7, #4]
 8016e5c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016e5e:	230e      	movs	r3, #14
 8016e60:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	895b      	ldrh	r3, [r3, #10]
 8016e66:	2b0e      	cmp	r3, #14
 8016e68:	d96e      	bls.n	8016f48 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	7bdb      	ldrb	r3, [r3, #15]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d106      	bne.n	8016e80 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016e72:	683b      	ldr	r3, [r7, #0]
 8016e74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016e78:	3301      	adds	r3, #1
 8016e7a:	b2da      	uxtb	r2, r3
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	685b      	ldr	r3, [r3, #4]
 8016e84:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016e86:	693b      	ldr	r3, [r7, #16]
 8016e88:	7b1a      	ldrb	r2, [r3, #12]
 8016e8a:	7b5b      	ldrb	r3, [r3, #13]
 8016e8c:	021b      	lsls	r3, r3, #8
 8016e8e:	4313      	orrs	r3, r2
 8016e90:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016e92:	693b      	ldr	r3, [r7, #16]
 8016e94:	781b      	ldrb	r3, [r3, #0]
 8016e96:	f003 0301 	and.w	r3, r3, #1
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d023      	beq.n	8016ee6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016e9e:	693b      	ldr	r3, [r7, #16]
 8016ea0:	781b      	ldrb	r3, [r3, #0]
 8016ea2:	2b01      	cmp	r3, #1
 8016ea4:	d10f      	bne.n	8016ec6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016ea6:	693b      	ldr	r3, [r7, #16]
 8016ea8:	785b      	ldrb	r3, [r3, #1]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d11b      	bne.n	8016ee6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016eae:	693b      	ldr	r3, [r7, #16]
 8016eb0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016eb2:	2b5e      	cmp	r3, #94	; 0x5e
 8016eb4:	d117      	bne.n	8016ee6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	7b5b      	ldrb	r3, [r3, #13]
 8016eba:	f043 0310 	orr.w	r3, r3, #16
 8016ebe:	b2da      	uxtb	r2, r3
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	735a      	strb	r2, [r3, #13]
 8016ec4:	e00f      	b.n	8016ee6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016ec6:	693b      	ldr	r3, [r7, #16]
 8016ec8:	2206      	movs	r2, #6
 8016eca:	4928      	ldr	r1, [pc, #160]	; (8016f6c <ethernet_input+0x118>)
 8016ecc:	4618      	mov	r0, r3
 8016ece:	f000 fb9b 	bl	8017608 <memcmp>
 8016ed2:	4603      	mov	r3, r0
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d106      	bne.n	8016ee6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	7b5b      	ldrb	r3, [r3, #13]
 8016edc:	f043 0308 	orr.w	r3, r3, #8
 8016ee0:	b2da      	uxtb	r2, r3
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016ee6:	89fb      	ldrh	r3, [r7, #14]
 8016ee8:	2b08      	cmp	r3, #8
 8016eea:	d003      	beq.n	8016ef4 <ethernet_input+0xa0>
 8016eec:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016ef0:	d014      	beq.n	8016f1c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016ef2:	e032      	b.n	8016f5a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016ef4:	683b      	ldr	r3, [r7, #0]
 8016ef6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016efa:	f003 0308 	and.w	r3, r3, #8
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d024      	beq.n	8016f4c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016f02:	8afb      	ldrh	r3, [r7, #22]
 8016f04:	4619      	mov	r1, r3
 8016f06:	6878      	ldr	r0, [r7, #4]
 8016f08:	f7f6 fc6e 	bl	800d7e8 <pbuf_remove_header>
 8016f0c:	4603      	mov	r3, r0
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d11e      	bne.n	8016f50 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016f12:	6839      	ldr	r1, [r7, #0]
 8016f14:	6878      	ldr	r0, [r7, #4]
 8016f16:	f7fe ff27 	bl	8015d68 <ip4_input>
      break;
 8016f1a:	e013      	b.n	8016f44 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016f1c:	683b      	ldr	r3, [r7, #0]
 8016f1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016f22:	f003 0308 	and.w	r3, r3, #8
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d014      	beq.n	8016f54 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016f2a:	8afb      	ldrh	r3, [r7, #22]
 8016f2c:	4619      	mov	r1, r3
 8016f2e:	6878      	ldr	r0, [r7, #4]
 8016f30:	f7f6 fc5a 	bl	800d7e8 <pbuf_remove_header>
 8016f34:	4603      	mov	r3, r0
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d10e      	bne.n	8016f58 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016f3a:	6839      	ldr	r1, [r7, #0]
 8016f3c:	6878      	ldr	r0, [r7, #4]
 8016f3e:	f7fe f8c7 	bl	80150d0 <etharp_input>
      break;
 8016f42:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016f44:	2300      	movs	r3, #0
 8016f46:	e00c      	b.n	8016f62 <ethernet_input+0x10e>
    goto free_and_return;
 8016f48:	bf00      	nop
 8016f4a:	e006      	b.n	8016f5a <ethernet_input+0x106>
        goto free_and_return;
 8016f4c:	bf00      	nop
 8016f4e:	e004      	b.n	8016f5a <ethernet_input+0x106>
        goto free_and_return;
 8016f50:	bf00      	nop
 8016f52:	e002      	b.n	8016f5a <ethernet_input+0x106>
        goto free_and_return;
 8016f54:	bf00      	nop
 8016f56:	e000      	b.n	8016f5a <ethernet_input+0x106>
        goto free_and_return;
 8016f58:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016f5a:	6878      	ldr	r0, [r7, #4]
 8016f5c:	f7f6 fcca 	bl	800d8f4 <pbuf_free>
  return ERR_OK;
 8016f60:	2300      	movs	r3, #0
}
 8016f62:	4618      	mov	r0, r3
 8016f64:	3718      	adds	r7, #24
 8016f66:	46bd      	mov	sp, r7
 8016f68:	bd80      	pop	{r7, pc}
 8016f6a:	bf00      	nop
 8016f6c:	0801bc78 	.word	0x0801bc78

08016f70 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016f70:	b580      	push	{r7, lr}
 8016f72:	b086      	sub	sp, #24
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	60f8      	str	r0, [r7, #12]
 8016f78:	60b9      	str	r1, [r7, #8]
 8016f7a:	607a      	str	r2, [r7, #4]
 8016f7c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016f7e:	8c3b      	ldrh	r3, [r7, #32]
 8016f80:	4618      	mov	r0, r3
 8016f82:	f7f5 f96f 	bl	800c264 <lwip_htons>
 8016f86:	4603      	mov	r3, r0
 8016f88:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016f8a:	210e      	movs	r1, #14
 8016f8c:	68b8      	ldr	r0, [r7, #8]
 8016f8e:	f7f6 fc1b 	bl	800d7c8 <pbuf_add_header>
 8016f92:	4603      	mov	r3, r0
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d125      	bne.n	8016fe4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016f98:	68bb      	ldr	r3, [r7, #8]
 8016f9a:	685b      	ldr	r3, [r3, #4]
 8016f9c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016f9e:	693b      	ldr	r3, [r7, #16]
 8016fa0:	8afa      	ldrh	r2, [r7, #22]
 8016fa2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016fa4:	693b      	ldr	r3, [r7, #16]
 8016fa6:	2206      	movs	r2, #6
 8016fa8:	6839      	ldr	r1, [r7, #0]
 8016faa:	4618      	mov	r0, r3
 8016fac:	f000 fb3a 	bl	8017624 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016fb0:	693b      	ldr	r3, [r7, #16]
 8016fb2:	3306      	adds	r3, #6
 8016fb4:	2206      	movs	r2, #6
 8016fb6:	6879      	ldr	r1, [r7, #4]
 8016fb8:	4618      	mov	r0, r3
 8016fba:	f000 fb33 	bl	8017624 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016fc4:	2b06      	cmp	r3, #6
 8016fc6:	d006      	beq.n	8016fd6 <ethernet_output+0x66>
 8016fc8:	4b0a      	ldr	r3, [pc, #40]	; (8016ff4 <ethernet_output+0x84>)
 8016fca:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016fce:	490a      	ldr	r1, [pc, #40]	; (8016ff8 <ethernet_output+0x88>)
 8016fd0:	480a      	ldr	r0, [pc, #40]	; (8016ffc <ethernet_output+0x8c>)
 8016fd2:	f000 fbe7 	bl	80177a4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	699b      	ldr	r3, [r3, #24]
 8016fda:	68b9      	ldr	r1, [r7, #8]
 8016fdc:	68f8      	ldr	r0, [r7, #12]
 8016fde:	4798      	blx	r3
 8016fe0:	4603      	mov	r3, r0
 8016fe2:	e002      	b.n	8016fea <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016fe4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016fe6:	f06f 0301 	mvn.w	r3, #1
}
 8016fea:	4618      	mov	r0, r3
 8016fec:	3718      	adds	r7, #24
 8016fee:	46bd      	mov	sp, r7
 8016ff0:	bd80      	pop	{r7, pc}
 8016ff2:	bf00      	nop
 8016ff4:	0801baac 	.word	0x0801baac
 8016ff8:	0801bae4 	.word	0x0801bae4
 8016ffc:	0801bb18 	.word	0x0801bb18

08017000 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017000:	b580      	push	{r7, lr}
 8017002:	b086      	sub	sp, #24
 8017004:	af00      	add	r7, sp, #0
 8017006:	6078      	str	r0, [r7, #4]
 8017008:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801700a:	683b      	ldr	r3, [r7, #0]
 801700c:	60bb      	str	r3, [r7, #8]
 801700e:	2304      	movs	r3, #4
 8017010:	60fb      	str	r3, [r7, #12]
 8017012:	2300      	movs	r3, #0
 8017014:	613b      	str	r3, [r7, #16]
 8017016:	2300      	movs	r3, #0
 8017018:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801701a:	f107 0308 	add.w	r3, r7, #8
 801701e:	2100      	movs	r1, #0
 8017020:	4618      	mov	r0, r3
 8017022:	f7f0 fa69 	bl	80074f8 <osMessageCreate>
 8017026:	4602      	mov	r2, r0
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	2b00      	cmp	r3, #0
 8017032:	d102      	bne.n	801703a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017034:	f04f 33ff 	mov.w	r3, #4294967295
 8017038:	e000      	b.n	801703c <sys_mbox_new+0x3c>

  return ERR_OK;
 801703a:	2300      	movs	r3, #0
}
 801703c:	4618      	mov	r0, r3
 801703e:	3718      	adds	r7, #24
 8017040:	46bd      	mov	sp, r7
 8017042:	bd80      	pop	{r7, pc}

08017044 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017044:	b580      	push	{r7, lr}
 8017046:	b082      	sub	sp, #8
 8017048:	af00      	add	r7, sp, #0
 801704a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	4618      	mov	r0, r3
 8017052:	f7f0 fb85 	bl	8007760 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	4618      	mov	r0, r3
 801705c:	f7f0 fb96 	bl	800778c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017060:	bf00      	nop
 8017062:	3708      	adds	r7, #8
 8017064:	46bd      	mov	sp, r7
 8017066:	bd80      	pop	{r7, pc}

08017068 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017068:	b580      	push	{r7, lr}
 801706a:	b084      	sub	sp, #16
 801706c:	af00      	add	r7, sp, #0
 801706e:	6078      	str	r0, [r7, #4]
 8017070:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	6839      	ldr	r1, [r7, #0]
 8017078:	2200      	movs	r2, #0
 801707a:	4618      	mov	r0, r3
 801707c:	f7f0 fa64 	bl	8007548 <osMessagePut>
 8017080:	4603      	mov	r3, r0
 8017082:	2b00      	cmp	r3, #0
 8017084:	d102      	bne.n	801708c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8017086:	2300      	movs	r3, #0
 8017088:	73fb      	strb	r3, [r7, #15]
 801708a:	e001      	b.n	8017090 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801708c:	23ff      	movs	r3, #255	; 0xff
 801708e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017090:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017094:	4618      	mov	r0, r3
 8017096:	3710      	adds	r7, #16
 8017098:	46bd      	mov	sp, r7
 801709a:	bd80      	pop	{r7, pc}

0801709c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b08c      	sub	sp, #48	; 0x30
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	61f8      	str	r0, [r7, #28]
 80170a4:	61b9      	str	r1, [r7, #24]
 80170a6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80170a8:	f7ef fff3 	bl	8007092 <osKernelSysTick>
 80170ac:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80170ae:	697b      	ldr	r3, [r7, #20]
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d017      	beq.n	80170e4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80170b4:	69fb      	ldr	r3, [r7, #28]
 80170b6:	6819      	ldr	r1, [r3, #0]
 80170b8:	f107 0320 	add.w	r3, r7, #32
 80170bc:	697a      	ldr	r2, [r7, #20]
 80170be:	4618      	mov	r0, r3
 80170c0:	f7f0 fa82 	bl	80075c8 <osMessageGet>

    if(event.status == osEventMessage)
 80170c4:	6a3b      	ldr	r3, [r7, #32]
 80170c6:	2b10      	cmp	r3, #16
 80170c8:	d109      	bne.n	80170de <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80170ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170cc:	461a      	mov	r2, r3
 80170ce:	69bb      	ldr	r3, [r7, #24]
 80170d0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80170d2:	f7ef ffde 	bl	8007092 <osKernelSysTick>
 80170d6:	4602      	mov	r2, r0
 80170d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170da:	1ad3      	subs	r3, r2, r3
 80170dc:	e019      	b.n	8017112 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80170de:	f04f 33ff 	mov.w	r3, #4294967295
 80170e2:	e016      	b.n	8017112 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80170e4:	69fb      	ldr	r3, [r7, #28]
 80170e6:	6819      	ldr	r1, [r3, #0]
 80170e8:	463b      	mov	r3, r7
 80170ea:	f04f 32ff 	mov.w	r2, #4294967295
 80170ee:	4618      	mov	r0, r3
 80170f0:	f7f0 fa6a 	bl	80075c8 <osMessageGet>
 80170f4:	f107 0320 	add.w	r3, r7, #32
 80170f8:	463a      	mov	r2, r7
 80170fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80170fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017102:	461a      	mov	r2, r3
 8017104:	69bb      	ldr	r3, [r7, #24]
 8017106:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017108:	f7ef ffc3 	bl	8007092 <osKernelSysTick>
 801710c:	4602      	mov	r2, r0
 801710e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017110:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017112:	4618      	mov	r0, r3
 8017114:	3730      	adds	r7, #48	; 0x30
 8017116:	46bd      	mov	sp, r7
 8017118:	bd80      	pop	{r7, pc}

0801711a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801711a:	b580      	push	{r7, lr}
 801711c:	b086      	sub	sp, #24
 801711e:	af00      	add	r7, sp, #0
 8017120:	6078      	str	r0, [r7, #4]
 8017122:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	6819      	ldr	r1, [r3, #0]
 8017128:	f107 030c 	add.w	r3, r7, #12
 801712c:	2200      	movs	r2, #0
 801712e:	4618      	mov	r0, r3
 8017130:	f7f0 fa4a 	bl	80075c8 <osMessageGet>

  if(event.status == osEventMessage)
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	2b10      	cmp	r3, #16
 8017138:	d105      	bne.n	8017146 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801713a:	693b      	ldr	r3, [r7, #16]
 801713c:	461a      	mov	r2, r3
 801713e:	683b      	ldr	r3, [r7, #0]
 8017140:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8017142:	2300      	movs	r3, #0
 8017144:	e001      	b.n	801714a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8017146:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801714a:	4618      	mov	r0, r3
 801714c:	3718      	adds	r7, #24
 801714e:	46bd      	mov	sp, r7
 8017150:	bd80      	pop	{r7, pc}

08017152 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017152:	b480      	push	{r7}
 8017154:	b083      	sub	sp, #12
 8017156:	af00      	add	r7, sp, #0
 8017158:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	2b00      	cmp	r3, #0
 8017160:	d101      	bne.n	8017166 <sys_mbox_valid+0x14>
    return 0;
 8017162:	2300      	movs	r3, #0
 8017164:	e000      	b.n	8017168 <sys_mbox_valid+0x16>
  else
    return 1;
 8017166:	2301      	movs	r3, #1
}
 8017168:	4618      	mov	r0, r3
 801716a:	370c      	adds	r7, #12
 801716c:	46bd      	mov	sp, r7
 801716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017172:	4770      	bx	lr

08017174 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8017174:	b480      	push	{r7}
 8017176:	b083      	sub	sp, #12
 8017178:	af00      	add	r7, sp, #0
 801717a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	2200      	movs	r2, #0
 8017180:	601a      	str	r2, [r3, #0]
}
 8017182:	bf00      	nop
 8017184:	370c      	adds	r7, #12
 8017186:	46bd      	mov	sp, r7
 8017188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801718c:	4770      	bx	lr

0801718e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801718e:	b580      	push	{r7, lr}
 8017190:	b084      	sub	sp, #16
 8017192:	af00      	add	r7, sp, #0
 8017194:	6078      	str	r0, [r7, #4]
 8017196:	460b      	mov	r3, r1
 8017198:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801719a:	2300      	movs	r3, #0
 801719c:	60bb      	str	r3, [r7, #8]
 801719e:	2300      	movs	r3, #0
 80171a0:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80171a2:	f107 0308 	add.w	r3, r7, #8
 80171a6:	2101      	movs	r1, #1
 80171a8:	4618      	mov	r0, r3
 80171aa:	f7f0 f87f 	bl	80072ac <osSemaphoreCreate>
 80171ae:	4602      	mov	r2, r0
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d102      	bne.n	80171c2 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80171bc:	f04f 33ff 	mov.w	r3, #4294967295
 80171c0:	e009      	b.n	80171d6 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80171c2:	78fb      	ldrb	r3, [r7, #3]
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d105      	bne.n	80171d4 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	2100      	movs	r1, #0
 80171ce:	4618      	mov	r0, r3
 80171d0:	f7f0 f89e 	bl	8007310 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80171d4:	2300      	movs	r3, #0
}
 80171d6:	4618      	mov	r0, r3
 80171d8:	3710      	adds	r7, #16
 80171da:	46bd      	mov	sp, r7
 80171dc:	bd80      	pop	{r7, pc}

080171de <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80171de:	b580      	push	{r7, lr}
 80171e0:	b084      	sub	sp, #16
 80171e2:	af00      	add	r7, sp, #0
 80171e4:	6078      	str	r0, [r7, #4]
 80171e6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80171e8:	f7ef ff53 	bl	8007092 <osKernelSysTick>
 80171ec:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80171ee:	683b      	ldr	r3, [r7, #0]
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d011      	beq.n	8017218 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	6839      	ldr	r1, [r7, #0]
 80171fa:	4618      	mov	r0, r3
 80171fc:	f7f0 f888 	bl	8007310 <osSemaphoreWait>
 8017200:	4603      	mov	r3, r0
 8017202:	2b00      	cmp	r3, #0
 8017204:	d105      	bne.n	8017212 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8017206:	f7ef ff44 	bl	8007092 <osKernelSysTick>
 801720a:	4602      	mov	r2, r0
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	1ad3      	subs	r3, r2, r3
 8017210:	e012      	b.n	8017238 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017212:	f04f 33ff 	mov.w	r3, #4294967295
 8017216:	e00f      	b.n	8017238 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8017218:	bf00      	nop
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	f04f 31ff 	mov.w	r1, #4294967295
 8017222:	4618      	mov	r0, r3
 8017224:	f7f0 f874 	bl	8007310 <osSemaphoreWait>
 8017228:	4603      	mov	r3, r0
 801722a:	2b00      	cmp	r3, #0
 801722c:	d1f5      	bne.n	801721a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801722e:	f7ef ff30 	bl	8007092 <osKernelSysTick>
 8017232:	4602      	mov	r2, r0
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017238:	4618      	mov	r0, r3
 801723a:	3710      	adds	r7, #16
 801723c:	46bd      	mov	sp, r7
 801723e:	bd80      	pop	{r7, pc}

08017240 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8017240:	b580      	push	{r7, lr}
 8017242:	b082      	sub	sp, #8
 8017244:	af00      	add	r7, sp, #0
 8017246:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	4618      	mov	r0, r3
 801724e:	f7f0 f8ad 	bl	80073ac <osSemaphoreRelease>
}
 8017252:	bf00      	nop
 8017254:	3708      	adds	r7, #8
 8017256:	46bd      	mov	sp, r7
 8017258:	bd80      	pop	{r7, pc}

0801725a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801725a:	b580      	push	{r7, lr}
 801725c:	b082      	sub	sp, #8
 801725e:	af00      	add	r7, sp, #0
 8017260:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	681b      	ldr	r3, [r3, #0]
 8017266:	4618      	mov	r0, r3
 8017268:	f7f0 f8d6 	bl	8007418 <osSemaphoreDelete>
}
 801726c:	bf00      	nop
 801726e:	3708      	adds	r7, #8
 8017270:	46bd      	mov	sp, r7
 8017272:	bd80      	pop	{r7, pc}

08017274 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017274:	b480      	push	{r7}
 8017276:	b083      	sub	sp, #12
 8017278:	af00      	add	r7, sp, #0
 801727a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	2b00      	cmp	r3, #0
 8017282:	d101      	bne.n	8017288 <sys_sem_valid+0x14>
    return 0;
 8017284:	2300      	movs	r3, #0
 8017286:	e000      	b.n	801728a <sys_sem_valid+0x16>
  else
    return 1;
 8017288:	2301      	movs	r3, #1
}
 801728a:	4618      	mov	r0, r3
 801728c:	370c      	adds	r7, #12
 801728e:	46bd      	mov	sp, r7
 8017290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017294:	4770      	bx	lr

08017296 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8017296:	b480      	push	{r7}
 8017298:	b083      	sub	sp, #12
 801729a:	af00      	add	r7, sp, #0
 801729c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	2200      	movs	r2, #0
 80172a2:	601a      	str	r2, [r3, #0]
}
 80172a4:	bf00      	nop
 80172a6:	370c      	adds	r7, #12
 80172a8:	46bd      	mov	sp, r7
 80172aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ae:	4770      	bx	lr

080172b0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80172b0:	b580      	push	{r7, lr}
 80172b2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80172b4:	4803      	ldr	r0, [pc, #12]	; (80172c4 <sys_init+0x14>)
 80172b6:	f7ef ff5c 	bl	8007172 <osMutexCreate>
 80172ba:	4603      	mov	r3, r0
 80172bc:	4a02      	ldr	r2, [pc, #8]	; (80172c8 <sys_init+0x18>)
 80172be:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80172c0:	bf00      	nop
 80172c2:	bd80      	pop	{r7, pc}
 80172c4:	0801bc88 	.word	0x0801bc88
 80172c8:	2000d6b0 	.word	0x2000d6b0

080172cc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80172cc:	b580      	push	{r7, lr}
 80172ce:	b084      	sub	sp, #16
 80172d0:	af00      	add	r7, sp, #0
 80172d2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80172d4:	2300      	movs	r3, #0
 80172d6:	60bb      	str	r3, [r7, #8]
 80172d8:	2300      	movs	r3, #0
 80172da:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80172dc:	f107 0308 	add.w	r3, r7, #8
 80172e0:	4618      	mov	r0, r3
 80172e2:	f7ef ff46 	bl	8007172 <osMutexCreate>
 80172e6:	4602      	mov	r2, r0
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d102      	bne.n	80172fa <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80172f4:	f04f 33ff 	mov.w	r3, #4294967295
 80172f8:	e000      	b.n	80172fc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80172fa:	2300      	movs	r3, #0
}
 80172fc:	4618      	mov	r0, r3
 80172fe:	3710      	adds	r7, #16
 8017300:	46bd      	mov	sp, r7
 8017302:	bd80      	pop	{r7, pc}

08017304 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017304:	b580      	push	{r7, lr}
 8017306:	b082      	sub	sp, #8
 8017308:	af00      	add	r7, sp, #0
 801730a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	f04f 31ff 	mov.w	r1, #4294967295
 8017314:	4618      	mov	r0, r3
 8017316:	f7ef ff45 	bl	80071a4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801731a:	bf00      	nop
 801731c:	3708      	adds	r7, #8
 801731e:	46bd      	mov	sp, r7
 8017320:	bd80      	pop	{r7, pc}

08017322 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017322:	b580      	push	{r7, lr}
 8017324:	b082      	sub	sp, #8
 8017326:	af00      	add	r7, sp, #0
 8017328:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	4618      	mov	r0, r3
 8017330:	f7ef ff86 	bl	8007240 <osMutexRelease>
}
 8017334:	bf00      	nop
 8017336:	3708      	adds	r7, #8
 8017338:	46bd      	mov	sp, r7
 801733a:	bd80      	pop	{r7, pc}

0801733c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801733c:	b580      	push	{r7, lr}
 801733e:	b08c      	sub	sp, #48	; 0x30
 8017340:	af00      	add	r7, sp, #0
 8017342:	60f8      	str	r0, [r7, #12]
 8017344:	60b9      	str	r1, [r7, #8]
 8017346:	607a      	str	r2, [r7, #4]
 8017348:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801734a:	f107 0314 	add.w	r3, r7, #20
 801734e:	2200      	movs	r2, #0
 8017350:	601a      	str	r2, [r3, #0]
 8017352:	605a      	str	r2, [r3, #4]
 8017354:	609a      	str	r2, [r3, #8]
 8017356:	60da      	str	r2, [r3, #12]
 8017358:	611a      	str	r2, [r3, #16]
 801735a:	615a      	str	r2, [r3, #20]
 801735c:	619a      	str	r2, [r3, #24]
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	617b      	str	r3, [r7, #20]
 8017362:	68bb      	ldr	r3, [r7, #8]
 8017364:	61bb      	str	r3, [r7, #24]
 8017366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017368:	b21b      	sxth	r3, r3
 801736a:	83bb      	strh	r3, [r7, #28]
 801736c:	683b      	ldr	r3, [r7, #0]
 801736e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8017370:	f107 0314 	add.w	r3, r7, #20
 8017374:	6879      	ldr	r1, [r7, #4]
 8017376:	4618      	mov	r0, r3
 8017378:	f7ef fe9b 	bl	80070b2 <osThreadCreate>
 801737c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801737e:	4618      	mov	r0, r3
 8017380:	3730      	adds	r7, #48	; 0x30
 8017382:	46bd      	mov	sp, r7
 8017384:	bd80      	pop	{r7, pc}
	...

08017388 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017388:	b580      	push	{r7, lr}
 801738a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801738c:	4b04      	ldr	r3, [pc, #16]	; (80173a0 <sys_arch_protect+0x18>)
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	f04f 31ff 	mov.w	r1, #4294967295
 8017394:	4618      	mov	r0, r3
 8017396:	f7ef ff05 	bl	80071a4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801739a:	2301      	movs	r3, #1
}
 801739c:	4618      	mov	r0, r3
 801739e:	bd80      	pop	{r7, pc}
 80173a0:	2000d6b0 	.word	0x2000d6b0

080173a4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80173a4:	b580      	push	{r7, lr}
 80173a6:	b082      	sub	sp, #8
 80173a8:	af00      	add	r7, sp, #0
 80173aa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80173ac:	4b04      	ldr	r3, [pc, #16]	; (80173c0 <sys_arch_unprotect+0x1c>)
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	4618      	mov	r0, r3
 80173b2:	f7ef ff45 	bl	8007240 <osMutexRelease>
}
 80173b6:	bf00      	nop
 80173b8:	3708      	adds	r7, #8
 80173ba:	46bd      	mov	sp, r7
 80173bc:	bd80      	pop	{r7, pc}
 80173be:	bf00      	nop
 80173c0:	2000d6b0 	.word	0x2000d6b0

080173c4 <std>:
 80173c4:	2300      	movs	r3, #0
 80173c6:	b510      	push	{r4, lr}
 80173c8:	4604      	mov	r4, r0
 80173ca:	e9c0 3300 	strd	r3, r3, [r0]
 80173ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80173d2:	6083      	str	r3, [r0, #8]
 80173d4:	8181      	strh	r1, [r0, #12]
 80173d6:	6643      	str	r3, [r0, #100]	; 0x64
 80173d8:	81c2      	strh	r2, [r0, #14]
 80173da:	6183      	str	r3, [r0, #24]
 80173dc:	4619      	mov	r1, r3
 80173de:	2208      	movs	r2, #8
 80173e0:	305c      	adds	r0, #92	; 0x5c
 80173e2:	f000 f92d 	bl	8017640 <memset>
 80173e6:	4b05      	ldr	r3, [pc, #20]	; (80173fc <std+0x38>)
 80173e8:	6263      	str	r3, [r4, #36]	; 0x24
 80173ea:	4b05      	ldr	r3, [pc, #20]	; (8017400 <std+0x3c>)
 80173ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80173ee:	4b05      	ldr	r3, [pc, #20]	; (8017404 <std+0x40>)
 80173f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80173f2:	4b05      	ldr	r3, [pc, #20]	; (8017408 <std+0x44>)
 80173f4:	6224      	str	r4, [r4, #32]
 80173f6:	6323      	str	r3, [r4, #48]	; 0x30
 80173f8:	bd10      	pop	{r4, pc}
 80173fa:	bf00      	nop
 80173fc:	08017949 	.word	0x08017949
 8017400:	0801796b 	.word	0x0801796b
 8017404:	080179a3 	.word	0x080179a3
 8017408:	080179c7 	.word	0x080179c7

0801740c <_cleanup_r>:
 801740c:	4901      	ldr	r1, [pc, #4]	; (8017414 <_cleanup_r+0x8>)
 801740e:	f000 b8af 	b.w	8017570 <_fwalk_reent>
 8017412:	bf00      	nop
 8017414:	08017b5d 	.word	0x08017b5d

08017418 <__sfmoreglue>:
 8017418:	b570      	push	{r4, r5, r6, lr}
 801741a:	1e4a      	subs	r2, r1, #1
 801741c:	2568      	movs	r5, #104	; 0x68
 801741e:	4355      	muls	r5, r2
 8017420:	460e      	mov	r6, r1
 8017422:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017426:	f000 f963 	bl	80176f0 <_malloc_r>
 801742a:	4604      	mov	r4, r0
 801742c:	b140      	cbz	r0, 8017440 <__sfmoreglue+0x28>
 801742e:	2100      	movs	r1, #0
 8017430:	e9c0 1600 	strd	r1, r6, [r0]
 8017434:	300c      	adds	r0, #12
 8017436:	60a0      	str	r0, [r4, #8]
 8017438:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801743c:	f000 f900 	bl	8017640 <memset>
 8017440:	4620      	mov	r0, r4
 8017442:	bd70      	pop	{r4, r5, r6, pc}

08017444 <__sfp_lock_acquire>:
 8017444:	4801      	ldr	r0, [pc, #4]	; (801744c <__sfp_lock_acquire+0x8>)
 8017446:	f7ea bfdb 	b.w	8002400 <__retarget_lock_acquire_recursive>
 801744a:	bf00      	nop
 801744c:	20000370 	.word	0x20000370

08017450 <__sfp_lock_release>:
 8017450:	4801      	ldr	r0, [pc, #4]	; (8017458 <__sfp_lock_release+0x8>)
 8017452:	f7ea bfe9 	b.w	8002428 <__retarget_lock_release_recursive>
 8017456:	bf00      	nop
 8017458:	20000370 	.word	0x20000370

0801745c <__sinit_lock_acquire>:
 801745c:	4801      	ldr	r0, [pc, #4]	; (8017464 <__sinit_lock_acquire+0x8>)
 801745e:	f7ea bfcf 	b.w	8002400 <__retarget_lock_acquire_recursive>
 8017462:	bf00      	nop
 8017464:	20000364 	.word	0x20000364

08017468 <__sinit_lock_release>:
 8017468:	4801      	ldr	r0, [pc, #4]	; (8017470 <__sinit_lock_release+0x8>)
 801746a:	f7ea bfdd 	b.w	8002428 <__retarget_lock_release_recursive>
 801746e:	bf00      	nop
 8017470:	20000364 	.word	0x20000364

08017474 <__sinit>:
 8017474:	b510      	push	{r4, lr}
 8017476:	4604      	mov	r4, r0
 8017478:	f7ff fff0 	bl	801745c <__sinit_lock_acquire>
 801747c:	69a3      	ldr	r3, [r4, #24]
 801747e:	b11b      	cbz	r3, 8017488 <__sinit+0x14>
 8017480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017484:	f7ff bff0 	b.w	8017468 <__sinit_lock_release>
 8017488:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801748c:	6523      	str	r3, [r4, #80]	; 0x50
 801748e:	4b13      	ldr	r3, [pc, #76]	; (80174dc <__sinit+0x68>)
 8017490:	4a13      	ldr	r2, [pc, #76]	; (80174e0 <__sinit+0x6c>)
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	62a2      	str	r2, [r4, #40]	; 0x28
 8017496:	42a3      	cmp	r3, r4
 8017498:	bf04      	itt	eq
 801749a:	2301      	moveq	r3, #1
 801749c:	61a3      	streq	r3, [r4, #24]
 801749e:	4620      	mov	r0, r4
 80174a0:	f000 f820 	bl	80174e4 <__sfp>
 80174a4:	6060      	str	r0, [r4, #4]
 80174a6:	4620      	mov	r0, r4
 80174a8:	f000 f81c 	bl	80174e4 <__sfp>
 80174ac:	60a0      	str	r0, [r4, #8]
 80174ae:	4620      	mov	r0, r4
 80174b0:	f000 f818 	bl	80174e4 <__sfp>
 80174b4:	2200      	movs	r2, #0
 80174b6:	60e0      	str	r0, [r4, #12]
 80174b8:	2104      	movs	r1, #4
 80174ba:	6860      	ldr	r0, [r4, #4]
 80174bc:	f7ff ff82 	bl	80173c4 <std>
 80174c0:	68a0      	ldr	r0, [r4, #8]
 80174c2:	2201      	movs	r2, #1
 80174c4:	2109      	movs	r1, #9
 80174c6:	f7ff ff7d 	bl	80173c4 <std>
 80174ca:	68e0      	ldr	r0, [r4, #12]
 80174cc:	2202      	movs	r2, #2
 80174ce:	2112      	movs	r1, #18
 80174d0:	f7ff ff78 	bl	80173c4 <std>
 80174d4:	2301      	movs	r3, #1
 80174d6:	61a3      	str	r3, [r4, #24]
 80174d8:	e7d2      	b.n	8017480 <__sinit+0xc>
 80174da:	bf00      	nop
 80174dc:	0801bcf0 	.word	0x0801bcf0
 80174e0:	0801740d 	.word	0x0801740d

080174e4 <__sfp>:
 80174e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174e6:	4607      	mov	r7, r0
 80174e8:	f7ff ffac 	bl	8017444 <__sfp_lock_acquire>
 80174ec:	4b1e      	ldr	r3, [pc, #120]	; (8017568 <__sfp+0x84>)
 80174ee:	681e      	ldr	r6, [r3, #0]
 80174f0:	69b3      	ldr	r3, [r6, #24]
 80174f2:	b913      	cbnz	r3, 80174fa <__sfp+0x16>
 80174f4:	4630      	mov	r0, r6
 80174f6:	f7ff ffbd 	bl	8017474 <__sinit>
 80174fa:	3648      	adds	r6, #72	; 0x48
 80174fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017500:	3b01      	subs	r3, #1
 8017502:	d503      	bpl.n	801750c <__sfp+0x28>
 8017504:	6833      	ldr	r3, [r6, #0]
 8017506:	b30b      	cbz	r3, 801754c <__sfp+0x68>
 8017508:	6836      	ldr	r6, [r6, #0]
 801750a:	e7f7      	b.n	80174fc <__sfp+0x18>
 801750c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017510:	b9d5      	cbnz	r5, 8017548 <__sfp+0x64>
 8017512:	4b16      	ldr	r3, [pc, #88]	; (801756c <__sfp+0x88>)
 8017514:	60e3      	str	r3, [r4, #12]
 8017516:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801751a:	6665      	str	r5, [r4, #100]	; 0x64
 801751c:	f7ea ff4a 	bl	80023b4 <__retarget_lock_init_recursive>
 8017520:	f7ff ff96 	bl	8017450 <__sfp_lock_release>
 8017524:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017528:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801752c:	6025      	str	r5, [r4, #0]
 801752e:	61a5      	str	r5, [r4, #24]
 8017530:	2208      	movs	r2, #8
 8017532:	4629      	mov	r1, r5
 8017534:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017538:	f000 f882 	bl	8017640 <memset>
 801753c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017540:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017544:	4620      	mov	r0, r4
 8017546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017548:	3468      	adds	r4, #104	; 0x68
 801754a:	e7d9      	b.n	8017500 <__sfp+0x1c>
 801754c:	2104      	movs	r1, #4
 801754e:	4638      	mov	r0, r7
 8017550:	f7ff ff62 	bl	8017418 <__sfmoreglue>
 8017554:	4604      	mov	r4, r0
 8017556:	6030      	str	r0, [r6, #0]
 8017558:	2800      	cmp	r0, #0
 801755a:	d1d5      	bne.n	8017508 <__sfp+0x24>
 801755c:	f7ff ff78 	bl	8017450 <__sfp_lock_release>
 8017560:	230c      	movs	r3, #12
 8017562:	603b      	str	r3, [r7, #0]
 8017564:	e7ee      	b.n	8017544 <__sfp+0x60>
 8017566:	bf00      	nop
 8017568:	0801bcf0 	.word	0x0801bcf0
 801756c:	ffff0001 	.word	0xffff0001

08017570 <_fwalk_reent>:
 8017570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017574:	4606      	mov	r6, r0
 8017576:	4688      	mov	r8, r1
 8017578:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801757c:	2700      	movs	r7, #0
 801757e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017582:	f1b9 0901 	subs.w	r9, r9, #1
 8017586:	d505      	bpl.n	8017594 <_fwalk_reent+0x24>
 8017588:	6824      	ldr	r4, [r4, #0]
 801758a:	2c00      	cmp	r4, #0
 801758c:	d1f7      	bne.n	801757e <_fwalk_reent+0xe>
 801758e:	4638      	mov	r0, r7
 8017590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017594:	89ab      	ldrh	r3, [r5, #12]
 8017596:	2b01      	cmp	r3, #1
 8017598:	d907      	bls.n	80175aa <_fwalk_reent+0x3a>
 801759a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801759e:	3301      	adds	r3, #1
 80175a0:	d003      	beq.n	80175aa <_fwalk_reent+0x3a>
 80175a2:	4629      	mov	r1, r5
 80175a4:	4630      	mov	r0, r6
 80175a6:	47c0      	blx	r8
 80175a8:	4307      	orrs	r7, r0
 80175aa:	3568      	adds	r5, #104	; 0x68
 80175ac:	e7e9      	b.n	8017582 <_fwalk_reent+0x12>
	...

080175b0 <__libc_init_array>:
 80175b0:	b570      	push	{r4, r5, r6, lr}
 80175b2:	4d0d      	ldr	r5, [pc, #52]	; (80175e8 <__libc_init_array+0x38>)
 80175b4:	4c0d      	ldr	r4, [pc, #52]	; (80175ec <__libc_init_array+0x3c>)
 80175b6:	1b64      	subs	r4, r4, r5
 80175b8:	10a4      	asrs	r4, r4, #2
 80175ba:	2600      	movs	r6, #0
 80175bc:	42a6      	cmp	r6, r4
 80175be:	d109      	bne.n	80175d4 <__libc_init_array+0x24>
 80175c0:	4d0b      	ldr	r5, [pc, #44]	; (80175f0 <__libc_init_array+0x40>)
 80175c2:	4c0c      	ldr	r4, [pc, #48]	; (80175f4 <__libc_init_array+0x44>)
 80175c4:	f000 ffc8 	bl	8018558 <_init>
 80175c8:	1b64      	subs	r4, r4, r5
 80175ca:	10a4      	asrs	r4, r4, #2
 80175cc:	2600      	movs	r6, #0
 80175ce:	42a6      	cmp	r6, r4
 80175d0:	d105      	bne.n	80175de <__libc_init_array+0x2e>
 80175d2:	bd70      	pop	{r4, r5, r6, pc}
 80175d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80175d8:	4798      	blx	r3
 80175da:	3601      	adds	r6, #1
 80175dc:	e7ee      	b.n	80175bc <__libc_init_array+0xc>
 80175de:	f855 3b04 	ldr.w	r3, [r5], #4
 80175e2:	4798      	blx	r3
 80175e4:	3601      	adds	r6, #1
 80175e6:	e7f2      	b.n	80175ce <__libc_init_array+0x1e>
 80175e8:	0801bde4 	.word	0x0801bde4
 80175ec:	0801bde4 	.word	0x0801bde4
 80175f0:	0801bde4 	.word	0x0801bde4
 80175f4:	0801bde8 	.word	0x0801bde8

080175f8 <malloc>:
 80175f8:	4b02      	ldr	r3, [pc, #8]	; (8017604 <malloc+0xc>)
 80175fa:	4601      	mov	r1, r0
 80175fc:	6818      	ldr	r0, [r3, #0]
 80175fe:	f000 b877 	b.w	80176f0 <_malloc_r>
 8017602:	bf00      	nop
 8017604:	20000020 	.word	0x20000020

08017608 <memcmp>:
 8017608:	b530      	push	{r4, r5, lr}
 801760a:	3901      	subs	r1, #1
 801760c:	2400      	movs	r4, #0
 801760e:	42a2      	cmp	r2, r4
 8017610:	d101      	bne.n	8017616 <memcmp+0xe>
 8017612:	2000      	movs	r0, #0
 8017614:	e005      	b.n	8017622 <memcmp+0x1a>
 8017616:	5d03      	ldrb	r3, [r0, r4]
 8017618:	3401      	adds	r4, #1
 801761a:	5d0d      	ldrb	r5, [r1, r4]
 801761c:	42ab      	cmp	r3, r5
 801761e:	d0f6      	beq.n	801760e <memcmp+0x6>
 8017620:	1b58      	subs	r0, r3, r5
 8017622:	bd30      	pop	{r4, r5, pc}

08017624 <memcpy>:
 8017624:	440a      	add	r2, r1
 8017626:	4291      	cmp	r1, r2
 8017628:	f100 33ff 	add.w	r3, r0, #4294967295
 801762c:	d100      	bne.n	8017630 <memcpy+0xc>
 801762e:	4770      	bx	lr
 8017630:	b510      	push	{r4, lr}
 8017632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017636:	f803 4f01 	strb.w	r4, [r3, #1]!
 801763a:	4291      	cmp	r1, r2
 801763c:	d1f9      	bne.n	8017632 <memcpy+0xe>
 801763e:	bd10      	pop	{r4, pc}

08017640 <memset>:
 8017640:	4402      	add	r2, r0
 8017642:	4603      	mov	r3, r0
 8017644:	4293      	cmp	r3, r2
 8017646:	d100      	bne.n	801764a <memset+0xa>
 8017648:	4770      	bx	lr
 801764a:	f803 1b01 	strb.w	r1, [r3], #1
 801764e:	e7f9      	b.n	8017644 <memset+0x4>

08017650 <_free_r>:
 8017650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017652:	2900      	cmp	r1, #0
 8017654:	d048      	beq.n	80176e8 <_free_r+0x98>
 8017656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801765a:	9001      	str	r0, [sp, #4]
 801765c:	2b00      	cmp	r3, #0
 801765e:	f1a1 0404 	sub.w	r4, r1, #4
 8017662:	bfb8      	it	lt
 8017664:	18e4      	addlt	r4, r4, r3
 8017666:	f000 fad9 	bl	8017c1c <__malloc_lock>
 801766a:	4a20      	ldr	r2, [pc, #128]	; (80176ec <_free_r+0x9c>)
 801766c:	9801      	ldr	r0, [sp, #4]
 801766e:	6813      	ldr	r3, [r2, #0]
 8017670:	4615      	mov	r5, r2
 8017672:	b933      	cbnz	r3, 8017682 <_free_r+0x32>
 8017674:	6063      	str	r3, [r4, #4]
 8017676:	6014      	str	r4, [r2, #0]
 8017678:	b003      	add	sp, #12
 801767a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801767e:	f000 bad3 	b.w	8017c28 <__malloc_unlock>
 8017682:	42a3      	cmp	r3, r4
 8017684:	d90b      	bls.n	801769e <_free_r+0x4e>
 8017686:	6821      	ldr	r1, [r4, #0]
 8017688:	1862      	adds	r2, r4, r1
 801768a:	4293      	cmp	r3, r2
 801768c:	bf04      	itt	eq
 801768e:	681a      	ldreq	r2, [r3, #0]
 8017690:	685b      	ldreq	r3, [r3, #4]
 8017692:	6063      	str	r3, [r4, #4]
 8017694:	bf04      	itt	eq
 8017696:	1852      	addeq	r2, r2, r1
 8017698:	6022      	streq	r2, [r4, #0]
 801769a:	602c      	str	r4, [r5, #0]
 801769c:	e7ec      	b.n	8017678 <_free_r+0x28>
 801769e:	461a      	mov	r2, r3
 80176a0:	685b      	ldr	r3, [r3, #4]
 80176a2:	b10b      	cbz	r3, 80176a8 <_free_r+0x58>
 80176a4:	42a3      	cmp	r3, r4
 80176a6:	d9fa      	bls.n	801769e <_free_r+0x4e>
 80176a8:	6811      	ldr	r1, [r2, #0]
 80176aa:	1855      	adds	r5, r2, r1
 80176ac:	42a5      	cmp	r5, r4
 80176ae:	d10b      	bne.n	80176c8 <_free_r+0x78>
 80176b0:	6824      	ldr	r4, [r4, #0]
 80176b2:	4421      	add	r1, r4
 80176b4:	1854      	adds	r4, r2, r1
 80176b6:	42a3      	cmp	r3, r4
 80176b8:	6011      	str	r1, [r2, #0]
 80176ba:	d1dd      	bne.n	8017678 <_free_r+0x28>
 80176bc:	681c      	ldr	r4, [r3, #0]
 80176be:	685b      	ldr	r3, [r3, #4]
 80176c0:	6053      	str	r3, [r2, #4]
 80176c2:	4421      	add	r1, r4
 80176c4:	6011      	str	r1, [r2, #0]
 80176c6:	e7d7      	b.n	8017678 <_free_r+0x28>
 80176c8:	d902      	bls.n	80176d0 <_free_r+0x80>
 80176ca:	230c      	movs	r3, #12
 80176cc:	6003      	str	r3, [r0, #0]
 80176ce:	e7d3      	b.n	8017678 <_free_r+0x28>
 80176d0:	6825      	ldr	r5, [r4, #0]
 80176d2:	1961      	adds	r1, r4, r5
 80176d4:	428b      	cmp	r3, r1
 80176d6:	bf04      	itt	eq
 80176d8:	6819      	ldreq	r1, [r3, #0]
 80176da:	685b      	ldreq	r3, [r3, #4]
 80176dc:	6063      	str	r3, [r4, #4]
 80176de:	bf04      	itt	eq
 80176e0:	1949      	addeq	r1, r1, r5
 80176e2:	6021      	streq	r1, [r4, #0]
 80176e4:	6054      	str	r4, [r2, #4]
 80176e6:	e7c7      	b.n	8017678 <_free_r+0x28>
 80176e8:	b003      	add	sp, #12
 80176ea:	bd30      	pop	{r4, r5, pc}
 80176ec:	20006984 	.word	0x20006984

080176f0 <_malloc_r>:
 80176f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176f2:	1ccd      	adds	r5, r1, #3
 80176f4:	f025 0503 	bic.w	r5, r5, #3
 80176f8:	3508      	adds	r5, #8
 80176fa:	2d0c      	cmp	r5, #12
 80176fc:	bf38      	it	cc
 80176fe:	250c      	movcc	r5, #12
 8017700:	2d00      	cmp	r5, #0
 8017702:	4606      	mov	r6, r0
 8017704:	db01      	blt.n	801770a <_malloc_r+0x1a>
 8017706:	42a9      	cmp	r1, r5
 8017708:	d903      	bls.n	8017712 <_malloc_r+0x22>
 801770a:	230c      	movs	r3, #12
 801770c:	6033      	str	r3, [r6, #0]
 801770e:	2000      	movs	r0, #0
 8017710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017712:	f000 fa83 	bl	8017c1c <__malloc_lock>
 8017716:	4921      	ldr	r1, [pc, #132]	; (801779c <_malloc_r+0xac>)
 8017718:	680a      	ldr	r2, [r1, #0]
 801771a:	4614      	mov	r4, r2
 801771c:	b99c      	cbnz	r4, 8017746 <_malloc_r+0x56>
 801771e:	4f20      	ldr	r7, [pc, #128]	; (80177a0 <_malloc_r+0xb0>)
 8017720:	683b      	ldr	r3, [r7, #0]
 8017722:	b923      	cbnz	r3, 801772e <_malloc_r+0x3e>
 8017724:	4621      	mov	r1, r4
 8017726:	4630      	mov	r0, r6
 8017728:	f000 f8fe 	bl	8017928 <_sbrk_r>
 801772c:	6038      	str	r0, [r7, #0]
 801772e:	4629      	mov	r1, r5
 8017730:	4630      	mov	r0, r6
 8017732:	f000 f8f9 	bl	8017928 <_sbrk_r>
 8017736:	1c43      	adds	r3, r0, #1
 8017738:	d123      	bne.n	8017782 <_malloc_r+0x92>
 801773a:	230c      	movs	r3, #12
 801773c:	6033      	str	r3, [r6, #0]
 801773e:	4630      	mov	r0, r6
 8017740:	f000 fa72 	bl	8017c28 <__malloc_unlock>
 8017744:	e7e3      	b.n	801770e <_malloc_r+0x1e>
 8017746:	6823      	ldr	r3, [r4, #0]
 8017748:	1b5b      	subs	r3, r3, r5
 801774a:	d417      	bmi.n	801777c <_malloc_r+0x8c>
 801774c:	2b0b      	cmp	r3, #11
 801774e:	d903      	bls.n	8017758 <_malloc_r+0x68>
 8017750:	6023      	str	r3, [r4, #0]
 8017752:	441c      	add	r4, r3
 8017754:	6025      	str	r5, [r4, #0]
 8017756:	e004      	b.n	8017762 <_malloc_r+0x72>
 8017758:	6863      	ldr	r3, [r4, #4]
 801775a:	42a2      	cmp	r2, r4
 801775c:	bf0c      	ite	eq
 801775e:	600b      	streq	r3, [r1, #0]
 8017760:	6053      	strne	r3, [r2, #4]
 8017762:	4630      	mov	r0, r6
 8017764:	f000 fa60 	bl	8017c28 <__malloc_unlock>
 8017768:	f104 000b 	add.w	r0, r4, #11
 801776c:	1d23      	adds	r3, r4, #4
 801776e:	f020 0007 	bic.w	r0, r0, #7
 8017772:	1ac2      	subs	r2, r0, r3
 8017774:	d0cc      	beq.n	8017710 <_malloc_r+0x20>
 8017776:	1a1b      	subs	r3, r3, r0
 8017778:	50a3      	str	r3, [r4, r2]
 801777a:	e7c9      	b.n	8017710 <_malloc_r+0x20>
 801777c:	4622      	mov	r2, r4
 801777e:	6864      	ldr	r4, [r4, #4]
 8017780:	e7cc      	b.n	801771c <_malloc_r+0x2c>
 8017782:	1cc4      	adds	r4, r0, #3
 8017784:	f024 0403 	bic.w	r4, r4, #3
 8017788:	42a0      	cmp	r0, r4
 801778a:	d0e3      	beq.n	8017754 <_malloc_r+0x64>
 801778c:	1a21      	subs	r1, r4, r0
 801778e:	4630      	mov	r0, r6
 8017790:	f000 f8ca 	bl	8017928 <_sbrk_r>
 8017794:	3001      	adds	r0, #1
 8017796:	d1dd      	bne.n	8017754 <_malloc_r+0x64>
 8017798:	e7cf      	b.n	801773a <_malloc_r+0x4a>
 801779a:	bf00      	nop
 801779c:	20006984 	.word	0x20006984
 80177a0:	20006988 	.word	0x20006988

080177a4 <iprintf>:
 80177a4:	b40f      	push	{r0, r1, r2, r3}
 80177a6:	4b0a      	ldr	r3, [pc, #40]	; (80177d0 <iprintf+0x2c>)
 80177a8:	b513      	push	{r0, r1, r4, lr}
 80177aa:	681c      	ldr	r4, [r3, #0]
 80177ac:	b124      	cbz	r4, 80177b8 <iprintf+0x14>
 80177ae:	69a3      	ldr	r3, [r4, #24]
 80177b0:	b913      	cbnz	r3, 80177b8 <iprintf+0x14>
 80177b2:	4620      	mov	r0, r4
 80177b4:	f7ff fe5e 	bl	8017474 <__sinit>
 80177b8:	ab05      	add	r3, sp, #20
 80177ba:	9a04      	ldr	r2, [sp, #16]
 80177bc:	68a1      	ldr	r1, [r4, #8]
 80177be:	9301      	str	r3, [sp, #4]
 80177c0:	4620      	mov	r0, r4
 80177c2:	f000 fa61 	bl	8017c88 <_vfiprintf_r>
 80177c6:	b002      	add	sp, #8
 80177c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177cc:	b004      	add	sp, #16
 80177ce:	4770      	bx	lr
 80177d0:	20000020 	.word	0x20000020

080177d4 <rand>:
 80177d4:	4b17      	ldr	r3, [pc, #92]	; (8017834 <rand+0x60>)
 80177d6:	b510      	push	{r4, lr}
 80177d8:	681c      	ldr	r4, [r3, #0]
 80177da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80177dc:	b9b3      	cbnz	r3, 801780c <rand+0x38>
 80177de:	2018      	movs	r0, #24
 80177e0:	f7ff ff0a 	bl	80175f8 <malloc>
 80177e4:	63a0      	str	r0, [r4, #56]	; 0x38
 80177e6:	b928      	cbnz	r0, 80177f4 <rand+0x20>
 80177e8:	4602      	mov	r2, r0
 80177ea:	4b13      	ldr	r3, [pc, #76]	; (8017838 <rand+0x64>)
 80177ec:	4813      	ldr	r0, [pc, #76]	; (801783c <rand+0x68>)
 80177ee:	214e      	movs	r1, #78	; 0x4e
 80177f0:	f000 f900 	bl	80179f4 <__assert_func>
 80177f4:	4a12      	ldr	r2, [pc, #72]	; (8017840 <rand+0x6c>)
 80177f6:	4b13      	ldr	r3, [pc, #76]	; (8017844 <rand+0x70>)
 80177f8:	e9c0 2300 	strd	r2, r3, [r0]
 80177fc:	4b12      	ldr	r3, [pc, #72]	; (8017848 <rand+0x74>)
 80177fe:	6083      	str	r3, [r0, #8]
 8017800:	230b      	movs	r3, #11
 8017802:	8183      	strh	r3, [r0, #12]
 8017804:	2201      	movs	r2, #1
 8017806:	2300      	movs	r3, #0
 8017808:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801780c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801780e:	480f      	ldr	r0, [pc, #60]	; (801784c <rand+0x78>)
 8017810:	690a      	ldr	r2, [r1, #16]
 8017812:	694b      	ldr	r3, [r1, #20]
 8017814:	4c0e      	ldr	r4, [pc, #56]	; (8017850 <rand+0x7c>)
 8017816:	4350      	muls	r0, r2
 8017818:	fb04 0003 	mla	r0, r4, r3, r0
 801781c:	fba2 3404 	umull	r3, r4, r2, r4
 8017820:	1c5a      	adds	r2, r3, #1
 8017822:	4404      	add	r4, r0
 8017824:	f144 0000 	adc.w	r0, r4, #0
 8017828:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801782c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017830:	bd10      	pop	{r4, pc}
 8017832:	bf00      	nop
 8017834:	20000020 	.word	0x20000020
 8017838:	0801bcf4 	.word	0x0801bcf4
 801783c:	0801bd0b 	.word	0x0801bd0b
 8017840:	abcd330e 	.word	0xabcd330e
 8017844:	e66d1234 	.word	0xe66d1234
 8017848:	0005deec 	.word	0x0005deec
 801784c:	5851f42d 	.word	0x5851f42d
 8017850:	4c957f2d 	.word	0x4c957f2d

08017854 <cleanup_glue>:
 8017854:	b538      	push	{r3, r4, r5, lr}
 8017856:	460c      	mov	r4, r1
 8017858:	6809      	ldr	r1, [r1, #0]
 801785a:	4605      	mov	r5, r0
 801785c:	b109      	cbz	r1, 8017862 <cleanup_glue+0xe>
 801785e:	f7ff fff9 	bl	8017854 <cleanup_glue>
 8017862:	4621      	mov	r1, r4
 8017864:	4628      	mov	r0, r5
 8017866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801786a:	f7ff bef1 	b.w	8017650 <_free_r>
	...

08017870 <_reclaim_reent>:
 8017870:	4b2c      	ldr	r3, [pc, #176]	; (8017924 <_reclaim_reent+0xb4>)
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	4283      	cmp	r3, r0
 8017876:	b570      	push	{r4, r5, r6, lr}
 8017878:	4604      	mov	r4, r0
 801787a:	d051      	beq.n	8017920 <_reclaim_reent+0xb0>
 801787c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801787e:	b143      	cbz	r3, 8017892 <_reclaim_reent+0x22>
 8017880:	68db      	ldr	r3, [r3, #12]
 8017882:	2b00      	cmp	r3, #0
 8017884:	d14a      	bne.n	801791c <_reclaim_reent+0xac>
 8017886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017888:	6819      	ldr	r1, [r3, #0]
 801788a:	b111      	cbz	r1, 8017892 <_reclaim_reent+0x22>
 801788c:	4620      	mov	r0, r4
 801788e:	f7ff fedf 	bl	8017650 <_free_r>
 8017892:	6961      	ldr	r1, [r4, #20]
 8017894:	b111      	cbz	r1, 801789c <_reclaim_reent+0x2c>
 8017896:	4620      	mov	r0, r4
 8017898:	f7ff feda 	bl	8017650 <_free_r>
 801789c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801789e:	b111      	cbz	r1, 80178a6 <_reclaim_reent+0x36>
 80178a0:	4620      	mov	r0, r4
 80178a2:	f7ff fed5 	bl	8017650 <_free_r>
 80178a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80178a8:	b111      	cbz	r1, 80178b0 <_reclaim_reent+0x40>
 80178aa:	4620      	mov	r0, r4
 80178ac:	f7ff fed0 	bl	8017650 <_free_r>
 80178b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80178b2:	b111      	cbz	r1, 80178ba <_reclaim_reent+0x4a>
 80178b4:	4620      	mov	r0, r4
 80178b6:	f7ff fecb 	bl	8017650 <_free_r>
 80178ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80178bc:	b111      	cbz	r1, 80178c4 <_reclaim_reent+0x54>
 80178be:	4620      	mov	r0, r4
 80178c0:	f7ff fec6 	bl	8017650 <_free_r>
 80178c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80178c6:	b111      	cbz	r1, 80178ce <_reclaim_reent+0x5e>
 80178c8:	4620      	mov	r0, r4
 80178ca:	f7ff fec1 	bl	8017650 <_free_r>
 80178ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80178d0:	b111      	cbz	r1, 80178d8 <_reclaim_reent+0x68>
 80178d2:	4620      	mov	r0, r4
 80178d4:	f7ff febc 	bl	8017650 <_free_r>
 80178d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80178da:	b111      	cbz	r1, 80178e2 <_reclaim_reent+0x72>
 80178dc:	4620      	mov	r0, r4
 80178de:	f7ff feb7 	bl	8017650 <_free_r>
 80178e2:	69a3      	ldr	r3, [r4, #24]
 80178e4:	b1e3      	cbz	r3, 8017920 <_reclaim_reent+0xb0>
 80178e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80178e8:	4620      	mov	r0, r4
 80178ea:	4798      	blx	r3
 80178ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80178ee:	b1b9      	cbz	r1, 8017920 <_reclaim_reent+0xb0>
 80178f0:	4620      	mov	r0, r4
 80178f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178f6:	f7ff bfad 	b.w	8017854 <cleanup_glue>
 80178fa:	5949      	ldr	r1, [r1, r5]
 80178fc:	b941      	cbnz	r1, 8017910 <_reclaim_reent+0xa0>
 80178fe:	3504      	adds	r5, #4
 8017900:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017902:	2d80      	cmp	r5, #128	; 0x80
 8017904:	68d9      	ldr	r1, [r3, #12]
 8017906:	d1f8      	bne.n	80178fa <_reclaim_reent+0x8a>
 8017908:	4620      	mov	r0, r4
 801790a:	f7ff fea1 	bl	8017650 <_free_r>
 801790e:	e7ba      	b.n	8017886 <_reclaim_reent+0x16>
 8017910:	680e      	ldr	r6, [r1, #0]
 8017912:	4620      	mov	r0, r4
 8017914:	f7ff fe9c 	bl	8017650 <_free_r>
 8017918:	4631      	mov	r1, r6
 801791a:	e7ef      	b.n	80178fc <_reclaim_reent+0x8c>
 801791c:	2500      	movs	r5, #0
 801791e:	e7ef      	b.n	8017900 <_reclaim_reent+0x90>
 8017920:	bd70      	pop	{r4, r5, r6, pc}
 8017922:	bf00      	nop
 8017924:	20000020 	.word	0x20000020

08017928 <_sbrk_r>:
 8017928:	b538      	push	{r3, r4, r5, lr}
 801792a:	4d06      	ldr	r5, [pc, #24]	; (8017944 <_sbrk_r+0x1c>)
 801792c:	2300      	movs	r3, #0
 801792e:	4604      	mov	r4, r0
 8017930:	4608      	mov	r0, r1
 8017932:	602b      	str	r3, [r5, #0]
 8017934:	f7ea fbda 	bl	80020ec <_sbrk>
 8017938:	1c43      	adds	r3, r0, #1
 801793a:	d102      	bne.n	8017942 <_sbrk_r+0x1a>
 801793c:	682b      	ldr	r3, [r5, #0]
 801793e:	b103      	cbz	r3, 8017942 <_sbrk_r+0x1a>
 8017940:	6023      	str	r3, [r4, #0]
 8017942:	bd38      	pop	{r3, r4, r5, pc}
 8017944:	2000d6ac 	.word	0x2000d6ac

08017948 <__sread>:
 8017948:	b510      	push	{r4, lr}
 801794a:	460c      	mov	r4, r1
 801794c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017950:	f000 fc5e 	bl	8018210 <_read_r>
 8017954:	2800      	cmp	r0, #0
 8017956:	bfab      	itete	ge
 8017958:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801795a:	89a3      	ldrhlt	r3, [r4, #12]
 801795c:	181b      	addge	r3, r3, r0
 801795e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017962:	bfac      	ite	ge
 8017964:	6563      	strge	r3, [r4, #84]	; 0x54
 8017966:	81a3      	strhlt	r3, [r4, #12]
 8017968:	bd10      	pop	{r4, pc}

0801796a <__swrite>:
 801796a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801796e:	461f      	mov	r7, r3
 8017970:	898b      	ldrh	r3, [r1, #12]
 8017972:	05db      	lsls	r3, r3, #23
 8017974:	4605      	mov	r5, r0
 8017976:	460c      	mov	r4, r1
 8017978:	4616      	mov	r6, r2
 801797a:	d505      	bpl.n	8017988 <__swrite+0x1e>
 801797c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017980:	2302      	movs	r3, #2
 8017982:	2200      	movs	r2, #0
 8017984:	f000 f938 	bl	8017bf8 <_lseek_r>
 8017988:	89a3      	ldrh	r3, [r4, #12]
 801798a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801798e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017992:	81a3      	strh	r3, [r4, #12]
 8017994:	4632      	mov	r2, r6
 8017996:	463b      	mov	r3, r7
 8017998:	4628      	mov	r0, r5
 801799a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801799e:	f000 b817 	b.w	80179d0 <_write_r>

080179a2 <__sseek>:
 80179a2:	b510      	push	{r4, lr}
 80179a4:	460c      	mov	r4, r1
 80179a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179aa:	f000 f925 	bl	8017bf8 <_lseek_r>
 80179ae:	1c43      	adds	r3, r0, #1
 80179b0:	89a3      	ldrh	r3, [r4, #12]
 80179b2:	bf15      	itete	ne
 80179b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80179b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80179ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80179be:	81a3      	strheq	r3, [r4, #12]
 80179c0:	bf18      	it	ne
 80179c2:	81a3      	strhne	r3, [r4, #12]
 80179c4:	bd10      	pop	{r4, pc}

080179c6 <__sclose>:
 80179c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179ca:	f000 b831 	b.w	8017a30 <_close_r>
	...

080179d0 <_write_r>:
 80179d0:	b538      	push	{r3, r4, r5, lr}
 80179d2:	4d07      	ldr	r5, [pc, #28]	; (80179f0 <_write_r+0x20>)
 80179d4:	4604      	mov	r4, r0
 80179d6:	4608      	mov	r0, r1
 80179d8:	4611      	mov	r1, r2
 80179da:	2200      	movs	r2, #0
 80179dc:	602a      	str	r2, [r5, #0]
 80179de:	461a      	mov	r2, r3
 80179e0:	f7ea fb33 	bl	800204a <_write>
 80179e4:	1c43      	adds	r3, r0, #1
 80179e6:	d102      	bne.n	80179ee <_write_r+0x1e>
 80179e8:	682b      	ldr	r3, [r5, #0]
 80179ea:	b103      	cbz	r3, 80179ee <_write_r+0x1e>
 80179ec:	6023      	str	r3, [r4, #0]
 80179ee:	bd38      	pop	{r3, r4, r5, pc}
 80179f0:	2000d6ac 	.word	0x2000d6ac

080179f4 <__assert_func>:
 80179f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80179f6:	4614      	mov	r4, r2
 80179f8:	461a      	mov	r2, r3
 80179fa:	4b09      	ldr	r3, [pc, #36]	; (8017a20 <__assert_func+0x2c>)
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	4605      	mov	r5, r0
 8017a00:	68d8      	ldr	r0, [r3, #12]
 8017a02:	b14c      	cbz	r4, 8017a18 <__assert_func+0x24>
 8017a04:	4b07      	ldr	r3, [pc, #28]	; (8017a24 <__assert_func+0x30>)
 8017a06:	9100      	str	r1, [sp, #0]
 8017a08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017a0c:	4906      	ldr	r1, [pc, #24]	; (8017a28 <__assert_func+0x34>)
 8017a0e:	462b      	mov	r3, r5
 8017a10:	f000 f8e0 	bl	8017bd4 <fiprintf>
 8017a14:	f000 fcce 	bl	80183b4 <abort>
 8017a18:	4b04      	ldr	r3, [pc, #16]	; (8017a2c <__assert_func+0x38>)
 8017a1a:	461c      	mov	r4, r3
 8017a1c:	e7f3      	b.n	8017a06 <__assert_func+0x12>
 8017a1e:	bf00      	nop
 8017a20:	20000020 	.word	0x20000020
 8017a24:	0801bd6a 	.word	0x0801bd6a
 8017a28:	0801bd77 	.word	0x0801bd77
 8017a2c:	0801bda5 	.word	0x0801bda5

08017a30 <_close_r>:
 8017a30:	b538      	push	{r3, r4, r5, lr}
 8017a32:	4d06      	ldr	r5, [pc, #24]	; (8017a4c <_close_r+0x1c>)
 8017a34:	2300      	movs	r3, #0
 8017a36:	4604      	mov	r4, r0
 8017a38:	4608      	mov	r0, r1
 8017a3a:	602b      	str	r3, [r5, #0]
 8017a3c:	f7ea fb21 	bl	8002082 <_close>
 8017a40:	1c43      	adds	r3, r0, #1
 8017a42:	d102      	bne.n	8017a4a <_close_r+0x1a>
 8017a44:	682b      	ldr	r3, [r5, #0]
 8017a46:	b103      	cbz	r3, 8017a4a <_close_r+0x1a>
 8017a48:	6023      	str	r3, [r4, #0]
 8017a4a:	bd38      	pop	{r3, r4, r5, pc}
 8017a4c:	2000d6ac 	.word	0x2000d6ac

08017a50 <__sflush_r>:
 8017a50:	898a      	ldrh	r2, [r1, #12]
 8017a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a56:	4605      	mov	r5, r0
 8017a58:	0710      	lsls	r0, r2, #28
 8017a5a:	460c      	mov	r4, r1
 8017a5c:	d458      	bmi.n	8017b10 <__sflush_r+0xc0>
 8017a5e:	684b      	ldr	r3, [r1, #4]
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	dc05      	bgt.n	8017a70 <__sflush_r+0x20>
 8017a64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	dc02      	bgt.n	8017a70 <__sflush_r+0x20>
 8017a6a:	2000      	movs	r0, #0
 8017a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017a72:	2e00      	cmp	r6, #0
 8017a74:	d0f9      	beq.n	8017a6a <__sflush_r+0x1a>
 8017a76:	2300      	movs	r3, #0
 8017a78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017a7c:	682f      	ldr	r7, [r5, #0]
 8017a7e:	602b      	str	r3, [r5, #0]
 8017a80:	d032      	beq.n	8017ae8 <__sflush_r+0x98>
 8017a82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017a84:	89a3      	ldrh	r3, [r4, #12]
 8017a86:	075a      	lsls	r2, r3, #29
 8017a88:	d505      	bpl.n	8017a96 <__sflush_r+0x46>
 8017a8a:	6863      	ldr	r3, [r4, #4]
 8017a8c:	1ac0      	subs	r0, r0, r3
 8017a8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017a90:	b10b      	cbz	r3, 8017a96 <__sflush_r+0x46>
 8017a92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017a94:	1ac0      	subs	r0, r0, r3
 8017a96:	2300      	movs	r3, #0
 8017a98:	4602      	mov	r2, r0
 8017a9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017a9c:	6a21      	ldr	r1, [r4, #32]
 8017a9e:	4628      	mov	r0, r5
 8017aa0:	47b0      	blx	r6
 8017aa2:	1c43      	adds	r3, r0, #1
 8017aa4:	89a3      	ldrh	r3, [r4, #12]
 8017aa6:	d106      	bne.n	8017ab6 <__sflush_r+0x66>
 8017aa8:	6829      	ldr	r1, [r5, #0]
 8017aaa:	291d      	cmp	r1, #29
 8017aac:	d82c      	bhi.n	8017b08 <__sflush_r+0xb8>
 8017aae:	4a2a      	ldr	r2, [pc, #168]	; (8017b58 <__sflush_r+0x108>)
 8017ab0:	40ca      	lsrs	r2, r1
 8017ab2:	07d6      	lsls	r6, r2, #31
 8017ab4:	d528      	bpl.n	8017b08 <__sflush_r+0xb8>
 8017ab6:	2200      	movs	r2, #0
 8017ab8:	6062      	str	r2, [r4, #4]
 8017aba:	04d9      	lsls	r1, r3, #19
 8017abc:	6922      	ldr	r2, [r4, #16]
 8017abe:	6022      	str	r2, [r4, #0]
 8017ac0:	d504      	bpl.n	8017acc <__sflush_r+0x7c>
 8017ac2:	1c42      	adds	r2, r0, #1
 8017ac4:	d101      	bne.n	8017aca <__sflush_r+0x7a>
 8017ac6:	682b      	ldr	r3, [r5, #0]
 8017ac8:	b903      	cbnz	r3, 8017acc <__sflush_r+0x7c>
 8017aca:	6560      	str	r0, [r4, #84]	; 0x54
 8017acc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017ace:	602f      	str	r7, [r5, #0]
 8017ad0:	2900      	cmp	r1, #0
 8017ad2:	d0ca      	beq.n	8017a6a <__sflush_r+0x1a>
 8017ad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017ad8:	4299      	cmp	r1, r3
 8017ada:	d002      	beq.n	8017ae2 <__sflush_r+0x92>
 8017adc:	4628      	mov	r0, r5
 8017ade:	f7ff fdb7 	bl	8017650 <_free_r>
 8017ae2:	2000      	movs	r0, #0
 8017ae4:	6360      	str	r0, [r4, #52]	; 0x34
 8017ae6:	e7c1      	b.n	8017a6c <__sflush_r+0x1c>
 8017ae8:	6a21      	ldr	r1, [r4, #32]
 8017aea:	2301      	movs	r3, #1
 8017aec:	4628      	mov	r0, r5
 8017aee:	47b0      	blx	r6
 8017af0:	1c41      	adds	r1, r0, #1
 8017af2:	d1c7      	bne.n	8017a84 <__sflush_r+0x34>
 8017af4:	682b      	ldr	r3, [r5, #0]
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d0c4      	beq.n	8017a84 <__sflush_r+0x34>
 8017afa:	2b1d      	cmp	r3, #29
 8017afc:	d001      	beq.n	8017b02 <__sflush_r+0xb2>
 8017afe:	2b16      	cmp	r3, #22
 8017b00:	d101      	bne.n	8017b06 <__sflush_r+0xb6>
 8017b02:	602f      	str	r7, [r5, #0]
 8017b04:	e7b1      	b.n	8017a6a <__sflush_r+0x1a>
 8017b06:	89a3      	ldrh	r3, [r4, #12]
 8017b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b0c:	81a3      	strh	r3, [r4, #12]
 8017b0e:	e7ad      	b.n	8017a6c <__sflush_r+0x1c>
 8017b10:	690f      	ldr	r7, [r1, #16]
 8017b12:	2f00      	cmp	r7, #0
 8017b14:	d0a9      	beq.n	8017a6a <__sflush_r+0x1a>
 8017b16:	0793      	lsls	r3, r2, #30
 8017b18:	680e      	ldr	r6, [r1, #0]
 8017b1a:	bf08      	it	eq
 8017b1c:	694b      	ldreq	r3, [r1, #20]
 8017b1e:	600f      	str	r7, [r1, #0]
 8017b20:	bf18      	it	ne
 8017b22:	2300      	movne	r3, #0
 8017b24:	eba6 0807 	sub.w	r8, r6, r7
 8017b28:	608b      	str	r3, [r1, #8]
 8017b2a:	f1b8 0f00 	cmp.w	r8, #0
 8017b2e:	dd9c      	ble.n	8017a6a <__sflush_r+0x1a>
 8017b30:	6a21      	ldr	r1, [r4, #32]
 8017b32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017b34:	4643      	mov	r3, r8
 8017b36:	463a      	mov	r2, r7
 8017b38:	4628      	mov	r0, r5
 8017b3a:	47b0      	blx	r6
 8017b3c:	2800      	cmp	r0, #0
 8017b3e:	dc06      	bgt.n	8017b4e <__sflush_r+0xfe>
 8017b40:	89a3      	ldrh	r3, [r4, #12]
 8017b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b46:	81a3      	strh	r3, [r4, #12]
 8017b48:	f04f 30ff 	mov.w	r0, #4294967295
 8017b4c:	e78e      	b.n	8017a6c <__sflush_r+0x1c>
 8017b4e:	4407      	add	r7, r0
 8017b50:	eba8 0800 	sub.w	r8, r8, r0
 8017b54:	e7e9      	b.n	8017b2a <__sflush_r+0xda>
 8017b56:	bf00      	nop
 8017b58:	20400001 	.word	0x20400001

08017b5c <_fflush_r>:
 8017b5c:	b538      	push	{r3, r4, r5, lr}
 8017b5e:	690b      	ldr	r3, [r1, #16]
 8017b60:	4605      	mov	r5, r0
 8017b62:	460c      	mov	r4, r1
 8017b64:	b913      	cbnz	r3, 8017b6c <_fflush_r+0x10>
 8017b66:	2500      	movs	r5, #0
 8017b68:	4628      	mov	r0, r5
 8017b6a:	bd38      	pop	{r3, r4, r5, pc}
 8017b6c:	b118      	cbz	r0, 8017b76 <_fflush_r+0x1a>
 8017b6e:	6983      	ldr	r3, [r0, #24]
 8017b70:	b90b      	cbnz	r3, 8017b76 <_fflush_r+0x1a>
 8017b72:	f7ff fc7f 	bl	8017474 <__sinit>
 8017b76:	4b14      	ldr	r3, [pc, #80]	; (8017bc8 <_fflush_r+0x6c>)
 8017b78:	429c      	cmp	r4, r3
 8017b7a:	d11b      	bne.n	8017bb4 <_fflush_r+0x58>
 8017b7c:	686c      	ldr	r4, [r5, #4]
 8017b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d0ef      	beq.n	8017b66 <_fflush_r+0xa>
 8017b86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017b88:	07d0      	lsls	r0, r2, #31
 8017b8a:	d404      	bmi.n	8017b96 <_fflush_r+0x3a>
 8017b8c:	0599      	lsls	r1, r3, #22
 8017b8e:	d402      	bmi.n	8017b96 <_fflush_r+0x3a>
 8017b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017b92:	f7ea fc35 	bl	8002400 <__retarget_lock_acquire_recursive>
 8017b96:	4628      	mov	r0, r5
 8017b98:	4621      	mov	r1, r4
 8017b9a:	f7ff ff59 	bl	8017a50 <__sflush_r>
 8017b9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017ba0:	07da      	lsls	r2, r3, #31
 8017ba2:	4605      	mov	r5, r0
 8017ba4:	d4e0      	bmi.n	8017b68 <_fflush_r+0xc>
 8017ba6:	89a3      	ldrh	r3, [r4, #12]
 8017ba8:	059b      	lsls	r3, r3, #22
 8017baa:	d4dd      	bmi.n	8017b68 <_fflush_r+0xc>
 8017bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017bae:	f7ea fc3b 	bl	8002428 <__retarget_lock_release_recursive>
 8017bb2:	e7d9      	b.n	8017b68 <_fflush_r+0xc>
 8017bb4:	4b05      	ldr	r3, [pc, #20]	; (8017bcc <_fflush_r+0x70>)
 8017bb6:	429c      	cmp	r4, r3
 8017bb8:	d101      	bne.n	8017bbe <_fflush_r+0x62>
 8017bba:	68ac      	ldr	r4, [r5, #8]
 8017bbc:	e7df      	b.n	8017b7e <_fflush_r+0x22>
 8017bbe:	4b04      	ldr	r3, [pc, #16]	; (8017bd0 <_fflush_r+0x74>)
 8017bc0:	429c      	cmp	r4, r3
 8017bc2:	bf08      	it	eq
 8017bc4:	68ec      	ldreq	r4, [r5, #12]
 8017bc6:	e7da      	b.n	8017b7e <_fflush_r+0x22>
 8017bc8:	0801bcb0 	.word	0x0801bcb0
 8017bcc:	0801bcd0 	.word	0x0801bcd0
 8017bd0:	0801bc90 	.word	0x0801bc90

08017bd4 <fiprintf>:
 8017bd4:	b40e      	push	{r1, r2, r3}
 8017bd6:	b503      	push	{r0, r1, lr}
 8017bd8:	4601      	mov	r1, r0
 8017bda:	ab03      	add	r3, sp, #12
 8017bdc:	4805      	ldr	r0, [pc, #20]	; (8017bf4 <fiprintf+0x20>)
 8017bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8017be2:	6800      	ldr	r0, [r0, #0]
 8017be4:	9301      	str	r3, [sp, #4]
 8017be6:	f000 f84f 	bl	8017c88 <_vfiprintf_r>
 8017bea:	b002      	add	sp, #8
 8017bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8017bf0:	b003      	add	sp, #12
 8017bf2:	4770      	bx	lr
 8017bf4:	20000020 	.word	0x20000020

08017bf8 <_lseek_r>:
 8017bf8:	b538      	push	{r3, r4, r5, lr}
 8017bfa:	4d07      	ldr	r5, [pc, #28]	; (8017c18 <_lseek_r+0x20>)
 8017bfc:	4604      	mov	r4, r0
 8017bfe:	4608      	mov	r0, r1
 8017c00:	4611      	mov	r1, r2
 8017c02:	2200      	movs	r2, #0
 8017c04:	602a      	str	r2, [r5, #0]
 8017c06:	461a      	mov	r2, r3
 8017c08:	f7ea fa62 	bl	80020d0 <_lseek>
 8017c0c:	1c43      	adds	r3, r0, #1
 8017c0e:	d102      	bne.n	8017c16 <_lseek_r+0x1e>
 8017c10:	682b      	ldr	r3, [r5, #0]
 8017c12:	b103      	cbz	r3, 8017c16 <_lseek_r+0x1e>
 8017c14:	6023      	str	r3, [r4, #0]
 8017c16:	bd38      	pop	{r3, r4, r5, pc}
 8017c18:	2000d6ac 	.word	0x2000d6ac

08017c1c <__malloc_lock>:
 8017c1c:	4801      	ldr	r0, [pc, #4]	; (8017c24 <__malloc_lock+0x8>)
 8017c1e:	f7ea bbef 	b.w	8002400 <__retarget_lock_acquire_recursive>
 8017c22:	bf00      	nop
 8017c24:	2000037c 	.word	0x2000037c

08017c28 <__malloc_unlock>:
 8017c28:	4801      	ldr	r0, [pc, #4]	; (8017c30 <__malloc_unlock+0x8>)
 8017c2a:	f7ea bbfd 	b.w	8002428 <__retarget_lock_release_recursive>
 8017c2e:	bf00      	nop
 8017c30:	2000037c 	.word	0x2000037c

08017c34 <__sfputc_r>:
 8017c34:	6893      	ldr	r3, [r2, #8]
 8017c36:	3b01      	subs	r3, #1
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	b410      	push	{r4}
 8017c3c:	6093      	str	r3, [r2, #8]
 8017c3e:	da08      	bge.n	8017c52 <__sfputc_r+0x1e>
 8017c40:	6994      	ldr	r4, [r2, #24]
 8017c42:	42a3      	cmp	r3, r4
 8017c44:	db01      	blt.n	8017c4a <__sfputc_r+0x16>
 8017c46:	290a      	cmp	r1, #10
 8017c48:	d103      	bne.n	8017c52 <__sfputc_r+0x1e>
 8017c4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c4e:	f000 baf1 	b.w	8018234 <__swbuf_r>
 8017c52:	6813      	ldr	r3, [r2, #0]
 8017c54:	1c58      	adds	r0, r3, #1
 8017c56:	6010      	str	r0, [r2, #0]
 8017c58:	7019      	strb	r1, [r3, #0]
 8017c5a:	4608      	mov	r0, r1
 8017c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c60:	4770      	bx	lr

08017c62 <__sfputs_r>:
 8017c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c64:	4606      	mov	r6, r0
 8017c66:	460f      	mov	r7, r1
 8017c68:	4614      	mov	r4, r2
 8017c6a:	18d5      	adds	r5, r2, r3
 8017c6c:	42ac      	cmp	r4, r5
 8017c6e:	d101      	bne.n	8017c74 <__sfputs_r+0x12>
 8017c70:	2000      	movs	r0, #0
 8017c72:	e007      	b.n	8017c84 <__sfputs_r+0x22>
 8017c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c78:	463a      	mov	r2, r7
 8017c7a:	4630      	mov	r0, r6
 8017c7c:	f7ff ffda 	bl	8017c34 <__sfputc_r>
 8017c80:	1c43      	adds	r3, r0, #1
 8017c82:	d1f3      	bne.n	8017c6c <__sfputs_r+0xa>
 8017c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017c88 <_vfiprintf_r>:
 8017c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c8c:	460d      	mov	r5, r1
 8017c8e:	b09d      	sub	sp, #116	; 0x74
 8017c90:	4614      	mov	r4, r2
 8017c92:	4698      	mov	r8, r3
 8017c94:	4606      	mov	r6, r0
 8017c96:	b118      	cbz	r0, 8017ca0 <_vfiprintf_r+0x18>
 8017c98:	6983      	ldr	r3, [r0, #24]
 8017c9a:	b90b      	cbnz	r3, 8017ca0 <_vfiprintf_r+0x18>
 8017c9c:	f7ff fbea 	bl	8017474 <__sinit>
 8017ca0:	4b89      	ldr	r3, [pc, #548]	; (8017ec8 <_vfiprintf_r+0x240>)
 8017ca2:	429d      	cmp	r5, r3
 8017ca4:	d11b      	bne.n	8017cde <_vfiprintf_r+0x56>
 8017ca6:	6875      	ldr	r5, [r6, #4]
 8017ca8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017caa:	07d9      	lsls	r1, r3, #31
 8017cac:	d405      	bmi.n	8017cba <_vfiprintf_r+0x32>
 8017cae:	89ab      	ldrh	r3, [r5, #12]
 8017cb0:	059a      	lsls	r2, r3, #22
 8017cb2:	d402      	bmi.n	8017cba <_vfiprintf_r+0x32>
 8017cb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017cb6:	f7ea fba3 	bl	8002400 <__retarget_lock_acquire_recursive>
 8017cba:	89ab      	ldrh	r3, [r5, #12]
 8017cbc:	071b      	lsls	r3, r3, #28
 8017cbe:	d501      	bpl.n	8017cc4 <_vfiprintf_r+0x3c>
 8017cc0:	692b      	ldr	r3, [r5, #16]
 8017cc2:	b9eb      	cbnz	r3, 8017d00 <_vfiprintf_r+0x78>
 8017cc4:	4629      	mov	r1, r5
 8017cc6:	4630      	mov	r0, r6
 8017cc8:	f000 fb06 	bl	80182d8 <__swsetup_r>
 8017ccc:	b1c0      	cbz	r0, 8017d00 <_vfiprintf_r+0x78>
 8017cce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017cd0:	07dc      	lsls	r4, r3, #31
 8017cd2:	d50e      	bpl.n	8017cf2 <_vfiprintf_r+0x6a>
 8017cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8017cd8:	b01d      	add	sp, #116	; 0x74
 8017cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cde:	4b7b      	ldr	r3, [pc, #492]	; (8017ecc <_vfiprintf_r+0x244>)
 8017ce0:	429d      	cmp	r5, r3
 8017ce2:	d101      	bne.n	8017ce8 <_vfiprintf_r+0x60>
 8017ce4:	68b5      	ldr	r5, [r6, #8]
 8017ce6:	e7df      	b.n	8017ca8 <_vfiprintf_r+0x20>
 8017ce8:	4b79      	ldr	r3, [pc, #484]	; (8017ed0 <_vfiprintf_r+0x248>)
 8017cea:	429d      	cmp	r5, r3
 8017cec:	bf08      	it	eq
 8017cee:	68f5      	ldreq	r5, [r6, #12]
 8017cf0:	e7da      	b.n	8017ca8 <_vfiprintf_r+0x20>
 8017cf2:	89ab      	ldrh	r3, [r5, #12]
 8017cf4:	0598      	lsls	r0, r3, #22
 8017cf6:	d4ed      	bmi.n	8017cd4 <_vfiprintf_r+0x4c>
 8017cf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017cfa:	f7ea fb95 	bl	8002428 <__retarget_lock_release_recursive>
 8017cfe:	e7e9      	b.n	8017cd4 <_vfiprintf_r+0x4c>
 8017d00:	2300      	movs	r3, #0
 8017d02:	9309      	str	r3, [sp, #36]	; 0x24
 8017d04:	2320      	movs	r3, #32
 8017d06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017d0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8017d0e:	2330      	movs	r3, #48	; 0x30
 8017d10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017ed4 <_vfiprintf_r+0x24c>
 8017d14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017d18:	f04f 0901 	mov.w	r9, #1
 8017d1c:	4623      	mov	r3, r4
 8017d1e:	469a      	mov	sl, r3
 8017d20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d24:	b10a      	cbz	r2, 8017d2a <_vfiprintf_r+0xa2>
 8017d26:	2a25      	cmp	r2, #37	; 0x25
 8017d28:	d1f9      	bne.n	8017d1e <_vfiprintf_r+0x96>
 8017d2a:	ebba 0b04 	subs.w	fp, sl, r4
 8017d2e:	d00b      	beq.n	8017d48 <_vfiprintf_r+0xc0>
 8017d30:	465b      	mov	r3, fp
 8017d32:	4622      	mov	r2, r4
 8017d34:	4629      	mov	r1, r5
 8017d36:	4630      	mov	r0, r6
 8017d38:	f7ff ff93 	bl	8017c62 <__sfputs_r>
 8017d3c:	3001      	adds	r0, #1
 8017d3e:	f000 80aa 	beq.w	8017e96 <_vfiprintf_r+0x20e>
 8017d42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017d44:	445a      	add	r2, fp
 8017d46:	9209      	str	r2, [sp, #36]	; 0x24
 8017d48:	f89a 3000 	ldrb.w	r3, [sl]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	f000 80a2 	beq.w	8017e96 <_vfiprintf_r+0x20e>
 8017d52:	2300      	movs	r3, #0
 8017d54:	f04f 32ff 	mov.w	r2, #4294967295
 8017d58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017d5c:	f10a 0a01 	add.w	sl, sl, #1
 8017d60:	9304      	str	r3, [sp, #16]
 8017d62:	9307      	str	r3, [sp, #28]
 8017d64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017d68:	931a      	str	r3, [sp, #104]	; 0x68
 8017d6a:	4654      	mov	r4, sl
 8017d6c:	2205      	movs	r2, #5
 8017d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d72:	4858      	ldr	r0, [pc, #352]	; (8017ed4 <_vfiprintf_r+0x24c>)
 8017d74:	f7e8 fa2c 	bl	80001d0 <memchr>
 8017d78:	9a04      	ldr	r2, [sp, #16]
 8017d7a:	b9d8      	cbnz	r0, 8017db4 <_vfiprintf_r+0x12c>
 8017d7c:	06d1      	lsls	r1, r2, #27
 8017d7e:	bf44      	itt	mi
 8017d80:	2320      	movmi	r3, #32
 8017d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d86:	0713      	lsls	r3, r2, #28
 8017d88:	bf44      	itt	mi
 8017d8a:	232b      	movmi	r3, #43	; 0x2b
 8017d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d90:	f89a 3000 	ldrb.w	r3, [sl]
 8017d94:	2b2a      	cmp	r3, #42	; 0x2a
 8017d96:	d015      	beq.n	8017dc4 <_vfiprintf_r+0x13c>
 8017d98:	9a07      	ldr	r2, [sp, #28]
 8017d9a:	4654      	mov	r4, sl
 8017d9c:	2000      	movs	r0, #0
 8017d9e:	f04f 0c0a 	mov.w	ip, #10
 8017da2:	4621      	mov	r1, r4
 8017da4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017da8:	3b30      	subs	r3, #48	; 0x30
 8017daa:	2b09      	cmp	r3, #9
 8017dac:	d94e      	bls.n	8017e4c <_vfiprintf_r+0x1c4>
 8017dae:	b1b0      	cbz	r0, 8017dde <_vfiprintf_r+0x156>
 8017db0:	9207      	str	r2, [sp, #28]
 8017db2:	e014      	b.n	8017dde <_vfiprintf_r+0x156>
 8017db4:	eba0 0308 	sub.w	r3, r0, r8
 8017db8:	fa09 f303 	lsl.w	r3, r9, r3
 8017dbc:	4313      	orrs	r3, r2
 8017dbe:	9304      	str	r3, [sp, #16]
 8017dc0:	46a2      	mov	sl, r4
 8017dc2:	e7d2      	b.n	8017d6a <_vfiprintf_r+0xe2>
 8017dc4:	9b03      	ldr	r3, [sp, #12]
 8017dc6:	1d19      	adds	r1, r3, #4
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	9103      	str	r1, [sp, #12]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	bfbb      	ittet	lt
 8017dd0:	425b      	neglt	r3, r3
 8017dd2:	f042 0202 	orrlt.w	r2, r2, #2
 8017dd6:	9307      	strge	r3, [sp, #28]
 8017dd8:	9307      	strlt	r3, [sp, #28]
 8017dda:	bfb8      	it	lt
 8017ddc:	9204      	strlt	r2, [sp, #16]
 8017dde:	7823      	ldrb	r3, [r4, #0]
 8017de0:	2b2e      	cmp	r3, #46	; 0x2e
 8017de2:	d10c      	bne.n	8017dfe <_vfiprintf_r+0x176>
 8017de4:	7863      	ldrb	r3, [r4, #1]
 8017de6:	2b2a      	cmp	r3, #42	; 0x2a
 8017de8:	d135      	bne.n	8017e56 <_vfiprintf_r+0x1ce>
 8017dea:	9b03      	ldr	r3, [sp, #12]
 8017dec:	1d1a      	adds	r2, r3, #4
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	9203      	str	r2, [sp, #12]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	bfb8      	it	lt
 8017df6:	f04f 33ff 	movlt.w	r3, #4294967295
 8017dfa:	3402      	adds	r4, #2
 8017dfc:	9305      	str	r3, [sp, #20]
 8017dfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017ee4 <_vfiprintf_r+0x25c>
 8017e02:	7821      	ldrb	r1, [r4, #0]
 8017e04:	2203      	movs	r2, #3
 8017e06:	4650      	mov	r0, sl
 8017e08:	f7e8 f9e2 	bl	80001d0 <memchr>
 8017e0c:	b140      	cbz	r0, 8017e20 <_vfiprintf_r+0x198>
 8017e0e:	2340      	movs	r3, #64	; 0x40
 8017e10:	eba0 000a 	sub.w	r0, r0, sl
 8017e14:	fa03 f000 	lsl.w	r0, r3, r0
 8017e18:	9b04      	ldr	r3, [sp, #16]
 8017e1a:	4303      	orrs	r3, r0
 8017e1c:	3401      	adds	r4, #1
 8017e1e:	9304      	str	r3, [sp, #16]
 8017e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e24:	482c      	ldr	r0, [pc, #176]	; (8017ed8 <_vfiprintf_r+0x250>)
 8017e26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017e2a:	2206      	movs	r2, #6
 8017e2c:	f7e8 f9d0 	bl	80001d0 <memchr>
 8017e30:	2800      	cmp	r0, #0
 8017e32:	d03f      	beq.n	8017eb4 <_vfiprintf_r+0x22c>
 8017e34:	4b29      	ldr	r3, [pc, #164]	; (8017edc <_vfiprintf_r+0x254>)
 8017e36:	bb1b      	cbnz	r3, 8017e80 <_vfiprintf_r+0x1f8>
 8017e38:	9b03      	ldr	r3, [sp, #12]
 8017e3a:	3307      	adds	r3, #7
 8017e3c:	f023 0307 	bic.w	r3, r3, #7
 8017e40:	3308      	adds	r3, #8
 8017e42:	9303      	str	r3, [sp, #12]
 8017e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e46:	443b      	add	r3, r7
 8017e48:	9309      	str	r3, [sp, #36]	; 0x24
 8017e4a:	e767      	b.n	8017d1c <_vfiprintf_r+0x94>
 8017e4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017e50:	460c      	mov	r4, r1
 8017e52:	2001      	movs	r0, #1
 8017e54:	e7a5      	b.n	8017da2 <_vfiprintf_r+0x11a>
 8017e56:	2300      	movs	r3, #0
 8017e58:	3401      	adds	r4, #1
 8017e5a:	9305      	str	r3, [sp, #20]
 8017e5c:	4619      	mov	r1, r3
 8017e5e:	f04f 0c0a 	mov.w	ip, #10
 8017e62:	4620      	mov	r0, r4
 8017e64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017e68:	3a30      	subs	r2, #48	; 0x30
 8017e6a:	2a09      	cmp	r2, #9
 8017e6c:	d903      	bls.n	8017e76 <_vfiprintf_r+0x1ee>
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d0c5      	beq.n	8017dfe <_vfiprintf_r+0x176>
 8017e72:	9105      	str	r1, [sp, #20]
 8017e74:	e7c3      	b.n	8017dfe <_vfiprintf_r+0x176>
 8017e76:	fb0c 2101 	mla	r1, ip, r1, r2
 8017e7a:	4604      	mov	r4, r0
 8017e7c:	2301      	movs	r3, #1
 8017e7e:	e7f0      	b.n	8017e62 <_vfiprintf_r+0x1da>
 8017e80:	ab03      	add	r3, sp, #12
 8017e82:	9300      	str	r3, [sp, #0]
 8017e84:	462a      	mov	r2, r5
 8017e86:	4b16      	ldr	r3, [pc, #88]	; (8017ee0 <_vfiprintf_r+0x258>)
 8017e88:	a904      	add	r1, sp, #16
 8017e8a:	4630      	mov	r0, r6
 8017e8c:	f3af 8000 	nop.w
 8017e90:	4607      	mov	r7, r0
 8017e92:	1c78      	adds	r0, r7, #1
 8017e94:	d1d6      	bne.n	8017e44 <_vfiprintf_r+0x1bc>
 8017e96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017e98:	07d9      	lsls	r1, r3, #31
 8017e9a:	d405      	bmi.n	8017ea8 <_vfiprintf_r+0x220>
 8017e9c:	89ab      	ldrh	r3, [r5, #12]
 8017e9e:	059a      	lsls	r2, r3, #22
 8017ea0:	d402      	bmi.n	8017ea8 <_vfiprintf_r+0x220>
 8017ea2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017ea4:	f7ea fac0 	bl	8002428 <__retarget_lock_release_recursive>
 8017ea8:	89ab      	ldrh	r3, [r5, #12]
 8017eaa:	065b      	lsls	r3, r3, #25
 8017eac:	f53f af12 	bmi.w	8017cd4 <_vfiprintf_r+0x4c>
 8017eb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017eb2:	e711      	b.n	8017cd8 <_vfiprintf_r+0x50>
 8017eb4:	ab03      	add	r3, sp, #12
 8017eb6:	9300      	str	r3, [sp, #0]
 8017eb8:	462a      	mov	r2, r5
 8017eba:	4b09      	ldr	r3, [pc, #36]	; (8017ee0 <_vfiprintf_r+0x258>)
 8017ebc:	a904      	add	r1, sp, #16
 8017ebe:	4630      	mov	r0, r6
 8017ec0:	f000 f880 	bl	8017fc4 <_printf_i>
 8017ec4:	e7e4      	b.n	8017e90 <_vfiprintf_r+0x208>
 8017ec6:	bf00      	nop
 8017ec8:	0801bcb0 	.word	0x0801bcb0
 8017ecc:	0801bcd0 	.word	0x0801bcd0
 8017ed0:	0801bc90 	.word	0x0801bc90
 8017ed4:	0801bda6 	.word	0x0801bda6
 8017ed8:	0801bdb0 	.word	0x0801bdb0
 8017edc:	00000000 	.word	0x00000000
 8017ee0:	08017c63 	.word	0x08017c63
 8017ee4:	0801bdac 	.word	0x0801bdac

08017ee8 <_printf_common>:
 8017ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017eec:	4616      	mov	r6, r2
 8017eee:	4699      	mov	r9, r3
 8017ef0:	688a      	ldr	r2, [r1, #8]
 8017ef2:	690b      	ldr	r3, [r1, #16]
 8017ef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017ef8:	4293      	cmp	r3, r2
 8017efa:	bfb8      	it	lt
 8017efc:	4613      	movlt	r3, r2
 8017efe:	6033      	str	r3, [r6, #0]
 8017f00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017f04:	4607      	mov	r7, r0
 8017f06:	460c      	mov	r4, r1
 8017f08:	b10a      	cbz	r2, 8017f0e <_printf_common+0x26>
 8017f0a:	3301      	adds	r3, #1
 8017f0c:	6033      	str	r3, [r6, #0]
 8017f0e:	6823      	ldr	r3, [r4, #0]
 8017f10:	0699      	lsls	r1, r3, #26
 8017f12:	bf42      	ittt	mi
 8017f14:	6833      	ldrmi	r3, [r6, #0]
 8017f16:	3302      	addmi	r3, #2
 8017f18:	6033      	strmi	r3, [r6, #0]
 8017f1a:	6825      	ldr	r5, [r4, #0]
 8017f1c:	f015 0506 	ands.w	r5, r5, #6
 8017f20:	d106      	bne.n	8017f30 <_printf_common+0x48>
 8017f22:	f104 0a19 	add.w	sl, r4, #25
 8017f26:	68e3      	ldr	r3, [r4, #12]
 8017f28:	6832      	ldr	r2, [r6, #0]
 8017f2a:	1a9b      	subs	r3, r3, r2
 8017f2c:	42ab      	cmp	r3, r5
 8017f2e:	dc26      	bgt.n	8017f7e <_printf_common+0x96>
 8017f30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017f34:	1e13      	subs	r3, r2, #0
 8017f36:	6822      	ldr	r2, [r4, #0]
 8017f38:	bf18      	it	ne
 8017f3a:	2301      	movne	r3, #1
 8017f3c:	0692      	lsls	r2, r2, #26
 8017f3e:	d42b      	bmi.n	8017f98 <_printf_common+0xb0>
 8017f40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017f44:	4649      	mov	r1, r9
 8017f46:	4638      	mov	r0, r7
 8017f48:	47c0      	blx	r8
 8017f4a:	3001      	adds	r0, #1
 8017f4c:	d01e      	beq.n	8017f8c <_printf_common+0xa4>
 8017f4e:	6823      	ldr	r3, [r4, #0]
 8017f50:	68e5      	ldr	r5, [r4, #12]
 8017f52:	6832      	ldr	r2, [r6, #0]
 8017f54:	f003 0306 	and.w	r3, r3, #6
 8017f58:	2b04      	cmp	r3, #4
 8017f5a:	bf08      	it	eq
 8017f5c:	1aad      	subeq	r5, r5, r2
 8017f5e:	68a3      	ldr	r3, [r4, #8]
 8017f60:	6922      	ldr	r2, [r4, #16]
 8017f62:	bf0c      	ite	eq
 8017f64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017f68:	2500      	movne	r5, #0
 8017f6a:	4293      	cmp	r3, r2
 8017f6c:	bfc4      	itt	gt
 8017f6e:	1a9b      	subgt	r3, r3, r2
 8017f70:	18ed      	addgt	r5, r5, r3
 8017f72:	2600      	movs	r6, #0
 8017f74:	341a      	adds	r4, #26
 8017f76:	42b5      	cmp	r5, r6
 8017f78:	d11a      	bne.n	8017fb0 <_printf_common+0xc8>
 8017f7a:	2000      	movs	r0, #0
 8017f7c:	e008      	b.n	8017f90 <_printf_common+0xa8>
 8017f7e:	2301      	movs	r3, #1
 8017f80:	4652      	mov	r2, sl
 8017f82:	4649      	mov	r1, r9
 8017f84:	4638      	mov	r0, r7
 8017f86:	47c0      	blx	r8
 8017f88:	3001      	adds	r0, #1
 8017f8a:	d103      	bne.n	8017f94 <_printf_common+0xac>
 8017f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8017f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f94:	3501      	adds	r5, #1
 8017f96:	e7c6      	b.n	8017f26 <_printf_common+0x3e>
 8017f98:	18e1      	adds	r1, r4, r3
 8017f9a:	1c5a      	adds	r2, r3, #1
 8017f9c:	2030      	movs	r0, #48	; 0x30
 8017f9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017fa2:	4422      	add	r2, r4
 8017fa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017fa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017fac:	3302      	adds	r3, #2
 8017fae:	e7c7      	b.n	8017f40 <_printf_common+0x58>
 8017fb0:	2301      	movs	r3, #1
 8017fb2:	4622      	mov	r2, r4
 8017fb4:	4649      	mov	r1, r9
 8017fb6:	4638      	mov	r0, r7
 8017fb8:	47c0      	blx	r8
 8017fba:	3001      	adds	r0, #1
 8017fbc:	d0e6      	beq.n	8017f8c <_printf_common+0xa4>
 8017fbe:	3601      	adds	r6, #1
 8017fc0:	e7d9      	b.n	8017f76 <_printf_common+0x8e>
	...

08017fc4 <_printf_i>:
 8017fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017fc8:	460c      	mov	r4, r1
 8017fca:	4691      	mov	r9, r2
 8017fcc:	7e27      	ldrb	r7, [r4, #24]
 8017fce:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017fd0:	2f78      	cmp	r7, #120	; 0x78
 8017fd2:	4680      	mov	r8, r0
 8017fd4:	469a      	mov	sl, r3
 8017fd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017fda:	d807      	bhi.n	8017fec <_printf_i+0x28>
 8017fdc:	2f62      	cmp	r7, #98	; 0x62
 8017fde:	d80a      	bhi.n	8017ff6 <_printf_i+0x32>
 8017fe0:	2f00      	cmp	r7, #0
 8017fe2:	f000 80d8 	beq.w	8018196 <_printf_i+0x1d2>
 8017fe6:	2f58      	cmp	r7, #88	; 0x58
 8017fe8:	f000 80a3 	beq.w	8018132 <_printf_i+0x16e>
 8017fec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017ff0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017ff4:	e03a      	b.n	801806c <_printf_i+0xa8>
 8017ff6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017ffa:	2b15      	cmp	r3, #21
 8017ffc:	d8f6      	bhi.n	8017fec <_printf_i+0x28>
 8017ffe:	a001      	add	r0, pc, #4	; (adr r0, 8018004 <_printf_i+0x40>)
 8018000:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8018004:	0801805d 	.word	0x0801805d
 8018008:	08018071 	.word	0x08018071
 801800c:	08017fed 	.word	0x08017fed
 8018010:	08017fed 	.word	0x08017fed
 8018014:	08017fed 	.word	0x08017fed
 8018018:	08017fed 	.word	0x08017fed
 801801c:	08018071 	.word	0x08018071
 8018020:	08017fed 	.word	0x08017fed
 8018024:	08017fed 	.word	0x08017fed
 8018028:	08017fed 	.word	0x08017fed
 801802c:	08017fed 	.word	0x08017fed
 8018030:	0801817d 	.word	0x0801817d
 8018034:	080180a1 	.word	0x080180a1
 8018038:	0801815f 	.word	0x0801815f
 801803c:	08017fed 	.word	0x08017fed
 8018040:	08017fed 	.word	0x08017fed
 8018044:	0801819f 	.word	0x0801819f
 8018048:	08017fed 	.word	0x08017fed
 801804c:	080180a1 	.word	0x080180a1
 8018050:	08017fed 	.word	0x08017fed
 8018054:	08017fed 	.word	0x08017fed
 8018058:	08018167 	.word	0x08018167
 801805c:	680b      	ldr	r3, [r1, #0]
 801805e:	1d1a      	adds	r2, r3, #4
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	600a      	str	r2, [r1, #0]
 8018064:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801806c:	2301      	movs	r3, #1
 801806e:	e0a3      	b.n	80181b8 <_printf_i+0x1f4>
 8018070:	6825      	ldr	r5, [r4, #0]
 8018072:	6808      	ldr	r0, [r1, #0]
 8018074:	062e      	lsls	r6, r5, #24
 8018076:	f100 0304 	add.w	r3, r0, #4
 801807a:	d50a      	bpl.n	8018092 <_printf_i+0xce>
 801807c:	6805      	ldr	r5, [r0, #0]
 801807e:	600b      	str	r3, [r1, #0]
 8018080:	2d00      	cmp	r5, #0
 8018082:	da03      	bge.n	801808c <_printf_i+0xc8>
 8018084:	232d      	movs	r3, #45	; 0x2d
 8018086:	426d      	negs	r5, r5
 8018088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801808c:	485e      	ldr	r0, [pc, #376]	; (8018208 <_printf_i+0x244>)
 801808e:	230a      	movs	r3, #10
 8018090:	e019      	b.n	80180c6 <_printf_i+0x102>
 8018092:	f015 0f40 	tst.w	r5, #64	; 0x40
 8018096:	6805      	ldr	r5, [r0, #0]
 8018098:	600b      	str	r3, [r1, #0]
 801809a:	bf18      	it	ne
 801809c:	b22d      	sxthne	r5, r5
 801809e:	e7ef      	b.n	8018080 <_printf_i+0xbc>
 80180a0:	680b      	ldr	r3, [r1, #0]
 80180a2:	6825      	ldr	r5, [r4, #0]
 80180a4:	1d18      	adds	r0, r3, #4
 80180a6:	6008      	str	r0, [r1, #0]
 80180a8:	0628      	lsls	r0, r5, #24
 80180aa:	d501      	bpl.n	80180b0 <_printf_i+0xec>
 80180ac:	681d      	ldr	r5, [r3, #0]
 80180ae:	e002      	b.n	80180b6 <_printf_i+0xf2>
 80180b0:	0669      	lsls	r1, r5, #25
 80180b2:	d5fb      	bpl.n	80180ac <_printf_i+0xe8>
 80180b4:	881d      	ldrh	r5, [r3, #0]
 80180b6:	4854      	ldr	r0, [pc, #336]	; (8018208 <_printf_i+0x244>)
 80180b8:	2f6f      	cmp	r7, #111	; 0x6f
 80180ba:	bf0c      	ite	eq
 80180bc:	2308      	moveq	r3, #8
 80180be:	230a      	movne	r3, #10
 80180c0:	2100      	movs	r1, #0
 80180c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80180c6:	6866      	ldr	r6, [r4, #4]
 80180c8:	60a6      	str	r6, [r4, #8]
 80180ca:	2e00      	cmp	r6, #0
 80180cc:	bfa2      	ittt	ge
 80180ce:	6821      	ldrge	r1, [r4, #0]
 80180d0:	f021 0104 	bicge.w	r1, r1, #4
 80180d4:	6021      	strge	r1, [r4, #0]
 80180d6:	b90d      	cbnz	r5, 80180dc <_printf_i+0x118>
 80180d8:	2e00      	cmp	r6, #0
 80180da:	d04d      	beq.n	8018178 <_printf_i+0x1b4>
 80180dc:	4616      	mov	r6, r2
 80180de:	fbb5 f1f3 	udiv	r1, r5, r3
 80180e2:	fb03 5711 	mls	r7, r3, r1, r5
 80180e6:	5dc7      	ldrb	r7, [r0, r7]
 80180e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80180ec:	462f      	mov	r7, r5
 80180ee:	42bb      	cmp	r3, r7
 80180f0:	460d      	mov	r5, r1
 80180f2:	d9f4      	bls.n	80180de <_printf_i+0x11a>
 80180f4:	2b08      	cmp	r3, #8
 80180f6:	d10b      	bne.n	8018110 <_printf_i+0x14c>
 80180f8:	6823      	ldr	r3, [r4, #0]
 80180fa:	07df      	lsls	r7, r3, #31
 80180fc:	d508      	bpl.n	8018110 <_printf_i+0x14c>
 80180fe:	6923      	ldr	r3, [r4, #16]
 8018100:	6861      	ldr	r1, [r4, #4]
 8018102:	4299      	cmp	r1, r3
 8018104:	bfde      	ittt	le
 8018106:	2330      	movle	r3, #48	; 0x30
 8018108:	f806 3c01 	strble.w	r3, [r6, #-1]
 801810c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018110:	1b92      	subs	r2, r2, r6
 8018112:	6122      	str	r2, [r4, #16]
 8018114:	f8cd a000 	str.w	sl, [sp]
 8018118:	464b      	mov	r3, r9
 801811a:	aa03      	add	r2, sp, #12
 801811c:	4621      	mov	r1, r4
 801811e:	4640      	mov	r0, r8
 8018120:	f7ff fee2 	bl	8017ee8 <_printf_common>
 8018124:	3001      	adds	r0, #1
 8018126:	d14c      	bne.n	80181c2 <_printf_i+0x1fe>
 8018128:	f04f 30ff 	mov.w	r0, #4294967295
 801812c:	b004      	add	sp, #16
 801812e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018132:	4835      	ldr	r0, [pc, #212]	; (8018208 <_printf_i+0x244>)
 8018134:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018138:	6823      	ldr	r3, [r4, #0]
 801813a:	680e      	ldr	r6, [r1, #0]
 801813c:	061f      	lsls	r7, r3, #24
 801813e:	f856 5b04 	ldr.w	r5, [r6], #4
 8018142:	600e      	str	r6, [r1, #0]
 8018144:	d514      	bpl.n	8018170 <_printf_i+0x1ac>
 8018146:	07d9      	lsls	r1, r3, #31
 8018148:	bf44      	itt	mi
 801814a:	f043 0320 	orrmi.w	r3, r3, #32
 801814e:	6023      	strmi	r3, [r4, #0]
 8018150:	b91d      	cbnz	r5, 801815a <_printf_i+0x196>
 8018152:	6823      	ldr	r3, [r4, #0]
 8018154:	f023 0320 	bic.w	r3, r3, #32
 8018158:	6023      	str	r3, [r4, #0]
 801815a:	2310      	movs	r3, #16
 801815c:	e7b0      	b.n	80180c0 <_printf_i+0xfc>
 801815e:	6823      	ldr	r3, [r4, #0]
 8018160:	f043 0320 	orr.w	r3, r3, #32
 8018164:	6023      	str	r3, [r4, #0]
 8018166:	2378      	movs	r3, #120	; 0x78
 8018168:	4828      	ldr	r0, [pc, #160]	; (801820c <_printf_i+0x248>)
 801816a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801816e:	e7e3      	b.n	8018138 <_printf_i+0x174>
 8018170:	065e      	lsls	r6, r3, #25
 8018172:	bf48      	it	mi
 8018174:	b2ad      	uxthmi	r5, r5
 8018176:	e7e6      	b.n	8018146 <_printf_i+0x182>
 8018178:	4616      	mov	r6, r2
 801817a:	e7bb      	b.n	80180f4 <_printf_i+0x130>
 801817c:	680b      	ldr	r3, [r1, #0]
 801817e:	6826      	ldr	r6, [r4, #0]
 8018180:	6960      	ldr	r0, [r4, #20]
 8018182:	1d1d      	adds	r5, r3, #4
 8018184:	600d      	str	r5, [r1, #0]
 8018186:	0635      	lsls	r5, r6, #24
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	d501      	bpl.n	8018190 <_printf_i+0x1cc>
 801818c:	6018      	str	r0, [r3, #0]
 801818e:	e002      	b.n	8018196 <_printf_i+0x1d2>
 8018190:	0671      	lsls	r1, r6, #25
 8018192:	d5fb      	bpl.n	801818c <_printf_i+0x1c8>
 8018194:	8018      	strh	r0, [r3, #0]
 8018196:	2300      	movs	r3, #0
 8018198:	6123      	str	r3, [r4, #16]
 801819a:	4616      	mov	r6, r2
 801819c:	e7ba      	b.n	8018114 <_printf_i+0x150>
 801819e:	680b      	ldr	r3, [r1, #0]
 80181a0:	1d1a      	adds	r2, r3, #4
 80181a2:	600a      	str	r2, [r1, #0]
 80181a4:	681e      	ldr	r6, [r3, #0]
 80181a6:	6862      	ldr	r2, [r4, #4]
 80181a8:	2100      	movs	r1, #0
 80181aa:	4630      	mov	r0, r6
 80181ac:	f7e8 f810 	bl	80001d0 <memchr>
 80181b0:	b108      	cbz	r0, 80181b6 <_printf_i+0x1f2>
 80181b2:	1b80      	subs	r0, r0, r6
 80181b4:	6060      	str	r0, [r4, #4]
 80181b6:	6863      	ldr	r3, [r4, #4]
 80181b8:	6123      	str	r3, [r4, #16]
 80181ba:	2300      	movs	r3, #0
 80181bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80181c0:	e7a8      	b.n	8018114 <_printf_i+0x150>
 80181c2:	6923      	ldr	r3, [r4, #16]
 80181c4:	4632      	mov	r2, r6
 80181c6:	4649      	mov	r1, r9
 80181c8:	4640      	mov	r0, r8
 80181ca:	47d0      	blx	sl
 80181cc:	3001      	adds	r0, #1
 80181ce:	d0ab      	beq.n	8018128 <_printf_i+0x164>
 80181d0:	6823      	ldr	r3, [r4, #0]
 80181d2:	079b      	lsls	r3, r3, #30
 80181d4:	d413      	bmi.n	80181fe <_printf_i+0x23a>
 80181d6:	68e0      	ldr	r0, [r4, #12]
 80181d8:	9b03      	ldr	r3, [sp, #12]
 80181da:	4298      	cmp	r0, r3
 80181dc:	bfb8      	it	lt
 80181de:	4618      	movlt	r0, r3
 80181e0:	e7a4      	b.n	801812c <_printf_i+0x168>
 80181e2:	2301      	movs	r3, #1
 80181e4:	4632      	mov	r2, r6
 80181e6:	4649      	mov	r1, r9
 80181e8:	4640      	mov	r0, r8
 80181ea:	47d0      	blx	sl
 80181ec:	3001      	adds	r0, #1
 80181ee:	d09b      	beq.n	8018128 <_printf_i+0x164>
 80181f0:	3501      	adds	r5, #1
 80181f2:	68e3      	ldr	r3, [r4, #12]
 80181f4:	9903      	ldr	r1, [sp, #12]
 80181f6:	1a5b      	subs	r3, r3, r1
 80181f8:	42ab      	cmp	r3, r5
 80181fa:	dcf2      	bgt.n	80181e2 <_printf_i+0x21e>
 80181fc:	e7eb      	b.n	80181d6 <_printf_i+0x212>
 80181fe:	2500      	movs	r5, #0
 8018200:	f104 0619 	add.w	r6, r4, #25
 8018204:	e7f5      	b.n	80181f2 <_printf_i+0x22e>
 8018206:	bf00      	nop
 8018208:	0801bdb7 	.word	0x0801bdb7
 801820c:	0801bdc8 	.word	0x0801bdc8

08018210 <_read_r>:
 8018210:	b538      	push	{r3, r4, r5, lr}
 8018212:	4d07      	ldr	r5, [pc, #28]	; (8018230 <_read_r+0x20>)
 8018214:	4604      	mov	r4, r0
 8018216:	4608      	mov	r0, r1
 8018218:	4611      	mov	r1, r2
 801821a:	2200      	movs	r2, #0
 801821c:	602a      	str	r2, [r5, #0]
 801821e:	461a      	mov	r2, r3
 8018220:	f7e9 fef6 	bl	8002010 <_read>
 8018224:	1c43      	adds	r3, r0, #1
 8018226:	d102      	bne.n	801822e <_read_r+0x1e>
 8018228:	682b      	ldr	r3, [r5, #0]
 801822a:	b103      	cbz	r3, 801822e <_read_r+0x1e>
 801822c:	6023      	str	r3, [r4, #0]
 801822e:	bd38      	pop	{r3, r4, r5, pc}
 8018230:	2000d6ac 	.word	0x2000d6ac

08018234 <__swbuf_r>:
 8018234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018236:	460e      	mov	r6, r1
 8018238:	4614      	mov	r4, r2
 801823a:	4605      	mov	r5, r0
 801823c:	b118      	cbz	r0, 8018246 <__swbuf_r+0x12>
 801823e:	6983      	ldr	r3, [r0, #24]
 8018240:	b90b      	cbnz	r3, 8018246 <__swbuf_r+0x12>
 8018242:	f7ff f917 	bl	8017474 <__sinit>
 8018246:	4b21      	ldr	r3, [pc, #132]	; (80182cc <__swbuf_r+0x98>)
 8018248:	429c      	cmp	r4, r3
 801824a:	d12b      	bne.n	80182a4 <__swbuf_r+0x70>
 801824c:	686c      	ldr	r4, [r5, #4]
 801824e:	69a3      	ldr	r3, [r4, #24]
 8018250:	60a3      	str	r3, [r4, #8]
 8018252:	89a3      	ldrh	r3, [r4, #12]
 8018254:	071a      	lsls	r2, r3, #28
 8018256:	d52f      	bpl.n	80182b8 <__swbuf_r+0x84>
 8018258:	6923      	ldr	r3, [r4, #16]
 801825a:	b36b      	cbz	r3, 80182b8 <__swbuf_r+0x84>
 801825c:	6923      	ldr	r3, [r4, #16]
 801825e:	6820      	ldr	r0, [r4, #0]
 8018260:	1ac0      	subs	r0, r0, r3
 8018262:	6963      	ldr	r3, [r4, #20]
 8018264:	b2f6      	uxtb	r6, r6
 8018266:	4283      	cmp	r3, r0
 8018268:	4637      	mov	r7, r6
 801826a:	dc04      	bgt.n	8018276 <__swbuf_r+0x42>
 801826c:	4621      	mov	r1, r4
 801826e:	4628      	mov	r0, r5
 8018270:	f7ff fc74 	bl	8017b5c <_fflush_r>
 8018274:	bb30      	cbnz	r0, 80182c4 <__swbuf_r+0x90>
 8018276:	68a3      	ldr	r3, [r4, #8]
 8018278:	3b01      	subs	r3, #1
 801827a:	60a3      	str	r3, [r4, #8]
 801827c:	6823      	ldr	r3, [r4, #0]
 801827e:	1c5a      	adds	r2, r3, #1
 8018280:	6022      	str	r2, [r4, #0]
 8018282:	701e      	strb	r6, [r3, #0]
 8018284:	6963      	ldr	r3, [r4, #20]
 8018286:	3001      	adds	r0, #1
 8018288:	4283      	cmp	r3, r0
 801828a:	d004      	beq.n	8018296 <__swbuf_r+0x62>
 801828c:	89a3      	ldrh	r3, [r4, #12]
 801828e:	07db      	lsls	r3, r3, #31
 8018290:	d506      	bpl.n	80182a0 <__swbuf_r+0x6c>
 8018292:	2e0a      	cmp	r6, #10
 8018294:	d104      	bne.n	80182a0 <__swbuf_r+0x6c>
 8018296:	4621      	mov	r1, r4
 8018298:	4628      	mov	r0, r5
 801829a:	f7ff fc5f 	bl	8017b5c <_fflush_r>
 801829e:	b988      	cbnz	r0, 80182c4 <__swbuf_r+0x90>
 80182a0:	4638      	mov	r0, r7
 80182a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80182a4:	4b0a      	ldr	r3, [pc, #40]	; (80182d0 <__swbuf_r+0x9c>)
 80182a6:	429c      	cmp	r4, r3
 80182a8:	d101      	bne.n	80182ae <__swbuf_r+0x7a>
 80182aa:	68ac      	ldr	r4, [r5, #8]
 80182ac:	e7cf      	b.n	801824e <__swbuf_r+0x1a>
 80182ae:	4b09      	ldr	r3, [pc, #36]	; (80182d4 <__swbuf_r+0xa0>)
 80182b0:	429c      	cmp	r4, r3
 80182b2:	bf08      	it	eq
 80182b4:	68ec      	ldreq	r4, [r5, #12]
 80182b6:	e7ca      	b.n	801824e <__swbuf_r+0x1a>
 80182b8:	4621      	mov	r1, r4
 80182ba:	4628      	mov	r0, r5
 80182bc:	f000 f80c 	bl	80182d8 <__swsetup_r>
 80182c0:	2800      	cmp	r0, #0
 80182c2:	d0cb      	beq.n	801825c <__swbuf_r+0x28>
 80182c4:	f04f 37ff 	mov.w	r7, #4294967295
 80182c8:	e7ea      	b.n	80182a0 <__swbuf_r+0x6c>
 80182ca:	bf00      	nop
 80182cc:	0801bcb0 	.word	0x0801bcb0
 80182d0:	0801bcd0 	.word	0x0801bcd0
 80182d4:	0801bc90 	.word	0x0801bc90

080182d8 <__swsetup_r>:
 80182d8:	4b32      	ldr	r3, [pc, #200]	; (80183a4 <__swsetup_r+0xcc>)
 80182da:	b570      	push	{r4, r5, r6, lr}
 80182dc:	681d      	ldr	r5, [r3, #0]
 80182de:	4606      	mov	r6, r0
 80182e0:	460c      	mov	r4, r1
 80182e2:	b125      	cbz	r5, 80182ee <__swsetup_r+0x16>
 80182e4:	69ab      	ldr	r3, [r5, #24]
 80182e6:	b913      	cbnz	r3, 80182ee <__swsetup_r+0x16>
 80182e8:	4628      	mov	r0, r5
 80182ea:	f7ff f8c3 	bl	8017474 <__sinit>
 80182ee:	4b2e      	ldr	r3, [pc, #184]	; (80183a8 <__swsetup_r+0xd0>)
 80182f0:	429c      	cmp	r4, r3
 80182f2:	d10f      	bne.n	8018314 <__swsetup_r+0x3c>
 80182f4:	686c      	ldr	r4, [r5, #4]
 80182f6:	89a3      	ldrh	r3, [r4, #12]
 80182f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80182fc:	0719      	lsls	r1, r3, #28
 80182fe:	d42c      	bmi.n	801835a <__swsetup_r+0x82>
 8018300:	06dd      	lsls	r5, r3, #27
 8018302:	d411      	bmi.n	8018328 <__swsetup_r+0x50>
 8018304:	2309      	movs	r3, #9
 8018306:	6033      	str	r3, [r6, #0]
 8018308:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801830c:	81a3      	strh	r3, [r4, #12]
 801830e:	f04f 30ff 	mov.w	r0, #4294967295
 8018312:	e03e      	b.n	8018392 <__swsetup_r+0xba>
 8018314:	4b25      	ldr	r3, [pc, #148]	; (80183ac <__swsetup_r+0xd4>)
 8018316:	429c      	cmp	r4, r3
 8018318:	d101      	bne.n	801831e <__swsetup_r+0x46>
 801831a:	68ac      	ldr	r4, [r5, #8]
 801831c:	e7eb      	b.n	80182f6 <__swsetup_r+0x1e>
 801831e:	4b24      	ldr	r3, [pc, #144]	; (80183b0 <__swsetup_r+0xd8>)
 8018320:	429c      	cmp	r4, r3
 8018322:	bf08      	it	eq
 8018324:	68ec      	ldreq	r4, [r5, #12]
 8018326:	e7e6      	b.n	80182f6 <__swsetup_r+0x1e>
 8018328:	0758      	lsls	r0, r3, #29
 801832a:	d512      	bpl.n	8018352 <__swsetup_r+0x7a>
 801832c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801832e:	b141      	cbz	r1, 8018342 <__swsetup_r+0x6a>
 8018330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018334:	4299      	cmp	r1, r3
 8018336:	d002      	beq.n	801833e <__swsetup_r+0x66>
 8018338:	4630      	mov	r0, r6
 801833a:	f7ff f989 	bl	8017650 <_free_r>
 801833e:	2300      	movs	r3, #0
 8018340:	6363      	str	r3, [r4, #52]	; 0x34
 8018342:	89a3      	ldrh	r3, [r4, #12]
 8018344:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018348:	81a3      	strh	r3, [r4, #12]
 801834a:	2300      	movs	r3, #0
 801834c:	6063      	str	r3, [r4, #4]
 801834e:	6923      	ldr	r3, [r4, #16]
 8018350:	6023      	str	r3, [r4, #0]
 8018352:	89a3      	ldrh	r3, [r4, #12]
 8018354:	f043 0308 	orr.w	r3, r3, #8
 8018358:	81a3      	strh	r3, [r4, #12]
 801835a:	6923      	ldr	r3, [r4, #16]
 801835c:	b94b      	cbnz	r3, 8018372 <__swsetup_r+0x9a>
 801835e:	89a3      	ldrh	r3, [r4, #12]
 8018360:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018368:	d003      	beq.n	8018372 <__swsetup_r+0x9a>
 801836a:	4621      	mov	r1, r4
 801836c:	4630      	mov	r0, r6
 801836e:	f000 f84d 	bl	801840c <__smakebuf_r>
 8018372:	89a0      	ldrh	r0, [r4, #12]
 8018374:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018378:	f010 0301 	ands.w	r3, r0, #1
 801837c:	d00a      	beq.n	8018394 <__swsetup_r+0xbc>
 801837e:	2300      	movs	r3, #0
 8018380:	60a3      	str	r3, [r4, #8]
 8018382:	6963      	ldr	r3, [r4, #20]
 8018384:	425b      	negs	r3, r3
 8018386:	61a3      	str	r3, [r4, #24]
 8018388:	6923      	ldr	r3, [r4, #16]
 801838a:	b943      	cbnz	r3, 801839e <__swsetup_r+0xc6>
 801838c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018390:	d1ba      	bne.n	8018308 <__swsetup_r+0x30>
 8018392:	bd70      	pop	{r4, r5, r6, pc}
 8018394:	0781      	lsls	r1, r0, #30
 8018396:	bf58      	it	pl
 8018398:	6963      	ldrpl	r3, [r4, #20]
 801839a:	60a3      	str	r3, [r4, #8]
 801839c:	e7f4      	b.n	8018388 <__swsetup_r+0xb0>
 801839e:	2000      	movs	r0, #0
 80183a0:	e7f7      	b.n	8018392 <__swsetup_r+0xba>
 80183a2:	bf00      	nop
 80183a4:	20000020 	.word	0x20000020
 80183a8:	0801bcb0 	.word	0x0801bcb0
 80183ac:	0801bcd0 	.word	0x0801bcd0
 80183b0:	0801bc90 	.word	0x0801bc90

080183b4 <abort>:
 80183b4:	b508      	push	{r3, lr}
 80183b6:	2006      	movs	r0, #6
 80183b8:	f000 f890 	bl	80184dc <raise>
 80183bc:	2001      	movs	r0, #1
 80183be:	f7e9 fe1d 	bl	8001ffc <_exit>

080183c2 <__swhatbuf_r>:
 80183c2:	b570      	push	{r4, r5, r6, lr}
 80183c4:	460e      	mov	r6, r1
 80183c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183ca:	2900      	cmp	r1, #0
 80183cc:	b096      	sub	sp, #88	; 0x58
 80183ce:	4614      	mov	r4, r2
 80183d0:	461d      	mov	r5, r3
 80183d2:	da07      	bge.n	80183e4 <__swhatbuf_r+0x22>
 80183d4:	2300      	movs	r3, #0
 80183d6:	602b      	str	r3, [r5, #0]
 80183d8:	89b3      	ldrh	r3, [r6, #12]
 80183da:	061a      	lsls	r2, r3, #24
 80183dc:	d410      	bmi.n	8018400 <__swhatbuf_r+0x3e>
 80183de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80183e2:	e00e      	b.n	8018402 <__swhatbuf_r+0x40>
 80183e4:	466a      	mov	r2, sp
 80183e6:	f000 f895 	bl	8018514 <_fstat_r>
 80183ea:	2800      	cmp	r0, #0
 80183ec:	dbf2      	blt.n	80183d4 <__swhatbuf_r+0x12>
 80183ee:	9a01      	ldr	r2, [sp, #4]
 80183f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80183f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80183f8:	425a      	negs	r2, r3
 80183fa:	415a      	adcs	r2, r3
 80183fc:	602a      	str	r2, [r5, #0]
 80183fe:	e7ee      	b.n	80183de <__swhatbuf_r+0x1c>
 8018400:	2340      	movs	r3, #64	; 0x40
 8018402:	2000      	movs	r0, #0
 8018404:	6023      	str	r3, [r4, #0]
 8018406:	b016      	add	sp, #88	; 0x58
 8018408:	bd70      	pop	{r4, r5, r6, pc}
	...

0801840c <__smakebuf_r>:
 801840c:	898b      	ldrh	r3, [r1, #12]
 801840e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018410:	079d      	lsls	r5, r3, #30
 8018412:	4606      	mov	r6, r0
 8018414:	460c      	mov	r4, r1
 8018416:	d507      	bpl.n	8018428 <__smakebuf_r+0x1c>
 8018418:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801841c:	6023      	str	r3, [r4, #0]
 801841e:	6123      	str	r3, [r4, #16]
 8018420:	2301      	movs	r3, #1
 8018422:	6163      	str	r3, [r4, #20]
 8018424:	b002      	add	sp, #8
 8018426:	bd70      	pop	{r4, r5, r6, pc}
 8018428:	ab01      	add	r3, sp, #4
 801842a:	466a      	mov	r2, sp
 801842c:	f7ff ffc9 	bl	80183c2 <__swhatbuf_r>
 8018430:	9900      	ldr	r1, [sp, #0]
 8018432:	4605      	mov	r5, r0
 8018434:	4630      	mov	r0, r6
 8018436:	f7ff f95b 	bl	80176f0 <_malloc_r>
 801843a:	b948      	cbnz	r0, 8018450 <__smakebuf_r+0x44>
 801843c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018440:	059a      	lsls	r2, r3, #22
 8018442:	d4ef      	bmi.n	8018424 <__smakebuf_r+0x18>
 8018444:	f023 0303 	bic.w	r3, r3, #3
 8018448:	f043 0302 	orr.w	r3, r3, #2
 801844c:	81a3      	strh	r3, [r4, #12]
 801844e:	e7e3      	b.n	8018418 <__smakebuf_r+0xc>
 8018450:	4b0d      	ldr	r3, [pc, #52]	; (8018488 <__smakebuf_r+0x7c>)
 8018452:	62b3      	str	r3, [r6, #40]	; 0x28
 8018454:	89a3      	ldrh	r3, [r4, #12]
 8018456:	6020      	str	r0, [r4, #0]
 8018458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801845c:	81a3      	strh	r3, [r4, #12]
 801845e:	9b00      	ldr	r3, [sp, #0]
 8018460:	6163      	str	r3, [r4, #20]
 8018462:	9b01      	ldr	r3, [sp, #4]
 8018464:	6120      	str	r0, [r4, #16]
 8018466:	b15b      	cbz	r3, 8018480 <__smakebuf_r+0x74>
 8018468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801846c:	4630      	mov	r0, r6
 801846e:	f000 f863 	bl	8018538 <_isatty_r>
 8018472:	b128      	cbz	r0, 8018480 <__smakebuf_r+0x74>
 8018474:	89a3      	ldrh	r3, [r4, #12]
 8018476:	f023 0303 	bic.w	r3, r3, #3
 801847a:	f043 0301 	orr.w	r3, r3, #1
 801847e:	81a3      	strh	r3, [r4, #12]
 8018480:	89a0      	ldrh	r0, [r4, #12]
 8018482:	4305      	orrs	r5, r0
 8018484:	81a5      	strh	r5, [r4, #12]
 8018486:	e7cd      	b.n	8018424 <__smakebuf_r+0x18>
 8018488:	0801740d 	.word	0x0801740d

0801848c <_raise_r>:
 801848c:	291f      	cmp	r1, #31
 801848e:	b538      	push	{r3, r4, r5, lr}
 8018490:	4604      	mov	r4, r0
 8018492:	460d      	mov	r5, r1
 8018494:	d904      	bls.n	80184a0 <_raise_r+0x14>
 8018496:	2316      	movs	r3, #22
 8018498:	6003      	str	r3, [r0, #0]
 801849a:	f04f 30ff 	mov.w	r0, #4294967295
 801849e:	bd38      	pop	{r3, r4, r5, pc}
 80184a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80184a2:	b112      	cbz	r2, 80184aa <_raise_r+0x1e>
 80184a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80184a8:	b94b      	cbnz	r3, 80184be <_raise_r+0x32>
 80184aa:	4620      	mov	r0, r4
 80184ac:	f000 f830 	bl	8018510 <_getpid_r>
 80184b0:	462a      	mov	r2, r5
 80184b2:	4601      	mov	r1, r0
 80184b4:	4620      	mov	r0, r4
 80184b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80184ba:	f000 b817 	b.w	80184ec <_kill_r>
 80184be:	2b01      	cmp	r3, #1
 80184c0:	d00a      	beq.n	80184d8 <_raise_r+0x4c>
 80184c2:	1c59      	adds	r1, r3, #1
 80184c4:	d103      	bne.n	80184ce <_raise_r+0x42>
 80184c6:	2316      	movs	r3, #22
 80184c8:	6003      	str	r3, [r0, #0]
 80184ca:	2001      	movs	r0, #1
 80184cc:	e7e7      	b.n	801849e <_raise_r+0x12>
 80184ce:	2400      	movs	r4, #0
 80184d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80184d4:	4628      	mov	r0, r5
 80184d6:	4798      	blx	r3
 80184d8:	2000      	movs	r0, #0
 80184da:	e7e0      	b.n	801849e <_raise_r+0x12>

080184dc <raise>:
 80184dc:	4b02      	ldr	r3, [pc, #8]	; (80184e8 <raise+0xc>)
 80184de:	4601      	mov	r1, r0
 80184e0:	6818      	ldr	r0, [r3, #0]
 80184e2:	f7ff bfd3 	b.w	801848c <_raise_r>
 80184e6:	bf00      	nop
 80184e8:	20000020 	.word	0x20000020

080184ec <_kill_r>:
 80184ec:	b538      	push	{r3, r4, r5, lr}
 80184ee:	4d07      	ldr	r5, [pc, #28]	; (801850c <_kill_r+0x20>)
 80184f0:	2300      	movs	r3, #0
 80184f2:	4604      	mov	r4, r0
 80184f4:	4608      	mov	r0, r1
 80184f6:	4611      	mov	r1, r2
 80184f8:	602b      	str	r3, [r5, #0]
 80184fa:	f7e9 fd6d 	bl	8001fd8 <_kill>
 80184fe:	1c43      	adds	r3, r0, #1
 8018500:	d102      	bne.n	8018508 <_kill_r+0x1c>
 8018502:	682b      	ldr	r3, [r5, #0]
 8018504:	b103      	cbz	r3, 8018508 <_kill_r+0x1c>
 8018506:	6023      	str	r3, [r4, #0]
 8018508:	bd38      	pop	{r3, r4, r5, pc}
 801850a:	bf00      	nop
 801850c:	2000d6ac 	.word	0x2000d6ac

08018510 <_getpid_r>:
 8018510:	f7e9 bd5a 	b.w	8001fc8 <_getpid>

08018514 <_fstat_r>:
 8018514:	b538      	push	{r3, r4, r5, lr}
 8018516:	4d07      	ldr	r5, [pc, #28]	; (8018534 <_fstat_r+0x20>)
 8018518:	2300      	movs	r3, #0
 801851a:	4604      	mov	r4, r0
 801851c:	4608      	mov	r0, r1
 801851e:	4611      	mov	r1, r2
 8018520:	602b      	str	r3, [r5, #0]
 8018522:	f7e9 fdba 	bl	800209a <_fstat>
 8018526:	1c43      	adds	r3, r0, #1
 8018528:	d102      	bne.n	8018530 <_fstat_r+0x1c>
 801852a:	682b      	ldr	r3, [r5, #0]
 801852c:	b103      	cbz	r3, 8018530 <_fstat_r+0x1c>
 801852e:	6023      	str	r3, [r4, #0]
 8018530:	bd38      	pop	{r3, r4, r5, pc}
 8018532:	bf00      	nop
 8018534:	2000d6ac 	.word	0x2000d6ac

08018538 <_isatty_r>:
 8018538:	b538      	push	{r3, r4, r5, lr}
 801853a:	4d06      	ldr	r5, [pc, #24]	; (8018554 <_isatty_r+0x1c>)
 801853c:	2300      	movs	r3, #0
 801853e:	4604      	mov	r4, r0
 8018540:	4608      	mov	r0, r1
 8018542:	602b      	str	r3, [r5, #0]
 8018544:	f7e9 fdb9 	bl	80020ba <_isatty>
 8018548:	1c43      	adds	r3, r0, #1
 801854a:	d102      	bne.n	8018552 <_isatty_r+0x1a>
 801854c:	682b      	ldr	r3, [r5, #0]
 801854e:	b103      	cbz	r3, 8018552 <_isatty_r+0x1a>
 8018550:	6023      	str	r3, [r4, #0]
 8018552:	bd38      	pop	{r3, r4, r5, pc}
 8018554:	2000d6ac 	.word	0x2000d6ac

08018558 <_init>:
 8018558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801855a:	bf00      	nop
 801855c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801855e:	bc08      	pop	{r3}
 8018560:	469e      	mov	lr, r3
 8018562:	4770      	bx	lr

08018564 <_fini>:
 8018564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018566:	bf00      	nop
 8018568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801856a:	bc08      	pop	{r3}
 801856c:	469e      	mov	lr, r3
 801856e:	4770      	bx	lr
