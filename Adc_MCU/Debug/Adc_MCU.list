
Adc_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003da4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08003e64  08003e64  00013e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f5c  08003f5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f5c  08003f5c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f5c  08003f5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f5c  08003f5c  00013f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f60  08003f60  00013f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  2000000c  08003f70  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08003f70  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6c6  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002274  00000000  00000000  0002f6fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00031970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  00032698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011202  00000000  00000000  000332d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001089c  00000000  00000000  000444da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066988  00000000  00000000  00054d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bb6fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f68  00000000  00000000  000bb750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003e4c 	.word	0x08003e4c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003e4c 	.word	0x08003e4c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fdiv>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	464f      	mov	r7, r9
 8000224:	4646      	mov	r6, r8
 8000226:	46d6      	mov	lr, sl
 8000228:	0245      	lsls	r5, r0, #9
 800022a:	b5c0      	push	{r6, r7, lr}
 800022c:	0047      	lsls	r7, r0, #1
 800022e:	1c0c      	adds	r4, r1, #0
 8000230:	0a6d      	lsrs	r5, r5, #9
 8000232:	0e3f      	lsrs	r7, r7, #24
 8000234:	0fc6      	lsrs	r6, r0, #31
 8000236:	2f00      	cmp	r7, #0
 8000238:	d100      	bne.n	800023c <__aeabi_fdiv+0x1c>
 800023a:	e070      	b.n	800031e <__aeabi_fdiv+0xfe>
 800023c:	2fff      	cmp	r7, #255	; 0xff
 800023e:	d100      	bne.n	8000242 <__aeabi_fdiv+0x22>
 8000240:	e075      	b.n	800032e <__aeabi_fdiv+0x10e>
 8000242:	00eb      	lsls	r3, r5, #3
 8000244:	2580      	movs	r5, #128	; 0x80
 8000246:	04ed      	lsls	r5, r5, #19
 8000248:	431d      	orrs	r5, r3
 800024a:	2300      	movs	r3, #0
 800024c:	4699      	mov	r9, r3
 800024e:	469a      	mov	sl, r3
 8000250:	3f7f      	subs	r7, #127	; 0x7f
 8000252:	0260      	lsls	r0, r4, #9
 8000254:	0a43      	lsrs	r3, r0, #9
 8000256:	4698      	mov	r8, r3
 8000258:	0063      	lsls	r3, r4, #1
 800025a:	0e1b      	lsrs	r3, r3, #24
 800025c:	0fe4      	lsrs	r4, r4, #31
 800025e:	2b00      	cmp	r3, #0
 8000260:	d04e      	beq.n	8000300 <__aeabi_fdiv+0xe0>
 8000262:	2bff      	cmp	r3, #255	; 0xff
 8000264:	d046      	beq.n	80002f4 <__aeabi_fdiv+0xd4>
 8000266:	4642      	mov	r2, r8
 8000268:	00d0      	lsls	r0, r2, #3
 800026a:	2280      	movs	r2, #128	; 0x80
 800026c:	04d2      	lsls	r2, r2, #19
 800026e:	4302      	orrs	r2, r0
 8000270:	4690      	mov	r8, r2
 8000272:	2200      	movs	r2, #0
 8000274:	3b7f      	subs	r3, #127	; 0x7f
 8000276:	0031      	movs	r1, r6
 8000278:	1aff      	subs	r7, r7, r3
 800027a:	464b      	mov	r3, r9
 800027c:	4061      	eors	r1, r4
 800027e:	b2c9      	uxtb	r1, r1
 8000280:	4313      	orrs	r3, r2
 8000282:	2b0f      	cmp	r3, #15
 8000284:	d900      	bls.n	8000288 <__aeabi_fdiv+0x68>
 8000286:	e0b5      	b.n	80003f4 <__aeabi_fdiv+0x1d4>
 8000288:	486e      	ldr	r0, [pc, #440]	; (8000444 <__aeabi_fdiv+0x224>)
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	58c3      	ldr	r3, [r0, r3]
 800028e:	469f      	mov	pc, r3
 8000290:	2300      	movs	r3, #0
 8000292:	4698      	mov	r8, r3
 8000294:	0026      	movs	r6, r4
 8000296:	4645      	mov	r5, r8
 8000298:	4692      	mov	sl, r2
 800029a:	4653      	mov	r3, sl
 800029c:	2b02      	cmp	r3, #2
 800029e:	d100      	bne.n	80002a2 <__aeabi_fdiv+0x82>
 80002a0:	e089      	b.n	80003b6 <__aeabi_fdiv+0x196>
 80002a2:	2b03      	cmp	r3, #3
 80002a4:	d100      	bne.n	80002a8 <__aeabi_fdiv+0x88>
 80002a6:	e09e      	b.n	80003e6 <__aeabi_fdiv+0x1c6>
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d018      	beq.n	80002de <__aeabi_fdiv+0xbe>
 80002ac:	003b      	movs	r3, r7
 80002ae:	337f      	adds	r3, #127	; 0x7f
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	dd69      	ble.n	8000388 <__aeabi_fdiv+0x168>
 80002b4:	076a      	lsls	r2, r5, #29
 80002b6:	d004      	beq.n	80002c2 <__aeabi_fdiv+0xa2>
 80002b8:	220f      	movs	r2, #15
 80002ba:	402a      	ands	r2, r5
 80002bc:	2a04      	cmp	r2, #4
 80002be:	d000      	beq.n	80002c2 <__aeabi_fdiv+0xa2>
 80002c0:	3504      	adds	r5, #4
 80002c2:	012a      	lsls	r2, r5, #4
 80002c4:	d503      	bpl.n	80002ce <__aeabi_fdiv+0xae>
 80002c6:	4b60      	ldr	r3, [pc, #384]	; (8000448 <__aeabi_fdiv+0x228>)
 80002c8:	401d      	ands	r5, r3
 80002ca:	003b      	movs	r3, r7
 80002cc:	3380      	adds	r3, #128	; 0x80
 80002ce:	2bfe      	cmp	r3, #254	; 0xfe
 80002d0:	dd00      	ble.n	80002d4 <__aeabi_fdiv+0xb4>
 80002d2:	e070      	b.n	80003b6 <__aeabi_fdiv+0x196>
 80002d4:	01ad      	lsls	r5, r5, #6
 80002d6:	0a6d      	lsrs	r5, r5, #9
 80002d8:	b2d8      	uxtb	r0, r3
 80002da:	e002      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80002dc:	000e      	movs	r6, r1
 80002de:	2000      	movs	r0, #0
 80002e0:	2500      	movs	r5, #0
 80002e2:	05c0      	lsls	r0, r0, #23
 80002e4:	4328      	orrs	r0, r5
 80002e6:	07f6      	lsls	r6, r6, #31
 80002e8:	4330      	orrs	r0, r6
 80002ea:	bce0      	pop	{r5, r6, r7}
 80002ec:	46ba      	mov	sl, r7
 80002ee:	46b1      	mov	r9, r6
 80002f0:	46a8      	mov	r8, r5
 80002f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f4:	4643      	mov	r3, r8
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d13f      	bne.n	800037a <__aeabi_fdiv+0x15a>
 80002fa:	2202      	movs	r2, #2
 80002fc:	3fff      	subs	r7, #255	; 0xff
 80002fe:	e003      	b.n	8000308 <__aeabi_fdiv+0xe8>
 8000300:	4643      	mov	r3, r8
 8000302:	2b00      	cmp	r3, #0
 8000304:	d12d      	bne.n	8000362 <__aeabi_fdiv+0x142>
 8000306:	2201      	movs	r2, #1
 8000308:	0031      	movs	r1, r6
 800030a:	464b      	mov	r3, r9
 800030c:	4061      	eors	r1, r4
 800030e:	b2c9      	uxtb	r1, r1
 8000310:	4313      	orrs	r3, r2
 8000312:	2b0f      	cmp	r3, #15
 8000314:	d834      	bhi.n	8000380 <__aeabi_fdiv+0x160>
 8000316:	484d      	ldr	r0, [pc, #308]	; (800044c <__aeabi_fdiv+0x22c>)
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	58c3      	ldr	r3, [r0, r3]
 800031c:	469f      	mov	pc, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d113      	bne.n	800034a <__aeabi_fdiv+0x12a>
 8000322:	2304      	movs	r3, #4
 8000324:	4699      	mov	r9, r3
 8000326:	3b03      	subs	r3, #3
 8000328:	2700      	movs	r7, #0
 800032a:	469a      	mov	sl, r3
 800032c:	e791      	b.n	8000252 <__aeabi_fdiv+0x32>
 800032e:	2d00      	cmp	r5, #0
 8000330:	d105      	bne.n	800033e <__aeabi_fdiv+0x11e>
 8000332:	2308      	movs	r3, #8
 8000334:	4699      	mov	r9, r3
 8000336:	3b06      	subs	r3, #6
 8000338:	27ff      	movs	r7, #255	; 0xff
 800033a:	469a      	mov	sl, r3
 800033c:	e789      	b.n	8000252 <__aeabi_fdiv+0x32>
 800033e:	230c      	movs	r3, #12
 8000340:	4699      	mov	r9, r3
 8000342:	3b09      	subs	r3, #9
 8000344:	27ff      	movs	r7, #255	; 0xff
 8000346:	469a      	mov	sl, r3
 8000348:	e783      	b.n	8000252 <__aeabi_fdiv+0x32>
 800034a:	0028      	movs	r0, r5
 800034c:	f000 f9e8 	bl	8000720 <__clzsi2>
 8000350:	2776      	movs	r7, #118	; 0x76
 8000352:	1f43      	subs	r3, r0, #5
 8000354:	409d      	lsls	r5, r3
 8000356:	2300      	movs	r3, #0
 8000358:	427f      	negs	r7, r7
 800035a:	4699      	mov	r9, r3
 800035c:	469a      	mov	sl, r3
 800035e:	1a3f      	subs	r7, r7, r0
 8000360:	e777      	b.n	8000252 <__aeabi_fdiv+0x32>
 8000362:	4640      	mov	r0, r8
 8000364:	f000 f9dc 	bl	8000720 <__clzsi2>
 8000368:	4642      	mov	r2, r8
 800036a:	1f43      	subs	r3, r0, #5
 800036c:	409a      	lsls	r2, r3
 800036e:	2376      	movs	r3, #118	; 0x76
 8000370:	425b      	negs	r3, r3
 8000372:	4690      	mov	r8, r2
 8000374:	1a1b      	subs	r3, r3, r0
 8000376:	2200      	movs	r2, #0
 8000378:	e77d      	b.n	8000276 <__aeabi_fdiv+0x56>
 800037a:	23ff      	movs	r3, #255	; 0xff
 800037c:	2203      	movs	r2, #3
 800037e:	e77a      	b.n	8000276 <__aeabi_fdiv+0x56>
 8000380:	000e      	movs	r6, r1
 8000382:	20ff      	movs	r0, #255	; 0xff
 8000384:	2500      	movs	r5, #0
 8000386:	e7ac      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 8000388:	2001      	movs	r0, #1
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	281b      	cmp	r0, #27
 800038e:	dca6      	bgt.n	80002de <__aeabi_fdiv+0xbe>
 8000390:	379e      	adds	r7, #158	; 0x9e
 8000392:	002a      	movs	r2, r5
 8000394:	40bd      	lsls	r5, r7
 8000396:	40c2      	lsrs	r2, r0
 8000398:	1e6b      	subs	r3, r5, #1
 800039a:	419d      	sbcs	r5, r3
 800039c:	4315      	orrs	r5, r2
 800039e:	076b      	lsls	r3, r5, #29
 80003a0:	d004      	beq.n	80003ac <__aeabi_fdiv+0x18c>
 80003a2:	230f      	movs	r3, #15
 80003a4:	402b      	ands	r3, r5
 80003a6:	2b04      	cmp	r3, #4
 80003a8:	d000      	beq.n	80003ac <__aeabi_fdiv+0x18c>
 80003aa:	3504      	adds	r5, #4
 80003ac:	016b      	lsls	r3, r5, #5
 80003ae:	d544      	bpl.n	800043a <__aeabi_fdiv+0x21a>
 80003b0:	2001      	movs	r0, #1
 80003b2:	2500      	movs	r5, #0
 80003b4:	e795      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80003b6:	20ff      	movs	r0, #255	; 0xff
 80003b8:	2500      	movs	r5, #0
 80003ba:	e792      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80003bc:	2580      	movs	r5, #128	; 0x80
 80003be:	2600      	movs	r6, #0
 80003c0:	20ff      	movs	r0, #255	; 0xff
 80003c2:	03ed      	lsls	r5, r5, #15
 80003c4:	e78d      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80003c6:	2300      	movs	r3, #0
 80003c8:	4698      	mov	r8, r3
 80003ca:	2080      	movs	r0, #128	; 0x80
 80003cc:	03c0      	lsls	r0, r0, #15
 80003ce:	4205      	tst	r5, r0
 80003d0:	d009      	beq.n	80003e6 <__aeabi_fdiv+0x1c6>
 80003d2:	4643      	mov	r3, r8
 80003d4:	4203      	tst	r3, r0
 80003d6:	d106      	bne.n	80003e6 <__aeabi_fdiv+0x1c6>
 80003d8:	4645      	mov	r5, r8
 80003da:	4305      	orrs	r5, r0
 80003dc:	026d      	lsls	r5, r5, #9
 80003de:	0026      	movs	r6, r4
 80003e0:	20ff      	movs	r0, #255	; 0xff
 80003e2:	0a6d      	lsrs	r5, r5, #9
 80003e4:	e77d      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80003e6:	2080      	movs	r0, #128	; 0x80
 80003e8:	03c0      	lsls	r0, r0, #15
 80003ea:	4305      	orrs	r5, r0
 80003ec:	026d      	lsls	r5, r5, #9
 80003ee:	20ff      	movs	r0, #255	; 0xff
 80003f0:	0a6d      	lsrs	r5, r5, #9
 80003f2:	e776      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80003f4:	4642      	mov	r2, r8
 80003f6:	016b      	lsls	r3, r5, #5
 80003f8:	0150      	lsls	r0, r2, #5
 80003fa:	4283      	cmp	r3, r0
 80003fc:	d219      	bcs.n	8000432 <__aeabi_fdiv+0x212>
 80003fe:	221b      	movs	r2, #27
 8000400:	2500      	movs	r5, #0
 8000402:	3f01      	subs	r7, #1
 8000404:	2601      	movs	r6, #1
 8000406:	001c      	movs	r4, r3
 8000408:	006d      	lsls	r5, r5, #1
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	2c00      	cmp	r4, #0
 800040e:	db01      	blt.n	8000414 <__aeabi_fdiv+0x1f4>
 8000410:	4298      	cmp	r0, r3
 8000412:	d801      	bhi.n	8000418 <__aeabi_fdiv+0x1f8>
 8000414:	1a1b      	subs	r3, r3, r0
 8000416:	4335      	orrs	r5, r6
 8000418:	3a01      	subs	r2, #1
 800041a:	2a00      	cmp	r2, #0
 800041c:	d1f3      	bne.n	8000406 <__aeabi_fdiv+0x1e6>
 800041e:	1e5a      	subs	r2, r3, #1
 8000420:	4193      	sbcs	r3, r2
 8000422:	431d      	orrs	r5, r3
 8000424:	003b      	movs	r3, r7
 8000426:	337f      	adds	r3, #127	; 0x7f
 8000428:	000e      	movs	r6, r1
 800042a:	2b00      	cmp	r3, #0
 800042c:	dd00      	ble.n	8000430 <__aeabi_fdiv+0x210>
 800042e:	e741      	b.n	80002b4 <__aeabi_fdiv+0x94>
 8000430:	e7aa      	b.n	8000388 <__aeabi_fdiv+0x168>
 8000432:	221a      	movs	r2, #26
 8000434:	2501      	movs	r5, #1
 8000436:	1a1b      	subs	r3, r3, r0
 8000438:	e7e4      	b.n	8000404 <__aeabi_fdiv+0x1e4>
 800043a:	01ad      	lsls	r5, r5, #6
 800043c:	2000      	movs	r0, #0
 800043e:	0a6d      	lsrs	r5, r5, #9
 8000440:	e74f      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	08003e84 	.word	0x08003e84
 8000448:	f7ffffff 	.word	0xf7ffffff
 800044c:	08003ec4 	.word	0x08003ec4

08000450 <__aeabi_fmul>:
 8000450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000452:	464f      	mov	r7, r9
 8000454:	4646      	mov	r6, r8
 8000456:	46d6      	mov	lr, sl
 8000458:	0244      	lsls	r4, r0, #9
 800045a:	0045      	lsls	r5, r0, #1
 800045c:	b5c0      	push	{r6, r7, lr}
 800045e:	0a64      	lsrs	r4, r4, #9
 8000460:	1c0f      	adds	r7, r1, #0
 8000462:	0e2d      	lsrs	r5, r5, #24
 8000464:	0fc6      	lsrs	r6, r0, #31
 8000466:	2d00      	cmp	r5, #0
 8000468:	d100      	bne.n	800046c <__aeabi_fmul+0x1c>
 800046a:	e08d      	b.n	8000588 <__aeabi_fmul+0x138>
 800046c:	2dff      	cmp	r5, #255	; 0xff
 800046e:	d100      	bne.n	8000472 <__aeabi_fmul+0x22>
 8000470:	e092      	b.n	8000598 <__aeabi_fmul+0x148>
 8000472:	2300      	movs	r3, #0
 8000474:	2080      	movs	r0, #128	; 0x80
 8000476:	4699      	mov	r9, r3
 8000478:	469a      	mov	sl, r3
 800047a:	00e4      	lsls	r4, r4, #3
 800047c:	04c0      	lsls	r0, r0, #19
 800047e:	4304      	orrs	r4, r0
 8000480:	3d7f      	subs	r5, #127	; 0x7f
 8000482:	0278      	lsls	r0, r7, #9
 8000484:	0a43      	lsrs	r3, r0, #9
 8000486:	4698      	mov	r8, r3
 8000488:	007b      	lsls	r3, r7, #1
 800048a:	0e1b      	lsrs	r3, r3, #24
 800048c:	0fff      	lsrs	r7, r7, #31
 800048e:	2b00      	cmp	r3, #0
 8000490:	d100      	bne.n	8000494 <__aeabi_fmul+0x44>
 8000492:	e070      	b.n	8000576 <__aeabi_fmul+0x126>
 8000494:	2bff      	cmp	r3, #255	; 0xff
 8000496:	d100      	bne.n	800049a <__aeabi_fmul+0x4a>
 8000498:	e086      	b.n	80005a8 <__aeabi_fmul+0x158>
 800049a:	4642      	mov	r2, r8
 800049c:	00d0      	lsls	r0, r2, #3
 800049e:	2280      	movs	r2, #128	; 0x80
 80004a0:	3b7f      	subs	r3, #127	; 0x7f
 80004a2:	18ed      	adds	r5, r5, r3
 80004a4:	2300      	movs	r3, #0
 80004a6:	04d2      	lsls	r2, r2, #19
 80004a8:	4302      	orrs	r2, r0
 80004aa:	4690      	mov	r8, r2
 80004ac:	469c      	mov	ip, r3
 80004ae:	0031      	movs	r1, r6
 80004b0:	464b      	mov	r3, r9
 80004b2:	4079      	eors	r1, r7
 80004b4:	1c68      	adds	r0, r5, #1
 80004b6:	2b0f      	cmp	r3, #15
 80004b8:	d81c      	bhi.n	80004f4 <__aeabi_fmul+0xa4>
 80004ba:	4a76      	ldr	r2, [pc, #472]	; (8000694 <__aeabi_fmul+0x244>)
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	58d3      	ldr	r3, [r2, r3]
 80004c0:	469f      	mov	pc, r3
 80004c2:	0039      	movs	r1, r7
 80004c4:	4644      	mov	r4, r8
 80004c6:	46e2      	mov	sl, ip
 80004c8:	4653      	mov	r3, sl
 80004ca:	2b02      	cmp	r3, #2
 80004cc:	d00f      	beq.n	80004ee <__aeabi_fmul+0x9e>
 80004ce:	2b03      	cmp	r3, #3
 80004d0:	d100      	bne.n	80004d4 <__aeabi_fmul+0x84>
 80004d2:	e0d7      	b.n	8000684 <__aeabi_fmul+0x234>
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d137      	bne.n	8000548 <__aeabi_fmul+0xf8>
 80004d8:	2000      	movs	r0, #0
 80004da:	2400      	movs	r4, #0
 80004dc:	05c0      	lsls	r0, r0, #23
 80004de:	4320      	orrs	r0, r4
 80004e0:	07c9      	lsls	r1, r1, #31
 80004e2:	4308      	orrs	r0, r1
 80004e4:	bce0      	pop	{r5, r6, r7}
 80004e6:	46ba      	mov	sl, r7
 80004e8:	46b1      	mov	r9, r6
 80004ea:	46a8      	mov	r8, r5
 80004ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ee:	20ff      	movs	r0, #255	; 0xff
 80004f0:	2400      	movs	r4, #0
 80004f2:	e7f3      	b.n	80004dc <__aeabi_fmul+0x8c>
 80004f4:	0c26      	lsrs	r6, r4, #16
 80004f6:	0424      	lsls	r4, r4, #16
 80004f8:	0c22      	lsrs	r2, r4, #16
 80004fa:	4644      	mov	r4, r8
 80004fc:	0424      	lsls	r4, r4, #16
 80004fe:	0c24      	lsrs	r4, r4, #16
 8000500:	4643      	mov	r3, r8
 8000502:	0027      	movs	r7, r4
 8000504:	0c1b      	lsrs	r3, r3, #16
 8000506:	4357      	muls	r7, r2
 8000508:	4374      	muls	r4, r6
 800050a:	435a      	muls	r2, r3
 800050c:	435e      	muls	r6, r3
 800050e:	1912      	adds	r2, r2, r4
 8000510:	0c3b      	lsrs	r3, r7, #16
 8000512:	189b      	adds	r3, r3, r2
 8000514:	429c      	cmp	r4, r3
 8000516:	d903      	bls.n	8000520 <__aeabi_fmul+0xd0>
 8000518:	2280      	movs	r2, #128	; 0x80
 800051a:	0252      	lsls	r2, r2, #9
 800051c:	4694      	mov	ip, r2
 800051e:	4466      	add	r6, ip
 8000520:	043f      	lsls	r7, r7, #16
 8000522:	041a      	lsls	r2, r3, #16
 8000524:	0c3f      	lsrs	r7, r7, #16
 8000526:	19d2      	adds	r2, r2, r7
 8000528:	0194      	lsls	r4, r2, #6
 800052a:	1e67      	subs	r7, r4, #1
 800052c:	41bc      	sbcs	r4, r7
 800052e:	0c1b      	lsrs	r3, r3, #16
 8000530:	0e92      	lsrs	r2, r2, #26
 8000532:	199b      	adds	r3, r3, r6
 8000534:	4314      	orrs	r4, r2
 8000536:	019b      	lsls	r3, r3, #6
 8000538:	431c      	orrs	r4, r3
 800053a:	011b      	lsls	r3, r3, #4
 800053c:	d400      	bmi.n	8000540 <__aeabi_fmul+0xf0>
 800053e:	e09b      	b.n	8000678 <__aeabi_fmul+0x228>
 8000540:	2301      	movs	r3, #1
 8000542:	0862      	lsrs	r2, r4, #1
 8000544:	401c      	ands	r4, r3
 8000546:	4314      	orrs	r4, r2
 8000548:	0002      	movs	r2, r0
 800054a:	327f      	adds	r2, #127	; 0x7f
 800054c:	2a00      	cmp	r2, #0
 800054e:	dd64      	ble.n	800061a <__aeabi_fmul+0x1ca>
 8000550:	0763      	lsls	r3, r4, #29
 8000552:	d004      	beq.n	800055e <__aeabi_fmul+0x10e>
 8000554:	230f      	movs	r3, #15
 8000556:	4023      	ands	r3, r4
 8000558:	2b04      	cmp	r3, #4
 800055a:	d000      	beq.n	800055e <__aeabi_fmul+0x10e>
 800055c:	3404      	adds	r4, #4
 800055e:	0123      	lsls	r3, r4, #4
 8000560:	d503      	bpl.n	800056a <__aeabi_fmul+0x11a>
 8000562:	0002      	movs	r2, r0
 8000564:	4b4c      	ldr	r3, [pc, #304]	; (8000698 <__aeabi_fmul+0x248>)
 8000566:	3280      	adds	r2, #128	; 0x80
 8000568:	401c      	ands	r4, r3
 800056a:	2afe      	cmp	r2, #254	; 0xfe
 800056c:	dcbf      	bgt.n	80004ee <__aeabi_fmul+0x9e>
 800056e:	01a4      	lsls	r4, r4, #6
 8000570:	0a64      	lsrs	r4, r4, #9
 8000572:	b2d0      	uxtb	r0, r2
 8000574:	e7b2      	b.n	80004dc <__aeabi_fmul+0x8c>
 8000576:	4643      	mov	r3, r8
 8000578:	2b00      	cmp	r3, #0
 800057a:	d13d      	bne.n	80005f8 <__aeabi_fmul+0x1a8>
 800057c:	464a      	mov	r2, r9
 800057e:	3301      	adds	r3, #1
 8000580:	431a      	orrs	r2, r3
 8000582:	4691      	mov	r9, r2
 8000584:	469c      	mov	ip, r3
 8000586:	e792      	b.n	80004ae <__aeabi_fmul+0x5e>
 8000588:	2c00      	cmp	r4, #0
 800058a:	d129      	bne.n	80005e0 <__aeabi_fmul+0x190>
 800058c:	2304      	movs	r3, #4
 800058e:	4699      	mov	r9, r3
 8000590:	3b03      	subs	r3, #3
 8000592:	2500      	movs	r5, #0
 8000594:	469a      	mov	sl, r3
 8000596:	e774      	b.n	8000482 <__aeabi_fmul+0x32>
 8000598:	2c00      	cmp	r4, #0
 800059a:	d11b      	bne.n	80005d4 <__aeabi_fmul+0x184>
 800059c:	2308      	movs	r3, #8
 800059e:	4699      	mov	r9, r3
 80005a0:	3b06      	subs	r3, #6
 80005a2:	25ff      	movs	r5, #255	; 0xff
 80005a4:	469a      	mov	sl, r3
 80005a6:	e76c      	b.n	8000482 <__aeabi_fmul+0x32>
 80005a8:	4643      	mov	r3, r8
 80005aa:	35ff      	adds	r5, #255	; 0xff
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d10b      	bne.n	80005c8 <__aeabi_fmul+0x178>
 80005b0:	2302      	movs	r3, #2
 80005b2:	464a      	mov	r2, r9
 80005b4:	431a      	orrs	r2, r3
 80005b6:	4691      	mov	r9, r2
 80005b8:	469c      	mov	ip, r3
 80005ba:	e778      	b.n	80004ae <__aeabi_fmul+0x5e>
 80005bc:	4653      	mov	r3, sl
 80005be:	0031      	movs	r1, r6
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	d000      	beq.n	80005c6 <__aeabi_fmul+0x176>
 80005c4:	e783      	b.n	80004ce <__aeabi_fmul+0x7e>
 80005c6:	e792      	b.n	80004ee <__aeabi_fmul+0x9e>
 80005c8:	2303      	movs	r3, #3
 80005ca:	464a      	mov	r2, r9
 80005cc:	431a      	orrs	r2, r3
 80005ce:	4691      	mov	r9, r2
 80005d0:	469c      	mov	ip, r3
 80005d2:	e76c      	b.n	80004ae <__aeabi_fmul+0x5e>
 80005d4:	230c      	movs	r3, #12
 80005d6:	4699      	mov	r9, r3
 80005d8:	3b09      	subs	r3, #9
 80005da:	25ff      	movs	r5, #255	; 0xff
 80005dc:	469a      	mov	sl, r3
 80005de:	e750      	b.n	8000482 <__aeabi_fmul+0x32>
 80005e0:	0020      	movs	r0, r4
 80005e2:	f000 f89d 	bl	8000720 <__clzsi2>
 80005e6:	2576      	movs	r5, #118	; 0x76
 80005e8:	1f43      	subs	r3, r0, #5
 80005ea:	409c      	lsls	r4, r3
 80005ec:	2300      	movs	r3, #0
 80005ee:	426d      	negs	r5, r5
 80005f0:	4699      	mov	r9, r3
 80005f2:	469a      	mov	sl, r3
 80005f4:	1a2d      	subs	r5, r5, r0
 80005f6:	e744      	b.n	8000482 <__aeabi_fmul+0x32>
 80005f8:	4640      	mov	r0, r8
 80005fa:	f000 f891 	bl	8000720 <__clzsi2>
 80005fe:	4642      	mov	r2, r8
 8000600:	1f43      	subs	r3, r0, #5
 8000602:	409a      	lsls	r2, r3
 8000604:	2300      	movs	r3, #0
 8000606:	1a2d      	subs	r5, r5, r0
 8000608:	4690      	mov	r8, r2
 800060a:	469c      	mov	ip, r3
 800060c:	3d76      	subs	r5, #118	; 0x76
 800060e:	e74e      	b.n	80004ae <__aeabi_fmul+0x5e>
 8000610:	2480      	movs	r4, #128	; 0x80
 8000612:	2100      	movs	r1, #0
 8000614:	20ff      	movs	r0, #255	; 0xff
 8000616:	03e4      	lsls	r4, r4, #15
 8000618:	e760      	b.n	80004dc <__aeabi_fmul+0x8c>
 800061a:	2301      	movs	r3, #1
 800061c:	1a9b      	subs	r3, r3, r2
 800061e:	2b1b      	cmp	r3, #27
 8000620:	dd00      	ble.n	8000624 <__aeabi_fmul+0x1d4>
 8000622:	e759      	b.n	80004d8 <__aeabi_fmul+0x88>
 8000624:	0022      	movs	r2, r4
 8000626:	309e      	adds	r0, #158	; 0x9e
 8000628:	40da      	lsrs	r2, r3
 800062a:	4084      	lsls	r4, r0
 800062c:	0013      	movs	r3, r2
 800062e:	1e62      	subs	r2, r4, #1
 8000630:	4194      	sbcs	r4, r2
 8000632:	431c      	orrs	r4, r3
 8000634:	0763      	lsls	r3, r4, #29
 8000636:	d004      	beq.n	8000642 <__aeabi_fmul+0x1f2>
 8000638:	230f      	movs	r3, #15
 800063a:	4023      	ands	r3, r4
 800063c:	2b04      	cmp	r3, #4
 800063e:	d000      	beq.n	8000642 <__aeabi_fmul+0x1f2>
 8000640:	3404      	adds	r4, #4
 8000642:	0163      	lsls	r3, r4, #5
 8000644:	d51a      	bpl.n	800067c <__aeabi_fmul+0x22c>
 8000646:	2001      	movs	r0, #1
 8000648:	2400      	movs	r4, #0
 800064a:	e747      	b.n	80004dc <__aeabi_fmul+0x8c>
 800064c:	2080      	movs	r0, #128	; 0x80
 800064e:	03c0      	lsls	r0, r0, #15
 8000650:	4204      	tst	r4, r0
 8000652:	d009      	beq.n	8000668 <__aeabi_fmul+0x218>
 8000654:	4643      	mov	r3, r8
 8000656:	4203      	tst	r3, r0
 8000658:	d106      	bne.n	8000668 <__aeabi_fmul+0x218>
 800065a:	4644      	mov	r4, r8
 800065c:	4304      	orrs	r4, r0
 800065e:	0264      	lsls	r4, r4, #9
 8000660:	0039      	movs	r1, r7
 8000662:	20ff      	movs	r0, #255	; 0xff
 8000664:	0a64      	lsrs	r4, r4, #9
 8000666:	e739      	b.n	80004dc <__aeabi_fmul+0x8c>
 8000668:	2080      	movs	r0, #128	; 0x80
 800066a:	03c0      	lsls	r0, r0, #15
 800066c:	4304      	orrs	r4, r0
 800066e:	0264      	lsls	r4, r4, #9
 8000670:	0031      	movs	r1, r6
 8000672:	20ff      	movs	r0, #255	; 0xff
 8000674:	0a64      	lsrs	r4, r4, #9
 8000676:	e731      	b.n	80004dc <__aeabi_fmul+0x8c>
 8000678:	0028      	movs	r0, r5
 800067a:	e765      	b.n	8000548 <__aeabi_fmul+0xf8>
 800067c:	01a4      	lsls	r4, r4, #6
 800067e:	2000      	movs	r0, #0
 8000680:	0a64      	lsrs	r4, r4, #9
 8000682:	e72b      	b.n	80004dc <__aeabi_fmul+0x8c>
 8000684:	2080      	movs	r0, #128	; 0x80
 8000686:	03c0      	lsls	r0, r0, #15
 8000688:	4304      	orrs	r4, r0
 800068a:	0264      	lsls	r4, r4, #9
 800068c:	20ff      	movs	r0, #255	; 0xff
 800068e:	0a64      	lsrs	r4, r4, #9
 8000690:	e724      	b.n	80004dc <__aeabi_fmul+0x8c>
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	08003f04 	.word	0x08003f04
 8000698:	f7ffffff 	.word	0xf7ffffff

0800069c <__aeabi_ui2f>:
 800069c:	b570      	push	{r4, r5, r6, lr}
 800069e:	1e05      	subs	r5, r0, #0
 80006a0:	d00e      	beq.n	80006c0 <__aeabi_ui2f+0x24>
 80006a2:	f000 f83d 	bl	8000720 <__clzsi2>
 80006a6:	239e      	movs	r3, #158	; 0x9e
 80006a8:	0004      	movs	r4, r0
 80006aa:	1a1b      	subs	r3, r3, r0
 80006ac:	2b96      	cmp	r3, #150	; 0x96
 80006ae:	dc0c      	bgt.n	80006ca <__aeabi_ui2f+0x2e>
 80006b0:	2808      	cmp	r0, #8
 80006b2:	dd01      	ble.n	80006b8 <__aeabi_ui2f+0x1c>
 80006b4:	3c08      	subs	r4, #8
 80006b6:	40a5      	lsls	r5, r4
 80006b8:	026d      	lsls	r5, r5, #9
 80006ba:	0a6d      	lsrs	r5, r5, #9
 80006bc:	b2d8      	uxtb	r0, r3
 80006be:	e001      	b.n	80006c4 <__aeabi_ui2f+0x28>
 80006c0:	2000      	movs	r0, #0
 80006c2:	2500      	movs	r5, #0
 80006c4:	05c0      	lsls	r0, r0, #23
 80006c6:	4328      	orrs	r0, r5
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	2b99      	cmp	r3, #153	; 0x99
 80006cc:	dd09      	ble.n	80006e2 <__aeabi_ui2f+0x46>
 80006ce:	0002      	movs	r2, r0
 80006d0:	0029      	movs	r1, r5
 80006d2:	321b      	adds	r2, #27
 80006d4:	4091      	lsls	r1, r2
 80006d6:	1e4a      	subs	r2, r1, #1
 80006d8:	4191      	sbcs	r1, r2
 80006da:	2205      	movs	r2, #5
 80006dc:	1a12      	subs	r2, r2, r0
 80006de:	40d5      	lsrs	r5, r2
 80006e0:	430d      	orrs	r5, r1
 80006e2:	2c05      	cmp	r4, #5
 80006e4:	dc12      	bgt.n	800070c <__aeabi_ui2f+0x70>
 80006e6:	0029      	movs	r1, r5
 80006e8:	4e0c      	ldr	r6, [pc, #48]	; (800071c <__aeabi_ui2f+0x80>)
 80006ea:	4031      	ands	r1, r6
 80006ec:	076a      	lsls	r2, r5, #29
 80006ee:	d009      	beq.n	8000704 <__aeabi_ui2f+0x68>
 80006f0:	200f      	movs	r0, #15
 80006f2:	4028      	ands	r0, r5
 80006f4:	2804      	cmp	r0, #4
 80006f6:	d005      	beq.n	8000704 <__aeabi_ui2f+0x68>
 80006f8:	3104      	adds	r1, #4
 80006fa:	014a      	lsls	r2, r1, #5
 80006fc:	d502      	bpl.n	8000704 <__aeabi_ui2f+0x68>
 80006fe:	239f      	movs	r3, #159	; 0x9f
 8000700:	4031      	ands	r1, r6
 8000702:	1b1b      	subs	r3, r3, r4
 8000704:	0189      	lsls	r1, r1, #6
 8000706:	0a4d      	lsrs	r5, r1, #9
 8000708:	b2d8      	uxtb	r0, r3
 800070a:	e7db      	b.n	80006c4 <__aeabi_ui2f+0x28>
 800070c:	1f62      	subs	r2, r4, #5
 800070e:	4095      	lsls	r5, r2
 8000710:	0029      	movs	r1, r5
 8000712:	4e02      	ldr	r6, [pc, #8]	; (800071c <__aeabi_ui2f+0x80>)
 8000714:	4031      	ands	r1, r6
 8000716:	076a      	lsls	r2, r5, #29
 8000718:	d0f4      	beq.n	8000704 <__aeabi_ui2f+0x68>
 800071a:	e7e9      	b.n	80006f0 <__aeabi_ui2f+0x54>
 800071c:	fbffffff 	.word	0xfbffffff

08000720 <__clzsi2>:
 8000720:	211c      	movs	r1, #28
 8000722:	2301      	movs	r3, #1
 8000724:	041b      	lsls	r3, r3, #16
 8000726:	4298      	cmp	r0, r3
 8000728:	d301      	bcc.n	800072e <__clzsi2+0xe>
 800072a:	0c00      	lsrs	r0, r0, #16
 800072c:	3910      	subs	r1, #16
 800072e:	0a1b      	lsrs	r3, r3, #8
 8000730:	4298      	cmp	r0, r3
 8000732:	d301      	bcc.n	8000738 <__clzsi2+0x18>
 8000734:	0a00      	lsrs	r0, r0, #8
 8000736:	3908      	subs	r1, #8
 8000738:	091b      	lsrs	r3, r3, #4
 800073a:	4298      	cmp	r0, r3
 800073c:	d301      	bcc.n	8000742 <__clzsi2+0x22>
 800073e:	0900      	lsrs	r0, r0, #4
 8000740:	3904      	subs	r1, #4
 8000742:	a202      	add	r2, pc, #8	; (adr r2, 800074c <__clzsi2+0x2c>)
 8000744:	5c10      	ldrb	r0, [r2, r0]
 8000746:	1840      	adds	r0, r0, r1
 8000748:	4770      	bx	lr
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	02020304 	.word	0x02020304
 8000750:	01010101 	.word	0x01010101
	...

0800075c <Start_Adc>:




void Start_Adc(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ADC_LED_GPIO_Port, ADC_LED_Pin, SET);
 8000760:	2390      	movs	r3, #144	; 0x90
 8000762:	05db      	lsls	r3, r3, #23
 8000764:	2201      	movs	r2, #1
 8000766:	2102      	movs	r1, #2
 8000768:	0018      	movs	r0, r3
 800076a:	f001 fcc1 	bl	80020f0 <HAL_GPIO_WritePin>
	HAL_ADCEx_Calibration_Start(&hadc);// калибровка АЦП
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <Start_Adc+0x34>)
 8000770:	0018      	movs	r0, r3
 8000772:	f001 f82f 	bl	80017d4 <HAL_ADCEx_Calibration_Start>
	HAL_TIM_Base_Start(&htim3); // старт таймера АЦП
 8000776:	4b07      	ldr	r3, [pc, #28]	; (8000794 <Start_Adc+0x38>)
 8000778:	0018      	movs	r0, r3
 800077a:	f002 fa61 	bl	8002c40 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)input_buffer, ADC_BUFFER_SIZE);
 800077e:	4906      	ldr	r1, [pc, #24]	; (8000798 <Start_Adc+0x3c>)
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <Start_Adc+0x34>)
 8000782:	2264      	movs	r2, #100	; 0x64
 8000784:	0018      	movs	r0, r3
 8000786:	f000 fd95 	bl	80012b4 <HAL_ADC_Start_DMA>
}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200000fc 	.word	0x200000fc
 8000794:	20000180 	.word	0x20000180
 8000798:	20000028 	.word	0x20000028

0800079c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	tick+=1;
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <HAL_ADC_ConvCpltCallback+0x80>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	1c5a      	adds	r2, r3, #1
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <HAL_ADC_ConvCpltCallback+0x80>)
 80007ac:	601a      	str	r2, [r3, #0]
	uint32_t sum = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < ADC_BUFFER_SIZE; ++i) {
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	e00a      	b.n	80007ce <HAL_ADC_ConvCpltCallback+0x32>
		sum+=input_buffer[i];
 80007b8:	4b19      	ldr	r3, [pc, #100]	; (8000820 <HAL_ADC_ConvCpltCallback+0x84>)
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	0052      	lsls	r2, r2, #1
 80007be:	5ad3      	ldrh	r3, [r2, r3]
 80007c0:	001a      	movs	r2, r3
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	189b      	adds	r3, r3, r2
 80007c6:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < ADC_BUFFER_SIZE; ++i) {
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	3301      	adds	r3, #1
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	2b63      	cmp	r3, #99	; 0x63
 80007d2:	ddf1      	ble.n	80007b8 <HAL_ADC_ConvCpltCallback+0x1c>
	}
	adc_value = ((float)sum)/ADC_BUFFER_SIZE;
 80007d4:	68f8      	ldr	r0, [r7, #12]
 80007d6:	f7ff ff61 	bl	800069c <__aeabi_ui2f>
 80007da:	1c03      	adds	r3, r0, #0
 80007dc:	4911      	ldr	r1, [pc, #68]	; (8000824 <HAL_ADC_ConvCpltCallback+0x88>)
 80007de:	1c18      	adds	r0, r3, #0
 80007e0:	f7ff fd1e 	bl	8000220 <__aeabi_fdiv>
 80007e4:	1c03      	adds	r3, r0, #0
 80007e6:	1c1a      	adds	r2, r3, #0
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_ADC_ConvCpltCallback+0x8c>)
 80007ea:	601a      	str	r2, [r3, #0]
	voltage  = 3 * adc_value/4095;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <HAL_ADC_ConvCpltCallback+0x8c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	490e      	ldr	r1, [pc, #56]	; (800082c <HAL_ADC_ConvCpltCallback+0x90>)
 80007f2:	1c18      	adds	r0, r3, #0
 80007f4:	f7ff fe2c 	bl	8000450 <__aeabi_fmul>
 80007f8:	1c03      	adds	r3, r0, #0
 80007fa:	490d      	ldr	r1, [pc, #52]	; (8000830 <HAL_ADC_ConvCpltCallback+0x94>)
 80007fc:	1c18      	adds	r0, r3, #0
 80007fe:	f7ff fd0f 	bl	8000220 <__aeabi_fdiv>
 8000802:	1c03      	adds	r3, r0, #0
 8000804:	1c1a      	adds	r2, r3, #0
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <HAL_ADC_ConvCpltCallback+0x98>)
 8000808:	601a      	str	r2, [r3, #0]
	Send_Adc(adc_value);
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <HAL_ADC_ConvCpltCallback+0x8c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	1c18      	adds	r0, r3, #0
 8000810:	f000 fb64 	bl	8000edc <Send_Adc>
}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	b004      	add	sp, #16
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200000f4 	.word	0x200000f4
 8000820:	20000028 	.word	0x20000028
 8000824:	42c80000 	.word	0x42c80000
 8000828:	200000f0 	.word	0x200000f0
 800082c:	40400000 	.word	0x40400000
 8000830:	457ff000 	.word	0x457ff000
 8000834:	200000f8 	.word	0x200000f8

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083c:	f000 fb96 	bl	8000f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000840:	f000 f80d 	bl	800085e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000844:	f000 f982 	bl	8000b4c <MX_GPIO_Init>
  MX_DMA_Init();
 8000848:	f000 f95a 	bl	8000b00 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800084c:	f000 f920 	bl	8000a90 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8000850:	f000 f86e 	bl	8000930 <MX_ADC_Init>
  MX_TIM3_Init();
 8000854:	f000 f8c6 	bl	80009e4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  Start_Adc();
 8000858:	f7ff ff80 	bl	800075c <Start_Adc>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800085c:	e7fe      	b.n	800085c <main+0x24>

0800085e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085e:	b590      	push	{r4, r7, lr}
 8000860:	b095      	sub	sp, #84	; 0x54
 8000862:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000864:	2420      	movs	r4, #32
 8000866:	193b      	adds	r3, r7, r4
 8000868:	0018      	movs	r0, r3
 800086a:	2330      	movs	r3, #48	; 0x30
 800086c:	001a      	movs	r2, r3
 800086e:	2100      	movs	r1, #0
 8000870:	f003 fae3 	bl	8003e3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	2310      	movs	r3, #16
 8000876:	18fb      	adds	r3, r7, r3
 8000878:	0018      	movs	r0, r3
 800087a:	2310      	movs	r3, #16
 800087c:	001a      	movs	r2, r3
 800087e:	2100      	movs	r1, #0
 8000880:	f003 fadb 	bl	8003e3a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000884:	003b      	movs	r3, r7
 8000886:	0018      	movs	r0, r3
 8000888:	2310      	movs	r3, #16
 800088a:	001a      	movs	r2, r3
 800088c:	2100      	movs	r1, #0
 800088e:	f003 fad4 	bl	8003e3a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000892:	0021      	movs	r1, r4
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2212      	movs	r2, #18
 8000898:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2201      	movs	r2, #1
 800089e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2201      	movs	r2, #1
 80008a4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2210      	movs	r2, #16
 80008aa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2210      	movs	r2, #16
 80008b0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2202      	movs	r2, #2
 80008b6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2280      	movs	r2, #128	; 0x80
 80008c2:	0312      	lsls	r2, r2, #12
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2200      	movs	r2, #0
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	0018      	movs	r0, r3
 80008d0:	f001 fc2c 	bl	800212c <HAL_RCC_OscConfig>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80008d8:	f000 f970 	bl	8000bbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008dc:	2110      	movs	r1, #16
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2207      	movs	r2, #7
 80008e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2202      	movs	r2, #2
 80008e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	22a0      	movs	r2, #160	; 0xa0
 80008f4:	00d2      	lsls	r2, r2, #3
 80008f6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2100      	movs	r1, #0
 80008fc:	0018      	movs	r0, r3
 80008fe:	f001 ff2f 	bl	8002760 <HAL_RCC_ClockConfig>
 8000902:	1e03      	subs	r3, r0, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000906:	f000 f959 	bl	8000bbc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800090a:	003b      	movs	r3, r7
 800090c:	2201      	movs	r2, #1
 800090e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000910:	003b      	movs	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000916:	003b      	movs	r3, r7
 8000918:	0018      	movs	r0, r3
 800091a:	f002 f873 	bl	8002a04 <HAL_RCCEx_PeriphCLKConfig>
 800091e:	1e03      	subs	r3, r0, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000922:	f000 f94b 	bl	8000bbc <Error_Handler>
  }
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b015      	add	sp, #84	; 0x54
 800092c:	bd90      	pop	{r4, r7, pc}
	...

08000930 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	0018      	movs	r0, r3
 800093a:	230c      	movs	r3, #12
 800093c:	001a      	movs	r2, r3
 800093e:	2100      	movs	r1, #0
 8000940:	f003 fa7b 	bl	8003e3a <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000944:	4b25      	ldr	r3, [pc, #148]	; (80009dc <MX_ADC_Init+0xac>)
 8000946:	4a26      	ldr	r2, [pc, #152]	; (80009e0 <MX_ADC_Init+0xb0>)
 8000948:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800094a:	4b24      	ldr	r3, [pc, #144]	; (80009dc <MX_ADC_Init+0xac>)
 800094c:	2200      	movs	r2, #0
 800094e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_ADC_Init+0xac>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <MX_ADC_Init+0xac>)
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800095c:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_ADC_Init+0xac>)
 800095e:	2201      	movs	r2, #1
 8000960:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000962:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <MX_ADC_Init+0xac>)
 8000964:	2204      	movs	r2, #4
 8000966:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000968:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_ADC_Init+0xac>)
 800096a:	2200      	movs	r2, #0
 800096c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800096e:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <MX_ADC_Init+0xac>)
 8000970:	2200      	movs	r2, #0
 8000972:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000974:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_ADC_Init+0xac>)
 8000976:	2200      	movs	r2, #0
 8000978:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_ADC_Init+0xac>)
 800097c:	2200      	movs	r2, #0
 800097e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000980:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_ADC_Init+0xac>)
 8000982:	22c0      	movs	r2, #192	; 0xc0
 8000984:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <MX_ADC_Init+0xac>)
 8000988:	2280      	movs	r2, #128	; 0x80
 800098a:	00d2      	lsls	r2, r2, #3
 800098c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_ADC_Init+0xac>)
 8000990:	2224      	movs	r2, #36	; 0x24
 8000992:	2101      	movs	r1, #1
 8000994:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_ADC_Init+0xac>)
 8000998:	2201      	movs	r2, #1
 800099a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_ADC_Init+0xac>)
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 fb48 	bl	8001034 <HAL_ADC_Init>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d001      	beq.n	80009ac <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80009a8:	f000 f908 	bl	8000bbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2205      	movs	r2, #5
 80009b0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2280      	movs	r2, #128	; 0x80
 80009b6:	0152      	lsls	r2, r2, #5
 80009b8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2207      	movs	r2, #7
 80009be:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009c0:	1d3a      	adds	r2, r7, #4
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_ADC_Init+0xac>)
 80009c4:	0011      	movs	r1, r2
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 fd06 	bl	80013d8 <HAL_ADC_ConfigChannel>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d001      	beq.n	80009d4 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80009d0:	f000 f8f4 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b004      	add	sp, #16
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200000fc 	.word	0x200000fc
 80009e0:	40012400 	.word	0x40012400

080009e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ea:	2308      	movs	r3, #8
 80009ec:	18fb      	adds	r3, r7, r3
 80009ee:	0018      	movs	r0, r3
 80009f0:	2310      	movs	r3, #16
 80009f2:	001a      	movs	r2, r3
 80009f4:	2100      	movs	r1, #0
 80009f6:	f003 fa20 	bl	8003e3a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fa:	003b      	movs	r3, r7
 80009fc:	0018      	movs	r0, r3
 80009fe:	2308      	movs	r3, #8
 8000a00:	001a      	movs	r2, r3
 8000a02:	2100      	movs	r1, #0
 8000a04:	f003 fa19 	bl	8003e3a <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a08:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <MX_TIM3_Init+0xa0>)
 8000a0a:	4a1f      	ldr	r2, [pc, #124]	; (8000a88 <MX_TIM3_Init+0xa4>)
 8000a0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000a0e:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <MX_TIM3_Init+0xa0>)
 8000a10:	4a1e      	ldr	r2, [pc, #120]	; (8000a8c <MX_TIM3_Init+0xa8>)
 8000a12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MX_TIM3_Init+0xa0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <MX_TIM3_Init+0xa0>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_TIM3_Init+0xa0>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_TIM3_Init+0xa0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_TIM3_Init+0xa0>)
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f002 f8b6 	bl	8002ba0 <HAL_TIM_Base_Init>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a38:	f000 f8c0 	bl	8000bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a3c:	2108      	movs	r1, #8
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2280      	movs	r2, #128	; 0x80
 8000a42:	0152      	lsls	r2, r2, #5
 8000a44:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a46:	187a      	adds	r2, r7, r1
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_TIM3_Init+0xa0>)
 8000a4a:	0011      	movs	r1, r2
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f002 fa4b 	bl	8002ee8 <HAL_TIM_ConfigClockSource>
 8000a52:	1e03      	subs	r3, r0, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000a56:	f000 f8b1 	bl	8000bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a5a:	003b      	movs	r3, r7
 8000a5c:	2220      	movs	r2, #32
 8000a5e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a60:	003b      	movs	r3, r7
 8000a62:	2200      	movs	r2, #0
 8000a64:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a66:	003a      	movs	r2, r7
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_TIM3_Init+0xa0>)
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f002 fc3d 	bl	80032ec <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	1e03      	subs	r3, r0, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000a76:	f000 f8a1 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b006      	add	sp, #24
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	20000180 	.word	0x20000180
 8000a88:	40000400 	.word	0x40000400
 8000a8c:	00001f3f 	.word	0x00001f3f

08000a90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_USART1_UART_Init+0x68>)
 8000a96:	4a19      	ldr	r2, [pc, #100]	; (8000afc <MX_USART1_UART_Init+0x6c>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_USART1_UART_Init+0x68>)
 8000a9c:	2296      	movs	r2, #150	; 0x96
 8000a9e:	0192      	lsls	r2, r2, #6
 8000aa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_USART1_UART_Init+0x68>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <MX_USART1_UART_Init+0x68>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_USART1_UART_Init+0x68>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_USART1_UART_Init+0x68>)
 8000ab6:	2208      	movs	r2, #8
 8000ab8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_USART1_UART_Init+0x68>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <MX_USART1_UART_Init+0x68>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_USART1_UART_Init+0x68>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <MX_USART1_UART_Init+0x68>)
 8000ace:	2203      	movs	r2, #3
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_USART1_UART_Init+0x68>)
 8000ad4:	2280      	movs	r2, #128	; 0x80
 8000ad6:	0292      	lsls	r2, r2, #10
 8000ad8:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <MX_USART1_UART_Init+0x68>)
 8000adc:	2280      	movs	r2, #128	; 0x80
 8000ade:	0252      	lsls	r2, r2, #9
 8000ae0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <MX_USART1_UART_Init+0x68>)
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f002 fc63 	bl	80033b0 <HAL_UART_Init>
 8000aea:	1e03      	subs	r3, r0, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 8000aee:	f000 f865 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200001c8 	.word	0x200001c8
 8000afc:	40013800 	.word	0x40013800

08000b00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <MX_DMA_Init+0x48>)
 8000b08:	695a      	ldr	r2, [r3, #20]
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_DMA_Init+0x48>)
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	615a      	str	r2, [r3, #20]
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <MX_DMA_Init+0x48>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	2201      	movs	r2, #1
 8000b18:	4013      	ands	r3, r2
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	2009      	movs	r0, #9
 8000b24:	f000 ffaa 	bl	8001a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b28:	2009      	movs	r0, #9
 8000b2a:	f000 ffbc 	bl	8001aa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	200a      	movs	r0, #10
 8000b34:	f000 ffa2 	bl	8001a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000b38:	200a      	movs	r0, #10
 8000b3a:	f000 ffb4 	bl	8001aa6 <HAL_NVIC_EnableIRQ>

}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b002      	add	sp, #8
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	40021000 	.word	0x40021000

08000b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	0018      	movs	r0, r3
 8000b56:	2314      	movs	r3, #20
 8000b58:	001a      	movs	r2, r3
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	f003 f96d 	bl	8003e3a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <MX_GPIO_Init+0x6c>)
 8000b62:	695a      	ldr	r2, [r3, #20]
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_GPIO_Init+0x6c>)
 8000b66:	2180      	movs	r1, #128	; 0x80
 8000b68:	0289      	lsls	r1, r1, #10
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	615a      	str	r2, [r3, #20]
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <MX_GPIO_Init+0x6c>)
 8000b70:	695a      	ldr	r2, [r3, #20]
 8000b72:	2380      	movs	r3, #128	; 0x80
 8000b74:	029b      	lsls	r3, r3, #10
 8000b76:	4013      	ands	r3, r2
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_LED_GPIO_Port, ADC_LED_Pin, GPIO_PIN_RESET);
 8000b7c:	2390      	movs	r3, #144	; 0x90
 8000b7e:	05db      	lsls	r3, r3, #23
 8000b80:	2200      	movs	r2, #0
 8000b82:	2102      	movs	r1, #2
 8000b84:	0018      	movs	r0, r3
 8000b86:	f001 fab3 	bl	80020f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ADC_LED_Pin */
  GPIO_InitStruct.Pin = ADC_LED_Pin;
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	2201      	movs	r2, #1
 8000b94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ADC_LED_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	1d3a      	adds	r2, r7, #4
 8000ba4:	2390      	movs	r3, #144	; 0x90
 8000ba6:	05db      	lsls	r3, r3, #23
 8000ba8:	0011      	movs	r1, r2
 8000baa:	0018      	movs	r0, r3
 8000bac:	f001 f930 	bl	8001e10 <HAL_GPIO_Init>

}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b006      	add	sp, #24
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40021000 	.word	0x40021000

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <Error_Handler+0x8>
	...

08000bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <HAL_MspInit+0x44>)
 8000bd0:	699a      	ldr	r2, [r3, #24]
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_MspInit+0x44>)
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	619a      	str	r2, [r3, #24]
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <HAL_MspInit+0x44>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	2201      	movs	r2, #1
 8000be0:	4013      	ands	r3, r2
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <HAL_MspInit+0x44>)
 8000be8:	69da      	ldr	r2, [r3, #28]
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <HAL_MspInit+0x44>)
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	0549      	lsls	r1, r1, #21
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	61da      	str	r2, [r3, #28]
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <HAL_MspInit+0x44>)
 8000bf6:	69da      	ldr	r2, [r3, #28]
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	055b      	lsls	r3, r3, #21
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b002      	add	sp, #8
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	40021000 	.word	0x40021000

08000c10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b08b      	sub	sp, #44	; 0x2c
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	2414      	movs	r4, #20
 8000c1a:	193b      	adds	r3, r7, r4
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	2314      	movs	r3, #20
 8000c20:	001a      	movs	r2, r3
 8000c22:	2100      	movs	r1, #0
 8000c24:	f003 f909 	bl	8003e3a <memset>
  if(hadc->Instance==ADC1)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a2d      	ldr	r2, [pc, #180]	; (8000ce4 <HAL_ADC_MspInit+0xd4>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d154      	bne.n	8000cdc <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c32:	4b2d      	ldr	r3, [pc, #180]	; (8000ce8 <HAL_ADC_MspInit+0xd8>)
 8000c34:	699a      	ldr	r2, [r3, #24]
 8000c36:	4b2c      	ldr	r3, [pc, #176]	; (8000ce8 <HAL_ADC_MspInit+0xd8>)
 8000c38:	2180      	movs	r1, #128	; 0x80
 8000c3a:	0089      	lsls	r1, r1, #2
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	619a      	str	r2, [r3, #24]
 8000c40:	4b29      	ldr	r3, [pc, #164]	; (8000ce8 <HAL_ADC_MspInit+0xd8>)
 8000c42:	699a      	ldr	r2, [r3, #24]
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <HAL_ADC_MspInit+0xd8>)
 8000c50:	695a      	ldr	r2, [r3, #20]
 8000c52:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <HAL_ADC_MspInit+0xd8>)
 8000c54:	2180      	movs	r1, #128	; 0x80
 8000c56:	0289      	lsls	r1, r1, #10
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	615a      	str	r2, [r3, #20]
 8000c5c:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <HAL_ADC_MspInit+0xd8>)
 8000c5e:	695a      	ldr	r2, [r3, #20]
 8000c60:	2380      	movs	r3, #128	; 0x80
 8000c62:	029b      	lsls	r3, r3, #10
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	2220      	movs	r2, #32
 8000c6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c70:	193b      	adds	r3, r7, r4
 8000c72:	2203      	movs	r2, #3
 8000c74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	193b      	adds	r3, r7, r4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	193a      	adds	r2, r7, r4
 8000c7e:	2390      	movs	r3, #144	; 0x90
 8000c80:	05db      	lsls	r3, r3, #23
 8000c82:	0011      	movs	r1, r2
 8000c84:	0018      	movs	r0, r3
 8000c86:	f001 f8c3 	bl	8001e10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_ADC_MspInit+0xdc>)
 8000c8c:	4a18      	ldr	r2, [pc, #96]	; (8000cf0 <HAL_ADC_MspInit+0xe0>)
 8000c8e:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <HAL_ADC_MspInit+0xdc>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <HAL_ADC_MspInit+0xdc>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <HAL_ADC_MspInit+0xdc>)
 8000c9e:	2280      	movs	r2, #128	; 0x80
 8000ca0:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_ADC_MspInit+0xdc>)
 8000ca4:	2280      	movs	r2, #128	; 0x80
 8000ca6:	0052      	lsls	r2, r2, #1
 8000ca8:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <HAL_ADC_MspInit+0xdc>)
 8000cac:	2280      	movs	r2, #128	; 0x80
 8000cae:	00d2      	lsls	r2, r2, #3
 8000cb0:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_ADC_MspInit+0xdc>)
 8000cb4:	2220      	movs	r2, #32
 8000cb6:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <HAL_ADC_MspInit+0xdc>)
 8000cba:	2280      	movs	r2, #128	; 0x80
 8000cbc:	0152      	lsls	r2, r2, #5
 8000cbe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_ADC_MspInit+0xdc>)
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f000 ff0c 	bl	8001ae0 <HAL_DMA_Init>
 8000cc8:	1e03      	subs	r3, r0, #0
 8000cca:	d001      	beq.n	8000cd0 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000ccc:	f7ff ff76 	bl	8000bbc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a06      	ldr	r2, [pc, #24]	; (8000cec <HAL_ADC_MspInit+0xdc>)
 8000cd4:	631a      	str	r2, [r3, #48]	; 0x30
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_ADC_MspInit+0xdc>)
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	b00b      	add	sp, #44	; 0x2c
 8000ce2:	bd90      	pop	{r4, r7, pc}
 8000ce4:	40012400 	.word	0x40012400
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	2000013c 	.word	0x2000013c
 8000cf0:	40020008 	.word	0x40020008

08000cf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <HAL_TIM_Base_MspInit+0x44>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d113      	bne.n	8000d2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <HAL_TIM_Base_MspInit+0x48>)
 8000d08:	69da      	ldr	r2, [r3, #28]
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <HAL_TIM_Base_MspInit+0x48>)
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	61da      	str	r2, [r3, #28]
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_TIM_Base_MspInit+0x48>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	2202      	movs	r2, #2
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	2010      	movs	r0, #16
 8000d24:	f000 feaa 	bl	8001a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d28:	2010      	movs	r0, #16
 8000d2a:	f000 febc 	bl	8001aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b004      	add	sp, #16
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	40000400 	.word	0x40000400
 8000d3c:	40021000 	.word	0x40021000

08000d40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b08b      	sub	sp, #44	; 0x2c
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	2414      	movs	r4, #20
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	2314      	movs	r3, #20
 8000d50:	001a      	movs	r2, r3
 8000d52:	2100      	movs	r1, #0
 8000d54:	f003 f871 	bl	8003e3a <memset>
  if(huart->Instance==USART1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a2f      	ldr	r2, [pc, #188]	; (8000e1c <HAL_UART_MspInit+0xdc>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d158      	bne.n	8000e14 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d62:	4b2f      	ldr	r3, [pc, #188]	; (8000e20 <HAL_UART_MspInit+0xe0>)
 8000d64:	699a      	ldr	r2, [r3, #24]
 8000d66:	4b2e      	ldr	r3, [pc, #184]	; (8000e20 <HAL_UART_MspInit+0xe0>)
 8000d68:	2180      	movs	r1, #128	; 0x80
 8000d6a:	01c9      	lsls	r1, r1, #7
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	619a      	str	r2, [r3, #24]
 8000d70:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <HAL_UART_MspInit+0xe0>)
 8000d72:	699a      	ldr	r2, [r3, #24]
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	01db      	lsls	r3, r3, #7
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <HAL_UART_MspInit+0xe0>)
 8000d80:	695a      	ldr	r2, [r3, #20]
 8000d82:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <HAL_UART_MspInit+0xe0>)
 8000d84:	2180      	movs	r1, #128	; 0x80
 8000d86:	0289      	lsls	r1, r1, #10
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	615a      	str	r2, [r3, #20]
 8000d8c:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <HAL_UART_MspInit+0xe0>)
 8000d8e:	695a      	ldr	r2, [r3, #20]
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	029b      	lsls	r3, r3, #10
 8000d94:	4013      	ands	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d9a:	0021      	movs	r1, r4
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	220c      	movs	r2, #12
 8000da0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2202      	movs	r2, #2
 8000da6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2203      	movs	r2, #3
 8000db2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2201      	movs	r2, #1
 8000db8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	187a      	adds	r2, r7, r1
 8000dbc:	2390      	movs	r3, #144	; 0x90
 8000dbe:	05db      	lsls	r3, r3, #23
 8000dc0:	0011      	movs	r1, r2
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f001 f824 	bl	8001e10 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000dc8:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <HAL_UART_MspInit+0xe4>)
 8000dca:	4a17      	ldr	r2, [pc, #92]	; (8000e28 <HAL_UART_MspInit+0xe8>)
 8000dcc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <HAL_UART_MspInit+0xe4>)
 8000dd0:	2210      	movs	r2, #16
 8000dd2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <HAL_UART_MspInit+0xe4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_UART_MspInit+0xe4>)
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000de0:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <HAL_UART_MspInit+0xe4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_UART_MspInit+0xe4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000dec:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <HAL_UART_MspInit+0xe4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_UART_MspInit+0xe4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000df8:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_UART_MspInit+0xe4>)
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f000 fe70 	bl	8001ae0 <HAL_DMA_Init>
 8000e00:	1e03      	subs	r3, r0, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000e04:	f7ff feda 	bl	8000bbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <HAL_UART_MspInit+0xe4>)
 8000e0c:	66da      	str	r2, [r3, #108]	; 0x6c
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <HAL_UART_MspInit+0xe4>)
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b00b      	add	sp, #44	; 0x2c
 8000e1a:	bd90      	pop	{r4, r7, pc}
 8000e1c:	40013800 	.word	0x40013800
 8000e20:	40021000 	.word	0x40021000
 8000e24:	2000024c 	.word	0x2000024c
 8000e28:	4002001c 	.word	0x4002001c

08000e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <NMI_Handler+0x4>

08000e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <HardFault_Handler+0x4>

08000e38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e50:	f000 f8d4 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <DMA1_Channel1_IRQHandler+0x14>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f000 feea 	bl	8001c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	2000013c 	.word	0x2000013c

08000e74 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f000 fede 	bl	8001c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000e80:	46c0      	nop			; (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	2000024c 	.word	0x2000024c

08000e8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <TIM3_IRQHandler+0x14>)
 8000e92:	0018      	movs	r0, r3
 8000e94:	f001 ff12 	bl	8002cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	20000180 	.word	0x20000180

08000ea4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <Start_Transmit>:


static void Start_Transmit(uint8_t *p, uint8_t size);

static void Start_Transmit(uint8_t *p, uint8_t size)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	000a      	movs	r2, r1
 8000eba:	1cfb      	adds	r3, r7, #3
 8000ebc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, p, size);
 8000ebe:	1cfb      	adds	r3, r7, #3
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <Start_Transmit+0x28>)
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f002 fac5 	bl	8003458 <HAL_UART_Transmit_DMA>
}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b002      	add	sp, #8
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	200001c8 	.word	0x200001c8

08000edc <Send_Adc>:

void Send_Adc(float value)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	out_buffer[0]=0x0A;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <Send_Adc+0x34>)
 8000ee6:	220a      	movs	r2, #10
 8000ee8:	701a      	strb	r2, [r3, #0]
	memcpy(out_buffer+1, &value,4);
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <Send_Adc+0x38>)
 8000eec:	1d39      	adds	r1, r7, #4
 8000eee:	2204      	movs	r2, #4
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f002 ff99 	bl	8003e28 <memcpy>
	out_buffer[5]=0x0D;
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <Send_Adc+0x34>)
 8000ef8:	220d      	movs	r2, #13
 8000efa:	715a      	strb	r2, [r3, #5]
	Start_Transmit(out_buffer, 6);
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <Send_Adc+0x34>)
 8000efe:	2106      	movs	r1, #6
 8000f00:	0018      	movs	r0, r3
 8000f02:	f7ff ffd5 	bl	8000eb0 <Start_Transmit>
}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b002      	add	sp, #8
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	20000290 	.word	0x20000290
 8000f14:	20000291 	.word	0x20000291

08000f18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f1e:	490e      	ldr	r1, [pc, #56]	; (8000f58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f20:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <LoopForever+0xe>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f24:	e002      	b.n	8000f2c <LoopCopyDataInit>

08000f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2a:	3304      	adds	r3, #4

08000f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f30:	d3f9      	bcc.n	8000f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f32:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f34:	4c0b      	ldr	r4, [pc, #44]	; (8000f64 <LoopForever+0x16>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f38:	e001      	b.n	8000f3e <LoopFillZerobss>

08000f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f3c:	3204      	adds	r2, #4

08000f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f40:	d3fb      	bcc.n	8000f3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f42:	f7ff ffaf 	bl	8000ea4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000f46:	f002 ff4b 	bl	8003de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f4a:	f7ff fc75 	bl	8000838 <main>

08000f4e <LoopForever>:

LoopForever:
    b LoopForever
 8000f4e:	e7fe      	b.n	8000f4e <LoopForever>
  ldr   r0, =_estack
 8000f50:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f5c:	08003f64 	.word	0x08003f64
  ldr r2, =_sbss
 8000f60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f64:	200002a8 	.word	0x200002a8

08000f68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f68:	e7fe      	b.n	8000f68 <ADC1_IRQHandler>
	...

08000f6c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <HAL_Init+0x24>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_Init+0x24>)
 8000f76:	2110      	movs	r1, #16
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 f809 	bl	8000f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f82:	f7ff fe21 	bl	8000bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	0018      	movs	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	40022000 	.word	0x40022000

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <HAL_InitTick+0x5c>)
 8000f9e:	681c      	ldr	r4, [r3, #0]
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <HAL_InitTick+0x60>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	0019      	movs	r1, r3
 8000fa6:	23fa      	movs	r3, #250	; 0xfa
 8000fa8:	0098      	lsls	r0, r3, #2
 8000faa:	f7ff f8ad 	bl	8000108 <__udivsi3>
 8000fae:	0003      	movs	r3, r0
 8000fb0:	0019      	movs	r1, r3
 8000fb2:	0020      	movs	r0, r4
 8000fb4:	f7ff f8a8 	bl	8000108 <__udivsi3>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f000 fd83 	bl	8001ac6 <HAL_SYSTICK_Config>
 8000fc0:	1e03      	subs	r3, r0, #0
 8000fc2:	d001      	beq.n	8000fc8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e00f      	b.n	8000fe8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d80b      	bhi.n	8000fe6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	425b      	negs	r3, r3
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f000 fd50 	bl	8001a7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_InitTick+0x64>)
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	0018      	movs	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b003      	add	sp, #12
 8000fee:	bd90      	pop	{r4, r7, pc}
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000004 	.word	0x20000004

08000ffc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <HAL_IncTick+0x1c>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	001a      	movs	r2, r3
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <HAL_IncTick+0x20>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	18d2      	adds	r2, r2, r3
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <HAL_IncTick+0x20>)
 800100e:	601a      	str	r2, [r3, #0]
}
 8001010:	46c0      	nop			; (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	20000008 	.word	0x20000008
 800101c:	200002a4 	.word	0x200002a4

08001020 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b02      	ldr	r3, [pc, #8]	; (8001030 <HAL_GetTick+0x10>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	0018      	movs	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	200002a4 	.word	0x200002a4

08001034 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800103c:	230f      	movs	r3, #15
 800103e:	18fb      	adds	r3, r7, r3
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e125      	b.n	800129e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10a      	bne.n	8001070 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2234      	movs	r2, #52	; 0x34
 8001064:	2100      	movs	r1, #0
 8001066:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	0018      	movs	r0, r3
 800106c:	f7ff fdd0 	bl	8000c10 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001074:	2210      	movs	r2, #16
 8001076:	4013      	ands	r3, r2
 8001078:	d000      	beq.n	800107c <HAL_ADC_Init+0x48>
 800107a:	e103      	b.n	8001284 <HAL_ADC_Init+0x250>
 800107c:	230f      	movs	r3, #15
 800107e:	18fb      	adds	r3, r7, r3
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d000      	beq.n	8001088 <HAL_ADC_Init+0x54>
 8001086:	e0fd      	b.n	8001284 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2204      	movs	r2, #4
 8001090:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001092:	d000      	beq.n	8001096 <HAL_ADC_Init+0x62>
 8001094:	e0f6      	b.n	8001284 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800109a:	4a83      	ldr	r2, [pc, #524]	; (80012a8 <HAL_ADC_Init+0x274>)
 800109c:	4013      	ands	r3, r2
 800109e:	2202      	movs	r2, #2
 80010a0:	431a      	orrs	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	2203      	movs	r2, #3
 80010ae:	4013      	ands	r3, r2
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d112      	bne.n	80010da <HAL_ADC_Init+0xa6>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2201      	movs	r2, #1
 80010bc:	4013      	ands	r3, r2
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d009      	beq.n	80010d6 <HAL_ADC_Init+0xa2>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	021b      	lsls	r3, r3, #8
 80010cc:	401a      	ands	r2, r3
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	021b      	lsls	r3, r3, #8
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d101      	bne.n	80010da <HAL_ADC_Init+0xa6>
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <HAL_ADC_Init+0xa8>
 80010da:	2300      	movs	r3, #0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d116      	bne.n	800110e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	2218      	movs	r2, #24
 80010e8:	4393      	bics	r3, r2
 80010ea:	0019      	movs	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	0899      	lsrs	r1, r3, #2
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4964      	ldr	r1, [pc, #400]	; (80012ac <HAL_ADC_Init+0x278>)
 800111a:	400a      	ands	r2, r1
 800111c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7e1b      	ldrb	r3, [r3, #24]
 8001122:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7e5b      	ldrb	r3, [r3, #25]
 8001128:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800112a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7e9b      	ldrb	r3, [r3, #26]
 8001130:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001132:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	2b01      	cmp	r3, #1
 800113a:	d002      	beq.n	8001142 <HAL_ADC_Init+0x10e>
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	015b      	lsls	r3, r3, #5
 8001140:	e000      	b.n	8001144 <HAL_ADC_Init+0x110>
 8001142:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001144:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800114a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d101      	bne.n	8001158 <HAL_ADC_Init+0x124>
 8001154:	2304      	movs	r3, #4
 8001156:	e000      	b.n	800115a <HAL_ADC_Init+0x126>
 8001158:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800115a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2124      	movs	r1, #36	; 0x24
 8001160:	5c5b      	ldrb	r3, [r3, r1]
 8001162:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001164:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	4313      	orrs	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	7edb      	ldrb	r3, [r3, #27]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d115      	bne.n	80011a0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7e9b      	ldrb	r3, [r3, #26]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d105      	bne.n	8001188 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	2280      	movs	r2, #128	; 0x80
 8001180:	0252      	lsls	r2, r2, #9
 8001182:	4313      	orrs	r3, r2
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	e00b      	b.n	80011a0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800118c:	2220      	movs	r2, #32
 800118e:	431a      	orrs	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001198:	2201      	movs	r2, #1
 800119a:	431a      	orrs	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69da      	ldr	r2, [r3, #28]
 80011a4:	23c2      	movs	r3, #194	; 0xc2
 80011a6:	33ff      	adds	r3, #255	; 0xff
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d007      	beq.n	80011bc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80011b4:	4313      	orrs	r3, r2
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68d9      	ldr	r1, [r3, #12]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	055b      	lsls	r3, r3, #21
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d01b      	beq.n	8001210 <HAL_ADC_Init+0x1dc>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d017      	beq.n	8001210 <HAL_ADC_Init+0x1dc>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d013      	beq.n	8001210 <HAL_ADC_Init+0x1dc>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d00f      	beq.n	8001210 <HAL_ADC_Init+0x1dc>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d00b      	beq.n	8001210 <HAL_ADC_Init+0x1dc>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fc:	2b05      	cmp	r3, #5
 80011fe:	d007      	beq.n	8001210 <HAL_ADC_Init+0x1dc>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001204:	2b06      	cmp	r3, #6
 8001206:	d003      	beq.n	8001210 <HAL_ADC_Init+0x1dc>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120c:	2b07      	cmp	r3, #7
 800120e:	d112      	bne.n	8001236 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	695a      	ldr	r2, [r3, #20]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2107      	movs	r1, #7
 800121c:	438a      	bics	r2, r1
 800121e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6959      	ldr	r1, [r3, #20]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122a:	2207      	movs	r2, #7
 800122c:	401a      	ands	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	430a      	orrs	r2, r1
 8001234:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	4a1c      	ldr	r2, [pc, #112]	; (80012b0 <HAL_ADC_Init+0x27c>)
 800123e:	4013      	ands	r3, r2
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	429a      	cmp	r2, r3
 8001244:	d10b      	bne.n	800125e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001250:	2203      	movs	r2, #3
 8001252:	4393      	bics	r3, r2
 8001254:	2201      	movs	r2, #1
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800125c:	e01c      	b.n	8001298 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001262:	2212      	movs	r2, #18
 8001264:	4393      	bics	r3, r2
 8001266:	2210      	movs	r2, #16
 8001268:	431a      	orrs	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001272:	2201      	movs	r2, #1
 8001274:	431a      	orrs	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800127a:	230f      	movs	r3, #15
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001282:	e009      	b.n	8001298 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001288:	2210      	movs	r2, #16
 800128a:	431a      	orrs	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001290:	230f      	movs	r3, #15
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	2201      	movs	r2, #1
 8001296:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001298:	230f      	movs	r3, #15
 800129a:	18fb      	adds	r3, r7, r3
 800129c:	781b      	ldrb	r3, [r3, #0]
}
 800129e:	0018      	movs	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b004      	add	sp, #16
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	fffffefd 	.word	0xfffffefd
 80012ac:	fffe0219 	.word	0xfffe0219
 80012b0:	833fffe7 	.word	0x833fffe7

080012b4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b087      	sub	sp, #28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012c0:	2317      	movs	r3, #23
 80012c2:	18fb      	adds	r3, r7, r3
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2204      	movs	r2, #4
 80012d0:	4013      	ands	r3, r2
 80012d2:	d15e      	bne.n	8001392 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2234      	movs	r2, #52	; 0x34
 80012d8:	5c9b      	ldrb	r3, [r3, r2]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <HAL_ADC_Start_DMA+0x2e>
 80012de:	2302      	movs	r3, #2
 80012e0:	e05e      	b.n	80013a0 <HAL_ADC_Start_DMA+0xec>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2234      	movs	r2, #52	; 0x34
 80012e6:	2101      	movs	r1, #1
 80012e8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	7e5b      	ldrb	r3, [r3, #25]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d007      	beq.n	8001302 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80012f2:	2317      	movs	r3, #23
 80012f4:	18fc      	adds	r4, r7, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	0018      	movs	r0, r3
 80012fa:	f000 f963 	bl	80015c4 <ADC_Enable>
 80012fe:	0003      	movs	r3, r0
 8001300:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001302:	2317      	movs	r3, #23
 8001304:	18fb      	adds	r3, r7, r3
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d146      	bne.n	800139a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001310:	4a25      	ldr	r2, [pc, #148]	; (80013a8 <HAL_ADC_Start_DMA+0xf4>)
 8001312:	4013      	ands	r3, r2
 8001314:	2280      	movs	r2, #128	; 0x80
 8001316:	0052      	lsls	r2, r2, #1
 8001318:	431a      	orrs	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2200      	movs	r2, #0
 8001322:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2234      	movs	r2, #52	; 0x34
 8001328:	2100      	movs	r1, #0
 800132a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	4a1e      	ldr	r2, [pc, #120]	; (80013ac <HAL_ADC_Start_DMA+0xf8>)
 8001332:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	4a1d      	ldr	r2, [pc, #116]	; (80013b0 <HAL_ADC_Start_DMA+0xfc>)
 800133a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	4a1c      	ldr	r2, [pc, #112]	; (80013b4 <HAL_ADC_Start_DMA+0x100>)
 8001342:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	221c      	movs	r2, #28
 800134a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2110      	movs	r1, #16
 8001358:	430a      	orrs	r2, r1
 800135a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2101      	movs	r1, #1
 8001368:	430a      	orrs	r2, r1
 800136a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3340      	adds	r3, #64	; 0x40
 8001376:	0019      	movs	r1, r3
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f000 fbf8 	bl	8001b70 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2104      	movs	r1, #4
 800138c:	430a      	orrs	r2, r1
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	e003      	b.n	800139a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001392:	2317      	movs	r3, #23
 8001394:	18fb      	adds	r3, r7, r3
 8001396:	2202      	movs	r2, #2
 8001398:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800139a:	2317      	movs	r3, #23
 800139c:	18fb      	adds	r3, r7, r3
 800139e:	781b      	ldrb	r3, [r3, #0]
}
 80013a0:	0018      	movs	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b007      	add	sp, #28
 80013a6:	bd90      	pop	{r4, r7, pc}
 80013a8:	fffff0fe 	.word	0xfffff0fe
 80013ac:	080016cd 	.word	0x080016cd
 80013b0:	08001781 	.word	0x08001781
 80013b4:	0800179f 	.word	0x0800179f

080013b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80013c0:	46c0      	nop			; (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b002      	add	sp, #8
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80013d0:	46c0      	nop			; (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b002      	add	sp, #8
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e2:	230f      	movs	r3, #15
 80013e4:	18fb      	adds	r3, r7, r3
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013f2:	2380      	movs	r3, #128	; 0x80
 80013f4:	055b      	lsls	r3, r3, #21
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d011      	beq.n	800141e <HAL_ADC_ConfigChannel+0x46>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d00d      	beq.n	800141e <HAL_ADC_ConfigChannel+0x46>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001406:	2b02      	cmp	r3, #2
 8001408:	d009      	beq.n	800141e <HAL_ADC_ConfigChannel+0x46>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140e:	2b03      	cmp	r3, #3
 8001410:	d005      	beq.n	800141e <HAL_ADC_ConfigChannel+0x46>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001416:	2b04      	cmp	r3, #4
 8001418:	d001      	beq.n	800141e <HAL_ADC_ConfigChannel+0x46>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2234      	movs	r2, #52	; 0x34
 8001422:	5c9b      	ldrb	r3, [r3, r2]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d101      	bne.n	800142c <HAL_ADC_ConfigChannel+0x54>
 8001428:	2302      	movs	r3, #2
 800142a:	e0bb      	b.n	80015a4 <HAL_ADC_ConfigChannel+0x1cc>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2234      	movs	r2, #52	; 0x34
 8001430:	2101      	movs	r1, #1
 8001432:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2204      	movs	r2, #4
 800143c:	4013      	ands	r3, r2
 800143e:	d000      	beq.n	8001442 <HAL_ADC_ConfigChannel+0x6a>
 8001440:	e09f      	b.n	8001582 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	4a59      	ldr	r2, [pc, #356]	; (80015ac <HAL_ADC_ConfigChannel+0x1d4>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d100      	bne.n	800144e <HAL_ADC_ConfigChannel+0x76>
 800144c:	e077      	b.n	800153e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2201      	movs	r2, #1
 800145a:	409a      	lsls	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	430a      	orrs	r2, r1
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	055b      	lsls	r3, r3, #21
 800146c:	429a      	cmp	r2, r3
 800146e:	d037      	beq.n	80014e0 <HAL_ADC_ConfigChannel+0x108>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001474:	2b01      	cmp	r3, #1
 8001476:	d033      	beq.n	80014e0 <HAL_ADC_ConfigChannel+0x108>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	2b02      	cmp	r3, #2
 800147e:	d02f      	beq.n	80014e0 <HAL_ADC_ConfigChannel+0x108>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	2b03      	cmp	r3, #3
 8001486:	d02b      	beq.n	80014e0 <HAL_ADC_ConfigChannel+0x108>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148c:	2b04      	cmp	r3, #4
 800148e:	d027      	beq.n	80014e0 <HAL_ADC_ConfigChannel+0x108>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001494:	2b05      	cmp	r3, #5
 8001496:	d023      	beq.n	80014e0 <HAL_ADC_ConfigChannel+0x108>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149c:	2b06      	cmp	r3, #6
 800149e:	d01f      	beq.n	80014e0 <HAL_ADC_ConfigChannel+0x108>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	2b07      	cmp	r3, #7
 80014a6:	d01b      	beq.n	80014e0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	2107      	movs	r1, #7
 80014b4:	400b      	ands	r3, r1
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d012      	beq.n	80014e0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	695a      	ldr	r2, [r3, #20]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2107      	movs	r1, #7
 80014c6:	438a      	bics	r2, r1
 80014c8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6959      	ldr	r1, [r3, #20]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2207      	movs	r2, #7
 80014d6:	401a      	ands	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	430a      	orrs	r2, r1
 80014de:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b10      	cmp	r3, #16
 80014e6:	d003      	beq.n	80014f0 <HAL_ADC_ConfigChannel+0x118>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b11      	cmp	r3, #17
 80014ee:	d152      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80014f0:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <HAL_ADC_ConfigChannel+0x1d8>)
 80014f2:	6819      	ldr	r1, [r3, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b10      	cmp	r3, #16
 80014fa:	d102      	bne.n	8001502 <HAL_ADC_ConfigChannel+0x12a>
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	041b      	lsls	r3, r3, #16
 8001500:	e001      	b.n	8001506 <HAL_ADC_ConfigChannel+0x12e>
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	03db      	lsls	r3, r3, #15
 8001506:	4a2a      	ldr	r2, [pc, #168]	; (80015b0 <HAL_ADC_ConfigChannel+0x1d8>)
 8001508:	430b      	orrs	r3, r1
 800150a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b10      	cmp	r3, #16
 8001512:	d140      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001514:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <HAL_ADC_ConfigChannel+0x1dc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4927      	ldr	r1, [pc, #156]	; (80015b8 <HAL_ADC_ConfigChannel+0x1e0>)
 800151a:	0018      	movs	r0, r3
 800151c:	f7fe fdf4 	bl	8000108 <__udivsi3>
 8001520:	0003      	movs	r3, r0
 8001522:	001a      	movs	r2, r3
 8001524:	0013      	movs	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	189b      	adds	r3, r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800152e:	e002      	b.n	8001536 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	3b01      	subs	r3, #1
 8001534:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1f9      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x158>
 800153c:	e02b      	b.n	8001596 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2101      	movs	r1, #1
 800154a:	4099      	lsls	r1, r3
 800154c:	000b      	movs	r3, r1
 800154e:	43d9      	mvns	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	400a      	ands	r2, r1
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b10      	cmp	r3, #16
 800155e:	d003      	beq.n	8001568 <HAL_ADC_ConfigChannel+0x190>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b11      	cmp	r3, #17
 8001566:	d116      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_ADC_ConfigChannel+0x1d8>)
 800156a:	6819      	ldr	r1, [r3, #0]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b10      	cmp	r3, #16
 8001572:	d101      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x1a0>
 8001574:	4a11      	ldr	r2, [pc, #68]	; (80015bc <HAL_ADC_ConfigChannel+0x1e4>)
 8001576:	e000      	b.n	800157a <HAL_ADC_ConfigChannel+0x1a2>
 8001578:	4a11      	ldr	r2, [pc, #68]	; (80015c0 <HAL_ADC_ConfigChannel+0x1e8>)
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <HAL_ADC_ConfigChannel+0x1d8>)
 800157c:	400a      	ands	r2, r1
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	e009      	b.n	8001596 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001586:	2220      	movs	r2, #32
 8001588:	431a      	orrs	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800158e:	230f      	movs	r3, #15
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2234      	movs	r2, #52	; 0x34
 800159a:	2100      	movs	r1, #0
 800159c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800159e:	230f      	movs	r3, #15
 80015a0:	18fb      	adds	r3, r7, r3
 80015a2:	781b      	ldrb	r3, [r3, #0]
}
 80015a4:	0018      	movs	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b004      	add	sp, #16
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	00001001 	.word	0x00001001
 80015b0:	40012708 	.word	0x40012708
 80015b4:	20000000 	.word	0x20000000
 80015b8:	000f4240 	.word	0x000f4240
 80015bc:	ff7fffff 	.word	0xff7fffff
 80015c0:	ffbfffff 	.word	0xffbfffff

080015c4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2203      	movs	r2, #3
 80015dc:	4013      	ands	r3, r2
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d112      	bne.n	8001608 <ADC_Enable+0x44>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2201      	movs	r2, #1
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d009      	beq.n	8001604 <ADC_Enable+0x40>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	2380      	movs	r3, #128	; 0x80
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	401a      	ands	r2, r3
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	021b      	lsls	r3, r3, #8
 8001600:	429a      	cmp	r2, r3
 8001602:	d101      	bne.n	8001608 <ADC_Enable+0x44>
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <ADC_Enable+0x46>
 8001608:	2300      	movs	r3, #0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d152      	bne.n	80016b4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	4a2a      	ldr	r2, [pc, #168]	; (80016c0 <ADC_Enable+0xfc>)
 8001616:	4013      	ands	r3, r2
 8001618:	d00d      	beq.n	8001636 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800161e:	2210      	movs	r2, #16
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800162a:	2201      	movs	r2, #1
 800162c:	431a      	orrs	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e03f      	b.n	80016b6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2101      	movs	r1, #1
 8001642:	430a      	orrs	r2, r1
 8001644:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001646:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <ADC_Enable+0x100>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	491f      	ldr	r1, [pc, #124]	; (80016c8 <ADC_Enable+0x104>)
 800164c:	0018      	movs	r0, r3
 800164e:	f7fe fd5b 	bl	8000108 <__udivsi3>
 8001652:	0003      	movs	r3, r0
 8001654:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001656:	e002      	b.n	800165e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	3b01      	subs	r3, #1
 800165c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f9      	bne.n	8001658 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001664:	f7ff fcdc 	bl	8001020 <HAL_GetTick>
 8001668:	0003      	movs	r3, r0
 800166a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800166c:	e01b      	b.n	80016a6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800166e:	f7ff fcd7 	bl	8001020 <HAL_GetTick>
 8001672:	0002      	movs	r2, r0
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d914      	bls.n	80016a6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2201      	movs	r2, #1
 8001684:	4013      	ands	r3, r2
 8001686:	2b01      	cmp	r3, #1
 8001688:	d00d      	beq.n	80016a6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168e:	2210      	movs	r2, #16
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169a:	2201      	movs	r2, #1
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e007      	b.n	80016b6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2201      	movs	r2, #1
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d1dc      	bne.n	800166e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	0018      	movs	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b004      	add	sp, #16
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	80000017 	.word	0x80000017
 80016c4:	20000000 	.word	0x20000000
 80016c8:	000f4240 	.word	0x000f4240

080016cc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016de:	2250      	movs	r2, #80	; 0x50
 80016e0:	4013      	ands	r3, r2
 80016e2:	d140      	bne.n	8001766 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e8:	2280      	movs	r2, #128	; 0x80
 80016ea:	0092      	lsls	r2, r2, #2
 80016ec:	431a      	orrs	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	23c0      	movs	r3, #192	; 0xc0
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	4013      	ands	r3, r2
 80016fe:	d12d      	bne.n	800175c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001704:	2b00      	cmp	r3, #0
 8001706:	d129      	bne.n	800175c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2208      	movs	r2, #8
 8001710:	4013      	ands	r3, r2
 8001712:	2b08      	cmp	r3, #8
 8001714:	d122      	bne.n	800175c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2204      	movs	r2, #4
 800171e:	4013      	ands	r3, r2
 8001720:	d110      	bne.n	8001744 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	210c      	movs	r1, #12
 800172e:	438a      	bics	r2, r1
 8001730:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001736:	4a11      	ldr	r2, [pc, #68]	; (800177c <ADC_DMAConvCplt+0xb0>)
 8001738:	4013      	ands	r3, r2
 800173a:	2201      	movs	r2, #1
 800173c:	431a      	orrs	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	639a      	str	r2, [r3, #56]	; 0x38
 8001742:	e00b      	b.n	800175c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001748:	2220      	movs	r2, #32
 800174a:	431a      	orrs	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001754:	2201      	movs	r2, #1
 8001756:	431a      	orrs	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	0018      	movs	r0, r3
 8001760:	f7ff f81c 	bl	800079c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001764:	e005      	b.n	8001772 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	0010      	movs	r0, r2
 8001770:	4798      	blx	r3
}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	46bd      	mov	sp, r7
 8001776:	b004      	add	sp, #16
 8001778:	bd80      	pop	{r7, pc}
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	fffffefe 	.word	0xfffffefe

08001780 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	0018      	movs	r0, r3
 8001792:	f7ff fe11 	bl	80013b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	46bd      	mov	sp, r7
 800179a:	b004      	add	sp, #16
 800179c:	bd80      	pop	{r7, pc}

0800179e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b0:	2240      	movs	r2, #64	; 0x40
 80017b2:	431a      	orrs	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017bc:	2204      	movs	r2, #4
 80017be:	431a      	orrs	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	0018      	movs	r0, r3
 80017c8:	f7ff fdfe 	bl	80013c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017cc:	46c0      	nop			; (mov r8, r8)
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b004      	add	sp, #16
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017dc:	2317      	movs	r3, #23
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2234      	movs	r2, #52	; 0x34
 80017f0:	5c9b      	ldrb	r3, [r3, r2]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_ADCEx_Calibration_Start+0x26>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e08d      	b.n	8001916 <HAL_ADCEx_Calibration_Start+0x142>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2234      	movs	r2, #52	; 0x34
 80017fe:	2101      	movs	r1, #1
 8001800:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2203      	movs	r2, #3
 800180a:	4013      	ands	r3, r2
 800180c:	2b01      	cmp	r3, #1
 800180e:	d112      	bne.n	8001836 <HAL_ADCEx_Calibration_Start+0x62>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2201      	movs	r2, #1
 8001818:	4013      	ands	r3, r2
 800181a:	2b01      	cmp	r3, #1
 800181c:	d009      	beq.n	8001832 <HAL_ADCEx_Calibration_Start+0x5e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	401a      	ands	r2, r3
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	021b      	lsls	r3, r3, #8
 800182e:	429a      	cmp	r2, r3
 8001830:	d101      	bne.n	8001836 <HAL_ADCEx_Calibration_Start+0x62>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_ADCEx_Calibration_Start+0x64>
 8001836:	2300      	movs	r3, #0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d15b      	bne.n	80018f4 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001840:	4a37      	ldr	r2, [pc, #220]	; (8001920 <HAL_ADCEx_Calibration_Start+0x14c>)
 8001842:	4013      	ands	r3, r2
 8001844:	2202      	movs	r2, #2
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2203      	movs	r2, #3
 8001854:	4013      	ands	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2103      	movs	r1, #3
 8001864:	438a      	bics	r2, r1
 8001866:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2180      	movs	r1, #128	; 0x80
 8001874:	0609      	lsls	r1, r1, #24
 8001876:	430a      	orrs	r2, r1
 8001878:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800187a:	f7ff fbd1 	bl	8001020 <HAL_GetTick>
 800187e:	0003      	movs	r3, r0
 8001880:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001882:	e01d      	b.n	80018c0 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001884:	f7ff fbcc 	bl	8001020 <HAL_GetTick>
 8001888:	0002      	movs	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d916      	bls.n	80018c0 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	0fdb      	lsrs	r3, r3, #31
 800189a:	07da      	lsls	r2, r3, #31
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	061b      	lsls	r3, r3, #24
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d10d      	bne.n	80018c0 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a8:	2212      	movs	r2, #18
 80018aa:	4393      	bics	r3, r2
 80018ac:	2210      	movs	r2, #16
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2234      	movs	r2, #52	; 0x34
 80018b8:	2100      	movs	r1, #0
 80018ba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e02a      	b.n	8001916 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	0fdb      	lsrs	r3, r3, #31
 80018c8:	07da      	lsls	r2, r3, #31
 80018ca:	2380      	movs	r3, #128	; 0x80
 80018cc:	061b      	lsls	r3, r3, #24
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d0d8      	beq.n	8001884 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68d9      	ldr	r1, [r3, #12]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	430a      	orrs	r2, r1
 80018e0:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e6:	2203      	movs	r2, #3
 80018e8:	4393      	bics	r3, r2
 80018ea:	2201      	movs	r2, #1
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	639a      	str	r2, [r3, #56]	; 0x38
 80018f2:	e009      	b.n	8001908 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f8:	2220      	movs	r2, #32
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001900:	2317      	movs	r3, #23
 8001902:	18fb      	adds	r3, r7, r3
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2234      	movs	r2, #52	; 0x34
 800190c:	2100      	movs	r1, #0
 800190e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001910:	2317      	movs	r3, #23
 8001912:	18fb      	adds	r3, r7, r3
 8001914:	781b      	ldrb	r3, [r3, #0]
}
 8001916:	0018      	movs	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	b006      	add	sp, #24
 800191c:	bd80      	pop	{r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	fffffefd 	.word	0xfffffefd

08001924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	0002      	movs	r2, r0
 800192c:	1dfb      	adds	r3, r7, #7
 800192e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001930:	1dfb      	adds	r3, r7, #7
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b7f      	cmp	r3, #127	; 0x7f
 8001936:	d809      	bhi.n	800194c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001938:	1dfb      	adds	r3, r7, #7
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	001a      	movs	r2, r3
 800193e:	231f      	movs	r3, #31
 8001940:	401a      	ands	r2, r3
 8001942:	4b04      	ldr	r3, [pc, #16]	; (8001954 <__NVIC_EnableIRQ+0x30>)
 8001944:	2101      	movs	r1, #1
 8001946:	4091      	lsls	r1, r2
 8001948:	000a      	movs	r2, r1
 800194a:	601a      	str	r2, [r3, #0]
  }
}
 800194c:	46c0      	nop			; (mov r8, r8)
 800194e:	46bd      	mov	sp, r7
 8001950:	b002      	add	sp, #8
 8001952:	bd80      	pop	{r7, pc}
 8001954:	e000e100 	.word	0xe000e100

08001958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	0002      	movs	r2, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001966:	1dfb      	adds	r3, r7, #7
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b7f      	cmp	r3, #127	; 0x7f
 800196c:	d828      	bhi.n	80019c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800196e:	4a2f      	ldr	r2, [pc, #188]	; (8001a2c <__NVIC_SetPriority+0xd4>)
 8001970:	1dfb      	adds	r3, r7, #7
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	b25b      	sxtb	r3, r3
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	33c0      	adds	r3, #192	; 0xc0
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	589b      	ldr	r3, [r3, r2]
 800197e:	1dfa      	adds	r2, r7, #7
 8001980:	7812      	ldrb	r2, [r2, #0]
 8001982:	0011      	movs	r1, r2
 8001984:	2203      	movs	r2, #3
 8001986:	400a      	ands	r2, r1
 8001988:	00d2      	lsls	r2, r2, #3
 800198a:	21ff      	movs	r1, #255	; 0xff
 800198c:	4091      	lsls	r1, r2
 800198e:	000a      	movs	r2, r1
 8001990:	43d2      	mvns	r2, r2
 8001992:	401a      	ands	r2, r3
 8001994:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	019b      	lsls	r3, r3, #6
 800199a:	22ff      	movs	r2, #255	; 0xff
 800199c:	401a      	ands	r2, r3
 800199e:	1dfb      	adds	r3, r7, #7
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	0018      	movs	r0, r3
 80019a4:	2303      	movs	r3, #3
 80019a6:	4003      	ands	r3, r0
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019ac:	481f      	ldr	r0, [pc, #124]	; (8001a2c <__NVIC_SetPriority+0xd4>)
 80019ae:	1dfb      	adds	r3, r7, #7
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	b25b      	sxtb	r3, r3
 80019b4:	089b      	lsrs	r3, r3, #2
 80019b6:	430a      	orrs	r2, r1
 80019b8:	33c0      	adds	r3, #192	; 0xc0
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019be:	e031      	b.n	8001a24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019c0:	4a1b      	ldr	r2, [pc, #108]	; (8001a30 <__NVIC_SetPriority+0xd8>)
 80019c2:	1dfb      	adds	r3, r7, #7
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	0019      	movs	r1, r3
 80019c8:	230f      	movs	r3, #15
 80019ca:	400b      	ands	r3, r1
 80019cc:	3b08      	subs	r3, #8
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	3306      	adds	r3, #6
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	18d3      	adds	r3, r2, r3
 80019d6:	3304      	adds	r3, #4
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	1dfa      	adds	r2, r7, #7
 80019dc:	7812      	ldrb	r2, [r2, #0]
 80019de:	0011      	movs	r1, r2
 80019e0:	2203      	movs	r2, #3
 80019e2:	400a      	ands	r2, r1
 80019e4:	00d2      	lsls	r2, r2, #3
 80019e6:	21ff      	movs	r1, #255	; 0xff
 80019e8:	4091      	lsls	r1, r2
 80019ea:	000a      	movs	r2, r1
 80019ec:	43d2      	mvns	r2, r2
 80019ee:	401a      	ands	r2, r3
 80019f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	019b      	lsls	r3, r3, #6
 80019f6:	22ff      	movs	r2, #255	; 0xff
 80019f8:	401a      	ands	r2, r3
 80019fa:	1dfb      	adds	r3, r7, #7
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	0018      	movs	r0, r3
 8001a00:	2303      	movs	r3, #3
 8001a02:	4003      	ands	r3, r0
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a08:	4809      	ldr	r0, [pc, #36]	; (8001a30 <__NVIC_SetPriority+0xd8>)
 8001a0a:	1dfb      	adds	r3, r7, #7
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	001c      	movs	r4, r3
 8001a10:	230f      	movs	r3, #15
 8001a12:	4023      	ands	r3, r4
 8001a14:	3b08      	subs	r3, #8
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	3306      	adds	r3, #6
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	18c3      	adds	r3, r0, r3
 8001a20:	3304      	adds	r3, #4
 8001a22:	601a      	str	r2, [r3, #0]
}
 8001a24:	46c0      	nop			; (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b003      	add	sp, #12
 8001a2a:	bd90      	pop	{r4, r7, pc}
 8001a2c:	e000e100 	.word	0xe000e100
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	1e5a      	subs	r2, r3, #1
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	045b      	lsls	r3, r3, #17
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d301      	bcc.n	8001a4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e010      	b.n	8001a6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <SysTick_Config+0x44>)
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	3a01      	subs	r2, #1
 8001a52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a54:	2301      	movs	r3, #1
 8001a56:	425b      	negs	r3, r3
 8001a58:	2103      	movs	r1, #3
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f7ff ff7c 	bl	8001958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <SysTick_Config+0x44>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <SysTick_Config+0x44>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	0018      	movs	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b002      	add	sp, #8
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	210f      	movs	r1, #15
 8001a88:	187b      	adds	r3, r7, r1
 8001a8a:	1c02      	adds	r2, r0, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	187b      	adds	r3, r7, r1
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	0011      	movs	r1, r2
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f7ff ff5d 	bl	8001958 <__NVIC_SetPriority>
}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b004      	add	sp, #16
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	0002      	movs	r2, r0
 8001aae:	1dfb      	adds	r3, r7, #7
 8001ab0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab2:	1dfb      	adds	r3, r7, #7
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	b25b      	sxtb	r3, r3
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f7ff ff33 	bl	8001924 <__NVIC_EnableIRQ>
}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	b002      	add	sp, #8
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f7ff ffaf 	bl	8001a34 <SysTick_Config>
 8001ad6:	0003      	movs	r3, r0
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b002      	add	sp, #8
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e036      	b.n	8001b64 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2221      	movs	r2, #33	; 0x21
 8001afa:	2102      	movs	r1, #2
 8001afc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4a18      	ldr	r2, [pc, #96]	; (8001b6c <HAL_DMA_Init+0x8c>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	0018      	movs	r0, r3
 8001b48:	f000 f946 	bl	8001dd8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2221      	movs	r2, #33	; 0x21
 8001b56:	2101      	movs	r1, #1
 8001b58:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	2100      	movs	r1, #0
 8001b60:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}  
 8001b64:	0018      	movs	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b004      	add	sp, #16
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	ffffc00f 	.word	0xffffc00f

08001b70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001b7e:	2317      	movs	r3, #23
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	5c9b      	ldrb	r3, [r3, r2]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <HAL_DMA_Start_IT+0x24>
 8001b90:	2302      	movs	r3, #2
 8001b92:	e04f      	b.n	8001c34 <HAL_DMA_Start_IT+0xc4>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2220      	movs	r2, #32
 8001b98:	2101      	movs	r1, #1
 8001b9a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2221      	movs	r2, #33	; 0x21
 8001ba0:	5c9b      	ldrb	r3, [r3, r2]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d13a      	bne.n	8001c1e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2221      	movs	r2, #33	; 0x21
 8001bac:	2102      	movs	r1, #2
 8001bae:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	438a      	bics	r2, r1
 8001bc4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	68b9      	ldr	r1, [r7, #8]
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f000 f8d7 	bl	8001d80 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d008      	beq.n	8001bec <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	210e      	movs	r1, #14
 8001be6:	430a      	orrs	r2, r1
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	e00f      	b.n	8001c0c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	210a      	movs	r1, #10
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2104      	movs	r1, #4
 8001c08:	438a      	bics	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2101      	movs	r1, #1
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	e007      	b.n	8001c2e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2220      	movs	r2, #32
 8001c22:	2100      	movs	r1, #0
 8001c24:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001c26:	2317      	movs	r3, #23
 8001c28:	18fb      	adds	r3, r7, r3
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8001c2e:	2317      	movs	r3, #23
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	781b      	ldrb	r3, [r3, #0]
} 
 8001c34:	0018      	movs	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b006      	add	sp, #24
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	2204      	movs	r2, #4
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	0013      	movs	r3, r2
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	4013      	ands	r3, r2
 8001c62:	d024      	beq.n	8001cae <HAL_DMA_IRQHandler+0x72>
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2204      	movs	r2, #4
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d020      	beq.n	8001cae <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2220      	movs	r2, #32
 8001c74:	4013      	ands	r3, r2
 8001c76:	d107      	bne.n	8001c88 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2104      	movs	r1, #4
 8001c84:	438a      	bics	r2, r1
 8001c86:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c90:	2104      	movs	r1, #4
 8001c92:	4091      	lsls	r1, r2
 8001c94:	000a      	movs	r2, r1
 8001c96:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d100      	bne.n	8001ca2 <HAL_DMA_IRQHandler+0x66>
 8001ca0:	e06a      	b.n	8001d78 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	0010      	movs	r0, r2
 8001caa:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001cac:	e064      	b.n	8001d78 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	0013      	movs	r3, r2
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d02b      	beq.n	8001d16 <HAL_DMA_IRQHandler+0xda>
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d027      	beq.n	8001d16 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d10b      	bne.n	8001cea <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	210a      	movs	r1, #10
 8001cde:	438a      	bics	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2221      	movs	r2, #33	; 0x21
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf2:	2102      	movs	r1, #2
 8001cf4:	4091      	lsls	r1, r2
 8001cf6:	000a      	movs	r2, r1
 8001cf8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	2100      	movs	r1, #0
 8001d00:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d036      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	0010      	movs	r0, r2
 8001d12:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001d14:	e030      	b.n	8001d78 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	2208      	movs	r2, #8
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	0013      	movs	r3, r2
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	4013      	ands	r3, r2
 8001d24:	d028      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x13c>
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2208      	movs	r2, #8
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d024      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	210e      	movs	r1, #14
 8001d3a:	438a      	bics	r2, r1
 8001d3c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d46:	2101      	movs	r1, #1
 8001d48:	4091      	lsls	r1, r2
 8001d4a:	000a      	movs	r2, r1
 8001d4c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2221      	movs	r2, #33	; 0x21
 8001d58:	2101      	movs	r1, #1
 8001d5a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	2100      	movs	r1, #0
 8001d62:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	0010      	movs	r0, r2
 8001d74:	4798      	blx	r3
    }
   }
}  
 8001d76:	e7ff      	b.n	8001d78 <HAL_DMA_IRQHandler+0x13c>
 8001d78:	46c0      	nop			; (mov r8, r8)
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b004      	add	sp, #16
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d96:	2101      	movs	r1, #1
 8001d98:	4091      	lsls	r1, r2
 8001d9a:	000a      	movs	r2, r1
 8001d9c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b10      	cmp	r3, #16
 8001dac:	d108      	bne.n	8001dc0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001dbe:	e007      	b.n	8001dd0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	60da      	str	r2, [r3, #12]
}
 8001dd0:	46c0      	nop			; (mov r8, r8)
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	b004      	add	sp, #16
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <DMA_CalcBaseAndBitshift+0x30>)
 8001de6:	4694      	mov	ip, r2
 8001de8:	4463      	add	r3, ip
 8001dea:	2114      	movs	r1, #20
 8001dec:	0018      	movs	r0, r3
 8001dee:	f7fe f98b 	bl	8000108 <__udivsi3>
 8001df2:	0003      	movs	r3, r0
 8001df4:	009a      	lsls	r2, r3, #2
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a03      	ldr	r2, [pc, #12]	; (8001e0c <DMA_CalcBaseAndBitshift+0x34>)
 8001dfe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001e00:	46c0      	nop			; (mov r8, r8)
 8001e02:	46bd      	mov	sp, r7
 8001e04:	b002      	add	sp, #8
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	bffdfff8 	.word	0xbffdfff8
 8001e0c:	40020000 	.word	0x40020000

08001e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1e:	e14f      	b.n	80020c0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2101      	movs	r1, #1
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	4091      	lsls	r1, r2
 8001e2a:	000a      	movs	r2, r1
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d100      	bne.n	8001e38 <HAL_GPIO_Init+0x28>
 8001e36:	e140      	b.n	80020ba <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d005      	beq.n	8001e50 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2203      	movs	r2, #3
 8001e4a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d130      	bne.n	8001eb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	0013      	movs	r3, r2
 8001e60:	43da      	mvns	r2, r3
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	409a      	lsls	r2, r3
 8001e72:	0013      	movs	r3, r2
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e86:	2201      	movs	r2, #1
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	0013      	movs	r3, r2
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	091b      	lsrs	r3, r3, #4
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	0013      	movs	r3, r2
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d017      	beq.n	8001eee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	2203      	movs	r2, #3
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	0013      	movs	r3, r2
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	0013      	movs	r3, r2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d123      	bne.n	8001f42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	08da      	lsrs	r2, r3, #3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3208      	adds	r2, #8
 8001f02:	0092      	lsls	r2, r2, #2
 8001f04:	58d3      	ldr	r3, [r2, r3]
 8001f06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	2207      	movs	r2, #7
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	220f      	movs	r2, #15
 8001f12:	409a      	lsls	r2, r3
 8001f14:	0013      	movs	r3, r2
 8001f16:	43da      	mvns	r2, r3
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	691a      	ldr	r2, [r3, #16]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2107      	movs	r1, #7
 8001f26:	400b      	ands	r3, r1
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	0013      	movs	r3, r2
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	08da      	lsrs	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3208      	adds	r2, #8
 8001f3c:	0092      	lsls	r2, r2, #2
 8001f3e:	6939      	ldr	r1, [r7, #16]
 8001f40:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	0013      	movs	r3, r2
 8001f52:	43da      	mvns	r2, r3
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2203      	movs	r2, #3
 8001f60:	401a      	ands	r2, r3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	409a      	lsls	r2, r3
 8001f68:	0013      	movs	r3, r2
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	23c0      	movs	r3, #192	; 0xc0
 8001f7c:	029b      	lsls	r3, r3, #10
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d100      	bne.n	8001f84 <HAL_GPIO_Init+0x174>
 8001f82:	e09a      	b.n	80020ba <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f84:	4b54      	ldr	r3, [pc, #336]	; (80020d8 <HAL_GPIO_Init+0x2c8>)
 8001f86:	699a      	ldr	r2, [r3, #24]
 8001f88:	4b53      	ldr	r3, [pc, #332]	; (80020d8 <HAL_GPIO_Init+0x2c8>)
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	619a      	str	r2, [r3, #24]
 8001f90:	4b51      	ldr	r3, [pc, #324]	; (80020d8 <HAL_GPIO_Init+0x2c8>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	2201      	movs	r2, #1
 8001f96:	4013      	ands	r3, r2
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f9c:	4a4f      	ldr	r2, [pc, #316]	; (80020dc <HAL_GPIO_Init+0x2cc>)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	089b      	lsrs	r3, r3, #2
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	589b      	ldr	r3, [r3, r2]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2203      	movs	r2, #3
 8001fae:	4013      	ands	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	0013      	movs	r3, r2
 8001fb8:	43da      	mvns	r2, r3
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	2390      	movs	r3, #144	; 0x90
 8001fc4:	05db      	lsls	r3, r3, #23
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d013      	beq.n	8001ff2 <HAL_GPIO_Init+0x1e2>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a44      	ldr	r2, [pc, #272]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d00d      	beq.n	8001fee <HAL_GPIO_Init+0x1de>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a43      	ldr	r2, [pc, #268]	; (80020e4 <HAL_GPIO_Init+0x2d4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d007      	beq.n	8001fea <HAL_GPIO_Init+0x1da>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a42      	ldr	r2, [pc, #264]	; (80020e8 <HAL_GPIO_Init+0x2d8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d101      	bne.n	8001fe6 <HAL_GPIO_Init+0x1d6>
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e006      	b.n	8001ff4 <HAL_GPIO_Init+0x1e4>
 8001fe6:	2305      	movs	r3, #5
 8001fe8:	e004      	b.n	8001ff4 <HAL_GPIO_Init+0x1e4>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e002      	b.n	8001ff4 <HAL_GPIO_Init+0x1e4>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <HAL_GPIO_Init+0x1e4>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	2103      	movs	r1, #3
 8001ff8:	400a      	ands	r2, r1
 8001ffa:	0092      	lsls	r2, r2, #2
 8001ffc:	4093      	lsls	r3, r2
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002004:	4935      	ldr	r1, [pc, #212]	; (80020dc <HAL_GPIO_Init+0x2cc>)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	3302      	adds	r3, #2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002012:	4b36      	ldr	r3, [pc, #216]	; (80020ec <HAL_GPIO_Init+0x2dc>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	43da      	mvns	r2, r3
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4013      	ands	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	025b      	lsls	r3, r3, #9
 800202a:	4013      	ands	r3, r2
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002036:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_GPIO_Init+0x2dc>)
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800203c:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <HAL_GPIO_Init+0x2dc>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	43da      	mvns	r2, r3
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4013      	ands	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	029b      	lsls	r3, r3, #10
 8002054:	4013      	ands	r3, r2
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4313      	orrs	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002060:	4b22      	ldr	r3, [pc, #136]	; (80020ec <HAL_GPIO_Init+0x2dc>)
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002066:	4b21      	ldr	r3, [pc, #132]	; (80020ec <HAL_GPIO_Init+0x2dc>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	43da      	mvns	r2, r3
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	035b      	lsls	r3, r3, #13
 800207e:	4013      	ands	r3, r2
 8002080:	d003      	beq.n	800208a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4313      	orrs	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800208a:	4b18      	ldr	r3, [pc, #96]	; (80020ec <HAL_GPIO_Init+0x2dc>)
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_GPIO_Init+0x2dc>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	43da      	mvns	r2, r3
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4013      	ands	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	039b      	lsls	r3, r3, #14
 80020a8:	4013      	ands	r3, r2
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020b4:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_GPIO_Init+0x2dc>)
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	3301      	adds	r3, #1
 80020be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	40da      	lsrs	r2, r3
 80020c8:	1e13      	subs	r3, r2, #0
 80020ca:	d000      	beq.n	80020ce <HAL_GPIO_Init+0x2be>
 80020cc:	e6a8      	b.n	8001e20 <HAL_GPIO_Init+0x10>
  } 
}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	46c0      	nop			; (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b006      	add	sp, #24
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40010000 	.word	0x40010000
 80020e0:	48000400 	.word	0x48000400
 80020e4:	48000800 	.word	0x48000800
 80020e8:	48000c00 	.word	0x48000c00
 80020ec:	40010400 	.word	0x40010400

080020f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	0008      	movs	r0, r1
 80020fa:	0011      	movs	r1, r2
 80020fc:	1cbb      	adds	r3, r7, #2
 80020fe:	1c02      	adds	r2, r0, #0
 8002100:	801a      	strh	r2, [r3, #0]
 8002102:	1c7b      	adds	r3, r7, #1
 8002104:	1c0a      	adds	r2, r1, #0
 8002106:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002108:	1c7b      	adds	r3, r7, #1
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d004      	beq.n	800211a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002110:	1cbb      	adds	r3, r7, #2
 8002112:	881a      	ldrh	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002118:	e003      	b.n	8002122 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800211a:	1cbb      	adds	r3, r7, #2
 800211c:	881a      	ldrh	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	46bd      	mov	sp, r7
 8002126:	b002      	add	sp, #8
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e301      	b.n	8002742 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2201      	movs	r2, #1
 8002144:	4013      	ands	r3, r2
 8002146:	d100      	bne.n	800214a <HAL_RCC_OscConfig+0x1e>
 8002148:	e08d      	b.n	8002266 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800214a:	4bc3      	ldr	r3, [pc, #780]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	220c      	movs	r2, #12
 8002150:	4013      	ands	r3, r2
 8002152:	2b04      	cmp	r3, #4
 8002154:	d00e      	beq.n	8002174 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002156:	4bc0      	ldr	r3, [pc, #768]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	220c      	movs	r2, #12
 800215c:	4013      	ands	r3, r2
 800215e:	2b08      	cmp	r3, #8
 8002160:	d116      	bne.n	8002190 <HAL_RCC_OscConfig+0x64>
 8002162:	4bbd      	ldr	r3, [pc, #756]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	025b      	lsls	r3, r3, #9
 800216a:	401a      	ands	r2, r3
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	025b      	lsls	r3, r3, #9
 8002170:	429a      	cmp	r2, r3
 8002172:	d10d      	bne.n	8002190 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002174:	4bb8      	ldr	r3, [pc, #736]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	029b      	lsls	r3, r3, #10
 800217c:	4013      	ands	r3, r2
 800217e:	d100      	bne.n	8002182 <HAL_RCC_OscConfig+0x56>
 8002180:	e070      	b.n	8002264 <HAL_RCC_OscConfig+0x138>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d000      	beq.n	800218c <HAL_RCC_OscConfig+0x60>
 800218a:	e06b      	b.n	8002264 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e2d8      	b.n	8002742 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d107      	bne.n	80021a8 <HAL_RCC_OscConfig+0x7c>
 8002198:	4baf      	ldr	r3, [pc, #700]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4bae      	ldr	r3, [pc, #696]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 800219e:	2180      	movs	r1, #128	; 0x80
 80021a0:	0249      	lsls	r1, r1, #9
 80021a2:	430a      	orrs	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	e02f      	b.n	8002208 <HAL_RCC_OscConfig+0xdc>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10c      	bne.n	80021ca <HAL_RCC_OscConfig+0x9e>
 80021b0:	4ba9      	ldr	r3, [pc, #676]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4ba8      	ldr	r3, [pc, #672]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 80021b6:	49a9      	ldr	r1, [pc, #676]	; (800245c <HAL_RCC_OscConfig+0x330>)
 80021b8:	400a      	ands	r2, r1
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	4ba6      	ldr	r3, [pc, #664]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4ba5      	ldr	r3, [pc, #660]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 80021c2:	49a7      	ldr	r1, [pc, #668]	; (8002460 <HAL_RCC_OscConfig+0x334>)
 80021c4:	400a      	ands	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	e01e      	b.n	8002208 <HAL_RCC_OscConfig+0xdc>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b05      	cmp	r3, #5
 80021d0:	d10e      	bne.n	80021f0 <HAL_RCC_OscConfig+0xc4>
 80021d2:	4ba1      	ldr	r3, [pc, #644]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4ba0      	ldr	r3, [pc, #640]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 80021d8:	2180      	movs	r1, #128	; 0x80
 80021da:	02c9      	lsls	r1, r1, #11
 80021dc:	430a      	orrs	r2, r1
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	4b9d      	ldr	r3, [pc, #628]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4b9c      	ldr	r3, [pc, #624]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 80021e6:	2180      	movs	r1, #128	; 0x80
 80021e8:	0249      	lsls	r1, r1, #9
 80021ea:	430a      	orrs	r2, r1
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	e00b      	b.n	8002208 <HAL_RCC_OscConfig+0xdc>
 80021f0:	4b99      	ldr	r3, [pc, #612]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b98      	ldr	r3, [pc, #608]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 80021f6:	4999      	ldr	r1, [pc, #612]	; (800245c <HAL_RCC_OscConfig+0x330>)
 80021f8:	400a      	ands	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	4b96      	ldr	r3, [pc, #600]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4b95      	ldr	r3, [pc, #596]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 8002202:	4997      	ldr	r1, [pc, #604]	; (8002460 <HAL_RCC_OscConfig+0x334>)
 8002204:	400a      	ands	r2, r1
 8002206:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d014      	beq.n	800223a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7fe ff06 	bl	8001020 <HAL_GetTick>
 8002214:	0003      	movs	r3, r0
 8002216:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800221a:	f7fe ff01 	bl	8001020 <HAL_GetTick>
 800221e:	0002      	movs	r2, r0
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b64      	cmp	r3, #100	; 0x64
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e28a      	b.n	8002742 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222c:	4b8a      	ldr	r3, [pc, #552]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	029b      	lsls	r3, r3, #10
 8002234:	4013      	ands	r3, r2
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0xee>
 8002238:	e015      	b.n	8002266 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223a:	f7fe fef1 	bl	8001020 <HAL_GetTick>
 800223e:	0003      	movs	r3, r0
 8002240:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002244:	f7fe feec 	bl	8001020 <HAL_GetTick>
 8002248:	0002      	movs	r2, r0
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	; 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e275      	b.n	8002742 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002256:	4b80      	ldr	r3, [pc, #512]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	029b      	lsls	r3, r3, #10
 800225e:	4013      	ands	r3, r2
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x118>
 8002262:	e000      	b.n	8002266 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002264:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2202      	movs	r2, #2
 800226c:	4013      	ands	r3, r2
 800226e:	d100      	bne.n	8002272 <HAL_RCC_OscConfig+0x146>
 8002270:	e069      	b.n	8002346 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002272:	4b79      	ldr	r3, [pc, #484]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	220c      	movs	r2, #12
 8002278:	4013      	ands	r3, r2
 800227a:	d00b      	beq.n	8002294 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800227c:	4b76      	ldr	r3, [pc, #472]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	220c      	movs	r2, #12
 8002282:	4013      	ands	r3, r2
 8002284:	2b08      	cmp	r3, #8
 8002286:	d11c      	bne.n	80022c2 <HAL_RCC_OscConfig+0x196>
 8002288:	4b73      	ldr	r3, [pc, #460]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	025b      	lsls	r3, r3, #9
 8002290:	4013      	ands	r3, r2
 8002292:	d116      	bne.n	80022c2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002294:	4b70      	ldr	r3, [pc, #448]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2202      	movs	r2, #2
 800229a:	4013      	ands	r3, r2
 800229c:	d005      	beq.n	80022aa <HAL_RCC_OscConfig+0x17e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d001      	beq.n	80022aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e24b      	b.n	8002742 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022aa:	4b6b      	ldr	r3, [pc, #428]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	22f8      	movs	r2, #248	; 0xf8
 80022b0:	4393      	bics	r3, r2
 80022b2:	0019      	movs	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	00da      	lsls	r2, r3, #3
 80022ba:	4b67      	ldr	r3, [pc, #412]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 80022bc:	430a      	orrs	r2, r1
 80022be:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c0:	e041      	b.n	8002346 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d024      	beq.n	8002314 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ca:	4b63      	ldr	r3, [pc, #396]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	4b62      	ldr	r3, [pc, #392]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 80022d0:	2101      	movs	r1, #1
 80022d2:	430a      	orrs	r2, r1
 80022d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d6:	f7fe fea3 	bl	8001020 <HAL_GetTick>
 80022da:	0003      	movs	r3, r0
 80022dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e0:	f7fe fe9e 	bl	8001020 <HAL_GetTick>
 80022e4:	0002      	movs	r2, r0
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e227      	b.n	8002742 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f2:	4b59      	ldr	r3, [pc, #356]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2202      	movs	r2, #2
 80022f8:	4013      	ands	r3, r2
 80022fa:	d0f1      	beq.n	80022e0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fc:	4b56      	ldr	r3, [pc, #344]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	22f8      	movs	r2, #248	; 0xf8
 8002302:	4393      	bics	r3, r2
 8002304:	0019      	movs	r1, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	00da      	lsls	r2, r3, #3
 800230c:	4b52      	ldr	r3, [pc, #328]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 800230e:	430a      	orrs	r2, r1
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	e018      	b.n	8002346 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002314:	4b50      	ldr	r3, [pc, #320]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b4f      	ldr	r3, [pc, #316]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 800231a:	2101      	movs	r1, #1
 800231c:	438a      	bics	r2, r1
 800231e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7fe fe7e 	bl	8001020 <HAL_GetTick>
 8002324:	0003      	movs	r3, r0
 8002326:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800232a:	f7fe fe79 	bl	8001020 <HAL_GetTick>
 800232e:	0002      	movs	r2, r0
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e202      	b.n	8002742 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233c:	4b46      	ldr	r3, [pc, #280]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2202      	movs	r2, #2
 8002342:	4013      	ands	r3, r2
 8002344:	d1f1      	bne.n	800232a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2208      	movs	r2, #8
 800234c:	4013      	ands	r3, r2
 800234e:	d036      	beq.n	80023be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d019      	beq.n	800238c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002358:	4b3f      	ldr	r3, [pc, #252]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 800235a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800235c:	4b3e      	ldr	r3, [pc, #248]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 800235e:	2101      	movs	r1, #1
 8002360:	430a      	orrs	r2, r1
 8002362:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002364:	f7fe fe5c 	bl	8001020 <HAL_GetTick>
 8002368:	0003      	movs	r3, r0
 800236a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800236e:	f7fe fe57 	bl	8001020 <HAL_GetTick>
 8002372:	0002      	movs	r2, r0
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e1e0      	b.n	8002742 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002380:	4b35      	ldr	r3, [pc, #212]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	2202      	movs	r2, #2
 8002386:	4013      	ands	r3, r2
 8002388:	d0f1      	beq.n	800236e <HAL_RCC_OscConfig+0x242>
 800238a:	e018      	b.n	80023be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800238c:	4b32      	ldr	r3, [pc, #200]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 800238e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002390:	4b31      	ldr	r3, [pc, #196]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 8002392:	2101      	movs	r1, #1
 8002394:	438a      	bics	r2, r1
 8002396:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002398:	f7fe fe42 	bl	8001020 <HAL_GetTick>
 800239c:	0003      	movs	r3, r0
 800239e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023a2:	f7fe fe3d 	bl	8001020 <HAL_GetTick>
 80023a6:	0002      	movs	r2, r0
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e1c6      	b.n	8002742 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b4:	4b28      	ldr	r3, [pc, #160]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	2202      	movs	r2, #2
 80023ba:	4013      	ands	r3, r2
 80023bc:	d1f1      	bne.n	80023a2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2204      	movs	r2, #4
 80023c4:	4013      	ands	r3, r2
 80023c6:	d100      	bne.n	80023ca <HAL_RCC_OscConfig+0x29e>
 80023c8:	e0b4      	b.n	8002534 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ca:	201f      	movs	r0, #31
 80023cc:	183b      	adds	r3, r7, r0
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d2:	4b21      	ldr	r3, [pc, #132]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 80023d4:	69da      	ldr	r2, [r3, #28]
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	055b      	lsls	r3, r3, #21
 80023da:	4013      	ands	r3, r2
 80023dc:	d110      	bne.n	8002400 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 80023e0:	69da      	ldr	r2, [r3, #28]
 80023e2:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 80023e4:	2180      	movs	r1, #128	; 0x80
 80023e6:	0549      	lsls	r1, r1, #21
 80023e8:	430a      	orrs	r2, r1
 80023ea:	61da      	str	r2, [r3, #28]
 80023ec:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 80023ee:	69da      	ldr	r2, [r3, #28]
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	055b      	lsls	r3, r3, #21
 80023f4:	4013      	ands	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023fa:	183b      	adds	r3, r7, r0
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002400:	4b18      	ldr	r3, [pc, #96]	; (8002464 <HAL_RCC_OscConfig+0x338>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4013      	ands	r3, r2
 800240a:	d11a      	bne.n	8002442 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800240c:	4b15      	ldr	r3, [pc, #84]	; (8002464 <HAL_RCC_OscConfig+0x338>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b14      	ldr	r3, [pc, #80]	; (8002464 <HAL_RCC_OscConfig+0x338>)
 8002412:	2180      	movs	r1, #128	; 0x80
 8002414:	0049      	lsls	r1, r1, #1
 8002416:	430a      	orrs	r2, r1
 8002418:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241a:	f7fe fe01 	bl	8001020 <HAL_GetTick>
 800241e:	0003      	movs	r3, r0
 8002420:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002424:	f7fe fdfc 	bl	8001020 <HAL_GetTick>
 8002428:	0002      	movs	r2, r0
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	; 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e185      	b.n	8002742 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002436:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_RCC_OscConfig+0x338>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4013      	ands	r3, r2
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d10e      	bne.n	8002468 <HAL_RCC_OscConfig+0x33c>
 800244a:	4b03      	ldr	r3, [pc, #12]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 800244c:	6a1a      	ldr	r2, [r3, #32]
 800244e:	4b02      	ldr	r3, [pc, #8]	; (8002458 <HAL_RCC_OscConfig+0x32c>)
 8002450:	2101      	movs	r1, #1
 8002452:	430a      	orrs	r2, r1
 8002454:	621a      	str	r2, [r3, #32]
 8002456:	e035      	b.n	80024c4 <HAL_RCC_OscConfig+0x398>
 8002458:	40021000 	.word	0x40021000
 800245c:	fffeffff 	.word	0xfffeffff
 8002460:	fffbffff 	.word	0xfffbffff
 8002464:	40007000 	.word	0x40007000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10c      	bne.n	800248a <HAL_RCC_OscConfig+0x35e>
 8002470:	4bb6      	ldr	r3, [pc, #728]	; (800274c <HAL_RCC_OscConfig+0x620>)
 8002472:	6a1a      	ldr	r2, [r3, #32]
 8002474:	4bb5      	ldr	r3, [pc, #724]	; (800274c <HAL_RCC_OscConfig+0x620>)
 8002476:	2101      	movs	r1, #1
 8002478:	438a      	bics	r2, r1
 800247a:	621a      	str	r2, [r3, #32]
 800247c:	4bb3      	ldr	r3, [pc, #716]	; (800274c <HAL_RCC_OscConfig+0x620>)
 800247e:	6a1a      	ldr	r2, [r3, #32]
 8002480:	4bb2      	ldr	r3, [pc, #712]	; (800274c <HAL_RCC_OscConfig+0x620>)
 8002482:	2104      	movs	r1, #4
 8002484:	438a      	bics	r2, r1
 8002486:	621a      	str	r2, [r3, #32]
 8002488:	e01c      	b.n	80024c4 <HAL_RCC_OscConfig+0x398>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b05      	cmp	r3, #5
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0x380>
 8002492:	4bae      	ldr	r3, [pc, #696]	; (800274c <HAL_RCC_OscConfig+0x620>)
 8002494:	6a1a      	ldr	r2, [r3, #32]
 8002496:	4bad      	ldr	r3, [pc, #692]	; (800274c <HAL_RCC_OscConfig+0x620>)
 8002498:	2104      	movs	r1, #4
 800249a:	430a      	orrs	r2, r1
 800249c:	621a      	str	r2, [r3, #32]
 800249e:	4bab      	ldr	r3, [pc, #684]	; (800274c <HAL_RCC_OscConfig+0x620>)
 80024a0:	6a1a      	ldr	r2, [r3, #32]
 80024a2:	4baa      	ldr	r3, [pc, #680]	; (800274c <HAL_RCC_OscConfig+0x620>)
 80024a4:	2101      	movs	r1, #1
 80024a6:	430a      	orrs	r2, r1
 80024a8:	621a      	str	r2, [r3, #32]
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_OscConfig+0x398>
 80024ac:	4ba7      	ldr	r3, [pc, #668]	; (800274c <HAL_RCC_OscConfig+0x620>)
 80024ae:	6a1a      	ldr	r2, [r3, #32]
 80024b0:	4ba6      	ldr	r3, [pc, #664]	; (800274c <HAL_RCC_OscConfig+0x620>)
 80024b2:	2101      	movs	r1, #1
 80024b4:	438a      	bics	r2, r1
 80024b6:	621a      	str	r2, [r3, #32]
 80024b8:	4ba4      	ldr	r3, [pc, #656]	; (800274c <HAL_RCC_OscConfig+0x620>)
 80024ba:	6a1a      	ldr	r2, [r3, #32]
 80024bc:	4ba3      	ldr	r3, [pc, #652]	; (800274c <HAL_RCC_OscConfig+0x620>)
 80024be:	2104      	movs	r1, #4
 80024c0:	438a      	bics	r2, r1
 80024c2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d014      	beq.n	80024f6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024cc:	f7fe fda8 	bl	8001020 <HAL_GetTick>
 80024d0:	0003      	movs	r3, r0
 80024d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d4:	e009      	b.n	80024ea <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7fe fda3 	bl	8001020 <HAL_GetTick>
 80024da:	0002      	movs	r2, r0
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	4a9b      	ldr	r2, [pc, #620]	; (8002750 <HAL_RCC_OscConfig+0x624>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e12b      	b.n	8002742 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ea:	4b98      	ldr	r3, [pc, #608]	; (800274c <HAL_RCC_OscConfig+0x620>)
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	2202      	movs	r2, #2
 80024f0:	4013      	ands	r3, r2
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x3aa>
 80024f4:	e013      	b.n	800251e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f6:	f7fe fd93 	bl	8001020 <HAL_GetTick>
 80024fa:	0003      	movs	r3, r0
 80024fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fe:	e009      	b.n	8002514 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002500:	f7fe fd8e 	bl	8001020 <HAL_GetTick>
 8002504:	0002      	movs	r2, r0
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	4a91      	ldr	r2, [pc, #580]	; (8002750 <HAL_RCC_OscConfig+0x624>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e116      	b.n	8002742 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002514:	4b8d      	ldr	r3, [pc, #564]	; (800274c <HAL_RCC_OscConfig+0x620>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	2202      	movs	r2, #2
 800251a:	4013      	ands	r3, r2
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800251e:	231f      	movs	r3, #31
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d105      	bne.n	8002534 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002528:	4b88      	ldr	r3, [pc, #544]	; (800274c <HAL_RCC_OscConfig+0x620>)
 800252a:	69da      	ldr	r2, [r3, #28]
 800252c:	4b87      	ldr	r3, [pc, #540]	; (800274c <HAL_RCC_OscConfig+0x620>)
 800252e:	4989      	ldr	r1, [pc, #548]	; (8002754 <HAL_RCC_OscConfig+0x628>)
 8002530:	400a      	ands	r2, r1
 8002532:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2210      	movs	r2, #16
 800253a:	4013      	ands	r3, r2
 800253c:	d063      	beq.n	8002606 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d12a      	bne.n	800259c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002546:	4b81      	ldr	r3, [pc, #516]	; (800274c <HAL_RCC_OscConfig+0x620>)
 8002548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800254a:	4b80      	ldr	r3, [pc, #512]	; (800274c <HAL_RCC_OscConfig+0x620>)
 800254c:	2104      	movs	r1, #4
 800254e:	430a      	orrs	r2, r1
 8002550:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002552:	4b7e      	ldr	r3, [pc, #504]	; (800274c <HAL_RCC_OscConfig+0x620>)
 8002554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002556:	4b7d      	ldr	r3, [pc, #500]	; (800274c <HAL_RCC_OscConfig+0x620>)
 8002558:	2101      	movs	r1, #1
 800255a:	430a      	orrs	r2, r1
 800255c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe fd5f 	bl	8001020 <HAL_GetTick>
 8002562:	0003      	movs	r3, r0
 8002564:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002568:	f7fe fd5a 	bl	8001020 <HAL_GetTick>
 800256c:	0002      	movs	r2, r0
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e0e3      	b.n	8002742 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800257a:	4b74      	ldr	r3, [pc, #464]	; (800274c <HAL_RCC_OscConfig+0x620>)
 800257c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257e:	2202      	movs	r2, #2
 8002580:	4013      	ands	r3, r2
 8002582:	d0f1      	beq.n	8002568 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002584:	4b71      	ldr	r3, [pc, #452]	; (800274c <HAL_RCC_OscConfig+0x620>)
 8002586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002588:	22f8      	movs	r2, #248	; 0xf8
 800258a:	4393      	bics	r3, r2
 800258c:	0019      	movs	r1, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	00da      	lsls	r2, r3, #3
 8002594:	4b6d      	ldr	r3, [pc, #436]	; (800274c <HAL_RCC_OscConfig+0x620>)
 8002596:	430a      	orrs	r2, r1
 8002598:	635a      	str	r2, [r3, #52]	; 0x34
 800259a:	e034      	b.n	8002606 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	3305      	adds	r3, #5
 80025a2:	d111      	bne.n	80025c8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80025a4:	4b69      	ldr	r3, [pc, #420]	; (800274c <HAL_RCC_OscConfig+0x620>)
 80025a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025a8:	4b68      	ldr	r3, [pc, #416]	; (800274c <HAL_RCC_OscConfig+0x620>)
 80025aa:	2104      	movs	r1, #4
 80025ac:	438a      	bics	r2, r1
 80025ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80025b0:	4b66      	ldr	r3, [pc, #408]	; (800274c <HAL_RCC_OscConfig+0x620>)
 80025b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b4:	22f8      	movs	r2, #248	; 0xf8
 80025b6:	4393      	bics	r3, r2
 80025b8:	0019      	movs	r1, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	00da      	lsls	r2, r3, #3
 80025c0:	4b62      	ldr	r3, [pc, #392]	; (800274c <HAL_RCC_OscConfig+0x620>)
 80025c2:	430a      	orrs	r2, r1
 80025c4:	635a      	str	r2, [r3, #52]	; 0x34
 80025c6:	e01e      	b.n	8002606 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80025c8:	4b60      	ldr	r3, [pc, #384]	; (800274c <HAL_RCC_OscConfig+0x620>)
 80025ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025cc:	4b5f      	ldr	r3, [pc, #380]	; (800274c <HAL_RCC_OscConfig+0x620>)
 80025ce:	2104      	movs	r1, #4
 80025d0:	430a      	orrs	r2, r1
 80025d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80025d4:	4b5d      	ldr	r3, [pc, #372]	; (800274c <HAL_RCC_OscConfig+0x620>)
 80025d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025d8:	4b5c      	ldr	r3, [pc, #368]	; (800274c <HAL_RCC_OscConfig+0x620>)
 80025da:	2101      	movs	r1, #1
 80025dc:	438a      	bics	r2, r1
 80025de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e0:	f7fe fd1e 	bl	8001020 <HAL_GetTick>
 80025e4:	0003      	movs	r3, r0
 80025e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80025ea:	f7fe fd19 	bl	8001020 <HAL_GetTick>
 80025ee:	0002      	movs	r2, r0
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e0a2      	b.n	8002742 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025fc:	4b53      	ldr	r3, [pc, #332]	; (800274c <HAL_RCC_OscConfig+0x620>)
 80025fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002600:	2202      	movs	r2, #2
 8002602:	4013      	ands	r3, r2
 8002604:	d1f1      	bne.n	80025ea <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d100      	bne.n	8002610 <HAL_RCC_OscConfig+0x4e4>
 800260e:	e097      	b.n	8002740 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002610:	4b4e      	ldr	r3, [pc, #312]	; (800274c <HAL_RCC_OscConfig+0x620>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	220c      	movs	r2, #12
 8002616:	4013      	ands	r3, r2
 8002618:	2b08      	cmp	r3, #8
 800261a:	d100      	bne.n	800261e <HAL_RCC_OscConfig+0x4f2>
 800261c:	e06b      	b.n	80026f6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d14c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002626:	4b49      	ldr	r3, [pc, #292]	; (800274c <HAL_RCC_OscConfig+0x620>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	4b48      	ldr	r3, [pc, #288]	; (800274c <HAL_RCC_OscConfig+0x620>)
 800262c:	494a      	ldr	r1, [pc, #296]	; (8002758 <HAL_RCC_OscConfig+0x62c>)
 800262e:	400a      	ands	r2, r1
 8002630:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002632:	f7fe fcf5 	bl	8001020 <HAL_GetTick>
 8002636:	0003      	movs	r3, r0
 8002638:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263c:	f7fe fcf0 	bl	8001020 <HAL_GetTick>
 8002640:	0002      	movs	r2, r0
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e079      	b.n	8002742 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264e:	4b3f      	ldr	r3, [pc, #252]	; (800274c <HAL_RCC_OscConfig+0x620>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	049b      	lsls	r3, r3, #18
 8002656:	4013      	ands	r3, r2
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800265a:	4b3c      	ldr	r3, [pc, #240]	; (800274c <HAL_RCC_OscConfig+0x620>)
 800265c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265e:	220f      	movs	r2, #15
 8002660:	4393      	bics	r3, r2
 8002662:	0019      	movs	r1, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002668:	4b38      	ldr	r3, [pc, #224]	; (800274c <HAL_RCC_OscConfig+0x620>)
 800266a:	430a      	orrs	r2, r1
 800266c:	62da      	str	r2, [r3, #44]	; 0x2c
 800266e:	4b37      	ldr	r3, [pc, #220]	; (800274c <HAL_RCC_OscConfig+0x620>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4a3a      	ldr	r2, [pc, #232]	; (800275c <HAL_RCC_OscConfig+0x630>)
 8002674:	4013      	ands	r3, r2
 8002676:	0019      	movs	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	431a      	orrs	r2, r3
 8002682:	4b32      	ldr	r3, [pc, #200]	; (800274c <HAL_RCC_OscConfig+0x620>)
 8002684:	430a      	orrs	r2, r1
 8002686:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002688:	4b30      	ldr	r3, [pc, #192]	; (800274c <HAL_RCC_OscConfig+0x620>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4b2f      	ldr	r3, [pc, #188]	; (800274c <HAL_RCC_OscConfig+0x620>)
 800268e:	2180      	movs	r1, #128	; 0x80
 8002690:	0449      	lsls	r1, r1, #17
 8002692:	430a      	orrs	r2, r1
 8002694:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002696:	f7fe fcc3 	bl	8001020 <HAL_GetTick>
 800269a:	0003      	movs	r3, r0
 800269c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a0:	f7fe fcbe 	bl	8001020 <HAL_GetTick>
 80026a4:	0002      	movs	r2, r0
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e047      	b.n	8002742 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b2:	4b26      	ldr	r3, [pc, #152]	; (800274c <HAL_RCC_OscConfig+0x620>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	049b      	lsls	r3, r3, #18
 80026ba:	4013      	ands	r3, r2
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x574>
 80026be:	e03f      	b.n	8002740 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c0:	4b22      	ldr	r3, [pc, #136]	; (800274c <HAL_RCC_OscConfig+0x620>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b21      	ldr	r3, [pc, #132]	; (800274c <HAL_RCC_OscConfig+0x620>)
 80026c6:	4924      	ldr	r1, [pc, #144]	; (8002758 <HAL_RCC_OscConfig+0x62c>)
 80026c8:	400a      	ands	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026cc:	f7fe fca8 	bl	8001020 <HAL_GetTick>
 80026d0:	0003      	movs	r3, r0
 80026d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d6:	f7fe fca3 	bl	8001020 <HAL_GetTick>
 80026da:	0002      	movs	r2, r0
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e02c      	b.n	8002742 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e8:	4b18      	ldr	r3, [pc, #96]	; (800274c <HAL_RCC_OscConfig+0x620>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	2380      	movs	r3, #128	; 0x80
 80026ee:	049b      	lsls	r3, r3, #18
 80026f0:	4013      	ands	r3, r2
 80026f2:	d1f0      	bne.n	80026d6 <HAL_RCC_OscConfig+0x5aa>
 80026f4:	e024      	b.n	8002740 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e01f      	b.n	8002742 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002702:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_RCC_OscConfig+0x620>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002708:	4b10      	ldr	r3, [pc, #64]	; (800274c <HAL_RCC_OscConfig+0x620>)
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	2380      	movs	r3, #128	; 0x80
 8002712:	025b      	lsls	r3, r3, #9
 8002714:	401a      	ands	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	429a      	cmp	r2, r3
 800271c:	d10e      	bne.n	800273c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	220f      	movs	r2, #15
 8002722:	401a      	ands	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002728:	429a      	cmp	r2, r3
 800272a:	d107      	bne.n	800273c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	23f0      	movs	r3, #240	; 0xf0
 8002730:	039b      	lsls	r3, r3, #14
 8002732:	401a      	ands	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	0018      	movs	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	b008      	add	sp, #32
 8002748:	bd80      	pop	{r7, pc}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	40021000 	.word	0x40021000
 8002750:	00001388 	.word	0x00001388
 8002754:	efffffff 	.word	0xefffffff
 8002758:	feffffff 	.word	0xfeffffff
 800275c:	ffc2ffff 	.word	0xffc2ffff

08002760 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0b3      	b.n	80028dc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002774:	4b5b      	ldr	r3, [pc, #364]	; (80028e4 <HAL_RCC_ClockConfig+0x184>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2201      	movs	r2, #1
 800277a:	4013      	ands	r3, r2
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d911      	bls.n	80027a6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002782:	4b58      	ldr	r3, [pc, #352]	; (80028e4 <HAL_RCC_ClockConfig+0x184>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2201      	movs	r2, #1
 8002788:	4393      	bics	r3, r2
 800278a:	0019      	movs	r1, r3
 800278c:	4b55      	ldr	r3, [pc, #340]	; (80028e4 <HAL_RCC_ClockConfig+0x184>)
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002794:	4b53      	ldr	r3, [pc, #332]	; (80028e4 <HAL_RCC_ClockConfig+0x184>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2201      	movs	r2, #1
 800279a:	4013      	ands	r3, r2
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d001      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e09a      	b.n	80028dc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2202      	movs	r2, #2
 80027ac:	4013      	ands	r3, r2
 80027ae:	d015      	beq.n	80027dc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2204      	movs	r2, #4
 80027b6:	4013      	ands	r3, r2
 80027b8:	d006      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80027ba:	4b4b      	ldr	r3, [pc, #300]	; (80028e8 <HAL_RCC_ClockConfig+0x188>)
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	4b4a      	ldr	r3, [pc, #296]	; (80028e8 <HAL_RCC_ClockConfig+0x188>)
 80027c0:	21e0      	movs	r1, #224	; 0xe0
 80027c2:	00c9      	lsls	r1, r1, #3
 80027c4:	430a      	orrs	r2, r1
 80027c6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c8:	4b47      	ldr	r3, [pc, #284]	; (80028e8 <HAL_RCC_ClockConfig+0x188>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	22f0      	movs	r2, #240	; 0xf0
 80027ce:	4393      	bics	r3, r2
 80027d0:	0019      	movs	r1, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	4b44      	ldr	r3, [pc, #272]	; (80028e8 <HAL_RCC_ClockConfig+0x188>)
 80027d8:	430a      	orrs	r2, r1
 80027da:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2201      	movs	r2, #1
 80027e2:	4013      	ands	r3, r2
 80027e4:	d040      	beq.n	8002868 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d107      	bne.n	80027fe <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ee:	4b3e      	ldr	r3, [pc, #248]	; (80028e8 <HAL_RCC_ClockConfig+0x188>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	029b      	lsls	r3, r3, #10
 80027f6:	4013      	ands	r3, r2
 80027f8:	d114      	bne.n	8002824 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e06e      	b.n	80028dc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d107      	bne.n	8002816 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002806:	4b38      	ldr	r3, [pc, #224]	; (80028e8 <HAL_RCC_ClockConfig+0x188>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	049b      	lsls	r3, r3, #18
 800280e:	4013      	ands	r3, r2
 8002810:	d108      	bne.n	8002824 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e062      	b.n	80028dc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002816:	4b34      	ldr	r3, [pc, #208]	; (80028e8 <HAL_RCC_ClockConfig+0x188>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2202      	movs	r2, #2
 800281c:	4013      	ands	r3, r2
 800281e:	d101      	bne.n	8002824 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e05b      	b.n	80028dc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002824:	4b30      	ldr	r3, [pc, #192]	; (80028e8 <HAL_RCC_ClockConfig+0x188>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2203      	movs	r2, #3
 800282a:	4393      	bics	r3, r2
 800282c:	0019      	movs	r1, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <HAL_RCC_ClockConfig+0x188>)
 8002834:	430a      	orrs	r2, r1
 8002836:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002838:	f7fe fbf2 	bl	8001020 <HAL_GetTick>
 800283c:	0003      	movs	r3, r0
 800283e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002840:	e009      	b.n	8002856 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002842:	f7fe fbed 	bl	8001020 <HAL_GetTick>
 8002846:	0002      	movs	r2, r0
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	4a27      	ldr	r2, [pc, #156]	; (80028ec <HAL_RCC_ClockConfig+0x18c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e042      	b.n	80028dc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002856:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <HAL_RCC_ClockConfig+0x188>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	220c      	movs	r2, #12
 800285c:	401a      	ands	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	429a      	cmp	r2, r3
 8002866:	d1ec      	bne.n	8002842 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002868:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <HAL_RCC_ClockConfig+0x184>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2201      	movs	r2, #1
 800286e:	4013      	ands	r3, r2
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d211      	bcs.n	800289a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <HAL_RCC_ClockConfig+0x184>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2201      	movs	r2, #1
 800287c:	4393      	bics	r3, r2
 800287e:	0019      	movs	r1, r3
 8002880:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <HAL_RCC_ClockConfig+0x184>)
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002888:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <HAL_RCC_ClockConfig+0x184>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2201      	movs	r2, #1
 800288e:	4013      	ands	r3, r2
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d001      	beq.n	800289a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e020      	b.n	80028dc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2204      	movs	r2, #4
 80028a0:	4013      	ands	r3, r2
 80028a2:	d009      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80028a4:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <HAL_RCC_ClockConfig+0x188>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4a11      	ldr	r2, [pc, #68]	; (80028f0 <HAL_RCC_ClockConfig+0x190>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	0019      	movs	r1, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <HAL_RCC_ClockConfig+0x188>)
 80028b4:	430a      	orrs	r2, r1
 80028b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028b8:	f000 f820 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 80028bc:	0001      	movs	r1, r0
 80028be:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <HAL_RCC_ClockConfig+0x188>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	220f      	movs	r2, #15
 80028c6:	4013      	ands	r3, r2
 80028c8:	4a0a      	ldr	r2, [pc, #40]	; (80028f4 <HAL_RCC_ClockConfig+0x194>)
 80028ca:	5cd3      	ldrb	r3, [r2, r3]
 80028cc:	000a      	movs	r2, r1
 80028ce:	40da      	lsrs	r2, r3
 80028d0:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <HAL_RCC_ClockConfig+0x198>)
 80028d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80028d4:	2003      	movs	r0, #3
 80028d6:	f7fe fb5d 	bl	8000f94 <HAL_InitTick>
  
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	0018      	movs	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	b004      	add	sp, #16
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40022000 	.word	0x40022000
 80028e8:	40021000 	.word	0x40021000
 80028ec:	00001388 	.word	0x00001388
 80028f0:	fffff8ff 	.word	0xfffff8ff
 80028f4:	08003f44 	.word	0x08003f44
 80028f8:	20000000 	.word	0x20000000

080028fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028fc:	b590      	push	{r4, r7, lr}
 80028fe:	b08f      	sub	sp, #60	; 0x3c
 8002900:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002902:	2314      	movs	r3, #20
 8002904:	18fb      	adds	r3, r7, r3
 8002906:	4a2b      	ldr	r2, [pc, #172]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002908:	ca13      	ldmia	r2!, {r0, r1, r4}
 800290a:	c313      	stmia	r3!, {r0, r1, r4}
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002910:	1d3b      	adds	r3, r7, #4
 8002912:	4a29      	ldr	r2, [pc, #164]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002914:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002916:	c313      	stmia	r3!, {r0, r1, r4}
 8002918:	6812      	ldr	r2, [r2, #0]
 800291a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002920:	2300      	movs	r3, #0
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
 8002924:	2300      	movs	r3, #0
 8002926:	637b      	str	r3, [r7, #52]	; 0x34
 8002928:	2300      	movs	r3, #0
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002930:	4b22      	ldr	r3, [pc, #136]	; (80029bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002938:	220c      	movs	r2, #12
 800293a:	4013      	ands	r3, r2
 800293c:	2b04      	cmp	r3, #4
 800293e:	d002      	beq.n	8002946 <HAL_RCC_GetSysClockFreq+0x4a>
 8002940:	2b08      	cmp	r3, #8
 8002942:	d003      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x50>
 8002944:	e02d      	b.n	80029a2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002946:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002948:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800294a:	e02d      	b.n	80029a8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294e:	0c9b      	lsrs	r3, r3, #18
 8002950:	220f      	movs	r2, #15
 8002952:	4013      	ands	r3, r2
 8002954:	2214      	movs	r2, #20
 8002956:	18ba      	adds	r2, r7, r2
 8002958:	5cd3      	ldrb	r3, [r2, r3]
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800295c:	4b17      	ldr	r3, [pc, #92]	; (80029bc <HAL_RCC_GetSysClockFreq+0xc0>)
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	220f      	movs	r2, #15
 8002962:	4013      	ands	r3, r2
 8002964:	1d3a      	adds	r2, r7, #4
 8002966:	5cd3      	ldrb	r3, [r2, r3]
 8002968:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800296a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	025b      	lsls	r3, r3, #9
 8002970:	4013      	ands	r3, r2
 8002972:	d009      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002976:	4812      	ldr	r0, [pc, #72]	; (80029c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002978:	f7fd fbc6 	bl	8000108 <__udivsi3>
 800297c:	0003      	movs	r3, r0
 800297e:	001a      	movs	r2, r3
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	4353      	muls	r3, r2
 8002984:	637b      	str	r3, [r7, #52]	; 0x34
 8002986:	e009      	b.n	800299c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002988:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800298a:	000a      	movs	r2, r1
 800298c:	0152      	lsls	r2, r2, #5
 800298e:	1a52      	subs	r2, r2, r1
 8002990:	0193      	lsls	r3, r2, #6
 8002992:	1a9b      	subs	r3, r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	185b      	adds	r3, r3, r1
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800299c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029a0:	e002      	b.n	80029a8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029a2:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029a6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80029a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80029aa:	0018      	movs	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b00f      	add	sp, #60	; 0x3c
 80029b0:	bd90      	pop	{r4, r7, pc}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	08003e64 	.word	0x08003e64
 80029b8:	08003e74 	.word	0x08003e74
 80029bc:	40021000 	.word	0x40021000
 80029c0:	007a1200 	.word	0x007a1200

080029c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c8:	4b02      	ldr	r3, [pc, #8]	; (80029d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80029ca:	681b      	ldr	r3, [r3, #0]
}
 80029cc:	0018      	movs	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	20000000 	.word	0x20000000

080029d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80029dc:	f7ff fff2 	bl	80029c4 <HAL_RCC_GetHCLKFreq>
 80029e0:	0001      	movs	r1, r0
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	2207      	movs	r2, #7
 80029ea:	4013      	ands	r3, r2
 80029ec:	4a04      	ldr	r2, [pc, #16]	; (8002a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029ee:	5cd3      	ldrb	r3, [r2, r3]
 80029f0:	40d9      	lsrs	r1, r3
 80029f2:	000b      	movs	r3, r1
}    
 80029f4:	0018      	movs	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	40021000 	.word	0x40021000
 8002a00:	08003f54 	.word	0x08003f54

08002a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	025b      	lsls	r3, r3, #9
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d100      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002a20:	e08e      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002a22:	2017      	movs	r0, #23
 8002a24:	183b      	adds	r3, r7, r0
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a2a:	4b57      	ldr	r3, [pc, #348]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a2c:	69da      	ldr	r2, [r3, #28]
 8002a2e:	2380      	movs	r3, #128	; 0x80
 8002a30:	055b      	lsls	r3, r3, #21
 8002a32:	4013      	ands	r3, r2
 8002a34:	d110      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a36:	4b54      	ldr	r3, [pc, #336]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a38:	69da      	ldr	r2, [r3, #28]
 8002a3a:	4b53      	ldr	r3, [pc, #332]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a3c:	2180      	movs	r1, #128	; 0x80
 8002a3e:	0549      	lsls	r1, r1, #21
 8002a40:	430a      	orrs	r2, r1
 8002a42:	61da      	str	r2, [r3, #28]
 8002a44:	4b50      	ldr	r3, [pc, #320]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a46:	69da      	ldr	r2, [r3, #28]
 8002a48:	2380      	movs	r3, #128	; 0x80
 8002a4a:	055b      	lsls	r3, r3, #21
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a52:	183b      	adds	r3, r7, r0
 8002a54:	2201      	movs	r2, #1
 8002a56:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a58:	4b4c      	ldr	r3, [pc, #304]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	4013      	ands	r3, r2
 8002a62:	d11a      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a64:	4b49      	ldr	r3, [pc, #292]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b48      	ldr	r3, [pc, #288]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a6a:	2180      	movs	r1, #128	; 0x80
 8002a6c:	0049      	lsls	r1, r1, #1
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a72:	f7fe fad5 	bl	8001020 <HAL_GetTick>
 8002a76:	0003      	movs	r3, r0
 8002a78:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7a:	e008      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7c:	f7fe fad0 	bl	8001020 <HAL_GetTick>
 8002a80:	0002      	movs	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b64      	cmp	r3, #100	; 0x64
 8002a88:	d901      	bls.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e077      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8e:	4b3f      	ldr	r3, [pc, #252]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	4013      	ands	r3, r2
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a9a:	4b3b      	ldr	r3, [pc, #236]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a9c:	6a1a      	ldr	r2, [r3, #32]
 8002a9e:	23c0      	movs	r3, #192	; 0xc0
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d034      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	23c0      	movs	r3, #192	; 0xc0
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d02c      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002abc:	4b32      	ldr	r3, [pc, #200]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	4a33      	ldr	r2, [pc, #204]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ac6:	4b30      	ldr	r3, [pc, #192]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ac8:	6a1a      	ldr	r2, [r3, #32]
 8002aca:	4b2f      	ldr	r3, [pc, #188]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002acc:	2180      	movs	r1, #128	; 0x80
 8002ace:	0249      	lsls	r1, r1, #9
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ad4:	4b2c      	ldr	r3, [pc, #176]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ad6:	6a1a      	ldr	r2, [r3, #32]
 8002ad8:	4b2b      	ldr	r3, [pc, #172]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ada:	492e      	ldr	r1, [pc, #184]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002adc:	400a      	ands	r2, r1
 8002ade:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ae0:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	4013      	ands	r3, r2
 8002aec:	d013      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aee:	f7fe fa97 	bl	8001020 <HAL_GetTick>
 8002af2:	0003      	movs	r3, r0
 8002af4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af6:	e009      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af8:	f7fe fa92 	bl	8001020 <HAL_GetTick>
 8002afc:	0002      	movs	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	4a25      	ldr	r2, [pc, #148]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e038      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0c:	4b1e      	ldr	r3, [pc, #120]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	2202      	movs	r2, #2
 8002b12:	4013      	ands	r3, r2
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b16:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	4a1d      	ldr	r2, [pc, #116]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	0019      	movs	r1, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b26:	430a      	orrs	r2, r1
 8002b28:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b2a:	2317      	movs	r3, #23
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d105      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b34:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b36:	69da      	ldr	r2, [r3, #28]
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b3a:	4918      	ldr	r1, [pc, #96]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002b3c:	400a      	ands	r2, r1
 8002b3e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2201      	movs	r2, #1
 8002b46:	4013      	ands	r3, r2
 8002b48:	d009      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b4a:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	2203      	movs	r2, #3
 8002b50:	4393      	bics	r3, r2
 8002b52:	0019      	movs	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2220      	movs	r2, #32
 8002b64:	4013      	ands	r3, r2
 8002b66:	d009      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b68:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	2210      	movs	r2, #16
 8002b6e:	4393      	bics	r3, r2
 8002b70:	0019      	movs	r1, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	0018      	movs	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b006      	add	sp, #24
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40007000 	.word	0x40007000
 8002b90:	fffffcff 	.word	0xfffffcff
 8002b94:	fffeffff 	.word	0xfffeffff
 8002b98:	00001388 	.word	0x00001388
 8002b9c:	efffffff 	.word	0xefffffff

08002ba0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e042      	b.n	8002c38 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	223d      	movs	r2, #61	; 0x3d
 8002bb6:	5c9b      	ldrb	r3, [r3, r2]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d107      	bne.n	8002bce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	223c      	movs	r2, #60	; 0x3c
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7fe f893 	bl	8000cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	223d      	movs	r2, #61	; 0x3d
 8002bd2:	2102      	movs	r1, #2
 8002bd4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	0019      	movs	r1, r3
 8002be0:	0010      	movs	r0, r2
 8002be2:	f000 fa7d 	bl	80030e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2246      	movs	r2, #70	; 0x46
 8002bea:	2101      	movs	r1, #1
 8002bec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	223e      	movs	r2, #62	; 0x3e
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	5499      	strb	r1, [r3, r2]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	223f      	movs	r2, #63	; 0x3f
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	5499      	strb	r1, [r3, r2]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2240      	movs	r2, #64	; 0x40
 8002c02:	2101      	movs	r1, #1
 8002c04:	5499      	strb	r1, [r3, r2]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2241      	movs	r2, #65	; 0x41
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2242      	movs	r2, #66	; 0x42
 8002c12:	2101      	movs	r1, #1
 8002c14:	5499      	strb	r1, [r3, r2]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2243      	movs	r2, #67	; 0x43
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	5499      	strb	r1, [r3, r2]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2244      	movs	r2, #68	; 0x44
 8002c22:	2101      	movs	r1, #1
 8002c24:	5499      	strb	r1, [r3, r2]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2245      	movs	r2, #69	; 0x45
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	223d      	movs	r2, #61	; 0x3d
 8002c32:	2101      	movs	r1, #1
 8002c34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	0018      	movs	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b002      	add	sp, #8
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	223d      	movs	r2, #61	; 0x3d
 8002c4c:	5c9b      	ldrb	r3, [r3, r2]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d001      	beq.n	8002c58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e028      	b.n	8002caa <HAL_TIM_Base_Start+0x6a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	223d      	movs	r2, #61	; 0x3d
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a13      	ldr	r2, [pc, #76]	; (8002cb4 <HAL_TIM_Base_Start+0x74>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d004      	beq.n	8002c74 <HAL_TIM_Base_Start+0x34>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a12      	ldr	r2, [pc, #72]	; (8002cb8 <HAL_TIM_Base_Start+0x78>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d111      	bne.n	8002c98 <HAL_TIM_Base_Start+0x58>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2207      	movs	r2, #7
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b06      	cmp	r3, #6
 8002c84:	d010      	beq.n	8002ca8 <HAL_TIM_Base_Start+0x68>
    {
      __HAL_TIM_ENABLE(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2101      	movs	r1, #1
 8002c92:	430a      	orrs	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c96:	e007      	b.n	8002ca8 <HAL_TIM_Base_Start+0x68>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	0018      	movs	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b004      	add	sp, #16
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	40012c00 	.word	0x40012c00
 8002cb8:	40000400 	.word	0x40000400

08002cbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d124      	bne.n	8002d1c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2202      	movs	r2, #2
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d11d      	bne.n	8002d1c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	4252      	negs	r2, r2
 8002ce8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d004      	beq.n	8002d06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f000 f9d6 	bl	80030b0 <HAL_TIM_IC_CaptureCallback>
 8002d04:	e007      	b.n	8002d16 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f000 f9c9 	bl	80030a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	0018      	movs	r0, r3
 8002d12:	f000 f9d5 	bl	80030c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	2204      	movs	r2, #4
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d125      	bne.n	8002d76 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	2204      	movs	r2, #4
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d11e      	bne.n	8002d76 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2205      	movs	r2, #5
 8002d3e:	4252      	negs	r2, r2
 8002d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2202      	movs	r2, #2
 8002d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	23c0      	movs	r3, #192	; 0xc0
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4013      	ands	r3, r2
 8002d54:	d004      	beq.n	8002d60 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f000 f9a9 	bl	80030b0 <HAL_TIM_IC_CaptureCallback>
 8002d5e:	e007      	b.n	8002d70 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	0018      	movs	r0, r3
 8002d64:	f000 f99c 	bl	80030a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f000 f9a8 	bl	80030c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	2208      	movs	r2, #8
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	d124      	bne.n	8002dce <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	2208      	movs	r2, #8
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d11d      	bne.n	8002dce <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2209      	movs	r2, #9
 8002d98:	4252      	negs	r2, r2
 8002d9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2204      	movs	r2, #4
 8002da0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	2203      	movs	r2, #3
 8002daa:	4013      	ands	r3, r2
 8002dac:	d004      	beq.n	8002db8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	0018      	movs	r0, r3
 8002db2:	f000 f97d 	bl	80030b0 <HAL_TIM_IC_CaptureCallback>
 8002db6:	e007      	b.n	8002dc8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f000 f970 	bl	80030a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f000 f97c 	bl	80030c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	2210      	movs	r2, #16
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b10      	cmp	r3, #16
 8002dda:	d125      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2210      	movs	r2, #16
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b10      	cmp	r3, #16
 8002de8:	d11e      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2211      	movs	r2, #17
 8002df0:	4252      	negs	r2, r2
 8002df2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2208      	movs	r2, #8
 8002df8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69da      	ldr	r2, [r3, #28]
 8002e00:	23c0      	movs	r3, #192	; 0xc0
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4013      	ands	r3, r2
 8002e06:	d004      	beq.n	8002e12 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f000 f950 	bl	80030b0 <HAL_TIM_IC_CaptureCallback>
 8002e10:	e007      	b.n	8002e22 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	0018      	movs	r0, r3
 8002e16:	f000 f943 	bl	80030a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f000 f94f 	bl	80030c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	4013      	ands	r3, r2
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d10f      	bne.n	8002e56 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d108      	bne.n	8002e56 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	4252      	negs	r2, r2
 8002e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	0018      	movs	r0, r3
 8002e52:	f000 f91d 	bl	8003090 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	2280      	movs	r2, #128	; 0x80
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b80      	cmp	r3, #128	; 0x80
 8002e62:	d10f      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	2280      	movs	r2, #128	; 0x80
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b80      	cmp	r3, #128	; 0x80
 8002e70:	d108      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2281      	movs	r2, #129	; 0x81
 8002e78:	4252      	negs	r2, r2
 8002e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f000 fa8e 	bl	80033a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2240      	movs	r2, #64	; 0x40
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b40      	cmp	r3, #64	; 0x40
 8002e90:	d10f      	bne.n	8002eb2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2240      	movs	r2, #64	; 0x40
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b40      	cmp	r3, #64	; 0x40
 8002e9e:	d108      	bne.n	8002eb2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2241      	movs	r2, #65	; 0x41
 8002ea6:	4252      	negs	r2, r2
 8002ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	0018      	movs	r0, r3
 8002eae:	f000 f90f 	bl	80030d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b20      	cmp	r3, #32
 8002ebe:	d10f      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	d108      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2221      	movs	r2, #33	; 0x21
 8002ed4:	4252      	negs	r2, r2
 8002ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	0018      	movs	r0, r3
 8002edc:	f000 fa58 	bl	8003390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b002      	add	sp, #8
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef2:	230f      	movs	r3, #15
 8002ef4:	18fb      	adds	r3, r7, r3
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	223c      	movs	r2, #60	; 0x3c
 8002efe:	5c9b      	ldrb	r3, [r3, r2]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_TIM_ConfigClockSource+0x20>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e0bc      	b.n	8003082 <HAL_TIM_ConfigClockSource+0x19a>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	223c      	movs	r2, #60	; 0x3c
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	223d      	movs	r2, #61	; 0x3d
 8002f14:	2102      	movs	r1, #2
 8002f16:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2277      	movs	r2, #119	; 0x77
 8002f24:	4393      	bics	r3, r2
 8002f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4a58      	ldr	r2, [pc, #352]	; (800308c <HAL_TIM_ConfigClockSource+0x1a4>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2280      	movs	r2, #128	; 0x80
 8002f3e:	0192      	lsls	r2, r2, #6
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d040      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0xde>
 8002f44:	2280      	movs	r2, #128	; 0x80
 8002f46:	0192      	lsls	r2, r2, #6
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d900      	bls.n	8002f4e <HAL_TIM_ConfigClockSource+0x66>
 8002f4c:	e088      	b.n	8003060 <HAL_TIM_ConfigClockSource+0x178>
 8002f4e:	2280      	movs	r2, #128	; 0x80
 8002f50:	0152      	lsls	r2, r2, #5
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d100      	bne.n	8002f58 <HAL_TIM_ConfigClockSource+0x70>
 8002f56:	e088      	b.n	800306a <HAL_TIM_ConfigClockSource+0x182>
 8002f58:	2280      	movs	r2, #128	; 0x80
 8002f5a:	0152      	lsls	r2, r2, #5
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d900      	bls.n	8002f62 <HAL_TIM_ConfigClockSource+0x7a>
 8002f60:	e07e      	b.n	8003060 <HAL_TIM_ConfigClockSource+0x178>
 8002f62:	2b70      	cmp	r3, #112	; 0x70
 8002f64:	d018      	beq.n	8002f98 <HAL_TIM_ConfigClockSource+0xb0>
 8002f66:	d900      	bls.n	8002f6a <HAL_TIM_ConfigClockSource+0x82>
 8002f68:	e07a      	b.n	8003060 <HAL_TIM_ConfigClockSource+0x178>
 8002f6a:	2b60      	cmp	r3, #96	; 0x60
 8002f6c:	d04f      	beq.n	800300e <HAL_TIM_ConfigClockSource+0x126>
 8002f6e:	d900      	bls.n	8002f72 <HAL_TIM_ConfigClockSource+0x8a>
 8002f70:	e076      	b.n	8003060 <HAL_TIM_ConfigClockSource+0x178>
 8002f72:	2b50      	cmp	r3, #80	; 0x50
 8002f74:	d03b      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x106>
 8002f76:	d900      	bls.n	8002f7a <HAL_TIM_ConfigClockSource+0x92>
 8002f78:	e072      	b.n	8003060 <HAL_TIM_ConfigClockSource+0x178>
 8002f7a:	2b40      	cmp	r3, #64	; 0x40
 8002f7c:	d057      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x146>
 8002f7e:	d900      	bls.n	8002f82 <HAL_TIM_ConfigClockSource+0x9a>
 8002f80:	e06e      	b.n	8003060 <HAL_TIM_ConfigClockSource+0x178>
 8002f82:	2b30      	cmp	r3, #48	; 0x30
 8002f84:	d063      	beq.n	800304e <HAL_TIM_ConfigClockSource+0x166>
 8002f86:	d86b      	bhi.n	8003060 <HAL_TIM_ConfigClockSource+0x178>
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	d060      	beq.n	800304e <HAL_TIM_ConfigClockSource+0x166>
 8002f8c:	d868      	bhi.n	8003060 <HAL_TIM_ConfigClockSource+0x178>
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d05d      	beq.n	800304e <HAL_TIM_ConfigClockSource+0x166>
 8002f92:	2b10      	cmp	r3, #16
 8002f94:	d05b      	beq.n	800304e <HAL_TIM_ConfigClockSource+0x166>
 8002f96:	e063      	b.n	8003060 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	6899      	ldr	r1, [r3, #8]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f000 f980 	bl	80032ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2277      	movs	r2, #119	; 0x77
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	609a      	str	r2, [r3, #8]
      break;
 8002fc4:	e052      	b.n	800306c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	6899      	ldr	r1, [r3, #8]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f000 f969 	bl	80032ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2180      	movs	r1, #128	; 0x80
 8002fe6:	01c9      	lsls	r1, r1, #7
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	609a      	str	r2, [r3, #8]
      break;
 8002fec:	e03e      	b.n	800306c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6859      	ldr	r1, [r3, #4]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	001a      	movs	r2, r3
 8002ffc:	f000 f8dc 	bl	80031b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2150      	movs	r1, #80	; 0x50
 8003006:	0018      	movs	r0, r3
 8003008:	f000 f936 	bl	8003278 <TIM_ITRx_SetConfig>
      break;
 800300c:	e02e      	b.n	800306c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	6859      	ldr	r1, [r3, #4]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	001a      	movs	r2, r3
 800301c:	f000 f8fa 	bl	8003214 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2160      	movs	r1, #96	; 0x60
 8003026:	0018      	movs	r0, r3
 8003028:	f000 f926 	bl	8003278 <TIM_ITRx_SetConfig>
      break;
 800302c:	e01e      	b.n	800306c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	6859      	ldr	r1, [r3, #4]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	001a      	movs	r2, r3
 800303c:	f000 f8bc 	bl	80031b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2140      	movs	r1, #64	; 0x40
 8003046:	0018      	movs	r0, r3
 8003048:	f000 f916 	bl	8003278 <TIM_ITRx_SetConfig>
      break;
 800304c:	e00e      	b.n	800306c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	0019      	movs	r1, r3
 8003058:	0010      	movs	r0, r2
 800305a:	f000 f90d 	bl	8003278 <TIM_ITRx_SetConfig>
      break;
 800305e:	e005      	b.n	800306c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003060:	230f      	movs	r3, #15
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	2201      	movs	r2, #1
 8003066:	701a      	strb	r2, [r3, #0]
      break;
 8003068:	e000      	b.n	800306c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800306a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	223d      	movs	r2, #61	; 0x3d
 8003070:	2101      	movs	r1, #1
 8003072:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	223c      	movs	r2, #60	; 0x3c
 8003078:	2100      	movs	r1, #0
 800307a:	5499      	strb	r1, [r3, r2]

  return status;
 800307c:	230f      	movs	r3, #15
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	781b      	ldrb	r3, [r3, #0]
}
 8003082:	0018      	movs	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	b004      	add	sp, #16
 8003088:	bd80      	pop	{r7, pc}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	ffff00ff 	.word	0xffff00ff

08003090 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003098:	46c0      	nop			; (mov r8, r8)
 800309a:	46bd      	mov	sp, r7
 800309c:	b002      	add	sp, #8
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b002      	add	sp, #8
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030b8:	46c0      	nop			; (mov r8, r8)
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b002      	add	sp, #8
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030c8:	46c0      	nop			; (mov r8, r8)
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b002      	add	sp, #8
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030d8:	46c0      	nop			; (mov r8, r8)
 80030da:	46bd      	mov	sp, r7
 80030dc:	b002      	add	sp, #8
 80030de:	bd80      	pop	{r7, pc}

080030e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a2b      	ldr	r2, [pc, #172]	; (80031a0 <TIM_Base_SetConfig+0xc0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d003      	beq.n	8003100 <TIM_Base_SetConfig+0x20>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a2a      	ldr	r2, [pc, #168]	; (80031a4 <TIM_Base_SetConfig+0xc4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d108      	bne.n	8003112 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2270      	movs	r2, #112	; 0x70
 8003104:	4393      	bics	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a22      	ldr	r2, [pc, #136]	; (80031a0 <TIM_Base_SetConfig+0xc0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d00f      	beq.n	800313a <TIM_Base_SetConfig+0x5a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a21      	ldr	r2, [pc, #132]	; (80031a4 <TIM_Base_SetConfig+0xc4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00b      	beq.n	800313a <TIM_Base_SetConfig+0x5a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a20      	ldr	r2, [pc, #128]	; (80031a8 <TIM_Base_SetConfig+0xc8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d007      	beq.n	800313a <TIM_Base_SetConfig+0x5a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a1f      	ldr	r2, [pc, #124]	; (80031ac <TIM_Base_SetConfig+0xcc>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d003      	beq.n	800313a <TIM_Base_SetConfig+0x5a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a1e      	ldr	r2, [pc, #120]	; (80031b0 <TIM_Base_SetConfig+0xd0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d108      	bne.n	800314c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4a1d      	ldr	r2, [pc, #116]	; (80031b4 <TIM_Base_SetConfig+0xd4>)
 800313e:	4013      	ands	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	4313      	orrs	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2280      	movs	r2, #128	; 0x80
 8003150:	4393      	bics	r3, r2
 8003152:	001a      	movs	r2, r3
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	4313      	orrs	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <TIM_Base_SetConfig+0xc0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d007      	beq.n	800318a <TIM_Base_SetConfig+0xaa>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a0b      	ldr	r2, [pc, #44]	; (80031ac <TIM_Base_SetConfig+0xcc>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d003      	beq.n	800318a <TIM_Base_SetConfig+0xaa>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a0a      	ldr	r2, [pc, #40]	; (80031b0 <TIM_Base_SetConfig+0xd0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d103      	bne.n	8003192 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	615a      	str	r2, [r3, #20]
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	46bd      	mov	sp, r7
 800319c:	b004      	add	sp, #16
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40012c00 	.word	0x40012c00
 80031a4:	40000400 	.word	0x40000400
 80031a8:	40002000 	.word	0x40002000
 80031ac:	40014400 	.word	0x40014400
 80031b0:	40014800 	.word	0x40014800
 80031b4:	fffffcff 	.word	0xfffffcff

080031b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	2201      	movs	r2, #1
 80031d0:	4393      	bics	r3, r2
 80031d2:	001a      	movs	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	22f0      	movs	r2, #240	; 0xf0
 80031e2:	4393      	bics	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	220a      	movs	r2, #10
 80031f4:	4393      	bics	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	621a      	str	r2, [r3, #32]
}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	46bd      	mov	sp, r7
 8003210:	b006      	add	sp, #24
 8003212:	bd80      	pop	{r7, pc}

08003214 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	2210      	movs	r2, #16
 8003226:	4393      	bics	r3, r2
 8003228:	001a      	movs	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	4a0d      	ldr	r2, [pc, #52]	; (8003274 <TIM_TI2_ConfigInputStage+0x60>)
 800323e:	4013      	ands	r3, r2
 8003240:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	031b      	lsls	r3, r3, #12
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	22a0      	movs	r2, #160	; 0xa0
 8003250:	4393      	bics	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	621a      	str	r2, [r3, #32]
}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	46bd      	mov	sp, r7
 800326e:	b006      	add	sp, #24
 8003270:	bd80      	pop	{r7, pc}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	ffff0fff 	.word	0xffff0fff

08003278 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2270      	movs	r2, #112	; 0x70
 800328c:	4393      	bics	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	2207      	movs	r2, #7
 8003298:	4313      	orrs	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	609a      	str	r2, [r3, #8]
}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b004      	add	sp, #16
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	4a09      	ldr	r2, [pc, #36]	; (80032e8 <TIM_ETR_SetConfig+0x3c>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	021a      	lsls	r2, r3, #8
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	431a      	orrs	r2, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	609a      	str	r2, [r3, #8]
}
 80032e0:	46c0      	nop			; (mov r8, r8)
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b006      	add	sp, #24
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	ffff00ff 	.word	0xffff00ff

080032ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	223c      	movs	r2, #60	; 0x3c
 80032fa:	5c9b      	ldrb	r3, [r3, r2]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003300:	2302      	movs	r3, #2
 8003302:	e03c      	b.n	800337e <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	223c      	movs	r2, #60	; 0x3c
 8003308:	2101      	movs	r1, #1
 800330a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	223d      	movs	r2, #61	; 0x3d
 8003310:	2102      	movs	r1, #2
 8003312:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2270      	movs	r2, #112	; 0x70
 8003328:	4393      	bics	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a11      	ldr	r2, [pc, #68]	; (8003388 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d004      	beq.n	8003352 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a0f      	ldr	r2, [pc, #60]	; (800338c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d10c      	bne.n	800336c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2280      	movs	r2, #128	; 0x80
 8003356:	4393      	bics	r3, r2
 8003358:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	4313      	orrs	r3, r2
 8003362:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	223d      	movs	r2, #61	; 0x3d
 8003370:	2101      	movs	r1, #1
 8003372:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	223c      	movs	r2, #60	; 0x3c
 8003378:	2100      	movs	r1, #0
 800337a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	0018      	movs	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	b004      	add	sp, #16
 8003384:	bd80      	pop	{r7, pc}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	40012c00 	.word	0x40012c00
 800338c:	40000400 	.word	0x40000400

08003390 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003398:	46c0      	nop			; (mov r8, r8)
 800339a:	46bd      	mov	sp, r7
 800339c:	b002      	add	sp, #8
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033a8:	46c0      	nop			; (mov r8, r8)
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b002      	add	sp, #8
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e044      	b.n	800344c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d107      	bne.n	80033da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2274      	movs	r2, #116	; 0x74
 80033ce:	2100      	movs	r1, #0
 80033d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7fd fcb3 	bl	8000d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2224      	movs	r2, #36	; 0x24
 80033de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2101      	movs	r1, #1
 80033ec:	438a      	bics	r2, r1
 80033ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	0018      	movs	r0, r3
 80033f4:	f000 f8ea 	bl	80035cc <UART_SetConfig>
 80033f8:	0003      	movs	r3, r0
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e024      	b.n	800344c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	0018      	movs	r0, r3
 800340e:	f000 fa07 	bl	8003820 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	490d      	ldr	r1, [pc, #52]	; (8003454 <HAL_UART_Init+0xa4>)
 800341e:	400a      	ands	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2108      	movs	r1, #8
 800342e:	438a      	bics	r2, r1
 8003430:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2101      	movs	r1, #1
 800343e:	430a      	orrs	r2, r1
 8003440:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	0018      	movs	r0, r3
 8003446:	f000 fa9f 	bl	8003988 <UART_CheckIdleState>
 800344a:	0003      	movs	r3, r0
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	b002      	add	sp, #8
 8003452:	bd80      	pop	{r7, pc}
 8003454:	fffff7ff 	.word	0xfffff7ff

08003458 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	1dbb      	adds	r3, r7, #6
 8003464:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800346a:	2b20      	cmp	r3, #32
 800346c:	d000      	beq.n	8003470 <HAL_UART_Transmit_DMA+0x18>
 800346e:	e08a      	b.n	8003586 <HAL_UART_Transmit_DMA+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_UART_Transmit_DMA+0x26>
 8003476:	1dbb      	adds	r3, r7, #6
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e082      	b.n	8003588 <HAL_UART_Transmit_DMA+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	015b      	lsls	r3, r3, #5
 800348a:	429a      	cmp	r2, r3
 800348c:	d109      	bne.n	80034a2 <HAL_UART_Transmit_DMA+0x4a>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d105      	bne.n	80034a2 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2201      	movs	r2, #1
 800349a:	4013      	ands	r3, r2
 800349c:	d001      	beq.n	80034a2 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e072      	b.n	8003588 <HAL_UART_Transmit_DMA+0x130>
      }
    }

    __HAL_LOCK(huart);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2274      	movs	r2, #116	; 0x74
 80034a6:	5c9b      	ldrb	r3, [r3, r2]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_UART_Transmit_DMA+0x58>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e06b      	b.n	8003588 <HAL_UART_Transmit_DMA+0x130>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2274      	movs	r2, #116	; 0x74
 80034b4:	2101      	movs	r1, #1
 80034b6:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1dba      	adds	r2, r7, #6
 80034c2:	2150      	movs	r1, #80	; 0x50
 80034c4:	8812      	ldrh	r2, [r2, #0]
 80034c6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	1dba      	adds	r2, r7, #6
 80034cc:	2152      	movs	r1, #82	; 0x52
 80034ce:	8812      	ldrh	r2, [r2, #0]
 80034d0:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2280      	movs	r2, #128	; 0x80
 80034d6:	2100      	movs	r1, #0
 80034d8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2221      	movs	r2, #33	; 0x21
 80034de:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d02b      	beq.n	8003540 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ec:	4a28      	ldr	r2, [pc, #160]	; (8003590 <HAL_UART_Transmit_DMA+0x138>)
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f4:	4a27      	ldr	r2, [pc, #156]	; (8003594 <HAL_UART_Transmit_DMA+0x13c>)
 80034f6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034fc:	4a26      	ldr	r2, [pc, #152]	; (8003598 <HAL_UART_Transmit_DMA+0x140>)
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003504:	2200      	movs	r2, #0
 8003506:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003510:	0019      	movs	r1, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3328      	adds	r3, #40	; 0x28
 8003518:	001a      	movs	r2, r3
 800351a:	1dbb      	adds	r3, r7, #6
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	f7fe fb27 	bl	8001b70 <HAL_DMA_Start_IT>
 8003522:	1e03      	subs	r3, r0, #0
 8003524:	d00c      	beq.n	8003540 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2280      	movs	r2, #128	; 0x80
 800352a:	2110      	movs	r1, #16
 800352c:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2274      	movs	r2, #116	; 0x74
 8003532:	2100      	movs	r1, #0
 8003534:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2220      	movs	r2, #32
 800353a:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e023      	b.n	8003588 <HAL_UART_Transmit_DMA+0x130>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2240      	movs	r2, #64	; 0x40
 8003546:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2274      	movs	r2, #116	; 0x74
 800354c:	2100      	movs	r1, #0
 800354e:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003550:	f3ef 8310 	mrs	r3, PRIMASK
 8003554:	613b      	str	r3, [r7, #16]
  return(result);
 8003556:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003558:	61fb      	str	r3, [r7, #28]
 800355a:	2301      	movs	r3, #1
 800355c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f383 8810 	msr	PRIMASK, r3
}
 8003564:	46c0      	nop			; (mov r8, r8)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2180      	movs	r1, #128	; 0x80
 8003572:	430a      	orrs	r2, r1
 8003574:	609a      	str	r2, [r3, #8]
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	f383 8810 	msr	PRIMASK, r3
}
 8003580:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	e000      	b.n	8003588 <HAL_UART_Transmit_DMA+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003586:	2302      	movs	r3, #2
  }
}
 8003588:	0018      	movs	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	b008      	add	sp, #32
 800358e:	bd80      	pop	{r7, pc}
 8003590:	08003cad 	.word	0x08003cad
 8003594:	08003d41 	.word	0x08003d41
 8003598:	08003d5f 	.word	0x08003d5f

0800359c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035a4:	46c0      	nop			; (mov r8, r8)
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b002      	add	sp, #8
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80035b4:	46c0      	nop			; (mov r8, r8)
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b002      	add	sp, #8
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b002      	add	sp, #8
 80035ca:	bd80      	pop	{r7, pc}

080035cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035d4:	231e      	movs	r3, #30
 80035d6:	18fb      	adds	r3, r7, r3
 80035d8:	2200      	movs	r2, #0
 80035da:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a84      	ldr	r2, [pc, #528]	; (800380c <UART_SetConfig+0x240>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	0019      	movs	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	430a      	orrs	r2, r1
 8003608:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4a7f      	ldr	r2, [pc, #508]	; (8003810 <UART_SetConfig+0x244>)
 8003612:	4013      	ands	r3, r2
 8003614:	0019      	movs	r1, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	4a76      	ldr	r2, [pc, #472]	; (8003814 <UART_SetConfig+0x248>)
 800363a:	4013      	ands	r3, r2
 800363c:	0019      	movs	r1, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	430a      	orrs	r2, r1
 8003646:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003648:	4b73      	ldr	r3, [pc, #460]	; (8003818 <UART_SetConfig+0x24c>)
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	2203      	movs	r2, #3
 800364e:	4013      	ands	r3, r2
 8003650:	2b03      	cmp	r3, #3
 8003652:	d00d      	beq.n	8003670 <UART_SetConfig+0xa4>
 8003654:	d81b      	bhi.n	800368e <UART_SetConfig+0xc2>
 8003656:	2b02      	cmp	r3, #2
 8003658:	d014      	beq.n	8003684 <UART_SetConfig+0xb8>
 800365a:	d818      	bhi.n	800368e <UART_SetConfig+0xc2>
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <UART_SetConfig+0x9a>
 8003660:	2b01      	cmp	r3, #1
 8003662:	d00a      	beq.n	800367a <UART_SetConfig+0xae>
 8003664:	e013      	b.n	800368e <UART_SetConfig+0xc2>
 8003666:	231f      	movs	r3, #31
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]
 800366e:	e012      	b.n	8003696 <UART_SetConfig+0xca>
 8003670:	231f      	movs	r3, #31
 8003672:	18fb      	adds	r3, r7, r3
 8003674:	2202      	movs	r2, #2
 8003676:	701a      	strb	r2, [r3, #0]
 8003678:	e00d      	b.n	8003696 <UART_SetConfig+0xca>
 800367a:	231f      	movs	r3, #31
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	2204      	movs	r2, #4
 8003680:	701a      	strb	r2, [r3, #0]
 8003682:	e008      	b.n	8003696 <UART_SetConfig+0xca>
 8003684:	231f      	movs	r3, #31
 8003686:	18fb      	adds	r3, r7, r3
 8003688:	2208      	movs	r2, #8
 800368a:	701a      	strb	r2, [r3, #0]
 800368c:	e003      	b.n	8003696 <UART_SetConfig+0xca>
 800368e:	231f      	movs	r3, #31
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	2210      	movs	r2, #16
 8003694:	701a      	strb	r2, [r3, #0]
 8003696:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	2380      	movs	r3, #128	; 0x80
 800369e:	021b      	lsls	r3, r3, #8
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d15d      	bne.n	8003760 <UART_SetConfig+0x194>
  {
    switch (clocksource)
 80036a4:	231f      	movs	r3, #31
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d015      	beq.n	80036da <UART_SetConfig+0x10e>
 80036ae:	dc18      	bgt.n	80036e2 <UART_SetConfig+0x116>
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d00d      	beq.n	80036d0 <UART_SetConfig+0x104>
 80036b4:	dc15      	bgt.n	80036e2 <UART_SetConfig+0x116>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <UART_SetConfig+0xf4>
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d005      	beq.n	80036ca <UART_SetConfig+0xfe>
 80036be:	e010      	b.n	80036e2 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c0:	f7ff f98a 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 80036c4:	0003      	movs	r3, r0
 80036c6:	61bb      	str	r3, [r7, #24]
        break;
 80036c8:	e012      	b.n	80036f0 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036ca:	4b54      	ldr	r3, [pc, #336]	; (800381c <UART_SetConfig+0x250>)
 80036cc:	61bb      	str	r3, [r7, #24]
        break;
 80036ce:	e00f      	b.n	80036f0 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036d0:	f7ff f914 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 80036d4:	0003      	movs	r3, r0
 80036d6:	61bb      	str	r3, [r7, #24]
        break;
 80036d8:	e00a      	b.n	80036f0 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036da:	2380      	movs	r3, #128	; 0x80
 80036dc:	021b      	lsls	r3, r3, #8
 80036de:	61bb      	str	r3, [r7, #24]
        break;
 80036e0:	e006      	b.n	80036f0 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036e6:	231e      	movs	r3, #30
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	2201      	movs	r2, #1
 80036ec:	701a      	strb	r2, [r3, #0]
        break;
 80036ee:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d100      	bne.n	80036f8 <UART_SetConfig+0x12c>
 80036f6:	e07b      	b.n	80037f0 <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	005a      	lsls	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	085b      	lsrs	r3, r3, #1
 8003702:	18d2      	adds	r2, r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	0019      	movs	r1, r3
 800370a:	0010      	movs	r0, r2
 800370c:	f7fc fcfc 	bl	8000108 <__udivsi3>
 8003710:	0003      	movs	r3, r0
 8003712:	b29b      	uxth	r3, r3
 8003714:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	2b0f      	cmp	r3, #15
 800371a:	d91c      	bls.n	8003756 <UART_SetConfig+0x18a>
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	2380      	movs	r3, #128	; 0x80
 8003720:	025b      	lsls	r3, r3, #9
 8003722:	429a      	cmp	r2, r3
 8003724:	d217      	bcs.n	8003756 <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	b29a      	uxth	r2, r3
 800372a:	200e      	movs	r0, #14
 800372c:	183b      	adds	r3, r7, r0
 800372e:	210f      	movs	r1, #15
 8003730:	438a      	bics	r2, r1
 8003732:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	085b      	lsrs	r3, r3, #1
 8003738:	b29b      	uxth	r3, r3
 800373a:	2207      	movs	r2, #7
 800373c:	4013      	ands	r3, r2
 800373e:	b299      	uxth	r1, r3
 8003740:	183b      	adds	r3, r7, r0
 8003742:	183a      	adds	r2, r7, r0
 8003744:	8812      	ldrh	r2, [r2, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	183a      	adds	r2, r7, r0
 8003750:	8812      	ldrh	r2, [r2, #0]
 8003752:	60da      	str	r2, [r3, #12]
 8003754:	e04c      	b.n	80037f0 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8003756:	231e      	movs	r3, #30
 8003758:	18fb      	adds	r3, r7, r3
 800375a:	2201      	movs	r2, #1
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	e047      	b.n	80037f0 <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003760:	231f      	movs	r3, #31
 8003762:	18fb      	adds	r3, r7, r3
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b08      	cmp	r3, #8
 8003768:	d015      	beq.n	8003796 <UART_SetConfig+0x1ca>
 800376a:	dc18      	bgt.n	800379e <UART_SetConfig+0x1d2>
 800376c:	2b04      	cmp	r3, #4
 800376e:	d00d      	beq.n	800378c <UART_SetConfig+0x1c0>
 8003770:	dc15      	bgt.n	800379e <UART_SetConfig+0x1d2>
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <UART_SetConfig+0x1b0>
 8003776:	2b02      	cmp	r3, #2
 8003778:	d005      	beq.n	8003786 <UART_SetConfig+0x1ba>
 800377a:	e010      	b.n	800379e <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800377c:	f7ff f92c 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 8003780:	0003      	movs	r3, r0
 8003782:	61bb      	str	r3, [r7, #24]
        break;
 8003784:	e012      	b.n	80037ac <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003786:	4b25      	ldr	r3, [pc, #148]	; (800381c <UART_SetConfig+0x250>)
 8003788:	61bb      	str	r3, [r7, #24]
        break;
 800378a:	e00f      	b.n	80037ac <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800378c:	f7ff f8b6 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 8003790:	0003      	movs	r3, r0
 8003792:	61bb      	str	r3, [r7, #24]
        break;
 8003794:	e00a      	b.n	80037ac <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003796:	2380      	movs	r3, #128	; 0x80
 8003798:	021b      	lsls	r3, r3, #8
 800379a:	61bb      	str	r3, [r7, #24]
        break;
 800379c:	e006      	b.n	80037ac <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 800379e:	2300      	movs	r3, #0
 80037a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037a2:	231e      	movs	r3, #30
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	2201      	movs	r2, #1
 80037a8:	701a      	strb	r2, [r3, #0]
        break;
 80037aa:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d01e      	beq.n	80037f0 <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	085a      	lsrs	r2, r3, #1
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	18d2      	adds	r2, r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	0019      	movs	r1, r3
 80037c2:	0010      	movs	r0, r2
 80037c4:	f7fc fca0 	bl	8000108 <__udivsi3>
 80037c8:	0003      	movs	r3, r0
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b0f      	cmp	r3, #15
 80037d2:	d909      	bls.n	80037e8 <UART_SetConfig+0x21c>
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	2380      	movs	r3, #128	; 0x80
 80037d8:	025b      	lsls	r3, r3, #9
 80037da:	429a      	cmp	r2, r3
 80037dc:	d204      	bcs.n	80037e8 <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	60da      	str	r2, [r3, #12]
 80037e6:	e003      	b.n	80037f0 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 80037e8:	231e      	movs	r3, #30
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	2201      	movs	r2, #1
 80037ee:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80037fc:	231e      	movs	r3, #30
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	781b      	ldrb	r3, [r3, #0]
}
 8003802:	0018      	movs	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	b008      	add	sp, #32
 8003808:	bd80      	pop	{r7, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	ffff69f3 	.word	0xffff69f3
 8003810:	ffffcfff 	.word	0xffffcfff
 8003814:	fffff4ff 	.word	0xfffff4ff
 8003818:	40021000 	.word	0x40021000
 800381c:	007a1200 	.word	0x007a1200

08003820 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	2201      	movs	r2, #1
 800382e:	4013      	ands	r3, r2
 8003830:	d00b      	beq.n	800384a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	4a4a      	ldr	r2, [pc, #296]	; (8003964 <UART_AdvFeatureConfig+0x144>)
 800383a:	4013      	ands	r3, r2
 800383c:	0019      	movs	r1, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	2202      	movs	r2, #2
 8003850:	4013      	ands	r3, r2
 8003852:	d00b      	beq.n	800386c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	4a43      	ldr	r2, [pc, #268]	; (8003968 <UART_AdvFeatureConfig+0x148>)
 800385c:	4013      	ands	r3, r2
 800385e:	0019      	movs	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	2204      	movs	r2, #4
 8003872:	4013      	ands	r3, r2
 8003874:	d00b      	beq.n	800388e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	4a3b      	ldr	r2, [pc, #236]	; (800396c <UART_AdvFeatureConfig+0x14c>)
 800387e:	4013      	ands	r3, r2
 8003880:	0019      	movs	r1, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	2208      	movs	r2, #8
 8003894:	4013      	ands	r3, r2
 8003896:	d00b      	beq.n	80038b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	4a34      	ldr	r2, [pc, #208]	; (8003970 <UART_AdvFeatureConfig+0x150>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	0019      	movs	r1, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	2210      	movs	r2, #16
 80038b6:	4013      	ands	r3, r2
 80038b8:	d00b      	beq.n	80038d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4a2c      	ldr	r2, [pc, #176]	; (8003974 <UART_AdvFeatureConfig+0x154>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	0019      	movs	r1, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	2220      	movs	r2, #32
 80038d8:	4013      	ands	r3, r2
 80038da:	d00b      	beq.n	80038f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	4a25      	ldr	r2, [pc, #148]	; (8003978 <UART_AdvFeatureConfig+0x158>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	0019      	movs	r1, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	2240      	movs	r2, #64	; 0x40
 80038fa:	4013      	ands	r3, r2
 80038fc:	d01d      	beq.n	800393a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	4a1d      	ldr	r2, [pc, #116]	; (800397c <UART_AdvFeatureConfig+0x15c>)
 8003906:	4013      	ands	r3, r2
 8003908:	0019      	movs	r1, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800391a:	2380      	movs	r3, #128	; 0x80
 800391c:	035b      	lsls	r3, r3, #13
 800391e:	429a      	cmp	r2, r3
 8003920:	d10b      	bne.n	800393a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	4a15      	ldr	r2, [pc, #84]	; (8003980 <UART_AdvFeatureConfig+0x160>)
 800392a:	4013      	ands	r3, r2
 800392c:	0019      	movs	r1, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	2280      	movs	r2, #128	; 0x80
 8003940:	4013      	ands	r3, r2
 8003942:	d00b      	beq.n	800395c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4a0e      	ldr	r2, [pc, #56]	; (8003984 <UART_AdvFeatureConfig+0x164>)
 800394c:	4013      	ands	r3, r2
 800394e:	0019      	movs	r1, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	605a      	str	r2, [r3, #4]
  }
}
 800395c:	46c0      	nop			; (mov r8, r8)
 800395e:	46bd      	mov	sp, r7
 8003960:	b002      	add	sp, #8
 8003962:	bd80      	pop	{r7, pc}
 8003964:	fffdffff 	.word	0xfffdffff
 8003968:	fffeffff 	.word	0xfffeffff
 800396c:	fffbffff 	.word	0xfffbffff
 8003970:	ffff7fff 	.word	0xffff7fff
 8003974:	ffffefff 	.word	0xffffefff
 8003978:	ffffdfff 	.word	0xffffdfff
 800397c:	ffefffff 	.word	0xffefffff
 8003980:	ff9fffff 	.word	0xff9fffff
 8003984:	fff7ffff 	.word	0xfff7ffff

08003988 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af02      	add	r7, sp, #8
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2280      	movs	r2, #128	; 0x80
 8003994:	2100      	movs	r1, #0
 8003996:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003998:	f7fd fb42 	bl	8001020 <HAL_GetTick>
 800399c:	0003      	movs	r3, r0
 800399e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2208      	movs	r2, #8
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d10c      	bne.n	80039c8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2280      	movs	r2, #128	; 0x80
 80039b2:	0391      	lsls	r1, r2, #14
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	4a17      	ldr	r2, [pc, #92]	; (8003a14 <UART_CheckIdleState+0x8c>)
 80039b8:	9200      	str	r2, [sp, #0]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f000 f82c 	bl	8003a18 <UART_WaitOnFlagUntilTimeout>
 80039c0:	1e03      	subs	r3, r0, #0
 80039c2:	d001      	beq.n	80039c8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e021      	b.n	8003a0c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2204      	movs	r2, #4
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d10c      	bne.n	80039f0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2280      	movs	r2, #128	; 0x80
 80039da:	03d1      	lsls	r1, r2, #15
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	4a0d      	ldr	r2, [pc, #52]	; (8003a14 <UART_CheckIdleState+0x8c>)
 80039e0:	9200      	str	r2, [sp, #0]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f000 f818 	bl	8003a18 <UART_WaitOnFlagUntilTimeout>
 80039e8:	1e03      	subs	r3, r0, #0
 80039ea:	d001      	beq.n	80039f0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e00d      	b.n	8003a0c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2220      	movs	r2, #32
 80039f4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2220      	movs	r2, #32
 80039fa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2274      	movs	r2, #116	; 0x74
 8003a06:	2100      	movs	r1, #0
 8003a08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b004      	add	sp, #16
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	01ffffff 	.word	0x01ffffff

08003a18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b094      	sub	sp, #80	; 0x50
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	1dfb      	adds	r3, r7, #7
 8003a26:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a28:	e0a3      	b.n	8003b72 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	d100      	bne.n	8003a32 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003a30:	e09f      	b.n	8003b72 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a32:	f7fd faf5 	bl	8001020 <HAL_GetTick>
 8003a36:	0002      	movs	r2, r0
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d302      	bcc.n	8003a48 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d13d      	bne.n	8003ac4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a48:	f3ef 8310 	mrs	r3, PRIMASK
 8003a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a50:	647b      	str	r3, [r7, #68]	; 0x44
 8003a52:	2301      	movs	r3, #1
 8003a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	f383 8810 	msr	PRIMASK, r3
}
 8003a5c:	46c0      	nop			; (mov r8, r8)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	494c      	ldr	r1, [pc, #304]	; (8003b9c <UART_WaitOnFlagUntilTimeout+0x184>)
 8003a6a:	400a      	ands	r2, r1
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a70:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a74:	f383 8810 	msr	PRIMASK, r3
}
 8003a78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a7e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a82:	643b      	str	r3, [r7, #64]	; 0x40
 8003a84:	2301      	movs	r3, #1
 8003a86:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8a:	f383 8810 	msr	PRIMASK, r3
}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	438a      	bics	r2, r1
 8003a9e:	609a      	str	r2, [r3, #8]
 8003aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa6:	f383 8810 	msr	PRIMASK, r3
}
 8003aaa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2274      	movs	r2, #116	; 0x74
 8003abc:	2100      	movs	r1, #0
 8003abe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e067      	b.n	8003b94 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2204      	movs	r2, #4
 8003acc:	4013      	ands	r3, r2
 8003ace:	d050      	beq.n	8003b72 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	69da      	ldr	r2, [r3, #28]
 8003ad6:	2380      	movs	r3, #128	; 0x80
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	401a      	ands	r2, r3
 8003adc:	2380      	movs	r3, #128	; 0x80
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d146      	bne.n	8003b72 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2280      	movs	r2, #128	; 0x80
 8003aea:	0112      	lsls	r2, r2, #4
 8003aec:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aee:	f3ef 8310 	mrs	r3, PRIMASK
 8003af2:	613b      	str	r3, [r7, #16]
  return(result);
 8003af4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af8:	2301      	movs	r3, #1
 8003afa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f383 8810 	msr	PRIMASK, r3
}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4923      	ldr	r1, [pc, #140]	; (8003b9c <UART_WaitOnFlagUntilTimeout+0x184>)
 8003b10:	400a      	ands	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	f383 8810 	msr	PRIMASK, r3
}
 8003b1e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b20:	f3ef 8310 	mrs	r3, PRIMASK
 8003b24:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b26:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b28:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	f383 8810 	msr	PRIMASK, r3
}
 8003b34:	46c0      	nop			; (mov r8, r8)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2101      	movs	r1, #1
 8003b42:	438a      	bics	r2, r1
 8003b44:	609a      	str	r2, [r3, #8]
 8003b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	f383 8810 	msr	PRIMASK, r3
}
 8003b50:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2220      	movs	r2, #32
 8003b56:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2280      	movs	r2, #128	; 0x80
 8003b62:	2120      	movs	r1, #32
 8003b64:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2274      	movs	r2, #116	; 0x74
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e010      	b.n	8003b94 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	425a      	negs	r2, r3
 8003b82:	4153      	adcs	r3, r2
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	001a      	movs	r2, r3
 8003b88:	1dfb      	adds	r3, r7, #7
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d100      	bne.n	8003b92 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003b90:	e74b      	b.n	8003a2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	0018      	movs	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b014      	add	sp, #80	; 0x50
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	fffffe5f 	.word	0xfffffe5f

08003ba0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bac:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bae:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f383 8810 	msr	PRIMASK, r3
}
 8003bbc:	46c0      	nop			; (mov r8, r8)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	21c0      	movs	r1, #192	; 0xc0
 8003bca:	438a      	bics	r2, r1
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f383 8810 	msr	PRIMASK, r3
}
 8003bd8:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003be0:	46c0      	nop			; (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b006      	add	sp, #24
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08e      	sub	sp, #56	; 0x38
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf4:	617b      	str	r3, [r7, #20]
  return(result);
 8003bf6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	f383 8810 	msr	PRIMASK, r3
}
 8003c04:	46c0      	nop			; (mov r8, r8)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4925      	ldr	r1, [pc, #148]	; (8003ca8 <UART_EndRxTransfer+0xc0>)
 8003c12:	400a      	ands	r2, r1
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	f383 8810 	msr	PRIMASK, r3
}
 8003c20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c22:	f3ef 8310 	mrs	r3, PRIMASK
 8003c26:	623b      	str	r3, [r7, #32]
  return(result);
 8003c28:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2a:	633b      	str	r3, [r7, #48]	; 0x30
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	f383 8810 	msr	PRIMASK, r3
}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2101      	movs	r1, #1
 8003c44:	438a      	bics	r2, r1
 8003c46:	609a      	str	r2, [r3, #8]
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	f383 8810 	msr	PRIMASK, r3
}
 8003c52:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d118      	bne.n	8003c8e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c60:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c62:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c66:	2301      	movs	r3, #1
 8003c68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f383 8810 	msr	PRIMASK, r3
}
 8003c70:	46c0      	nop			; (mov r8, r8)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2110      	movs	r1, #16
 8003c7e:	438a      	bics	r2, r1
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f383 8810 	msr	PRIMASK, r3
}
 8003c8c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2220      	movs	r2, #32
 8003c92:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003ca0:	46c0      	nop			; (mov r8, r8)
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b00e      	add	sp, #56	; 0x38
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	fffffedf 	.word	0xfffffedf

08003cac <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08c      	sub	sp, #48	; 0x30
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	2b20      	cmp	r3, #32
 8003cc0:	d035      	beq.n	8003d2e <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 8003cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc4:	2252      	movs	r2, #82	; 0x52
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cca:	f3ef 8310 	mrs	r3, PRIMASK
 8003cce:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cd0:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f383 8810 	msr	PRIMASK, r3
}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2180      	movs	r1, #128	; 0x80
 8003cec:	438a      	bics	r2, r1
 8003cee:	609a      	str	r2, [r3, #8]
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f383 8810 	msr	PRIMASK, r3
}
 8003cfa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8003d00:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d02:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
 8003d06:	2301      	movs	r3, #1
 8003d08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f383 8810 	msr	PRIMASK, r3
}
 8003d10:	46c0      	nop			; (mov r8, r8)
 8003d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2140      	movs	r1, #64	; 0x40
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	f383 8810 	msr	PRIMASK, r3
}
 8003d2c:	e004      	b.n	8003d38 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8003d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d30:	0018      	movs	r0, r3
 8003d32:	f7ff fc33 	bl	800359c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	46c0      	nop			; (mov r8, r8)
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	b00c      	add	sp, #48	; 0x30
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	0018      	movs	r0, r3
 8003d52:	f7ff fc2b 	bl	80035ac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d56:	46c0      	nop			; (mov r8, r8)
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b004      	add	sp, #16
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b086      	sub	sp, #24
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d70:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2280      	movs	r2, #128	; 0x80
 8003d80:	4013      	ands	r3, r2
 8003d82:	2b80      	cmp	r3, #128	; 0x80
 8003d84:	d10a      	bne.n	8003d9c <UART_DMAError+0x3e>
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b21      	cmp	r3, #33	; 0x21
 8003d8a:	d107      	bne.n	8003d9c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2252      	movs	r2, #82	; 0x52
 8003d90:	2100      	movs	r1, #0
 8003d92:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	0018      	movs	r0, r3
 8003d98:	f7ff ff02 	bl	8003ba0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2240      	movs	r2, #64	; 0x40
 8003da4:	4013      	ands	r3, r2
 8003da6:	2b40      	cmp	r3, #64	; 0x40
 8003da8:	d10a      	bne.n	8003dc0 <UART_DMAError+0x62>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b22      	cmp	r3, #34	; 0x22
 8003dae:	d107      	bne.n	8003dc0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	225a      	movs	r2, #90	; 0x5a
 8003db4:	2100      	movs	r1, #0
 8003db6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f7ff ff14 	bl	8003be8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2280      	movs	r2, #128	; 0x80
 8003dc4:	589b      	ldr	r3, [r3, r2]
 8003dc6:	2210      	movs	r2, #16
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2180      	movs	r1, #128	; 0x80
 8003dce:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f7ff fbf2 	bl	80035bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dd8:	46c0      	nop			; (mov r8, r8)
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b006      	add	sp, #24
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <__libc_init_array>:
 8003de0:	b570      	push	{r4, r5, r6, lr}
 8003de2:	2600      	movs	r6, #0
 8003de4:	4d0c      	ldr	r5, [pc, #48]	; (8003e18 <__libc_init_array+0x38>)
 8003de6:	4c0d      	ldr	r4, [pc, #52]	; (8003e1c <__libc_init_array+0x3c>)
 8003de8:	1b64      	subs	r4, r4, r5
 8003dea:	10a4      	asrs	r4, r4, #2
 8003dec:	42a6      	cmp	r6, r4
 8003dee:	d109      	bne.n	8003e04 <__libc_init_array+0x24>
 8003df0:	2600      	movs	r6, #0
 8003df2:	f000 f82b 	bl	8003e4c <_init>
 8003df6:	4d0a      	ldr	r5, [pc, #40]	; (8003e20 <__libc_init_array+0x40>)
 8003df8:	4c0a      	ldr	r4, [pc, #40]	; (8003e24 <__libc_init_array+0x44>)
 8003dfa:	1b64      	subs	r4, r4, r5
 8003dfc:	10a4      	asrs	r4, r4, #2
 8003dfe:	42a6      	cmp	r6, r4
 8003e00:	d105      	bne.n	8003e0e <__libc_init_array+0x2e>
 8003e02:	bd70      	pop	{r4, r5, r6, pc}
 8003e04:	00b3      	lsls	r3, r6, #2
 8003e06:	58eb      	ldr	r3, [r5, r3]
 8003e08:	4798      	blx	r3
 8003e0a:	3601      	adds	r6, #1
 8003e0c:	e7ee      	b.n	8003dec <__libc_init_array+0xc>
 8003e0e:	00b3      	lsls	r3, r6, #2
 8003e10:	58eb      	ldr	r3, [r5, r3]
 8003e12:	4798      	blx	r3
 8003e14:	3601      	adds	r6, #1
 8003e16:	e7f2      	b.n	8003dfe <__libc_init_array+0x1e>
 8003e18:	08003f5c 	.word	0x08003f5c
 8003e1c:	08003f5c 	.word	0x08003f5c
 8003e20:	08003f5c 	.word	0x08003f5c
 8003e24:	08003f60 	.word	0x08003f60

08003e28 <memcpy>:
 8003e28:	2300      	movs	r3, #0
 8003e2a:	b510      	push	{r4, lr}
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d100      	bne.n	8003e32 <memcpy+0xa>
 8003e30:	bd10      	pop	{r4, pc}
 8003e32:	5ccc      	ldrb	r4, [r1, r3]
 8003e34:	54c4      	strb	r4, [r0, r3]
 8003e36:	3301      	adds	r3, #1
 8003e38:	e7f8      	b.n	8003e2c <memcpy+0x4>

08003e3a <memset>:
 8003e3a:	0003      	movs	r3, r0
 8003e3c:	1882      	adds	r2, r0, r2
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d100      	bne.n	8003e44 <memset+0xa>
 8003e42:	4770      	bx	lr
 8003e44:	7019      	strb	r1, [r3, #0]
 8003e46:	3301      	adds	r3, #1
 8003e48:	e7f9      	b.n	8003e3e <memset+0x4>
	...

08003e4c <_init>:
 8003e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e52:	bc08      	pop	{r3}
 8003e54:	469e      	mov	lr, r3
 8003e56:	4770      	bx	lr

08003e58 <_fini>:
 8003e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5e:	bc08      	pop	{r3}
 8003e60:	469e      	mov	lr, r3
 8003e62:	4770      	bx	lr
